[
  {
    "owner": "strapi",
    "repo": "documentation",
    "content": "TITLE: Configuring Strapi Admin for Different-Server Deployment (JavaScript)\nDESCRIPTION: JavaScript configuration for the Strapi admin when deploying on a different server. This sets the admin URL and disables serving static admin files from the backend.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/deployment.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  /**\n   * Note: The administration will be accessible from the root of the domain \n   * (ex: http://yourfrontend.com/)\n   */ \n  url: \"/\",\n  serveAdminPanel: false, // http://yourbackend.com will not serve any static admin files\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Implementation in Strapi\nDESCRIPTION: Demonstrates the basic usage of transactions in Strapi using the strapi.db.transaction method with entity service operations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-transactions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.transaction(async ({ trx, rollback, commit, onCommit, onRollback }) => {\n  // It will implicitly use the transaction\n  await strapi.entityService.create();\n  await strapi.entityService.create();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server in TypeScript - Default Environment\nDESCRIPTION: Default server configuration for development environment in TypeScript defining the host address as 127.0.0.1.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/environment.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: '127.0.0.1',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Settings Section in Strapi Admin Panel\nDESCRIPTION: Illustrates how to create a new settings section in Strapi's admin panel using the createSettingSection() function. It shows how to define the section label and add links to the section with various parameters including label, path, component, and permissions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst myComponent = async () => {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  register(app) {\n    app.createSettingSection(\n      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create\n      [\n        // links\n        {\n          intlLabel: { id: String, defaultMessage: String },\n          id: String,\n          to: String,\n          Component: myComponent,\n          permissions: Object[],\n        },\n      ]\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Strapi Services in TypeScript\nDESCRIPTION: TypeScript implementation of Strapi services showing the same three methods: creating a custom service, wrapping a core service, and replacing a core service. Uses the factories.createCoreService function with proper TypeScript imports.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { factories } from '@strapi/strapi'; \n\nexport default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // Method 1: Creating an entirely custom service\n  async exampleService(...args) {\n    let response = { okay: true }\n\n    if (response.okay === false) {\n      return { response, error: true }\n    }\n\n    return response\n  },\n\n  // Method 2: Wrapping a core service (leaves core logic in place)\n  async find(...args) {  \n    // Calling the default core controller\n    const { results, pagination } = await super.find(...args);\n\n    // some custom logic\n    results.forEach(result => {\n      result.counter = 1;\n    });\n\n    return { results, pagination };\n  },\n\n  // Method 3: Replacing a core service\n  async findOne(documentId, params = {}) {\n     return strapi.documents('api::restaurant.restaurant').findOne(documentId, this.getFetchParams(params));\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Strapi Client with Basic Configuration\nDESCRIPTION: Code to initialize the Strapi Client with a base URL pointing to your Strapi API endpoint. This is the basic setup needed to start making API calls.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { strapi } from '@strapi/client';\n\nconst client = strapi({ baseURL: 'http://localhost:1337/api' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi TypeScript Types\nDESCRIPTION: Example showing how to declare and use Strapi types for TypeScript autocompletion in a Strapi application's index.ts file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/development.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Strapi } from '@strapi/strapi';\n\nexport default {\n  register({ strapi }: { strapi: Strapi }) {\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Strapi Services in JavaScript\nDESCRIPTION: Demonstrates three methods for implementing Strapi services: creating a new custom service, wrapping a core service while preserving its logic, and replacing a core service entirely. Uses the createCoreService factory function to generate a service for the restaurant API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // Method 1: Creating an entirely new custom service\n  async exampleService(...args) {\n    let response = { okay: true }\n\n    if (response.okay === false) {\n      return { response, error: true }\n    }\n\n    return response\n  },\n\n  // Method 2: Wrapping a core service (leaves core logic in place)\n  async find(...args) {  \n    // Calling the default core controller\n    const { results, pagination } = await super.find(...args);\n\n    // some custom logic\n    results.forEach(result => {\n      result.counter = 1;\n    });\n\n    return { results, pagination };\n  },\n\n  // Method 3: Replacing a core service\n  async findOne(documentId, params = {}) {\n    return strapi.documents('api::restaurant.restaurant').findOne(documentId, this.getFetchParams(params));\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One and One-to-Many Bidirectional Relations in Strapi Schema\nDESCRIPTION: Examples of configuring a bidirectional many-to-one relationship in Strapi, where an article belongs to one category but a category has many articles. Includes configuration for both sides of the relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  author: {\n    type: 'relation',\n    relation: 'manyToOne',\n    target: 'category',\n    inversedBy: 'article',\n  },\n},\n// …\n```\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  books: {\n    type: 'relation',\n    relation: 'oneToMany',\n    target: 'article',\n    mappedBy: 'category',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Model Lifecycles (JavaScript)\nDESCRIPTION: Example of throwing errors in Strapi model lifecycles using the ApplicationError class. It demonstrates how to prevent an entity from being created based on a condition.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errors } = require('@strapi/utils');\nconst { ApplicationError } = errors;\n\nmodule.exports = {\n  beforeCreate(event) {\n    let okay = false;\n\n    // Throwing an error will prevent the entity from being created\n    if (!okay) {\n      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware in Strapi (TypeScript)\nDESCRIPTION: Basic structure for creating a custom middleware in Strapi using TypeScript. The middleware function takes configuration and Strapi instance as parameters and returns a function that handles the request context.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (config, { strapi })=> {\n  return (context, next) => {};\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Strapi Admin Settings in TypeScript\nDESCRIPTION: This snippet shows a full configuration for the Strapi admin panel in TypeScript. It includes comprehensive settings for API tokens, audit logs, authentication, URL, file watching, host, port, admin panel serving, forgot password, rate limiting, and transfer tokens.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/admin-panel.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  apiToken: {\n    salt: env('API_TOKEN_SALT', 'someRandomLongString'),\n  },\n  auditLogs: { // only accessible with an Enterprise plan\n    enabled: env.bool('AUDIT_LOGS_ENABLED', true),\n    retentionDays: 120,\n  },\n  auth: {\n    events: {\n      onConnectionSuccess(e) {\n        console.log(e.user, e.provider);\n      },\n      onConnectionError(e) {\n        console.error(e.error, e.provider);\n      },\n    },\n    options: {\n      expiresIn: '7d',\n    },\n    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),\n  },\n  url: env('PUBLIC_ADMIN_URL', '/dashboard'),\n  autoOpen: false,\n  watchIgnoreFiles: [\n    './my-custom-folder', // Folder\n    './scripts/someScript.sh', // File\n  ],\n  host: 'localhost',\n  port: 8003,\n  serveAdminPanel: env.bool('SERVE_ADMIN', true),\n  forgotPassword: {\n    from: 'no-reply@example.com',\n    replyTo: 'no-reply@example.com',\n  },\n  rateLimit: {\n    interval: { hour: 1, min: 30 },\n    timeWait: 3*1000,\n    max: 10,\n  },\n  transfer: { \n    token: { \n      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),\n    } \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Restaurant Document with Strapi Document Service\nDESCRIPTION: Updates an existing restaurant document by ID with new name data. Returns the updated document with metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').update({ \n    documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n    data: { name: \"New restaurant name\" }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring API Settings in JavaScript for Strapi\nDESCRIPTION: This code snippet demonstrates how to configure API settings in Strapi using JavaScript. It sets private attributes for responses, defines a custom API prefix, and adjusts default and maximum limits for pagination.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/api.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  responses: {\n    privateAttributes: ['_v', 'id', 'created_at'],\n  },\n  rest: {\n    prefix: '/v1',\n    defaultLimit: 100,\n    maxLimit: 250,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Query Engine Usage in Strapi\nDESCRIPTION: Demonstrates how to use Strapi's Query Engine API to query articles with specific title filters and populate related categories. The query uses the strapi.db.query method with a UID syntax for content type identification.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::blog.article').findMany({\n  where: {\n    title: {\n      $startsWith: '2021',\n      $endsWith: 'v4',\n    },\n  },\n  populate: {\n    category: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB Database Configuration in Strapi\nDESCRIPTION: Example configuration for connecting Strapi to a MySQL or MariaDB database. Includes settings for host, port, database name, user credentials, and SSL options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'mysql',\n    connection: {\n      host: env('DATABASE_HOST', '127.0.0.1'),\n      port: env.int('DATABASE_PORT', 3306),\n      database: env('DATABASE_NAME', 'strapi'),\n      user: env('DATABASE_USERNAME', 'strapi'),\n      password: env('DATABASE_PASSWORD', 'strapi'),\n      ssl: {\n        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates\n      },\n    },\n    debug: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Strapi Plugin in Admin Panel\nDESCRIPTION: Example of how to register a plugin in the admin panel by implementing the register() lifecycle function. This includes adding a menu link and registering the plugin with its ID and name.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Auto-generated component\nimport PluginIcon from './components/PluginIcon';\nimport pluginId from './pluginId'\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: `/plugins/${pluginId}`,\n      icon: PluginIcon,\n      intlLabel: {\n        id: `${pluginId}.plugin.name`,\n        defaultMessage: 'My plugin',\n      },\n      Component: async () => {\n        const component = await import(/* webpackChunkName: \"my-plugin\" */ './pages/App');\n\n        return component;\n      },\n      permissions: [], // array of permissions (object), allow a user to access a plugin depending on its permissions\n    });\n    app.registerPlugin({\n      id: pluginId,\n      name,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Strapi TypeScript\nDESCRIPTION: TypeScript configuration file for Strapi database connections supporting MySQL, PostgreSQL and SQLite with environment variables. Includes SSL configuration options and connection pooling settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\n\nexport default = ({ env }) => {\n  const client = env('DATABASE_CLIENT', 'sqlite');\n\n  const connections = {\n    mysql: {\n      connection: {\n        connectionString: env('DATABASE_URL'),\n        host: env('DATABASE_HOST', 'localhost'),\n        port: env.int('DATABASE_PORT', 3306),\n        database: env('DATABASE_NAME', 'strapi'),\n        user: env('DATABASE_USERNAME', 'strapi'),\n        password: env('DATABASE_PASSWORD', 'strapi'),\n        ssl: env.bool('DATABASE_SSL', false) && {\n          key: env('DATABASE_SSL_KEY', undefined),\n          cert: env('DATABASE_SSL_CERT', undefined),\n          ca: env('DATABASE_SSL_CA', undefined),\n          capath: env('DATABASE_SSL_CAPATH', undefined),\n          cipher: env('DATABASE_SSL_CIPHER', undefined),\n          rejectUnauthorized: env.bool(\n            'DATABASE_SSL_REJECT_UNAUTHORIZED',\n            true\n          ),\n        },\n      },\n      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n    },\n    postgres: {\n      connection: {\n        connectionString: env('DATABASE_URL'),\n        host: env('DATABASE_HOST', 'localhost'),\n        port: env.int('DATABASE_PORT', 3306),\n        database: env('DATABASE_NAME', 'strapi'),\n        user: env('DATABASE_USERNAME', 'strapi'),\n        password: env('DATABASE_PASSWORD', 'strapi'),\n        ssl: env.bool('DATABASE_SSL', false) && {\n          key: env('DATABASE_SSL_KEY', undefined),\n          cert: env('DATABASE_SSL_CERT', undefined),\n          ca: env('DATABASE_SSL_CA', undefined),\n          capath: env('DATABASE_SSL_CAPATH', undefined),\n          cipher: env('DATABASE_SSL_CIPHER', undefined),\n          rejectUnauthorized: env.bool(\n            'DATABASE_SSL_REJECT_UNAUTHORIZED',\n            true\n          ),\n        },\n        schema: env('DATABASE_SCHEMA', 'public'),\n      },\n      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n    },\n    sqlite: {\n      connection: {\n        filename: path.join(\n          __dirname,\n          '..',\n          env('DATABASE_FILENAME', 'data.db')\n        ),\n      },\n      useNullAsDefault: true,\n    },\n  };\n\n  return {\n    connection: {\n      client,\n      ...connections[client],\n      acquireConnectionTimeout: env.int('DATABASE_CONNECTION_TIMEOUT', 60000),\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Query Parameters with Strapi's Interactive Query Builder\nDESCRIPTION: This JavaScript object demonstrates how to structure query parameters for Strapi's REST API. It includes examples of sorting, filtering, populating relations, selecting fields, pagination, and localization parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/interactive-query-builder.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  sort: ['title:asc'],\n  filters: {\n    title: {\n      $eq: 'hello',\n    },\n  },\n  populate: {\n    author: {\n      fields: ['firstName', 'lastName']\n    }\n  },\n  fields: ['title'],\n  pagination: {\n    pageSize: 10,\n    page: 1,\n  },\n  status: 'published',\n  locale: ['en'],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Bidirectional Relation in Strapi Schema\nDESCRIPTION: Examples of configuring a bidirectional many-to-many relationship in Strapi, where an article can have many tags and a tag can be assigned to many articles. Includes configuration for both sides of the relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  tags: {\n    type: 'relation',\n    relation: 'manyToMany',\n    target: 'tag',\n    inversedBy: 'articles',\n  },\n},\n// …\n```\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  articles: {\n    type: 'relation',\n    relation: 'manyToMany',\n    target: 'article',\n    mappedBy: 'tag',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Services (TypeScript)\nDESCRIPTION: TypeScript version of throwing custom errors in Strapi services using the ApplicationError class from @strapi/utils. It demonstrates extending a core service and adding custom validation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@strapi/utils';\nimport { factories } from '@strapi/strapi';\n\nconst { ApplicationError } = errors;\n\nexport default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({\n  async create(params) {\n    let okay = false;\n\n    // Throwing an error will prevent the restaurant from being created\n    if (!okay) {\n      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });\n    }\n  \n    const result = await super.create(params);\n\n    return result;\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta SSO Provider in TypeScript\nDESCRIPTION: TypeScript configuration for Okta SSO provider in Strapi's admin configuration file. Implements the same OAuth2 strategy with type safety.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/okta.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Strategy as OktaOAuth2Strategy } from \"passport-okta-oauth20\";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"okta\",\n        displayName: \"Okta\",\n        icon: \"https://www.okta.com/sites/default/files/Okta_Logo_BrightBlue_Medium-thumbnail.png\",\n        createStrategy: (strapi) =>\n          new OktaOAuth2Strategy(\n            {\n              clientID: env(\"OKTA_CLIENT_ID\"),\n              clientSecret: env(\"OKTA_CLIENT_SECRET\"),\n              audience: env(\"OKTA_DOMAIN\"),\n              scope: [\"openid\", \"email\", \"profile\"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\"okta\"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server (Full Configuration in TypeScript)\nDESCRIPTION: A comprehensive server configuration example for Strapi in TypeScript, including advanced options like socket paths, URL configuration, proxy settings, cron job enablement, transfer features, and logger configurations. This demonstrates all available configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/server.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  app: {\n    keys: env.array('APP_KEYS'),\n  },\n  socket: '/tmp/nginx.socket', // only use if absolutely required\n  emitErrors: false,\n  url: env('PUBLIC_URL', 'https://api.example.com'),\n  proxy: env.bool('IS_PROXIED', true),\n  cron: {\n    enabled: env.bool('CRON_ENABLED', false),\n  },\n  transfer: {\n    remote: {\n      enabled: false,\n    },\n  },\n  logger: {\n    updates: {\n      enabled: false,\n    },\n    startup: {\n      enabled: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: REST API Get Single Document Response Example in JSON\nDESCRIPTION: Example JSON response when fetching a single restaurant document by its documentId. Shows how individual documents are structured in Strapi 5, with a flattened data structure and metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 6,\n    \"documentId\": \"znrlzntu9ei5onjvwfaalu2v\",\n    \"Name\": \"Biscotte Restaurant\",\n    \"Description\": [\n      {\n        \"type\": \"paragraph\",\n        \"children\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine bassics, such as 4 Formaggi or Calzone, and our original creations such as Do Luigi or Nduja.\"\n          }\n        ]\n      }\n    ],\n    \"createdAt\": \"2024-02-27T10:19:04.953Z\",\n    \"updatedAt\": \"2024-03-05T15:52:05.591Z\",\n    \"publishedAt\": \"2024-03-05T15:52:05.600Z\",\n    \"locale\": \"en\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Strapi Admin Panel Configuration Files\nDESCRIPTION: The documentation references two main configuration files for customizing the Strapi admin panel: config/admin.ts|js for host, port, and path configuration, and src/admin/app.ts|js for visual customization options like logos, notifications, and theming.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconfig/admin.ts|js\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsrc/admin/app.ts|js\n```\n\n----------------------------------------\n\nTITLE: Configuring Root tsconfig.json for Strapi TypeScript Support\nDESCRIPTION: This configuration extends Strapi's server TypeScript settings, enables JavaScript files to coexist with TypeScript files through the allowJs flag, and defines included and excluded directories and files for the TypeScript compiler.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/adding-support-to-existing-project.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"@strapi/typescript-utils/tsconfigs/server\",\n    \"compilerOptions\": {\n      \"outDir\": \"dist\",\n      \"rootDir\": \".\",\n      \"allowJs\": true //enables the build without .ts files\n    },\n    \"include\": [\n      \"./\",\n      \"src/**/*.json\"\n    ],\n    \"exclude\": [\n      \"node_modules/\",\n      \"build/\",\n      \"dist/\",\n      \".cache/\",\n      \".tmp/\",\n      \"src/admin/\",\n      \"**/*.test.ts\",\n      \"src/plugins/**\"\n    ]\n  \n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Restaurant Document via POST Request\nDESCRIPTION: Creates a new restaurant document with a name and rich text description. The request is sent to the restaurants endpoint and returns the created document with metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"data\": {\n    \"Name\": \"Restaurant D\",\n    \"Description\": [\n      {\n        \"type\": \"paragraph\",\n        \"children\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"A very short description goes here.\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"documentId\": \"bw64dnu97i56nq85106yt4du\",\n    \"Name\": \"Restaurant D\",\n    \"Description\": [\n      {\n        \"type\": \"paragraph\",\n        \"children\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"A very short description goes here.\"\n          }\n        ]\n      }\n    ],\n    \"createdAt\": \"2024-03-05T16:44:47.689Z\",\n    \"updatedAt\": \"2024-03-05T16:44:47.689Z\",\n    \"publishedAt\": \"2024-03-05T16:44:47.687Z\",\n    \"locale\": \"en\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server (Minimal Configuration in TypeScript)\nDESCRIPTION: The minimal server configuration for a Strapi application in TypeScript, defining essential parameters like host, port, and application keys. This configuration uses the env() helper to allow for environment-specific values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/server.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  app: {\n    keys: env.array('APP_KEYS'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Strapi Admin Settings in JavaScript\nDESCRIPTION: This snippet demonstrates a full configuration for the Strapi admin panel in JavaScript. It includes extensive settings for API tokens, audit logs, authentication, URL, file watching, host, port, admin panel serving, forgot password, rate limiting, and transfer tokens.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/admin-panel.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  apiToken: {\n    salt: env('API_TOKEN_SALT', 'someRandomLongString'),\n  },\n  auditLogs: { // only accessible with an Enterprise plan\n    enabled: env.bool('AUDIT_LOGS_ENABLED', true),\n    retentionDays: 120,\n  },\n  auth: {\n    events: {\n      onConnectionSuccess(e) {\n        console.log(e.user, e.provider);\n      },\n      onConnectionError(e) {\n        console.error(e.error, e.provider);\n      },\n    },\n    options: {\n      expiresIn: '7d',\n    },\n    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),\n  },\n  url: env('PUBLIC_ADMIN_URL', '/dashboard'),\n  autoOpen: false,\n  watchIgnoreFiles: [\n    './my-custom-folder', // Folder\n    './scripts/someScript.sh', // File\n  ],\n  host: 'localhost',\n  port: 8003,\n  serveAdminPanel: env.bool('SERVE_ADMIN', true),\n  forgotPassword: {\n    from: 'no-reply@example.com',\n    replyTo: 'no-reply@example.com',\n  },\n  rateLimit: {\n    interval: { hour: 1, min: 30 },\n    timeWait: 3*1000,\n    max: 10,\n  },\n  transfer: { \n    token: { \n      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),\n    } \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Database Column Settings in Strapi Schema (JSON)\nDESCRIPTION: This snippet demonstrates how to set custom database column options in a Strapi content type schema. It shows examples of enforcing uniqueness, setting default values, and specifying custom column types and arguments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"attributes\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"minLength\": 3,\n      \"maxLength\": 99,\n      \"unique\": true,\n      \"column\": {\n        \"unique\": true // enforce database unique also\n      }\n    },\n    \"description\": {\n      \"default\": \"My description\",\n      \"type\": \"text\",\n      \"required\": true,\n      \"column\": {\n        \"defaultTo\": \"My description\", // set database level default\n        \"notNullable\": true // enforce required at database level, even for drafts\n      }\n    },\n    \"rating\": {\n      \"type\": \"decimal\",\n      \"default\": 0,\n      \"column\": {\n        \"defaultTo\": 0,\n        \"type\": \"decimal\", // using the native decimal type but allowing for custom precision\n        \"args\": [\n          6,1 // using custom precision and scale\n        ]\n      }\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Middleware in Strapi\nDESCRIPTION: Example of custom configuration for the session middleware in Strapi. It enables rolling sessions and session renewal to keep users logged in.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::session',\n    config: {\n      rolling: true,\n      renew: true\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::session',\n    config: {\n      rolling: true,\n      renew: true\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling and Notifications in React for Strapi FoodAdvisor\nDESCRIPTION: This code snippet modifies a 'new-review' component to catch custom errors from a Strapi backend and display them as toast notifications. It also shows a success message when a review is created successfully. The code uses React Hot Toast for notifications and wraps the API call in a try/catch block for error handling.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/policies.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Input, Textarea } from '@nextui-org/react';\nimport { useFormik } from 'formik';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { getStrapiURL } from '../../../../../utils';\n/** \n * A notification will be displayed on the front-end using React Hot Toast\n * (See https://github.com/timolins/react-hot-toast).\n * React Hot Toast should be added to your project's dependencies;\n * Use yarn or npm to install it and it will be added to your package.json file.\n */\nimport toast from 'react-hot-toast';\n\nclass UnauthorizedError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n\nconst NewReview = () => {\n  const router = useRouter();\n\n  const { handleSubmit, handleChange, values } = useFormik({\n    initialValues: {\n      note: '',\n      content: '',\n    },\n    onSubmit: async (values) => {\n      /**\n       * The previously added code is wrapped in a try/catch block.\n       */\n      try {\n        const res = await fetch(getStrapiURL('/reviews'), {\n          method: 'POST',\n          body: JSON.stringify({\n            restaurant: router.query.slug,\n            ...values,\n          }),\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const { data, error } = await res.json();\n        /**\n         * If the Strapi backend server returns an error,\n         * we use the custom error message to throw a custom error.\n         * If the request is a success, we display a success message.\n         * In both cases, a toast notification is displayed on the front-end.\n         */\n        if (error) {\n          throw new UnauthorizedError(error.message);\n        }\n        toast.success('Review created!');\n        return data;\n      } catch (err) {\n        toast.error(err.message);\n        console.error(err);\n      }\n    },\n  });\n  return (\n    <div className=\"my-6\">\n      <h1 className=\"font-bold text-2xl mb-3\">Write your review</h1>\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-y-4\">\n        <Input\n          onChange={handleChange}\n          name=\"note\"\n          type=\"number\"\n          min={1}\n          max={5}\n          label=\"Stars\"\n        />\n        <Textarea\n          name=\"content\"\n          onChange={handleChange}\n          placeholder=\"What do you think about this restaurant?\"\n        />\n        <Button\n          type=\"submit\"\n          className=\"bg-primary text-white rounded-md self-start\"\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewReview;\n```\n\n----------------------------------------\n\nTITLE: Creating Review Service in Strapi\nDESCRIPTION: Custom service implementation for creating reviews in a restaurant application. Uses EntityService API to find restaurants and create review entries with associated user data. Includes restaurant owner population in the response.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::review.review', ({ strapi }) => ({\n  async create(ctx) {\n    const user = ctx.state.user;\n    const { body } = ctx.request;\n\n    /**\n     * Queries the Restaurants collection type\n     * using the Entity Service API\n     * to retrieve information about the restaurant.\n     */\n    const restaurants = await strapi.entityService.findMany(\n      'api::restaurant.restaurant',\n      {\n        filters: {\n          slug: body.restaurant,\n        },\n      }\n    );\n\n    /**\n     * Creates a new entry for the Reviews collection type\n     * and populates data with information about the restaurant's owner\n     * using the Entity Service API.\n     */\n    const newReview = await strapi.entityService.create('api::review.review', {\n      data: {\n        note: body.note,\n        content: body.content,\n        restaurant: restaurants[0].id,\n        author: user.id,\n      },\n      populate: ['restaurant.owner'],\n    });\n\n    return newReview;\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Email Service with Nodemailer in TypeScript\nDESCRIPTION: TypeScript version of the custom email service for a restaurant API using Nodemailer. Configures SMTP transport and creates a sendNewsletter function that can be accessed through the Strapi service API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { factories } from '@strapi/strapi'; \nconst nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)\n\n// Create reusable transporter object using SMTP transport.\nconst transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: 'user@gmail.com',\n    pass: 'password',\n  },\n});\n\nexport default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) => ({\n  sendNewsletter(from, to, subject, text) {\n    // Setup e-mail data. \n    const options = {\n      from,\n      to,\n      subject,\n      text,\n    };\n\n    // Return a promise of the function that sends the email.\n    return transporter.sendMail(options);\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a new Restaurant document with GraphQL mutation\nDESCRIPTION: GraphQL mutation for creating a new Restaurant document with a name property. This example demonstrates the basic structure of a create mutation and returns the name and documentId of the newly created entity.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateRestaurant($data: RestaurantInput!) {\n  createRestaurant(data: {\n    name: \"Pizzeria Arrivederci\"\n  }) {\n    name\n    documentId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Selection and Population with qs Library\nDESCRIPTION: JavaScript example demonstrating how to combine field selection and population in a single query. This code selects title and slug fields from articles while also populating and selecting specific fields from the headerImage relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/populate-select.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify(\n  {\n    fields: ['title', 'slug'],\n    populate: {\n      headerImage: {\n        fields: ['name', 'url'],\n      },\n    },\n  },\n  {\n    encodeValuesOnly: true, // prettify URL\n  }\n);\n\nawait request(`/api/articles?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection in Strapi (JavaScript/TypeScript)\nDESCRIPTION: Example structure of the database configuration file in Strapi. It shows the main configuration objects: 'connection' for database options and 'settings' for Strapi-specific settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ./config/database.js or ./config/database.ts\n{\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: '.tmp/data.db',\n    },\n    useNullAsDefault: true,\n  },\n  settings: {\n    // Strapi-specific settings\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Core Controller Extension Examples\nDESCRIPTION: Various examples of extending core controller actions like find, findOne, create, update, and delete with custom logic.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync find(ctx) {\n  // some logic here\n  const { data, meta } = await super.find(ctx);\n  // some more logic\n\n  return { data, meta };\n}\n\nasync findOne(ctx) {\n  // some logic here\n  const response = await super.findOne(ctx);\n  // some more logic\n\n  return response;\n}\n\nasync create(ctx) {\n  // some logic here\n  const response = await super.create(ctx);\n  // some more logic\n\n  return response;\n}\n\nasync update(ctx) {\n  // some logic here\n  const response = await super.update(ctx);\n  // some more logic\n\n  return response;\n}\n\nasync delete(ctx) {\n  // some logic here\n  const response = await super.delete(ctx);\n  // some more logic\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Auto-generation in Strapi (TypeScript)\nDESCRIPTION: TypeScript configuration file for enabling automatic types generation on server restart in a Strapi project. This file should be placed at './config/typescript.ts' and sets the autogenerate parameter to true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/typescript.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  autogenerate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing 'Is-Owner' Middleware in Strapi\nDESCRIPTION: Example of implementing an 'is-owner' middleware in Strapi to restrict content access. This middleware checks if the current user is the owner of the requested entry before allowing access.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\n/**\n * `isOwner` middleware\n */\n\nmodule.exports = (config, { strapi }) => {\n  // Add your own logic here.\n  return async (ctx, next) => {\n    const user = ctx.state.user;\n    const entryId = ctx.params.id ? ctx.params.id : undefined;\n    let entry = {};\n\n    /** \n     * Gets all information about a given entry,\n     * populating every relations to ensure \n     * the response includes author-related information\n     */\n    if (entryId) {\n      entry = await strapi.documents('api::restaurant.restaurant').findOne(\n        entryId,\n        { populate: \"*\" }\n      );\n    }\n\n    /**\n     * Compares user id and entry author id\n     * to decide whether the request can be fulfilled\n     * by going forward in the Strapi backend server\n     */\n    if (user.id !== entry.author.id) {\n      return ctx.unauthorized(\"This action is unauthorized.\");\n    } else {\n      return next();\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Auto-generation in Strapi (JavaScript)\nDESCRIPTION: JavaScript configuration file for enabling automatic types generation on server restart in a Strapi project. This file should be placed at './config/typescript.js' and sets the autogenerate parameter to true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/typescript.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  autogenerate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Strapi Controller in JavaScript\nDESCRIPTION: Example of creating a custom controller for a restaurant API using createCoreController. Shows three methods: creating a custom action, wrapping a core action, and replacing a core action with sanitization.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreController } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // Method 1: Creating an entirely custom action\n  async exampleAction(ctx) {\n    try {\n      ctx.body = 'ok';\n    } catch (err) {\n      ctx.body = err;\n    }\n  },\n\n  // Method 2: Wrapping a core action (leaves core logic in place)\n  async find(ctx) {\n    // some custom logic here\n    ctx.query = { ...ctx.query, local: 'en' }\n\n    // Calling the default core action\n    const { data, meta } = await super.find(ctx);\n\n    // some more custom logic\n    meta.date = Date.now()\n\n    return { data, meta };\n  },\n\n  // Method 3: Replacing a core action with proper sanitization\n  async find(ctx) {\n    await this.validateQuery(ctx);\n    const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);\n    const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n    return this.transformResponse(sanitizedResults, { pagination });\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Deep Filtering for Restaurants with qs Library\nDESCRIPTION: Example of deep filtering to find restaurants owned by chefs who belong to 5-star restaurants.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/filters.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  filters: {\n    chef: {\n      restaurants: {\n        stars: {\n          $eq: 5,\n        },\n      },\n    },\n  },\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/restaurants?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server (Full Configuration in JavaScript)\nDESCRIPTION: A comprehensive server configuration example for Strapi in JavaScript, including advanced options like socket paths, URL configuration, proxy settings, cron job enablement, transfer features, and logger configurations. This demonstrates all available configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/server.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  app: {\n    keys: env.array('APP_KEYS'),\n  },\n  socket: '/tmp/nginx.socket', // only use if absolutely required\n  emitErrors: false,\n  url: env('PUBLIC_URL', 'https://api.example.com'),\n  proxy: env.bool('IS_PROXIED', true),\n  cron: {\n    enabled: env.bool('CRON_ENABLED', false),\n  },\n  transfer: {\n    remote: {\n      enabled: false,\n    },\n  },\n  logger: {\n    updates: {\n      enabled: false,\n    },\n    startup: {\n      enabled: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Options in Strapi JSON Schema\nDESCRIPTION: JSON configuration for defining model options in a Strapi content-type schema. This example shows how to set privateAttributes and enable the draft and publish feature.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"options\": {\n    \"privateAttributes\": [\"id\", \"createdAt\"],\n    \"draftAndPublish\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-API Policy Reference in TypeScript\nDESCRIPTION: TypeScript implementation showing how to reference a policy from another API using the api::[apiName].[policyName] syntax.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/categories',\n      handler: 'Category.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.ts`\n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['api::restaurant.is-admin']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Zone with Entity Service API in JavaScript\nDESCRIPTION: This snippet shows how to create a dynamic zone (a list of components) while creating an entry. Each component in the dynamic zone requires the __component property to specify its type.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/components-dynamic-zones.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.create('api::article.article', {\n  data: {\n    myDynamicZone: [\n      {\n        __component: 'compo.type',\n        foo: 'bar',\n      },\n      {\n        __component: 'compo.type2',\n        foo: 'bar',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entry with Entity Service API in JavaScript\nDESCRIPTION: Uses the findOne() method to retrieve a single article entry by ID. The example retrieves specific fields and populates the related category field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/crud.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.entityService.findOne('api::article.article', 1, {\n  fields: ['title', 'description'],\n  populate: { category: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Single Entry with Strapi Query Engine\nDESCRIPTION: Uses findOne() to retrieve the first entry matching specified parameters. Demonstrates selecting specific fields, filtering by title, and populating related category data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/single-operations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.db.query('api::blog.article').findOne({\n  select: ['title', 'description'],\n  where: { title: 'Hello World' },\n  populate: { category: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Templated Email in Strapi\nDESCRIPTION: Demonstrates how to use the sendTemplatedEmail() function to send template-based emails with dynamic content. The example shows setting up email templates with subject, text, and HTML content using Lodash templating syntax.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/email.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailTemplate = {\n  subject: 'Welcome <%= user.firstname %>',\n  text: `Welcome to mywebsite.fr!\n    Your account is now linked with: <%= user.email %>.`,\n  html: `<h1>Welcome to mywebsite.fr!</h1>\n    <p>Your account is now linked with: <%= user.email %>.<p>`,\n};\n\nawait strapi.plugins['email'].services.email.sendTemplatedEmail(\n  {\n    to: user.email,\n    // from: is not specified, the defaultFrom is used.\n  },\n    emailTemplate,\n  {\n    user: _.pick(user, ['username', 'email', 'firstname', 'lastname']),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Router in JavaScript\nDESCRIPTION: Example of configuring a core router in JavaScript using createCoreRouter factory function with prefix, route filtering, and configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  prefix: '',\n  only: ['find', 'findOne'],\n  except: [],\n  config: {\n    find: {\n      auth: false,\n      policies: [],\n      middlewares: [],\n    },\n    findOne: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Preview Configuration with Next.js Draft Mode Integration\nDESCRIPTION: Full implementation of the Strapi Preview configuration, combining URL generation with a handler that integrates with Next.js draft mode using search parameters and a secret key.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst getPreviewPathname = (uid, { locale, document }): string => {\n  // … as defined in step 2\n};\n\n// Main configuration export\nexport default ({ env }) => {\n  // Get environment variables\n  const clientUrl = env(\"CLIENT_URL\"); // Frontend application URL\n  const previewSecret = env(\"PREVIEW_SECRET\"); // Secret key for preview authentication\n\n  return {\n    // Other admin-related configurations go here\n    // (see docs.strapi.io/cms/configurations/admin-panel)\n    preview: {\n      enabled: true, // Enable preview functionality\n      config: {\n        allowedOrigins: clientUrl, // Restrict preview access to specific domain\n        async handler(uid, { documentId, locale, status }) {\n          // Fetch the complete document from Strapi\n          const document = await strapi.documents(uid).findOne({ documentId });\n          \n          // Generate the preview pathname based on content type and document\n          const pathname = getPreviewPathname(uid, { locale, document });\n\n          // Disable preview if the pathname is not found\n          if (!pathname) {\n            return null;\n          }\n\n          // Use Next.js draft mode passing it a secret key and the content-type status\n          const urlSearchParams = new URLSearchParams({\n            url: pathname,\n            secret: previewSecret,\n            status,\n          });\n          return `${clientUrl}/api/preview?${urlSearchParams}`;\n        },\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Extending create() Method for Collection Types in Strapi\nDESCRIPTION: Example of extending the create() method for collection types in Strapi. This allows for custom logic to be implemented before and after creating a new document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync create(params) {\n  // some logic here\n  const result = await super.create(params);\n  // some more logic\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Entries with createMany() in Strapi\nDESCRIPTION: This snippet demonstrates how to use the createMany() method to create multiple entries in Strapi. It returns the count of created entries and their IDs.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/bulk-operations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.query(\"api::blog.article\").createMany({\n  data: [\n    {\n      title: \"ABCD\",\n    },\n    {\n      title: \"EFGH\",\n    },\n  ],\n});\n\n// { count: 2 , ids: [1,2]}\n```\n\n----------------------------------------\n\nTITLE: Advanced Populating with Object in Strapi Query Engine API\nDESCRIPTION: This snippet illustrates advanced usage of the populate option by passing an object with specific conditions for different attributes in a findMany() query.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/populating.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  populate: {\n    componentB: true,\n    dynamiczoneA: true,\n    relation: someLogic || true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding and Counting Entries with Strapi Query Engine\nDESCRIPTION: Uses findWithCount() to retrieve and count entries matching parameters. Returns both matched entries and total count.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/single-operations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [entries, count] = await strapi.db.query('api::blog.article').findWithCount({\n  select: ['title', 'description'],\n  where: { title: 'Hello World' },\n  orderBy: { title: 'DESC' },\n  populate: { category: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Document by ID with Strapi Document Service API\nDESCRIPTION: This snippet demonstrates how to use the findOne() method of the Document Service API to retrieve a single document by its ID. It returns the draft version in the default locale if no other parameters are specified.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findOne({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanitized Find Controller - TypeScript\nDESCRIPTION: TypeScript version of the find controller implementation using Strapi factory sanitization functions for query and output sanitization.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { factories } from '@strapi/strapi';\n\nexport default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  async find(ctx) {\n    const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);\n    const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n    return this.transformResponse(sanitizedResults, { pagination });\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Providers in Admin Configuration (JavaScript)\nDESCRIPTION: Basic structure for configuring SSO providers in the /config/admin.js file. This snippet shows where to place the providers array in the admin configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  auth: {\n    providers: [], // The providers' configuration lives there\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Entry with Entity Service API in JavaScript\nDESCRIPTION: Uses the create() method to create a new article entry with a title and returns the created entity.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/crud.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.entityService.create('api::article.article', {\n  data: {\n    title: 'My Article',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in Strapi\nDESCRIPTION: Example configuration for the CORS middleware in Strapi, showing how to set allowed origins, methods, and headers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::cors',\n    config: {\n      origin: ['https://example.com', 'https://subdomain.example.com', 'https://someotherwebsite.org'],\n      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],\n      headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],\n      keepHeaderOnError: true,\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::cors',\n    config: {\n      origin: ['https://example.com', 'https://subdomain.example.com', 'https://someotherwebsite.org'],\n      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],\n      headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],\n      keepHeaderOnError: true,\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Stack in TypeScript\nDESCRIPTION: Example of middleware configuration in TypeScript showing the loading order and different types of middleware declarations including internal and custom middlewares.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  'strapi::logger',\n  'strapi::cors',\n  'strapi::body',\n  'strapi::errors',\n  // ...\n  'my-custom-node-module', // custom middleware that does not require any configuration\n  {\n    // custom name to find a package or a path\n    name: 'my-custom-node-module',\n    config: {\n      foo: 'bar',\n    },\n  },\n  {\n    // custom resolve to find a package or a path\n    resolve: '../some-dir/custom-middleware',\n    config: {\n      foo: 'bar',\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom WYSIWYG Editor in Strapi (TypeScript)\nDESCRIPTION: TypeScript implementation showing how to register a custom WYSIWYG editor component in Strapi's admin panel using the bootstrap lifecycle function and app.addFields() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/wysiwyg-editor.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// The following file contains the logic for your new WYSIWYG editor👇\nimport MyNewWYSIGWYG from \"./extensions/components/MyNewWYSIGWYG\";\n\nexport default {\n  bootstrap(app) {\n    app.addFields({ type: \"wysiwyg\", Component: MyNewWYSIGWYG });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the $in operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates how to filter for articles where a field value matches any value in a provided array using the $in operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $in: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding the First Document with Filters in Strapi Document Service API\nDESCRIPTION: This snippet demonstrates using the findFirst() method with filters to find the first document matching specific criteria. It returns the draft version in the default locale if no locale or status parameters are specified.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findFirst(\n  {\n    filters: {\n      name: {\n        $startsWith: \"Pizzeria\"\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server (Minimal Configuration in JavaScript)\nDESCRIPTION: The minimal server configuration for a Strapi application in JavaScript, defining essential parameters like host, port, and application keys. This configuration uses the env() helper to allow for environment-specific values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/server.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  app: {\n    keys: env.array('APP_KEYS'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Upload Provider in JavaScript\nDESCRIPTION: Configures the AWS S3 provider for Strapi's Upload feature in the plugins.js file. Includes options for baseUrl, rootPath, S3 credentials, region, and other AWS-specific settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  upload: {\n    config: {\n      provider: 'aws-s3',\n      providerOptions: {\n        baseUrl: env('CDN_URL'),\n        rootPath: env('CDN_ROOT_PATH'),\n        s3Options: {\n          credentials: {\n            accessKeyId: env('AWS_ACCESS_KEY_ID'),\n            secretAccessKey: env('AWS_ACCESS_SECRET'),\n          },\n          region: env('AWS_REGION'),\n          params: {\n            ACL: env('AWS_ACL', 'public-read'),\n            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),\n            Bucket: env('AWS_BUCKET'),\n          },\n        },\n      },\n      actionOptions: {\n        upload: {},\n        uploadStream: {},\n        delete: {},\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Plugins in JavaScript\nDESCRIPTION: Example configuration for Strapi plugins in JavaScript, showing how to enable plugins without configuration, enable a custom local plugin with configuration, and disable installed plugins. This code would be placed in the ./config/plugins.js file of a Strapi project.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // enable a plugin that doesn't require any configuration\n  i18n: true,\n\n  // enable a custom plugin\n  myplugin: {\n    // my-plugin is going to be the internal name used for this plugin\n    enabled: true,\n    resolve: './src/plugins/my-local-plugin',\n    config: {\n      // user plugin config goes here\n    },\n  },\n\n  // disable a plugin\n  'my-other-plugin': {\n    enabled: false, // plugin installed but disabled\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema in Strapi using Nexus\nDESCRIPTION: Example of how to extend the GraphQL schema in Strapi using Nexus for type definitions and plugins. This snippet shows how to register an extension function that uses Nexus to define custom types and plugins.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    const extension = ({ nexus }) => ({\n      types: [\n        nexus.objectType({\n          …\n        }),\n      ],\n      plugins: [\n        nexus.plugin({\n          …\n        })\n      ]\n    })\n\n    strapi.plugin('graphql').service('extension').use(extension)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  register({ strapi }) {\n    const extension = ({ nexus }) => ({\n      types: [\n        nexus.objectType({\n          …\n        }),\n      ],\n      plugins: [\n        nexus.plugin({\n          …\n        })\n      ]\n    })\n\n    strapi.plugin('graphql').service('extension').use(extension)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Settings in TypeScript for Strapi\nDESCRIPTION: This code snippet shows how to configure API settings in Strapi using TypeScript. It defines private attributes for responses, sets a custom API prefix, and adjusts default and maximum limits for pagination.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/api.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  responses: {\n    privateAttributes: ['_v', 'id', 'created_at'],\n  },\n  rest: {\n    prefix: '/v1',\n    defaultLimit: 100,\n    maxLimit: 250,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Restaurants by Description and Name using JavaScript and qs\nDESCRIPTION: This snippet demonstrates how to sort restaurants by Description and Name fields using the qs library to build the query string for a Strapi REST API request.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/sort-pagination.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  sort: ['Description', 'Name'],\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/restaurants?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing register() Lifecycle Function in TypeScript\nDESCRIPTION: Example of implementing the register() lifecycle function for a Strapi plugin in TypeScript. This function is called to load the plugin before the application is bootstrapped.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  // execute some register code\n};\n\nexport default register;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Strapi Controller in TypeScript\nDESCRIPTION: TypeScript version of creating a custom controller for a restaurant API using createCoreController, demonstrating the same three methods with type safety.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { factories } from '@strapi/strapi';\n\nexport default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // Method 1: Creating an entirely custom action\n  async exampleAction(ctx) {\n    try {\n      ctx.body = 'ok';\n    } catch (err) {\n      ctx.body = err;\n    }\n  },\n\n  // Method 2: Wrapping a core action (leaves core logic in place)\n  async find(ctx) {\n    // some custom logic here\n    ctx.query = { ...ctx.query, local: 'en' }\n\n    // Calling the default core action\n    const { data, meta } = await super.find(ctx);\n\n    // some more custom logic\n    meta.date = Date.now()\n\n    return { data, meta };\n  },\n\n  // Method 3: Replacing a core action with proper sanitization\n  async find(ctx) {\n    await this.validateQuery(ctx);\n    const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);\n    const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n    return this.transformResponse(sanitizedResults, { pagination });\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Restaurant Document with Strapi Document Service\nDESCRIPTION: Creates a new draft restaurant document in the default locale using the create() method. Returns document metadata including ID, name, publish status and locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').create({\n  data: {\n    name: 'Restaurant B'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending find() Method for Collection Types in Strapi\nDESCRIPTION: Example of extending the find() method for collection types in Strapi. This allows for custom logic to be implemented before and after the core find() operation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync find(params) {\n  // some logic here\n  const { results, pagination } = await super.find(params);\n  // some more logic\n\n  return { results, pagination };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content-Types for Strapi Plugin\nDESCRIPTION: Demonstrates how to define content-types for a Strapi plugin, including the main index file and a specific content-type schema. It shows the structure for both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/content-types/index.js\n\n'use strict';\n\nconst contentTypeA = require('./content-type-a');\nconst contentTypeB = require('./content-type-b');\n\nmodule.exports = {\n  'content-type-a': { schema: contentTypeA }, // should re-use the singularName of the content-type\n  'content-type-b': { schema: contentTypeB },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/content-types/content-type-a.js\n\nmodule.exports = {\n  kind: 'collectionType',\n  collectionName: 'content-type',\n  info: {\n    singularName: 'content-type-a', // kebab-case mandatory\n    pluralName: 'content-type-as', // kebab-case mandatory\n    displayName: 'Content Type A',\n    description: 'A regular content-type',\n  },\n  options: {\n    draftAndPublish: true,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    }\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      min: 1,\n      max: 50,\n      configurable: false,\n    },\n  }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/content-types/index.ts\n\nconst contentTypeA = require('./content-type-a');\nconst contentTypeB = require('./content-type-b');\n\nmodule.exports = {\n  'content-type-a': { schema: contentTypeA }, // should re-use the singularName of the content-type\n  'content-type-b': { schema: contentTypeB },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/content-types/content-type-a.ts\n\nexport default {\n  kind: 'collectionType',\n  collectionName: 'content-type',\n  info: {\n    singularName: 'content-type-a', // kebab-case mandatory\n    pluralName: 'content-type-as', // kebab-case mandatory\n    displayName: 'Content Type A',\n    description: 'A regular content-type',\n  },\n  options: {\n    draftAndPublish: true,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    }\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      min: 1,\n      max: 50,\n      configurable: false,\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Admin Panel in JavaScript\nDESCRIPTION: Example configuration for customizing Strapi admin panel including auth logo, favicon, locales, menu logo, theme colors, translations, and feature toggles.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AuthLogo from \"./extensions/my-logo.png\";\nimport MenuLogo from \"./extensions/logo.png\";\nimport favicon from \"./extensions/favicon.png\";\n\nexport default {\n  config: {\n    auth: {\n      logo: AuthLogo,\n    },\n    head: {\n      favicon: favicon,\n    },\n    locales: [\"fr\", \"de\"],\n    menu: {\n      logo: MenuLogo,\n    },\n    theme: {\n      light: {\n        colors: {\n          primary100: \"#f6ecfc\",\n          primary200: \"#e0c1f4\",\n          primary500: \"#ac73e6\",\n          primary600: \"#9736e8\",\n          primary700: \"#8312d1\",\n          danger700: \"#b72b1a\",\n        },\n      },\n      dark: {\n      },\n    },\n    translations: {\n      fr: {\n        \"Auth.form.email.label\": \"test\",\n        Users: \"Utilisateurs\",\n        City: \"CITY (FRENCH)\",\n        Id: \"ID french\",\n      },\n    },\n    tutorials: false,\n    notifications: { releases: false },\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord SSO Provider in JavaScript\nDESCRIPTION: JavaScript implementation for setting up the Discord SSO provider in Strapi's admin configuration. It configures the authentication strategy with client credentials and callback handling.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/discord.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst DiscordStrategy = require(\"passport-discord\");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"discord\",\n        displayName: \"Discord\",\n        icon: \"https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png\",\n        createStrategy: (strapi) =>\n          new DiscordStrategy(\n            {\n              clientID: env(\"DISCORD_CLIENT_ID\"),\n              clientSecret: env(\"DISCORD_SECRET\"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  \"discord\"\n                ),\n              scope: [\"identify\", \"email\"],\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: `${profile.username}#${profile.discriminator}`,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending update() Method for Collection Types in Strapi\nDESCRIPTION: Example of extending the update() method for collection types in Strapi. This allows for custom logic to be implemented before and after updating an existing document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync update(documentId, params) {\n  // some logic here\n  const result = await super.update(documentId, params);\n  // some more logic\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudinary Provider in JavaScript\nDESCRIPTION: Complete JavaScript configuration for setting up Cloudinary as an upload provider in Strapi Cloud. This example shows how to configure the provider options including cloud name, API key, and secret as environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  upload: {\n    config: {\n      provider: 'cloudinary',\n      providerOptions: {\n        cloud_name: env('CLOUDINARY_NAME'),\n        api_key: env('CLOUDINARY_KEY'),\n        api_secret: env('CLOUDINARY_SECRET'),\n      },\n      actionOptions: {\n        upload: {},\n        uploadStream: {},\n        delete: {},\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Field Selection with qs Library in JavaScript\nDESCRIPTION: Code example showing how to use the qs library to generate a query string that selects only specific fields from an API response. This snippet demonstrates selecting the 'name' and 'description' fields from the users endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/populate-select.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify(\n  {\n    fields: ['name', 'description'],\n  },\n  {\n    encodeValuesOnly: true, // prettify URL\n  }\n);\n\nawait request(`/api/users?${query}`);\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration in Strapi\nDESCRIPTION: Example configuration for connecting Strapi to a PostgreSQL database. Includes settings for host, port, database name, user credentials, schema, and SSL options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'postgres',\n    connection: {\n      host: env('DATABASE_HOST', '127.0.0.1'),\n      port: env.int('DATABASE_PORT', 5432),\n      database: env('DATABASE_NAME', 'strapi'),\n      user: env('DATABASE_USERNAME', 'strapi'),\n      password: env('DATABASE_PASSWORD', 'strapi'),\n      schema: env('DATABASE_SCHEMA', 'public'), // Not required\n      ssl: {\n        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates\n      },\n    },\n    debug: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from Node.js using formdata-node and node-fetch\nDESCRIPTION: This example shows how to upload files to Strapi's REST API from a Node.js environment using formdata-node and node-fetch packages. It demonstrates creating FormData with a file and sending it to the upload endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FormData } from 'formdata-node';\nimport fetch, { blobFrom } from 'node-fetch';\n\nconst file = await blobFrom('./1.png', 'image/png');\nconst form = new FormData();\n\nform.append('files', file, \"1.png\");\n\nconst response = await fetch('http://localhost:1337/api/upload', {\n  method: 'post',\n  body: form,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Services for Strapi Plugin\nDESCRIPTION: Demonstrates how to create services for a Strapi plugin, including the main index file and a specific service. Shows the structure for both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/src/index.js\n\n// …\nconst services = require('./services');\n// …\n\nmodule.exports = () => ({\n  // …\n  services,\n  // …\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/services/index.js\n\nconst serviceA = require('./service-a');\nconst serviceB = require('./service-b');\n\nmodule.exports = {\n  serviceA,\n  serviceB,\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ./src/plugins/my-plugin/server/services/service-a.js\n\n'use strict';\n\nconst service = ({ strapi }) => ({\n  getWelcomeMessage() {\n    return 'Welcome to Strapi 🚀';\n  },\n});\n\nmodule.exports = service;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/src/index.ts\n\n// …\nimport services from './services';\n// …\n\nexport default {\n  // …\n  services,\n  // …\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/services/index.ts\n\nimport serviceA from './service-a';\nimport serviceB from './service-b';\n\nexport default {\n  serviceA,\n  serviceB,\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/services/service-a.ts\n\nimport type { Core } from '@strapi/strapi';\n\nconst serviceA = ({ strapi }: { strapi: Core.Strapi }) => ({\n  getWelcomeMessage() {\n    return 'Welcome to Strapi 🚀';\n  },\n});\n\nexport default serviceA;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in JavaScript\nDESCRIPTION: JavaScript implementation of content-type lifecycle hooks in Strapi. This example demonstrates how to define beforeCreate and afterCreate event handlers to modify data before saving and process results after creation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  beforeCreate(event) {\n    const { data, where, select, populate } = event.params;\n\n    // let's do a 20% discount everytime\n    event.params.data.price = event.params.data.price * 0.8;\n  },\n\n  afterCreate(event) {\n    const { result, params } = event;\n\n    // do something to the result;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Service in a Controller in TypeScript\nDESCRIPTION: TypeScript implementation of a controller that uses a custom service. Shows how to create a signup endpoint that stores user data and then uses the sendNewsletter service to send a welcome email to the new user.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // GET /hello\n  async signup(ctx) {\n    const { userData } = ctx.body;\n\n    // Store the new user in database.\n    const user = await strapi.service('plugin::users-permissions.user').add(userData);\n\n    // Send an email to validate his subscriptions.\n    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');\n\n    // Send response to the server.\n    ctx.send({\n      ok: true,\n    });\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing passport-google-oauth2 package with yarn\nDESCRIPTION: Command to install the passport-google-oauth2 package using yarn package manager. This package is required for implementing Google SSO in Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/google.md#2025-04-09_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add passport-google-oauth2\n```\n\n----------------------------------------\n\nTITLE: Extending find() Method for Single Types in Strapi\nDESCRIPTION: Example of extending the find() method for single types in Strapi. This allows for custom logic to be implemented before and after retrieving the single type document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync find(params) {\n  // some logic here\n  const document = await super.find(params);\n  // some more logic\n\n  return document;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Service Usage in Strapi\nDESCRIPTION: Demonstrates how to use the Entity Service API through strapi.entityService to find a single article entry with populated relations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.entityService.findOne('api::article.article', 1, {\n  populate: { someRelation: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Component with Entity Service API in JavaScript\nDESCRIPTION: This code shows how to update an existing component when updating an entry. When an ID is specified, the component is updated; otherwise, the old component is deleted and a new one is created.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/components-dynamic-zones.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.update('api::article.article', 1, {\n  data: {\n    myComponent: {\n      id: 1, // will update component with id: 1 (if not specified, would have deleted it and created a new one)\n      foo: 'bar',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Populating with Filters and Nested Relations in Strapi Query Engine API\nDESCRIPTION: This example demonstrates complex populating by applying 'where' filters and selecting or populating nested relations in a findMany() query.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/populating.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  populate: {\n    relationA: {\n      where: {\n        name: {\n          $contains: 'Strapi',\n        },\n      },\n    },\n\n    repeatableComponent: {\n      select: ['someAttributeName'],\n      orderBy: ['someAttributeName'],\n      populate: {\n        componentRelationA: true,\n      },\n    },\n\n    dynamiczoneA: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Relations with Longhand Syntax (JavaScript)\nDESCRIPTION: This snippet illustrates how to connect relations using the longhand syntax in a REST API request. It updates a restaurant entity by connecting it to two categories using their document IDs.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      connect: [\n        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },\n        { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middlewares in Strapi Plugin (JavaScript)\nDESCRIPTION: This snippet shows how to implement and register middlewares in a Strapi plugin using JavaScript. It includes the middleware implementation, the middlewares index, and the registration in the plugin's lifecycle.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/** \n * The your-middleware.js file \n * declares a basic middleware function and exports it.\n */\n'use strict';\nmodule.exports = async (ctx, next) => {\n  console.log(\"your custom logic\")\n  await next();\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The middleware function previously created\n * is imported from its file and\n * exported by the middlewares index.\n */\n'use strict';\nconst yourMiddleware = require('./your-middleware');\n\nmodule.exports = {\n  yourMiddleware\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * The middleware is called from \n * the plugin's register lifecycle function.\n */\n'use strict';\nconst middlewares = require('./middlewares');\n\nmodule.exports = ({ strapi }) => {\n  strapi.server.use(middlewares.yourMiddleware);\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Auth Endpoints in Strapi with Jest and Supertest\nDESCRIPTION: This code snippet demonstrates how to test Strapi's authentication endpoints using Jest and Supertest. It includes tests for user login and retrieving authenticated user data. The tests create mock users, perform login requests, and verify the returned JWT token and user data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = require('supertest');\n\n// user mock data\nconst mockUserData = {\n  username: \"tester\",\n  email: \"tester@strapi.com\",\n  provider: \"local\",\n  password: \"1234abc\",\n  confirmed: true,\n  blocked: null,\n};\n\nit(\"should login user and return jwt token\", async () => {\n  /** Creates a new user and save it to the database */\n  await strapi.plugins[\"users-permissions\"].services.user.add({\n    ...mockUserData,\n  });\n\n  await request(strapi.server.httpServer) // app server is an instance of Class: http.Server\n    .post(\"/api/auth/local\")\n    .set(\"accept\", \"application/json\")\n    .set(\"Content-Type\", \"application/json\")\n    .send({\n      identifier: mockUserData.email,\n      password: mockUserData.password,\n    })\n    .expect(\"Content-Type\", /json/)\n    .expect(200)\n    .then((data) => {\n      expect(data.body.jwt).toBeDefined();\n    });\n});\n\nit('should return users data for authenticated user', async () => {\n  /** Gets the default user role */\n  const defaultRole = await strapi.query('plugin::users-permissions.role').findOne({}, []);\n\n  const role = defaultRole ? defaultRole.id : null;\n\n  /** Creates a new user an push to database */\n  const user = await strapi.plugins['users-permissions'].services.user.add({\n    ...mockUserData,\n    username: 'tester2',\n    email: 'tester2@strapi.com',\n    role,\n  });\n\n  const jwt = strapi.plugins['users-permissions'].services.jwt.issue({\n    id: user.id,\n  });\n\n  await request(strapi.server.httpServer) // app server is an instance of Class: http.Server\n    .get('/api/users/me')\n    .set('accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'Bearer ' + jwt)\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .then(data => {\n      expect(data.body).toBeDefined();\n      expect(data.body.id).toBe(user.id);\n      expect(data.body.username).toBe(user.username);\n      expect(data.body.email).toBe(user.email);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SSO Provider in TypeScript\nDESCRIPTION: TypeScript configuration for Microsoft SSO provider in Strapi's admin configuration file. Implements Azure AD OAuth2 strategy with type safety and user profile mapping.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/microsoft.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Strategy as AzureAdOAuth2Strategy} from \"passport-azure-ad-oauth2\";\nimport jwt from \"jsonwebtoken\";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"azure_ad_oauth2\",\n        displayName: \"Microsoft\",\n        icon: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/320px-Microsoft_logo_%282012%29.svg.png\",\n        createStrategy: (strapi) =>\n          new AzureAdOAuth2Strategy(\n            {\n              clientID: env(\"MICROSOFT_CLIENT_ID\", \"\"),\n              clientSecret: env(\"MICROSOFT_CLIENT_SECRET\", \"\"),\n              scope: [\"user:email\"],\n              tenant: env(\"MICROSOFT_TENANT_ID\", \"\"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  \"azure_ad_oauth2\"\n                ),\n            },\n            (accessToken, refreshToken, params, profile, done) => {\n              let waadProfile = jwt.decode(params.id_token, \"\", true);\n              done(null, {\n                email: waadProfile.email,\n                username: waadProfile.email,\n                firstname: waadProfile.given_name, // optional if email and username exist\n                lastname: waadProfile.family_name, // optional if email and username exist\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Entries with Entity Service API in JavaScript\nDESCRIPTION: Uses the findMany() method to retrieve multiple article entries. The example filters by title, sorts by creation date in descending order, and populates the category relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/crud.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  fields: ['title', 'description'],\n  filters: { title: 'Hello World' },\n  sort: { createdAt: 'DESC' },\n  populate: { category: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RBAC Condition with Query Object in JavaScript\nDESCRIPTION: Shows how to create a condition that uses a query object to check if a price is greater than 50.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst condition = {\n  displayName: 'price greater than 50',\n  name: 'price-gt-50',\n  async handler(user) {\n    return { price: { $gt: 50 } };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from Browser using HTML Form and JavaScript\nDESCRIPTION: This snippet demonstrates how to create an HTML form for file uploads and use JavaScript to submit the form data to Strapi's upload endpoint. It allows for multiple file uploads via FormData.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <!-- Can be multiple files -->\n  <input type=\"file\" name=\"files\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n<script type=\"text/javascript\">\n  const form = document.querySelector('form');\n\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    await fetch('/api/upload', {\n      method: 'post',\n      body: new FormData(e.target)\n    });\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Pushing Data to Remote Strapi Instance with Yarn\nDESCRIPTION: Command to transfer data from a local Strapi instance to a remote destination using Yarn, requiring the full admin URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi transfer --to destinationURL\n```\n\n----------------------------------------\n\nTITLE: Accessing Strapi Plugin Features\nDESCRIPTION: This snippet shows how to access various features of a Strapi plugin using both top-level and global getters. It demonstrates accessing controllers, services, content types, policies, and middlewares.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Access an API or a plugin controller using a top-level getter \nstrapi.api['api-name'].controller('controller-name')\nstrapi.plugin('plugin-name').controller('controller-name')\n\n// Access an API or a plugin controller using a global getter\nstrapi.controller('api::api-name.controller-name')\nstrapi.controller('plugin::plugin-name.controller-name')\n```\n\n----------------------------------------\n\nTITLE: Extending delete() Method for Collection Types in Strapi\nDESCRIPTION: Example of extending the delete() method for collection types in Strapi. This allows for custom logic to be implemented before and after deleting a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync delete(documentId, params) {\n  // some logic here\n  const result = await super.delete(documentId, params);\n  // some more logic\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Populate Fragments for Polymorphic Content in Entity Service API\nDESCRIPTION: Illustrates the use of populate fragments for handling polymorphic content structures like dynamic zones and polymorphic relations, allowing for granular populate strategies.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/populate.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  populate: {\n    dynamicZone: {\n      on: {\n        'components.foo': {\n          fields: ['title'],\n          filters: { title: { $contains: 'strapi' } },\n        },\n        'components.bar': {\n          fields: ['name'],\n        },\n      },\n    },\n\n    morphAuthor: {\n      on: {\n        'plugin::users-permissions.user': {\n          fields: ['username'],\n        },\n        'api::author.author': {\n          fields: ['name'],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Dynamic Zone Data in GraphQL\nDESCRIPTION: Example GraphQL query to fetch data from a dynamic zone using fragments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    dz {\n      __typename\n      ...on ComponentDefaultClosingperiod {\n        # define which attributes to return for the component\n        label\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Relations with Node.js Fetch API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to connect relations using the Node.js Fetch API. It sends a PUT request to update a restaurant entity by connecting it to two categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require('node-fetch');\n\nconst response = await fetch(\n  'http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm',\n  {\n    method: 'put',\n    body: {\n      data: {\n        categories: {\n          connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']\n        }\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Bypassing Transfer Prompts with Force Flag (NPM)\nDESCRIPTION: Command that bypasses all confirmation prompts during data transfer using the --force flag with NPM, requiring explicit token inclusion.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi transfer -- --to https://example.com/admin --to-token my-transfer-token --force\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Lifecycle Functions in Strapi\nDESCRIPTION: Example of asynchronous register, bootstrap, and destroy lifecycle functions in Strapi. Using async/await syntax allows for asynchronous operations within these lifecycle methods.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/functions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async register() {\n    // some async code\n  },\n  async bootstrap() {\n    // some async code\n  },\n  async destroy() {\n    // some async code\n  }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async register() {\n    // some async code\n  },\n  async bootstrap() {\n    // some async code\n  },\n  async destroy() {\n    // some async code\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Working with Collection Types in Strapi Client\nDESCRIPTION: Comprehensive example showing how to interact with collection types in Strapi, including finding all articles, retrieving a single article, creating a new article, updating an existing article, and deleting an article.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst articles = client.collection('articles');\n\n// Fetch all english articles sorted by title\nconst allArticles = await articles.find({\n  locale: 'en',\n  sort: 'title',\n});\n\n// Fetch a single article\nconst singleArticle = await articles.findOne('article-document-id');\n\n// Create a new article\nconst newArticle = await articles.create({ title: 'New Article', content: '...' });\n\n// Update an existing article\nconst updatedArticle = await articles.update('article-document-id', { title: 'Updated Title' });\n\n// Delete an article\nawait articles.delete('article-id');\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta SSO Provider in JavaScript\nDESCRIPTION: JavaScript configuration for Okta SSO provider in Strapi's admin configuration file. Sets up OAuth2 strategy with client credentials, scope, and callback handling.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/okta.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst OktaOAuth2Strategy = require(\"passport-okta-oauth20\").Strategy;\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"okta\",\n        displayName: \"Okta\",\n        icon: \"https://www.okta.com/sites/default/files/Okta_Logo_BrightBlue_Medium-thumbnail.png\",\n        createStrategy: (strapi) =>\n          new OktaOAuth2Strategy(\n            {\n              clientID: env(\"OKTA_CLIENT_ID\"),\n              clientSecret: env(\"OKTA_CLIENT_SECRET\"),\n              audience: env(\"OKTA_DOMAIN\"),\n              scope: [\"openid\", \"email\", \"profile\"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\"okta\"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Documents with Strapi Document Service API\nDESCRIPTION: This example shows how to use the findMany() method to retrieve multiple documents. Without parameters, it returns draft versions in the default locale for all documents of the specified content type.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findMany()\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak SSO Provider in TypeScript\nDESCRIPTION: TypeScript configuration for Keycloak SSO provider in Strapi's admin configuration file. Implements the same functionality as the JavaScript version with type safety.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/keycloak.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Strategy as KeyCloakStrategy } from \"passport-keycloak-oauth2-oidc\";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"keycloak\",\n        displayName: \"Keycloak\",\n        icon: \"https://raw.githubusercontent.com/keycloak/keycloak-admin-ui/main/themes/keycloak/logo.svg\",\n        createStrategy: (strapi) =>\n          new KeyCloakStrategy(\n            {\n              clientID: env(\"KEYCLOAK_CLIENT_ID\", \"\"),\n              realm: env(\"KEYCLOAK_REALM\", \"\"),\n              publicClient: env.bool(\"KEYCLOAK_PUBLIC_CLIENT\", false),\n              clientSecret: env(\"KEYCLOAK_CLIENT_SECRET\", \"\"),\n              sslRequired: env(\"KEYCLOAK_SSL_REQUIRED\", \"external\"),\n              authServerURL: env(\"KEYCLOAK_AUTH_SERVER_URL\", \"\"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  \"keycloak\"\n                ),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Document Type\nDESCRIPTION: Automatically generated GraphQL type definitions, queries, and mutations for the Document content type including input types and response entities.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ninput DocumentFiltersInput {\n  name: StringFilterInput\n  description: StringFilterInput\n  locked: BooleanFilterInput\n  createdAt: DateTimeFilterInput\n  updatedAt: DateTimeFilterInput\n  publishedAt: DateTimeFilterInput\n  and: [DocumentFiltersInput]\n  or: [DocumentFiltersInput]\n  not: DocumentFiltersInput\n}\n\ninput DocumentInput {\n  name: String\n  description: String\n  locked: Boolean\n  createdAt: DateTime\n  updatedAt: DateTime\n  publishedAt: DateTime\n}\n\ntype Document {\n  name: String\n  description: String\n  locked: Boolean\n  createdAt: DateTime\n  updatedAt: DateTime\n  publishedAt: DateTime\n}\n\ntype DocumentEntity {\n  id: ID\n  attributes: Document\n}\n\ntype DocumentEntityResponse {\n  data: DocumentEntity\n}\n\ntype DocumentEntityResponseCollection {\n  data: [DocumentEntity!]!\n  meta: ResponseCollectionMeta!\n}\n\ntype DocumentRelationResponseCollection {\n  data: [DocumentEntity!]!\n}\n\ntype Query  {\n  document(id: ID): DocumentEntityResponse\n  documents(\n    filters: DocumentFiltersInput\n    pagination: PaginationArg = {}\n    sort: [String] = []\n    publicationState: PublicationState = LIVE\n):DocumentEntityResponseCollection\n}\n\ntype Mutation {\n  createDocument(data: DocumentInput!): DocumentEntityResponse\n  updateDocument(id: ID!, data: DocumentInput!): DocumentEntityResponse\n  deleteDocument(id: ID!): DocumentEntityResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Zones Field Configuration Table\nDESCRIPTION: Base settings table for Dynamic Zones field type showing name configuration option.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-type-builder.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name       | Instructions                                                    |\n|--------------------|-----------------------------------------------------------------|\n| Name               | Write the name of the dynamic zone for the content-type.        |\n```\n\n----------------------------------------\n\nTITLE: Transferring Only Files with NPM\nDESCRIPTION: Command to transfer only file assets between Strapi instances using the --only option with NPM, excluding content and configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi transfer -- --to https://example.com/admin --only files\n```\n\n----------------------------------------\n\nTITLE: Extending findOne() Method for Collection Types in Strapi\nDESCRIPTION: Example of extending the findOne() method for collection types in Strapi. This allows for custom logic to be implemented before and after retrieving a single document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync findOne(documentId, params) {\n  // some logic here\n  const result = await super.findOne(documentId, params);\n  // some more logic\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sanitized Find Controller - JavaScript\nDESCRIPTION: Example of implementing a find controller method using Strapi factory sanitization functions. Demonstrates validation, query sanitization, and output sanitization.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreController } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  async find(ctx) {\n    await this.validateQuery(ctx);\n    const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);\n    const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n    return this.transformResponse(sanitizedResults, { pagination });\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: Custom Router with URL Parameters in TypeScript\nDESCRIPTION: Example of creating custom routes in TypeScript using URL parameters and regular expressions for dynamic routing.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    { \n      method: 'GET',\n      path: '/restaurants/:category/:id',\n      handler: 'Restaurant.findOneByCategory',\n    },\n    { \n      method: 'GET',\n      path: '/restaurants/:region(\\\\d{2}|\\\\d{3})/:id',\n      handler: 'Restaurant.findOneByRegion',\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub SSO Provider in Strapi (JavaScript)\nDESCRIPTION: This code configures the GitHub SSO provider in the Strapi admin configuration file. It sets up the GitHub strategy with client ID, secret, scope, and callback URL. It also defines how to handle the user profile data returned by GitHub.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/github.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst GithubStrategy = require(\"passport-github2\");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"github\",\n        displayName: \"Github\",\n        icon: \"https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png\",\n        createStrategy: (strapi) =>\n          new GithubStrategy(\n            {\n              clientID: env(\"GITHUB_CLIENT_ID\"),\n              clientSecret: env(\"GITHUB_CLIENT_SECRET\"),\n              scope: [\"user:email\"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\"github\"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.emails[0].value,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Delete Localized Document Mutation\nDESCRIPTION: Mutation to delete a specific localization of a restaurant document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeleteRestaurant($documentId: ID!, $locale: I18NLocaleCode) {\n  deleteRestaurant(documentId: \"xzmzdo4k0z73t9i68a7yx2kk\", locale: \"fr\") {\n    documentId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with $not Logical Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $not logical operator to negate a condition. The query retrieves articles that do not have the specified title.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    $not: {\n      title: 'Hello World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding the First Document with Strapi Document Service API\nDESCRIPTION: This example shows how to use the findFirst() method to retrieve the first document of a content type. By default, it returns the draft version in the default locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findFirst()\n```\n\n----------------------------------------\n\nTITLE: Working with Single Types in Strapi Client\nDESCRIPTION: Examples demonstrating interactions with single types in Strapi, including fetching the default homepage content, retrieving a localized version, updating the content with draft status, and deleting the content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst homepage = client.single('homepage');\n\n// Fetch the default homepage content\nconst defaultHomepage = await homepage.find();\n\n// Fetch the Spanish version of the homepage\nconst spanishHomepage = await homepage.find({ locale: 'es' });\n\n// Update the homepage draft content\nconst updatedHomepage = await homepage.update(\n  { title: 'Updated Homepage Title' },\n  { status: 'draft' }\n);\n\n// Delete the homepage content\nawait homepage.delete();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CRON Job with Object Format in JavaScript\nDESCRIPTION: Shows how to define a basic CRON job in JavaScript using the object format with a task function and rule options. This example runs every Monday at 1am.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /**\n   * Simple example.\n   * Every monday at 1am.\n   */\n\n  myJob: {\n    task: ({ strapi }) => {\n      // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).\n    },\n    options: {\n      rule: \"0 0 1 * * 1\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating API Request Handler for Admin Panel\nDESCRIPTION: Implements an API request handler using Axios to call the custom admin route. This module exports a function that makes a GET request to the plugin's custom endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/pass-data-from-server-to-admin.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\nconst foobarRequests = {\n  getFoobar: async () => {\n    const data = await axios.get(`/my-plugin/pass-data`);\n    return data;\n  },\n};\nexport default foobarRequests;\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context Globally in Strapi\nDESCRIPTION: Demonstrates how to access the current request context from anywhere in Strapi code using the strapi.requestContext.get() method. This allows you to retrieve user state and other request information in service functions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/requests-responses.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = strapi.requestContext.get();\n```\n\n----------------------------------------\n\nTITLE: Using $lt Less Than Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $lt operator to find records where an attribute is less than a specified value. This query retrieves articles with ratings less than 10.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $lt: 10,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server in JavaScript - Production Environment\nDESCRIPTION: Production-specific server configuration in JavaScript that uses the HOST environment variable with a fallback to 0.0.0.0 if not defined.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/environment.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Generation Logic for Preview Paths\nDESCRIPTION: A function to generate preview pathnames based on content type (uid) and document data, handling different URL patterns for various content types.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Function to generate preview pathname based on content type and document\nconst getPreviewPathname = (uid, { locale, document }): string => {\n  const { slug } = document;\n  \n  // Handle different content types with their specific URL patterns\n  switch (uid) {\n    // Handle pages with predefined routes\n    case \"api::page.page\":\n      switch (slug) {\n        case \"homepage\":\n          return `/${locale}`; // Localized homepage\n        case \"pricing\":\n          return \"/pricing\"; // Pricing page\n        case \"contact\":\n          return \"/contact\"; // Contact page\n        case \"faq\":\n          return \"/faq\"; // FAQ page\n      }\n    // Handle product pages\n    case \"api::product.product\": {\n      if (!slug) {\n        return \"/products\"; // Products listing page\n      }\n      return `/products/${slug}`; // Individual product page\n    }\n    // Handle blog articles\n    case \"api::article.article\": {\n      if (!slug) {\n        return \"/blog\"; // Blog listing page\n      }\n      return `/blog/${slug}`; // Individual article page\n    }\n    default: {\n      return null;\n    }\n  }\n};\n\n// … main export (see step 3)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Color Picker Field in Strapi\nDESCRIPTION: Example implementation of registering a custom color picker field with base settings, format options, and validation. The code demonstrates how to configure different color format options (hex and rgba) and implement required field validation using yup.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/custom-fields.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// imports go here (ColorPickerIcon, pluginId, yup package…)\n\nexport default {\n  register(app) {\n    // ... app.addMenuLink() goes here\n    // ... app.registerPlugin() goes here\n    app.customFields.register({\n      // …\n      options: {\n        base: [\n          /*\n            Declare settings to be added to the \"Base settings\" section\n            of the field in the Content-Type Builder\n          */\n          {\n            sectionTitle: {\n              // Add a \"Format\" settings section\n              id: \"color-picker.color.section.format\",\n              defaultMessage: \"Format\",\n            },\n            items: [\n              // Add settings items to the section\n              {\n                /*\n                  Add a \"Color format\" dropdown\n                  to choose between 2 different format options\n                  for the color value: hexadecimal or RGBA\n                */\n                intlLabel: {\n                  id: \"color-picker.color.format.label\",\n                  defaultMessage: \"Color format\",\n                },\n                name: \"options.format\",\n                type: \"select\",\n                value: \"hex\", // option selected by default\n                options: [\n                  // List all available \"Color format\" options\n                  {\n                    key: \"hex\",\n                    defaultValue: \"hex\",\n                    value: \"hex\",\n                    metadatas: {\n                      intlLabel: {\n                        id: \"color-picker.color.format.hex\",\n                        defaultMessage: \"Hexadecimal\",\n                      },\n                    },\n                  },\n                  {\n                    key: \"rgba\",\n                    value: \"rgba\",\n                    metadatas: {\n                      intlLabel: {\n                        id: \"color-picker.color.format.rgba\",\n                        defaultMessage: \"RGBA\",\n                      },\n                    },\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n        advanced: [\n          /*\n            Declare settings to be added to the \"Advanced settings\" section\n            of the field in the Content-Type Builder\n          */\n        ],\n        validator: (args) => ({\n          format: yup.string().required({\n            id: \"options.color-picker.format.error\",\n            defaultMessage: \"The color format is required\",\n          }),\n        }),\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CRON Job with Timezone in JavaScript\nDESCRIPTION: Demonstrates how to create a CRON job with timezone configuration in JavaScript. This job runs every Monday at 1am in the Asia/Dhaka timezone.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /**\n   * Cron job with timezone example.\n   * Every Monday at 1am for Asia/Dhaka timezone.\n   * List of valid timezones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List\n   */\n\n  myJob: {\n    task: ({ strapi }) => {\n      /* Add your own logic here */\n    },\n    options: {\n      rule: \"0 0 1 * * 1\",\n      tz: \"Asia/Dhaka\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using API Data in React Component\nDESCRIPTION: Shows how to use the API request handler within a React component. The component uses useState and useEffect hooks to fetch data from the server and store it in the component's state.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/pass-data-from-server-to-admin.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport foobarRequests from \"../../api/foobar\";\nconst [foobar, setFoobar] = useState([]);\n\n// …\nuseEffect(() => {\n  foobarRequests.getFoobar().then(res => {\n    setSchemas(res.data);\n  });\n}, [setFoobar]);\n// …\n```\n\n----------------------------------------\n\nTITLE: Configuring Middlewares in Core Router\nDESCRIPTION: Shows how to add middlewares to a core router configuration. Includes examples of using registered middlewares, custom configurations, and inline middleware implementations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  config: {\n    find: {\n      middlewares: [\n        'middleware-name', \n        { name: 'middleware-name', config: {} }, \n        (ctx, next) => {\n          return next();\n        },\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $notNull operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter for articles where a field has a non-null value using the $notNull operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $notNull: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Controllers and Middlewares (TypeScript)\nDESCRIPTION: TypeScript version of throwing errors in Strapi controllers and middlewares using the context (ctx) object. It demonstrates using the badRequest error function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// path: ./src/api/[api-name]/controllers/my-controller.ts\n\nexport default {\n  renameDog: async (ctx, next) => {\n    const newName = ctx.request.body.name;\n    if (!newName) {\n      return ctx.badRequest('name is missing', { foo: 'bar' })\n    }\n    ctx.body = strapi.service('api::dog.dog').rename(newName);\n  }\n}\n\n// path: ./src/api/[api-name]/middlewares/my-middleware.ts\n\nexport default async (ctx, next) => {\n  const newName = ctx.request.body.name;\n  if (!newName) {\n    return ctx.badRequest('name is missing', { foo: 'bar' })\n  }\n  await next();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Strapi Admin Settings in TypeScript\nDESCRIPTION: This snippet shows the minimal configuration required for the Strapi admin panel in TypeScript. It includes settings for API tokens, audit logs, authentication, and transfer tokens.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/admin-panel.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  apiToken: {\n    salt: env('API_TOKEN_SALT', 'someRandomLongString'),\n  },\n   auditLogs: { // only accessible with an Enterprise plan\n    enabled: env.bool('AUDIT_LOGS_ENABLED', true),\n  },\n  auth: {\n    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),\n  },\n  transfer: { \n    token: { \n      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),\n    } \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Content-Type for Strapi Plugin (Bash)\nDESCRIPTION: Commands to generate a content-type for a Strapi plugin using the CLI generator. The command is interactive and asks questions about the content-type and its attributes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi generate content-type\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi generate content-type\n```\n\n----------------------------------------\n\nTITLE: Private AWS S3 Provider Implementation in JavaScript\nDESCRIPTION: Example implementation of a private AWS S3 provider with signed URL generation in JavaScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  init: (config) => {\n    const s3 = new AWS.S3(config);\n\n    return {\n      async upload(file) {\n        // code to upload file to S3\n      },\n\n      async delete(file) {\n        // code to delete file from S3\n      },\n\n      async isPrivate() {\n        return true;\n      },\n\n      async getSignedUrl(file) {\n        const params = {\n          Bucket: config.params.Bucket,\n          Key: file.path,\n          Expires: 60, // URL expiration time in seconds\n        };\n\n        const signedUrl = await s3.getSignedUrlPromise(\"getObject\", params);\n        return { url: signedUrl };\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Facebook OAuth Callback URL Configuration\nDESCRIPTION: Example of the OAuth callback URL format needed for Facebook Login configuration. The URL must use the ngrok-generated domain.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/facebook.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://65e60559.ngrok.io/api/connect/facebook/callback\n```\n\n----------------------------------------\n\nTITLE: Using $endsWith Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $endsWith operator to find records where an attribute ends with a specified value. This query retrieves articles with titles ending with 'ABCD'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $endsWith: 'ABCD',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a middleware for default population of creator fields\nDESCRIPTION: This JavaScript middleware automatically adds createdBy and updatedBy to the populate parameter if no populate is specified in the request. This ensures these fields are always included in the API response for configured routes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/populate-creator-fields.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nmodule.exports = (config, { strapi }) => {\n  return async (ctx, next) => {\n    if (!ctx.query.populate) {\n      ctx.query.populate = [\"createdBy\", \"updatedBy\"];\n    }\n\n    await next();\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Lifecycle Functions in Strapi\nDESCRIPTION: Example of synchronous register, bootstrap, and destroy lifecycle functions in Strapi. These functions can be defined in the ./src/index.js or ./src/index.ts file to add dynamic configurations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/functions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register() {\n    // some sync code\n  },\n  bootstrap() {\n    // some sync code\n  },\n  destroy() {\n    // some sync code\n  }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  register() {\n    // some sync code\n  },\n  bootstrap() {\n    // some sync code\n  },\n  destroy() {\n    // some sync code\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Review Policy in Strapi\nDESCRIPTION: This code creates a custom policy to prevent restaurant owners from submitting reviews for their own restaurants. It uses the Entity Service API to check if the authenticated user is the owner of the restaurant being reviewed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/policies.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async (policyContext, config, { strapi }) => {\n  const { body } = policyContext.request;\n  const { user } = policyContext.state;\n\n  // Return an error if there is no authenticated user with the request\n  if (!user) {\n    return false;\n  }\n  /**\n   * Queries the Restaurants collection type\n   * using the Entity Service API\n   * to retrieve information about the restaurant's owner.\n   */ \n  const [restaurant] = await strapi.entityService.findMany(\n    'api::restaurant.restaurant',\n    {\n      filters: {\n        slug: body.restaurant,\n      },\n      populate: ['owner'],\n    }\n  );\n  if (!restaurant) {\n    return false;\n  }\n\n  /**\n   * If the user submitting the request is the restaurant's owner,\n   * we don't allow the review creation.\n   */ \n  if (user.id === restaurant.owner.id) {\n    return false;\n  }\n\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Articles with Full Population in Strapi REST API\nDESCRIPTION: Example response from a GET request to /api/articles with populate=* parameter, which returns all media fields, first-level relations, components and dynamic zones. The response includes the image media field, blocks dynamic zone, seo component, category relation, and localization data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": // truncated content\n      \"image\": {\n        \"data\": {\n            \"id\": 12,\n            \"documentId\": \"o5d4b0l4p8l4o4k5n1l3rxa\",\n            \"name\": \"Basque dish\",\n            \"alternativeText\": \"Basque dish\",\n            \"caption\": \"Basque dish\",\n            \"width\": 758,\n            \"height\": 506,\n            \"formats\": {\n              \"thumbnail\": {\n                \"name\": \"thumbnail_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg\",\n                \"hash\": \"thumbnail_basque_cuisine_17fa4567e0_f033424240\",\n                \"ext\": \".jpeg\",\n                \"mime\": \"image/jpeg\",\n                \"width\": 234,\n                \"height\": 156,\n                \"size\": 11.31,\n                \"path\": null,\n                \"url\": \"/uploads/thumbnail_basque_cuisine_17fa4567e0_f033424240.jpeg\"\n              },\n              \"medium\": {\n                \"name\": \"medium_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg\",\n                \"hash\": \"medium_basque_cuisine_17fa4567e0_f033424240\",\n                \"ext\": \".jpeg\",\n                \"mime\": \"image/jpeg\",\n                \"width\": 750,\n                \"height\": 501,\n                \"size\": 82.09,\n                \"path\": null,\n                \"url\": \"/uploads/medium_basque_cuisine_17fa4567e0_f033424240.jpeg\"\n              },\n              \"small\": {\n                \"name\": \"small_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg\",\n                \"hash\": \"small_basque_cuisine_17fa4567e0_f033424240\",\n                \"ext\": \".jpeg\",\n                \"mime\": \"image/jpeg\",\n                \"width\": 500,\n                \"height\": 334,\n                \"size\": 41.03,\n                \"path\": null,\n                \"url\": \"/uploads/small_basque_cuisine_17fa4567e0_f033424240.jpeg\"\n              }\n            },\n            \"hash\": \"basque_cuisine_17fa4567e0_f033424240\",\n            \"ext\": \".jpeg\",\n            \"mime\": \"image/jpeg\",\n            \"size\": 58.209999999999994,\n            \"url\": \"/uploads/basque_cuisine_17fa4567e0_f033424240.jpeg\",\n            \"previewUrl\": null,\n            \"provider\": \"local\",\n            \"provider_metadata\": null,\n            \"createdAt\": \"2021-11-23T14:05:33.460Z\",\n            \"updatedAt\": \"2021-11-23T14:05:46.084Z\"\n            }\n          }\n        },\n        \"blocks\": [\n          {\n            \"id\": 2,\n            \"__component\": \"blocks.related-articles\"\n          },\n          {\n            \"id\": 2,\n            \"documentId\": \"w8r5k8o8v0t9l9e0d7y6vco\",\n            \"__component\": \"blocks.cta-command-line\",\n            \"theme\": \"primary\",\n            \"title\": \"Want to give a try to a Strapi starter?\",\n            \"text\": \"❤️\",\n            \"commandLine\": \"git clone https://github.com/strapi/nextjs-corporate-starter.git\"\n          }\n        ],\n        \"seo\": {\n          \"id\": 1,\n          \"documentId\": \"h7c8d0u3i3q5v1j3j3r4cxf\",\n          \"metaTitle\": \"Articles - FoodAdvisor\",\n          \"metaDescription\": \"Discover our articles about food, restaurants, bars and more! - FoodAdvisor\",\n          \"keywords\": \"food\",\n          \"metaRobots\": null,\n          \"structuredData\": null,\n          \"metaViewport\": null,\n          \"canonicalURL\": null\n        },\n        \"category\": {\n          \"data\": {\n            \"id\": 4,\n            \"documentId\": \"t1t3d9k6n1k5a6r8l7f8rox\",\n            \"name\": \"European\",\n            \"slug\": \"european\",\n            \"createdAt\": \"2021-11-09T13:33:20.123Z\",\n            \"updatedAt\": \"2021-11-09T13:33:20.123Z\"\n          }\n        },\n        \"localizations\": {\n          \"data\": [\n            {\n              \"id\": 10,\n              \"documentId\": \"h7c8d0u3i3q5v1j3j3r4cxf\",\n              \"title\": \"Voici pourquoi il faut essayer la cuisine basque, selon un chef basque\",\n              \"slug\": \"voici-pourquoi-il-faut-essayer-la-cuisine-basque-selon-un-chef-basque\",\n              \"createdAt\": \"2021-11-18T13:33:19.948Z\",\n              \"updatedAt\": \"2023-06-02T10:57:19.606Z\",\n              \"publishedAt\": \"2022-09-22T13:00:00.069Z\",\n              \"locale\": \"fr-FR\",\n              \"ckeditor_content\": // truncated content\n            }\n          ]\n        }\n      }\n    },\n    {\n      \"id\": 2,\n      // truncated content\n    },\n    {\n      \"id\": 3,\n      // truncated content\n    },\n    {\n      \"id\": 4,\n      // truncated content\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server for Different-Server Deployment (TypeScript)\nDESCRIPTION: TypeScript configuration for the Strapi server when deploying the admin panel on a different server. This sets the host, port, and backend URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/deployment.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: env(\"HOST\", \"0.0.0.0\"),\n  port: env.int(\"PORT\", 1337),\n  url: \"http://yourbackend.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Function Implementation in Strapi Plugin\nDESCRIPTION: Example showing the bootstrap lifecycle function implementation that injects a component into the Content Manager's edit view. This executes after all plugins are registered.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => {\n  return {\n    // ...\n    bootstrap(app) {\n      // execute some bootstrap code\n      app.getPlugin('content-manager').injectComponent('editView', 'right-links', { name: 'my-compo', Component: () => 'my-compo' })\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Example Database Migration File with Knex\nDESCRIPTION: Example of a complete migration file showing how to rename tables, rename columns, and update data using the Knex.js API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-migrations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async up(knex) {\n    // You have full access to the Knex.js API with an already initialized connection to the database\n\n    // Example: renaming a table\n    await knex.schema.renameTable('oldName', 'newName');\n\n    // Example: renaming a column\n    await knex.schema.table('someTable', table => {\n      table.renameColumn('oldName', 'newName');\n    });\n\n    // Example: updating data\n    await knex.from('someTable').update({ columnName: 'newValue' }).where({ columnName: 'oldValue' });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Core Router Implementation in JavaScript\nDESCRIPTION: Generic implementation example of a core router in JavaScript with minimal configuration for a find operation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  only: ['find'],\n  config: {\n    find: {\n      auth: false,\n      policies: [],\n      middlewares: [],\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Admin Panel Host and Port in TypeScript\nDESCRIPTION: This snippet shows how to update the host and port for the admin panel in TypeScript when it's hosted separately from the back-end server.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/host-port-path.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: \"my-host.com\",\n  port: 3000,\n  // Additionally you can define another path instead of the default /admin one 👇\n  // url: '/dashboard'\n});\n```\n\n----------------------------------------\n\nTITLE: Using implicit $in operator with Document Service API in JavaScript\nDESCRIPTION: Shows the shorthand syntax for the $in operator when passing an array directly as the filter value.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: ['Hello', 'Hola', 'Bonjour'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting by average price in descending order with GraphQL\nDESCRIPTION: GraphQL query that fetches restaurants sorted by averagePrice in descending order. This demonstrates how to specify sort direction.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants(sort: \"averagePrice:desc\") {\n    documentId\n    name\n    averagePrice\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Plugin Data using Entity Service and Query Engine APIs (JavaScript)\nDESCRIPTION: Examples of how to query data from a Strapi plugin content-type using both the Entity Service API and Query Engine API. The examples demonstrate finding all entries for a specific content-type.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Using the Document Service API\nlet data = await strapi.documents('plugin::my-plugin.my-plugin-content-type').findMany();\n\n// Using the Query Engine API\nlet data = await strapi.db.query('plugin::my-plugin.my-plugin-content-type').findMany();\n```\n\n----------------------------------------\n\nTITLE: Accessing Services in Strapi\nDESCRIPTION: Examples of how to access services from controllers or other services in Strapi. Shows syntax for accessing both API services and plugin services.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// access an API service\nstrapi.service('api::apiName.serviceName').FunctionName();\n// access a plugin service\nstrapi.service('plugin::pluginName.serviceName').FunctionName();\n```\n\n----------------------------------------\n\nTITLE: Extending Admin UI Translations in JavaScript\nDESCRIPTION: Shows how to extend the default translations in Strapi's admin interface by adding custom key/value pairs for the French language in the app.js configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  config: {\n    locales: [\"fr\"],\n    translations: {\n      fr: {\n        \"Auth.form.email.label\": \"test\",\n        Users: \"Utilisateurs\",\n        City: \"CITY (FRENCH)\",\n        // Customize the label of the Content Manager table.\n        Id: \"ID french\",\n      },\n    },\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Link in Strapi Admin Panel (JavaScript)\nDESCRIPTION: Demonstrates how to add a new menu link to the main navigation in Strapi's admin panel using JavaScript. It shows the usage of the addMenuLink() function with various parameters including path, icon, label, component, permissions, position, and license indicator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport PluginIcon from './components/PluginIcon';\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: '/plugins/my-plugin',\n      icon: PluginIcon,\n      intlLabel: {\n        id: 'my-plugin.plugin.name',\n        defaultMessage: 'My plugin',\n      },\n      Component: () => 'My plugin',\n      permissions: [], // permissions to apply to the link\n      position: 3, // position in the menu\n      licenseOnly: true, // mark the feature as a paid one not available in your license\n    });\n    app.registerPlugin({ ... });\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Visibility in Admin Panel\nDESCRIPTION: Configuration schema showing how to make components visible in the Strapi admin panel, including settings for content-manager and content-type-builder visibility.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/create-components-for-plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"kind\": \"collectionType\",\n  \"collectionName\": \"my_plugin_components\",\n  \"info\": {\n    \"singularName\": \"my-plugin-component\",\n    \"pluralName\": \"my-plugin-components\",\n    \"displayName\": \"My Plugin Component\"\n  },\n  \"pluginOptions\": {\n    \"content-manager\": {\n      \"visible\": true\n    },\n    \"content-type-builder\": {\n      \"visible\": true\n    }\n  },\n  \"attributes\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Middleware for Cloudinary in JavaScript\nDESCRIPTION: JavaScript configuration for the security middleware to support Cloudinary uploads. Updates the Content Security Policy to allow images and media from Cloudinary domains.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\", \n            'data:', \n            'blob:', \n            'market-assets.strapi.io', \n            'res.cloudinary.com'\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'res.cloudinary.com',\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Relay-style Query for Multiple Documents in GraphQL\nDESCRIPTION: Example of a Relay-style GraphQL query to fetch multiple restaurant documents with pagination info.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants_connection {\n    nodes {\n      documentId\n      name\n    }\n    pageInfo {\n      pageSize\n      page\n      pageCount\n      total\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Main Test Entry File\nDESCRIPTION: Main test file that sets up and tears down Strapi instance for testing.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst { setupStrapi, cleanupStrapi } = require(\"./helpers/strapi\");\n\nbeforeAll(async () => {\n  await setupStrapi();\n});\n\nafterAll(async () => {\n  await cleanupStrapi();\n});\n\nit(\"strapi is defined\", () => {\n  expect(strapi).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Strapi Email Service\nDESCRIPTION: Example of using the email.send() function in a Strapi controller or service to send an email. This demonstrates how to specify email recipients, subject, and content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/email.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.plugins['email'].services.email.send({\n  to: 'valid email address',\n  from: 'your verified email address', //e.g. single sender verification in SendGrid\n  cc: 'valid email address',\n  bcc: 'valid email address',\n  replyTo: 'valid email address',\n  subject: 'The Strapi Email feature worked successfully',\n  text: 'Hello world!',\n  html: 'Hello world!',\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations in Flat GraphQL Query\nDESCRIPTION: Example of a flat GraphQL query to fetch restaurants and their associated categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    documentId\n    name\n    description\n    # categories is a many-to-many relation\n    categories {\n      documentId\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Plugin Translations in JavaScript\nDESCRIPTION: Shows how to override plugin-specific translations by prefixing keys with the plugin name in the app.js configuration file. The example translates the content-type-builder plugin name to French.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  config: {\n    locales: [\"fr\"],\n    translations: {\n      fr: {\n        \"Auth.form.email.label\": \"test\",\n        // Translate a plugin's key/value pair by adding the plugin's name as a prefix\n        // In this case, we translate the \"plugin.name\" key of plugin \"content-type-builder\"\n        \"content-type-builder.plugin.name\": \"Constructeur de Type-Contenu\",\n      },\n    },\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Securing Webhooks with Authorization Token in JavaScript\nDESCRIPTION: Implementation of webhook security using a bearer token in the default headers configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webhooks: {\n    defaultHeaders: {\n      Authorization: \"Bearer my-very-secured-token\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Timer Middleware Example (TypeScript)\nDESCRIPTION: Example of a custom timer middleware in Strapi using TypeScript. This middleware measures the response time and sets it as a header in the response.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default () => {\n  return async (ctx, next) => {\n    const start = Date.now();\n\n    await next();\n\n    const delta = Math.ceil(Date.now() - start);\n    ctx.set('X-Response-Time', delta + 'ms');\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using implicit $and with Document Service API in JavaScript\nDESCRIPTION: Shows the shorthand syntax for the $and operator when providing multiple conditions in a single object, which implicitly applies AND logic.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: 'Hello World',\n    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Entries with deleteMany() in Strapi\nDESCRIPTION: This snippet illustrates how to use the deleteMany() method to delete multiple entries matching specific criteria in Strapi. It returns the count of deleted entries.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/bulk-operations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.query(\"api::blog.article\").deleteMany({\n  where: {\n    title: {\n      $startsWith: \"v3\",\n    },\n  },\n});\n\n// { count: 42 }\n```\n\n----------------------------------------\n\nTITLE: Customizing Favicon in Strapi Admin UI\nDESCRIPTION: Demonstrates how to replace the default Strapi favicon with a custom one by importing it and setting it in the head configuration of app.js.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport favicon from \"./extensions/favicon.png\";\n\nexport default {\n  config: {\n    // replace favicon with a custom icon\n    head: {\n      favicon: favicon,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Media Update Event in Strapi\nDESCRIPTION: This snippet shows the payload structure for the 'media.update' event in Strapi. It is triggered when a media file is replaced or its metadata is updated through the media interface.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"media.update\",\n  \"createdAt\": \"2020-01-10T10:58:41.115Z\",\n  \"media\": {\n    \"id\": 1,\n    \"name\": \"image.png\",\n    \"hash\": \"353fc98a19e44da9acf61d71b11895f9\",\n    \"sha256\": \"huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc\",\n    \"ext\": \".png\",\n    \"mime\": \"image/png\",\n    \"size\": 228.19,\n    \"url\": \"/uploads/353fc98a19e44da9acf61d71b11895f9.png\",\n    \"provider\": \"local\",\n    \"provider_metadata\": null,\n    \"createdAt\": \"2020-01-10T10:58:41.095Z\",\n    \"updatedAt\": \"2020-01-10T10:58:41.095Z\",\n    \"related\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with 'Is-Owner' Middleware\nDESCRIPTION: Example of configuring Strapi routes to use the 'is-owner' middleware for specific HTTP methods. This configuration restricts update and delete operations to the owner of the content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * restaurant router\n */\n  \nconst { createCoreRouter } = require(\"@strapi/strapi\").factories;\n\nmodule.exports = createCoreRouter(\"api::restaurant.restaurant\", {\n  config: {\n    update: {\n      middlewares: [\"api::restaurant.is-owner\"],\n    },\n    delete: {\n      middlewares: [\"api::restaurant.is-owner\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Documentation Override in Strapi Plugin Register Lifecycle\nDESCRIPTION: Example showing how to register an override for the Documentation plugin to modify or add paths, including version-specific changes and generation exclusions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    if (strapi.plugin('documentation')) {\n      const override = {\n        // Only run this override for version 1.0.0\n        info: { version: '1.0.0' },\n        paths: {\n          '/answer-to-everything': {\n            get: {\n              responses: { 200: { description: \"*\" }}\n            }\n          }\n        }\n      }\n\n      strapi\n        .plugin('documentation')\n        .service('override')\n        .registerOverride(override, {\n          // Specify the origin in case the user does not want this plugin documented\n          pluginOrigin: 'upload',\n          // The override provides everything don't generate anything\n          excludeFromGeneration: ['upload'],\n        });\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Category with relational data in GraphQL\nDESCRIPTION: GraphQL mutation for creating a new Category with a relationship to multiple Restaurant documents using their documentIds. This demonstrates how to handle relationships when creating new content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateCategory {\n  createCategory(data: { \n    Name: \"Italian Food\"\n    restaurants: [\"a1b2c3d4e5d6f7g8h9i0jkl\", \"bf97tfdumkcc8ptahkng4puo\"]\n  }) {\n    documentId\n    Name\n    restaurants {\n      documentId\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Strapi JavaScript\nDESCRIPTION: JavaScript configuration file for Strapi database connections supporting MySQL, PostgreSQL and SQLite with environment variables. Includes SSL configuration options and connection pooling settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = ({ env }) => {\n  const client = env('DATABASE_CLIENT', 'sqlite');\n\n  const connections = {\n    mysql: {\n      connection: {\n        connectionString: env('DATABASE_URL'),\n        host: env('DATABASE_HOST', 'localhost'),\n        port: env.int('DATABASE_PORT', 3306),\n        database: env('DATABASE_NAME', 'strapi'),\n        user: env('DATABASE_USERNAME', 'strapi'),\n        password: env('DATABASE_PASSWORD', 'strapi'),\n        ssl: env.bool('DATABASE_SSL', false) && {\n          key: env('DATABASE_SSL_KEY', undefined),\n          cert: env('DATABASE_SSL_CERT', undefined),\n          ca: env('DATABASE_SSL_CA', undefined),\n          capath: env('DATABASE_SSL_CAPATH', undefined),\n          cipher: env('DATABASE_SSL_CIPHER', undefined),\n          rejectUnauthorized: env.bool(\n            'DATABASE_SSL_REJECT_UNAUTHORIZED',\n            true\n          ),\n        },\n      },\n      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n    },\n    postgres: {\n      connection: {\n        connectionString: env('DATABASE_URL'),\n        host: env('DATABASE_HOST', 'localhost'),\n        port: env.int('DATABASE_PORT', 3306),\n        database: env('DATABASE_NAME', 'strapi'),\n        user: env('DATABASE_USERNAME', 'strapi'),\n        password: env('DATABASE_PASSWORD', 'strapi'),\n        ssl: env.bool('DATABASE_SSL', false) && {\n          key: env('DATABASE_SSL_KEY', undefined),\n          cert: env('DATABASE_SSL_CERT', undefined),\n          ca: env('DATABASE_SSL_CA', undefined),\n          capath: env('DATABASE_SSL_CAPATH', undefined),\n          cipher: env('DATABASE_SSL_CIPHER', undefined),\n          rejectUnauthorized: env.bool(\n            'DATABASE_SSL_REJECT_UNAUTHORIZED',\n            true\n          ),\n        },\n        schema: env('DATABASE_SCHEMA', 'public'),\n      },\n      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n    },\n    sqlite: {\n      connection: {\n        filename: path.join(\n          __dirname,\n          '..',\n          env('DATABASE_FILENAME', 'data.db')\n        ),\n      },\n      useNullAsDefault: true,\n    },\n  };\n\n  return {\n    connection: {\n      client,\n      ...connections[client],\n      acquireConnectionTimeout: env.int('DATABASE_CONNECTION_TIMEOUT', 60000),\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Authentication Request with Axios\nDESCRIPTION: Makes a POST request to authenticate a user using email/username and password, returning a JWT token and user profile.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\n// Request API.\naxios\n  .post('http://localhost:1337/api/auth/local', {\n    identifier: 'user@strapi.io',\n    password: 'strapiPassword',\n  })\n  .then(response => {\n    // Handle success.\n    console.log('Well done!');\n    console.log('User profile', response.data.user);\n    console.log('User token', response.data.jwt);\n  })\n  .catch(error => {\n    // Handle error.\n    console.log('An error occurred:', error.response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Migrating RBAC Usage to useAuth in React/TypeScript\nDESCRIPTION: Demonstrates how to migrate from the deprecated useRBACProvider to the new useAuth hook for accessing user permissions in Strapi v5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useRBACProvider } from '@strapi/helper-plugin';\n\nconst { allPermission, refetchPermissions } = useRBACProvider();\n\n// After\nimport { useAuth } from '@strapi/strapi/admin';\n\nconst permissions = useAuth('COMPONENT_NAME', (state) => state.permissions);\nconst refetchPermission = useAuth(\n  'COMPONENT_NAME',\n  (state) => state.refetchPermission\n);\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering for Books with qs Library\nDESCRIPTION: Example of complex filtering using $or and $eq operators to find books with specific dates and author name.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/filters.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  filters: {\n    $or: [\n      {\n        date: {\n          $eq: '2020-01-01',\n        },\n      },\n      {\n        date: {\n          $eq: '2020-01-02',\n        },\n      },\n    ],\n    author: {\n      name: {\n        $eq: 'Kai doe',\n      },\n    },\n  },\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/books?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Using Webpack as Bundler with Strapi 5 Command\nDESCRIPTION: Demonstrates the command to run Strapi development server with webpack instead of the default Vite bundler. This requires passing a bundler option to the develop command.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/bundlers.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstrapi develop --bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Policies in Custom Router\nDESCRIPTION: Demonstrates how to implement policies in a custom router configuration. Includes examples of referencing existing policies and implementing inline policy functions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/articles/customRoute',\n      handler: 'api::api-name.controllerName.functionName',\n      config: {\n        policies: [\n          'policy-name',\n          { name: 'policy-name', config: {} },\n          (policyContext, config, { strapi }) => {\n            return true;\n          },\n        ]\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Policies for Resolvers in Strapi\nDESCRIPTION: Examples of applying policies to GraphQL resolvers, including inline policy functions, referencing existing policies, and using policies with custom configurations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use({\n      resolversConfig: {\n        'Query.categories': {\n          policies: [\n            (context, { strapi }) => {\n              console.log('hello', context.parent)\n              /**\n               * If 'categories' have a parent, the function returns true,\n               * so the request won't be blocked by the policy.\n               */ \n              return context.parent !== undefined;\n            }\n            /**\n             * Uses a policy already created in Strapi.\n             */\n            \"api::model.policy-name\",\n\n            /**\n             * Uses a policy already created in Strapi with a custom configuration\n             */\n            {name:\"api::model.policy-name\", config: {/* all config values I want to pass to the strapi policy */} },\n          ],\n          auth: false,\n        },\n      }\n    })\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use({\n      resolversConfig: {\n        'Query.categories': {\n          policies: [\n            (context, { strapi }) => {\n              console.log('hello', context.parent)\n              /**\n               * If 'categories' have a parent, the function returns true,\n               * so the request won't be blocked by the policy.\n               */ \n              return context.parent !== undefined;\n            }\n            /**\n             * Uses a policy already created in Strapi.\n             */\n            \"api::model.policy-name\",\n\n            /**\n             * Uses a policy already created in Strapi with a custom configuration\n             */\n            {name:\"api::model.policy-name\", config: {/* all the configuration values to pass to the strapi policy */} },\n          ],\n          auth: false,\n        },\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Strapi Routes\nDESCRIPTION: Example of how to add custom middlewares to specific routes in Strapi. This code demonstrates adding a middleware to a GET request for a collection.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: \"GET\",\n      path: \"/[collection-name]\",\n      handler: \"[controller].find\",\n      config: {\n        middlewares: [\"[middleware-name]\"],\n        // See the usage section below for middleware naming conventions\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Middlewares in Strapi (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to apply various middlewares to a GraphQL resolver in Strapi using TypeScript. It includes examples of logging, caching, data modification, and using pre-existing Strapi middlewares.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use({\n      resolversConfig: {\n        'Query.categories': {\n          middlewares: [\n            async (next, parent, args, context, info) => {\n              console.time('Resolving categories');\n              \n              // call the next resolver\n              const res = await next(parent, args, context, info);\n              \n              console.timeEnd('Resolving categories');\n\n              return res;\n            },\n            async (next, parent, args, context, info) => {\n              info.cacheControl.setCacheHint({ maxAge: 60, scope: \"PUBLIC\" });\n              return next(parent, args, context, info);\n            },\n            (resolve, parent, ...rest) => {\n              if (parent.id === 1) {\n                return resolve({...parent, name: 'foobar' }, ...rest);\n              }\n\n              return resolve(parent, ...rest);\n            },\n            \"api::model.middleware-name\",\n            {name:\"api::model.middleware-name\", options: {/* all the configuration values to pass to the middleware */} },\n          ],\n          auth: false,\n        },\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Document Content Type Schema Definition\nDESCRIPTION: JSON schema definition for a Document content type in Strapi, including basic attributes like name, description, and locked status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"collectionType\",\n  \"collectionName\": \"documents\",\n  \"info\": {\n    \"singularName\": \"document\",\n    \"pluralName\": \"documents\",\n    \"displayName\": \"document\",\n    \"name\": \"document\"\n  },\n  \"options\": {\n    \"draftAndPublish\": true\n  },\n  \"pluginOptions\": {},\n  \"attributes\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"richtext\"\n    },\n    \"locked\": {\n      \"type\": \"boolean\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Create Localized Document Mutation\nDESCRIPTION: Mutation to create a new restaurant document with localized content for a specific locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateRestaurant($data: RestaurantInput!, $locale: I18NLocaleCode) {\n  createRestaurant(\n    data: {\n      name: \"Brasserie Bonjour\",\n      description: \"Description in French goes here\"\n    },\n    locale: \"fr\"\n  ) {\n  documentId\n  name\n  description\n  locale\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Plugin Content-Type in JavaScript/TypeScript\nDESCRIPTION: Shows how to extend a Strapi plugin's content-type by adding or overriding attributes within the register function in the project's index.js|ts file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugins-extension.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    const contentTypeName = strapi.contentType('plugin::my-plugin.content-type-name')  \n    contentTypeName.attributes = {\n      // Spread previous defined attributes\n      ...contentTypeName.attributes,\n      // Add new, or override attributes\n      'toto': {\n        type: 'string',\n      }\n    }\n  },\n  bootstrap({ strapi }) {},\n};\n```\n\n----------------------------------------\n\nTITLE: Transaction Hooks Implementation in Strapi\nDESCRIPTION: Demonstrates how to use onCommit and onRollback hooks to execute code after transaction completion or failure.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-transactions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.transaction(async ({ onCommit, onRollback }) => {\n  // It will implicitly use the transaction\n  await strapi.entityService.create();\n  await strapi.entityService.create();\n\n  onCommit(() => {\n    // This will be executed after the transaction is committed\n  });\n\n  onRollback(() => {\n    // This will be executed after the transaction is rolled back\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration in JavaScript for Strapi 5 Admin Panel\nDESCRIPTION: Shows how to extend webpack configuration in JavaScript for Strapi 5's admin panel. This example adds the IgnorePlugin to exclude test files from the build. The function receives the existing config and webpack instance.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/bundlers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config, webpack) => {\n  // Note: we provide webpack above so you should not `require` it\n\n  // Perform customizations to webpack config\n  config.plugins.push(new webpack.IgnorePlugin(/\\/__tests__\\//));\n\n  // Important: return the modified config\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord SSO Provider in TypeScript\nDESCRIPTION: TypeScript implementation for setting up the Discord SSO provider in Strapi's admin configuration. It imports the Discord strategy type and configures the authentication with proper type safety.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/discord.md#2025-04-09_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Strategy as DiscordStrategy } from \"passport-discord\";\n\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"discord\",\n        displayName: \"Discord\",\n        icon: \"https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png\",\n        createStrategy: (strapi) =>\n          new DiscordStrategy(\n            {\n              clientID: env(\"DISCORD_CLIENT_ID\"),\n              clientSecret: env(\"DISCORD_SECRET\"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  \"discord\"\n                ),\n              scope: [\"identify\", \"email\"],\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: `${profile.username}#${profile.discriminator}`,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Translation Files in Strapi Plugin\nDESCRIPTION: Example of the registerTrads() async function implementation that registers a plugin's translation files. This creates separate chunks for application translations to reduce build size.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  async registerTrads({ locales }) {\n    const importedTrads = await Promise.all(\n      locales.map(locale => {\n        return import(\n          /* webpackChunkName: \"[pluginId]-[request]\" */ `./translations/${locale}.json`\n        )\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Middlewares in Strapi Plugin (TypeScript)\nDESCRIPTION: This snippet demonstrates how to implement and register middlewares in a Strapi plugin using TypeScript. It includes the middleware implementation, the middlewares index, and the registration in the plugin's lifecycle.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/** \n * The your-middleware.js file \n * declares a basic middleware function and exports it.\n */\nconst middleware = async (ctx, next) => {\n  console.log(\"your custom logic\")\n  await next();\n}\n\nexport default middleware;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The middleware function previously created\n * is imported from its file and\n * exported by the middlewares index.\n */\nimport yourMiddleware from 'your-middleware';\n\nexport default {\n  yourMiddleware\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The middleware is called from \n * the plugin's register lifecycle function.\n */\nimport type { Core } from '@strapi/strapi';\nimport middlewares from './middlewares';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  strapi.server.use(middlewares.yourMiddleware);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Plugin in TypeScript\nDESCRIPTION: Example of custom configuration for the GraphQL plugin in Strapi using TypeScript. It exports a function that returns the configuration object with various GraphQL settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default () => ({\n  graphql: {\n    config: {\n      endpoint: '/graphql',\n      shadowCRUD: true,\n      landingPage: false, // disable Sandbox everywhere\n      depthLimit: 7,\n      amountLimit: 100,\n      apolloServer: {\n        tracing: false,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Settings in Strapi Store\nDESCRIPTION: Example of how to store configuration settings in Strapi's store. This approach is used for multi-server friendly configurations, allowing you to set values with a specific key.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// strapi.store(object).set(object);\n// create reusable plugin store variable\nconst pluginStore = strapi.store({\n  environment: strapi.config.environment,\n  type: 'plugin',\n  name: 'users-permissions'\n});\nawait pluginStore.set({\n  key: 'grant',\n  value: {\n    ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Entry with Strapi Query Engine\nDESCRIPTION: Uses update() to modify an existing entry. Demonstrates filtering by ID and updating specific fields.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/single-operations.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.db.query('api::blog.article').update({\n  where: { id: 1 },\n  data: {\n    title: 'xxx',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Middleware Implementation with Filtering\nDESCRIPTION: Advanced example showing middleware implementation with content type filtering and specific action handling.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/middlewares.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst applyTo = ['api::article.article'];\n\nstrapi.documents.use((context, next) => {\n  // Only run for certain content types\n  if (!applyTo.includes(context.uid)) {\n    return next();\n  }\n\n  // Only run for certain actions\n  if (['create', 'update'].includes(context.action)) {\n    context.params.data.fullName = `${context.params.data.firstName} ${context.params.data.lastName}`;\n  }\n\n  const result = await next();\n\n  // do something with the result before returning it\n  return result\n});\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok tunnel for local development\nDESCRIPTION: Command to create an ngrok tunnel to expose localhost:1337 to the internet, which is required since Facebook OAuth doesn't support localhost URLs.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/facebook.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 1337\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub SSO Provider in Strapi (TypeScript)\nDESCRIPTION: This TypeScript version configures the GitHub SSO provider in the Strapi admin configuration file. It imports the GitHub strategy type, sets up the strategy with necessary parameters, and handles the user profile data returned by GitHub.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/github.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Strategy as GithubStrategy } from \"passport-github2\";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"github\",\n        displayName: \"Github\",\n        icon: \"https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png\",\n        createStrategy: (strapi) =>\n          new GithubStrategy(\n            {\n              clientID: env(\"GITHUB_CLIENT_ID\"),\n              clientSecret: env(\"GITHUB_CLIENT_SECRET\"),\n              scope: [\"user:email\"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\"github\"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.emails[0].value,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Policy in JavaScript\nDESCRIPTION: Defines a custom route configuration that applies the is-admin policy to the GET /restaurants endpoint. The policy will be executed before the Restaurant.find controller action.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`\n          is executed before the `find` action in the `Restaurant.js` controller.\n         */\n        policies: ['is-admin']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Column in List View Table Hook\nDESCRIPTION: Example of using the List View hook to add or modify columns in Content Manager's List View. The hook uses waterfall execution pattern and accepts displayedHeaders and layout parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nrunHookWaterfall(INJECT_COLUMN_IN_TABLE, {\n\tdisplayedHeaders: ListFieldLayout[],\n\tlayout: ListFieldLayout,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Authentication Events in Strapi (TypeScript)\nDESCRIPTION: TypeScript version of configuring SSO authentication events in Strapi, specifically the 'onSSOAutoRegistration' event. This event is triggered when a user is created using the auto-register feature added by SSO.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default () => ({\n    auth: {\n      // ...\n      events: {\n        onConnectionSuccess(e) {},\n        onConnectionError(e) {},\n        // ...\n        onSSOAutoRegistration(e) {\n          const { user, provider } = e;\n\n          console.log(\n            `A new user (${user.id}) has been automatically registered using ${provider}`\n          );\n        },\n      },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Change Password Request for Authenticated Users in Strapi\nDESCRIPTION: This code sends a change password request for an authenticated user to the Strapi backend API. It requires the current password, new password, and password confirmation, along with the user's JWT token.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\n// Request API.\naxios.post(\n  'http://localhost:1337/api/auth/change-password',\n  {\n    currentPassword: 'currentPassword',\n    password: 'userNewPassword',\n    passwordConfirmation: 'userNewPassword',\n  },\n  {\n    headers: {\n      Authorization: 'Bearer <user jwt>',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak SSO Provider in JavaScript\nDESCRIPTION: JavaScript configuration for Keycloak SSO provider in Strapi's admin configuration file. Sets up authentication strategy with environment variables for client credentials and server settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/keycloak.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst KeyCloakStrategy = require(\"passport-keycloak-oauth2-oidc\");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"keycloak\",\n        displayName: \"Keycloak\",\n        icon: \"https://raw.githubusercontent.com/keycloak/keycloak-admin-ui/main/themes/keycloak/logo.svg\",\n        createStrategy: (strapi) =>\n          new KeyCloakStrategy(\n            {\n              clientID: env(\"KEYCLOAK_CLIENT_ID\", \"\"),\n              realm: env(\"KEYCLOAK_REALM\", \"\"),\n              publicClient: env.bool(\"KEYCLOAK_PUBLIC_CLIENT\", false),\n              clientSecret: env(\"KEYCLOAK_CLIENT_SECRET\", \"\"),\n              sslRequired: env(\"KEYCLOAK_SSL_REQUIRED\", \"external\"),\n              authServerURL: env(\"KEYCLOAK_AUTH_SERVER_URL\", \"\"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  \"keycloak\"\n                ),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Single Document with Locale Parameter\nDESCRIPTION: Example of using findOne() method with the locale parameter to retrieve a specific language version of a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findOne({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: 'fr',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Default Settings and Validator in JavaScript\nDESCRIPTION: Example of setting up default configuration and a configuration validator for a Strapi plugin in JavaScript. This defines default options and validates user-provided configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  default: ({ env }) => ({ optionA: true }),\n  validator: (config) => { \n    if (typeof config.optionA !== 'boolean') {\n      throw new Error('optionA has to be a boolean');\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Locale for a Document with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation demonstrates how to delete a specific localization for a restaurant document. It uses the 'locale' argument to specify which language version should be removed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeleteRestaurant($documentId: ID!, $locale: I18NLocaleCode) {\n  deleteRestaurant(documentId: \"xzmzdo4k0z73t9i68a7yx2kk\", locale: \"fr\") {\n    documentId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Strapi Test Helper\nDESCRIPTION: Helper functions to setup and cleanup Strapi instance for testing purposes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Strapi = require(\"@strapi/strapi\");\nconst fs = require(\"fs\");\n\nlet instance;\n\nasync function setupStrapi() {\n  if (!instance) {\n    await Strapi().load();\n    instance = strapi;\n    \n    await instance.server.mount();\n  }\n  return instance;\n}\n\nasync function cleanupStrapi() {\n  const dbSettings = strapi.config.get(\"database.connection\");\n\n  await strapi.server.httpServer.close();\n\n  await strapi.db.connection.destroy();\n\n  if (dbSettings && dbSettings.connection && dbSettings.connection.filename) {\n    const tmpDbFile = dbSettings.connection.filename;\n    if (fs.existsSync(tmpDbFile)) {\n      fs.unlinkSync(tmpDbFile);\n    }\n  }\n}\n\nmodule.exports = { setupStrapi, cleanupStrapi };\n```\n\n----------------------------------------\n\nTITLE: CRON Job with Timezone in TypeScript\nDESCRIPTION: Demonstrates how to create a CRON job with timezone configuration in TypeScript. This job runs every Monday at 1am in the Asia/Dhaka timezone.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  /**\n   * Cron job with timezone example.\n   * Every Monday at 1am for Asia/Dhaka timezone.\n   * List of valid timezones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List\n   */\n\n  myJob: {\n    task: ({ strapi }) => {\n      /* Add your own logic here */\n    },\n    options: {\n      rule: \"0 0 1 * * 1\",\n      tz: \"Asia/Dhaka\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Database Migration Template in JavaScript\nDESCRIPTION: Template for creating a Strapi database migration file. The migration exports an 'up' function that receives a Knex instance and runs in a database transaction.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-migrations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict'\n\nasync function up(knex) {}\n\nmodule.exports = { up };\n```\n\n----------------------------------------\n\nTITLE: GraphQL Customization Implementation\nDESCRIPTION: Example of customizing GraphQL functionality including disabling operations, extending schema, and adding custom resolvers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n    \n    extensionService.shadowCRUD('api::restaurant.restaurant').disable();\n    extensionService.shadowCRUD('api::category.category').disableQueries();\n    extensionService.shadowCRUD('api::address.address').disableMutations();\n    extensionService.shadowCRUD('api::document.document').field('locked').disable();\n    extensionService.shadowCRUD('api::like.like').disableActions(['create', 'update', 'delete']);\n    \n    const extension = ({ nexus }) => ({\n      types: [\n        nexus.objectType({\n          name: 'Book',\n          definition(t) {\n            t.string('title');\n          },\n        }),\n      ],\n      plugins: [\n        nexus.plugin({\n          name: 'MyPlugin',\n          onAfterBuild(schema) {\n            console.log(schema);\n          },\n        }),\n      ],\n      typeDefs: `\n          type Article {\n              name: String\n          }\n      `,\n      resolvers: {\n        Query: {\n          address: {\n            resolve() {\n              return { value: { city: 'Montpellier' } };\n            },\n          },\n        },\n      },\n      resolversConfig: {\n        'Query.address': {\n          auth: false,\n        },\n      },\n    });\n    extensionService.use(extension);\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n    \n    extensionService.shadowCRUD('api::restaurant.restaurant').disable();\n    extensionService.shadowCRUD('api::category.category').disableQueries();\n    extensionService.shadowCRUD('api::address.address').disableMutations();\n    extensionService.shadowCRUD('api::document.document').field('locked').disable();\n    extensionService.shadowCRUD('api::like.like').disableActions(['create', 'update', 'delete']);\n    \n    const extension = ({ nexus }) => ({\n      types: [\n        nexus.objectType({\n          name: 'Book',\n          definition(t) {\n            t.string('title');\n          },\n        }),\n      ],\n      plugins: [\n        nexus.plugin({\n          name: 'MyPlugin',\n          onAfterBuild(schema) {\n            console.log(schema);\n          },\n        }),\n      ],\n      typeDefs: `\n          type Article {\n              name: String\n          }\n      `,\n      resolvers: {\n        Query: {\n          address: {\n            resolve() {\n              return { value: { city: 'Montpellier' } };\n            },\n          },\n        },\n      },\n      resolversConfig: {\n        'Query.address': {\n          auth: false,\n        },\n      },\n    });\n    extensionService.use(extension);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft SSO Dependencies with NPM\nDESCRIPTION: Commands to install required npm packages passport-azure-ad-oauth2 and jsonwebtoken using NPM package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/microsoft.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save passport-azure-ad-oauth2 jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Plugins in TypeScript\nDESCRIPTION: Example configuration for Strapi plugins in TypeScript, showing how to enable plugins without configuration, enable a custom local plugin with configuration, and disable installed plugins. This code would be placed in the ./config/plugins.ts file of a Strapi project.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // enable a plugin that doesn't require any configuration\n  i18n: true,\n\n  // enable a custom plugin\n  myplugin: {\n    // my-plugin is going to be the internal name used for this plugin\n    enabled: true,\n    resolve: './src/plugins/my-local-plugin',\n    config: {\n      // user plugin config goes here\n    },\n  },\n\n  // disable a plugin\n  'my-other-plugin': {\n    enabled: false, // plugin installed but disabled\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Controller in Strapi Plugin\nDESCRIPTION: Creates a simple controller with an index method that returns a text message. This controller will be called when the custom admin route is accessed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/pass-data-from-server-to-admin.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nmodule.exports = {\n  async index(ctx) {\n    ctx.body = 'You are in the my-plugin-content-type controller!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Review Form Component in React/NextJS\nDESCRIPTION: Implementation of a new review form component using NextUI and Formik, with JWT authentication to submit reviews to Strapi's REST API. The component handles form submission and API communication.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Input, Textarea } from '@nextui-org/react';\nimport { useFormik } from 'formik';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { getStrapiURL } from '../../../../../utils';\n\nconst NewReview = () => {\n  const router = useRouter();\n\n  const { handleSubmit, handleChange, values } = useFormik({\n    initialValues: {\n      note: '',\n      content: '',\n    },\n    onSubmit: async (values) => {\n      const res = await fetch(getStrapiURL('/reviews'), {\n        method: 'POST',\n        body: JSON.stringify({\n          restaurant: router.query.slug,\n          ...values,\n        }),\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n        },\n      });\n    },\n  });\n\n  return (\n    <div className=\"my-6\">\n      <h1 className=\"font-bold text-2xl mb-3\">Write your review</h1>\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-y-4\">\n        <Input\n          onChange={handleChange}\n          name=\"note\"\n          type=\"number\"\n          min={1}\n          max={5}\n          label=\"Stars\"\n        />\n        <Textarea\n          name=\"content\"\n          onChange={handleChange}\n          placeholder=\"What do you think about this restaurant?\"\n        />\n        <Button\n          type=\"submit\"\n          className=\"bg-primary text-white rounded-md self-start\"\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewReview;\n```\n\n----------------------------------------\n\nTITLE: Defining Controllers for Strapi Plugin\nDESCRIPTION: Illustrates how to set up controllers for a Strapi plugin, including the main index file and a specific controller. Shows the structure for both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/src/index.js\n\n//…\nconst controllers = require('./controllers');\n//…\n\nmodule.exports = () => ({\n  //…\n  controllers,\n  //…\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/controllers/index.js\n\nconst controllerA = require('./controller-a');\nconst controllerB = require('./controller-b');\n\nmodule.exports = {\n  controllerA,\n  controllerB,\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/controllers/controller-a.js\n\n'use strict';\n\nconst controllerA = ({ strapi }) => ({\n  index(ctx) {\n    ctx.body = strapi\n      .plugin('my-strapi-plugin')\n      // the name of the service file & the method.\n      .service('service')\n      .getWelcomeMessage();\n  },\n});\n\nmodule.exports = controllerA;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/src/index.ts\n\nimport controllers from './controllers';\n\nmodule.exports = () => ({\n  controllers,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/controllers/index.ts\n\nimport controllerA from './controller-a';\nimport controllerB from './controller-b';\n\nexport default {\n  controllerA,\n  controllerB,\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/controllers/controller-a.ts\n\nimport type { Core } from '@strapi/strapi';\n\nconst controllerA = ({ strapi }: { strapi: Core.Strapi }) => ({\n  index(ctx) {\n    ctx.body = strapi\n      .plugin('my-strapi-plugin')\n      // the name of the service file & the method.\n      .service('service')\n      .getWelcomeMessage();\n  },\n});\n\nexport default controllerA;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fields in Strapi Content-Type Schema\nDESCRIPTION: Example of defining a custom field in a Strapi content-type schema. Custom fields extend Strapi's capabilities by adding new types of fields with specific options and functionality.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  // …\n  \"attributes\": {\n    \"attributeName\": { // attributeName would be replaced by the actual attribute name\n      \"type\": \"customField\",\n      \"customField\": \"plugin::color-picker.color\",\n      \"options\": {\n        \"format\": \"hex\"\n      }\n    }\n  }\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Localized Document with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation demonstrates how to create a new localized restaurant document for the French locale. It shows the use of the 'locale' argument in the mutation to specify the target language.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateRestaurant($data: RestaurantInput!, $locale: I18NLocaleCode) {\n  createRestaurant(\n    data: {\n      name: \"Brasserie Bonjour\",\n      description: \"Description in French goes here\"\n    },\n    locale: \"fr\"\n  ) {\n  documentId\n  name\n  description\n  locale\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise-Returning Lifecycle Functions in Strapi\nDESCRIPTION: Example of register, bootstrap, and destroy lifecycle functions that return promises in Strapi. This approach allows for promise-based asynchronous operations within these lifecycle methods.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/functions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register() {\n    return new Promise(/* some code */);\n  },\n  bootstrap() {\n    return new Promise(/* some code */);\n  },\n  destroy() {\n    return new Promise(/* some code */);\n  }\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  register() {\n    return new Promise(/* some code */);\n  },\n  bootstrap() {\n    return new Promise(/* some code */);\n  },\n  destroy() {\n    return new Promise(/* some code */);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Stack in JavaScript\nDESCRIPTION: Example of middleware configuration in JavaScript showing the loading order and different types of middleware declarations including internal, custom, and configured middlewares.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  'strapi::logger',\n  'strapi::errors',\n  'strapi::security',\n  'strapi::cors',\n\n  'global::my-custom-node-module', \n\n  {\n    name: 'my-custom-node-module',\n    config: {\n      foo: 'bar',\n    },\n  },\n\n  {\n    resolve: '../some-dir/custom-middleware',\n    config: {\n      foo: 'bar',\n    },\n  },\n\n  {\n    name: 'strapi::poweredBy',\n    config: {\n      poweredBy: 'Some awesome company',\n    },\n  },\n\n  'strapi::query',\n  'strapi::body',\n  'strapi::session',\n  'strapi::favicon',\n  'strapi::public',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SSO Provider in JavaScript\nDESCRIPTION: JavaScript configuration for Microsoft SSO provider in Strapi's admin configuration file. Sets up Azure AD OAuth2 strategy with environment variables and user profile mapping.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/microsoft.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst AzureAdOAuth2Strategy = require(\"passport-azure-ad-oauth2\");\nconst jwt = require(\"jsonwebtoken\");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"azure_ad_oauth2\",\n        displayName: \"Microsoft\",\n        icon: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/320px-Microsoft_logo_%282012%29.svg.png\",\n        createStrategy: (strapi) =>\n          new AzureAdOAuth2Strategy(\n            {\n              clientID: env(\"MICROSOFT_CLIENT_ID\", \"\"),\n              clientSecret: env(\"MICROSOFT_CLIENT_SECRET\", \"\"),\n              scope: [\"user:email\"],\n              tenant: env(\"MICROSOFT_TENANT_ID\", \"\"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  \"azure_ad_oauth2\"\n                ),\n            },\n            (accessToken, refreshToken, params, profile, done) => {\n              let waadProfile = jwt.decode(params.id_token, \"\", true);\n              done(null, {\n                email: waadProfile.email,\n                username: waadProfile.email,\n                firstname: waadProfile.given_name, // optional if email and username exist\n                lastname: waadProfile.family_name, // optional if email and username exist\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: One-off CRON Job in JavaScript\nDESCRIPTION: Shows how to create a one-time CRON job in JavaScript that runs once after a specific delay (10 seconds in this example).\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  myJob: {\n    task: ({ strapi }) => {\n      /* Add your own logic here */\n    },\n    // only run once after 10 seconds\n    options: new Date(Date.now() + 10000),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Published Versions in GraphQL\nDESCRIPTION: Example GraphQL query to fetch published versions of restaurant documents.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery Query($status: PublicationStatus) {\n  restaurants(status: PUBLISHED) {\n    documentId\n    name\n    publishedAt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Information Schema in Strapi\nDESCRIPTION: Shows how to configure model information including display name, singular/plural names, and description used in the admin panel and API routes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": {\n    \"displayName\": \"Restaurant\",\n    \"singularName\": \"restaurant\",\n    \"pluralName\": \"restaurants\",\n    \"description\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Document for a Specific Locale with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation shows how to update an existing restaurant document for the French locale. It demonstrates updating the description field while specifying the target locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!, $locale: I18NLocaleCode) {\n  updateRestaurant(\n    documentId: \"a1b2c3d4e5d6f7g8h9i0jkl\"\n    data: {\n      description: \"New description in French\"\n    },\n    locale: \"fr\"\n  ) {\n  documentId\n  name\n  description\n  locale\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Dynamic Zones\nDESCRIPTION: Example showing how to populate dynamic zones with component-specific populate queries\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  populate: {\n    testDZ: {\n      on: {\n        \"test.test-compo\": {\n          fields: [\"testString\"],\n          populate: [\"testNestedCompo\"],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing register() Lifecycle Function in JavaScript\nDESCRIPTION: Example of implementing the register() lifecycle function for a Strapi plugin in JavaScript. This function is called to load the plugin before the application is bootstrapped.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst register = ({ strapi }) => {\n  // execute some register code\n};\n\nmodule.exports = register;\n```\n\n----------------------------------------\n\nTITLE: Creating Entry with Strapi Query Engine\nDESCRIPTION: Uses create() to create a new entry in the database. Shows basic data input structure.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/single-operations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.db.query('api::blog.article').create({\n  data: {\n    title: 'My Article',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in TypeScript for Strapi Authentication Providers\nDESCRIPTION: This TypeScript configuration sets up the server URL for Strapi, which is required for authentication providers to work properly. It uses environment variables for host, port, and URL configuration with defaults.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  url: env('', 'http://localhost:1337'),\n});\n```\n\n----------------------------------------\n\nTITLE: One-off CRON Job in TypeScript\nDESCRIPTION: Shows how to create a one-time CRON job in TypeScript that runs once after a specific delay (10 seconds in this example).\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  myJob: {\n    task: ({ strapi }) => {\n      /* Add your own logic here */\n    },\n    // only run once after 10 seconds\n    options: new Date(Date.now() + 10000),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Reviews Component to Include New Review Form\nDESCRIPTION: Modification of the existing reviews component to include the new review form component. This update adds the form to the restaurant page layout.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport delve from 'dlv';\n\nimport { formatDistance } from 'date-fns';\n\nimport { getStrapiMedia } from '../../../../../utils';\nimport { Textarea } from '@nextui-org/react';\nimport NewReview from './new-review';\n\nconst Reviews = ({ reviews }) => {\n  return (\n    <div className=\"col-start-2 col-end-2 mt-24\">\n      <NewReview />\n      {reviews &&\n        reviews.map((review, index) => (\n  // …\n```\n\n----------------------------------------\n\nTITLE: Finding Strapi Version via CLI\nDESCRIPTION: Commands to check the current Strapi version number using either yarn or npm from the project directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrades.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi version\nnpm run strapi version\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Casting Examples\nDESCRIPTION: Comprehensive examples of casting environment variables to different data types using the env() utility\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-cast-environment-variables.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns the env if defined without casting it\nenv('VAR', 'default');\n\n// Cast to integer (using parseInt)\nenv.int('VAR', 0);\n\n// Cast to float (using parseFloat)\nenv.float('VAR', 3.14);\n\n// Cast to boolean (check if the value is equal to 'true')\nenv.bool('VAR', true);\n\n// Cast to JS object (using JSON.parse)\nenv.json('VAR', { key: 'value' });\n\n// Cast to array (syntax: ENV_VAR=[value1, value2, value3] | ENV_VAR=[\"value1\", \"value2\", \"value3\"])\nenv.array('VAR', [1, 2, 3]);\n\n// Cast to date (using new Date(value))\nenv.date('VAR', new Date());\n\n// Returns the env matching oneOf union types\nenv.oneOf('UPLOAD_PROVIDER', ['local', 'aws'], 'local')\n```\n\n----------------------------------------\n\nTITLE: Setting Common Domain for Cookies in Multi-domain Setup (TypeScript)\nDESCRIPTION: TypeScript configuration for setting a common domain for cookies when deploying the admin panel on a different subdomain, ensuring cookies are shared across domains.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default ({ env }) => ({\n  auth: {\n    domain: env(\"ADMIN_SSO_DOMAIN\", \".test.example.com\"),\n    providers: [\n      // ...\n    ],\n  },\n  url: env(\"ADMIN_URL\", \"http://admin.test.example.com\"),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a CRON Job with Key Format in TypeScript\nDESCRIPTION: Shows how to define a CRON job using the key format in TypeScript, where the CRON pattern is used as the object key. This example runs every Monday at 1am.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  /**\n   * Simple example.\n   * Every monday at 1am.\n   */\n\n  \"0 0 1 * * 1\": ({ strapi }) => {\n    // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Policy Error Messages in Strapi\nDESCRIPTION: This code extends the custom review policy to throw a custom error message when a restaurant owner attempts to submit a review for their own restaurant. It uses the PolicyError class from Strapi's utils to create a more informative error response.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/policies.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errors } = require('@strapi/utils');\nconst { PolicyError } = errors;\n\nmodule.exports = async (policyContext, config, { strapi }) => {\n  const { body } = policyContext.request;\n  const { user } = policyContext.state;\n\n  // Return an error if there is no authenticated user with the request\n  if (!user) {\n    return false;\n  }\n  /**\n   * Queries the Restaurants collection type\n   * using the Entity Service API\n   * to retrieve information about the restaurant's owner.\n   */ \n  const filteredRestaurants = await strapi.entityService.findMany(\n    'api::restaurant.restaurant',\n    {\n      filters: {\n        slug: body.restaurant,\n      },\n      populate: ['owner'],\n    }\n  );\n\n  const restaurant = filteredRestaurants[0];\n\n  if (!restaurant) {\n    return false;\n  }\n\n  /**\n   * If the user submitting the request is the restaurant's owner,\n   * we don't allow the review creation.\n   */ \n  if (user.id === restaurant.owner.id) {\n    /**\n     * Throws a custom policy error\n     * instead of just returning false\n     * (which would result into a generic Policy Error).\n     */ \n    throw new PolicyError('The owner of the restaurant cannot submit reviews', {\n      errCode: 'RESTAURANT_OWNER_REVIEW', // can be useful for identifying different errors on the front end\n    });\n  }\n\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Model Settings Configuration in Strapi\nDESCRIPTION: Demonstrates basic model settings configuration including collection type and database table name specification.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"collectionType\",\n  \"collectionName\": \"Restaurants_v1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Populating with Create Operation\nDESCRIPTION: Example of using populate parameter while creating a new document\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documents(\"api::article.article\").create({\n  data: {\n    title: \"Test Article\",\n    slug: \"test-article\",\n    body: \"Test 1\",\n    headerImage: 2,\n  },\n  populate: [\"headerImage\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Provider in TypeScript\nDESCRIPTION: Template for implementing a custom Email provider in TypeScript with initialization and send functionality.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport {\n  init: (providerOptions = {}, settings = {}) => {\n    return {\n      send: async options => {},\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with findOne() in Strapi's Document Service API\nDESCRIPTION: Demonstrates how to use the 'fields' parameter to select specific fields when finding a single document. This example retrieves only the 'name' and 'description' fields of a restaurant document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").findOne({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  fields: [\"name\", \"description\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Forbidden Error Example\nDESCRIPTION: Shows how to throw a ForbiddenError for authentication failure cases.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.ForbiddenError('Ah ah ah, you didn\\'t say the magic word');\n```\n\n----------------------------------------\n\nTITLE: Populating All Root Level Relations in Strapi Query Engine API\nDESCRIPTION: This snippet demonstrates how to populate all root level relations using the 'populate: true' option in a findMany() query.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/populating.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  populate: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Environment Variables in JavaScript\nDESCRIPTION: Example of using env() utility to access environment variables in JavaScript configuration file\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-cast-environment-variables.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connections: {\n    default: {\n      settings: {\n        password: env('DATABASE_PASSWORD'),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering with $or Operator in Strapi Entity Service API\nDESCRIPTION: Shows how to use the $or logical operator to filter results where one or many nested conditions must be true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/filter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    $or: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using $notIn Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $notIn operator to find records where an attribute is not contained in a list of values. This query retrieves articles with titles not matching any of the specified values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notIn: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Routes with Policy in Strapi\nDESCRIPTION: This code creates a custom router for the 'review' content type that bypasses standard authentication and implements a custom 'is-owner-review' policy. The configuration specifically targets the create route to prevent restaurant owners from reviewing their own establishments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/routes.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n'use strict';\n\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::review.review', {\n  config: {\n    create: {\n      auth: false, // set the route to bypass the normal Strapi authentication system\n      policies: ['is-owner-review'], // set the route to use a custom policy\n      middlewares: [],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Model Attributes Configuration in Strapi\nDESCRIPTION: Illustrates how to define model attributes with various validations, including string length constraints, uniqueness, and required fields.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"minLength\": 3,\n      \"maxLength\": 99,\n      \"unique\": true\n    },\n    \"description\": {\n      \"default\": \"My description\",\n      \"type\": \"text\",\n      \"required\": true\n    },\n    \"slug\": {\n      \"type\": \"uid\",\n      \"targetField\": \"title\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auth0 Subdomain Format Example\nDESCRIPTION: Example format for Auth0 tenant subdomain URL used in Strapi configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/auth-zero.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://my-tenant.eu.auth0.com/\n```\n\n----------------------------------------\n\nTITLE: Populating with Publish Operation\nDESCRIPTION: Example of using populate parameter while publishing a document\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documents(\"api::article.article\").publish({\n  documentId: \"cjld2cjxh0000qzrmn831i7rn\",\n  populate: [\"headerImage\"],\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Pagination by Page Query\nDESCRIPTION: Demonstrates how to implement page-based pagination in GraphQL queries with page and pageSize parameters. Returns paginated restaurant data with page information.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants_connection(pagination: { page: 1, pageSize: 10 }) {\n    nodes {\n      documentId\n      name\n    }\n    pageInfo {\n      page\n      pageSize\n      pageCount\n      total\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Restaurants by IDs with qs Library\nDESCRIPTION: Example of using the qs library to build a query to find multiple restaurants by their IDs using the $in operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/filters.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  filters: {\n    id: {\n      $in: [3, 6, 8],\n    },\n  },\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/restaurants?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Object-Based Configuration Export\nDESCRIPTION: Example of exporting configuration as a simple object with a secret value.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-configuration-values.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  mySecret: 'someValue',\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  mySecret: 'someValue',\n};\n```\n\n----------------------------------------\n\nTITLE: Using $eq Attribute Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $eq operator to find records where an attribute equals the specified value. This query retrieves articles with the exact title 'Hello World'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $eq: 'Hello World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Analytics Middleware for Restaurant Tracking\nDESCRIPTION: Custom middleware that tracks restaurant page visits by updating a Google Sheets document. Handles both existing and new restaurant entries in the analytics spreadsheet.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/middlewares.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst { createGoogleSheetClient } = require('./utils');\n\nconst serviceAccountKeyFile = './gs-keys.json';\nconst sheetId = '1P7Oeh84c18NlHp1Zy-5kXD8zgpoA1WmvYL62T4GWpfk';\nconst tabName = 'Restaurants';\nconst range = 'A2:C';\n\nconst VIEWS_CELL = 'C';\n\nconst transformGSheetToObject = (response) =>\n  response.reduce(\n    (acc, restaurant) => ({\n      ...acc,\n      [restaurant[0]]: {\n        id: restaurant[0],\n        name: restaurant[1],\n        views: restaurant[2],\n        cellNum: Object.keys(acc).length + 2\n      },\n    }),\n    {}\n  );\n\nmodule.exports = (config, { strapi }) => {\n  return async (context, next) => {\n    const { readGoogleSheet, updateoogleSheet, writeGoogleSheet } =\n      await createGoogleSheetClient({\n        keyFile: serviceAccountKeyFile,\n        range,\n        sheetId,\n        tabName,\n      });\n    \n    const restaurantId = context.params.id;\n    const restaurant = await strapi.entityService.findOne(\n      'api::restaurant.restaurant',\n      restaurantId\n    );\n\n    const restaurantAnalytics = await readGoogleSheet();\n    \n    const requestedRestaurant =\n      transformGSheetToObject(restaurantAnalytics)[restaurantId];\n\n    if (requestedRestaurant) {\n      await updateoogleSheet(\n        `${VIEWS_CELL}${requestedRestaurant.cellNum}:${VIEWS_CELL}${requestedRestaurant.cellNum}`,\n        [[Number(requestedRestaurant.views) + 1]]\n      );\n    } else {\n      const newRestaurant = [[restaurant.id, restaurant.name, 1]];\n      await writeGoogleSheet(newRestaurant);\n    }\n  \n    await next();\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Unidirectional Relation in Strapi Schema\nDESCRIPTION: Example of configuring a unidirectional one-to-one relationship in Strapi, where an article belongs to a category but querying a category won't retrieve the article.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  category: {\n    type: 'relation',\n    relation: 'oneToOne',\n    target: 'category',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Retrieving Published Document with findFirst()\nDESCRIPTION: Query to fetch the first published document using the Document Service API by specifying the published status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").findFirst({\n  status: 'published',\n});\n```\n\n----------------------------------------\n\nTITLE: Single Field Ordering in Strapi Entity Service\nDESCRIPTION: Examples of ordering results by a single field using either a string for default ascending order or an object to specify sort direction.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/order-pagination.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.findMany('api::article.article', {\n  sort: 'id',\n});\n\n// single with direction\nstrapi.entityService.findMany('api::article.article', {\n  sort: { id: 'desc' },\n});\n```\n\n----------------------------------------\n\nTITLE: Populating Components\nDESCRIPTION: Example of populating component fields in a findMany query\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  populate: [\"testComp\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring routes to use the creator fields population middleware\nDESCRIPTION: This JavaScript code modifies the default route configuration to apply the custom middleware to specific routes (find and findOne). This ensures the middleware runs only for these routes, automatically populating creator fields in the response.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/populate-creator-fields.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nconst { createCoreRouter } = require(\"@strapi/strapi\").factories;\n\nmodule.exports = createCoreRouter(\"api::test.test\", {\n  config: {\n    find: {\n      middlewares: [\"api::test.default-test-populate\"],\n    },\n    findOne: {\n      middlewares: [\"api::test.default-test-populate\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Function-Based Configuration Export\nDESCRIPTION: Advanced configuration export using a function that accepts environment utilities and returns a configuration object.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-configuration-values.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => {\n  return {\n    mySecret: env('MY_SECRET_KEY', 'defaultSecretValue'),\n  };\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => {\n  return {\n    mySecret: env('MY_SECRET_KEY', 'defaultSecretValue'),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using $startsWith Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $startsWith operator to find records where an attribute starts with a specified value. This query retrieves articles with titles starting with 'ABCD'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $startsWith: 'ABCD',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Request Context Access Example\nDESCRIPTION: Example showing the structure of ctx.request.params when accessing URL parameters in Strapi routes\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/requests-responses.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/restaurants/:id -> ctx.request.params.id\n```\n\n----------------------------------------\n\nTITLE: Dynamically Enabling Apollo Sandbox in TypeScript\nDESCRIPTION: Function to dynamically enable Apollo Sandbox based on the environment in TypeScript. It enables the sandbox in non-production environments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => {\n  graphql: {\n    config: {\n      endpoint: '/graphql',\n      shadowCRUD: true,\n      landingPage: (strapi) => {\n        if (env(\"NODE_ENV\") !== \"production\") {\n          return true;\n        } else {\n          return false;\n        }\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Document in a Locale with GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch a single restaurant document for a specific locale. It uses both 'documentId' and 'locale' arguments to retrieve the desired localized content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery Restaurant($documentId: ID!, $locale: I18NLocaleCode) {\n  restaurant(documentId: \"a1b2c3d4e5d6f7g8h9i0jkl\", locale: \"fr\") {\n    documentId\n    name\n    description\n    locale\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the $eqi operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to perform case-insensitive equality filtering with the $eqi operator to match text regardless of letter case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $eqi: 'HELLO World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $between operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter for articles with values within a specified range using the $between operator, which includes the boundary values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    rating: {\n      $between: [1, 20],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Strapi TypeScript Project with NPM\nDESCRIPTION: Command to create a new Strapi project with TypeScript support using NPM package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi-app@latest my-project --typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring Components in Strapi Content-Type Schema\nDESCRIPTION: Example of adding a component field to a Strapi content-type schema. Components create a relation between a content-type and a reusable component structure that can be repeatable or non-repeatable.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"openinghours\": {\n      \"type\": \"component\",\n      \"repeatable\": true,\n      \"component\": \"restaurant.openinghours\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Published Documents\nDESCRIPTION: Query to count only published documents using the Document Service API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst publishedCount = await strapi.documents(\"api::restaurant.restaurant\").count({\n  status: 'published'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Upload Provider in TypeScript\nDESCRIPTION: Configures the AWS S3 provider for Strapi's Upload feature in the plugins.ts file. Includes options for provider, S3 credentials, region, and bucket settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  upload: {\n    config: {\n      provider: 'aws-s3', // For community providers pass the full package name (e.g. provider: 'strapi-provider-upload-google-cloud-storage')\n      providerOptions: {\n        accessKeyId: env('AWS_ACCESS_KEY_ID'),\n        secretAccessKey: env('AWS_ACCESS_SECRET'),\n        region: env('AWS_REGION'),\n        params: {\n          ACL: env('AWS_ACL', 'public-read'), // 'private' if you want to make the uploaded files private\n          Bucket: env('AWS_BUCKET'),\n        },\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Populating with Entity Service API in JavaScript\nDESCRIPTION: Demonstrates how to populate all root level relations using '*' and how to populate specific component or relation fields using an array of attribute names.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/populate.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  populate: '*',\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  populate: ['componentA', 'relationA'],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $notIn operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates filtering for articles where a field value is not contained in the provided array using the $notIn operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $notIn: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Paginating Results in Strapi Query Engine API (JavaScript)\nDESCRIPTION: Demonstrates how to paginate query results using the Strapi Query Engine API. It uses the 'offset' and 'limit' parameters to control the pagination of returned results.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/order-pagination.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  offset: 15, \n  limit: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $endsWith operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates case-sensitive suffix matching using the $endsWith operator to find articles with titles ending with specific text.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $endsWith: 'ABCD',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $notContainsi operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter for articles with titles that don't contain a specific substring using the case-insensitive $notContainsi operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $notContainsi: 'hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with findMany() in Strapi's Document Service API\nDESCRIPTION: Illustrates how to use the 'fields' parameter to select specific fields when finding multiple documents. This example retrieves only the 'name' and 'description' fields of all restaurant documents.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::restaurant.restaurant\").findMany({\n  fields: [\"name\", \"description\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Media Delete Event in Strapi\nDESCRIPTION: This snippet demonstrates the payload structure for the 'media.delete' event in Strapi. It is triggered when a media file is deleted through the media interface.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"media.delete\",\n  \"createdAt\": \"2020-01-10T11:02:46.232Z\",\n  \"media\": {\n    \"id\": 11,\n    \"name\": \"photo.png\",\n    \"hash\": \"43761478513a4c47a5fd4a03178cfccb\",\n    \"sha256\": \"HrpDOKLFoSocilA6B0_icA9XXTSPR9heekt2SsHTZZE\",\n    \"ext\": \".png\",\n    \"mime\": \"image/png\",\n    \"size\": 4947.76,\n    \"url\": \"/uploads/43761478513a4c47a5fd4a03178cfccb.png\",\n    \"provider\": \"local\",\n    \"provider_metadata\": null,\n    \"createdAt\": \"2020-01-07T19:34:32.168Z\",\n    \"updatedAt\": \"2020-01-07T19:34:32.168Z\",\n    \"related\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Zones in Strapi Content-Type Schema\nDESCRIPTION: Example of setting up a dynamic zone in a Strapi content-type schema. Dynamic zones create flexible spaces where content can be composed from a mixed list of components, allowing for more versatile content structures.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"body\": {\n      \"type\": \"dynamiczone\",\n      \"components\": [\"article.slider\", \"article.content\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Unidirectional Relation in Strapi Schema\nDESCRIPTION: Example of configuring a unidirectional many-to-one relationship in Strapi, where a book can be written by many authors.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  author: {\n    type: 'relation',\n    relation: 'manyToOne',\n    target: 'author',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Sorting on a Single Field with Document Service API\nDESCRIPTION: Demonstrates how to sort query results based on a single field using the Document Service API. This example sorts articles by their title in ascending order using the 'sort' parameter with a string value.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/sort-pagination.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  sort: \"title:asc\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using $containsi Case-Insensitive Contains Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $containsi operator for case-insensitive substring matching. This query finds articles with titles containing 'hello' regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $containsi: 'hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Input Component in Strapi Plugin\nDESCRIPTION: This snippet demonstrates how to register a custom input component for a color picker plugin in Strapi. It uses dynamic import for code splitting.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/custom-fields.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  register(app) {\n    app.customFields.register({\n      // …\n      components: {\n        Input: async () =>\n          import(/* webpackChunkName: \"input-component\" */ \"./Input\"),\n      },\n      // …\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the $null operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates filtering for articles where a field has a null value using the $null operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $null: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Restaurants with Custom Order using JavaScript and qs\nDESCRIPTION: This snippet shows how to sort restaurants by Description in ascending order and Name in descending order using the qs library to construct the query string for a Strapi REST API request.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/sort-pagination.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  sort: ['Description:asc', 'Name:desc'],\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/restaurants?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Querying with advanced filters in GraphQL\nDESCRIPTION: GraphQL query using advanced filters to fetch restaurants with an averagePrice less than 20 and names that either exactly match or start with 'Pizzeria'. This demonstrates complex filtering capabilities.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants(\n    filters: { \n      averagePrice: { lt: 20 },\n      or: [\n        { name: { eq: \"Pizzeria\" }}\n        { name: { startsWith: \"Pizzeria\" }}\n      ]}\n    ) {\n    documentId\n    name\n    averagePrice\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-API Policy Reference in JavaScript\nDESCRIPTION: Demonstrates how to reference and use a policy from another API using the api::[apiName].[policyName] syntax in JavaScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/categories',\n      handler: 'Category.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`\n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['api::restaurant.is-admin']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting on Multiple Fields with Document Service API\nDESCRIPTION: Shows how to sort query results based on multiple fields by passing an array of sorting criteria. This example sorts articles first by title in ascending order, then by slug in descending order.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/sort-pagination.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  sort: [{ title: \"asc\" }, { slug: \"desc\" }],\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Update Localized Document Mutation\nDESCRIPTION: Mutation to update an existing restaurant document's content for a specific locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!, $locale: I18NLocaleCode) {\n  updateRestaurant(\n    documentId: \"a1b2c3d4e5d6f7g8h9i0jkl\"\n    data: {\n      description: \"New description in French\"\n    },\n    locale: \"fr\"\n  ) {\n  documentId\n  name\n  description\n  locale\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview Route Handler in Next.js\nDESCRIPTION: Sets up a Next.js API route handler for preview mode functionality. Handles secret validation, draft mode toggling, and URL redirection based on content status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\n\nexport async function GET(request: Request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url);\n  const secret = searchParams.get(\"secret\");\n  const url = searchParams.get(\"url\");\n  const status = searchParams.get(\"status\");\n\n  // Check the secret and next parameters\n  // This secret should only be known to this route handler and the CMS\n  if (secret !== process.env.PREVIEW_SECRET) {\n    return new Response(\"Invalid token\", { status: 401 });\n  }\n\n  // Enable Draft Mode by setting the cookie\n  if (status === \"published\") {\n    draftMode().disable();\n  } else {\n    draftMode().enable();\n  }\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(url || \"/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Document Service API\nDESCRIPTION: Demonstrates how to paginate query results using the 'limit' and 'start' parameters. This example limits the results to 10 articles starting from the first one (index 0).\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/sort-pagination.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  limit: 10,\n  start: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $not logical operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to negate a set of conditions using the $not logical operator to find articles that don't match the specified criteria.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    $not: {\n      title: 'Hello World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Draft Articles with Strapi REST API in JavaScript\nDESCRIPTION: This snippet demonstrates how to build a query to fetch draft articles using the qs library to properly format the query parameters. The code constructs a request to filter articles by their draft status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/status.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  status: 'draft',\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/articles?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in TypeScript\nDESCRIPTION: TypeScript configuration for SQLite database connection in Strapi, including path import and connection settings with proper type definitions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\n\nexport default ({ env }) => ({\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: path.join(__dirname, '..', '..', env('DATABASE_FILENAME', '.tmp/data.db')),\n    },\n    useNullAsDefault: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Provider in JavaScript\nDESCRIPTION: Complete JavaScript configuration for setting up Amazon S3 as an upload provider in Strapi Cloud. This example includes all required S3 configuration options like access keys, region, bucket, and ACL settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  upload: {\n    config: {\n      provider: 'aws-s3',\n      providerOptions: {\n        baseUrl: env('CDN_URL'),\n        rootPath: env('CDN_ROOT_PATH'),\n        s3Options: {\n          accessKeyId: env('AWS_ACCESS_KEY_ID'),\n          secretAccessKey: env('AWS_ACCESS_SECRET'),\n          region: env('AWS_REGION'),\n          params: {\n            ACL: env('AWS_ACL', 'public-read'),\n            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),\n            Bucket: env('AWS_BUCKET'),\n          },\n        },\n      },\n      actionOptions: {\n        upload: {},\n        uploadStream: {},\n        delete: {},\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Color Picker Custom Field in Strapi Server Direct\nDESCRIPTION: Alternative implementation for registering a color picker custom field directly in the strapi-server.js file without using the CLI generator scaffolding.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/custom-fields.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    strapi.customFields.register({\n      name: \"color\",\n      plugin: \"color-picker\",\n      type: \"text\",\n      inputSize: {\n        // optional\n        default: 4,\n        isResizable: true,\n      },\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Error Example\nDESCRIPTION: Demonstrates throwing an UnauthorizedError for permission-related issues.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.UnauthorizedError('You shall not pass!');\n```\n\n----------------------------------------\n\nTITLE: Updating Relations with Document Service API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update relations for a specific locale using the Document Service API in Strapi. It connects two categories to a restaurant entity.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').update({ \n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: 'fr',\n  data: { \n    category: {\n      connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using $not as an Attribute Operator in Strapi Query Engine\nDESCRIPTION: Example showing how to use $not as an attribute operator to negate a specific condition on an attribute. This query finds articles with titles that don't contain the specified text.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $not: {\n        $contains: 'Hello World',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Controller with Sanitization - JavaScript\nDESCRIPTION: Implementation of a custom controller using @strapi/utils sanitization and validation functions for secure data handling.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { sanitize, validate } = require('@strapi/utils');\n\nmodule.exports = {\n  async findCustom(ctx) {\n    const contentType = strapi.contentType('api::test.test');\n    await validate.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });\n    const sanitizedQueryParams = await sanitize.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });\n\n    const documents = await strapi.documents(contentType.uid).findMany(sanitizedQueryParams);\n\n    return await sanitize.contentAPI.output(documents, contentType, { auth: ctx.state.auth });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Multiple Field Sorting Query\nDESCRIPTION: Example JSON response showing the result of sorting on multiple fields, displaying articles sorted first by title and then by slug, with each document containing its properties.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/sort-pagination.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"documentId\": \"cjld2cjxh0000qzrmn831i7rn\",\n    \"title\": \"Test Article\",\n    \"slug\": \"test-article\",\n    \"body\": \"Test 1\"\n    // ...\n  },\n  {\n    \"documentId\": \"cjld2cjxh0001qzrm5q1j5q7m\",\n    \"title\": \"Test Article 2\",\n    \"slug\": \"test-article-2\",\n    \"body\": \"Test 2\"\n    // ...\n  }\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Plugin in JavaScript\nDESCRIPTION: Example of custom configuration for the GraphQL plugin in Strapi using JavaScript. It sets various options like endpoint, shadowCRUD, and Apollo Server settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  graphql: {\n    config: {\n      endpoint: '/graphql',\n      shadowCRUD: true,\n      landingPage: false, // disable Sandbox everywhere\n      depthLimit: 7,\n      amountLimit: 100,\n      apolloServer: {\n        tracing: false,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Draft Versions in GraphQL\nDESCRIPTION: Example GraphQL query to fetch draft versions of restaurant documents.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery Query($status: PublicationStatus) {\n  restaurants(status: DRAFT) {\n    documentId\n    name\n    publishedAt # should return null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CRON Job with Key Format in JavaScript\nDESCRIPTION: Shows how to define a CRON job using the key format in JavaScript, where the CRON pattern is used as the object key. This example runs every Monday at 1am.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  /**\n   * Simple example.\n   * Every monday at 1am.\n   */\n\n  \"0 0 1 * * 1\": ({ strapi }) => {\n    // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the $contains operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates case-sensitive substring matching using the $contains operator to find articles with titles containing specific text.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $contains: 'Hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: NotImplemented Error Example\nDESCRIPTION: Shows how to throw a NotImplementedError with a message and additional details.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.NotImplementedError('This isn\\'t implemented', { feature: 'test', implemented: false });\n```\n\n----------------------------------------\n\nTITLE: Connecting Relations with REST API (JavaScript)\nDESCRIPTION: This snippet shows how to connect relations using the shorthand syntax in a REST API request. It updates a restaurant entity by connecting it to two categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Discarding Drafts for All Locale Versions in Strapi\nDESCRIPTION: Demonstrates how to discard draft data for all locale versions of a document using the wildcard (*) parameter. The operation replaces draft data with data from published versions across all locales.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi\n  .documents('api::restaurant.restaurant')\n  .discardDraft({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });\n```\n\n----------------------------------------\n\nTITLE: Creating Strapi App with SQLite\nDESCRIPTION: Command line instructions for creating a new Strapi application with SQLite database using yarn or npm\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn create strapi-app my-project --quickstart\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi-app@latest my-project --quickstart\n```\n\n----------------------------------------\n\nTITLE: Extending createOrUpdate() Method for Single Types in Strapi\nDESCRIPTION: Example of extending the createOrUpdate() method for single types in Strapi. This allows for custom logic to be implemented before and after creating or updating the single type document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync createOrUpdate({ data, ...params }) {\n  // some logic here\n  const document = await super.createOrUpdate({ data, ...params });\n  // some more logic\n\n  return document;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider in Strapi Cloud with TypeScript\nDESCRIPTION: Basic TypeScript configuration structure for setting up a custom email provider in a Strapi Cloud project. This code should be placed in ./config/env/production/plugins.ts to be properly recognized by Strapi Cloud.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // … some unrelated plugins configuration options\n  // highlight-start\n  email: {\n    config: {\n        // … provider-specific upload configuration options go here\n    }\n  // highlight-end\n  // … some other unrelated plugins configuration options\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Field Ordering in Strapi Entity Service\nDESCRIPTION: Examples of ordering results by multiple fields using either an array of strings for default ascending order or an array of objects to specify sort direction for each field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/order-pagination.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.findMany('api::article.article', {\n  sort: ['publishDate', 'name'],\n});\n\n// multiple with direction\nstrapi.entityService.findMany('api::article.article', {\n  sort: [{ title: 'asc' }, { publishedAt: 'desc' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Watching and Linking a Strapi Plugin for Development\nDESCRIPTION: Command to automatically recompile a plugin on changes and run 'yalc push --publish'. This is useful for testing plugins by linking them to an existing application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugin-sdk.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstrapi-plugin watch:link\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Default Settings and Validator in TypeScript\nDESCRIPTION: Example of setting up default configuration and a configuration validator for a Strapi plugin in TypeScript. This defines default options and validates user-provided configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  default: ({ env }) => ({ optionA: true }),\n  validator: (config) => { \n    if (typeof config.optionA !== 'boolean') {\n      throw new Error('optionA has to be a boolean');\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: PayloadTooLarge Error Example\nDESCRIPTION: Demonstrates throwing a PayloadTooLargeError for file size limit cases.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.PayloadTooLargeError('Uh oh, the file too big!');\n```\n\n----------------------------------------\n\nTITLE: Connecting Draft & Published Relations in Strapi\nDESCRIPTION: Example of connecting relations with Draft & Publish feature, demonstrating how to link categories to articles with different publication states.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndata: {\n  categories: {\n    connect: [\n      { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', status: 'draft' },\n      { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', status: 'published' },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Image Breakpoints in TypeScript\nDESCRIPTION: Customizes the responsive image breakpoint sizes generated by the Upload plugin in a Strapi TypeScript application, adding an xlarge and xsmall size.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\\n  upload: {\\n    config: {\\n      breakpoints: {\\n        xlarge: 1920,\\n        large: 1000,\\n        medium: 750,\\n        small: 500,\\n        xsmall: 64\\n      },\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Core Router Implementation in TypeScript\nDESCRIPTION: Generic implementation example of a core router in TypeScript with minimal configuration for a find operation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { factories } from '@strapi/strapi'; \n\nexport default factories.createCoreRouter('api::restaurant.restaurant', {\n  only: ['find'],\n  config: {\n    find: {\n      auth: false,\n      policies: [],\n      middlewares: [],\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Relational Ordering in Strapi Entity Service\nDESCRIPTION: Example of sorting results based on fields from related entities using nested sort objects.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/order-pagination.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.findMany('api::article.article', {\n  sort: {\n    author: {\n      name: 'asc',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Single Document in GraphQL\nDESCRIPTION: Example GraphQL query to fetch a single restaurant document by its documentId.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurant(documentId: \"a1b2c3d4e5d6f7g8h9i0jkl\") {\n    name\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Middleware Registration in Strapi\nDESCRIPTION: Example demonstrating how to register a middleware within a Strapi plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/middlewares.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    strapi.documents.use((context, next) => {\n      // your logic\n      return next();\n    });\n  },\n\n  // bootstrap({ strapi }) {},\n  // destroy({ strapi }) {},\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering with $not Operator in Strapi Entity Service API\nDESCRIPTION: Demonstrates how to use the $not logical operator to negate nested conditions in the filter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/filter.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    $not: {\n      title: 'Hello World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GET Request Response without Populate Parameter in Strapi REST API\nDESCRIPTION: Example response from a GET request to '/api/articles' without using the populate parameter. The response only includes default attributes such as title, slug, createdAt, updatedAt, publishedAt, and locale fields, but does not include any media fields, relations, components, or dynamic zones.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"t3q2i3v1z2j7o8p6d0o4xxg\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": // truncated content\n    },\n    {\n      \"id\": 2,\n      \"documentId\": \"k2r5l0i9g3u2j3b4p7f0sed\",\n      \"title\": \"What are chinese hamburgers and why aren't you eating them?\",\n      \"slug\": \"what-are-chinese-hamburgers-and-why-aren-t-you-eating-them\",\n      \"createdAt\": \"2021-11-11T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-01T14:32:50.984Z\",\n      \"publishedAt\": \"2022-09-22T12:36:48.312Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": // truncated content\n    },\n    {\n      \"id\": 3,\n      \"documentId\": \"k6m6l9q0n6v9z2m3i0z5jah\"\n      \"title\": \"7 Places worth visiting for the food alone\",\n      \"slug\": \"7-places-worth-visiting-for-the-food-alone\",\n      \"createdAt\": \"2021-11-12T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"publishedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": // truncated content\n    },\n    {\n      \"id\": 4,\n      \"documentId\": \"d5m4b6z6g5d9e3v1k9n5gbn\",\n      \"title\": \"If you don't finish your plate in these countries, you might offend someone\",\n      \"slug\": \"if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone\",\n      \"createdAt\": \"2021-11-15T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:59:35.148Z\",\n      \"publishedAt\": \"2022-09-22T12:35:53.899Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": // truncated content\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating relational data with GraphQL mutation\nDESCRIPTION: GraphQL mutation for updating a Restaurant document to add a relation to a Category document. This example demonstrates how to modify relationships between content types.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!) {\n  updateRestaurant(\n    documentId: \"slwsiopkelrpxpvpc27953je\",\n    data: { categories: [\"kbbvj00fjiqoaj85vmylwi17\"] }\n  ) {\n    documentId\n    name\n    categories {\n      documentId\n      Name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Configuration in JavaScript for Strapi\nDESCRIPTION: Example configuration for connecting Strapi to an SQLite database using JavaScript. Specifies the database filename and enables useNullAsDefault for SQLite.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: env('DATABASE_FILENAME', '.tmp/data.db'),\n    },\n    useNullAsDefault: true,\n    debug: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RBAC Condition for Email Domain Verification in JavaScript\nDESCRIPTION: Demonstrates how to create a condition that checks if the user's email address is from the strapi.io domain.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst condition = {\n  displayName: 'Email address from strapi.io',\n  name: 'email-strapi-dot-io',\n  async handler(user) {\n    return user.email.includes('@strapi.io');\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Strapi Plugin with SDK\nDESCRIPTION: Command to create a new Strapi plugin at a specified path. The command accepts a path argument and optional flags for debugging or silent mode.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugin-sdk.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/sdk-plugin init\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with 1-Level Population in Strapi REST API\nDESCRIPTION: Example showing how to populate category data for articles using the Strapi REST API. The request demonstrates single-level population using the populate parameter to include category information for each article.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"9ih6hy1bnma3q3066kdwt3\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\",\n      \"category\": {\n        \"data\": {\n          \"id\": 4,\n          \"name\": \"European\",\n          \"slug\": \"european\",\n          \"createdAt\": \"2021-11-09T13:33:20.123Z\",\n          \"updatedAt\": \"2021-11-09T13:33:20.123Z\"\n        }\n      }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Pagination by Offset Query\nDESCRIPTION: Shows implementation of offset-based pagination using start and limit parameters. Returns paginated restaurant data with offset pagination details.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants_connection(pagination: { start: 10, limit: 19 }) {\n    nodes {\n      documentId\n      name\n    }\n    pageInfo {\n      page\n      pageSize\n      pageCount\n      total\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Policy Check in JavaScript\nDESCRIPTION: Defines a policy that checks if the current user has an Administrator role. The policy returns true to allow the request to proceed or false to deny it.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async (policyContext, config, { strapi }) => {\n  if (policyContext.state.user.role.name === 'Administrator') {\n    // Go to next policy or will reach the controller's action.\n    return true;\n  }\n\n  return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Review Controller without Email Service in Strapi\nDESCRIPTION: Creates a custom controller that extends the core controller functionality to handle review creation. This implementation overwrites the default create action to use a custom service for creating reviews and sanitizing the output.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst { createCoreController } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreController('api::review.review', ({ strapi }) => ({\n  /**\n   * As the controller action is named\n   * exactly like the original `create` action provided by the core controller, \n   * it overwrites it.\n   */\n  async create(ctx) {\n    // Creates the new review using a service\n    const newReview = await strapi.service('api::review.review').create(ctx);\n\n    const sanitizedReview = await this.sanitizeOutput(newReview, ctx);\n\n    ctx.body = sanitizedReview;\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination in Strapi Entity Service\nDESCRIPTION: Example of implementing pagination using start and limit parameters to control the number of results returned.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/order-pagination.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.findMany('api::article.article', {\n  start: 10,\n  limit: 15,\n});\n```\n\n----------------------------------------\n\nTITLE: Features Configuration with TypeScript\nDESCRIPTION: TypeScript implementation of the features configuration file that enables the contentReleasesScheduling future flag through an environment variable.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/features.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  future: {\n    // You could also simply write: contentReleases: true\n    contentReleasesScheduling: env.bool('STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING', false),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the $notContains operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter for articles with titles that don't contain a specific substring using the case-sensitive $notContains operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $notContains: 'Hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with discardDraft() in Strapi's Document Service API\nDESCRIPTION: Illustrates how to use the 'fields' parameter to select specific fields when discarding a draft version of a document. This example discards a restaurant draft and returns only the 'name' field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").discardDraft({\n  documentId: \"fmtr6d7ktzpgrijqaqgr6vxs\",\n  fields: [\"name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $not operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates how to negate a condition using the $not operator to find articles that don't contain a specific title text.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $not: {\n        $contains: 'Hello World',\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Populating 1st and 2nd Level Components in Strapi REST API\nDESCRIPTION: This example demonstrates the JSON response when populating both the first-level 'seo' component and its nested 'metaSocial' component. The API returns a deeper structure that includes both the seo data and its nested components.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"c2imt19iywk27hl2ftph7s\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"seo\": {\n        \"id\": 1,\n        \"documentId\": \"e8cnux5ejxyqrejd5addfv\",\n        \"metaTitle\": \"Articles - FoodAdvisor\",\n        \"metaDescription\": \"Discover our articles about food, restaurants, bars and more! - FoodAdvisor\",\n        \"keywords\": \"food\",\n        \"metaRobots\": null,\n        \"structuredData\": null,\n        \"metaViewport\": null,\n        \"canonicalURL\": null,\n        \"metaSocial\": [\n          {\n            \"id\": 1,\n            \"documentId\": \"ks7xsp9fewoi0qljcz9qa0\",\n            \"socialNetwork\": \"Facebook\",\n            \"title\": \"Browse our best articles about food and restaurants \",\n            \"description\": \"Discover our articles about food, restaurants, bars and more!\"\n          }\n        ]\n      }\n    },\n    {\n      \"id\": 2,\n      // truncated content\n    },\n    {\n      \"id\": 3,\n      // truncated content\n    },\n    {\n      \"id\": 4,\n      // truncated content\n    },\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Document for Specific Locale\nDESCRIPTION: Updating a document's content for a specific locale using the update() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').update({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: 'es',\n  data: { name: 'Nuevo nombre del restaurante' },\n});\n```\n\n----------------------------------------\n\nTITLE: Using $notNull Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $notNull operator to find records where an attribute is not null. This query retrieves articles with non-null titles.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notNull: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Filter Middleware in Strapi\nDESCRIPTION: Configuration example for the IP filtering middleware that allows setting whitelist and blacklist IP addresses with support for wildcards and ranges.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::ip',\n    config: {\n      whitelist: ['192.168.0.*', '192.168.1.*', '123.123.123.123'],\n      blacklist: ['1.116.*.*', '103.54.*.*'],\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::ip',\n    config: {\n      whitelist: ['192.168.0.*', '192.168.1.*', '123.123.123.123'],\n      blacklist: ['1.116.*.*', '103.54.*.*'],\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sheets Utility Functions for Strapi\nDESCRIPTION: Utility functions for interacting with Google Sheets API, including methods to read, write, and update spreadsheet data. Requires Google authentication and spreadsheet configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/middlewares.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { google } = require('googleapis');\n\nconst createGoogleSheetClient = async ({\n  keyFile,\n  sheetId,\n  tabName,\n  range,\n}) => {\n  async function getGoogleSheetClient() {\n    const auth = new google.auth.GoogleAuth({\n      keyFile,\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n    });\n    const authClient = await auth.getClient();\n    return google.sheets({\n      version: 'v4',\n      auth: authClient,\n    });\n  }\n\n  const googleSheetClient = await getGoogleSheetClient();\n\n  const writeGoogleSheet = async (data) => {\n    googleSheetClient.spreadsheets.values.append({\n      spreadsheetId: sheetId,\n      range: `${tabName}!${range}`,\n      valueInputOption: 'USER_ENTERED',\n      insertDataOption: 'INSERT_ROWS',\n      resource: {\n        majorDimension: 'ROWS',\n        values: data,\n      },\n    });\n  };\n\n  const updateoogleSheet = async (cell, data) => {\n    googleSheetClient.spreadsheets.values.update({\n      spreadsheetId: sheetId,\n      range: `${tabName}!${cell}`,\n      valueInputOption: 'USER_ENTERED',\n      resource: {\n        majorDimension: 'ROWS',\n        values: data,\n      },\n    });\n  };\n\n  const readGoogleSheet = async () => {\n    const res = await googleSheetClient.spreadsheets.values.get({\n      spreadsheetId: sheetId,\n      range: `${tabName}!${range}`,\n    });\n\n    return res.data.values;\n  };\n\n  return {\n    writeGoogleSheet,\n    updateoogleSheet,\n    readGoogleSheet,\n  };\n};\n\nmodule.exports = {\n  createGoogleSheetClient,\n};\n```\n\n----------------------------------------\n\nTITLE: SQLite Environment Variables Configuration\nDESCRIPTION: Environment variable configuration for SQLite database connection in Strapi\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Database\nDATABASE_CLIENT=sqlite\nDATABASE_FILENAME=.tmp/data.db\n```\n\n----------------------------------------\n\nTITLE: Ordering Results with Multiple Attributes in Strapi Query Engine API (JavaScript)\nDESCRIPTION: Shows how to order query results using multiple attributes with the Strapi Query Engine API. It includes examples of basic multiple attribute ordering and ordering with specified directions for each attribute.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/order-pagination.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  orderBy: ['id', 'name'],\n});\n\n// multiple with direction\nstrapi.db.query('api::article.article').findMany({\n  orderBy: [{ title: 'asc' }, { publishedAt: 'desc' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Strapi Components\nDESCRIPTION: Runs an interactive CLI to generate various Strapi components including APIs, controllers, content-types, plugins, policies, middlewares, services, and migrations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nstrapi generate\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Unidirectional Relation in Strapi Schema\nDESCRIPTION: Example of configuring a unidirectional many-to-many relationship in Strapi, where one content-type can be linked to many entries of another content-type.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  categories: {\n    type: 'relation',\n    relation: 'manyToMany',\n    target: 'category',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Populating Dynamic Zone with Shared Strategy in Strapi REST API\nDESCRIPTION: This JSON response shows the result of populating the 'blocks' dynamic zone using a shared strategy. It includes all components and their 1st-level relations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"c14dwiff3b4os6gs4yyrag\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"blocks\": [\n        {\n          \"id\": 2,\n          \"documentId\": \"lu16w9g4jri8ppiukg542j\",\n          \"__component\": \"blocks.related-articles\",\n          \"header\": {\n            \"id\": 2,\n            \"documentId\": \"c2imt19iywk27hl2ftph7s\",\n            \"theme\": \"primary\",\n            \"label\": \"More, I want more!\",\n            \"title\": \"Similar articles\"\n          },\n          \"articles\": {\n            \"data\": [\n              {\n                \"id\": 2,\n                \"documentId\": \"isn91s2bxk3jib97evvjni\",\n                \"title\": \"What are chinese hamburgers and why aren't you eating them?\",\n                \"slug\": \"what-are-chinese-hamburgers-and-why-aren-t-you-eating-them\",\n                \"createdAt\": \"2021-11-11T13:33:19.948Z\",\n                \"updatedAt\": \"2023-06-01T14:32:50.984Z\",\n                \"publishedAt\": \"2022-09-22T12:36:48.312Z\",\n                \"locale\": \"en\",\n                \"ckeditor_content\": \"…\" // truncated content\n              },\n              {\n                \"id\": 3,\n                \"documentId\": \"yz6lg7tp5ph8dr79gidoyl\",\n                \"title\": \"7 Places worth visiting for the food alone\",\n                \"slug\": \"7-places-worth-visiting-for-the-food-alone\",\n                \"createdAt\": \"2021-11-12T13:33:19.948Z\",\n                \"updatedAt\": \"2023-06-02T11:30:00.075Z\",\n                \"publishedAt\": \"2023-06-02T11:30:00.075Z\",\n                \"locale\": \"en\",\n                \"ckeditor_content\": \"…\" // truncated content\n              },\n              {\n                \"id\": 4,\n                \"documentId\": \"z5jnfvyuj07fogzh1kcbd3\",\n                \"title\": \"If you don't finish your plate in these countries, you might offend someone\",\n                \"slug\": \"if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone\",\n                \"createdAt\": \"2021-11-15T13:33:19.948Z\",\n                \"updatedAt\": \"2023-06-02T10:59:35.148Z\",\n                \"publishedAt\": \"2022-09-22T12:35:53.899Z\",\n                \"locale\": \"en\",\n                \"ckeditor_content\": \"…\" // truncated content\n              }\n            ]\n          }\n        },\n        {\n          \"id\": 2,\n          \"documentId\": \"vpihrdqj5984k8ynrc39p0\",\n          \"__component\": \"blocks.cta-command-line\",\n          \"theme\": \"primary\",\n          \"title\": \"Want to give a try to a Strapi starter?\",\n          \"text\": \"❤️\",\n          \"commandLine\": \"git clone https://github.com/strapi/nextjs-corporate-starter.git\"\n        }\n      ]\n    },\n    {\n      \"id\": 2,\n      // …\n    },\n    {\n      \"id\": 3,\n      // … \n    },\n    {\n      \"id\": 4,\n      // …\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Response for Single Localized Document\nDESCRIPTION: Example response when retrieving a single document in French locale from a collection type endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 22,\n      \"documentId\": \"lr5wju2og49bf820kj9kz8c3\",\n      \"Name\": \"Biscotte Restaurant\",\n      \"Description\": [\n        {\n          \"type\": \"paragraph\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Bienvenue au restaurant Biscotte! Le Restaurant Biscotte propose une cuisine à base de produits frais et de qualité, souvent locaux, biologiques lorsque cela est possible, et toujours produits par des producteurs passionnés.\"\n            }\n          ]\n        }\n      ],\n      \"locale\": \"fr\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple RBAC Conditions in Strapi Bootstrap Function\nDESCRIPTION: Shows how to register multiple RBAC conditions using the conditionProvider.registerMany() method in the Strapi bootstrap function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst conditions = [\n  {\n    displayName: \"Entity has same name as user\",\n    name: \"same-name-as-user\",\n    plugin: \"name of a plugin if created in a plugin\",\n    handler: (user) => {\n      return { name: user.name };\n    },\n  },\n  {\n    displayName: \"Email address from strapi.io\",\n    name: \"email-strapi-dot-io\",\n    async handler(user) {\n      return user.email.includes('@strapi.io');\n    },\n  }\n];\n\nmodule.exports = {\n  async bootstrap(/*{ strapi }*/) {\n  // do your boostrap\n\n    await strapi.admin.services.permission.conditionProvider.registerMany(conditions);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Usage of Request Context in Strapi\nDESCRIPTION: Illustrates the correct pattern for accessing request context within function scope versus the incorrect approach of accessing it at module level. Request context should only be accessed within functions that execute during HTTP requests.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/requests-responses.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// correct\n\nconst service = {\n  myFunction() {\n    const ctx = strapi.requestContext.get();\n    console.log(ctx.state.user);\n  },\n};\n\n// incorrect\nconst ctx = strapi.requestContext.get();\n\nconst service = {\n  myFunction() {\n    console.log(ctx.state.user);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Relational Ordering in Strapi Query Engine API (JavaScript)\nDESCRIPTION: Illustrates how to perform relational ordering in queries using the Strapi Query Engine API. This example orders articles based on the name of the associated author.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/order-pagination.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  orderBy: {\n    author: {\n      name: 'asc',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Draft Documents\nDESCRIPTION: Query to count draft documents using the Document Service API. Note that this includes published documents as well.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst draftsCount = await strapi.documents(\"api::restaurant.restaurant\").count({\n  status: 'draft'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SSO Logic in Strapi (TypeScript)\nDESCRIPTION: TypeScript version of custom SSO logic implementation in Strapi to restrict email domains. This snippet demonstrates how to allow only users with '@strapi.io' email addresses to connect.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst strategyInstance = new Strategy(configuration, ({ email, username }, done) => {\n  // If the email ends with @strapi.io\n  if (email.endsWith('@strapi.io')) {\n    // then we continue with the data given by the provider\n    return done(null, { email, username });\n  }\n\n  // Otherwise, we continue by sending an error to the done function\n  done(new Error('Forbidden email address'));\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with publish() in Strapi's Document Service API\nDESCRIPTION: Demonstrates how to use the 'fields' parameter to select specific fields when publishing a document. This example publishes a restaurant and returns only the 'name' field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").publish({\n  documentId: \"fmtr6d7ktzpgrijqaqgr6vxs\",\n  fields: [\"name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Populating Dynamic Zone with Detailed Strategy in Strapi REST API\nDESCRIPTION: This JSON response demonstrates populating the 'blocks' dynamic zone using a detailed strategy. It shows how to deeply populate specific components and fields while excluding others.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"it9bbhcgc6mcfsqas7h1dp\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"blocks\": [\n        {\n          \"id\": 2,\n          \"documentId\": \"e8cnux5ejxyqrejd5addfv\",\n          \"__component\": \"blocks.related-articles\",\n          \"articles\": {\n            \"data\": [\n              {\n                \"id\": 2,\n                \"documentId\": \"wkgojrcg5bkz8teqx1foz7\",\n                \"title\": \"What are chinese hamburgers and why aren't you eating them?\",\n                \"slug\": \"what-are-chinese-hamburgers-and-why-aren-t-you-eating-them\",\n                \"createdAt\": \"2021-11-11T13:33:19.948Z\",\n                \"updatedAt\": \"2023-06-01T14:32:50.984Z\",\n                \"publishedAt\": \"2022-09-22T12:36:48.312Z\",\n                \"locale\": \"en\",\n                \"ckeditor_content\": \"…\", // truncated content\n                \"image\": {\n                  \"data\": {\n                      // …\n                    }\n                  }\n                }\n              },\n              {\n                \"id\": 3,\n                // …\n              },\n              {\n                \"id\": 4,\n                // …\n              }\n            ]\n          }\n        },\n        {\n          \"id\": 2,\n          \"__component\": \"blocks.cta-command-line\",\n          \"theme\": \"primary\",\n          \"title\": \"Want to give a try to a Strapi starter?\",\n          \"text\": \"❤️\",\n          \"commandLine\": \"git clone https://github.com/strapi/nextjs-corporate-starter.git\"\n        }\n      ]\n    },\n    {\n      \"id\": 2,\n      // …\n    },\n    {\n      \"id\": 3,\n      \"documentId\": \"z5jnfvyuj07fogzh1kcbd3\",\n      \"title\": \"7 Places worth visiting for the food alone\",\n      \"slug\": \"7-places-worth-visiting-for-the-food-alone\",\n      \"createdAt\": \"2021-11-12T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"publishedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // … truncated content\n      \"blocks\": [\n        {\n          \"id\": 1,\n          \"documentId\": \"ks7xsp9fewoi0qljcz9qa0\",\n          \"__component\": \"blocks.related-articles\",\n          \"articles\": {\n            // …\n          }\n        },\n        {\n          \"id\": 1,\n          \"documentId\": \"c2imt19iywk27hl2ftph7s\",\n          \"__component\": \"blocks.cta-command-line\",\n          \"theme\": \"secondary\",\n          \"title\": \"Want to give it a try with a brand new project?\",\n          \"text\": \"Up & running in seconds 🚀\",\n          \"commandLine\": \"npx create-strapi-app my-project --quickstart\"\n        }\n      ]\n    },\n    {\n      \"id\": 4,\n      // …\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Response for Single Type Document\nDESCRIPTION: Example response when retrieving a homepage document in French locale from a single type endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 10,\n    \"documentId\": \"ukbpbnu8kbutpn98rsanyi50\",\n    \"Title\": \"Page d'accueil\",\n    \"Body\": null,\n    \"createdAt\": \"2024-03-07T13:28:26.349Z\",\n    \"updatedAt\": \"2024-03-07T13:28:26.349Z\",\n    \"publishedAt\": \"2024-03-07T13:28:26.353Z\",\n    \"locale\": \"fr\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Favicon Middleware in Strapi\nDESCRIPTION: Example configuration for the favicon middleware in Strapi, showing how to set a custom favicon path.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::favicon',\n    config: {\n      path: './public/uploads/custom-fav-abc123.ico'\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::favicon',\n    config: {\n      path: './public/uploads/custom-fav-abc123.ico'\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Plugin Local Server in TypeScript\nDESCRIPTION: Sets up the local server configuration for the Upload plugin in Strapi using TypeScript, specifically configuring the maxage header for locally uploaded files.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\\n  upload: {\\n    config: {\\n      providerOptions: {\\n        localServer: {\\n          maxage: 300000\\n        },\\n      },\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Reset Password Request Implementation in Strapi\nDESCRIPTION: This code sends a reset password request to the Strapi backend API. It requires the code from the reset link email, the new password, and password confirmation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\n// Request API.\naxios\n  .post('http://localhost:1337/api/auth/reset-password', {\n    code: 'privateCode', // code contained in the reset link of step 3.\n    password: 'userNewPassword',\n    passwordConfirmation: 'userNewPassword',\n  })\n  .then(response => {\n    console.log(\"Your user's password has been reset.\");\n  })\n  .catch(error => {\n    console.log('An error occurred:', error.response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Draft Articles in Strapi\nDESCRIPTION: This is an example response from Strapi when querying draft articles. The response contains document data with the publishedAt field set to null, indicating the draft status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/status.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    // …\n    {\n      \"id\": 5,\n      \"documentId\": \"znrlzntu9ei5onjvwfaalu2v\",\n      \"Name\": \"Biscotte Restaurant\",\n      \"Description\": [\n        {\n          \"type\": \"paragraph\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"This is the draft version.\"\n            }\n          ]\n        }\n      ],\n      \"createdAt\": \"2024-03-06T13:43:30.172Z\",\n      \"updatedAt\": \"2024-03-06T21:38:46.353Z\",\n      \"publishedAt\": null,\n      \"locale\": \"en\"\n    },\n    // …\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restaurant Localization Response\nDESCRIPTION: Server response showing the created French localization with metadata and localized content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 19,\n    \"documentId\": \"lr5wju2og49bf820kj9kz8c3\",\n    \"Name\": \"She's Cake in French\",\n    \"Description\": null,\n    \"createdAt\": \"2024-03-07T12:13:09.551Z\",\n    \"updatedAt\": \"2024-03-07T12:13:09.551Z\",\n    \"publishedAt\": \"2024-03-07T12:13:09.554Z\",\n    \"locale\": \"fr\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Unpublishing Restaurant Document with Strapi Document Service\nDESCRIPTION: Unpublishes a restaurant document by ID in the default locale. Returns the unpublished document with updated metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').unpublish({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm' \n})\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Access Example\nDESCRIPTION: Example demonstrating how subdomains are parsed from a URL into an array\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/requests-responses.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntobi.ferrets.example.com -> [\"ferrets\", \"tobi\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering with $and Operator in Strapi Entity Service API\nDESCRIPTION: Demonstrates how to use the $and logical operator to filter results where all nested conditions must be true. It also shows an implicit $and usage.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/filter.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    $and: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: 'Hello World',\n    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server v4 Plugins in Strapi 5 JavaScript\nDESCRIPTION: Example of updating Apollo Server configuration to use plugins for features like response formatting in Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  graphql: {\n    config: {\n      apolloServer: {\n        plugins: [\n          {\n            requestDidStart() {\n              return {\n                willSendResponse({ response }) {\n                  // Custom response formatting logic\n                }\n              };\n            }\n          }\n        ]\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Restaurant Document with Strapi Document Service\nDESCRIPTION: Deletes a restaurant document by ID in the default locale. Removes both draft and published versions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').delete({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm', // documentId,\n})\n```\n\n----------------------------------------\n\nTITLE: Using $eqi Case-Insensitive Equality Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $eqi operator for case-insensitive equality filtering. This query finds articles where the title matches 'HELLO World' regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $eqi: 'HELLO World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with update() in Strapi's Document Service API\nDESCRIPTION: Shows how to use the 'fields' parameter to select specific fields when updating a document. This example updates a restaurant's name and returns only the 'name' field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").update({\n  documentId: \"fmtr6d7ktzpgrijqaqgr6vxs\",\n  data: {\n    name: \"Restaurant C\",\n  },\n  fields: [\"name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: POST Request and Response for Default Locale\nDESCRIPTION: Example of creating a new document in the default locale through a POST request.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 13,\n    \"documentId\": \"jae8klabhuucbkgfe2xxc5dj\",\n    \"Name\": \"Oplato\",\n    \"Description\": null,\n    \"createdAt\": \"2024-03-06T22:19:54.646Z\",\n    \"updatedAt\": \"2024-03-06T22:19:54.646Z\",\n    \"publishedAt\": \"2024-03-06T22:19:54.649Z\",\n    \"locale\": \"en\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Articles with Single-Level Populate in Strapi REST API\nDESCRIPTION: A JSON response example showing how to use populate[0]=category to include category relation data when querying articles. This demonstrates single-level population of related data in Strapi's REST API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"w8r5k8o8v0t9l9e0d7y6vco\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"category\": {\n        \"data\": {\n          \"id\": 4,\n          \"documentId\": \"u6x8u7o7j5q1l5y3t8j9yxi\",\n          \"name\": \"European\",\n          \"slug\": \"european\",\n          \"createdAt\": \"2021-11-09T13:33:20.123Z\",\n          \"updatedAt\": \"2021-11-09T13:33:20.123Z\"\n        }\n      }\n    },\n    {\n      \"id\": 2,\n      \"documentId\": \"k6m6l9q0n6v9z2m3i0z5jah\",\n      \"title\": \"What are chinese hamburgers and why aren't you eating them?\",\n      \"slug\": \"what-are-chinese-hamburgers-and-why-aren-t-you-eating-them\",\n      \"createdAt\": \"2021-11-11T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-01T14:32:50.984Z\",\n      \"publishedAt\": \"2022-09-22T12:36:48.312Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"category\": {\n        \"data\": {\n          \"id\": 13,\n          \"documentId\": \"x2m0d7d9o4m2z3u2r2l9yes\",\n          \"name\": \"Chinese\",\n          \"slug\": \"chinese\",\n          \"createdAt\": \"2021-11-09T13:33:20.123Z\",\n          \"updatedAt\": \"2021-11-09T13:33:20.123Z\"\n        }\n      }\n    },\n    {\n      \"id\": 3,\n      \"title\": \"7 Places worth visiting for the food alone\",\n      \"slug\": \"7-places-worth-visiting-for-the-food-alone\",\n      \"createdAt\": \"2021-11-12T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"publishedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"category\": {\n        \"data\": {\n          \"id\": 3,\n          \"documentId\": \"h7c8d0u3i3q5v1j3j3r4cxf\",\n          \"name\": \"International\",\n          \"slug\": \"international\",\n          \"createdAt\": \"2021-11-09T13:33:20.123Z\",\n          \"updatedAt\": \"2021-11-09T13:33:20.123Z\"\n        }\n      }\n    },\n    {\n      \"id\": 4,\n      \"documentId\": \"t1t3d9k6n1k5a6r8l7f8rox\",\n      \"title\": \"If you don't finish your plate in these countries, you might offend someone\",\n      \"slug\": \"if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone\",\n      \"createdAt\": \"2021-11-15T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:59:35.148Z\",\n      \"publishedAt\": \"2022-09-22T12:35:53.899Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"category\": {\n        \"data\": {\n          \"id\": 3,\n          \"documentId\": \"u6x8u7o7j5q1l5y3t8j9yxi\",\n          \"name\": \"International\",\n          \"slug\": \"international\",\n          \"createdAt\": \"2021-11-09T13:33:20.123Z\",\n          \"updatedAt\": \"2021-11-09T13:33:20.123Z\"\n        }\n      }\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GraphQL Operations for Content Types in Strapi\nDESCRIPTION: Examples of how to disable specific GraphQL operations for content types and fields using the extension service provided by the GraphQL plugin in Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Disable the 'find' operation on the 'restaurant' content-type in the 'restaurant' API\nstrapi\n  .plugin('graphql')\n  .service('extension')\n  .shadowCRUD('api::restaurant.restaurant')\n  .disableAction('find')\n\n// Disable the 'name' field on the 'document' content-type in the 'document' API\nstrapi\n  .plugin('graphql')\n  .service('extension')\n  .shadowCRUD('api::document.document')\n  .field('name')\n  .disable()\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Strapi Admin Settings in JavaScript\nDESCRIPTION: This snippet demonstrates the minimal configuration required for the Strapi admin panel in JavaScript. It includes settings for API tokens, audit logs, authentication, and transfer tokens.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/admin-panel.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  apiToken: {\n    salt: env('API_TOKEN_SALT', 'someRandomLongString'),\n  },\n  auditLogs: { // only accessible with an Enterprise plan\n    enabled: env.bool('AUDIT_LOGS_ENABLED', true),\n  },\n  auth: {\n    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),\n  },\n  transfer: { \n    token: { \n      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),\n    } \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Text Input Component for Strapi\nDESCRIPTION: This example shows how to create a controlled custom text input component for Strapi's Content Manager. It uses React's forwardRef for auto-focus functionality and handles changes through the provided onChange prop.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/custom-fields.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\n\nimport { useIntl } from \"react-intl\";\n\nconst Input = React.forwardRef((props, ref) => {\n  const { attribute, disabled, intlLabel, name, onChange, required, value } =\n    props; // these are just some of the props passed by the content-manager\n\n  const { formatMessage } = useIntl();\n\n  const handleChange = (e) => {\n    onChange({\n      target: { name, type: attribute.type, value: e.currentTarget.value },\n    });\n  };\n\n  return (\n    <label>\n      {formatMessage(intlLabel)}\n      <input\n        ref={ref}\n        name={name}\n        disabled={disabled}\n        value={value}\n        required={required}\n        onChange={handleChange}\n      />\n    </label>\n  );\n});\n\nexport default Input;\n```\n\n----------------------------------------\n\nTITLE: Importing Invoice Status Component in Markdown\nDESCRIPTION: This snippet imports a reusable Markdown component for displaying invoice statuses in the documentation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/projects/settings.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport InvoiceStatus from '/docs/snippets/invoices-statuses.md'\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Entries with updateMany() in Strapi\nDESCRIPTION: This example shows how to use the updateMany() method to update multiple entries matching specific criteria in Strapi. It returns the count of updated entries.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/bulk-operations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.query(\"api::shop.article\").updateMany({\n  where: {\n    price: 20,\n  },\n  data: {\n    price: 18,\n  },\n});\n\n// { count: 42 }\n```\n\n----------------------------------------\n\nTITLE: Handling Release Publish Event in Strapi\nDESCRIPTION: This snippet shows the payload structure for the 'releases.publish' event in Strapi. It is triggered when a release is published and is available with the Growth and Enterprise plans.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"releases.publish\",\n  \"createdAt\": \"2024-02-21T16:45:36.877Z\",\n  \"isPublished\": true,\n  \"release\": {\n    \"id\": 2,\n    \"name\": \"Fall Winter highlights\",\n    \"releasedAt\": \"2024-02-21T16:45:36.873Z\",\n    \"scheduledAt\": null,\n    \"timezone\": null,\n    \"createdAt\": \"2024-02-21T15:16:22.555Z\",\n    \"updatedAt\": \"2024-02-21T16:45:36.875Z\",\n    \"actions\": {\n      \"count\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Articles by Page using JavaScript and qs\nDESCRIPTION: This snippet demonstrates how to paginate articles by specifying the page number and page size using the qs library to build the query string for a Strapi REST API request.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/sort-pagination.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  pagination: {\n    page: 1,\n    pageSize: 10,\n  },\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/articles?${query}`);\n```\n\n----------------------------------------\n\nTITLE: POST Request and Response for Specific Locale\nDESCRIPTION: Example of creating a new document in a specific locale (French) through a POST request.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 15,\n    \"documentId\": \"ldcmn698iams5nuaehj69j5o\",\n    \"Name\": \"She's Cake\",\n    \"Description\": null,\n    \"createdAt\": \"2024-03-06T22:21:18.373Z\",\n    \"updatedAt\": \"2024-03-06T22:21:18.373Z\",\n    \"publishedAt\": \"2024-03-06T22:21:18.378Z\",\n    \"locale\": \"en\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Polymorphic Content Structures in Strapi Query Engine API\nDESCRIPTION: This snippet shows how to use populate fragments for better granularity on the populate strategy when dealing with polymorphic content structures like dynamic zones and polymorphic relations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/populating.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany('api::article.article', {\n  populate: {\n    dynamicZone: {\n      on: {\n        'components.foo': {\n          select: ['title'],\n          where: { title: { $contains: 'strapi' } },\n        },\n        'components.bar': {\n          select: ['name'],\n        },\n      },\n    },\n\n    morphAuthor: {\n      on: {\n        'plugin::users-permissions.user': {\n          select: ['username'],\n        },\n        'api::author.author': {\n          select: ['name'],\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Middleware in Strapi\nDESCRIPTION: Configuration for the static file serving middleware with custom defer and index path settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::public',\n    config: {\n      defer: true,\n      index: env('INDEX_PATH', 'index-dev.html')\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::public',\n    config: {\n      defer: true,\n      index: env('INDEX_PATH', 'index-dev.html')\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Making Plugin Content-Type Visible in Admin Panel (JSON)\nDESCRIPTION: Example of a schema.json file showing how to make a plugin content-type visible to the Content-Type Builder and Content-Manager in the admin panel by setting the appropriate pluginOptions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"collectionType\",\n  \"collectionName\": \"my_plugin_content_types\",\n  \"info\": {\n    \"singularName\": \"my-plugin-content-type\",\n    \"pluralName\": \"my-plugin-content-types\",\n    \"displayName\": \"My Plugin Content-Type\"\n  },\n  \"options\": {\n    \"draftAndPublish\": false,\n    \"comment\": \"\"\n  },\n  \"pluginOptions\": {\n    \"content-manager\": {\n      \"visible\": true\n    },\n    \"content-type-builder\": {\n      \"visible\": true\n    }\n  },\n  \"attributes\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relations with Shorthand Syntax\nDESCRIPTION: Example of setting relations using the shorthand syntax to completely replace existing restaurant categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      set: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv4'],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $ne Not Equal Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $ne operator to find records where an attribute does not equal the specified value. This query retrieves articles with titles that are not 'ABCD'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $ne: 'ABCD',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Hello World Endpoint\nDESCRIPTION: Test file for verifying the functionality of a basic Hello World endpoint using Supertest.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = require('supertest');\n\nit(\"should return hello world\", async () => {\n  await request(strapi.server.httpServer)\n    .get(\"/api/hello\")\n    .expect(200)\n    .then((data) => {\n      expect(data.text).toBe(\"Hello World!\");\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Documents for Specific Locale in Strapi\nDESCRIPTION: Shows how to count documents for a specific locale using the count() method. By default, it counts draft documents if no status parameter is specified.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Count number of published documents in French\nstrapi.documents('api::restaurant.restaurant').count({ locale: 'fr' });\n```\n\n----------------------------------------\n\nTITLE: Creating French Locale for Restaurant Collection Type\nDESCRIPTION: Example of creating a new French localization for an existing restaurant entry using PUT request with locale parameter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  data: {\n    \"Name\": \"She's Cake in French\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Media Avatar Model Definition - JSON Schema\nDESCRIPTION: JSON schema for defining a model with a single media upload field for avatar, along with other user attributes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"pseudo\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"email\": {\n      \"type\": \"email\",\n      \"required\": true,\n      \"unique\": true\n    },\n    \"avatar\": {\n      \"type\": \"media\",\n      \"multiple\": false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Condition Handler for Time-Based Access in JavaScript\nDESCRIPTION: Example of a condition handler that allows access to an admin panel page only at 5pm server time.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhandler: () => new Date().getHours() === 17;\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi Client with pnpm\nDESCRIPTION: Command to install the Strapi Client library using pnpm package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @strapi/client\n```\n\n----------------------------------------\n\nTITLE: Configuring Server URL in JavaScript for Strapi Authentication Providers\nDESCRIPTION: This JavaScript configuration sets up the server URL for Strapi, which is required for authentication providers to work properly. It uses environment variables for host, port, and URL configuration with defaults.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  url: env('', 'http://localhost:1337'),\n});\n```\n\n----------------------------------------\n\nTITLE: Homepage Localization Response\nDESCRIPTION: Server response showing the created French localization for homepage with metadata and localized content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 10,\n    \"documentId\": \"ukbpbnu8kbutpn98rsanyi50\",\n    \"Title\": \"Page d'accueil\",\n    \"Body\": null,\n    \"createdAt\": \"2024-03-07T13:28:26.349Z\",\n    \"updatedAt\": \"2024-03-07T13:28:26.349Z\",\n    \"publishedAt\": \"2024-03-07T13:28:26.353Z\",\n    \"locale\": \"fr\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Media Upload Model Definition - JSON Schema\nDESCRIPTION: JSON schema for configuring a model with multiple media upload capability using the covers field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"covers\": {\n      \"type\": \"media\",\n      \"multiple\": true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Strapi Initialization\nDESCRIPTION: Examples of starting Strapi programmatically in a TypeScript project using the strapi() factory and compile() function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/development.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst strapi = require('@strapi/strapi');\nconst app = strapi.createStrapi({ distDir: './dist' });\napp.start();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst strapi = require('@strapi/strapi');\n\nstrapi.compile().then(appContext => strapi(appContext).start());\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Hooks Between Plugins\nDESCRIPTION: Example demonstrating how to create a hook in one plugin and use it in another plugin using createHook() and registerHook() methods.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Create a hook in a plugin\nexport default {\n  register(app) {\n    app.createHook('My-PLUGIN/MY_HOOK');\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Use the hook in another plugin\nexport default {\n  bootstrap(app) {\n    app.registerHook('My-PLUGIN/MY_HOOK', (...args) => {\n      console.log(args)\n\n      // important: return the mutated data\n      return args\n    });\n\n    app.registerPlugin({...})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server Settings in JavaScript\nDESCRIPTION: The server.js file in the config directory defines core server settings for a Strapi application. Any changes to this file require rebuilding the admin panel using yarn build or npm run build.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/server.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n./config/server.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Provider in TypeScript\nDESCRIPTION: Template for implementing a custom Upload (Media Library) provider in TypeScript with methods for upload, delete, file size checking, and signed URL generation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  init(providerOptions) {\n    // init your provider if necessary\n\n    return {\n      upload(file) {\n        // upload the file in the provider\n        // file content is accessible by `file.buffer`\n      },\n      uploadStream(file) {\n        // upload the file in the provider\n        // file content is accessible by `file.stream`\n      },\n      delete(file) {\n        // delete the file in the provider\n      },\n      checkFileSize(file, { sizeLimit }) {\n        // (optional)\n        // implement your own file size limit logic\n      },\n      getSignedUrl(file) {\n        // (optional)\n        // Generate a signed URL for the given file.\n        // The signed URL allows secure access to the file.\n        // Only Content Manager assets will be signed.\n        // Returns an object {url: string}.\n      },\n      isPrivate() {\n        // (optional)\n        // if it is private, file urls will be signed\n        // Returns a boolean\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using $nei Case-Insensitive Not Equal Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $nei operator for case-insensitive not-equal filtering. This query finds articles where the title does not match 'abcd' regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $nei: 'abcd',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $lte operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates filtering for articles with a numeric field less than or equal to a specified value using the $lte operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    rating: {\n      $lte: 10,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding First Document with Locale Parameter\nDESCRIPTION: Demonstration of using findFirst() method to get the first document matching a specific locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents('api::article.article').findFirst({\n  locale: 'fr',\n});\n```\n\n----------------------------------------\n\nTITLE: Unpublishing Document Locale Versions\nDESCRIPTION: Examples of unpublishing specific or all locale versions of a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').unpublish({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: '*'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Middlewares in Strapi (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to apply various middlewares to a GraphQL resolver in Strapi using JavaScript. It includes examples of logging, caching, data modification, and using pre-existing Strapi middlewares.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use({\n      resolversConfig: {\n        'Query.categories': {\n          middlewares: [\n            async (next, parent, args, context, info) => {\n              console.time('Resolving categories');\n              \n              // call the next resolver\n              const res = await next(parent, args, context, info);\n              \n              console.timeEnd('Resolving categories');\n\n              return res;\n            },\n            async (next, parent, args, context, info) => {\n              info.cacheControl.setCacheHint({ maxAge: 60, scope: \"PUBLIC\" });\n              return next(parent, args, context, info);\n            },\n            (resolve, parent, ...rest) => {\n              if (parent.id === 1) {\n                return resolve({...parent, name: 'foobar' }, ...rest);\n              }\n\n              return resolve(parent, ...rest);\n            },\n            \"api::model.middleware-name\",\n            { name: \"api::model.middleware-name\", options: { /* all config values I want to pass to the strapi middleware */ } },\n          ],\n          auth: false,\n        },\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Size Limit in Plugins Configuration for TypeScript\nDESCRIPTION: Configuration for setting the maximum file size limit for uploads in the Strapi plugins configuration file using TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // ...\n  upload: {\n    config: {\n      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Middleware for Provider Logos (TypeScript)\nDESCRIPTION: TypeScript configuration for the security middleware to allow loading provider logos from external URLs by modifying the Content Security Policy directives.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Edit View Layout Interface Definitions\nDESCRIPTION: TypeScript interface definitions for Edit View layouts including EditLayout, EditFieldSharedProps, EditFieldLayout, and related types. Defines structure for editing content-type fields and their configurations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ninterface EditLayout {\n  layout: Array<Array<EditFieldLayout[]>>;\n  components: {\n    [uid: string]: {\n      layout: Array<EditFieldLayout[]>;\n      settings: Contracts.Components.ComponentConfiguration['settings'] & {\n        displayName?: string;\n        icon?: string;\n      };\n    };\n  };\n  metadatas: {\n    [K in keyof Contracts.ContentTypes.Metadatas]: Contracts.ContentTypes.Metadatas[K]['edit'];\n  };\n  options: LayoutOptions;\n  settings: LayoutSettings;\n}\n\ninterface EditFieldSharedProps extends Omit<InputProps, 'hint' | 'type'> {\n  hint?: string;\n  mainField?: string;\n  size: number;\n  unique?: boolean;\n  visible?: boolean;\n}\n\n/**\n * Map over all the types in Attribute Types and use that to create a union of new types where the attribute type\n * is under the property attribute and the type is under the property type.\n */\ntype EditFieldLayout = {\n  [K in Attribute.Kind]: EditFieldSharedProps & {\n    attribute: Extract<Attribute.Any, { type: K }>;\n    type: K;\n  };\n}[Attribute.Kind];\n\ntype LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;\n\ninterface LayoutSettings extends Contracts.ContentTypes.Settings {\n  displayName?: string;\n  icon?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Host and Port in TypeScript\nDESCRIPTION: This snippet shows the default server configuration for host and port in TypeScript format.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/host-port-path.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: env(\"HOST\", \"0.0.0.0\"),\n  port: env.int(\"PORT\", 1337),\n});\n```\n\n----------------------------------------\n\nTITLE: CRON Format Pattern Structure\nDESCRIPTION: Illustrates the format pattern used for CRON expressions in Strapi, showing the positions for second, minute, hour, day of month, month, and day of week values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬    ┬\n│    │    │    │    │    |\n│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)\n│    │    │    │    └───── month (1 - 12)\n│    │    │    └────────── day of month (1 - 31)\n│    │    └─────────────── hour (0 - 23)\n│    └──────────────────── minute (0 - 59)\n└───────────────────────── second (0 - 59, OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS OIDC Service for Strapi\nDESCRIPTION: This JSON snippet defines a CAS OIDC service for Strapi. It includes client ID, client secret, service ID, and attribute release policy for a local Strapi deployment.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/cas.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@class\": \"org.apereo.cas.services.OidcRegisteredService\",\n  \"clientId\": \"thestrapiclientid\",\n  \"clientSecret\": \"thestrapiclientsecret\",\n  \"bypassApprovalPrompt\": true,\n  \"serviceId\": \"^http(|s)://localhost:1337/.*\",\n  \"name\": \"Local Strapi\",\n  \"id\": 20201103,\n  \"evaluationOrder\": 50,\n  \"attributeReleasePolicy\": {\n    \"@class\": \"org.apereo.cas.services.ReturnMappedAttributeReleasePolicy\",\n    \"allowedAttributes\": {\n      \"@class\": \"java.util.TreeMap\",\n      \"strapiemail\": \"groovy { return attributes['mail'].get(0) }\",\n      \"strapiusername\": \"groovy { return attributes['username'].get(0) }\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Action Description Interface for Strapi Content Manager\nDESCRIPTION: TypeScript interface defining the properties for bulk actions that appear when entries are selected in the List View, including dialog options, label, and button configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ninterface BulkActionDescription {\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => void;\n  /**\n   * @default 'default'\n   */\n  type?: 'icon' | 'default';\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Media Fields in GraphQL\nDESCRIPTION: Example GraphQL query to fetch media fields (images) for restaurants.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    images {\n      documentId\n      url\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding APIs from Documentation Generation\nDESCRIPTION: JavaScript code demonstrating how to exclude specific APIs or plugins from documentation generation using the excludeFromGeneration method in the plugin's register lifecycle.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    strapi\n      .plugin(\"documentation\")\n      .service(\"override\")\n      .excludeFromGeneration(\"restaurant\");\n    // or several\n    strapi\n      .plugin(\"documentation\")\n      .service(\"override\")\n      .excludeFromGeneration([\"address\", \"upload\"]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Route and Controller Example in JavaScript\nDESCRIPTION: Simple example showing how to create a basic GET /hello route and corresponding controller that returns 'Hello World!'\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/hello',\n      handler: 'hello.index',\n    }\n  ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async index(ctx, next) { // called by GET /hello\n    ctx.body = 'Hello World!'; // we could also send a JSON\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting a Component in Content Manager Edit View\nDESCRIPTION: Example demonstrating how to inject a custom component into the informations box of the Content Manager's Edit View using the injectComponent() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n  bootstrap(app) {\n    app.getPlugin('content-manager').injectComponent()('editView', 'informations', {\n      name: 'my-plugin-my-compo',\n      Component: () => 'my-compo',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Admin Panel with Yarn\nDESCRIPTION: Command to rebuild the Strapi admin panel and restart the server after enabling a future flag using Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/features.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn develop\n```\n\n----------------------------------------\n\nTITLE: Updating a Restaurant Document via PUT Request\nDESCRIPTION: Updates an existing restaurant document by ID. Shows how to update fields while maintaining required fields in the request. Returns the updated document with metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"data\": {\n    \"Name\": \"BMK Paris Bamako\",\n    \"Description\": [\n      {\n        \"type\": \"paragraph\",\n        \"children\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"A very short description goes here.\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 9,\n    \"documentId\": \"hgv1vny5cebq2l3czil1rpb3\",\n    \"Name\": \"BMK Paris Bamako\",\n    \"Description\": [\n      {\n        \"type\": \"paragraph\",\n        \"children\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"A very short description goes here.\"\n          }\n        ]\n      }\n    ],\n    \"createdAt\": \"2024-03-06T13:42:05.098Z\",\n    \"updatedAt\": \"2024-03-06T14:16:56.883Z\",\n    \"publishedAt\": \"2024-03-06T14:16:56.895Z\",\n    \"locale\": \"en\"\n  },\n  \"meta\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Email Provider in TypeScript\nDESCRIPTION: TypeScript configuration for integrating Amazon SES as an email provider in Strapi Cloud. This example shows how to set up the required AWS credentials and regional endpoint as environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'amazon-ses',\n      providerOptions: {\n        key: env('AWS_SES_KEY'),\n        secret: env('AWS_SES_SECRET'),\n        amazon: 'https://email.us-east-1.amazonaws.com',\n      },\n      settings: {\n        defaultFrom: 'myemail@protonmail.com',\n        defaultReplyTo: 'myemail@protonmail.com',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: User Registration Request\nDESCRIPTION: Creates a new user account with username, email, and password, returning JWT token and user profile.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\n// Request API.\n// Add your own code here to customize or restrict how the public can register new users.\naxios\n  .post('http://localhost:1337/api/auth/local/register', {\n    username: 'Strapi user',\n    email: 'user@strapi.io',\n    password: 'strapiPassword',\n  })\n  .then(response => {\n    // Handle success.\n    console.log('Well done!');\n    console.log('User profile', response.data.user);\n    console.log('User token', response.data.jwt);\n  })\n  .catch(error => {\n    // Handle error.\n    console.log('An error occurred:', error.response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Multi-level sorting with GraphQL\nDESCRIPTION: GraphQL query that fetches restaurants sorted by name in ascending order, then by averagePrice in descending order. This demonstrates sorting by multiple fields with different directions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants(sort: [\"name:asc\", \"averagePrice:desc\"]) {\n    documentId\n    name\n    averagePrice\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Plugin for Strapi\nDESCRIPTION: Commands to install the Sentry plugin using yarn or npm package managers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @strapi/plugin-sentry\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @strapi/plugin-sentry\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SSO Logic in Strapi (JavaScript)\nDESCRIPTION: Example of custom SSO logic implementation in Strapi to restrict email domains. This snippet demonstrates how to allow only users with '@strapi.io' email addresses to connect.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst strategyInstance = new Strategy(configuration, ({ email, username }, done) => {\n  // If the email ends with @strapi.io\n  if (email.endsWith('@strapi.io')) {\n    // then we continue with the data given by the provider\n    return done(null, { email, username });\n  }\n\n  // Otherwise, we continue by sending an error to the done function\n  done(new Error('Forbidden email address'));\n});\n```\n\n----------------------------------------\n\nTITLE: Using $notContains Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $notContains operator to find records where an attribute does not contain a specified substring (case-sensitive). This query retrieves articles with titles not containing 'Hello'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notContains: 'Hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Discord Provider Configuration Settings\nDESCRIPTION: Example configuration values for setting up the Discord provider in Strapi's Users & Permissions system. Includes client ID, secret, and redirect URL settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/discord.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Enable**: `ON`\n- **Client ID**: 665118465148846081\n- **Client Secret**: iJbr7mkyqyut-J2hGvvSDch_5Dw5U77J\n- **The redirect URL to your front-end app**: `http://localhost:3000/connect/discord/redirect`\n```\n\n----------------------------------------\n\nTITLE: Using $gt Greater Than Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $gt operator to find records where an attribute is greater than a specified value. This query retrieves articles with ratings greater than 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $gt: 5,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Real-time Content Update Handler for Next.js\nDESCRIPTION: Implements event listener logic to handle real-time content updates from Strapi using postMessage API. Includes both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function MyClientComponent({...props}) {\n  // …\n  const router = useRouter();\n\n  useEffect(() => {\n    const handleMessage = async (message) => {\n      if (\n        // Filters events emitted through the postMessage() API\n        message.origin === process.env.NEXT_PUBLIC_API_URL &&\n        message.data.type === \"strapiUpdate\"\n      ) { // Recommended way to refresh with Next.js\n        router.refresh();\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener(\"message\", handleMessage);\n\n    // Cleanup the event listener on unmount\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n    };\n  }, [router]);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Single RBAC Condition in Strapi Bootstrap Function (TypeScript)\nDESCRIPTION: Demonstrates how to register a single RBAC condition in the Strapi bootstrap function using TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async () => {\n  await strapi.admin.services.permission.conditionProvider.register({\n    displayName: 'Billing amount under 10K',\n    name: 'billing-amount-under-10k',\n    plugin: 'admin',\n    handler: { amount: { $lt: 10000 } },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Preview Handler in Strapi\nDESCRIPTION: A basic preview handler that generates URLs for content previews based on the content type (uid), document ID, locale, and status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// …\npreview: {\n  enabled: true,\n  config: {\n    // …\n    async handler(uid, { documentId, locale, status }) {\n      const document = await strapi.documents(uid).findOne({ documentId });\n      const pathname = getPreviewPathname(uid, { locale, document });\n\n      return `${env('PREVIEW_URL')}${pathname}`\n    },\n  }\n}\n// …\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with Environment Variables in TypeScript\nDESCRIPTION: Example of using env() utility to access environment variables in TypeScript configuration file\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-cast-environment-variables.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  connections: {\n    default: {\n      settings: {\n        password: env('DATABASE_PASSWORD'),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $nei operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to perform case-insensitive not-equal filtering with the $nei operator to exclude matches regardless of letter case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $nei: 'abcd',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Strapi Application with NPM\nDESCRIPTION: Command to start the Strapi application in development mode using NPM. This is an alternative to using Yarn and serves the same purpose of launching the Strapi server for development.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/cli.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Counting Published Documents in Strapi (JavaScript)\nDESCRIPTION: This example shows how to count only published documents using the count() method by passing the 'published' status parameter. If no locale is specified, it counts for the default locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documents('api::restaurant.restaurant').count({ status: 'published' })\n```\n\n----------------------------------------\n\nTITLE: Using Draft-Aware Fetching in Page Components\nDESCRIPTION: Example of how to use the fetchContentType utility in a Next.js page component to retrieve page data with draft support.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// In your page component:\nconst pageData = await fetchContentType('api::page.page', {\n  // Your other query parameters\n});\n```\n\n----------------------------------------\n\nTITLE: Draft-Aware Content Fetching Utility for Next.js\nDESCRIPTION: Implements a utility function for fetching content from Strapi with draft mode awareness. Automatically includes draft status parameter when preview mode is enabled.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from \"next/headers\";\nimport qs from \"qs\";\n\nexport default async function fetchContentType(\n  contentType: string,\n  params: Record = {}\n): Promise {\n  // Check if Next.js draft mode is enabled\n  const { isEnabled: isDraftMode } = draftMode();\n  \n  try {\n    const queryParams = { ...params };\n    // Add status=draft parameter when draft mode is enabled\n    if (isDraftMode) {\n      queryParams.status = \"draft\";\n    }\n    \n    const url = `${baseURL}/${contentType}?${qs.stringify(queryParams)}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch data from Strapi (url=${url}, status=${response.status})`\n      );\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching content:\", error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Image Breakpoints in JavaScript\nDESCRIPTION: Customizing the responsive image breakpoints for the Strapi Upload plugin in JavaScript, overriding the default sizes with custom dimensions for generated images.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  upload: {\n    config: {\n      breakpoints: {\n        xlarge: 1920,\n        large: 1000,\n        medium: 750,\n        small: 500,\n        xsmall: 64\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider in Strapi\nDESCRIPTION: Example configuration for the Email feature in Strapi, including provider settings and rate limiting options. This should be placed in the config/plugins.js or config/plugins.ts file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/email.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  provider: 'sendmail',\n  providerOptions: {\n    apiKey: ''\n  },\n  settings: {\n    defaultFrom: '',\n    defaultReplyTo: ''\n  },\n  ratelimit: {\n    enabled: true,\n    interval: '5',\n    max: 5,\n    delayAfter: 1,\n    timeWait: 1,\n    prefixKey: '${userEmail}',\n    whitelist: [],\n    store: 'MemoryStore'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File\nDESCRIPTION: Example of defining environment variables in a .env file at the project root\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-cast-environment-variables.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# path: .env\n\nDATABASE_PASSWORD=acme\n```\n\n----------------------------------------\n\nTITLE: Email Lifecycle Hook Implementation in TypeScript\nDESCRIPTION: TypeScript version of the afterCreate lifecycle hook implementation for sending automated emails when new content is created in Strapi's Content Manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/email.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async afterCreate(event) {    // Connected to \"Save\" button in admin panel\n    const { result } = event;\n\n    try{\n      await strapi.plugins['email'].services.email.send({\n        to: 'valid email address',\n        from: 'your verified email address',\n        cc: 'valid email address',\n        bcc: 'valid email address',\n        replyTo: 'valid email address',\n        subject: 'The Strapi Email feature worked successfully',\n        text: '${fieldName}',\n        html: 'Hello world!', \n      })\n    } catch(err) {\n      console.log(err);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NotFound Error Example\nDESCRIPTION: Demonstrates throwing a NotFoundError for 404 status cases with a custom message.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.NotFoundError('These are not the droids you are looking for');\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Plugin Local Server in JavaScript\nDESCRIPTION: Sets up the local server configuration for the Upload plugin in Strapi, specifically configuring the maxage header for locally uploaded files.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env })=>({\\n  upload: {\\n    config: {\\n      providerOptions: {\\n        localServer: {\\n          maxage: 300000\\n        },\\n      },\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Strapi Facebook Provider Configuration\nDESCRIPTION: Example configuration values for setting up the Facebook provider in Strapi's admin panel, including client ID, secret, and redirect URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/facebook.md#2025-04-09_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nEnable: ON\nClient ID: 2408954435875229\nClient Secret: 4fe04b740b69f31ea410b9391ff3b5b0\nThe redirect URL to your front-end app: http://localhost:3000/connect/facebook/redirect\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Service in a Controller in JavaScript\nDESCRIPTION: Example of how to use a custom service within a controller. This code demonstrates creating a signup controller that adds a new user and then calls the sendNewsletter service to send a welcome email.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // GET /hello\n  async signup(ctx) {\n    const { userData } = ctx.body;\n\n    // Store the new user in database.\n    const user = await strapi.service('plugin::users-permissions.user').add(userData);\n\n    // Send an email to validate his subscriptions.\n    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');\n\n    // Send response to the server.\n    ctx.send({\n      ok: true,\n    });\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Registration Fields in Strapi\nDESCRIPTION: Configuration for allowing additional fields during user registration. Adds 'nickname' to the list of allowed fields.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  \"users-permissions\": {\n    config: {\n      register: {\n        allowedFields: [\"nickname\"],\n      },\n    },\n  },\n  // ...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  \"users-permissions\": {\n    config: {\n      register: {\n        allowedFields: [\"nickname\"],\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SSO Callback Validation\nDESCRIPTION: Configuration for custom SSO callback URL validation to allow specific domains and paths.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  // ... other plugins configuration ...\n  // Users & Permissions configuration\n  'users-permissions': {\n    enabled: true,\n    config: {\n      callback: {\n        validate: (cbUrl, options) => {\n          // cbUrl is where Strapi is being asked to redirect the auth info\n          // that was received from the provider to\n\n          // in this case, we will only validate that the \n          // if using a base url, you should always include the trailing slash\n          // although in real-world usage you should also include the full paths\n          if (cbUrl.startsWith('https://myproxy.mysite.com/') || \n              cbUrl.startsWith('https://mysite.com/')) {\n            return;\n          }\n\n          // Note that you MUST throw an error to fail validation\n          // return values are not checked\n          throw new Error('Invalid callback url');\n        },\n      },\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Body Middleware for Larger File Uploads in TypeScript\nDESCRIPTION: Configuration for the Strapi body middleware to support larger file uploads by increasing form limits, JSON limits, text limits, and maximum file size in TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: \"strapi::body\",\n    config: {\n      formLimit: \"256mb\", // modify form body\n      jsonLimit: \"256mb\", // modify JSON body\n      textLimit: \"256mb\", // modify text body\n      formidable: {\n        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size\n      },\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Adding a Cron Job in Strapi Plugin Bootstrap\nDESCRIPTION: This snippet demonstrates how to add a new cron job to a Strapi instance within a plugin bootstrap function. It creates a job that runs every second and logs a message to the console.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/use-cron-jobs.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => ({\n  bootstrap({ strapi }) {\n    strapi.cron.add({\n      // runs every second\n      myJob: {\n        task: ({ strapi }) => {\n          console.log(\"hello from plugin\");\n        },\n        options: {\n          rule: \"* * * * * *\",\n        },\n      },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Request Timeout in JavaScript\nDESCRIPTION: Adjusts the request timeout duration in the bootstrap function to allow for longer upload times (30 minutes) for large files in a Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\\n\\n  //...\\n\\n  bootstrap({ strapi }) {\\n    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):\\n    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi with NPM\nDESCRIPTION: Command to create a new Strapi project using NPM package manager. Uses the latest version of Strapi through the create-strapi package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi@latest\n```\n\n----------------------------------------\n\nTITLE: Strapi REST API Parameters Table\nDESCRIPTION: Markdown table listing available API parameters for Strapi REST API, including filters, locale, status, populate, fields, sort, and pagination options. Each parameter is described with its type and purpose.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/parameters.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Operator           | Type          | Description                                           |\n| ------------------ | ------------- | ----------------------------------------------------- |\n| `filters`          | Object        | [Filter the response](/cms/api/rest/filters) |\n| `locale`           | String        | [Select a locale](/cms/api/rest/locale) |\n| `status`           | String        | [Select the Draft & Publish status](/cms/api/rest/status) |\n| `populate`         | String or Object | [Populate relations, components, or dynamic zones](/cms/api/rest/populate-select#population) |\n| `fields`           | Array         | [Select only specific fields to display](/cms/api/rest/populate-select#field-selection) |\n| `sort`             | String or Array  | [Sort the response](/cms/api/rest/sort-pagination.md#sorting) |\n| `pagination`       | Object        | [Page through entries](/cms/api/rest/sort-pagination.md#pagination) |\n```\n\n----------------------------------------\n\nTITLE: Fetching All Documents in a Specific Locale with GraphQL\nDESCRIPTION: This GraphQL query retrieves all restaurant documents for the French locale. It demonstrates how to use the 'locale' argument in a query to fetch localized content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  restaurants(locale: \"fr\") {\n    documentId\n    name\n    locale\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token-based API Request\nDESCRIPTION: Example of making an authenticated API request using JWT token in the Authorization header.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\nconst token = 'YOUR_TOKEN_HERE';\n\n// Request API.\naxios\n  .get('http://localhost:1337/posts', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  })\n  .then(response => {\n    // Handle success.\n    console.log('Data: ', response.data);\n  })\n  .catch(error => {\n    // Handle error.\n    console.log('An error occurred:', error.response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Field Types Documentation Table in Markdown\nDESCRIPTION: Comprehensive table documenting different field types in Strapi and instructions for their usage, including text, rich text, numbers, dates, media, relations, and other specialized fields.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-manager.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Field name  | Instructions                                                                                                                                                                                                                                                                                                                                                              |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Text        | Write your content in the textbox.                                                                                                                                                                                                                                                                                                                                        |\n| Rich text (Markdown) | Write your textual content in the editor, in Markdown. Some basic formatting options (titles, bold, italics, underline) are available in the top bar of the editor to apply to selected text. A **Preview mode/Markdown mode** button to switch between modes is also available. <br /><br /> 💡 The box can be expanded by clicking on **Expand** in the bottom bar. It displays side by side, at the same time, the textbox that you can edit and the preview. |\n| Rich text (Blocks) | Write and manage your content in the editor, which automatically renders live all additions/updates. In the Blocks editor, paragraphs behave as blocks of text: hovering on a paragraph will display an icon <Icon name=\"dots-six-vertical\" classes=\"ph-bold\"/> on which to click to reorder the content. Options to format or enrich the content are also accessible from the top bar of the editor (basic formatting options, code, links, image etc.). <br /><br /> 💡 You can use text formatting keyboard shortcuts in the Blocks editor (e.g. bold, italics, underline, and pasting link). |\n| Number      | Write your number in the textbox. Up and down arrows, displayed on the right of the box, allow to increase or decrease the current number indicated in the textbox.                                                                                                                                                                                                       |\n| Date        | 1. Click the date and/or time box. <br /> 2. Type the date and time or choose a date using the calendar and/or a time from the list. The calendar view fully supports keyboard-based navigation. |\n| Media       | 1. Click the media area. <br /> 2. Choose an asset from the [Media Library](/cms/features/media-library) or from a [folder](/cms/features/media-library#organizing-assets-with-folders) if you created some, or click the **Add more assets** button to add a new file to the Media Library. <br /><br /> 💡 It is possible to drag and drop the chosen file in the media area.                                                                                                                                   |\n| Relation    | Choose an entry from the drop-down list. See [relational fields](#relational-fields) for more information.                                                                                                                                                                                                          |\n| Boolean     | Click on **TRUE** or **FALSE**.                                                                                                                                                                                                                                                                                                                                               |\n| JSON        | Write your content, in JSON format, in the code textbox.                                                                                                                                                                                                                                                                                                                  |\n| Email       | Write a complete and valid email address.                                                                                                                                                                                                                                                                                                                                 |\n| Password    | Write a password. <br /><br /> 💡 Click the <Icon name=\"eye\" /> icon, displayed on the right of the box, to show the password.                                                                                                                                                                                                                                                                |\n| Enumeration | 1. Click the drop-down list. <br /> 2. Choose an entry from the list.                                                                                                                                                                                                                                                                                                       |\n| UID         | Write a unique identifier in the textbox. A \"Regenerate\" button, displayed on the right of the box, allows automatically generating a UID based on the content type name.                                                                                                                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Configuring Google SSO Provider in Strapi (JavaScript)\nDESCRIPTION: JavaScript configuration for setting up Google as an SSO provider in Strapi. It includes setting up the Google Strategy with client ID, client secret, scope, and callback URL. The strategy also handles user profile data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/google.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst GoogleStrategy = require(\"passport-google-oauth2\");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"google\",\n        displayName: \"Google\",\n        icon: \"https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Google-512.png\",\n        createStrategy: (strapi) =>\n          new GoogleStrategy(\n            {\n              clientID: env(\"GOOGLE_CLIENT_ID\"),\n              clientSecret: env(\"GOOGLE_CLIENT_SECRET\"),\n              scope: [\n                \"https://www.googleapis.com/auth/userinfo.email\",\n                \"https://www.googleapis.com/auth/userinfo.profile\",\n              ],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\"google\"),\n            },\n            (request, accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                firstname: profile.given_name,\n                lastname: profile.family_name,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating FilterListURLQuery Component in TSX\nDESCRIPTION: Example showing how to migrate from FilterListURLQuery to the new Filters composite component from @strapi/strapi/admin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { FilterListURLQuery } from '@strapi/helper-plugin';\n\nconst MyComponent = () => {\n  return (\n    <FilterListURLQuery\n      filtersSchema={[\n        {\n          name: 'name',\n          metadatas: { label: 'Name' },\n          fieldSchema: { type: 'string' },\n        },\n      ]}\n    />\n  );\n};\n\n// After\nimport { Filters } from '@strapi/strapi/admin';\n\nconst MyComponent = () => {\n  return (\n    <Filters.Root>\n      <Filters.List />\n    </Filters.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Admin Panel Path in JavaScript\nDESCRIPTION: This snippet shows how to change the admin panel's path by modifying the 'url' property in the admin panel configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/host-port-path.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // … other configuration properties\n  url: \"/dashboard\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Size Limit in Plugins Configuration for JavaScript\nDESCRIPTION: Configuration for setting the maximum file size limit for uploads in the Strapi plugins configuration file using JavaScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  upload: {\n    config: {\n      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Client ID and Secret in Strapi\nDESCRIPTION: Example configuration for enabling the Twitch provider in Strapi's Users & Permissions settings. This shows the required fields including setting the Enable toggle to ON, specifying your Twitch Client ID and Client Secret, and setting the redirect URL for your front-end application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/twitch.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n   - **Enable**: `ON`\n   - **Client ID**: amuy279g8wt68qlht3u4gek4oykh5j\n   - **Client Secret**: dapssh10uo97gg2l25qufr8wen3yr6\n   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/twitch/redirect`\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration in JavaScript for Strapi 5 Admin Panel\nDESCRIPTION: Demonstrates how to extend Vite configuration in JavaScript for Strapi 5's admin panel. This example adds a path alias to the Vite resolver. The function takes the existing config and returns a merged configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/bundlers.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { mergeConfig } = require(\"vite\");\n\nmodule.exports = (config) => {\n  // Important: always return the modified config\n  return mergeConfig(config, {\n    resolve: {\n      alias: {\n        \"@\": \"/src\",\n      },\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Authentication Events in Strapi (JavaScript)\nDESCRIPTION: Example of configuring SSO authentication events in Strapi, specifically the 'onSSOAutoRegistration' event. This event is triggered when a user is created using the auto-register feature added by SSO.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => ({\n    auth: {\n      // ...\n      events: {\n        onConnectionSuccess(e) {},\n        onConnectionError(e) {},\n        // ...\n        onSSOAutoRegistration(e) {\n          const { user, provider } = e;\n\n          console.log(\n            `A new user (${user.id}) has been automatically registered using ${provider}`\n          );\n        },\n      },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Mutation in Strapi Config\nDESCRIPTION: Example demonstrating how to use mutateDocumentation function in plugins configuration to modify the generated documentation at application level.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  documentation: {\n    config: {\n      \"x-strapi-config\": {\n        mutateDocumentation: (generatedDocumentationDraft) => {\n          generatedDocumentationDraft.paths[\n            \"/answer-to-everything\" // must be an existing path\n          ].get.responses[\"200\"].description = \"*\";\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Policy Error Implementation in TypeScript\nDESCRIPTION: TypeScript version of the custom policy implementation that throws a PolicyError with custom message and details.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@strapi/utils';\nconst { PolicyError } = errors;\n\nexport default (policyContext, config, { strapi }) => {\n  let isAllowed = false;\n\n  if (isAllowed) {\n    return true;\n  } else {\n    throw new errors.PolicyError('You are not allowed to perform this action', {\n      policy: 'my-policy',\n      myCustomKey: 'myCustomValue',\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Production Dockerfile for Strapi with Yarn\nDESCRIPTION: This Dockerfile creates a multi-stage build for a production Strapi application using Yarn. It installs dependencies, builds the application, and sets up the final production image with the necessary environment and permissions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/docker.md#2025-04-09_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Creating multi-stage build for production\nFROM node:18-alpine as build\nRUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1\nARG NODE_ENV=production\nENV NODE_ENV=${NODE_ENV}\n\nWORKDIR /opt/\nCOPY package.json yarn.lock ./\nRUN yarn global add node-gyp\nRUN yarn config set network-timeout 600000 -g && yarn install --production\nENV PATH /opt/node_modules/.bin:$PATH\nWORKDIR /opt/app\nCOPY . .\nRUN yarn build\n\n# Creating final production image\nFROM node:18-alpine\nRUN apk add --no-cache vips-dev\nENV NODE_ENV=production\nENV NODE_ENV=${NODE_ENV}\nWORKDIR /opt/\nCOPY --from=build /opt/node_modules ./node_modules\nWORKDIR /opt/app\nCOPY --from=build /opt/app ./\nENV PATH /opt/node_modules/.bin:$PATH\n\nRUN chown -R node:node /opt/app\nUSER node\nEXPOSE 1337\nCMD [\"yarn\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing destroy() Lifecycle Function in JavaScript\nDESCRIPTION: Example of implementing the destroy() lifecycle function for a Strapi plugin in JavaScript. This function is called to cleanup the plugin when the Strapi instance is destroyed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst destroy = ({ strapi }) => {\n  // execute some destroy code\n};\n\nmodule.exports = destroy;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Strapi Server.js Entry Point File\nDESCRIPTION: This snippet shows how to create a server.js file that allows running Strapi with a direct 'node server.js' command instead of using npm scripts. It imports the Strapi package and uses the createStrapi factory to initialize and start the server.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/deployment.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst strapi = require('@strapi/strapi');\nstrapi.createStrapi(/* {...} */).start();\n```\n\n----------------------------------------\n\nTITLE: Enumeration Field Configuration Table\nDESCRIPTION: Base settings table for Enumeration field type showing name and values configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-type-builder.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name  | Instructions                                                    |\n|---------------|-----------------------------------------------------------------|\n| Name          | Write the name of the Enumeration field.                        |\n| Values        | Write the values of the enumeration, one per line.              |\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Admin Panel in TypeScript\nDESCRIPTION: TypeScript version of the admin panel configuration with similar customization options including logos, favicon, locales, theme, translations, and feature toggles.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AuthLogo from \"./extensions/my-logo.png\";\nimport MenuLogo from \"./extensions/logo.png\";\nimport favicon from \"./extensions/favicon.png\";\n\nexport default {\n  config: {\n    auth: {\n      logo: AuthLogo,\n    },\n    head: {\n      favicon: favicon, \n    },\n    locales: [\"fr\", \"de\"],\n    menu: {\n      logo: MenuLogo,\n    },\n    theme: {\n      colors: {\n        primary100: \"#f6ecfc\",\n        primary200: \"#e0c1f4\",\n        primary500: \"#ac73e6\",\n        primary600: \"#9736e8\",\n        primary700: \"#8312d1\",\n        danger700: \"#b72b1a\",\n      },\n    },\n    translations: {\n      fr: {\n        \"Auth.form.email.label\": \"test\",\n        Users: \"Utilisateurs\",\n        City: \"CITY (FRENCH)\",\n        Id: \"ID french\",\n      },\n    },\n    tutorials: false,\n    notifications: { releases: false },\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Global Policies to a Route in Strapi\nDESCRIPTION: Example of applying a global policy to a route configuration. The policy named 'is-authenticated' will be executed before the find action in the Restaurant controller.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          Before executing the find action in the Restaurant.js controller,\n          we call the global 'is-authenticated' policy,\n          found at ./src/policies/is-authenticated.js.\n         */\n        policies: ['global::is-authenticated']\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          Before executing the find action in the Restaurant.js controller,\n          we call the global 'is-authenticated' policy,\n          found at ./src/policies/is-authenticated.js.\n         */\n        policies: ['global::is-authenticated']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft SSO Dependencies with Yarn\nDESCRIPTION: Commands to install required npm packages passport-azure-ad-oauth2 and jsonwebtoken using Yarn package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/microsoft.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add passport-azure-ad-oauth2 jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Controllers and Middlewares (JavaScript)\nDESCRIPTION: Example of how to throw errors in Strapi controllers and middlewares using the context (ctx) object. It demonstrates using the badRequest error function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// path: ./src/api/[api-name]/controllers/my-controller.js\n\nmodule.exports = {\n  renameDog: async (ctx, next) => {\n    const newName = ctx.request.body.name;\n    if (!newName) {\n      return ctx.badRequest('name is missing', { foo: 'bar' })\n    }\n    ctx.body = strapi.service('api::dog.dog').rename(newName);\n  }\n}\n\n// path: ./src/api/[api-name]/middlewares/my-middleware.js\n\nmodule.exports = async (ctx, next) => {\n  const newName = ctx.request.body.name;\n  if (!newName) {\n    return ctx.badRequest('name is missing', { foo: 'bar' })\n  }\n  await next();\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing NotAllowedInput with TextInput in React/TypeScript\nDESCRIPTION: Shows how to replace the removed NotAllowedInput component with a custom implementation using TextInput from @strapi/design-system. This example creates a disabled text input with a placeholder indicating no permissions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput } from '@strapi/design-system';\n\nconst MyComponent = (props) => {\n  return (\n    <TextInput\n      disabled\n      placeholder=\"No permissions to see this field\"\n      type=\"text\"\n      {...props}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using findPage() Method in Strapi v4 Entity Service API\nDESCRIPTION: This code snippet demonstrates how to use the findPage() method from the Entity Service API in Strapi v4 to retrieve a paginated list of articles.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-find-page-in-document-service.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nstrapi.entityService.findPage('api::article.article', {\n  start: 10,\n  limit: 15,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Middleware in Strapi\nDESCRIPTION: Example configuration for the compression middleware in Strapi, showing how to disable Brotli compression.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::compression',\n    config: {\n      br: false\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::compression',\n    config: {\n      br: false\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using the $ne operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates filtering for articles with titles that do not equal a specific value using the $ne operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $ne: 'ABCD',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rich Text Field Configuration Table\nDESCRIPTION: Base settings table for Rich Text (Markdown) field type showing name configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-type-builder.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name | Instructions                                      |\n|--------------|---------------------------------------------------|\n| Name         | Write the name of the Rich Text (Markdown) field. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendgrid Email Provider in TypeScript\nDESCRIPTION: Configures the Sendgrid provider for Strapi's Email feature in the plugins.ts file. Includes options for API key and default email settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'sendgrid', // For community providers pass the full package name (e.g. provider: 'strapi-provider-email-mandrill')\n      providerOptions: {\n        apiKey: env('SENDGRID_API_KEY'),\n      },\n      settings: {\n        defaultFrom: 'juliasedefdjian@strapi.io',\n        defaultReplyTo: 'juliasedefdjian@strapi.io',\n        testAddress: 'juliasedefdjian@strapi.io',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Max File Size in Middleware (JavaScript)\nDESCRIPTION: Sets body middleware configuration to increase the maximum allowed file size for uploads to 256MB in a Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\\n  // ...\\n  {\\n    name: \"strapi::body\",\\n    config: {\\n      formLimit: \"256mb\", // modify form body\\n      jsonLimit: \"256mb\", // modify JSON body\\n      textLimit: \"256mb\", // modify text body\\n      formidable: {\\n        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size\\n      },\\n    },\\n  },\\n  // ...\\n];\n```\n\n----------------------------------------\n\nTITLE: Receiving GraphQL API Errors in JSON\nDESCRIPTION: Example of the error response format when receiving errors from Strapi's GraphQL API. It includes message, extensions with error details, and the GraphQL error code.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"errors\": [\n    {\n      \"message\": \"\", // A human reable error message\n      \"extensions\": {\n        \"error\": {\n          \"name\": \"\", // Strapi error name ('ApplicationError' or 'ValidationError'),\n          \"message\": \"\", // A human reable error message (same one as above);\n          \"details\": {}, // Error info specific to the error type\n        },\n        \"code\": \"\" // GraphQL error code (ex: BAD_USER_INPUT)\n      }\n    }\n  ],\n  \"data\": {\n    \"graphQLQueryName\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getWhere() Method in Strapi v4\nDESCRIPTION: This snippet demonstrates how to use the getWhere() method to query provider's items that match certain conditions in Strapi v4.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/get-where-removed.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst values = provider.getWhere({ foo: 42, bar: 'baz' });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Restaurant Data from Strapi API (JSON)\nDESCRIPTION: This JSON response demonstrates the structure of data returned when querying the /api/restaurants endpoint. It includes restaurant details such as name, description, and metadata for pagination.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/quick-start.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 3,\n      \"documentId\": \"wf7m1n3g8g22yr5k50hsryhk\",\n      \"Name\": \"Biscotte Restaurant\",\n      \"Description\": [\n        {\n          \"type\": \"paragraph\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.\"\n            }\n          ]\n        }\n      ],\n      \"createdAt\": \"2024-09-10T12:49:32.350Z\",\n      \"updatedAt\": \"2024-09-10T13:14:18.275Z\",\n      \"publishedAt\": \"2024-09-10T13:14:18.280Z\",\n      \"locale\": null\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Articles without Populate Parameter in Strapi REST API\nDESCRIPTION: A JSON response example showing the default data returned when querying articles without using the populate parameter. This response only includes the default attributes and excludes media fields, relations, components, and dynamic zones.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"x2m0d7d9o4m2z3u2r2l9yes\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n    },\n    {\n      \"id\": 2,\n      \"documentId\": \"k6m6l9q0n6v9z2m3i0z5jah\",\n      \"title\": \"What are chinese hamburgers and why aren't you eating them?\",\n      \"slug\": \"what-are-chinese-hamburgers-and-why-aren-t-you-eating-them\",\n      \"createdAt\": \"2021-11-11T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-01T14:32:50.984Z\",\n      \"publishedAt\": \"2022-09-22T12:36:48.312Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n    },\n    {\n      \"id\": 3,\n      \"documentId\": \"o5d4b0l4p8l4o4k5n1l3rxa\",\n      \"title\": \"7 Places worth visiting for the food alone\",\n      \"slug\": \"7-places-worth-visiting-for-the-food-alone\",\n      \"createdAt\": \"2021-11-12T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"publishedAt\": \"2023-06-02T11:30:00.075Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n    },\n    {\n      \"id\": 4,\n      \"documentId\": \"t3q2i3v1z2j7o8p6d0o4xxg\",\n      \"title\": \"If you don't finish your plate in these countries, you might offend someone\",\n      \"slug\": \"if-you-don-t-finish-your-plate-in-these-countries-you-might-offend-someone\",\n      \"createdAt\": \"2021-11-15T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:59:35.148Z\",\n      \"publishedAt\": \"2022-09-22T12:35:53.899Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server with Environment Variables in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Strapi server using environment variables to make the application adaptable to different deployment environments. It exports a configuration object that sets the host and port based on environment variables with fallback values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/deployment.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n});\n```\n\n----------------------------------------\n\nTITLE: List View Configuration Settings Table\nDESCRIPTION: Markdown table showing available settings for configuring list views in Strapi's Content Manager, including search, filters, bulk actions, pagination, and sorting options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-manager.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name           | Instructions                                                                                       |\n| ---------------------- | -------------------------------------------------------------------------------------------------- |\n| Enable search          | Click on **TRUE** or **FALSE** to able or disable the search.                                          |\n| Enable filters         | Click on **TRUE** or **FALSE** to able or disable filters.                                             |\n| Enable bulk actions    | Click on **TRUE** or **FALSE** to able or disable the multiple selection boxes in the list view table. |\n| Entries per page       | Choose among the drop-down list the number of entries per page.                                    |\n| Default sort attribute | Choose the sorting field that will be used by default.                                             |\n| Default sort order     | Choose the sorting type that will be applied by default.                                           |\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Services (JavaScript)\nDESCRIPTION: Example of throwing custom errors in Strapi services using the ApplicationError class from @strapi/utils. It shows how to extend a core service and add custom validation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errors } = require('@strapi/utils');\nconst { ApplicationError } = errors;\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({\n  async create(params) {\n    let okay = false;\n\n    // Throwing an error will prevent the restaurant from being created\n    if (!okay) {\n      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });\n    }\n  \n    const result = await super.create(params);\n\n    return result;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider Model in Strapi Database\nDESCRIPTION: Defines the configuration object for the Discord provider that will be stored in the database. Includes settings for enabling the provider, UI icon, client credentials fields, callback URL, and required OAuth scopes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\ndiscord: {\n  enabled: false,  // make this provider disabled by default\n  icon: 'comments', // The icon to use on the UI\n  key: '',  // our provider app id (leave it blank, you will fill it with the Content Manager)\n  secret: '', // our provider secret key (leave it blank, you will fill it with the Content Manager)\n  callback: '/auth/discord/callback', // the callback endpoint of our provider\n  scope: [  // the scope that we need from our user to retrieve information\n    'identify',\n    'email'\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Strapi with MySQL\nDESCRIPTION: Docker Compose configuration for running Strapi with MySQL database. Defines services for both Strapi and MySQL containers, including volume mounts, network configuration, and environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/docker.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  strapi:\n    container_name: strapi\n    build: .\n    image: strapi:latest\n    restart: unless-stopped\n    env_file: .env\n    environment:\n      DATABASE_CLIENT: ${DATABASE_CLIENT}\n      DATABASE_HOST: strapiDB\n      DATABASE_PORT: ${DATABASE_PORT}\n      DATABASE_NAME: ${DATABASE_NAME}\n      DATABASE_USERNAME: ${DATABASE_USERNAME}\n      DATABASE_PASSWORD: ${DATABASE_PASSWORD}\n      JWT_SECRET: ${JWT_SECRET}\n      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}\n      APP_KEYS: ${APP_KEYS}\n      NODE_ENV: ${NODE_ENV}\n    volumes:\n      - ./config:/opt/app/config\n      - ./src:/opt/app/src\n      - ./package.json:/opt/package.json\n      - ./yarn.lock:/opt/yarn.lock\n      - ./.env:/opt/app/.env\n      - ./public/uploads:/opt/app/public/uploads\n    ports:\n      - \"1337:1337\"\n    networks:\n      - strapi\n    depends_on:\n      - strapiDB\n\n  strapiDB:\n    container_name: strapiDB\n    platform: linux/amd64\n    restart: unless-stopped\n    env_file: .env\n    image: mysql:5.7\n    command: --default-authentication-plugin=mysql_native_password\n    environment:\n      MYSQL_USER: ${DATABASE_USERNAME}\n      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}\n      MYSQL_PASSWORD: ${DATABASE_PASSWORD}\n      MYSQL_DATABASE: ${DATABASE_NAME}\n    volumes:\n      - strapi-data:/var/lib/mysql\n    ports:\n      - \"3306:3306\"\n    networks:\n      - strapi\n\nvolumes:\n  strapi-data:\n\nnetworks:\n  strapi:\n    name: Strapi\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Providers in Admin Configuration (TypeScript)\nDESCRIPTION: Basic structure for configuring SSO providers in the /config/admin.ts file. This shows the TypeScript equivalent of the JavaScript configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  auth: {\n    providers: [], // The providers' configuration lives there\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Strapi Project Template\nDESCRIPTION: Generates a template from the current Strapi project, which can be used as a starting point for new projects with similar configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nstrapi templates:generate <path>\n```\n\n----------------------------------------\n\nTITLE: Policy Error Example\nDESCRIPTION: Shows how to throw a PolicyError with a custom message and policy details.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.PolicyError('Something went wrong', { policy: 'my-policy' });\n```\n\n----------------------------------------\n\nTITLE: Excluding Assets from Import using Strapi CLI and Yarn\nDESCRIPTION: Example of using the '--exclude' flag to remove assets from an import with Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --exclude files\n```\n\n----------------------------------------\n\nTITLE: Custom Policy Error Implementation in JavaScript\nDESCRIPTION: Shows how to implement a custom policy that throws a PolicyError with custom message and details.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { errors } = require('@strapi/utils');\nconst { PolicyError } = errors;\n\nmodule.exports = (policyContext, config, { strapi }) => {\n  let isAllowed = false;\n\n  if (isAllowed) {\n    return true;\n  } else {\n    throw new errors.PolicyError('You are not allowed to perform this action', {\n      policy: 'my-policy',\n      myCustomKey: 'myCustomValue',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Provider Values in Strapi 5\nDESCRIPTION: This snippet shows the new approach in Strapi 5 for filtering provider values using the values() method and filter() function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/get-where-removed.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst values = provider.values().filter(value => value.foo === 42 && value.bar === 'baz');\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi Project with NPM\nDESCRIPTION: Command to create a new Strapi project using NPM. This installs the latest version of Strapi and sets up a new project directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/quick-start.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi@latest my-strapi-project\n```\n\n----------------------------------------\n\nTITLE: Creating a New Documentation Version\nDESCRIPTION: Example of how to create a new version of the documentation by updating the version number in the settings.json file. This automatically creates a new version without any manual migration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": {\n    \"version\": \"2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Setting for Future Flag\nDESCRIPTION: Example of setting the STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING environment variable to enable the corresponding future flag.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/features.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nSTRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING=true\n```\n\n----------------------------------------\n\nTITLE: Disabling Strapi Telemetry\nDESCRIPTION: Disables data collection for the Strapi project, preventing usage information from being sent to Strapi developers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nstrapi telemetry:disable\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Panel tsconfig.json for Strapi TypeScript Support\nDESCRIPTION: This configuration extends Strapi's admin TypeScript settings, defining included and excluded directories and files for the TypeScript compiler within the admin panel directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/adding-support-to-existing-project.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"@strapi/typescript-utils/tsconfigs/admin\",\n    \"include\": [\n      \"../plugins/**/admin/src/**/*\",\n      \"./\"\n    ],\n    \"exclude\": [\n      \"node_modules/\",\n      \"build/\",\n      \"dist/\",\n      \"**/*.test.ts\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Webhook Event Payload Example for Entry Creation\nDESCRIPTION: Sample JSON payload structure for the entry.create webhook event.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"entry.create\",\n  \"createdAt\": \"2020-01-10T08:47:36.649Z\",\n  \"model\": \"address\",\n  \"entry\": {\n    \"id\": 1,\n    \"geolocation\": {},\n    \"city\": \"Paris\",\n    \"postal_code\": null,\n    \"category\": null,\n    \"full_name\": \"Paris\",\n    \"createdAt\": \"2020-01-10T08:47:36.264Z\",\n    \"updatedAt\": \"2020-01-10T08:47:36.264Z\",\n    \"cover\": null,\n    \"images\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ngrok tunnel for localhost\nDESCRIPTION: Command to create an ngrok HTTP tunnel to expose localhost:1337 for GitHub OAuth callback URL configuration. Required since GitHub doesn't accept localhost URLs for OAuth callbacks.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/github.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 1337\n```\n\n----------------------------------------\n\nTITLE: Dumping Strapi Configuration\nDESCRIPTION: Exports the current Strapi configuration to a file or stdout. This facilitates migration between environments such as from development to production.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nstrapi configuration:dump -f dump.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi config:dump --file dump.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi config:dump > dump.json\n```\n\n----------------------------------------\n\nTITLE: Creating New Strapi TypeScript Project with Yarn\nDESCRIPTION: Command to create a new Strapi project with TypeScript support using Yarn package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create strapi-app my-project --typescript\n```\n\n----------------------------------------\n\nTITLE: Migration Example from Strapi v4 to Strapi 5\nDESCRIPTION: This snippet provides a side-by-side comparison of the old and new methods for querying provider values, demonstrating the migration from Strapi v4 to Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/get-where-removed.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// In Strapi v4\nconst values = provider.getWhere({ foo: 42, bar: 'baz' });\n\n// In Strapi 5\nconst values = provider.values().filter(\n  value => value.foo === 42 && value.bar === 'baz'\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Releases Scheduling Future Flag in TypeScript\nDESCRIPTION: Example of creating a features.ts configuration file to enable the contentReleasesScheduling future flag using an environment variable with a fallback value.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/features.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.export = ({ env }) => ({\n  future: {\n    // You could also simply write: contentReleases: true\n    contentReleasesScheduling: env.bool('STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING', false),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Middleware in Strapi\nDESCRIPTION: Custom configuration for Strapi's logger middleware using Winston, including transport and format settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst {\n  winston,\n  formats: { prettyPrint, levelFilter },\n} = require('@strapi/logger');\n\nmodule.exports = {\n  transports: [\n    new winston.transports.Console({\n      level: 'http',\n      format: winston.format.combine(\n        levelFilter('http'),\n        prettyPrint({ timestamps: 'YYYY-MM-DD hh:mm:ss.SSS' })\n      ),\n    }),\n  ],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n'use strict';\n\nconst {\n  winston,\n  formats: { prettyPrint, levelFilter },\n} = require('@strapi/logger');\n\nexport default {\n  transports: [\n    new winston.transports.Console({\n      level: 'http',\n      format: winston.format.combine(\n        levelFilter('http'),\n        prettyPrint({ timestamps: 'YYYY-MM-DD hh:mm:ss.SSS' })\n      ),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Database Lifecycle Hooks Reference Table\nDESCRIPTION: Markdown table showing the relationship between Document Service API methods and their triggered database lifecycle hooks. Details which hooks are triggered for operations like create, update, delete, publish, and unpublish.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/lifecycle-hooks-document-service.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Document Service API method       | Triggered database lifecycle hook(s) |\n|-----------------------------------|--------------------------------------|\n| `findOne()`                       | before(after) findOne                |\n| `findFirst()`                     | before(after) findOne                |\n| `findMany()`                      | before(after) findMany               |\n| `create()`                        | before(after) Create                 |\n| `create({ status: 'published' })` | <ul><li>before(after) Create️<br/>Triggered twice as it creates both the draft and published versions</li><li>before(after) Delete<ul><li>Deletes previous draft versions of a document</li><li>Can be triggered multiple times if deleting multiple locales (one per each locale)</li></ul></li></ul> |\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Type Generation\nDESCRIPTION: TSConfig settings to exclude generated types from the build process to prevent Entity Service type checking issues.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/development.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exclude\": [\n    \"node_modules/\",\n    \"build/\",\n    \"dist/\",\n    \".cache/\",\n    \".tmp/\",\n    \"src/admin/\",\n    \"**/*.test.ts\",\n    \"src/plugins/**\",\n    \"types/generated/**\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Controller with Sanitization - TypeScript\nDESCRIPTION: TypeScript version of custom controller implementing @strapi/utils sanitization and validation functions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sanitize, validate } from '@strapi/utils';\n\nexport default {\n  async findCustom(ctx) {\n    const contentType = strapi.contentType('api::test.test');\n\n    await validate.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });\n    const sanitizedQueryParams = await sanitize.contentAPI.query(ctx.query, contentType, { auth: ctx.state.auth });\n\n    const documents = await strapi.documents(contentType.uid).findMany(sanitizedQueryParams);\n\n    return await sanitize.contentAPI.output(documents, contentType, { auth: ctx.state.auth });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Strapi Version Information\nDESCRIPTION: Command to print the currently installed Strapi version. It outputs either the global Strapi version or the project-specific version depending on where the command is executed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nstrapi version\n```\n\n----------------------------------------\n\nTITLE: Injecting Components into Content Manager in Strapi v4\nDESCRIPTION: Shows how to inject a component into the Content Manager in Strapi v4 using the now-deprecated injectContentManagerComponent() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component.md#2025-04-09_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\napp.injectContentManagerComponent('editView', 'right-links', {\n    name: 'PreviewButton',\n    Component: () => (\n      <Button onClick={() => window.alert('Not here, The preview is.')}>Preview</Button>\n    ),\n  });\n```\n\n----------------------------------------\n\nTITLE: Strapi Test Execution Output\nDESCRIPTION: This code snippet displays the expected console output when running the Strapi authentication tests. It shows the test results, including the number of passed tests and the execution time.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n➜  my-project git:(master) yarn test\n\nyarn run v1.13.0\n$ jest --forceExit --detectOpenHandles\n[2020-05-27T08:30:30.811Z] debug GET /hello (10 ms) 200\n[2020-05-27T08:30:31.864Z] debug POST /auth/local (891 ms) 200\n PASS  tests/app.test.js (6.811 s)\n  ✓ strapi is defined (3 ms)\n  ✓ should return hello world (54 ms)\n  ✓ should login user and return jwt token (1049 ms)\n  ✓ should return users data for authenticated user (163 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       4 passed, 4 total\nSnapshots:   0 total\nTime:        6.874 s, estimated 9 s\nRan all test suites.\n✨  Done in 8.40s.\n```\n\n----------------------------------------\n\nTITLE: Implementing Upload Provider in JavaScript\nDESCRIPTION: Template for implementing a custom Upload (Media Library) provider in JavaScript with methods for upload, delete, file size checking, and signed URL generation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  init(providerOptions) {\n    // init your provider if necessary\n\n    return {\n      upload(file) {\n        // upload the file in the provider\n        // file content is accessible by `file.buffer`\n      },\n      uploadStream(file) {\n        // upload the file in the provider\n        // file content is accessible by `file.stream`\n      },\n      delete(file) {\n        // delete the file in the provider\n      },\n      checkFileSize(file, { sizeLimit }) {\n        // (optional)\n        // implement your own file size limit logic\n      },\n      getSignedUrl(file) {\n        // (optional)\n        // Generate a signed URL for the given file.\n        // The signed URL allows secure access to the file.\n        // Only Content Manager assets will be signed.\n        // Returns an object {url: string}.\n      },\n      isPrivate() {\n        // (optional)\n        // if it is private, file urls will be signed\n        // Returns a boolean\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Common Domain for Cookies in Multi-domain Setup (JavaScript)\nDESCRIPTION: Configuration for setting a common domain for cookies when deploying the admin panel on a different subdomain, ensuring cookies are shared across domains.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  auth: {\n    domain: env(\"ADMIN_SSO_DOMAIN\", \".test.example.com\"),\n    providers: [\n      // ...\n    ],\n  },\n  url: env(\"ADMIN_URL\", \"http://admin.test.example.com\"),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Image Breakpoints in JavaScript\nDESCRIPTION: Customizes the responsive image breakpoint sizes generated by the Upload plugin in a Strapi application, adding an xlarge and xsmall size.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\\n  upload: {\\n    config: {\\n      breakpoints: {\\n        xlarge: 1920,\\n        large: 1000,\\n        medium: 750,\\n        small: 500,\\n        xsmall: 64\\n      },\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Production Dockerfile for Strapi with NPM\nDESCRIPTION: This Dockerfile creates a multi-stage build for a production Strapi application using NPM. It installs dependencies, builds the application, and sets up the final production image with the necessary environment and permissions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/docker.md#2025-04-09_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Creating multi-stage build for production\nFROM node:18-alpine as build\nRUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1\nARG NODE_ENV=production\nENV NODE_ENV=${NODE_ENV}\n\nWORKDIR /opt/\nCOPY package.json package-lock.json ./\nRUN npm install -g node-gyp\nRUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production\nENV PATH /opt/node_modules/.bin:$PATH\nWORKDIR /opt/app\nCOPY . .\nRUN npm run build\n\n# Creating final production image\nFROM node:18-alpine\nRUN apk add --no-cache vips-dev\nARG NODE_ENV=production\nENV NODE_ENV=${NODE_ENV}\nWORKDIR /opt/\nCOPY --from=build /opt/node_modules ./node_modules\nWORKDIR /opt/app\nCOPY --from=build /opt/app ./\nENV PATH /opt/node_modules/.bin:$PATH\n\nRUN chown -R node:node /opt/app\nUSER node\nEXPOSE 1337\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring VK Client Secret in Strapi\nDESCRIPTION: Example of a Client Secret value to be used in the Strapi Users & Permissions provider settings for VK integration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/vk.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncFBUSghLXGuxqnCyw1N3\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Documents with Locale Filter\nDESCRIPTION: Example of using findMany() to retrieve all documents available in a specific locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findMany({ locale: 'fr' });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Authentication Policy in Strapi\nDESCRIPTION: Example of a global policy implementation that checks if a user session exists before allowing the request to proceed to the controller action. Returns true to allow the request or false to block it.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (policyContext, config, { strapi }) => {\n  if (policyContext.state.user) { // if a session is open\n    // go to next policy or reach the controller's action\n    return true;\n  }\n\n  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (policyContext, config, { strapi }) => {\n  if (policyContext.state.user) { // if a session is open\n    // go to next policy or reach the controller's action\n    return true;\n  }\n\n  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n};\n```\n\n----------------------------------------\n\nTITLE: Environment Settings Configuration Table\nDESCRIPTION: Markdown table showing the required settings and instructions for creating a new Strapi Cloud environment.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/projects/settings.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name     | Instructions                                                             |\n| ---------------- | ------------------------------------------------------------------------ |\n| Environment name | (mandatory) Write a name for your project's new environment.             |\n| Git branch       | (mandatory) Select the right branch for your new environment.            |\n| Base directory   | Write the name of the base directory of your new environment.            |\n| Import variables | Tick the box to import variable names from an existing environment. Values will not be imported, and all variables will remain blank. |\n| Auto-deploy      | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |\n```\n\n----------------------------------------\n\nTITLE: Including User Tests in Strapi Test Suite\nDESCRIPTION: This code snippet shows how to include the user authentication tests in the main Strapi test suite file. It requires the user test file to be executed as part of the overall test suite.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('./user');\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendgrid Email Provider in JavaScript\nDESCRIPTION: Configures the Sendgrid provider for Strapi's Email feature in the plugins.js file. Includes options for API key and default email settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'sendgrid', // For community providers pass the full package name (e.g. provider: 'strapi-provider-email-mandrill')\n      providerOptions: {\n        apiKey: env('SENDGRID_API_KEY'),\n      },\n      settings: {\n        defaultFrom: 'juliasedefdjian@strapi.io',\n        defaultReplyTo: 'juliasedefdjian@strapi.io',\n        testAddress: 'juliasedefdjian@strapi.io',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Strapi Project\nDESCRIPTION: Commands to initialize a Git repository for a Strapi project, add files, make an initial commit, and push to a GitHub repository. This process is crucial for version control and potential deployment.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin git@github.com:yourname/my-first-strapi-project.git\ngit push --set-upstream origin main\n```\n\n----------------------------------------\n\nTITLE: Migration Step: New Method in Strapi 5\nDESCRIPTION: Shows the new method that should be used in the plugin's index.ts file when migrating to Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component.md#2025-04-09_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\napp.getPlugin('content-manager').injectComponent()\n```\n\n----------------------------------------\n\nTITLE: Creating Strapi Administrator Account\nDESCRIPTION: Creates a new administrator account for the Strapi CMS. Required information includes first name, last name, email, and password, which can be provided as options or entered interactively.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nstrapi admin:create-user --firstname=Kai --lastname=Doe --email=chef@strapi.io --password=Gourmet1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Environment\nDESCRIPTION: Database configuration for the test environment using SQLite with a temporary test database.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: env('DATABASE_FILENAME', '.tmp/test.db'),\n    },\n    useNullAsDefault: true,\n    debug: false\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Documents with Strapi Document Service API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the count() method of Strapi's Document Service API to count the total number of documents for the default locale without any parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').count()\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Middleware for Provider Logos (JavaScript)\nDESCRIPTION: Configuration for the security middleware to allow loading provider logos from external URLs by modifying the Content Security Policy directives.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/configure-sso.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Logging into Strapi Cloud with NPM\nDESCRIPTION: Command to log into Strapi Cloud using NPM package manager. This opens a browser window for authentication.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/getting-started/deployment-cli.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx run strapi login\n```\n\n----------------------------------------\n\nTITLE: Migrating PageSizeURLQuery to Pagination in React/TypeScript\nDESCRIPTION: Illustrates the migration from PageSizeURLQuery to the new Pagination component from @strapi/strapi/admin. The new implementation uses a composite Pagination component with a PageSize subcomponent.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { PageSizeURLQuery } from '@strapi/helper-plugin';\n\nconst MyComponent = () => {\n  return (\n    <PageSizeURLQuery options={['12', '24', '50', '100']} defaultValue=\"24\" />\n  );\n};\n\n// After\nimport { Pagination } from '@strapi/strapi/admin';\n\nconst MyComponent = () => {\n  return (\n    <Pagination.Root>\n      <Pagination.PageSize />\n    </Pagination.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Selected Codemods in Strapi (Bash)\nDESCRIPTION: Commands to run either all available codemods or a specific codemod by UID.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade codemods run\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade codemods run 5.0.0-strapi-codemod-uid\n```\n\n----------------------------------------\n\nTITLE: Using $contains Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $contains operator to find records where an attribute contains a specified substring (case-sensitive). This query retrieves articles with titles containing 'Hello'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $contains: 'Hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Encrypted Data with Key using Strapi CLI and Yarn\nDESCRIPTION: Example of passing the encryption key with the 'strapi import' command using Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --key my-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Migrating hasPermissions to useAuth in TSX\nDESCRIPTION: Example showing how to replace the hasPermissions utility with the checkUserHasPermissions function from the useAuth hook in the @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { hasPermissions } from '@strapi/helper-plugin';\n\nconst permissions = await Promise.all(\n  generalSectionRawLinks.map(({ permissions }) =>\n    hasPermissions(userPermissions, permissions)\n  )\n);\n\n// After\nimport { useAuth } from '@strapi/strapi/admin';\n\nconst { checkUserHasPermissions } = useAuth(\n  'COMPONENT_NAME',\n  (state) => state.checkUserHasPermissions\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Locale Parameter in Strapi v4 vs Strapi 5\nDESCRIPTION: Demonstrates the difference in how the locale parameter is sent to the Content Manager in Strapi v4 and Strapi 5. In v4, it was sent as 'plugins[i18n][locale]', while in Strapi 5 it's simply 'locale'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/i18n-content-manager-locale.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**In Strapi v4**\n\nContent Manager sends the following parameter when accessing a locale: `plugins[i18n][locale]`.\n\n**In Strapi 5**\n\nThe parameter sent to the Content Manager is now just `locale`.\n```\n\n----------------------------------------\n\nTITLE: Defining Single Media Field in Restaurant Model - JSON Schema\nDESCRIPTION: JSON schema configuration for a restaurant model with a single media upload field named 'cover'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"cover\": {\n      \"type\": \"media\",\n      \"multiple\": false,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Relations with Shorthand Syntax\nDESCRIPTION: Example of disconnecting relations using the shorthand syntax to update a restaurant's categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      disconnect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv'],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Strapi Project with NPM\nDESCRIPTION: Command to deploy the Strapi project to Strapi Cloud using NPM package manager. This initiates the deployment process.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/getting-started/deployment-cli.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx run strapi deploy\n```\n\n----------------------------------------\n\nTITLE: Migrating useCMEditViewDataManager to useContentManagerContext in React/TypeScript\nDESCRIPTION: Demonstrates how to migrate from the deprecated useCMEditViewDataManager hook to the new useContentManagerContext hook in Strapi v5. It shows how to access various properties and functions that were previously available through useCMEditViewDataManager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useCMEditViewDataManager } from '@strapi/helper-plugin';\n\n// After\nimport { unstable_useContentManagerContext as useContentManagerContext } from '@strapi/strapi/admin';\n\n// Before\nconst { slug, isSingleType, isCreatingEntry, hasDraftAndPublished } =\n  useCMEditViewDataManager();\n\n// After\nconst {\n  model,\n  collectionType,\n  id,\n  slug,\n  isCreatingEntry,\n  isSingleType,\n  hasDraftAndPublish,\n} = useContentManagerContext();\n\n// Before\nconst { allLayoutData } = useCMEditViewDataManager();\n\n// After\nconst { components, contentType } = useContentManagerContext();\n\n// Before\nconst { layout } = useCMEditViewDataManager();\n\n// After\nconst { layout } = useContentManagerContext();\n\nconst {\n  edit: { layout, components },\n  list: { layout },\n} = layout;\n\n// Before\nconst { initialData, modifiedData, onChange } = useCMEditViewDataManager();\n\n// After\nconst { form } = useContentManagerContext();\n\n// Here 'initialData' and 'modifiedData' correspond to 'initialValues' and 'values'.\nconst { initialValues, values, onChange } = form;\n\n// Before\nconst { onPublish, onUnpublish } = useCMEditViewDataManager();\n\n// After\nconst { publish, unpublish } = useDocumentActions();\n```\n\n----------------------------------------\n\nTITLE: Extending Admin UI Translations in TypeScript\nDESCRIPTION: TypeScript version of extending the default translations in Strapi's admin interface by adding custom key/value pairs for the French language in the app.ts configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  config: {\n    locales: [\"fr\"],\n    translations: {\n      fr: {\n        \"Auth.form.email.label\": \"test\",\n        Users: \"Utilisateurs\",\n        City: \"CITY (FRENCH)\",\n        // Customize the label of the Content Manager table.\n        Id: \"ID french\",\n      },\n    },\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Encrypted Data with Key using Strapi CLI and NPM\nDESCRIPTION: Example of passing the encryption key with the 'strapi import' command using NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --key my-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Strapi v4\nDESCRIPTION: Example of accessing file properties in custom endpoints using ctx.request.files in Strapi v4. Shows the old property names for file path, name, and type.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/koa-body-v6.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst endpoint = (ctx) => {\n    ctx.request.files.fileName.path\n    ctx.request.files.fileName.name\n    ctx.request.files.fileName.type\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Jest Testing\nDESCRIPTION: JSON configuration for package.json to set up Jest test scripts and testing environment settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"develop\": \"strapi develop\",\n  \"start\": \"strapi start\",\n  \"build\": \"strapi build\",\n  \"strapi\": \"strapi\",\n  \"test\": \"jest --forceExit --detectOpenHandles\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"jest\": {\n  \"testPathIgnorePatterns\": [\n    \"/node_modules/\",\n    \".tmp\",\n    \".cache\"\n  ],\n  \"testEnvironment\": \"node\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Edit View Side Panel with Array Parameter in Strapi\nDESCRIPTION: Example of adding a ReleasesPanel to the Edit view sidebar using the addEditViewSidePanel API with an array parameter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\napp.getPlugin('content-manager').apis.addEditViewSidePanel([ReleasesPanel])\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple RBAC Conditions in Strapi Bootstrap Function (TypeScript)\nDESCRIPTION: Shows how to register multiple RBAC conditions using the conditionProvider.registerMany() method in the Strapi bootstrap function using TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst conditions = [\n  {\n    displayName: \"Entity has same name as user\",\n    name: \"same-name-as-user\",\n    plugin: \"name of a plugin if created in a plugin\"\n    handler: (user) => {\n      return { name: user.name };\n    },\n  },\n  {\n    displayName: \"Email address from strapi.io\",\n    name: \"email-strapi-dot-io\",\n    async handler(user) {\n      return user.email.includes('@strapi.io');\n    },\n  }\n];\n\nexport default async () => {\n  // do your boostrap\n\n  await strapi.admin.services.permission.conditionProvider.registerMany(conditions);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Provider in Strapi plugins.ts\nDESCRIPTION: TypeScript configuration boilerplate for setting up a third-party upload provider in Strapi Cloud. This is the basic structure that should be added to the plugins.ts file in the production environment configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n// … some unrelated plugins configuration options\n// highlight-start\nupload: {\n   config: {\n      // … provider-specific upload configuration options go here\n   }\n// highlight-end\n// … some other unrelated plugins configuration options\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Usage in React/TypeScript\nDESCRIPTION: Shows how to migrate from the old useNotification hook to the new one in @strapi/strapi/admin. The new version uses an object for the return value and requires string messages instead of TranslationMessage objects.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useNotification } from '@strapi/helper-plugin';\n\nconst toggleNotification = useNotification();\n\ntoggleNotification({\n  type: 'warning',\n  message: {\n    id: 'my.message.id',\n    defaultMessage: 'My message',\n  },\n});\n\n// After\nimport { useNotification } from '@strapi/strapi/admin';\n\nconst { toggleNotification } = useNotification();\n\ntoggleNotification({\n  type: 'danger',\n  message: formatMessage({\n    id: 'my.message.id',\n    defaultMessage: 'My message',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Implicit $and Operator in Strapi Query Engine\nDESCRIPTION: Example showing how $and is used implicitly when passing an object with nested conditions, simplifying the syntax for combining multiple filter conditions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: 'Hello World',\n    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Server Configuration Parameters in Strapi\nDESCRIPTION: The server.js configuration file supports multiple parameters for configuring the Strapi server. This includes mandatory parameters like host, port, and app.keys, as well as optional settings for socket configuration, proxy settings, cron jobs, and directory paths. Each parameter has specific types and default values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/server.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example server.js configuration\nmodule.exports = {\n  host: 'localhost',\n  port: 1337,\n  app: {\n    keys: ['myKey1', 'myKey2']\n  },\n  proxy: {\n    global: 'http://proxy.example.com',\n    fetch: 'http://fetch-proxy.example.com',\n    http: 'http://http-proxy.example.com',\n    https: 'http://https-proxy.example.com',\n    koa: true\n  },\n  cron: {\n    enabled: true,\n    tasks: {}\n  },\n  dirs: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Admin Routes in Strapi Plugin\nDESCRIPTION: Defines a custom admin route for a Strapi plugin that will be accessible from the admin panel. The route is configured with GET method, a specific path, and connects to a controller handler.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/pass-data-from-server-to-admin.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'pass-data': {\n    type: 'admin',\n    routes: [\n      {\n        method: 'GET',\n        path: '/pass-data',\n        handler: 'myPluginContentType.index',\n        config: {\n          policies: [],\n          auth: false,\n        },\n      },\n    ]\n  }\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Middleware for Cloudinary in TypeScript\nDESCRIPTION: TypeScript configuration for the security middleware to support Cloudinary uploads. Updates the Content Security Policy to allow images and media from Cloudinary domains.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\", \n            'data:', \n            'blob:', \n            'market-assets.strapi.io', \n            'res.cloudinary.com'\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'res.cloudinary.com',\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Migrating useAPIErrorHandler Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useAPIErrorHandler hook which has been moved from @strapi/helper-plugin to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useAPIErrorHandler } from '@strapi/helper-plugin';\n\n// After\nimport { useAPIErrorHandler } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information from Discord API in Strapi\nDESCRIPTION: Uses the configured Purest object to make an authenticated request to Discord's user endpoint. Retrieves user information such as username, discriminator, and email, then passes it to the callback function for Strapi authentication.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ndiscord.query().get('users/@me').auth(access_token).request((err, res, body) => {\n  if (err) {\n    callback(err);\n  } else {\n    // Combine username and discriminator because discord username is not unique\n    const username = `${body.username}#${body.discriminator}`;\n    callback(null, {\n      username,\n      email: body.email\n    });\n  }\n});\nbreak;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data with Custom Filename (npm)\nDESCRIPTION: This command exports Strapi data with a custom filename using npm. The '--file' option is used to specify the name of the export file without including a file extension.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi export -- --file my-strapi-export\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Suffix Shortening Rules in Markdown\nDESCRIPTION: This snippet presents a markdown table showing the mapping between full suffix names and their shortened versions used in Strapi v5 for database identifiers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/database-identifiers-shortened.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Suffix                 | Short version |\n| ---------------------- | ------------- |\n| `component_type_index` | `cmpix`       |\n| `component`            | `cmp`         |\n| `components`           | `cmps`        |\n| `entity_fk`            | `etfk`        |\n| `field_index`          | `flix`        |\n| `fk`                   | `fk`          |\n| `id_column_index`      | `idix`        |\n| `index`                | `idx`         |\n| `inv_fk`               | `ifk`         |\n| `links`                | `lnk`         |\n| `morphs`               | `mph`         |\n| `order_fk`             | `ofk`         |\n| `order_index`          | `oidx`        |\n| `order_inv_fk`         | `oifk`        |\n| `order`                | `ord`         |\n| `primary`              | `pk`          |\n| `unique`               | `uq`         |\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Settings from Strapi Store\nDESCRIPTION: Example of how to retrieve configuration settings from Strapi's store. This approach is used for multi-server friendly configurations, specifying environment, type, plugin name, and the key to retrieve.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// strapi.store(object).get(object);\n// create reusable plugin store variable\nconst pluginStore = strapi.store({\n  environment: strapi.config.environment,\n  type: 'plugin',\n  name: 'users-permissions',\n});\nawait pluginStore.get({ key: 'grant' });\n```\n\n----------------------------------------\n\nTITLE: Update File Information - Node.js Implementation\nDESCRIPTION: JavaScript code using node-fetch to update file metadata through Strapi's upload API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FormData } from 'formdata-node';\nimport fetch from 'node-fetch';\n\nconst fileId = 50;\nconst newFileData = {\n  alternativeText: 'My new alternative text for this image!',\n};\n\nconst form = new FormData();\n\nform.append('fileInfo', JSON.stringify(newFileData));\n\nconst response = await fetch(`http://localhost:1337/api/upload?id=${fileId}`, {\n  method: 'post',\n  body: form,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating NoPermissions Component Usage in React/TypeScript\nDESCRIPTION: Demonstrates how to migrate from the deprecated NoPermissions component to using the Page component from @strapi/strapi/admin. The new approach involves using Page.NoPermissions instead of the standalone NoPermissions component.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { NoPermissions } from '@strapi/helper-plugin';\n\nconst MyPage = () => {\n  // ...\n\n  if (!canRead) {\n    return <NoPermissions />;\n  }\n\n  // ...\n};\n\n// After\nimport { Page } from '@strapi/strapi/admin';\n\nconst MyPage = () => {\n  // ...\n\n  if (!canRead) {\n    return <Page.NoPermissions />;\n  }\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Middleware for AWS-S3 Provider in Strapi\nDESCRIPTION: Example of custom configuration for the security middleware when using the AWS-S3 provider in Strapi. It sets Content Security Policy directives to allow connections and resources from specific sources.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'yourBucketName.s3.yourRegion.amazonaws.com',\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'yourBucketName.s3.yourRegion.amazonaws.com',\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'yourBucketName.s3.yourRegion.amazonaws.com',\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'yourBucketName.s3.yourRegion.amazonaws.com',\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Only Project Configuration using Strapi CLI and Yarn\nDESCRIPTION: Example of using the '--only' flag to import only the project configuration with Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --only config\n```\n\n----------------------------------------\n\nTITLE: Migrating useFetchClient Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useFetchClient hook which has been moved from @strapi/helper-plugin to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useFetchClient } from '@strapi/helper-plugin';\n\n// After\nimport { useFetchClient } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Configuring Transfer Token Salt in JavaScript\nDESCRIPTION: Configuration for the transfer token salt in the admin.js file. This salt is required for the Data Management feature to properly generate transfer tokens.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/data-management.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // …\n  transfer: { \n    token: { \n      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),\n    } \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering with $and Logical Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $and logical operator to combine multiple conditions that must all be true. The query retrieves articles with a specific title and creation date after a certain timestamp.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    $and: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Response for Fetching All Documents in a Specific Locale\nDESCRIPTION: This JSON response shows the structure of the data returned when querying for all restaurant documents in the French locale. It includes the documentId, name, and locale for each restaurant.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"restaurants\": [\n      {\n        \"documentId\": \"a1b2c3d4e5d6f7g8h9i0jkl\",\n        \"name\": \"Restaurant Biscotte\",\n        \"locale\": \"fr\"\n      },\n      {\n        \"documentId\": \"m9n8o7p6q5r4s3t2u1v0wxyz\",\n        \"name\": \"Pizzeria Arrivederci\",\n        \"locale\": \"fr\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Email Provider with npm\nDESCRIPTION: Installs the Sendgrid provider for Strapi's Email feature using npm.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @strapi/provider-email-sendgrid --save\n```\n\n----------------------------------------\n\nTITLE: Updating Import Structure in Strapi Design System v2\nDESCRIPTION: Demonstrates how to modify import statements from direct component paths to root imports when upgrading from Strapi Design System v1 to v2.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/design-system.md#2025-04-09_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { Combobox } from '@strapi/design-system/Combobox';\n+ import { Combobox } from '@strapi/design-system';\n```\n\n----------------------------------------\n\nTITLE: Basic Server Configuration Export\nDESCRIPTION: Simple configuration export defining server host settings in both JavaScript and TypeScript formats.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-configuration-values.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  host: '0.0.0.0',\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  host: '0.0.0.0',\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Query Parameters Changes\nDESCRIPTION: Demonstrates the changes in query parameter conversion between Strapi v4 and Strapi 5, showing the replacement of convertQueryParams with strapi service.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-utils-refactored.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Strapi v4\nimport { convertQueryParams } from '@strapi/utils';\n\nconvertQueryParams.convertSortQueryParams(...); // now private function to simplify the api\nconvertQueryParams.convertStartQueryParams(...); // now private function to simplify the api\nconvertQueryParams.convertLimitQueryParams(...); // now private function to simplify the api\nconvertQueryParams.convertPopulateQueryParams(...); // now private function to simplify the api\nconvertQueryParams.convertFiltersQueryParams(...); // now private function to simplify the api\nconvertQueryParams.convertFieldsQueryParams(...); // now private function to simplify the api\nconvertQueryParams.convertPublicationStateParams(...); // now private function to simplify the api\n\nconvertQueryParams.transformParamsToQuery(...); // becomes the example below\n\n// Strapi 5 \n// Those utils required the strapi app context, so we decided to expose a strapi service for it\nstrapi.get('query-params').transform();\n```\n\n----------------------------------------\n\nTITLE: Importing Only Project Configuration using Strapi CLI and NPM\nDESCRIPTION: Example of using the '--only' flag to import only the project configuration with NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --only config\n```\n\n----------------------------------------\n\nTITLE: Migrating useFilter Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useFilter hook which has been moved from @strapi/helper-plugin to @strapi/design-system package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useFilter } from '@strapi/helper-plugin';\n\n// After\nimport { useFilter } from '@strapi/design-system';\n```\n\n----------------------------------------\n\nTITLE: Extending Plugin Translations in TypeScript\nDESCRIPTION: TypeScript version of overriding plugin-specific translations by prefixing keys with the plugin name in the app.ts configuration file. The example translates the content-type-builder plugin name to French.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  config: {\n    locales: [\"fr\"],\n    translations: {\n      fr: {\n        \"Auth.form.email.label\": \"test\",\n        // Translate a plugin's key/value pair by adding the plugin's name as a prefix\n        // In this case, we translate the \"plugin.name\" key of plugin \"content-type-builder\"\n        \"content-type-builder.plugin.name\": \"Constructeur de Type-Contenu\",\n      },\n    },\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Plugin with Yarn\nDESCRIPTION: Command to install the GraphQL plugin for Strapi using Yarn package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @strapi/plugin-graphql\n```\n\n----------------------------------------\n\nTITLE: Migrating ThemeProvider to DesignSystemProvider\nDESCRIPTION: Shows how to replace the deprecated ThemeProvider with the new DesignSystemProvider component in Strapi Design System v2.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/design-system.md#2025-04-09_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { ThemeProvider } from '@strapi/design-system';\n+ import { DesignSystemProvider } from '@strapi/design-system';\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Request Timeout in TypeScript\nDESCRIPTION: Adjusts the request timeout duration in the bootstrap function to allow for longer upload times (30 minutes) for large files in a Strapi TypeScript application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\\n\\n  //...\\n\\n  bootstrap({ strapi }) {\\n    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):\\n    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for Preview\nDESCRIPTION: Configuration to control which domains can access previews in Strapi, typically set to the frontend application URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// …\npreview: {\n  enabled: true,\n  config: {\n    allowedOrigins: env(\"CLIENT_URL\"),  // Usually your frontend application URL\n    // …\n  }\n}\n// …\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Middleware in Strapi\nDESCRIPTION: Configuration example for the query parser middleware with custom array limits and object depth settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::query',\n    config: {\n      arrayLimit: 50,\n      depth: 10,\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::query',\n    config: {\n      arrayLimit: 50,\n      depth: 10,\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Remote Data Transfer with Environment Variables in Strapi\nDESCRIPTION: This command demonstrates how to disable remote data transfer in Strapi using the STRAPI_DISABLE_REMOTE_DATA_TRANSFER environment variable when starting the application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSTRAPI_DISABLE_REMOTE_DATA_TRANSFER=true yarn start\n```\n\n----------------------------------------\n\nTITLE: Migrating useQueryParams Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useQueryParams hook which has been moved from @strapi/helper-plugin to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useQueryParams } from '@strapi/helper-plugin';\n\n// After\nimport { useQueryParams } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Updating a Dynamic Zone with Entity Service API in JavaScript\nDESCRIPTION: This snippet demonstrates how to update a dynamic zone when updating an entry. Components with IDs are updated, while those without IDs result in the old components being deleted and new ones created.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/components-dynamic-zones.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.update('api::article.article', 1, {\n  data: {\n    myDynamicZone: [\n      {\n        // will update\n        id: 2,\n        __component: 'compo.type',\n        foo: 'bar',\n      },\n      {\n        // will add a new & delete old ones\n        __component: 'compo.type2',\n        foo: 'bar2',\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure Config Files in Markdown\nDESCRIPTION: This snippet uses a custom React component to display the project structure configuration files. It's part of the documentation to visually represent the config folder structure.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ProjectStructureConfigFiles />\n```\n\n----------------------------------------\n\nTITLE: Importing Content-Type Folder in content-types/index.js (JavaScript)\nDESCRIPTION: Code snippet demonstrating how to import a specific content-type folder in the content-types/index.js file of a Strapi plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nmodule.exports = {\n  // In the line below, replace my-plugin-content-type\n  // with the actual name and folder path of your content type\n  \"my-plugin-content-type\": require('./my-plugin-content-type'),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a New Strapi Project for Transfer Testing\nDESCRIPTION: Command to create a new Strapi project using the quickstart option, which will be used as the source instance for testing the transfer command.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi-app@latest <project-name> --quickstart\n```\n\n----------------------------------------\n\nTITLE: Migrating useRBAC Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useRBAC hook which has been moved from @strapi/helper-plugin to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useRBAC } from '@strapi/helper-plugin';\n\n// After\nimport { useRBAC } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Using the useCMEditViewDataManager React Hook\nDESCRIPTION: Example of a basic component using the useCMEditViewDataManager hook to access data from the Content Manager's Edit View.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { useCMEditViewDataManager } from '@strapi/helper-plugin';\n\nconst MyCompo = () => {\n  const {\n    createActionAllowedFields: [], // Array of fields that the user is allowed to edit\n    formErrors: {}, // Object errors\n    readActionAllowedFields: [], // Array of field that the user is allowed to edit\n    slug: 'api::address.address', // Slug of the content-type\n    updateActionAllowedFields: [],\n    allLayoutData: {\n      components: {}, // components layout\n      contentType: {}, // content-type layout\n    },\n    initialData: {},\n    isCreatingEntry: true,\n    isSingleType: true,\n    status: 'resolved',\n    layout: {}, // Current content-type layout\n    hasDraftAndPublish: true,\n    modifiedData: {},\n    onPublish: () => {},\n    onUnpublish: () => {},\n    addComponentToDynamicZone: () => {},\n    addNonRepeatableComponentToField: () => {},\n    addRelation: () => {},\n    addRepeatableComponentToField: () => {},\n    moveComponentDown: () => {},\n    moveComponentField: () => {},\n    moveComponentUp: () => {},\n    moveRelation: () => {},\n    onChange: () => {},\n    onRemoveRelation: () => {},\n    removeComponentFromDynamicZone: () => {},\n    removeComponentFromField: () => {},\n    removeRepeatableField: () => {},\n  } = useCMEditViewDataManager()\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Media Fields in Flat GraphQL Query\nDESCRIPTION: Example of a flat GraphQL query to fetch multiple media fields (images) for restaurants.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    images_connection {\n      nodes {\n        documentId\n        url\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Field Component Structure for Form Elements\nDESCRIPTION: Illustrates the change to a compositional Field API that provides better accessibility and structure for form elements in Strapi Design System v2.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/design-system.md#2025-04-09_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- return <SingleSelect label={label} error={error} required={required} value={value} onChange={handleChange} />;\n+ return (\n+   <Field.Root error={error} required={required} name={name}>\n+     <Field.Label>{label}</Field.Label>\n+     <SingleSelect value={value} onChange={handleChange} />\n+     <Field.Error />\n+     <Field.Hint />\n+   </Field.Root>\n+ );\n```\n\n----------------------------------------\n\nTITLE: Populating Specific Relations\nDESCRIPTION: Example of populating only specific named relations using an array in the populate parameter\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  populate: [\"headerImage\"],\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Security Middleware Implementation\nDESCRIPTION: Custom middleware implementation for handling GraphQL-specific security headers. Sets Content-Security-Policy header only for /graphql endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config, { strapi }) => {\n  return async (ctx, next) => {\n    if (ctx.request.path === '/graphql') {\n      ctx.set('Content-Security-Policy', \"default-src 'self'; script-src 'self' 'unsafe-inline' cdn.jsdelivr.net apollo-server-landing-page.cdn.apollographql.com; connect-src 'self' https:; img-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; media-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; frame-src sandbox.embed.apollographql.com; manifest-src apollo-server-landing-page.cdn.apollographql.com;\");\n    }\n    await next();\n  };\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (config, { strapi }) => {\n  return async (ctx, next) => {\n    if (ctx.request.path === '/graphql') {\n      ctx.set('Content-Security-Policy', \"default-src 'self'; script-src 'self' 'unsafe-inline' cdn.jsdelivr.net apollo-server-landing-page.cdn.apollographql.com; connect-src 'self' https:; img-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; media-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; frame-src sandbox.embed.apollographql.com; manifest-src apollo-server-landing-page.cdn.apollographql.com;\");\n    }\n    await next();\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Populating Specific Attributes in Strapi Query Engine API\nDESCRIPTION: This example shows how to populate specific attributes by passing an array of attribute names to the populate option in a findMany() query.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/populating.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  populate: ['componentA', 'relationA'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Origin Function in Strapi\nDESCRIPTION: Example of configuring CORS middleware with a function parameter for origin checking in Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::cors',\n    config: {\n      origin: (ctx): string | string[] => {\n        const origin = ctx.request.header.origin;\n        if (origin === 'http://localhost:3000') {\n          return origin; // The returns will be part of the Access-Control-Allow-Origin header\n        }\n        \n        return ''; // Fail cors check\n      }\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Strapi with Yarn\nDESCRIPTION: Command to build and start the Strapi application using Yarn, necessary before creating a transfer token in the target instance.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn build && yarn start\n```\n\n----------------------------------------\n\nTITLE: Implementing prefixPluginTranslations Utility in TSX\nDESCRIPTION: Example showing how to implement the prefixPluginTranslations utility which has been removed from @strapi/helper-plugin and needs to be implemented in your plugin if needed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\ntype TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (\n  trad: TradOptions,\n  pluginId: string\n): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Restaurant document with GraphQL mutation\nDESCRIPTION: GraphQL mutation for deleting a Restaurant document by its documentId. This example shows the basic structure of a delete mutation in Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeleteRestaurant {\n  deleteRestaurant(documentId: \"a1b2c3d4e5d6f7g8h9i0jkl\") {\n    documentId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with Entity Service API in JavaScript\nDESCRIPTION: This code demonstrates how to create a component while creating a new entry using Strapi's Entity Service API. The component data is provided in the data object with the component name as the key.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/components-dynamic-zones.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.create('api::article.article', {\n  data: {\n    myComponent: {\n      foo: 'bar',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Relations in Relay-style GraphQL Query\nDESCRIPTION: Example of a Relay-style GraphQL query to fetch restaurants and their associated categories with pagination info.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants_connection {\n    nodes {\n      documentId\n      name\n      description\n      # categories is a many-to-many relation\n      categories_connection {\n        nodes {\n          documentId\n          name\n        } \n      }\n    }\n    pageInfo {\n      page\n      pageCount\n      pageSize\n      total\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many and Many-to-One Bidirectional Relations in Strapi Schema\nDESCRIPTION: Example of configuring a bidirectional one-to-many relationship in Strapi, where a person can own many plants but a plant is owned by only one person. Includes configuration for both sides of the relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  owner: {\n    type: 'relation',\n    relation: 'manyToOne',\n    target: 'api::person.person',\n    inversedBy: 'plants',\n  },\n},\n// …\n```\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  plants: {\n    type: 'relation',\n    relation: 'oneToMany',\n    target: 'api::plant.plant',\n    mappedBy: 'owner',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Migrating Grid Component to Compositional API\nDESCRIPTION: Shows how to update Grid components to use the new compositional pattern with Grid.Root and Grid.Item in Strapi Design System v2.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/design-system.md#2025-04-09_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { Grid, GridItem } from '@strapi/design-system';\n+ import { Grid } from '@strapi/design-system';\n\n- <Grid gridCols={4}>\n-   <GridItem col={2}>1</GridItem>\n-   <GridItem col={2}>2</GridItem>\n- </Grid>\n+ <Grid.Root gridCols={4}>\n+   <Grid.Item>1</Grid.Item>\n+   <Grid.Item>2</Grid.Item>\n+ </Grid.Root>\n```\n\n----------------------------------------\n\nTITLE: Receiving REST API Errors in JSON\nDESCRIPTION: Example of the error response format when receiving errors from Strapi's REST API. It includes status, name, message, and details of the error.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"error\": {\n    \"status\": \"\", // HTTP status\n    \"name\": \"\", // Strapi error name ('ApplicationError' or 'ValidationError')\n    \"message\": \"\", // A human readable error message\n    \"details\": {\n      // error info specific to the error type\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting i18n Relations in Strapi\nDESCRIPTION: Example of connecting relations with internationalization enabled, showing how to link categories to articles with different locales.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndata: {\n    categories: {\n      connect: [\n        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', locale: 'en' },\n        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm', locale: 'fr' },\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Middleware in Strapi\nDESCRIPTION: Example configuration for the body middleware in Strapi, demonstrating how to set custom limits and encoding options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::body',\n    config: {\n      jsonLimit: '3mb',\n      formLimit: '10mb',\n      textLimit: '256kb',\n      encoding: 'gbk',\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::body',\n    config: {\n      jsonLimit: '3mb',\n      formLimit: '10mb',\n      textLimit: '256kb',\n      encoding: 'gbk',\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Validate and Sanitize Content API Changes\nDESCRIPTION: Shows the migration of validate and sanitize functions from utility imports to strapi.contentAPI methods in Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-utils-refactored.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Strapi v4\nimport { validate, sanitize } from '@strapi/utils';\n\nvalidate.contentAPI.xxx();\nsanitize.contentAPI.xxx();\n\n// Strapi 5\n// Those methods require the strapi app context\nstrapi.contentAPI.sanitize.xxx();\nstrapi.contentAPI.validate.xxx();\n```\n\n----------------------------------------\n\nTITLE: Updating an Entry with Entity Service API in JavaScript\nDESCRIPTION: Uses the update() method to partially update an article entry by ID. The example updates only the title field while leaving other fields unchanged.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/crud.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.entityService.update('api::article.article', 1, {\n  data: {\n    title: 'xxx',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating an existing Restaurant with GraphQL mutation\nDESCRIPTION: GraphQL mutation for updating an existing Restaurant document by its documentId. This example changes the name of a restaurant and returns the documentId and updated name.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateRestaurant($documentId: ID!, $data: RestaurantInput!) {\n  updateRestaurant(\n    documentId: \"bf97tfdumkcc8ptahkng4puo\",\n    data: { name: \"Pizzeria Amore\" }\n  ) {\n    documentId\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server v4 in Strapi 5 JavaScript\nDESCRIPTION: Example of updating Apollo Server configuration in Strapi 5. This snippet demonstrates setting CSRF prevention and other options specific to Apollo Server v4.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  graphql: {\n    config: {\n      apolloServer: {\n        csrfPrevention: false,\n        // Other Apollo Server v4 specific options\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Enabling Apollo Sandbox in JavaScript\nDESCRIPTION: Function to dynamically enable Apollo Sandbox based on the environment in JavaScript. It enables the sandbox in non-production environments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => {\n  graphql: {\n    config: {\n      endpoint: '/graphql',\n      shadowCRUD: true,\n      landingPage: (strapi) => {\n        if (env(\"NODE_ENV\") !== \"production\") {\n          return true;\n        } else {\n          return false;\n        }\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CRON Job with Start and End Times in JavaScript\nDESCRIPTION: Demonstrates how to configure a CRON job in JavaScript with specific start and end times. This job runs continuously between the defined time bounds.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  myJob: {\n    task: ({ strapi }) => {\n      /* Add your own logic here */\n    },\n    options: {\n      rule: \"* * * * * *\",\n      // start 10 seconds from now\n      start: new Date(Date.now() + 10000),\n      // end 20 seconds from now\n      end: new Date(Date.now() + 20000),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using ngrok to serve Strapi backend for Twitter authentication\nDESCRIPTION: Command to use ngrok for exposing the local Strapi backend on port 1337, which is necessary because Twitter doesn't accept localhost URLs for authentication callbacks.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/twitter.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 1337\n```\n\n----------------------------------------\n\nTITLE: Configuring PoweredBy Middleware in Strapi\nDESCRIPTION: Configuration for the PoweredBy middleware that customizes the X-Powered-By response header value.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/middlewares.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::poweredBy',\n    config: {\n      poweredBy: 'Some Awesome Company <example.com>'\n    },\n  },\n  // ...\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  // ...\n  {\n    name: 'strapi::poweredBy',\n    config: {\n      poweredBy: 'Some Awesome Company <example.com>'\n    },\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Running Strapi Upgrade Tool\nDESCRIPTION: Command to execute the major version upgrade tool for Strapi, which handles dependency updates and codemods for breaking changes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/step-by-step.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade major\n```\n\n----------------------------------------\n\nTITLE: Discarding Draft for Default Locale in Strapi (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the discardDraft() method of Strapi's Document Service API to discard draft data and override it with the published version for the default locale of a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documents.discardDraft({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm', \n});\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Bidirectional Relation in Strapi Schema\nDESCRIPTION: Examples of configuring a bidirectional one-to-one relationship in Strapi, where both article and category models reference each other. Includes configuration for both sides of the relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  category: {\n    type: 'relation',\n    relation: 'oneToOne',\n    target: 'category',\n    inversedBy: 'article',\n  },\n},\n// …\n```\n\nLANGUAGE: json\nCODE:\n```\n// …\nattributes: {\n  article: {\n    type: 'relation',\n    relation: 'oneToOne',\n    target: 'article',\n    mappedBy: 'category',\n  },\n},\n// …\n```\n\n----------------------------------------\n\nTITLE: Defining Redirects Structure in JavaScript\nDESCRIPTION: Demonstrates the expected format of the redirects.js file that the script processes. It exports an array of objects, each containing 'from' and 'to' properties for URL redirection.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/redirects-organizer/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  {\n    \"from\": \"/old-url\",\n    \"to\": \"/new-url\"\n  },\n  // ... more redirections\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Server in JavaScript - Default Environment\nDESCRIPTION: Default server configuration for development environment in JavaScript defining the host address as 127.0.0.1.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/environment.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  host: '127.0.0.1',\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Patch Version in Strapi (Bash)\nDESCRIPTION: Command to upgrade a Strapi project to the latest patch version within the current minor version.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade patch\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin UI Logos in TypeScript\nDESCRIPTION: TypeScript version of customizing the login page and main navigation logos by importing custom image files and setting them in the app.ts configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport AuthLogo from \"./extensions/my-auth-logo.png\";\nimport MenuLogo from \"./extensions/my-menu-logo.png\";\n\nexport default {\n  config: {\n    // … other configuration properties \n    auth: { // Replace the Strapi logo in auth (login) views\n      logo: AuthLogo,\n    },\n    menu: { // Replace the Strapi logo in the main navigation\n      logo: MenuLogo,\n    },\n    // … other configuration properties \n\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fetch All Documents by Locale\nDESCRIPTION: Query to fetch all restaurant documents for a specific locale using the locale parameter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  restaurants(locale: \"fr\") {\n    documentId\n    name\n    locale\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"restaurants\": [\n      {\n        \"documentId\": \"a1b2c3d4e5d6f7g8h9i0jkl\",\n        \"name\": \"Restaurant Biscotte\",\n        \"locale\": \"fr\"\n      },\n      {\n        \"documentId\": \"m9n8o7p6q5r4s3t2u1v0wxyz\",\n        \"name\": \"Pizzeria Arrivederci\",\n        \"locale\": \"fr\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL v4 Compatibility Mode in Configuration\nDESCRIPTION: Code example showing how to enable v4 compatibility mode in the GraphQL plugin configuration to support gradual migration to the new API format.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated.md#2025-04-09_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    data {\n      id\n      attributes {\n        title\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n        images {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n        xToOneRelation {\n          data {\n            id\n            attributes {\n            \n            }\n        }\n        xToManyRelation {\n          data {\n            id\n            attributes {\n              field\n            }\n          }\n        }\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n      }\n    }\n  }\t\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Strapi Plugin\nDESCRIPTION: Shows how to set up routes for a Strapi plugin, including examples for Content API routes only and combined Content API and admin routes. Demonstrates the structure for both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/index.js\n\nconst routes = require('./routes');\n\nmodule.exports = () => ({\n  routes,\n  type: 'content-api', // can also be 'admin' depending on the type of route\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// /src/plugins/my-plugin/server/routes/index.js\n\nmodule.exports = [\n  {\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['policyName'],\n    },\n  },\n];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/index.ts\n\nconst routes = require('./routes');\n\nexport default {\n  routes,\n  type: 'content-api', // can also be 'admin' depending on the type of route\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/routes/index.ts\n\nexport default [\n  {\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['policyName'],\n    },\n  },\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ./src/plugins/my-plugin/server/routes/index.js\n\nmodule.exports = {\n  admin: require('./admin'),\n  'content-api': require('./content-api'),\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ./src/plugins/my-plugin/server/routes/admin/index.js\n\nmodule.exports = {\n  type: 'admin',\n  routes: [{\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['policyName'],\n    },\n  }],\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ./src/plugins/my-plugin/server/routes/content-api/index.js\n\nmodule.exports = {\n  type: 'content-api',\n  routes: [{\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['differentPolicyName'],\n    },\n  }],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/routes/index.ts\n\nexport default {\n  admin: require('./admin'),\n  'content-api': require('./content-api'),\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /src/plugins/my-plugin/server/routes/admin/index.ts\n\nexport default {\n  type: 'admin',\n  routes: [{\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['policyName'],\n    },\n  }],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ./src/plugins/my-plugin/server/routes/content-api/index.ts\n\nexport default {\n  type: 'content-api',\n  routes: [{\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['differentPolicyName'],\n    },\n  }],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider in Strapi\nDESCRIPTION: Steps to configure the Reddit provider in Strapi's User & Permissions settings. This includes enabling the provider, setting the Client ID, Client Secret, and redirect URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/reddit.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Visit the User & Permissions provider settings page at <ExternalLink to=\"http://localhost:1337/admin/settings/users-permissions/providers\" text=\"http://localhost:1337/admin/settings/users-permissions/providers\"/>\n2. Click on the **Reddit** provider\n3. Fill the information (replace with your own client ID and secret):\n   - **Enable**: `ON`\n   - **Client ID**: hmxSBOit0SCjSQ\n   - **Client Secret**: gwR9hCjK_PMYVYNGeDLS4WLB8g7xqg\n   - **The redirect URL to your front-end app**: `http://localhost:3000/connect/reddit/redirect`\n```\n\n----------------------------------------\n\nTITLE: Configuring Server in TypeScript - Production Environment\nDESCRIPTION: Production-specific server configuration in TypeScript that uses the HOST environment variable with a fallback to 0.0.0.0 if not defined.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/environment.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Version in Strapi (Bash)\nDESCRIPTION: Command to upgrade a Strapi project to the latest available version regardless of current version.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade latest\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Admin Panel with NPM\nDESCRIPTION: Command to rebuild the Strapi admin panel and restart the server after enabling a future flag using NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/features.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Discarding Draft for Locale Version\nDESCRIPTION: Example of discarding draft data for a specific locale version of a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').discardDraft({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: 'fr'\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fetch Single Document by Locale\nDESCRIPTION: Query to fetch a specific restaurant document by ID and locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nquery Restaurant($documentId: ID!, $locale: I18NLocaleCode) {\n  restaurant(documentId: \"a1b2c3d4e5d6f7g8h9i0jkl\", locale: \"fr\") {\n    documentId\n    name\n    description\n    locale\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"restaurant\": {\n      \"documentId\": \"lviw819d5htwvga8s3kovdij\",\n      \"name\": \"Restaurant Biscotte\",\n      \"description\": \"Bienvenue au restaurant Biscotte!\",\n      \"locale\": \"fr\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Data from Remote Strapi Instance with Yarn\nDESCRIPTION: Command to retrieve data from a remote Strapi instance to a local destination using Yarn, requiring the full admin URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi transfer --from remoteURL\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in Strapi v4\nDESCRIPTION: Example showing how to access a custom configuration property in Strapi v4 using the config.get() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strict-requirements-config-files.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.config.get('my-custom-config.someProperty')\n```\n\n----------------------------------------\n\nTITLE: Vercel Redirect Format Example\nDESCRIPTION: Sample structure showing the format for defining redirects in Vercel using source/destination properties.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/remove-redirects-vercel-duplicates/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"/old-path\",\n  \"destination\": \"/new-path\",\n  \"permanent\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Strapi v4 Factory Usage\nDESCRIPTION: Demonstrates various ways to import and use Strapi factories in version 4, including default import, named imports, and require syntax.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-imports.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport strapiDefault from '@strapi/strapi';\n// or\nimport { factories } from '@strapi/strapi';\n// or\nconst { factories } = require('@strapi/strapi');\n// or\nconst { createCoreService } = require('@strapi/strapi').factories;\n// or\nconst strapi = require('@strapi/strapi');\n\nstrapiDefault.factories.createCoreService(); // this is not possible anymore in v5\nstrapi.factories.createCoreService();\nfactories.createCoreService();\ncreateCoreService();\n```\n\n----------------------------------------\n\nTITLE: Starting Strapi with Different Environment Configurations\nDESCRIPTION: Command examples showing how to start Strapi with different environment configurations, demonstrating how environment variables affect the server host configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/environment.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn start                                   # uses host 127.0.0.1\nNODE_ENV=production yarn start               # uses host defined in .env. If not defined, uses 0.0.0.0\nHOST=10.0.0.1 NODE_ENV=production yarn start # uses host 10.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Displaying General Help for Strapi Upgrade Tool in Shell\nDESCRIPTION: This snippet shows the output of running the Strapi upgrade tool with the help option. It lists available commands and general options for the upgrade process.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ npx @strapi/upgrade -h\nUsage: upgrade <command> [options]\n\nOptions:\n -V, --version    output the version number\n -h, --help       Print command line options\n\nCommands:\n major [options]  Upgrade to the next available major version of Strapi\n minor [options]  Upgrade to ...\n patch [options]  Upgrade to ...\n help [command]   Print options for a specific command\n```\n\n----------------------------------------\n\nTITLE: Sorting by name in ascending order with GraphQL\nDESCRIPTION: GraphQL query that fetches restaurants sorted by name in ascending order (the default). This demonstrates basic sorting functionality.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants(sort: \"name\") {\n    documentId\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Plugin with NPM in Strapi\nDESCRIPTION: Command to install the GraphQL plugin using NPM package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @strapi/plugin-graphql\n```\n\n----------------------------------------\n\nTITLE: Updating Server Configuration in JavaScript for Strapi 5\nDESCRIPTION: This snippet shows how to update the /config/server.js file in Strapi 5 to handle configuration options previously controlled by environment variables. It includes settings for disabling remote data transfers, update notifications, and startup messages.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // … other configuration options\n  transfer: {\n    remote: {\n      enabled: false, // disable remote data transfers instead of STRAPI_DISABLE_REMOTE_DATA_TRANSFER\n    },\n  },\n  logger: {\n    updates: {\n      enabled: false, // disable update notification logging instead of STRAPI_DISABLE_UPDATE_NOTIFICATION\n    },\n    startup: {\n      enabled: false, // disable startup message instead of STRAPI_HIDE_STARTUP_MESSAGE\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing bootstrap() Lifecycle Function in TypeScript\nDESCRIPTION: Example of implementing the bootstrap() lifecycle function for a Strapi plugin in TypeScript. This function is called right after the plugin has registered.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Core } from '@strapi/strapi';\n\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\n  // execute some bootstrap code\n};\n\nexport default bootstrap;\n```\n\n----------------------------------------\n\nTITLE: Exporting Only Entities and Relations in Strapi (npm)\nDESCRIPTION: This command exports only the content (entities and relations) from Strapi using npm. The '--only' option with 'content' value is used to specify which data types to include in the export.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi export -- --only content\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Provider in Strapi's Users & Permissions Plugin\nDESCRIPTION: This code demonstrates how to use the register lifecycle function to create a custom authentication provider for Strapi's Users & Permissions plugin. It configures the provider's OAuth settings and defines the authentication callback function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    strapi\n      .plugin(\"users-permissions\")\n      .service(\"providers-registry\")\n      .add(\"example-provider-name\", {\n        icon: \"\",\n        enabled: true,\n        grantConfig: {\n          key: \"\",\n          secret: \"\",\n          callback: `${strapi.config.server.url}/auth/example-provider-name/callback`,\n          scope: [\"email\"],\n          authorize_url: \"https://awesome.com/authorize\",\n          access_url: \"https://awesome.com/token\",\n          oauth: 2,\n        },\n        async authCallback({ accessToken, providers, purest }) {\n          // use whatever you want here to get the user info\n          return {\n            username: \"test\",\n            email: \"test\",\n          };\n        },\n      });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL SSL Configuration Workaround in Strapi\nDESCRIPTION: Alternative configuration for PostgreSQL that disables SSL by setting it as a boolean instead of an object to work around a known issue with SSL support for the server.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'postgres',\n    connection: {\n      ...\n      ssl: env('DATABASE_SSL', false)\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Help for Strapi Major Upgrade in Shell\nDESCRIPTION: This snippet demonstrates the help output for the 'major' upgrade command. It details the specific options available when upgrading to the next major version of Strapi, including project path, dry run, debug mode, and silent options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ npx @strapi/upgrade major -h\nUsage: upgrade major [options]\n\nUpgrade to the next available major version of Strapi\n\nOptions:\n  -p, --project-path <project-path>  Path to the Strapi project\n  -n, --dry                          Simulate the upgrade without updating any files (default: false)\n  -d, --debug                        Get more logs in debug mode (default: false)\n  -s, --silent                       Don't log anything (default: false)\n  -h, --help                         Display help for command\n  -y, --yes                          Automatically answer yes to every prompt\n```\n\n----------------------------------------\n\nTITLE: Deleting Document Locale Versions\nDESCRIPTION: Examples of deleting specific locale versions or all locale versions of a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').delete({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: '*',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudinary Provider in TypeScript\nDESCRIPTION: Complete TypeScript configuration for setting up Cloudinary as an upload provider in Strapi Cloud. This example shows how to configure the provider options including cloud name, API key, and secret as environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  upload: {\n    config: {\n      provider: 'cloudinary',\n      providerOptions: {\n        cloud_name: env('CLOUDINARY_NAME'),\n        api_key: env('CLOUDINARY_KEY'),\n        api_secret: env('CLOUDINARY_SECRET'),\n      },\n      actionOptions: {\n        upload: {},\n        uploadStream: {},\n        delete: {},\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Docusaurus Redirects in JavaScript\nDESCRIPTION: Example structure of redirects.js file showing how to define Docusaurus-style redirects using from/to format.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/remove-redirects-vercel-duplicates/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  {\n    from: '/old-path',\n    to: '/new-path'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL with Client-side SSL CA Verification in Strapi\nDESCRIPTION: Configuration for PostgreSQL with client-side SSL CA certificate verification. Uses the fs module to read and convert the CA certificate file to a string.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'postgres',\n    connection: {\n      ...\n      ssl: {\n        ca: fs.readFileSync(`${__dirname}/path/to/your/ca-certificate.crt`).toString(),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Forced Import with Encryption Key using Strapi CLI and Yarn\nDESCRIPTION: Example of using the '--force' option to bypass prompts and the '--key' option for encrypted files with Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --force --key my-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin UI Logos in JavaScript\nDESCRIPTION: Shows how to customize the login page and main navigation logos by importing custom image files and setting them in the app.js configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport AuthLogo from \"./extensions/my-auth-logo.png\";\nimport MenuLogo from \"./extensions/my-menu-logo.png\";\n\nexport default {\n  config: {\n    // … other configuration properties \n    auth: { // Replace the Strapi logo in auth (login) views\n      logo: AuthLogo,\n    },\n    menu: { // Replace the Strapi logo in the main navigation\n      logo: MenuLogo,\n    },\n    // … other configuration properties \n\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering with Attribute Operators in Strapi Entity Service API\nDESCRIPTION: Shows various attribute operators like $eq, $ne, $in, $lt, $gt, etc., for filtering query results based on specific attribute conditions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/filter.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: {\n      $eq: 'Hello World',\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: 'Hello World',\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: {\n      $eqi: 'HELLO World',\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: {\n      $ne: 'ABCD',\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: {\n      $in: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    rating: {\n      $lt: 10,\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    rating: {\n      $between: [1, 20],\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: {\n      $contains: 'Hello',\n    },\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  filters: {\n    title: {\n      $null: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Strapi v5 Application Initialization\nDESCRIPTION: Shows the updated way to initialize a Strapi application in version 5 using the createStrapi function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-imports.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStrapi } from '@strapi/strapi'; \nconst { createStrapi } = require('@strapi/strapi');\nconst strapi = require('@strapi/strapi');\n\nstrapi.createStrapi();\n```\n\n----------------------------------------\n\nTITLE: Migrating getFetchClient Utility in TSX\nDESCRIPTION: Example showing how to update the import for the getFetchClient utility which has been moved from @strapi/helper-plugin to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { getFetchClient } from '@strapi/helper-plugin';\n\n// After\nimport { getFetchClient } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Implementing bootstrap() Lifecycle Function in JavaScript\nDESCRIPTION: Example of implementing the bootstrap() lifecycle function for a Strapi plugin in JavaScript. This function is called right after the plugin has registered.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst bootstrap = ({ strapi }) => {\n  // execute some bootstrap code\n};\n\nmodule.exports = bootstrap;\n```\n\n----------------------------------------\n\nTITLE: Installing Upload Provider with npm\nDESCRIPTION: Installs the AWS S3 provider for Strapi's Upload (Media Library) feature using npm.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @strapi/provider-upload-aws-s3 --save\n```\n\n----------------------------------------\n\nTITLE: Extending delete() Method for Single Types in Strapi\nDESCRIPTION: Example of extending the delete() method for single types in Strapi. This allows for custom logic to be implemented before and after deleting the single type document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync delete(params) {\n  // some logic here\n  const document = await super.delete(params);\n  // some more logic\n\n  return document;\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Configuration in TypeScript for Strapi\nDESCRIPTION: Example configuration for connecting Strapi to an SQLite database using TypeScript. Uses path.join to create the proper database file path.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nexport default ({ env }) => ({\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: path.join(\n        __dirname,\n        '..',\n        '..',\n        env('DATABASE_FILENAME', path.join('.tmp', 'data.db'))\n      ),\n    },\n    useNullAsDefault: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data with Custom Filename (Yarn)\nDESCRIPTION: This command exports Strapi data with a custom filename using Yarn. The '--file' or '-f' option is used to specify the name of the export file without including a file extension.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi export --file my-strapi-export\n```\n\n----------------------------------------\n\nTITLE: Creating Document with Specific Locale\nDESCRIPTION: Creating a new document draft for a specific locale using the create() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').create({\n  locale: 'es',\n  data: { name: 'Restaurante B' }\n})\n```\n\n----------------------------------------\n\nTITLE: Publishing Document Locale Versions\nDESCRIPTION: Examples of publishing specific or all locale versions of a document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').publish({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  locale: '*'\n});\n```\n\n----------------------------------------\n\nTITLE: Using $null Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $null operator to find records where an attribute is null. This query retrieves articles with null titles.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $null: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Provider in TypeScript\nDESCRIPTION: Complete TypeScript configuration for setting up Amazon S3 as an upload provider in Strapi Cloud. This example includes all required S3 configuration options like access keys, region, bucket, and ACL settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  upload: {\n    config: {\n      provider: 'aws-s3',\n      providerOptions: {\n        baseUrl: env('CDN_URL'),\n        rootPath: env('CDN_ROOT_PATH'),\n        s3Options: {\n          accessKeyId: env('AWS_ACCESS_KEY_ID'),\n          secretAccessKey: env('AWS_ACCESS_SECRET'),\n          region: env('AWS_REGION'),\n          params: {\n            ACL: env('AWS_ACL', 'public-read'),\n            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),\n            Bucket: env('AWS_BUCKET'),\n          },\n        },\n      },\n      actionOptions: {\n        upload: {},\n        uploadStream: {},\n        delete: {},\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Strapi v5 Factory Usage\nDESCRIPTION: Demonstrates the recommended and supported ways to import and use Strapi factories in version 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-imports.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Using the factories\nimport { factories } from '@strapi/strapi';\n// or\nconst { factories } = require('@strapi/strapi');\n// or\nconst { createCoreService } = require('@strapi/strapi').factories;\n// or\nconst strapi = require('@strapi/strapi');\n\nstrapi.factories.createCoreService();\nfactories.createCoreService();\ncreateCoreService();\n\n// The recommended way is\nconst { factories } = require('@strapi/strapi');\nimport { factories } from '@strapi/strapi';\n\nfactories.createCoreService();\n```\n\n----------------------------------------\n\nTITLE: Convert Module to Vercel Format Example\nDESCRIPTION: Command example for converting from module format to Vercel format\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode docusaurus-vercel-converter.js --input=redirects.js --output=vercel.json --mode=to-source\n```\n\n----------------------------------------\n\nTITLE: Development Dockerfile for Strapi with NPM\nDESCRIPTION: Dockerfile configuration for building a non-production Strapi container using Node.js Alpine image and NPM package manager. Sets up the required dependencies and environment for Strapi development.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/docker.md#2025-04-09_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18-alpine3.18\nRUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev nasm bash vips-dev git\nARG NODE_ENV=development\nENV NODE_ENV=${NODE_ENV}\n\nWORKDIR /opt/\nCOPY package.json package-lock.json ./\nRUN npm install -g node-gyp\nRUN npm config set fetch-retry-maxtimeout 600000 -g && npm install\nENV PATH /opt/node_modules/.bin:$PATH\n\nWORKDIR /opt/app\nCOPY . .\nRUN chown -R node:node /opt/app\nUSER node\nRUN [\"npm\", \"run\", \"build\"]\nEXPOSE 1337\nCMD [\"npm\", \"run\", \"develop\"]\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB Environment Variables Configuration\nDESCRIPTION: Environment variable configuration for MySQL or MariaDB database connection in Strapi\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Database\nDATABASE_CLIENT=mysql\nDATABASE_HOST=127.0.0.1\nDATABASE_PORT=3306\nDATABASE_NAME=strapi\nDATABASE_USERNAME=strapi\nDATABASE_PASSWORD=strap1\nDATABASE_SSL=false\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Transfer with NPM\nDESCRIPTION: Command to transfer everything except file assets between Strapi instances using the --exclude option with NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi transfer -- --to https://example.com/admin --exclude files\n```\n\n----------------------------------------\n\nTITLE: Database Migration with Strapi Instance\nDESCRIPTION: Example of a migration file using the Strapi instance instead of Knex directly. The code must be wrapped in strapi.db.transaction() to ensure proper rollback if errors occur.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-migrations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async up() {\n    await strapi.db.transaction(async () => {\n      // Your migration code here\n\n      // Example: creating new entries\n      await strapi.entityService.create('api::article.article', {\n        data: {\n          title: 'My Article',\n        },\n      });\n\n      // Example: custom service method\n      await strapi.service('api::article.article').updateRelatedArticles();\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using the $eq operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter articles by exact title match using the $eq operator, which checks if an attribute equals the provided value.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $eq: 'Hello World',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Methods in Strapi 5\nDESCRIPTION: In Strapi 5, container methods can be accessed directly from the strapi object since Strapi is now a subclass of Container.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-container.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.add(....)\nstrapi.get(...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Panel Component for Strapi Content Manager\nDESCRIPTION: Example of implementing a custom panel component for the Edit View sidebar that displays the current active tab.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';\n\nconst Panel: PanelComponent = ({ \n  activeTab, \n  collectionType, \n  document, \n  documentId, \n  meta, \n  model \n}: PanelComponentProps) => {\n  return {\n    title: 'My Panel',\n    content: <p>I'm on {activeTab}</p>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies with Package Managers\nDESCRIPTION: Commands to install Jest, Supertest, and SQLite3 testing dependencies using yarn or npm.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/testing.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev jest supertest sqlite3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jest supertest sqlite3 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Securing Webhooks with Environment Variable in JavaScript\nDESCRIPTION: Example of using environment variables to configure webhook authorization headers in JavaScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webhooks: {\n    defaultHeaders: {\n      Authorization: `Bearer ${process.env.WEBHOOK_TOKEN}`,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgreSQL User Permissions\nDESCRIPTION: SQL commands for creating a new PostgreSQL user with proper schema permissions required for Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new database user with a secure password\n$ CREATE USER my_strapi_db_user WITH PASSWORD 'password';\n# Connect to the database as the PostgreSQL admin\n$ \\c my_strapi_db_name admin_user\n# Grant schema privileges to the user\n$ GRANT ALL ON SCHEMA public TO my_strapi_db_user;\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Strapi with NPM\nDESCRIPTION: Command to build and start the Strapi application using NPM, necessary before creating a transfer token in the target instance.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with delete() in Strapi's Document Service API\nDESCRIPTION: Illustrates how to use the 'fields' parameter to select specific fields when deleting a document. This example deletes a restaurant and returns only the 'name' field of the deleted document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").delete({\n  documentId: \"fmtr6d7ktzpgrijqaqgr6vxs\",\n  fields: [\"name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google SSO Provider in Strapi (TypeScript)\nDESCRIPTION: TypeScript configuration for setting up Google as an SSO provider in Strapi. It includes setting up the Google Strategy with client ID, client secret, scope, and callback URL. The strategy also handles user profile data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/google.md#2025-04-09_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Strategy as GoogleStrategy } from \"passport-google-oauth2\";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: \"google\",\n        displayName: \"Google\",\n        icon: \"https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Google-512.png\",\n        createStrategy: (strapi) =>\n          new GoogleStrategy(\n            {\n              clientID: env(\"GOOGLE_CLIENT_ID\"),\n              clientSecret: env(\"GOOGLE_CLIENT_SECRET\"),\n              scope: [\n                \"https://www.googleapis.com/auth/userinfo.email\",\n                \"https://www.googleapis.com/auth/userinfo.profile\",\n              ],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\"google\"),\n            },\n            (request, accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                firstname: profile.given_name,\n                lastname: profile.family_name,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Vercel Format Input Example\nDESCRIPTION: Example of the input format using Vercel's source/destination structure in JSON format\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/old-path\",\n      \"destination\": \"/new-path\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CRON Jobs in Server Configuration in JavaScript\nDESCRIPTION: Shows how to enable CRON jobs in the Strapi server configuration file by importing the tasks and setting the 'enabled' flag to true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst cronTasks = require(\"./cron-tasks\");\n\nmodule.exports = ({ env }) => ({\n  host: env(\"HOST\", \"0.0.0.0\"),\n  port: env.int(\"PORT\", 1337),\n  cron: {\n    enabled: true,\n    tasks: cronTasks,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Strapi Project with Template using NPM\nDESCRIPTION: Command to create a new Strapi project based on a template using NPM package manager. Uses npx to execute the create-strapi-app package with template specification.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/templates.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-strapi-app@latest my-project --template <template-name-or-url>\n```\n\n----------------------------------------\n\nTITLE: Nested Transactions Implementation in Strapi\nDESCRIPTION: Shows how to implement nested transactions where inner transactions utilize the outer transaction context.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-transactions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.transaction(async () => {\n  // It will implicitly use the transaction\n  await strapi.entityService.create();\n\n  // Nested transactions will implicitly use the outer transaction\n  await strapi.db.transaction(async ({}) => {\n    await strapi.entityService.create();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using implicit equality filter with Document Service API in JavaScript\nDESCRIPTION: Demonstrates the shorthand syntax for equality filtering, where the $eq operator can be omitted for simpler code.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: 'Hello World',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Redux Payload Structure in Strapi v4\nDESCRIPTION: Example of the nested payload structure within data object for SET_INIT_DATA action in Strapi v4\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/redux-content-manager-app-state.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  data: {\n    authorizedCollectionTypeLinks: ContentManagerAppState['collectionTypeLinks'];\n    authorizedSingleTypeLinks: ContentManagerAppState['singleTypeLinks'];\n    components: ContentManagerAppState['components'];\n    contentTypeSchemas: ContentManagerAppState['models'];\n    fieldSizes: ContentManagerAppState['fieldSizes'];\n  };\n```\n\n----------------------------------------\n\nTITLE: Restoring Strapi Configuration\nDESCRIPTION: Imports configuration from a previously dumped file into a Strapi application. Supports different strategies for handling existing configuration: replace, merge, or keep.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstrapi configuration:restore -f dump.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi config:restore --file dump.json -s replace\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat dump.json | strapi config:restore\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi config:restore < dump.json\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Injection Zones Between Plugins\nDESCRIPTION: A multi-file example showing how to create a custom injection zone in one plugin and inject a component into it from another plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Use the injection zone in a view\n\nimport { InjectionZone } from '@strapi/helper-plugin';\n\nconst HomePage = () => {\n  return (\n    <main>\n      <h1>This is the homepage</h1>\n\t    <InjectionZone area=\"my-plugin.homePage.right\" />\n    </main>\n  );\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Declare this injection zone in the register lifecycle of the plugin\n\nexport default {\n  register() {\n    app.registerPlugin({\n      // ...\n      injectionZones: {\n        homePage: {\n          right: []\n        }\n      }\n    });\n  },\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Inject the component from a plugin in another plugin\n\nexport default {\n  register() {\n    // ...\n  },\n  bootstrap(app) {\n    app.getPlugin('my-plugin').injectComponent('homePage', 'right', {\n      name: 'my-other-plugin-component',\n      Component: () => 'This component is injected',\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Starting Strapi with TypeScript Support (NPM)\nDESCRIPTION: Commands to rebuild the admin panel and start the development server using NPM after adding TypeScript support to a Strapi project.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/adding-support-to-existing-project.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Configuring Locales in Strapi Admin Panel\nDESCRIPTION: Examples of how to update the list of available locales in the Strapi admin panel using both JavaScript and TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/options.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  config: {\n    locales: [\"ru\", \"zh\"],\n  },\n  bootstrap() {},\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  config: {\n    locales: [\"ru\", \"zh\"],\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: Linking Files to a Specific Entry using HTML Form\nDESCRIPTION: This snippet shows how to upload files and link them to a specific content entry in Strapi. It includes fields for ref (content type UID), refId (entry ID), and field (attribute name) to establish the relationship.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <!-- Can be multiple files if you setup \"collection\" instead of \"model\" -->\n  <input type=\"file\" name=\"files\" />\n  <input type=\"text\" name=\"ref\" value=\"api::restaurant.restaurant\" />\n  <input type=\"text\" name=\"refId\" value=\"5c126648c7415f0c0ef1bccd\" />\n  <input type=\"text\" name=\"field\" value=\"cover\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n<script type=\"text/javascript\">\n  const form = document.querySelector('form');\n\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    await fetch('/api/upload', {\n      method: 'post',\n      body: new FormData(e.target)\n    });\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Deploying Strapi Project to Cloud with NPM\nDESCRIPTION: Command to deploy a Strapi project to Strapi Cloud using NPM package manager. This initiates the deployment process and prompts for project configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/quick-start.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run strapi deploy\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with unpublish() in Strapi's Document Service API\nDESCRIPTION: Shows how to use the 'fields' parameter to select specific fields when unpublishing a document. This example unpublishes a restaurant and returns only the 'name' field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").unpublish({\n  documentId: \"cjld2cjxh0000qzrmn831i7rn\",\n  fields: [\"name\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $gte operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates filtering for articles with a numeric field greater than or equal to a specified value using the $gte operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    rating: {\n      $gte: 5,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Okta OAuth2 Package\nDESCRIPTION: Commands to install the passport-okta-oauth20 package using either yarn or npm package managers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/okta.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add passport-okta-oauth20\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save passport-okta-oauth20\n```\n\n----------------------------------------\n\nTITLE: Using strapi.fetch with AbortSignal in Strapi 5\nDESCRIPTION: Example of using strapi.fetch with an AbortSignal for timeout in Strapi 5, which accepts the native RequestInit type from Node.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/fetch.md#2025-04-09_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nstrapi.fetch(url, {\n  method: 'POST',\n  body,\n  headers,\n  signal: AbortSignal.timeout(1000)\n}); // accepts the type RequestInit native to Node\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Output Format Example\nDESCRIPTION: Example of the output format using JavaScript module exports with from/to structure\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  {\n    \"from\": \"/old-path\",\n    \"to\": \"/new-path\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Proxy in Strapi 5\nDESCRIPTION: In Strapi 5, all proxy configurations are set in the 'server.proxy' object within '/config/server.js|ts'. This includes settings for both 'strapi.fetch' requests and the global proxy agent for the Koa server.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/server-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In /config/server.js|ts\n{\n  server: {\n    proxy: {\n      koa: true, // Previously server.proxy\n      global: 'http://proxy.example.com', // Previously server.globalProxy\n      fetch: 'http://fetch-proxy.example.com' // New option for fetch-specific proxy\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating File Information using Node.js\nDESCRIPTION: This example demonstrates how to update file metadata such as alternative text in Strapi using the upload API. It uses node-fetch and formdata-node to send the updated information to the server.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FormData } from 'formdata-node';\nimport fetch from 'node-fetch';\n\nconst fileId = 50;\nconst newFileData = {\n  alternativeText: 'My new alternative text for this image!',\n};\n\nconst form = new FormData();\n\nform.append('fileInfo', JSON.stringify(newFileData));\n\nconst response = await fetch(`http://localhost:1337/api/upload?id=${fileId}`, {\n  method: 'post',\n  body: form,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Middleware for Amazon S3 in JavaScript\nDESCRIPTION: JavaScript configuration for the security middleware to support Amazon S3 uploads. Updates the Content Security Policy to allow images and media from the S3 bucket domain.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'yourBucketName.s3.yourRegion.amazonaws.com',\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'market-assets.strapi.io',\n            'yourBucketName.s3.yourRegion.amazonaws.com',\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Knex Queries with Transactions in Strapi\nDESCRIPTION: Shows how to use transactions with explicit Knex queries by using the transacting method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-transactions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.db.transaction(async ({ trx, rollback, commit }) => {\n  await knex('users').where('id', 1).update({ name: 'foo' }).transacting(trx);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $containsi operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates case-insensitive substring matching using the $containsi operator to find articles with titles containing specific text regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $containsi: 'hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Strapi v4 and v5 Response Formats\nDESCRIPTION: Shows the difference between Strapi v4's nested response format with attributes wrapper and Strapi v5's flattened response format with documentId replacing id.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/new-response-format.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": 14,\n    \"attributes\": {\n      \"title\": \"Article A\"\n      \"relation\": {\n        \"data\": {\n          \"id\": \"clkgylw7d000108lc4rw1bb6s\"\n          \"name\": \"Category A\"\n        }\n      }\n    }\n  }\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 10\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"documentId\": \"clkgylmcc000008lcdd868feh\",\n    \"locale\": \"en\",\n    \"title\": \"Article A\"\n    \"relation\": {\n      \"documentId\": \"clkgylw7d000108lc4rw1bb6s\"\n      \"name\": \"Category A\"\n    }\n  }\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 10\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrays Utils in Strapi 5\nDESCRIPTION: Example showing how to import and use the new array utilities in Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-utils-refactored.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { arrays, dates, strings, objects } from '@strapi/utils';\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data Without Compression (Yarn)\nDESCRIPTION: This command exports Strapi data without compression using Yarn. The '--no-compress' option is used to disable the default gzip compression.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi export --no-compress\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Admin for Different-Server Deployment (TypeScript)\nDESCRIPTION: TypeScript configuration for the Strapi admin when deploying on a different server. This sets the admin URL and disables serving static admin files from the backend.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/deployment.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  /**\n   * Note: The administration will be accessible from the root of the domain \n   * (ex: http://yourfrontend.com/)\n   */ \n  url: \"/\",\n  serveAdminPanel: false, // http://yourbackend.com will not serve any static admin files\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Single File Attribute in Strapi Content Type Model\nDESCRIPTION: This JSON schema shows how to define a single file (non-multiple) media attribute called 'avatar' in a Strapi content type model. The media attribute allows linking one file to the content entry.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  {\n    \"attributes\": {\n      \"pseudo\": {\n        \"type\": \"string\",\n        \"required\": true\n      },\n      \"email\": {\n        \"type\": \"email\",\n        \"required\": true,\n        \"unique\": true\n      },\n      \"avatar\": {\n        \"type\": \"media\",\n        \"multiple\": false,\n      }\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider in Strapi Cloud with JavaScript\nDESCRIPTION: Basic JavaScript configuration structure for setting up a custom email provider in a Strapi Cloud project. This code should be placed in ./config/env/production/plugins.js to be properly recognized by Strapi Cloud.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // … some unrelated plugins configuration options\n  // highlight-start\n  email: {\n    config: {\n        // … provider-specific upload configuration options go here\n    }\n  // highlight-end\n  // … some other unrelated plugins configuration options\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the $gt operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter for articles with a numeric field greater than a specified value using the $gt operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    rating: {\n      $gt: 5,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Transfer with Yarn\nDESCRIPTION: Command to transfer everything except file assets between Strapi instances using the --exclude option with Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi transfer --to https://example.com/admin --exclude files\n```\n\n----------------------------------------\n\nTITLE: Running Redirects Organizer Script in Bash\nDESCRIPTION: Shows the command to execute the redirects-organizer.js script using Node.js in a bash terminal. This command processes the redirects file and generates an organized version.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/redirects-organizer/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode redirects-organizer.js\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Files Attribute in Strapi Content Type Model\nDESCRIPTION: This JSON schema demonstrates how to define a multiple files media attribute called 'covers' in a Strapi content type model. Setting 'multiple' to true allows linking multiple files to a single content entry.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  {\n    \"attributes\": {\n      \"name\": {\n        \"type\": \"string\",\n        \"required\": true\n      },\n      \"covers\": {\n        \"type\": \"media\",\n        \"multiple\": true,\n      }\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendgrid Email Provider in TypeScript\nDESCRIPTION: TypeScript configuration for integrating Sendgrid as an email provider in Strapi Cloud. This example shows how to set up the API key as an environment variable and configure default email addresses.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'sendgrid',\n      providerOptions: {\n        apiKey: env('SENDGRID_API_KEY'),\n      },\n      settings: {\n        defaultFrom: 'myemail@protonmail.com',\n        defaultReplyTo: 'myemail@protonmail.com',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Components in GraphQL\nDESCRIPTION: Example GraphQL query to fetch component data (closing periods) for restaurants.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    closingPeriod {\n      label\n      start_date\n      end_date\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the $startsWith operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates case-sensitive prefix matching using the $startsWith operator to find articles with titles beginning with specific text.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $startsWith: 'ABCD',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Populating Components with On Fragments in REST API URL\nDESCRIPTION: Example syntax for populating components and dynamic zones using 'on' fragments in Strapi 5 REST API calls. This demonstrates the required detailed population strategy format that replaces the shared population approach from Strapi v4.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-shared-population-strategy-components-dynamic-zones.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npopulate[dynamic-zone-name][on][component-category.component-name]=true\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Routes\nDESCRIPTION: Displays a list of all available routes defined in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nstrapi routes:list\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Methods in Strapi v4\nDESCRIPTION: In Strapi v4, container methods like register and get are accessed through the container property of the strapi object.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-container.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.container.register(....)\nstrapi.container.get(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Strapi Project with Template using Yarn\nDESCRIPTION: Command to create a new Strapi project based on a template using Yarn package manager. Requires the --template parameter to specify the template name or URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/templates.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn create strapi-app my-project --template <template-name-or-url>\n```\n\n----------------------------------------\n\nTITLE: File Upload Form Implementation - HTML and JavaScript\nDESCRIPTION: HTML form structure with JavaScript implementation for handling file uploads to Strapi's upload API endpoint. Includes form fields for file, reference, ID, and field name.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <!-- Can be multiple files if you setup \"collection\" instead of \"model\" -->\n  <input type=\"file\" name=\"files\" />\n  <input type=\"text\" name=\"ref\" value=\"api::restaurant.restaurant\" />\n  <input type=\"text\" name=\"refId\" value=\"5c126648c7415f0c0ef1bccd\" />\n  <input type=\"text\" name=\"field\" value=\"cover\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n<script type=\"text/javascript\">\n  const form = document.querySelector('form');\n\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    await fetch('/api/upload', {\n      method: 'post',\n      body: new FormData(e.target)\n    });\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Restaurant Schema with Single File Attribute\nDESCRIPTION: This JSON schema defines a 'Restaurant' content type with a 'cover' attribute for a single media file. It demonstrates how to structure a model to have a non-multiple media field for uploading images.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/upload.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"attributes\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"cover\": {\n      \"type\": \"media\",\n      \"multiple\": false,\n    }\n  }\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Provider in TypeScript\nDESCRIPTION: TypeScript configuration for integrating Mailgun as an email provider in Strapi Cloud. This example shows how to set up the API key, domain, and optional regional URL as environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'mailgun',\n      providerOptions: {\n        key: env('MAILGUN_API_KEY'), // Required\n        domain: env('MAILGUN_DOMAIN'), // Required\n        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'\n      },\n      settings: {\n        defaultFrom: 'myemail@protonmail.com',\n        defaultReplyTo: 'myemail@protonmail.com',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Discarded Drafts Operation\nDESCRIPTION: Shows the response format when discarding drafts across multiple locales, including document versions in different languages (en, fr, es) with their respective metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/locale.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  versions: [\n    {\n      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n      name: 'Biscotte Restaurant',\n      publishedAt: null,\n      locale: 'en',\n      // …\n    },\n    {\n      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n      name: 'Restaurant Biscotte',\n      publishedAt: null,\n      locale: 'fr',\n      // …\n    },\n    {\n      documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n      name: 'Biscotte Restaurante',\n      publishedAt: null,\n      locale: 'es',\n      // …\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Document\nDESCRIPTION: Query to create a new document and publish it immediately using the Document Service API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').create({\n  data: {\n    name: \"New Restaurant\",\n  },\n  status: 'published',\n})\n```\n\n----------------------------------------\n\nTITLE: Using the $startsWithi operator with Document Service API in JavaScript\nDESCRIPTION: Shows case-insensitive prefix matching using the $startsWithi operator to find articles with titles beginning with specific text regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $startsWithi: 'ABCD', // will return the same as filtering with 'abcd'\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Strapi v4 Content API Response Structure\nDESCRIPTION: Example of how content entries were identified using 'id' in Strapi v4 API responses. Shows the structure with system fields and attributes containing user fields.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/use-document-id.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    // system fields\n    \"id\": 14,\n    \"attributes\": {\n      // user fields\n      \"title\": \"Article A\"\n      \"relation\": {\n        \"data\": {\n          \"id\": \"clkgylw7d000108lc4rw1bb6s\"\n          \"name\": \"Category A\"\n        }\n      }\n    }\n  }\n  \"meta\": {\n    // …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example REST API URL with Component Population\nDESCRIPTION: Complete example URL showing how to populate a specific component within a dynamic zone in a Strapi 5 API request. This demonstrates the practical implementation of the detailed population strategy.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-shared-population-strategy-components-dynamic-zones.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/api/articles?populate[dynamic-zone-name][on][component-category.component-name]=true\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Documentation in Bash\nDESCRIPTION: Generates a build of the Docusaurus documentation using either npm or yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/all-urls-extractor/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n# or\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Transferring Only Files with Yarn\nDESCRIPTION: Command to transfer only file assets between Strapi instances using the --only option with Yarn, excluding content and configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi transfer --to https://example.com/admin --only files\n```\n\n----------------------------------------\n\nTITLE: Paginating Articles by Offset using JavaScript and qs\nDESCRIPTION: This snippet shows how to paginate articles by specifying the start offset and limit using the qs library to construct the query string for a Strapi REST API request.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/sort-pagination.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  pagination: {\n    start: 0,\n    limit: 10,\n  },\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/articles?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Deploying Local Strapi Project to Cloud\nDESCRIPTION: Command to deploy a local Strapi project (under 100MB) to Strapi Cloud without requiring a git repository. Must be used after logging in.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/cli/cloud-cli.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstrapi deploy\n```\n\n----------------------------------------\n\nTITLE: Header Action Description Interface for Strapi Content Manager\nDESCRIPTION: TypeScript interface defining the properties for header actions, including label, icon, onClick handler, dialog options, and dropdown options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ninterface HeaderActionDescription {\n  disabled?: boolean;\n  label: string;\n  icon?: React.ReactNode;\n  type?: 'icon' | 'default';\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  dialog?: DialogOptions;\n  options?: Array<{\n    disabled?: boolean;\n    label: string;\n    startIcon?: React.ReactNode;\n    textValue?: string;\n    value: string;\n  }>;\n  onSelect?: (value: string) => void;\n  value?: string;\n}\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the $endsWithi operator with Document Service API in JavaScript\nDESCRIPTION: Shows case-insensitive suffix matching using the $endsWithi operator to find articles with titles ending with specific text regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    title: {\n      $endsWith: 'ABCD', // will return the same as filtering with 'abcd'\n    },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Policy Check in TypeScript\nDESCRIPTION: TypeScript version of the admin policy check that verifies if the current user has an Administrator role.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (policyContext, config, { strapi }) => {\n  if (policyContext.state.user.role.name === 'Administrator') {\n    // Go to next policy or will reach the controller's action.\n    return true;\n  }\n\n  return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Server Configuration in TypeScript for Strapi 5\nDESCRIPTION: This snippet demonstrates how to update the /config/server.ts file in Strapi 5 using TypeScript. It shows the configuration for disabling remote data transfers, update notifications, and startup messages, replacing the previous environment variable approach.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/removed-support-for-some-env-options.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // … other configuration options\n  transfer: {\n    remote: {\n      enabled: false, // disable remote data transfers instead of STRAPI_DISABLE_REMOTE_DATA_TRANSFER\n    },\n  },\n  logger: {\n    updates: {\n      enabled: false, // disable update notification logging instead of STRAPI_DISABLE_UPDATE_NOTIFICATION\n    },\n    startup: {\n      enabled: false, // disable startup message instead of STRAPI_HIDE_STARTUP_MESSAGE\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Sentry Plugin in Strapi (TypeScript)\nDESCRIPTION: Configuration to completely disable the Sentry plugin in the Strapi plugins.ts file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // …\n  sentry: {\n    enabled: false,\n  },\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Relations with Longhand Syntax\nDESCRIPTION: Example of disconnecting relations using the longhand syntax to update a restaurant's categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      disconnect: [\n        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },\n        { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }\n      ],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Cloud Projects\nDESCRIPTION: Command to retrieve and display all projects associated with the user's Strapi Cloud account.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/cli/cloud-cli.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstrapi projects\n```\n\n----------------------------------------\n\nTITLE: Updating media file metadata with GraphQL mutation\nDESCRIPTION: GraphQL mutation for updating a media file's alternative text by its id (not documentId). This demonstrates handling media files in Strapi 5's GraphQL API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Mutation($updateUploadFileId: ID!, $info: FileInfoInput) {\n  updateUploadFile(\n    id: 3,\n    info: {\n      alternativeText: \"New alt text\"\n    }\n  ) {\n    documentId\n    url\n    alternativeText\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Host and Port in JavaScript\nDESCRIPTION: This code demonstrates the default server configuration for host and port in the server configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/host-port-path.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env(\"HOST\", \"0.0.0.0\"),\n  port: env.int(\"PORT\", 1337),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Scripts Directory in Bash\nDESCRIPTION: Creates a 'scripts' folder at the root of the Docusaurus project if it doesn't already exist.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/all-urls-extractor/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir scripts\n```\n\n----------------------------------------\n\nTITLE: Setting Relations with Longhand Syntax\nDESCRIPTION: Example of setting relations using the longhand syntax to completely replace existing restaurant categories.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      set: [\n        { documentId: 'z0y2x4w6v8u1t3s5r7q9onm' },\n        { documentId: 'j9k8l7m6n5o4p3q2r1s0tuv' }\n      ],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs in Markdown\nDESCRIPTION: This code snippet shows how to create tabbed content in a Markdown document using the Tabs and TabItem components.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/getting-started/deployment.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs groupId=\"REPO-OPTIONS\">\n\n<TabItem value=\"TEMPLATE\" label=\"New repo & prebuilt template ✨\">\n\n4.a. Click on the **Use template** button. If you are deploying a project for the first time, you may first have to select GitHub as git provider and then you will see the option to use a template. \n\n4.b. In the *Create repository with template* modal, choose:\n\n- the GitHub account where the repository will be created\n- the template to use for the new project (e.g. Blog)\n\n<ThemedImage\nalt=\"Create repo with template modal\"\nwidth=\"60%\"\nsources={{\n    light: '/img/assets/cloud/template-modal.png',\n    dark: '/img/assets/cloud/template-modal_DARK.png',\n}}\n/>\n\n4.c. Click on the **Create repository** button. A modal will confirm the creation of the repository.\n\n4.d. If you have already given Strapi Cloud access to all repositories of your GitHub account, go directly to the next step. If not, you will be redirected to a GitHub modal where you will have to allow Strapi Cloud access to the newly created repository (more information in the <ExternalLink to=\"https://docs.github.com/en/apps/overview\" text=\"GitHub documentation\"/>).\n\n4.e. Back in the project deployment interface, select your *Account* and the *Repository* you just created.\n\n<ThemedImage\nalt=\"Selecting GitHub account and repository\"\nsources={{\n    light: '/img/assets/cloud/account-repo-selection.png',\n    dark: '/img/assets/cloud/account-repo-selection_DARK.png',\n}}\n/>\n\n</TabItem>\n\n<TabItem value=\"OWN-REPO\" label=\"Own existing repo & Strapi project\">\n\n4.a. (optional) If you are deploying a project for the first time, you may first have to select a git provider: either GitHub or GitLab. If you already deployed a project with one git provider, you can afterward deploy another project using another provider by clicking on the **Switch git provider** button and selecting either GitHub or GitLab.\n\n:::tip\nConnect the GitHub or GitLab account and/or organizations that own the repository or repositories you want to deploy. This can be different from the account that owns the Strapi Cloud account.\n:::\n\n4.b. If you have already given Strapi Cloud access to all repositories of your GitHub or GitLab account, go directly to the next step. If not, you will be redirected to a modal where you will have to allow Strapi Cloud permission to access some or all your repositories on GitHub/GitLab (more information in the <ExternalLink to=\"https://docs.github.com/en/apps/overview\" text=\"GitHub\"/> and <ExternalLink to=\"https://docs.gitlab.com/ee/integration/oauth_provider.html#view-all-authorized-applications\" text=\"GitLab\"/> documentations).\n\n4.c. Back in the project deployment interface, select your *Account* and a *Repository*. \n\n<ThemedImage\nalt=\"Selecting git account and repository\"\nsources={{\n    light: '/img/assets/cloud/account-repo-selection.png',\n    dark: '/img/assets/cloud/account-repo-selection_DARK.png',\n}}\n/>\n\n</TabItem>\n\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Data from File using Strapi CLI with Yarn\nDESCRIPTION: Example of the minimum command to import data from a file in the Strapi project root using Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc\n```\n\n----------------------------------------\n\nTITLE: Using the $and logical operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates combining multiple conditions with a logical AND using the $and operator to match articles that satisfy all specified conditions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    $and: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Policy in TypeScript\nDESCRIPTION: TypeScript implementation of a custom route that applies the is-admin policy to the GET /restaurants endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`\n          is executed before the `find` action in the `Restaurant.ts` controller.\n         */\n        policies: ['is-admin']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi with Yarn\nDESCRIPTION: Command to create a new Strapi project using Yarn package manager. Note that Yarn doesn't support passing version tags like @latest.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create strapi\n```\n\n----------------------------------------\n\nTITLE: Using useRBAC Hook in Strapi v4\nDESCRIPTION: Example of the useRBAC hook implementation in Strapi v4, which uses a nested structure with main property containing an array of permission objects.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/admin-panel-rbac-store-updated.md#2025-04-09_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { allowedActions } = useRBAC({\n\tmain: [{ action: 'admin::something.main', subject: null }]\n})\n\nconst canMain = allowedActions.canMain\n```\n\n----------------------------------------\n\nTITLE: Strapi Documentation Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter metadata for a Strapi documentation page defining the title, sidebar configuration, description, pagination links and content tags.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/setup-deployment.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Setup and Deployment\ndisplayed_sidebar: cmsSidebar\ndescription: Strapi is meant to be installed on your local machine, then configured, and finally deployed to a remote environment. \npagination_prev: cms/intro\npagination_next: cms/api/content-api\ntags:\n- introduction\n- concepts\n- installation \n- configuration\n- deployment\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Plugin in Strapi (TypeScript)\nDESCRIPTION: Basic configuration for the Sentry plugin in the Strapi plugins.ts file. It sets up the DSN and enables sending metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  sentry: {\n    enabled: true,\n    config: {\n      dsn: env('SENTRY_DSN'),\n      sendMetadata: true,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Field Selection and Population\nDESCRIPTION: Example JSON response showing the result of combining field selection with population. The response includes only the selected fields (title and slug) from the main entity and selected fields (name and url) from the populated headerImage relation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/populate-select.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"h90lgohlzfpjf3bvan72mzll\",\n      \"title\": \"Test Article\",\n      \"slug\": \"test-article\",\n      \"headerImage\": {\n        \"id\": 1,\n        \"documentId\": \"cf07g1dbusqr8mzmlbqvlegx\",\n        \"name\": \"17520.jpg\",\n        \"url\": \"/uploads/17520_73c601c014.jpg\"\n      }\n    }\n  ],\n  \"meta\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into Strapi Cloud with Yarn\nDESCRIPTION: Command to log into Strapi Cloud using Yarn package manager. This opens a browser window for authentication.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/getting-started/deployment-cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi login\n```\n\n----------------------------------------\n\nTITLE: Updating Admin Panel Host and Port in JavaScript\nDESCRIPTION: This code demonstrates how to update the host and port for the admin panel when it's hosted separately from the back-end server.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/host-port-path.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: \"my-host.com\",\n  port: 3000,\n  // Additionally you can define another path instead of the default /admin one 👇\n  // url: '/dashboard' \n});\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Plugin with NPM\nDESCRIPTION: Command to install the GraphQL plugin for Strapi using NPM package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @strapi/plugin-graphql\n```\n\n----------------------------------------\n\nTITLE: Using the $or logical operator with Document Service API in JavaScript\nDESCRIPTION: Demonstrates combining multiple conditions with a logical OR using the $or operator to match articles that satisfy any of the specified conditions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    $or: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in JavaScript\nDESCRIPTION: JavaScript configuration for SQLite database connection in Strapi, specifying the client type, connection filename, and default behavior for null values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: path.join(__dirname, '..', env('DATABASE_FILENAME', '.tmp/data.db')),\n    },\n    useNullAsDefault: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Routes\nDESCRIPTION: Demonstrates how to configure public routes by disabling authentication. Shows implementation in both core and custom routers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  config: {\n    find: {\n      auth: false\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Extensions Folder Structure in Bash\nDESCRIPTION: Shows the folder structure for Strapi plugin extensions, including the location of strapi-server.js|ts files and content-type model.json files.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugins-extension.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/extensions\n  /some-plugin-to-extend\n    strapi-server.js|ts\n    /content-types\n      /some-content-type-to-extend\n        model.json\n      /another-content-type-to-extend\n        model.json\n  /another-plugin-to-extend\n    strapi-server.js|ts\n```\n\n----------------------------------------\n\nTITLE: Running Strapi Application with Yarn\nDESCRIPTION: Command to start the Strapi application in development mode using Yarn. This launches the Strapi server and allows for real-time updates during development.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/cli.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn develop\n```\n\n----------------------------------------\n\nTITLE: Generating Query String for Filtered Population in Strapi API (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the 'qs' library to generate a query string for a Strapi API request. It combines population of the 'categories' relation with sorting and filtering.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/populate-select.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify(\n  {\n    populate: {\n      categories: {\n        sort: ['name:asc'],\n        filters: {\n          name: {\n            $eq: 'Cars',\n          },\n        },\n      },\n    },\n  },\n  {\n    encodeValuesOnly: true, // prettify URL\n  }\n);\n\nawait request(`/api/articles?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Importing Invoice Status Component in Markdown\nDESCRIPTION: This code snippet imports a component called InvoiceStatus from a markdown file. It's used to display information about invoice statuses in the documentation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/account/account-billing.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport InvoiceStatus from '/docs/snippets/invoices-statuses.md'\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Minor Version in Strapi (Bash)\nDESCRIPTION: Command to upgrade a Strapi project to the latest minor and patch version within the current major version.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade minor\n```\n\n----------------------------------------\n\nTITLE: Response from Single Field Sorting Query\nDESCRIPTION: Example JSON response from a Document Service API query with sorting applied, showing sorted article documents with their properties including documentId, title, slug and body.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/sort-pagination.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"documentId\": \"cjld2cjxh0000qzrmn831i7rn\",\n    \"title\": \"Test Article\",\n    \"slug\": \"test-article\",\n    \"body\": \"Test 1\"\n    // ...\n  },\n  {\n    \"documentId\": \"cjld2cjxh0001qzrm5q1j5q7m\",\n    \"title\": \"Test Article 2\",\n    \"slug\": \"test-article-2\",\n    \"body\": \"Test 2\"\n    // ...\n  }\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Protocol and URL Properties Example\nDESCRIPTION: Example showing different URL component properties available in ctx.request for a sample API request\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/requests-responses.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhttps://example.com:1337/api/restaurants?id=123\n\nctx.request.href     -> \"https://example.com:1337/api/restaurants?id=123\"\nctx.request.protocol -> \"https\"\nctx.request.host     -> \"localhost:1337\"\nctx.request.hostname -> \"localhost\"\nctx.request.origin   -> \"https://example.com:1337\"\nctx.request.url      -> \"/api/restaurants?id=123\"\nctx.request.path     -> \"/api/restaurants\"\n```\n\n----------------------------------------\n\nTITLE: Updating Status Component Import in React/TypeScript\nDESCRIPTION: Demonstrates how to update the import for the Status component, which should now be imported from @strapi/design-system instead of @strapi/helper-plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { Status } from '@strapi/helper-plugin';\n\nconst MyComponent = () => {\n  return (\n    <Status variant={statusColor} showBullet={false} size=\"S\">\n      <Typography fontWeight=\"bold\" textColor={`${statusColor}700`}>\n        {stateMessage[status]}\n      </Typography>\n    </Status>\n  );\n};\n\n// After\nimport { Status } from '@strapi/design-system';\n```\n\n----------------------------------------\n\nTITLE: Updating SQLite Database Configuration for TypeScript\nDESCRIPTION: This code modifies the database.ts configuration file to add an additional '..' to the filename path. This adjustment is required only for SQLite databases when migrating to TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/typescript/adding-support-to-existing-project.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: 'sqlite',\n    connection: {\n      filename: path.join(\n        __dirname,\n        \"..\",\n        \"..\",\n        env(\"DATABASE_FILENAME\", \".tmp/data.db\")\n      ),\n    },\n    useNullAsDefault: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Reducers to a Strapi Plugin\nDESCRIPTION: Example showing how to add Redux reducers to a plugin to share state between components using the addReducers() function during the register lifecycle.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { exampleReducer } from './reducers'\n\nconst reducers = {\n  // Reducer Syntax\n  [`${pluginId}_exampleReducer`]: exampleReducer\n}\n\nexport default {\n  register(app) {\n    app.addReducers(reducers)\n  },\n  bootstrap() {},\n};\n\n\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variables Configuration\nDESCRIPTION: Environment variable configuration for PostgreSQL database connection in Strapi\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Database\nDATABASE_CLIENT=postgres\nDATABASE_HOST=127.0.0.1\nDATABASE_PORT=5432\nDATABASE_NAME=strapi\nDATABASE_USERNAME=strapi\nDATABASE_PASSWORD=strapi\nDATABASE_SSL=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Client with API Token Authentication\nDESCRIPTION: Code to initialize the Strapi Client with authentication using an API token. This allows access to protected resources in your Strapi backend.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst client = strapi({\n  baseURL: 'http://localhost:1337/api',\n  auth: 'your-api-token-here',\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Strapi Project to Cloud with Yarn\nDESCRIPTION: Command to deploy a Strapi project to Strapi Cloud using Yarn package manager. This initiates the deployment process and prompts for project configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/quick-start.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn strapi deploy\n```\n\n----------------------------------------\n\nTITLE: Customizing .env File Path\nDESCRIPTION: Command to specify a custom path for the .env file using ENV_PATH variable\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-cast-environment-variables.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nENV_PATH=/absolute/path/to/.env npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite with Package Manager\nDESCRIPTION: Commands to install the better-sqlite3 package using yarn or npm package managers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/database.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn add better-sqlite3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install better-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Starting Strapi Console for Real-time Commands\nDESCRIPTION: Command to start the Strapi server and evaluate commands in your application in real-time. This provides an interactive console for working with your Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nstrapi console\n```\n\n----------------------------------------\n\nTITLE: Deep Population of Nested Relations\nDESCRIPTION: Example showing how to populate nested relations multiple levels deep using object notation\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  populate: {\n    categories: {\n      populate: [\"articles\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running ngrok for local development with Patreon provider\nDESCRIPTION: Use ngrok to serve the backend app, as Patreon doesn't accept localhost URLs. This command creates a tunnel to localhost:1337.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/patreon.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 1337\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example for Strapi\nDESCRIPTION: This snippet shows an example of environment variables that can be set in a .env file or directly in the deployment platform to configure the Strapi server's host address and port.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/deployment.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHOST=10.0.0.1\nPORT=1338\n```\n\n----------------------------------------\n\nTITLE: Updating PaginationURLQueryProps Usage in React/TypeScript\nDESCRIPTION: Demonstrates the migration from PaginationURLQueryProps to the new Pagination component from @strapi/strapi/admin. The updated version uses Pagination.Root with Pagination.Links for rendering pagination.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { PaginationURLQueryProps } from '@strapi/helper-plugin';\n\n// After\nimport { Pagination } from '@strapi/strapi/admin';\n\nconst MyComponent = () => {\n  return (\n    <Pagination.Root pageCount={2}>\n      <Pagination.Links />\n    </Pagination.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Plugin with Yarn in Strapi\nDESCRIPTION: Command to install the GraphQL plugin using Yarn package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @strapi/plugin-graphql\n```\n\n----------------------------------------\n\nTITLE: Adding Settings Link in Strapi Admin Panel\nDESCRIPTION: Demonstrates how to add a single link to an existing settings section in Strapi's admin panel using the addSettingsLink() function. It shows how to specify the target section and define the link properties including label, path, component, permissions, and license indicator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst myComponent = async () => {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  bootstrap(app) {\n\t\t// Adding a single link\n\t\tapp.addSettingsLink(\n\t\t 'global', // id of the section to add the link to\n\t\t\t{\n\t\t\t\tintlLabel: { id: String, defaultMessage: String },\n\t\t\t\tid: String,\n\t\t\t\tto: String,\n\t\t\t\tComponent: myComponent,\n\t\t\t\tpermissions: Object[],\n        licenseOnly: true, // mark the feature as a paid one not available in your license\n\t\t\t}\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Policies in a Strapi Route\nDESCRIPTION: Example of using a policy provided by a plugin (users-permissions) in a route configuration. The isAuthenticated policy will verify user authentication before allowing access to the Restaurant.find controller action.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `isAuthenticated` policy prodived with the `users-permissions` plugin \n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['plugin::users-permissions.isAuthenticated']\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `isAuthenticated` policy prodived with the `users-permissions` plugin \n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['plugin::users-permissions.isAuthenticated']\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi Client with NPM\nDESCRIPTION: Command to install the Strapi Client library using NPM package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @strapi/client\n```\n\n----------------------------------------\n\nTITLE: Updating and Publishing Document\nDESCRIPTION: Query to update an existing document and publish the changes immediately using the Document Service API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').update({\n  data: {\n    documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n    name: \"Biscotte Restaurant (closed)\",\n  },\n  status: 'published',\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning Strapi Repository for Target Instance\nDESCRIPTION: Commands to move to the parent directory and clone the git repository to create a second Strapi instance that will serve as the target for data transfer.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd .. # move to the parent directory\ngit clone <path to created git repository>.git/ <new-instance-name>\n```\n\n----------------------------------------\n\nTITLE: Using Ngrok to create a tunnel for local development with Instagram OAuth\nDESCRIPTION: Command to create an ngrok tunnel on port 1337 to provide a public URL for Instagram OAuth redirects, as Facebook doesn't accept localhost URLs for authentication callbacks.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/instagram.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 1337\n```\n\n----------------------------------------\n\nTITLE: Restarting Strapi Application with NPM\nDESCRIPTION: This command restarts the Strapi application in development mode using NPM. It should be run in the project's root directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/develop-npm-yarn.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Installing passport-discord with Yarn\nDESCRIPTION: Command to install the passport-discord package using Yarn package manager, which is required for Discord SSO integration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/discord.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add passport-discord\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Entries with Strapi Query Engine\nDESCRIPTION: Uses findMany() to retrieve multiple entries matching specified parameters. Shows filtering, ordering, and population of related data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/single-operations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::blog.article').findMany({\n  select: ['title', 'description'],\n  where: { title: 'Hello World' },\n  orderBy: { publishedAt: 'DESC' },\n  populate: { category: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for discardDraft() in Strapi (JavaScript)\nDESCRIPTION: This code snippet shows the structure of the response returned by the discardDraft() method, including the document ID and an array of entries with document details.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  documentId: \"lviw819d5htwvga8s3kovdij\",\n  entries: [\n    {\n      documentId: \"lviw819d5htwvga8s3kovdij\",\n      name: \"Biscotte Restaurant\",\n      publishedAt: null,\n      locale: \"en\"\n      // …\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Forgot Password Request Implementation in Strapi\nDESCRIPTION: This code sends a forgot password request to the Strapi backend API. It triggers the sending of a password reset email to the specified user's email address.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\n// Request API.\naxios\n  .post('http://localhost:1337/api/auth/forgot-password', {\n    email: 'user@strapi.io', // user's email\n  })\n  .then(response => {\n    console.log('Your user received an email');\n  })\n  .catch(error => {\n    console.log('An error occurred:', error.response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Migrating translatedErrors in TSX\nDESCRIPTION: Example showing how to update the import for the translatedErrors utility which has been moved from @strapi/helper-plugin to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { translatedErrors } from '@strapi/helper-plugin';\n\n// After\nimport { translatedErrors } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Building Strapi Documentation Locally Before Submitting PR\nDESCRIPTION: Commands for building the documentation locally to check for issues before submitting a pull request. This prevents build failures in the CI/CD pipeline.\nSOURCE: https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Link in Strapi Admin Panel (TypeScript)\nDESCRIPTION: Shows how to add a new menu link to the main navigation in Strapi's admin panel using TypeScript. It demonstrates the use of the addMenuLink() function with type annotations for the app parameter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport PluginIcon from './components/PluginIcon';\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nexport default {\n  register(app: StrapiApp) {\n    app.addMenuLink({\n      to: '/plugins/my-plugin',\n      icon: PluginIcon,\n      intlLabel: {\n        id: 'my-plugin.plugin.name',\n        defaultMessage: 'My plugin',\n      },\n      Component: () => 'My plugin',\n      permissions: [], // permissions to apply to the link\n      position: 3, // position in the menu\n      licenseOnly: true, // mark the feature as a paid one not available in your license\n    });\n    app.registerPlugin({ ... });\n  },\n  bootstrap() {},\n};\n```\n\n----------------------------------------\n\nTITLE: API Token Salt Configuration in Admin.js\nDESCRIPTION: Custom configuration of the API token salt in the Strapi admin configuration file. This can be used as an alternative to environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/api-tokens.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ./config/admin.js\n{\n  apiToken: {\n    salt: 'your_custom_salt'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Headers in TypeScript\nDESCRIPTION: Shows how to implement Cache-Control headers in a TypeScript request handler with proper type definitions for Request and Response objects from express. Sets a 24-hour cache duration for CDN caching.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/getting-started/caching.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request, Response } from 'express';\n\nfunction myHandler(req: Request, res: Response) {\n  // Set the Cache-Control header to cache responses for 1 day\n  res.setHeader('Cache-Control', 'max-age=86400');\n  \n  // Add your logic to generate the response here\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Strapi Admin Panel with npm\nDESCRIPTION: Command to rebuild the Strapi admin panel using npm package manager. This should be run in the project root directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/build-npm-yarn.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Strapi Admin Panel\nDESCRIPTION: Commands to build the Strapi admin panel before deployment. This process replaces the content of the ./build folder.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/deployment.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Service Context for findOne Operation\nDESCRIPTION: Example showing the context object structure when using the findOne operation in Strapi Document Service.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/middlewares.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  uid: \"api::restaurant.restaurant\",\n  contentType: {\n    kind: \"collectionType\",\n    collectionName: \"restaurants\",\n    info: {\n      singularName: \"restaurant\",\n      pluralName: \"restaurants\",\n      displayName: \"restaurant\"\n    },\n    options: {\n      draftAndPublish: true\n    },\n    pluginOptions: {},\n    attributes: {\n      name: { /*...*/ },\n      description: { /*...*/ },\n      createdAt: { /*...*/ },\n      updatedAt: { /*...*/ },\n      publishedAt: { /*...*/ },\n      createdBy: { /*...*/ },\n      updatedBy: { /*...*/ },\n      locale: { /*...*/ },\n    },\n    apiName: \"restaurant\",\n    globalId: \"Restaurants\",\n    uid: \"api::restaurant.restaurant\",\n    modelType: \"contentType\",\n    modelName: \"restaurant\",\n    actions: { /*...*/ },\n    lifecycles: { /*...*/ },\n  },\n  action: \"findOne\",\n  params: {\n    documentId: 'hp7hjvrbt8rcgkmabntu0aoq',\n    locale: undefined,\n    status: \"publish\"\n    populate: { /*...*/ },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Strapi Admin Panel\nDESCRIPTION: Builds the Strapi admin panel with various options for customizing the build process, including debugging, minification, and statistics output.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstrapi build\n```\n\n----------------------------------------\n\nTITLE: Migrating useCollator Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useCollator hook which has been moved from @strapi/helper-plugin to @strapi/design-system package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useCollator } from '@strapi/helper-plugin';\n\n// After\nimport { useCollator } from '@strapi/design-system';\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key (Mac/Linux)\nDESCRIPTION: This command generates a strong encryption key using OpenSSL on Mac or Linux systems. It outputs a base64-encoded random string of 48 bytes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 48\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu/Settings Links in Strapi 5\nDESCRIPTION: Example showing the difference between Strapi v4 and v5 link path configuration. In v5, the 'to' property should use relative paths instead of absolute paths when adding settings or menu links.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/react-router-dom-6.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Strapi v4 (absolute path)\n{\n  to: '/settings/my-plugin'\n}\n\n// Strapi v5 (relative path)\n{\n  to: 'my-plugin'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Context in Strapi Controller\nDESCRIPTION: Example of accessing authenticated user information in a Strapi controller context.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncreate: async ctx => {\n  const { id } = ctx.state.user;\n\n  const depositObj = {\n    ...ctx.request.body,\n    depositor: id,\n  };\n\n  const data = await strapi.services.deposit.add(depositObj);\n\n  // Send 201 `created`\n  ctx.created(data);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi Client with Yarn\nDESCRIPTION: Command to install the Strapi Client library using Yarn package manager.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @strapi/client\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Hooks\nDESCRIPTION: Displays a list of all available hooks in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nstrapi hooks:list\n```\n\n----------------------------------------\n\nTITLE: Resetting Strapi Administrator Password\nDESCRIPTION: Resets the password for an existing administrator account. Requires the user's email and the new password, which can be provided as options or entered interactively.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nstrapi admin:reset-user-password --email=chef@strapi.io --password=Gourmet1234\n```\n\n----------------------------------------\n\nTITLE: Configuring VK Client ID in Strapi\nDESCRIPTION: Example of a Client ID value to be used in the Strapi Users & Permissions provider settings for VK integration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/vk.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n7276416\n```\n\n----------------------------------------\n\nTITLE: Installing Upload Provider with Yarn\nDESCRIPTION: Installs the AWS S3 provider for Strapi's Upload (Media Library) feature using Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @strapi/provider-upload-aws-s3\n```\n\n----------------------------------------\n\nTITLE: Configuring Restaurant Routes with Analytics Middleware\nDESCRIPTION: Route configuration for the Restaurant content-type that applies the analytics middleware to the findOne operation. Disables authentication and policies for this route.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/middlewares.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  config: {\n    findOne: {\n      auth: false,\n      policies: [],\n      middlewares: ['api::restaurant.analytics'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Including Strapi Client via CDN in Browser Environment\nDESCRIPTION: Code showing how to include the Strapi Client via a CDN in a browser environment using script tags, and then initialize it with a base URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@strapi/client\"></script>\n\n<script>\n  const client = strapi.strapi({ baseURL: 'http://localhost:1337/api' });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Policies\nDESCRIPTION: Displays a list of all registered policies in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nstrapi policies:list\n```\n\n----------------------------------------\n\nTITLE: Migrating useCallbackRef Hook in TSX\nDESCRIPTION: Example showing how to update the import for the useCallbackRef hook which has been moved from @strapi/helper-plugin to @strapi/design-system package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { useCallbackRef } from '@strapi/helper-plugin';\n\n// After\nimport { useCallbackRef } from '@strapi/design-system';\n```\n\n----------------------------------------\n\nTITLE: Disabling Strapi Telemetry with Yarn\nDESCRIPTION: Command to disable the default data collection feature in Strapi using Yarn as the package manager. This prevents any usage data from being sent to Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/usage-information.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn strapi telemetry:disable\n```\n\n----------------------------------------\n\nTITLE: Using useRBAC Hook in Strapi v5\nDESCRIPTION: Updated implementation of the useRBAC hook in Strapi v5, which now takes a direct array of permission objects instead of a nested structure with named properties.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/admin-panel-rbac-store-updated.md#2025-04-09_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { allowedActions } = useRBAC([\n  { action: 'admin::something.main', subject: null }\n])\n\nconst canMain = allowedActions.canMain\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in Strapi Plugins\nDESCRIPTION: Configuration for JWT token expiration time in the Strapi Users & Permissions plugin. Sets token expiry to 7 days.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  'users-permissions': {\n    config: {\n      jwt: {\n        expiresIn: '7d',\n      },\n    },\n  },\n  // ...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // ...\n  'users-permissions': {\n    config: {\n      jwt: {\n        expiresIn: '7d',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running Codemods List Command\nDESCRIPTION: Terminal command to view all available codemods for the Strapi v5 upgrade\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade codemods ls\n```\n\n----------------------------------------\n\nTITLE: Listing All Cron Jobs in Strapi\nDESCRIPTION: This snippet demonstrates how to access the list of all currently running cron jobs in a Strapi application by accessing the jobs array on the strapi.cron object.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/use-cron-jobs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.cron.jobs\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Server for Different-Server Deployment (JavaScript)\nDESCRIPTION: JavaScript configuration for the Strapi server when deploying the admin panel on a different server. This sets the host, port, and backend URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/deployment.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  host: env(\"HOST\", \"0.0.0.0\"),\n  port: env.int(\"PORT\", 1337),\n  url: \"http://yourbackend.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Making Direct API Requests with Strapi Client's fetch Method\nDESCRIPTION: Example of using the fetch method provided by Strapi Client to make a direct GET request to the articles endpoint. The URL is relative to the base URL provided during initialization.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/client.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst result = await client.fetch('articles', { method: 'GET' });\n```\n\n----------------------------------------\n\nTITLE: Building Strapi Admin Panel for Production\nDESCRIPTION: These commands are used to build the Strapi admin panel for production deployment using different package managers (yarn, npm) and operating systems (including Windows with cross-env).\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/deployment.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production yarn build\n```\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production npm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cross-env\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"build:win\": \"cross-env NODE_ENV=production npm run build\",\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:win\n```\n\n----------------------------------------\n\nTITLE: Migrating CheckPagePermissions Component in TSX\nDESCRIPTION: Example showing how to migrate from CheckPagePermissions to Page.Protect from @strapi/strapi/admin for handling page-level permissions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { CheckPagePermissions } from '@strapi/helper-plugin';\n\nconst MyProtectedPage = () => {\n  return (\n    <CheckPagePermissions\n        permissions={[action: 'plugin::my-plugin.read']}\n    >\n      <MyPag />\n    </CheckPagePermissions>\n  );\n};\n\n// After\nimport { Page } from '@strapi/strapi/admin';\n\nconst MyProtectedPage = () => {\n  <Page.Protect permissions={[action: 'plugin::my-plugin.read']}>\n  return (\n    </Page.Protect>\n      <MyPage />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing RBAC Permissions in Strapi v4 (Redux Store)\nDESCRIPTION: Example showing how to access content-manager RBAC permissions using the Redux store in Strapi v4. This method accesses the store's content-manager_rbacManager section.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/admin-panel-rbac-store-updated.md#2025-04-09_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst cmPermissions useSelector(state => state['content-manager_rbacManager'])\n```\n\n----------------------------------------\n\nTITLE: Redux Payload Structure in Strapi 5\nDESCRIPTION: Example of the flattened payload structure for SET_INIT_DATA action in Strapi 5\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/redux-content-manager-app-state.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  authorizedCollectionTypeLinks: ContentManagerAppState['collectionTypeLinks'];\n  authorizedSingleTypeLinks: ContentManagerAppState['singleTypeLinks'];\n  components: ContentManagerAppState['components'];\n  contentTypeSchemas: ContentManagerAppState['models'];\n  fieldSizes: ContentManagerAppState['fieldSizes'];\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Example Using Node.js\nDESCRIPTION: Demonstrates how to upload files to Strapi's Upload API using Node.js. This example uses formdata-node and node-fetch libraries to create and send a form with a file to the upload endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FormData } from 'formdata-node';\\nimport fetch, { blobFrom } from 'node-fetch';\\n\\nconst file = await blobFrom('./1.png', 'image/png');\\nconst form = new FormData();\\n\\nform.append('files', file, \"1.png\");\\n\\nconst response = await fetch('http://localhost:1337/api/upload', {\\n  method: 'post',\\n  body: form,\\n});\n```\n\n----------------------------------------\n\nTITLE: File Upload Example Using Browser Form and Fetch API\nDESCRIPTION: Demonstrates how to upload files to Strapi's Upload API using a form and the Fetch API in a web browser. This example handles form submission and sends the form data to the upload endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form>\\n  <!-- Can be multiple files -->\\n  <input type=\"file\" name=\"files\" />\\n  <input type=\"submit\" value=\"Submit\" />\\n</form>\\n\\n<script type=\"text/javascript\">\\n  const form = document.querySelector('form');\\n\\n  form.addEventListener('submit', async (e) => {\\n    e.preventDefault();\\n\\n    await fetch('/api/upload', {\\n      method: 'post',\\n      body: new FormData(e.target)\\n    });\\n  });\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Strapi Development Server\nDESCRIPTION: Starts a Strapi application with auto-reloading enabled. Supports various options for customizing the development environment.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstrapi develop\noptions: [--no-build |--no-watch-admin |--browser |--debug |--silent]\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data Without Compression (npm)\nDESCRIPTION: This command exports Strapi data without compression using npm. The '--no-compress' option is used to disable the default gzip compression.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi export -- --no-compress\n```\n\n----------------------------------------\n\nTITLE: Enabling Telemetry Data Collection in Strapi\nDESCRIPTION: Command to re-enable data collection for a Strapi project after it was previously disabled. This relates to Strapi's usage information collection feature.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nstrapi telemetry:enable\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in TypeScript\nDESCRIPTION: TypeScript implementation of content-type lifecycle hooks in Strapi. Similar to the JavaScript version, this shows how to define event handlers for beforeCreate and afterCreate events.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  beforeCreate(event) {\n    const { data, where, select, populate } = event.params;\n\n    // let's do a 20% discount everytime\n    event.params.data.price = event.params.data.price * 0.8;\n  },\n\n  afterCreate(event) {\n    const { result, params } = event;\n\n    // do something to the result;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Plugin in Strapi\nDESCRIPTION: Commands to install the Strapi Documentation plugin using either yarn or npm package managers. This plugin automatically generates API documentation based on your content types and routes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @strapi/plugin-documentation\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @strapi/plugin-documentation\n```\n\n----------------------------------------\n\nTITLE: Exporting Only Entities and Relations in Strapi (Yarn)\nDESCRIPTION: This command exports only the content (entities and relations) from Strapi using Yarn. The '--only' option with 'content' value is used to specify which data types to include in the export.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi export --only content\n```\n\n----------------------------------------\n\nTITLE: Migrating AnErrorOccurred Component in TSX\nDESCRIPTION: Example showing how to migrate from the AnErrorOccurred component to using Page.Error from @strapi/strapi/admin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { AnErrorOccurred } from '@strapi/helper-plugin';\n\nconst MyPage = () => {\n  // ...\n\n  if (error) {\n    return <AnErrorOccurred />;\n  }\n\n  // ...\n};\n\n// After\nimport { Page } from '@strapi/strapi/admin';\n\nconst MyPage = () => {\n  // ...\n\n  if (error) {\n    return <Page.Error />;\n  }\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Strapi Preview\nDESCRIPTION: Environment variables needed in the .env file for the Preview feature, including the CLIENT_URL for the frontend application and an optional PREVIEW_SECRET for Next.js draft mode.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCLIENT_URL=https://your-frontend-app.com\nPREVIEW_SECRET=your-secret-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Size Limit in Plugin (JavaScript)\nDESCRIPTION: Sets the size limit for file uploads to 256MB in the Upload plugin configuration. This complements the middleware configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\\n  // ...\\n  upload: {\\n    config: {\\n      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes\\n    }\\n  }\\n};\n```\n\n----------------------------------------\n\nTITLE: Complex Populating with Filters in Entity Service API\nDESCRIPTION: Demonstrates complex populating using filters to select or populate nested relations or components, including field selection and sorting.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/populate.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  populate: {\n    relationA: {\n      filters: {\n        name: {\n          $contains: 'Strapi',\n        },\n      },\n    },\n\n    repeatableComponent: {\n      fields: ['someAttributeName'],\n      sort: ['someAttributeName'],\n      populate: {\n        componentRelationA: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Cloud Deployment Commands\nDESCRIPTION: Commands for deploying Strapi applications using the Cloud CLI.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/introduction-and-faq.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn deploy\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data with Encryption Key (Yarn)\nDESCRIPTION: This command exports Strapi data with a specified encryption key using Yarn. The '--key' option is used to provide the encryption key directly in the command.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi export --key my-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugins for Documentation Generation\nDESCRIPTION: Configuration example showing how to define which plugins should have documentation generated. By default, upload and users-permissions plugins are included, but you can customize this list.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"x-strapi-config\": {\n    \"plugins\": [\"upload\", \"users-permissions\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data Excluding Files and Content (Yarn)\nDESCRIPTION: This command exports Strapi data excluding files (assets) and content (entities and relations) using Yarn. The '--exclude' option with 'files,content' values is used to specify which data types to exclude from the export.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi export --exclude files,content\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Table for Creating New Workflow\nDESCRIPTION: Table showing configuration settings for creating a new workflow in Strapi, including workflow name, content-type association, and stages setup.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/review-workflows.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name   | Instructions                                                             |\n| -------------- | ------------------------------------------------------------------------ |\n| Workflow name  | Write a unique name of workflow.                                         |\n| Associated to  | (optional) Assign this workflow to one or more existing content-types.   |\n| Stages         | Add review stages (see [Adding a new stage](#adding-a-new-stage)).       |\n```\n\n----------------------------------------\n\nTITLE: Extending Upload Request Timeout in Bootstrap Function with TypeScript\nDESCRIPTION: Setting a custom request timeout for uploads in the Strapi bootstrap function using TypeScript, useful for allowing users with slow connections to upload large files.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n\n  //...\n\n  bootstrap({ strapi }) {\n    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):\n    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Size Limit in Plugin (TypeScript)\nDESCRIPTION: Sets the size limit for file uploads to 256MB in the Upload plugin configuration using TypeScript. This complements the middleware configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\\n  // ...\\n  upload: {\\n    config: {\\n      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes\\n    }\\n  }\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Core Service with Entity Service API (Strapi v4)\nDESCRIPTION: Example showing how to create and customize core service methods using Entity Service API in Strapi v4. Methods receive entityId as parameter and use super calls to access base functionality.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/core-service-methods-use-document-service.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::address.address', {\n\n    findOne(entityId, params) {\n      // customization\n      super.findOne(entityId, params);\n      \n      // or to show a bit more context\n      strapi.entityService.findOne(uid, entityId, params);\n    },\n    \n    update(entityId, params) {\n      // customization\n      super.update(entityId, params);\n    },\n    \n    delete(entityId, params) {\n      // customization\n      super.delete(entityId, params)\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Private AWS S3 Provider Implementation in TypeScript\nDESCRIPTION: Example implementation of a private AWS S3 provider with signed URL generation in TypeScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport = {\n  init: (config) => {\n    const s3 = new AWS.S3(config);\n\n    return {\n      async upload(file) {\n        // code to upload file to S3\n      },\n\n      async delete(file) {\n        // code to delete file from S3\n      },\n\n      async isPrivate() {\n        return true;\n      },\n\n      async getSignedUrl(file) {\n        const params = {\n          Bucket: config.params.Bucket,\n          Key: file.path,\n          Expires: 60, // URL expiration time in seconds\n        };\n\n        const signedUrl = await s3.getSignedUrlPromise(\"getObject\", params);\n        return { url: signedUrl };\n      },\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Forced Import with Encryption Key using Strapi CLI and NPM\nDESCRIPTION: Example of using the '--force' option to bypass prompts and the '--key' option for encrypted files with NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --force --key my-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Web Crawlers\nDESCRIPTION: This robots.txt file sets permissions for web crawlers to access the Strapi documentation site. It allows access to all pages and provides the location of the sitemap for improved indexing.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/static/robots.txt#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://docs.strapi.io/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Pushing Data to Remote Strapi Instance with NPM\nDESCRIPTION: Command to transfer data from a local Strapi instance to a remote destination using NPM, requiring the full admin URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi transfer -- --to destinationURL\n```\n\n----------------------------------------\n\nTITLE: Creating Core Service with Document Service API (Strapi 5)\nDESCRIPTION: Example showing how to create and customize core service methods using Document Service API in Strapi 5. Methods receive documentId as parameter and use super calls to access base functionality.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/core-service-methods-use-document-service.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::address.address', {\n\n    findOne(documentId, params) {\n      // customization\n      super.findOne(documentId, params);\n      \n      // or to show a bit more context\n      strapi.documents(uid).findOne(documentId, params);\n    },\n\n    update(documentId, params) {\n      // customization\n      super.update(documentId, params);\n    },\n\n    delete(documentId, params) {\n      // customization\n      super.delete(documentId, params)\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Strapi Transfer\nDESCRIPTION: Nginx server configuration to properly handle proxied requests during data transfers by ensuring all headers are forwarded correctly.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name <yourdomain>;\n    location / {\n        proxy_pass http://localhost:1337;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header Host $host;\n        include proxy_params;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Admin Preview Configuration\nDESCRIPTION: Initial admin configuration file setup for the Preview feature, including the enabled flag and basic structure for the configuration object.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ env }) => ({\n  // Other admin-related configurations go here\n  // (see docs.strapi.io/cms/configurations/admin-panel)\n  preview: {\n    enabled: true,\n    config: {\n      allowedOrigins: env('CLIENT_URL'),\n      async handler (uid, { documentId, locale, status }) {\n        // Handler implementation coming in step 3\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Upload Request Timeout in Bootstrap Function with JavaScript\nDESCRIPTION: Setting a custom request timeout for uploads in the Strapi bootstrap function using JavaScript, useful for allowing users with slow connections to upload large files.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\n  //...\n\n  bootstrap({ strapi }) {\n    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):\n    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Max File Size in Middleware (TypeScript)\nDESCRIPTION: Sets body middleware configuration to increase the maximum allowed file size for uploads to 256MB in a Strapi TypeScript application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/upload.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\\n  // ...\\n  {\\n    name: \"strapi::body\",\\n    config: {\\n      formLimit: \"256mb\", // modify form body\\n      jsonLimit: \"256mb\", // modify JSON body\\n      textLimit: \"256mb\", // modify text body\\n      formidable: {\\n        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size\\n      },\\n    },\\n  },\\n  // ...\\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in Strapi Lifecycle Hooks\nDESCRIPTION: Example of retrieving the request context within a Strapi content type lifecycle hook. This shows how to access user information during the beforeUpdate lifecycle event of an article content type.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/requests-responses.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  beforeUpdate() {\n    const ctx = strapi.requestContext.get();\n\n    console.log('User info in service: ', ctx.state.user);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Strapi v4 Chronological Sorting with id\nDESCRIPTION: Example showing how to sort entries chronologically using the Entity Service API in Strapi v4 by sorting on the 'id' field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/sort-by-id.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.findMany('api::article.article', {\n  sort: 'id',\n});\n```\n\n----------------------------------------\n\nTITLE: Using documentId Instead of id for ContentType Queries\nDESCRIPTION: Example showing how to use documentId instead of id for content type queries in the migration process for both queries and mutations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated.md#2025-04-09_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  restaurants {\n    data {\n      documentId\n      attributes {\n        title\n        image {\n          data {\n            documentId\n            attributes {\n              url\n            }\n          }\n        }\n        images {\n          data {\n            documentId\n            attributes {\n              url\n            }\n          }\n        }\n        xToOneRelation {\n          data {\n            documentId\n            attributes {\n            \n            }\n        }\n        xToManyRelation {\n          data {\n            documentId\n            attributes {\n              field\n            }\n          }\n        }\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  mutation {\n    updateRestaurant(\n      documentId: \"some-doc-id\",\n      data: { title: \"My great restaurant\" }\n    ) {\n      data {\n        documentId\n        attributes {\n          title\n          image {\n            data {\n              documentId\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bypassing Transfer Prompts with Force Flag (Yarn)\nDESCRIPTION: Command that bypasses all confirmation prompts during data transfer using the --force flag with Yarn, requiring explicit token inclusion.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi transfer --to https://example.com/admin --to-token my-transfer-token --force\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Image Breakpoints in TypeScript\nDESCRIPTION: Customizing the responsive image breakpoints for the Strapi Upload plugin in TypeScript, overriding the default sizes with custom dimensions for generated images.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ({ env }) => ({\n  upload: {\n    config: {\n      breakpoints: {\n        xlarge: 1920,\n        large: 1000,\n        medium: 750,\n        small: 500,\n        xsmall: 64\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strapi Body Middleware for Larger File Uploads in JavaScript\nDESCRIPTION: Configuration for the Strapi body middleware to support larger file uploads by increasing form limits, JSON limits, text limits, and maximum file size in JavaScript.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/media-library.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  // ...\n  {\n    name: \"strapi::body\",\n    config: {\n      formLimit: \"256mb\", // modify form body\n      jsonLimit: \"256mb\", // modify JSON body\n      textLimit: \"256mb\", // modify text body\n      formidable: {\n        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size\n      },\n    },\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Strapi 5 Chronological Sorting with createdAt\nDESCRIPTION: Example showing how to sort documents chronologically using the Document Service API in Strapi 5 by sorting on the 'createdAt' field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/sort-by-id.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documentService.findMany('api::article.article', {\n  sort: 'createdAt',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Plugin in Strapi (JavaScript)\nDESCRIPTION: Basic configuration for the Sentry plugin in the Strapi plugins.js file. It sets up the DSN and enables sending metadata.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  sentry: {\n    enabled: true,\n    config: {\n      dsn: env('SENTRY_DSN'),\n      sendMetadata: true,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Moving to _connection Without Changing Response Format\nDESCRIPTION: Example showing how to use the _connection suffix for collection fields to maintain the v4 compatible response format during migration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated.md#2025-04-09_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # collection fields can be renamed to _connection to get a v4 compat response\n  restaurants_connection {\n    data {\n      id\n      attributes {\n        title\n        image {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n        # collection fields can be renamed to _connection to get a v4 compat response\n        images_connection {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n        xToOneRelation {\n          data {\n            id\n            attributes {\n              field\n            }\n          }\n        }\n        # collection fields can be renamed to _connection to get a v4 compat response\n        xToManyRelation_connection {\n          data {\n            id\n            attributes {\n              field\n            }\n          }\n        }\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating with Update Operation\nDESCRIPTION: Example of using populate parameter while updating an existing document\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documents(\"api::article.article\").update({\n  documentId: \"cjld2cjxh0000qzrmn831i7rn\",\n  data: {\n    title: \"Test Article Update\",\n  },\n  populate: [\"headerImage\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Strapi Telemetry with NPM\nDESCRIPTION: Command to disable the default data collection feature in Strapi using NPM as the package manager. This prevents any usage data from being sent to Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/usage-information.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run strapi telemetry:disable\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data Without Encryption (Yarn)\nDESCRIPTION: This command exports Strapi data without encryption using Yarn. The '--no-encrypt' option is used to disable the default encryption process.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi export --no-encrypt\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Configuration in Strapi v5\nDESCRIPTION: Demonstrates the new uid notation using :: instead of dots for accessing model configurations in Strapi version 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/model-config-path-uses-uid.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nstrapi.config.get('plugin::upload.somesetting');\nif ( strapi.config.has('plugin::upload.somesetting') ) {\n  strapi.config.set('plugin::upload.somesetting', false);\n}\n```\n\n----------------------------------------\n\nTITLE: Watching a Strapi Plugin for Changes\nDESCRIPTION: Command to watch the plugin source code for changes and rebuild it automatically. This is useful during plugin implementation and testing with an application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugin-sdk.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstrapi-plugin watch\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for API Token Salt\nDESCRIPTION: Configuration of the API token salt using environment variables. The salt is used for generating API tokens and is stored in the .env file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/api-tokens.md#2025-04-09_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nAPI_TOKEN_SALT=your_salt_value\n```\n\n----------------------------------------\n\nTITLE: Configuring Transfer Token Salt in TypeScript\nDESCRIPTION: TypeScript configuration for the transfer token salt in the admin.ts file. This salt is necessary for enabling the Data Management feature and token generation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/data-management.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // …\n  transfer: { \n    token: { \n      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),\n    } \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Sentry Plugin in Strapi (JavaScript)\nDESCRIPTION: Configuration to completely disable the Sentry plugin in the Strapi plugins.js file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // …\n  sentry: {\n    enabled: false,\n  },\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Provider in JavaScript\nDESCRIPTION: JavaScript configuration for integrating Mailgun as an email provider in Strapi Cloud. This example shows how to set up the API key, domain, and optional regional URL as environment variables.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'mailgun',\n      providerOptions: {\n        key: env('MAILGUN_API_KEY'), // Required\n        domain: env('MAILGUN_DOMAIN'), // Required\n        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'\n      },\n      settings: {\n        defaultFrom: 'myemail@protonmail.com',\n        defaultReplyTo: 'myemail@protonmail.com',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Registering Lifecycle Subscribers\nDESCRIPTION: JavaScript code demonstrating how to programmatically register lifecycle event subscribers in Strapi's bootstrap function. This approach allows for dynamic registration of event handlers and state management between events.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/models.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  async bootstrap({ strapi }) {\n// registering a subscriber\n    strapi.db.lifecycles.subscribe({\n      models: [], // optional;\n\n      beforeCreate(event) {\n        const { data, where, select, populate } = event.params;\n\n        event.state = 'doStuffAfterWards';\n      },\n\n      afterCreate(event) {\n        if (event.state === 'doStuffAfterWards') {\n        }\n\n        const { result, params } = event;\n\n        // do something to the result\n      },\n    });\n\n    // generic subscribe for generic handling\n    strapi.db.lifecycles.subscribe((event) => {\n      if (event.action === 'beforeCreate') {\n        // do something\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using findMany() Method in Strapi 5 Document Service API\nDESCRIPTION: This code snippet shows how to use the findMany() method from the Document Service API in Strapi 5, which replaces the findPage() method from the deprecated Entity Service API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/no-find-page-in-document-service.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nstrapi.documents(\"api::article.article\").findMany({\n  limit: 10,\n  start: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Content-Type Schema in content-types/[your-content-type-name]/index.js (JavaScript)\nDESCRIPTION: Code snippet showing how to export a content-type schema in the index.js file within the content-type folder of a Strapi plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst schema = require('./schema');\n\nmodule.exports = {\n  schema,\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Strapi Server in Production Mode\nDESCRIPTION: These commands demonstrate how to start the Strapi server in production mode using different package managers (yarn, npm) and operating systems (including Windows with cross-env).\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/deployment.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production yarn start\n```\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=production npm run start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cross-env\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"start:win\": \"cross-env NODE_ENV=production npm start\",\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:win\n```\n\n----------------------------------------\n\nTITLE: Components Field Configuration Table\nDESCRIPTION: Base settings table for Components field type showing name, component selection and type configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-type-builder.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name       | Instructions                                                    |\n|--------------------|-----------------------------------------------------------------|\n| Name               | Write the name of the component for the content-type.           |\n| Select a component | When using an existing component only - Select from the drop-down list an existing component. |\n| Type               | Choose between *Repeatable component* to be able to use several times the component for the content-type, or *Single component* to limit to only one time the use of the component. |\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Schema Configuration in Strapi 5 JavaScript\nDESCRIPTION: Example of updating GraphQL schema configuration when migrating to Apollo Server v4 in Strapi 5. This snippet shows how to separate typeDefs and resolvers.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  graphql: {\n    config: {\n      typeDefs: `\n        type Query {\n          hello: String\n        }\n      `,\n      resolvers: {\n        Query: {\n          hello: () => 'Hello World!'\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sentry Service in Strapi\nDESCRIPTION: Examples of how to use the Sentry service in a Strapi application, including sending errors and accessing the Sentry instance.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  // Your code here\n} catch (error) {\n  // Either send a simple error\n  strapi\n    .plugin('sentry')\n    .service('sentry')\n    .sendError(error);\n\n  // Or send an error with a customized Sentry scope\n  strapi\n    .plugin('sentry')\n    .service('sentry')\n    .sendError(error, (scope, sentryInstance) => {\n      // Customize the scope here\n      scope.setTag('my_custom_tag', 'Tag value');\n    });\n  throw error;\n}\n\nconst sentryInstance = strapi\n  .plugin('sentry')\n  .service('sentry')\n  .getInstance();\n```\n\n----------------------------------------\n\nTITLE: Configuring register.allowedFields in Strapi 4\nDESCRIPTION: In Strapi 4, users could set users-permissions.register.allowedFields in the config/plugins.js file to specify which extra fields to accept on the registration endpoint. If not set, all user fields were accepted by default.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/register-allowed-fields.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// config/plugins.js\n{\n  'users-permissions': {\n    config: {\n      register: {\n        allowedFields: ['picture']\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Purest for Discord OAuth Provider in Strapi\nDESCRIPTION: Creates a Purest object configuration for Discord that establishes a generic interface to interact with Discord's REST API. This setup defines the API endpoint and authentication method using bearer token.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ncase 'discord': {\n  const discord = new Purest({\n    provider: 'discord',\n    config: {\n      'discord': {\n        'https://discordapp.com/api/': {\n          '__domain': {\n            'auth': {\n              'auth': {'bearer': '[0]'}\n            }\n          },\n          '{endpoint}': {\n            '__path': {\n              'alias': '__default'\n            }\n          }\n        }\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Themed Image Component in React/JSX\nDESCRIPTION: This snippet demonstrates the use of a ThemedImage component to display different versions of an image based on the light or dark theme. It includes alt text and source paths for both themes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/users-roles-permissions/introduction-to-users-roles-permissions.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ThemedImage\n  alt=\"Users, permissions and roles settings\"\n  sources={{\n    light: '/img/assets/users-permissions/users-roles-permissions-settings.png',\n    dark: '/img/assets/users-permissions/users-roles-permissions-settings_DARK.png',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Published Document with findOne()\nDESCRIPTION: Query to fetch a specific published document using the Document Service API by providing documentId and status parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findOne({\n  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',\n  status: 'published'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring register.allowedFields in Strapi 5\nDESCRIPTION: In Strapi 5, an undefined allowedFields is treated as an empty array, and no fields are accepted by default. Users must explicitly choose to allow extra fields on registration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/register-allowed-fields.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// config/plugins.js\n{\n  'users-permissions': {\n    config: {\n      register: {\n        allowedFields: ['picture', 'otherField']\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Callout Notice in Markdown for Strapi 5 Documentation\nDESCRIPTION: This snippet demonstrates how to create a callout notice in markdown format, likely used in documentation systems. It uses a custom syntax with triple colons and emoji to create a visually distinct message.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/_not-updated-to-v5.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::callout 🏗 Work in progress\nThe content of this page might not be fully up-to-date with Strapi 5 yet.\n:::\n```\n\n----------------------------------------\n\nTITLE: Excluding Assets from Import using Strapi CLI and NPM\nDESCRIPTION: Example of using the '--exclude' flag to remove assets from an import with NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --exclude files\n```\n\n----------------------------------------\n\nTITLE: UID Field Configuration Table\nDESCRIPTION: Base settings table for UID field type showing name and attached field configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-type-builder.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name   | Instructions                                                    |\n|----------------|-----------------------------------------------------------------|\n| Name           | Write the name of the UID field. It must not contain special characters or spaces.                     |\n| Attached field | Choose what existing field to attach to the UID field. Choose *None* to not attach any specific field. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Plugin with settings.json\nDESCRIPTION: Example configuration for the Documentation plugin in Strapi. This JSON file defines metadata about your API, servers, security requirements, and which plugins should have documentation generated.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/documentation.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"DOCUMENTATION\",\n    \"description\": \"\",\n    \"termsOfService\": \"YOUR_TERMS_OF_SERVICE_URL\",\n    \"contact\": {\n      \"name\": \"TEAM\",\n      \"email\": \"contact-email@something.io\",\n      \"url\": \"mywebsite.io\"\n    },\n    \"license\": {\n      \"name\": \"Apache 2.0\",\n      \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"x-strapi-config\": {\n    \"plugins\": [\"upload\", \"users-permissions\"],\n    \"path\": \"/documentation\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:1337/api\",\n      \"description\": \"Development server\"\n    }\n  ],\n  \"externalDocs\": {\n    \"description\": \"Find out more\",\n    \"url\": \"https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html\"\n  },\n  \"security\": [\n    {\n      \"bearerAuth\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Review Workflow Stage Update Event in Strapi\nDESCRIPTION: This snippet illustrates the payload structure for the 'review-workflows.updateEntryStage' event in Strapi. It is triggered when content is moved to a new review stage and is only available with the Enterprise plan.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/webhooks.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"review-workflows.updateEntryStage\",\n  \"createdAt\": \"2023-06-26T15:46:35.664Z\",\n  \"model\": \"model\",\n  \"uid\": \"uid\",\n  \"entity\": {\n    \"id\": 2\n  },\n  \"workflow\": {\n    \"id\": 1,\n    \"stages\": {\n      \"from\": {\n        \"id\": 1,\n        \"name\": \"Stage 1\"\n      },\n      \"to\": {\n        \"id\": 2,\n        \"name\": \"Stage 2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating request to useFetchClient in TSX\nDESCRIPTION: Example showing how to replace the request utility with the useFetchClient hook from @strapi/strapi/admin package, demonstrating both setup and usage patterns.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { request } from '@strapi/helper-plugin';\n\nrequest(`/${pluginId}/settings/config`, { method: 'GET' });\n\n// After\nimport { useFetchClient } from '@strapi/strapi/admin';\n\nconst { get } = useFetchClient();\nget(`/${pluginId}/settings/config`);\n```\n\n----------------------------------------\n\nTITLE: Replacing pxToRem Utility in TSX\nDESCRIPTION: Example showing how to replace the pxToRem utility which has been removed from @strapi/helper-plugin with direct string conversion or template literals.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\npxToRem(\n  32\n) // After\n`${32 / 16}rem`;\n// or\n('2rem');\n```\n\n----------------------------------------\n\nTITLE: Accessing Direct Knex Functions in Strapi\nDESCRIPTION: Example showing how to access knex functions directly through the Strapi database connection. This represents the lowest-level database access method in Strapi v4.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/entity-query-knex.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.connection\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data Excluding Files and Content (npm)\nDESCRIPTION: This command exports Strapi data excluding files (assets) and content (entities and relations) using npm. The '--exclude' option with 'files,content' values is used to specify which data types to exclude from the export.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi export -- --exclude files,content\n```\n\n----------------------------------------\n\nTITLE: Importing ScreenshotNumberReference Component in JSX\nDESCRIPTION: This code snippet imports a custom React component called ScreenshotNumberReference from a specific file path. This component is likely used to add numbered references to screenshots in the documentation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-type-builder.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';\n```\n\n----------------------------------------\n\nTITLE: Enabling CRON Jobs in Server Configuration in TypeScript\nDESCRIPTION: Shows how to enable CRON jobs in the Strapi server configuration file by importing the tasks and setting the 'enabled' flag to true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport cronTasks from \"./cron-tasks\";\n\nexport default ({ env }) => ({\n  host: env(\"HOST\", \"0.0.0.0\"),\n  port: env.int(\"PORT\", 1337),\n  cron: {\n    enabled: true,\n    tasks: cronTasks,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Interactive Project Structure Component in React\nDESCRIPTION: Import statement for the ProjectStructure.js component used to visualize the Strapi project structure interactively.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/project-structure.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport InteractiveProjectStructure from '@site/src/components/ProjectStructure.js'\n```\n\n----------------------------------------\n\nTITLE: Registering Color Picker Custom Field in Strapi Admin Panel\nDESCRIPTION: Example implementation of registering a color picker custom field in Strapi's admin panel. The code demonstrates how to use app.customFields.register() to create a color field that stores values as strings and includes necessary configurations like labels, descriptions, and component imports.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/custom-fields.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ColorPickerIcon from \"./components/ColorPicker/ColorPickerIcon\";\n\nexport default {\n  register(app) {\n    // ... app.addMenuLink() goes here\n    // ... app.registerPlugin() goes here\n\n    app.customFields.register({\n      name: \"color\",\n      pluginId: \"color-picker\", // the custom field is created by a color-picker plugin\n      type: \"string\", // the color will be stored as a string\n      intlLabel: {\n        id: \"color-picker.color.label\",\n        defaultMessage: \"Color\",\n      },\n      intlDescription: {\n        id: \"color-picker.color.description\",\n        defaultMessage: \"Select any color\",\n      },\n      icon: ColorPickerIcon, // don't forget to create/import your icon component\n      components: {\n        Input: async () =>\n          import(\n            /* webpackChunkName: \"input-component\" */ \"./components/Input\"\n          ),\n      },\n      options: {\n        // declare options here\n      },\n    });\n  },\n\n  // ... bootstrap() goes here\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Redirect Converter Script\nDESCRIPTION: Basic command to run the redirect format converter script using default settings\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode docusaurus-vercel-converter.js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager. If installation fails, users may need to delete yarn.lock and node_modules directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/install-npm-yarn.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Convert Vercel to Module Format Example\nDESCRIPTION: Command example for converting from Vercel format to module format\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode docusaurus-vercel-converter.js --input=vercel.json --output=redirects.js --mode=to-from\n```\n\n----------------------------------------\n\nTITLE: Resending Email Confirmation Request in Strapi\nDESCRIPTION: This code sends a request to resend the email confirmation to a user. It uses the Strapi authentication API to trigger sending a new confirmation email to the specified user's email address.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/users-and-permissions-providers/new-provider-guide.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\n// Request API.\naxios\n  .post(`http://localhost:1337/api/auth/send-email-confirmation`, {\n    email: 'user@strapi.io', // user's email\n  })\n  .then(response => {\n    console.log('Your user received an email');\n  })\n  .catch(error => {\n    console.error('An error occurred:', error.response);\n  });\n```\n\n----------------------------------------\n\nTITLE: Pagination Error Example\nDESCRIPTION: Shows how to throw a PaginationError with a custom message for handling pagination limits.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.PaginationError('Exceeded maximum pageSize limit');\n```\n\n----------------------------------------\n\nTITLE: CRON Job with Start and End Times in TypeScript\nDESCRIPTION: Demonstrates how to configure a CRON job in TypeScript with specific start and end times. This job runs continuously between the defined time bounds.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  myJob: {\n    task: ({ strapi }) => {\n      /* Add your own logic here */\n    },\n    // only run once after 10 seconds\n    options: {\n      rule: \"* * * * * *\",\n      // start 10 seconds from now\n      start: new Date(Date.now() + 10000),\n      // end 20 seconds from now\n      end: new Date(Date.now() + 20000),\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Single RBAC Condition in Strapi Bootstrap Function\nDESCRIPTION: Demonstrates how to register a single RBAC condition in the Strapi bootstrap function.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/rbac.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async () => {\n  await strapi.admin.services.permission.conditionProvider.register({\n    displayName: 'Billing amount under 10K',\n    name: 'billing-amount-under-10k',\n    plugin: 'admin',\n    handler: { amount: { $lt: 10000 } },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing destroy() Lifecycle Function in TypeScript\nDESCRIPTION: Example of implementing the destroy() lifecycle function for a Strapi plugin in TypeScript. This function is called to cleanup the plugin when the Strapi instance is destroyed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Strapi Admin Panel with Yarn\nDESCRIPTION: Command to rebuild the Strapi admin panel using Yarn package manager. This should be run in the project root directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/build-npm-yarn.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Checker with JSON\nDESCRIPTION: JSON configuration file that specifies which folders and patterns to exclude from the redirect analysis. Used to customize the script's behavior.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/check-redirections-existence/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"excludeFolders\": [\n        \"cloud\",\n        \"legacy\",\n        \"internal\"\n    ],\n    \"exclude\": [\n        \"/test-\",\n        \"/draft/\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Application Error Example\nDESCRIPTION: Demonstrates throwing an ApplicationError with a custom message and details object.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new errors.ApplicationError('Something went wrong', { foo: 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Migrating SearchURLQuery to SearchInput in React/TypeScript\nDESCRIPTION: Shows how to update the import for the SearchURLQuery component, which has been renamed to SearchInput and moved to @strapi/strapi/admin package.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { SearchURLQuery } from '@strapi/helper-plugin';\n\n// After\nimport { SearchInput } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data Without Encryption (npm)\nDESCRIPTION: This command exports Strapi data without encryption using npm. The '--no-encrypt' option is used to disable the default encryption process.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi export -- --no-encrypt\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Avatars in Markdown\nDESCRIPTION: This snippet demonstrates how to render a grid of contributor avatars with links to their GitHub profiles using Markdown and HTML. It includes styling for circular avatars and hover effects.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/release-notes.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div>\n<a href=\"https://github.com/Boegie19\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/34578426?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"Boegie19\"/>\n</a>\n<a href=\"https://github.com/Jimimimi\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/1778990?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"Jimimimi\"/>\n</a>\n<a href=\"https://github.com/kibwashere\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/3426213?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"kibwashere\"/>\n</a>\n<a href=\"https://github.com/lucasboilly\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/45385696?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"lucasboilly\"/>\n</a>\n<a href=\"https://github.com/pwizla\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/4233866?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"pwizla\"/>\n</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Default Locale\nDESCRIPTION: Configuration of the default locale using the STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE environment variable. The value should be a valid ISO country code from the pre-defined locales list.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/internationalization.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSTRAPI_PLUGIN_I18N_INIT_LOCALE_CODE=en\n```\n\n----------------------------------------\n\nTITLE: Running Redirect Checker Script\nDESCRIPTION: Bash command to execute the redirect checker script after configuring and extracting URLs.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/check-redirections-existence/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/check-redirects.js\n```\n\n----------------------------------------\n\nTITLE: Extending Plugin Backend in JavaScript/TypeScript\nDESCRIPTION: Demonstrates how to extend a Strapi plugin's backend by modifying controllers, adding policies, and extending routes within the strapi-server.js|ts file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugins-extension.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (plugin) => {\n  plugin.controllers.controllerA.find = (ctx) => {};\n\n  plugin.policies[newPolicy] = (ctx) => {};\n\n  plugin.routes['content-api'].routes.push({\n    method: 'GET',\n    path: '/route-path',\n    handler: 'controller.action',\n  });\n\n  return plugin;\n};\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Redirect Configuration Formats\nDESCRIPTION: JavaScript code showing different supported formats for configuring redirects in Docusaurus, including single redirects, array format, and multiple source paths.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/check-redirections-existence/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Object format\n{\n  from: '/old-path',\n  to: '/new-path',\n}\n\n// Array format\n['/old-path', '/new-path']\n\n// Multiple 'from' paths\n{\n  from: ['/old-path', '/another-old-path'],\n  to: '/new-path',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Redirects in JSON\nDESCRIPTION: Example structure of vercel.json file demonstrating Vercel redirect configuration using source/destination format with permanent flag.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/remove-redirects-vercel-duplicates/README.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/old-path\",\n      \"destination\": \"/new-path\",\n      \"permanent\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Migrations in TypeScript Database Config\nDESCRIPTION: Database configuration in TypeScript showing how to enable TypeScript migrations by setting useTypescriptMigrations to true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-migrations.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  connection: {\n    // Your database connection settings\n  },\n  settings: {\n    useTypescriptMigrations: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key (Windows)\nDESCRIPTION: This command generates a strong encryption key using Node.js crypto module on Windows systems. It outputs a base64-encoded random string of 48 bytes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode -p \"require('crypto').randomBytes(48).toString('base64');\"\n```\n\n----------------------------------------\n\nTITLE: Defining Policies in Strapi Plugin (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define and export policies in a Strapi plugin using TypeScript. It includes the main plugin file, the policies index, and an example policy implementation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/server-api.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n//…\nimport policies from './policies';\n//…\n\nmodule.exports = {\n  //…\n  policies,\n  //…\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport policyA from './policy-a';\nimport policyB from './policy-b';\n\nexport default {\n  policyA,\n  policyB,\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (policyContext, config, { strapi }) => {\n  if (ctx.state.user && ctx.state.user.isActive) {\n    return true;\n  }\n\n  return false;\n};\n```\n\n----------------------------------------\n\nTITLE: Populating All Relations One Level Deep\nDESCRIPTION: Example of using wildcard (*) to populate all relations one level deep in a findMany query\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/populate.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::article.article\").findMany({\n  populate: \"*\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values\nDESCRIPTION: Demonstrates how to access configuration values using the strapi.config provider with dot notation and default values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/guides/access-configuration-values.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.config.get('server.host', 'defaultValueIfUndefined');\n```\n\n----------------------------------------\n\nTITLE: Pulling Data from Remote Strapi Instance with NPM\nDESCRIPTION: Command to retrieve data from a remote Strapi instance to a local destination using NPM, requiring the full admin URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi transfer -- --from remoteURL\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Content-Types in server/index.js (JavaScript)\nDESCRIPTION: Code snippet showing how to import content-types in the server/index.js file of a Strapi plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/guides/store-and-access-data.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst register = require('./register');\nconst bootstrap = require('./bootstrap');\nconst destroy = require('./destroy');\nconst config = require('./config');\nconst contentTypes = require('./content-types');\nconst controllers = require('./controllers');\nconst routes = require('./routes');\nconst middlewares = require('./middlewares');\nconst policies = require('./policies');\nconst services = require('./services');\n\nmodule.exports = {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Data from File using Strapi CLI with NPM\nDESCRIPTION: Example of the minimum command to import data from a file in the Strapi project root using NPM.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/import.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc\n```\n\n----------------------------------------\n\nTITLE: Counting Entries with count() in Strapi\nDESCRIPTION: This example demonstrates how to use the count() method to count entries matching specific criteria in Strapi. It returns the number of matching entries.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/bulk-operations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = await strapi.db.query(\"api::blog.article\").count({\n  where: {\n    title: {\n      $startsWith: \"v3\",\n    },\n  },\n});\n\n// 12\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Email Service with Nodemailer in JavaScript\nDESCRIPTION: Example of a custom email service for a restaurant API that uses Nodemailer to send newsletters. Creates a reusable transporter object with SMTP configuration and exports a sendNewsletter function through createCoreService.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/services.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createCoreService } = require('@strapi/strapi').factories;\nconst nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)\n\n// Create reusable transporter object using SMTP transport.\nconst transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: 'user@gmail.com',\n    pass: 'password',\n  },\n});\n\nmodule.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) => ({\n  sendNewsletter(from, to, subject, text) {\n    // Setup e-mail data.\n    const options = {\n      from,\n      to,\n      subject,\n      text,\n    };\n\n    // Return a promise of the function that sends the email.\n    return transporter.sendMail(options);\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CRON Job with Object Format in TypeScript\nDESCRIPTION: Shows how to define a basic CRON job in TypeScript using the object format with a task function and rule options. This example runs every Monday at 1am.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/cron.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  /**\n   * Simple example.\n   * Every monday at 1am.\n   */\n\n  myJob: {\n    task: ({ strapi }) => {\n      // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).\n    },\n    options: {\n      rule: \"0 0 1 * * 1\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Data with Encryption Key (npm)\nDESCRIPTION: This command exports Strapi data with a specified encryption key using npm. The '--key' option is used to provide the encryption key directly in the command.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/export.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi export -- --key my-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Executing Data Transfer with Yarn in Strapi\nDESCRIPTION: Command to initiate the data transfer from the source Strapi instance to the target instance using Yarn, specifying the target admin URL.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi transfer --to http://localhost:1337/admin\n```\n\n----------------------------------------\n\nTITLE: Registering Color Picker Custom Field in Strapi Server Plugin\nDESCRIPTION: Implementation of a color picker custom field registration in a dedicated plugin using the server register lifecycle. Defines a color field of type string with resizable input.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/custom-fields.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"use strict\";\n\nmodule.exports = ({ strapi }) => {\n  strapi.customFields.register({\n    name: \"color\",\n    plugin: \"color-picker\",\n    type: \"string\",\n    inputSize: {\n      // optional\n      default: 4,\n      isResizable: true,\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Building Strapi Production Docker Container\nDESCRIPTION: This command builds a production Docker image for a Strapi project. It sets the NODE_ENV to production and allows for setting the STRAPI_URL. The image is tagged with a name and version.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/docker.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build \\\n  --build-arg NODE_ENV=production \\\n  # --build-arg STRAPI_URL=https://api.example.com \\ # Uncomment to set the Strapi Server URL\n  -t mystrapiapp:latest \\ # Replace with your image name\n  -f Dockerfile.prod .\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Strapi Project\nDESCRIPTION: Series of commands to initialize a Git repository for the Strapi project, add all files, and commit them for version control before cloning.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"first commit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Router in TypeScript\nDESCRIPTION: Example of configuring a core router in TypeScript using createCoreRouter factory function with prefix, route filtering, and configuration options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { factories } from '@strapi/strapi'; \n\nexport default factories.createCoreRouter('api::restaurant.restaurant', {\n  prefix: '',\n  only: ['find', 'findOne'],\n  except: [],\n  config: {\n    find: {\n      auth: false,\n      policies: [],\n      middlewares: [],\n    },\n    findOne: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Strapi with pnpm\nDESCRIPTION: Command to create a new Strapi project using pnpm package manager. Note that this method is not recommended for projects that will be hosted on Strapi Cloud.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/installation/cli.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create strapi\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors in Model Lifecycles (TypeScript)\nDESCRIPTION: TypeScript version of throwing errors in Strapi model lifecycles using the ApplicationError class. It shows how to prevent an entity from being created based on a condition.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/error-handling.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@strapi/utils';\nconst { ApplicationError } = errors;\n\nexport default {\n  beforeCreate(event) {\n    let okay = false;\n\n    // Throwing an error will prevent the entity from being created\n    if (!okay) {\n      throw new errors.ApplicationError('Something went wrong', { foo: 'bar' });\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Type Definitions\nDESCRIPTION: Creates TypeScript typings for project schemas. Options include debug mode for detailed output, silent mode to suppress logs, and specifying an output directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nstrapi ts:generate-types\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi ts:generate-types --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi ts:generate-types --silent\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi ts:generate-types -o <path>\n```\n\n----------------------------------------\n\nTITLE: Installing passport-github2 dependency for Strapi SSO\nDESCRIPTION: This snippet shows how to install the passport-github2 package using either yarn or npm. This package is required for implementing GitHub SSO in Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/configurations/sso-providers/github.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add passport-github2\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save passport-github2\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Migrations in JavaScript Database Config\nDESCRIPTION: Database configuration in JavaScript showing how to enable TypeScript migrations by setting useTypescriptMigrations to true.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/database-migrations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  connection: {\n    // Your database connection settings\n  },\n  settings: {\n    useTypescriptMigrations: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Configurable Policy in Strapi\nDESCRIPTION: Example of an API-specific policy that uses a configuration object to check if the user's role matches the configured role. Returns true to allow access or false to block it.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/policies.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (policyContext, config, { strapi }) => {\n    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration\n      return true;\n    }\n\n    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (policyContext, config, { strapi }) => {\n    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration\n      return true;\n    }\n\n    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n  };\n```\n\n----------------------------------------\n\nTITLE: Transferring Data Between Strapi Instances\nDESCRIPTION: Transfers data from one Strapi instance to another using a transfer token. This command allows moving content, files, and configuration between different Strapi deployments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstrapi transfer --to http://example.com/admin --to-token my-transfer-token\n```\n\n----------------------------------------\n\nTITLE: Generating Debug Reports with Strapi\nDESCRIPTION: Prints debug information useful for troubleshooting and required when reporting issues. Options allow including project UUID, dependencies, or all available data.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstrapi report --uuid --dependencies\n```\n\nLANGUAGE: bash\nCODE:\n```\nstrapi report --all\n```\n\n----------------------------------------\n\nTITLE: Migrating Table Component Import in React/TypeScript\nDESCRIPTION: Shows how to update the import for the Table component, which should now be imported from @strapi/strapi/admin instead of @strapi/helper-plugin. The usage remains similar, but some props may have changed.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nimport { Table } from '@strapi/helper-plugin';\n\nconst MyComponent = () => {\n  return (\n    <Table colCount={2} rowCount={2}>\n      <Thead>\n        <Tr>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {`Name`}\n            </Typography>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {`Description`}\n            </Typography>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {data?.map(({ name, description }) => {\n          return (\n            <Tr key={name}>\n              <Td>\n                <Typography\n                  textColor=\"neutral800\"\n                  variant=\"omega\"\n                  fontWeight=\"bold\"\n                >\n                  {name}\n                </Typography>\n              </Td>\n              <Td>\n                <Typography textColor=\"neutral800\">{description}</Typography>\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </Table>\n  );\n};\n\n// After\nimport { Table } from '@strapi/strapi/admin';\n```\n\n----------------------------------------\n\nTITLE: Listing Available Strapi CLI Commands\nDESCRIPTION: Command to display a list of all available Strapi CLI commands. This helps users discover and understand the different commands available in the Strapi command-line interface.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nstrapi help\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Content Types\nDESCRIPTION: Displays a list of all existing content types defined in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nstrapi content-types:list\n```\n\n----------------------------------------\n\nTITLE: Enabling Preview Feature in Strapi Config\nDESCRIPTION: Basic configuration to enable the Preview feature in the admin configuration file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// …\npreview: {\n  enabled: true,\n    // …\n}\n// …\n```\n\n----------------------------------------\n\nTITLE: Exporting Strapi Project Data\nDESCRIPTION: Exports project data with options for encryption, compression, and selective data export. The command creates a .tar file by default.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstrapi export\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Services\nDESCRIPTION: Displays a list of all registered services in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nstrapi services:list\n```\n\n----------------------------------------\n\nTITLE: Verifying a Strapi Plugin Before Publishing\nDESCRIPTION: Command to verify the output of a plugin before publishing it. This helps ensure the plugin meets requirements and is ready for distribution.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugin-sdk.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nstrapi-plugin verify\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields with findFirst() in Strapi's Document Service API\nDESCRIPTION: Shows how to use the 'fields' parameter to select specific fields when finding the first matching document. This example retrieves only the 'name' and 'description' fields of the first restaurant document.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/fields.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst document = await strapi.documents(\"api::restaurant.restaurant\").findFirst({\n  fields: [\"name\", \"description\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Policies in Core Router\nDESCRIPTION: Shows how to add policies to a core router configuration in Strapi. Demonstrates registering existing policies, adding policies with custom configurations, and implementing inline policy functions.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  config: {\n    find: {\n      policies: [\n        // point to a registered policy\n        'policy-name',\n\n        // point to a registered policy with some custom configuration\n        { name: 'policy-name', config: {} }, \n        \n        // pass a policy implementation directly\n        (policyContext, config, { strapi }) => {\n          return true;\n        },\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Controllers\nDESCRIPTION: Displays a list of all registered controllers in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nstrapi controllers:list\n```\n\n----------------------------------------\n\nTITLE: Adding Edit View Side Panel with Function Parameter in Strapi\nDESCRIPTION: Example of adding a panel to the beginning of the Edit view sidebar using the addEditViewSidePanel API with a function parameter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\napp.getPlugin('content-manager').apis.addEditViewSidePanel(\n  (panels) => [SuperImportantPanel, ...panels]\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Router with URL Parameters in JavaScript\nDESCRIPTION: Example of creating custom routes in JavaScript using URL parameters and regular expressions for dynamic routing.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/routes.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  routes: [\n    { \n      method: 'POST',\n      path: '/restaurants/:id/review', \n      handler: 'restaurant.review',\n    },\n    { \n      method: 'GET',\n      path: '/restaurants/:category([a-z]+)',\n      handler: 'restaurant.findByCategory',\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware in Strapi (JavaScript)\nDESCRIPTION: Basic structure for creating a custom middleware in Strapi using JavaScript. The middleware function takes configuration and Strapi instance as parameters and returns a function that handles the request context.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (config, { strapi })=> {\n  return (context, next) => {};\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Strapi Middlewares\nDESCRIPTION: Displays a list of all registered middlewares in the Strapi application.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nstrapi middlewares:list\n```\n\n----------------------------------------\n\nTITLE: List View Layout Interface Definitions\nDESCRIPTION: TypeScript interface definitions for List View layouts including ListFieldLayout, ListLayout, LayoutOptions, and LayoutSettings. Defines structure for content-type fields, formatting, and display options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ListFieldLayout {\n  /**\n   * The attribute data from the content-type's schema for the field\n   */\n  attribute: Attribute.Any | { type: 'custom' };\n  /**\n   * Typically used by plugins to render a custom cell\n   */\n  cellFormatter?: (\n    data: Document,\n    header: Omit<ListFieldLayout, 'cellFormatter'>,\n    { collectionType, model }: { collectionType: string; model: string }\n  ) => React.ReactNode;\n  label: string | MessageDescriptor;\n  /**\n   * the name of the attribute we use to display the actual name e.g. relations\n   * are just ids, so we use the mainField to display something meaninginful by\n   * looking at the target's schema\n   */\n  mainField?: string;\n  name: string;\n  searchable?: boolean;\n  sortable?: boolean;\n}\n\ninterface ListLayout {\n  layout: ListFieldLayout[];\n  components?: never;\n  metadatas: {\n    [K in keyof Contracts.ContentTypes.Metadatas]: Contracts.ContentTypes.Metadatas[K]['list'];\n  };\n  options: LayoutOptions;\n  settings: LayoutSettings;\n}\n\ntype LayoutOptions = Schema['options'] & Schema['pluginOptions'] & object;\n\ninterface LayoutSettings extends Contracts.ContentTypes.Settings {\n  displayName?: string;\n  icon?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Data Transfer with NPM in Strapi\nDESCRIPTION: Command to initiate the data transfer from the source Strapi instance to the target instance using NPM, specifying the target admin URL with the required double dash for passing arguments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/data-management/transfer.md#2025-04-09_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run strapi transfer -- --to http://localhost:1337/admin\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Review Controller with Email Notification in Strapi\nDESCRIPTION: Extends the core controller to handle review creation with additional email notification functionality. Creates a review using a custom service and sends an email notification to the restaurant owner if available.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst { createCoreController } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreController('api::review.review', ({ strapi }) => ({\n  /**\n   * As the controller action is named\n   * exactly like the original `create` action provided by the core controller, \n   * it overwrites it.\n   */\n  async create(ctx) {\n    // Creates the new review using a service\n    const newReview = await strapi.service('api::review.review').create(ctx);\n\n    // Sends an email to the restaurant's owner, using another service\n    if (newReview.restaurant?.owner) {\n      await strapi.service('api::email.email').send({\n        to: newReview.restaurant.owner.email,\n        subject: 'You have a new review!',\n        html: `You've received a ${newReview.note} star review: ${newReview.content}`,\n      });\n    }\n\n    const sanitizedReview = await this.sanitizeOutput(newReview, ctx);\n\n    ctx.body = sanitizedReview;\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Strapi Documentation Project Locally\nDESCRIPTION: Terminal commands for cloning the repository, navigating to project folders, installing dependencies, and starting the Docusaurus development server. Includes an optional step for updating from the main branch.\nSOURCE: https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [access-path-to-your-forked-repository]\ncd documentation/docusaurus\ngit checkout main && git pull\nyarn && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Adding Settings Links in Strapi Admin Plugin\nDESCRIPTION: Example showing how to add multiple links to an existing settings section in the Strapi admin panel using the addSettingsLinks() function in a plugin's bootstrap lifecycle.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/admin-panel-api.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst myComponent = async () => {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  bootstrap(app) {\n    // Adding several links at once\n    app.addSettingsLinks(\n      'global', // id of the section to add the link in\n        [{\n          intlLabel: { id: String, defaultMessage: String },\n          id: String,\n          to: String,\n          Component: myComponent,\n          permissions: Object[],\n          licenseOnly: true, // mark the feature as a paid one not available in your license\n        }]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $in Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $in operator to find records where an attribute is contained in a list of values. This query retrieves articles with titles matching any of the specified values.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $in: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Service in Strapi\nDESCRIPTION: Custom service for sending emails in Strapi using the Email plugin. Retrieves email configuration from a single type and implements a send method for dispatching emails with customizable parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/services-and-controllers.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::email.email', ({ strapi }) => ({\n  async send({ to, subject, html }) {\n    /**\n     * Retrieves email configuration data\n     * stored in the Email single type\n     * using the Entity Service API.\n     */\n    const emailConfig = await strapi.entityService.findOne(\n      'api::email.email',\n      1\n    );\n\n    /**\n     * Sends an email using:\n     * - parameters to pass when invoking the service\n     * - the 'from' address previously retrieved with the email configuration\n     */\n    await strapi.plugins['email'].services.email.send({\n      to,\n      subject,\n      html,\n      from: emailConfig.from,\n    });\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Strapi API Response for Filtered Population (JSON)\nDESCRIPTION: This JSON snippet shows an example response from a Strapi API when using filtered population. It includes the populated 'categories' field with the filtered result.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/populate-select.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"a1b2c3d4e5d6f7g8h9i0jkl\",\n      \"title\": \"Test Article\",\n      // ...\n      \"categories\": {\n        \"data\": [\n          {\n            \"id\": 2,\n            \"documentId\": \"jKd8djla9ndalk98hflj3\",\n            \"name\": \"Cars\"\n            // ...\n          }\n        ]\n        }\n      }\n    }\n  ],\n  \"meta\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a component using REST API in Strapi v4\nDESCRIPTION: In Strapi v4, you could partially update a component by specifying its id in the request body. This example shows how to fetch a category and then update a specific component within it.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/components-and-dynamic-zones-do-not-return-id.md#2025-04-09_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. GET /category/:id\ncategory = fetch(...)\n\n// 2. PUT /category/:id\n{\ndata: {\n  name: 'category-name',\n  // Update component by its id\n  component: {\n    id: category.component.id // Use the id received in 1.\n    value: 'value' \n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Email Lifecycle Hook Implementation in JavaScript\nDESCRIPTION: Shows how to implement an afterCreate lifecycle hook to send emails automatically when new content is created in Strapi's Content Manager. Uses the email.send() function with various email parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/email.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    async afterCreate(event) {    // Connected to \"Save\" button in admin panel\n        const { result } = event;\n\n        try{\n            await strapi.plugin('email').service('email').send({\n              to: 'valid email address',\n              from: 'your verified email address',\n              cc: 'valid email address',\n              bcc: 'valid email address',\n              replyTo: 'valid email address',\n              subject: 'The Strapi Email feature worked successfully',\n              text: '${fieldName}',\n              html: 'Hello world!', \n                \n            })\n        } catch(err) {\n            console.log(err);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Login Form with Next.js and Formik for Strapi Backend\nDESCRIPTION: This code creates a login page using Next.js and Formik that authenticates users against Strapi's /auth/local endpoint. It submits user credentials, receives a JWT token, and stores it in localStorage. The implementation includes a form with email and password inputs, styled with NextUI components.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/examples/authentication.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport { Button, Input } from '@nextui-org/react';\nimport Layout from '@/components/layout';\nimport { getStrapiURL } from '@/utils';\n\nconst Login = () => {\n  const { handleSubmit, handleChange } = useFormik({\n    initialValues: {\n      identifier: '',\n      password: '',\n    },\n    onSubmit: async (values) => {\n      /**\n       * API URLs in Strapi are by default prefixed with /api,\n       * but because the API prefix can be configured\n       * with the rest.prefix property in the config/api.js file,\n       * we use the getStrapiURL() method to build the proper full auth URL.\n       **/\n      const res = await fetch(getStrapiURL('/auth/local'), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(values),\n      });\n      /**\n       * Gets the JWT from the server response\n       */\n      const { jwt } = await res.json();\n      /**\n       * Stores the JWT in the localStorage of the browser. \n       * A better implementation would be to do this with an authentication context provider\n       * or something more sophisticated, but it's not the purpose of this tutorial.\n       */\n      localStorage.setItem('token', jwt); \n    },\n  });\n  /**\n   * The following code renders a basic login form \n   * accessible from the localhost:3000/auth/login page.\n   */\n  return (\n    <Layout>\n      <div className=\"h-full w-full flex justify-center items-center my-24\">\n        <form onSubmit={handleSubmit} className=\"flex flex-col gap-y-6 w-4/12 \">\n          <h1 className=\"font-bold text-3xl mb-6\">Login</h1>\n          <Input\n            onChange={handleChange}\n            type=\"email\"\n            name=\"identifier\"\n            label=\"Email\"\n            placeholder=\"Enter your email\"\n          />\n          <Input\n            type=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            placeholder=\"Enter your password\"\n            onChange={handleChange}\n          />\n          <Button type=\"submit\" className=\"bg-primary rounded-md text-muted\">\n            Login\n          </Button>\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Login;\n```\n\n----------------------------------------\n\nTITLE: JSON Response with Selected Fields\nDESCRIPTION: Example JSON response from a Strapi API request where only specific fields (name and description) are returned according to the field selection parameters.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/populate-select.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 4,\n      \"Name\": \"Pizzeria Arrivederci\",\n      \"Description\": [\n        {\n          \"type\": \"paragraph\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Specialized in pizza, we invite you to rediscover our classics, such as 4 Formaggi or Calzone, and our original creations such as Do Luigi or Nduja.\"\n            }\n          ]\n        }\n      ],\n      \"documentId\": \"lr5wju2og49bf820kj9kz8c3\"\n    }\n    // …\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing better-sqlite3 and removing sqlite3 in Terminal\nDESCRIPTION: Commands to remove the sqlite3 package and install the better-sqlite3 package as part of the migration to Strapi 5's SQLite client requirements.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/only-better-sqlite3-for-sqlite.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove sqlite3\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add better-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Ordering Results with Single Attribute in Strapi Query Engine API (JavaScript)\nDESCRIPTION: Demonstrates how to order query results using a single attribute with the Strapi Query Engine API. It shows both basic ordering and ordering with a specified direction.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/order-pagination.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.db.query('api::article.article').findMany({\n  orderBy: 'id',\n});\n\n// single with direction\nstrapi.db.query('api::article.article').findMany({\n  orderBy: { id: 'asc' },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Route and Controller Example in TypeScript\nDESCRIPTION: TypeScript version of the basic GET /hello route and controller implementation\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/controllers.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/hello',\n      handler: 'hello.index',\n    }\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async index(ctx, next) { // called by GET /hello\n    ctx.body = 'Hello World!'; // we could also send a JSON\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating French Locale for Homepage Single Type\nDESCRIPTION: Example of creating a French localization for a homepage single type using PUT request with locale parameter.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"Title\": \"Page d'accueil\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing attributes Layer from GraphQL Response\nDESCRIPTION: Example showing how to remove the attributes layer from queries and mutation responses while maintaining the _connection structure during migration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated.md#2025-04-09_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # collection fields can be renamed to _connection to get a v4 compat response\n  restaurants_connection {\n    data {\n      id\n      title\n      image {\n        data {\n          id\n          url\n        }\n      }\n      # collection fields can be renamed to _connection to get a v4 compat response\n      images_connection {\n        data {\n          id\n          url\n        }\n      }\n      xToOneRelation {\n        data {\n          id\n          field\n        }\n      }\n      # collection fields can be renamed to _connection to get a v4 compat response\n      xToManyRelation_connection {\n        data {\n          id\n          field\n        }\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendgrid Email Provider in JavaScript\nDESCRIPTION: JavaScript configuration for integrating Sendgrid as an email provider in Strapi Cloud. This example shows how to set up the API key as an environment variable and configure default email addresses.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/email.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'sendgrid',\n      providerOptions: {\n        apiKey: env('SENDGRID_API_KEY'),\n      },\n      settings: {\n        defaultFrom: 'myemail@protonmail.com',\n        defaultReplyTo: 'myemail@protonmail.com',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering with $or Logical Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $or logical operator where at least one condition must be true. The query retrieves articles that either have a specific title or were created after a certain date.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    $or: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GET Response for Localized Collection Data\nDESCRIPTION: Example response when retrieving documents in French locale from a collection endpoint.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/locale.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 5,\n      \"documentId\": \"h90lgohlzfpjf3bvan72mzll\",\n      \"Title\": \"Meilleures pizzas\",\n      \"Body\": [\n        {\n          \"type\": \"paragraph\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"On déguste les meilleures pizzas de la ville à la Pizzeria Arrivederci.\"\n            }\n          ]\n        }\n      ],\n      \"createdAt\": \"2024-03-06T22:08:59.643Z\",\n      \"updatedAt\": \"2024-03-06T22:10:21.127Z\",\n      \"publishedAt\": \"2024-03-06T22:10:21.130Z\",\n      \"locale\": \"fr\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Naming Conventions and Simplified Queries\nDESCRIPTION: Examples showing how to use the new naming conventions (nodes instead of data, pageInfo instead of meta.pagination) and simpler query formats for the Strapi 5 GraphQL API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/graphql-api-updated.md#2025-04-09_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # Rename data to nodes & meta.pagination to pageInfo\n  restaurants_connection {\n    nodes {\n      id\n      title\n      # can remove data in single Images \n      image {\n        id\n        url\n      }\n      # collection fields can be renamed to _connection to get a v4 compat response\n      images_connection {\n        nodes {\n          id\n          url\n        }\n      }\n      # can remove data in xToOne \n      xToOneRelation {\n        id\n        field\n      }\n      # collection fields can be renamed to _connection to get a v4 compat response\n      xToManyRelation_connection {\n        nodes {\n          id\n          field\n        }\n      }\n    }\n    pageInfo {\n      page\n      pageSize\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # remove _connection & data if you don't need pagination att all\n  restaurants {\n    id\n    title\n    image {\n      id\n      url\n    }\n    # remove _connection & data\n    images {\n      id\n      url\t\n    }\n    xToOneRelation {\n      id\n      field\n    }\n    # remove _connection & data\n    xToManyRelation {\n      id\n      field\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edit View Field Settings Table\nDESCRIPTION: Markdown table detailing the available field-level settings for the edit view configuration, including labels, descriptions, placeholders and display options.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-manager.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name    | Instructions                                                                              |\n| --------------- | ----------------------------------------------------------------------------------------- |\n| Label           | Write the label that should be used for the field.                                        |\n| Description     | Write a description for the field, to help other administrators fill it properly.         |\n| Placeholder     | Write the placeholder that should be displayed by default in the field.                   |\n| Editable field  | Click on **TRUE** or **FALSE** to able or disable the edition of the field by administrators. |\n| Size            | Select the size in which the field should be displayed in the Content Manager. Note that this setting is neither available for JSON and Rich Text fields, nor dynamic zones and components. |\n| Entry title     | *(relational fields only)* Write the entry title that should be used for the relational field. It is recommended to choose well the entry title of relational fields as the more comprehensive it is, the easier it will be for administrators to manage the content of relational fields from the edit view. |\n```\n\n----------------------------------------\n\nTITLE: Using $between Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $between operator to find records where an attribute is between two specified values (inclusive). This query retrieves articles with ratings between 1 and 20.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $between: [1, 20],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: REST API Get Documents Response Example in JSON\nDESCRIPTION: Example JSON response when fetching a list of restaurant documents via the REST API. Shows the flattened data structure in Strapi 5 where attributes are directly accessible in the data object rather than nested in data.attributes.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 2,\n      \"documentId\": \"hgv1vny5cebq2l3czil1rpb3\",\n      \"Name\": \"BMK Paris Bamako\",\n      \"Description\": null,\n      \"createdAt\": \"2024-03-06T13:42:05.098Z\",\n      \"updatedAt\": \"2024-03-06T13:42:05.098Z\",\n      \"publishedAt\": \"2024-03-06T13:42:05.103Z\",\n      \"locale\": \"en\"\n    },\n    {\n      \"id\": 4,\n      \"documentId\": \"znrlzntu9ei5onjvwfaalu2v\",\n      \"Name\": \"Biscotte Restaurant\",\n      \"Description\": [\n        {\n          \"type\": \"paragraph\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"text\": \"Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.\"\n            }\n          ]\n        }\n      ],\n      \"createdAt\": \"2024-03-06T13:43:30.172Z\",\n      \"updatedAt\": \"2024-03-06T13:43:30.172Z\",\n      \"publishedAt\": \"2024-03-06T13:43:30.175Z\",\n      \"locale\": \"en\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Provider in Strapi 5\nDESCRIPTION: Example configuration for the Mailgun email provider in Strapi 5's plugins configuration file. Shows the proper usage of the new key and url variables along with other required settings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/mailgun-provider-variables.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // ...\n  email: {\n    config: {\n      provider: 'mailgun',\n      providerOptions: {\n        key: env('MAILGUN_API_KEY'), // Required\n        domain: env('MAILGUN_DOMAIN'), // Required\n        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'\n      },\n      settings: {\n        defaultFrom: 'myemail@protonmail.com',\n        defaultReplyTo: 'myemail@protonmail.com',\n      },\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Apollo Server Landing Page\nDESCRIPTION: Global middleware configuration to add CORS headers for Apollo Server landing page in Strapi. Defines content security policy directives for various resource types.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/graphql.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: \"strapi::security\",\n  config: {\n    contentSecurityPolicy: {\n      useDefaults: true,\n      directives: {\n        \"connect-src\": [\"'self'\", \"https:\", \"apollo-server-landing-page.cdn.apollographql.com\"],\n        \"img-src\": [\"'self'\", \"data:\", \"blob:\", \"apollo-server-landing-page.cdn.apollographql.com\"],\n        \"script-src\": [\"'self'\", \"'unsafe-inline'\", \"apollo-server-landing-page.cdn.apollographql.com\"],\n        \"style-src\": [\"'self'\", \"'unsafe-inline'\", \"apollo-server-landing-page.cdn.apollographql.com\"],\n        \"frame-src\": [\"sandbox.embed.apollographql.com\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $lte Less Than or Equal Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $lte operator to find records where an attribute is less than or equal to a specified value. This query retrieves articles with ratings less than or equal to 10.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $lte: 10,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Reordering Relations with REST API (JavaScript)\nDESCRIPTION: This snippet shows how to reorder multiple relations using the connect parameter with position attributes. It demonstrates various positioning options like 'before', 'after', 'start', and 'end'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/relations.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data: {\n    categories: {\n      connect: [\n        { id: '6u86wkc6x3parjd4emikhmx', position: { after: 'j9k8l7m6n5o4p3q2r1s0tuv'} },\n        { id: '3r1wkvyjwv0b9b36s7hzpxl', position: { before: 'z0y2x4w6v8u1t3s5r7q9onm' } },\n        { id: 'rkyqa499i84197l29sbmwzl', position: { end: true } },\n        { id: 'srkvrr77k96o44d9v6ef1vu' },\n        { id: 'nyk7047azdgbtjqhl7btuxw', position: { start: true } },\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Strapi with Webpack Bundle Flag\nDESCRIPTION: Command line flag to continue using webpack bundler in Strapi 5 instead of the new default Vite bundler.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/vite.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--bundler=webpack\n```\n\n----------------------------------------\n\nTITLE: Counting Filtered Documents in Strapi (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use filters with the count() method to count draft documents in the default locale whose name starts with 'Pizzeria'. It includes comments explaining the default behavior when status and locale are omitted.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Count number of draft documents (default if status is omitted) \n * in English (default locale) \n * whose name starts with 'Pizzeria'\n */\nstrapi.documents('api::restaurant.restaurant').count({ filters: { name: { $startsWith: \"Pizzeria\" }}})\n```\n\n----------------------------------------\n\nTITLE: Page-based Pagination in Strapi Entity Service\nDESCRIPTION: Alternative pagination approach using page and pageSize parameters for more intuitive page-based result limiting.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/order-pagination.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.entityService.findMany('api::article.article', {\n  page: 1,\n  pageSize: 15,\n});\n```\n\n----------------------------------------\n\nTITLE: Populating 1st Level Component in Strapi REST API\nDESCRIPTION: This example shows the JSON response when populating only the first level 'seo' component using the populate parameter. The API returns the seo component data but doesn't include nested components like 'metaSocial'.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/understanding-populate.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"documentId\": \"md60m5cy3dula5g87x1uar\",\n      \"title\": \"Here's why you have to try basque cuisine, according to a basque chef\",\n      \"slug\": \"here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef\",\n      \"createdAt\": \"2021-11-09T13:33:19.948Z\",\n      \"updatedAt\": \"2023-06-02T10:57:19.584Z\",\n      \"publishedAt\": \"2022-09-22T09:30:00.208Z\",\n      \"locale\": \"en\",\n      \"ckeditor_content\": \"…\", // truncated content\n      \"seo\": {\n        \"id\": 1,\n        \"documentId\": \"kqcwhq6hes25kt9ebj8x7j\",\n        \"metaTitle\": \"Articles - FoodAdvisor\",\n        \"metaDescription\": \"Discover our articles about food, restaurants, bars and more! - FoodAdvisor\",\n        \"keywords\": \"food\",\n        \"metaRobots\": null,\n        \"structuredData\": null,\n        \"metaViewport\": null,\n        \"canonicalURL\": null\n      }\n    },\n    {\n      \"id\": 2,\n      // truncated content\n    },\n    {\n      \"id\": 3,\n      // truncated content\n    },\n    {\n      \"id\": 4,\n      // truncated content\n    },\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"pageSize\": 25,\n      \"pageCount\": 1,\n      \"total\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Log Level in Strapi 5\nDESCRIPTION: Example of how to configure the server log level in the server configuration file. The log level can be set to various values like 'silly', 'debug', 'http', 'info', 'warn', or 'error' to control log verbosity.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/server-default-log-level.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ logger: { config: { level: 'debug' } } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Provider in Strapi plugins.js\nDESCRIPTION: JavaScript configuration boilerplate for setting up a third-party upload provider in Strapi Cloud. This is the basic structure that should be added to the plugins.js file in the production environment configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/advanced/upload.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n// … some unrelated plugins configuration options\n// highlight-start\nupload: {\n   config: {\n      // … provider-specific upload configuration options go here\n   }\n// highlight-end\n// … some other unrelated plugins configuration options\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Populating with Entity Service API in JavaScript\nDESCRIPTION: Shows how to use an object for more advanced populating, including nested relations, filters, sorting, and field selection.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/populate.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  populate: {\n    relationA: true,\n    repeatableComponent: {\n      fields: ['fieldA'],\n      filters: {},\n      sort: 'fieldA:asc',\n      populate: {\n        relationB: true,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling populateCreatorFields in content-type schema.json\nDESCRIPTION: This JSON snippet shows how to modify the content-type schema.json file to enable the populateCreatorFields option. Setting this property to true allows the createdBy and updatedBy fields to be included in the REST API responses.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/guides/populate-creator-fields.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"options\": {\n    \"draftAndPublish\": true,\n    \"populateCreatorFields\": true\n  },\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Configuration in Strapi v4\nDESCRIPTION: Shows how model configurations were accessed using dot notation in Strapi version 4, demonstrating get, has, and set operations.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/model-config-path-uses-uid.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nstrapi.config.get('plugin.upload.somesetting');\nif ( strapi.config.has('plugin.upload.somesetting') ) {\n  strapi.config.set('plugin.upload.somesetting', false);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Timer Middleware Example (JavaScript)\nDESCRIPTION: Example of a custom timer middleware in Strapi using JavaScript. This middleware measures the response time and sets it as a header in the response.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/backend-customization/middlewares.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = () => {\n  return async (ctx, next) => {\n    const start = Date.now();\n\n    await next();\n\n    const delta = Math.ceil(Date.now() - start);\n    ctx.set('X-Response-Time', delta + 'ms');\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Users by Username with qs Library\nDESCRIPTION: Example of using the qs library to build a query to find users with username 'John'. Demonstrates basic filtering using the $eq operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/rest/filters.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\nconst query = qs.stringify({\n  filters: {\n    username: {\n      $eq: 'John',\n    },\n  },\n}, {\n  encodeValuesOnly: true, // prettify URL\n});\n\nawait request(`/api/users?${query}`);\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Strapi 5\nDESCRIPTION: Example of accessing file properties in custom endpoints using ctx.request.files in Strapi 5. Shows the new property names: filepath, originalFilename, and mimetype.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/koa-body-v6.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst endpoint = (ctx) => {\n  ctx.request.files.fileName.filepath\n  ctx.request.files.fileName.originalFilename\n  ctx.request.files.fileName.mimetype\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Email Provider with Yarn\nDESCRIPTION: Installs the Sendgrid provider for Strapi's Email feature using Yarn.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/providers.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @strapi/provider-email-sendgrid\n```\n\n----------------------------------------\n\nTITLE: Retrieving Draft Entries with Entity Service API in JavaScript\nDESCRIPTION: Demonstrates how to retrieve only draft entries by combining the 'preview' publication state with a filter that checks for null publishedAt field.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/crud.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.entityService.findMany('api::article.article', {\n  publicationState: 'preview',\n  filters: {\n    publishedAt: {\n      $null: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Entry with Strapi Query Engine\nDESCRIPTION: Uses delete() to remove an entry from the database. Shows filtering by ID to specify which entry to delete.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/single-operations.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.db.query('api::blog.article').delete({\n  where: { id: 1 },\n});\n```\n\n----------------------------------------\n\nTITLE: Package Manager Command Examples\nDESCRIPTION: Examples of different package manager commands and which package manager will be used for dependency installation in Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/yarn-not-default.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-strapi-app  # installs with npm\nnpm create ...          # installs with npm\nyarn create ...         # installs with yarn\nyarn dlx ...           # installs with yarn\npnpm create ...        # installs with pnpm\npnpm dlx ...           # installs with pnpm\n```\n\n----------------------------------------\n\nTITLE: Importing Data into Strapi Project\nDESCRIPTION: Imports data into a Strapi project. Requires specifying the file to import and supports providing an encryption key.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/cli.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nstrapi import\n```\n\n----------------------------------------\n\nTITLE: Retrieving Published Documents with findMany()\nDESCRIPTION: Query to fetch multiple published documents using the Document Service API by specifying the published status.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/status.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst documents = await strapi.documents(\"api::restaurant.restaurant\").findMany({\n  status: 'published'\n});\n```\n\n----------------------------------------\n\nTITLE: Response from Paginated Query\nDESCRIPTION: Example JSON response from a paginated query showing the first 10 article documents. The response includes each document's properties like documentId, title, slug, and body.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/sort-pagination.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"documentId\": \"cjld2cjxh0000qzrmn831i7rn\",\n    \"title\": \"Test Article\",\n    \"slug\": \"test-article\",\n    \"body\": \"Test 1\"\n    // ...\n  },\n  {\n    \"documentId\": \"cjld2cjxh0001qzrm5q1j5q7m\",\n    \"title\": \"Test Article 2\",\n    \"slug\": \"test-article-2\",\n    \"body\": \"Test 2\"\n    // ...\n  }\n  // ... (8 more)\n]\n```\n\n----------------------------------------\n\nTITLE: Using strapi.fetch with timeout in Strapi v4\nDESCRIPTION: Example of using strapi.fetch with a timeout parameter in Strapi v4, which accepts the RequestInit type from node-fetch.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/fetch.md#2025-04-09_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nstrapi.fetch(url, {\n  method: 'POST',\n  body,\n  headers,\n  timeout: 1000,\n}); // accepts the type RequestInit from node-fetch\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret in Strapi\nDESCRIPTION: Configuration for setting a custom JWT secret using environment variables for security in production.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/users-permissions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  jwtSecret: process.env.SOME_ENV_VAR,\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  jwtSecret: process.env.SOME_ENV_VAR,\n};\n```\n\n----------------------------------------\n\nTITLE: Using the $lt operator with Document Service API in JavaScript\nDESCRIPTION: Shows how to filter for articles with a numeric field less than a specified value using the $lt operator.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/filters.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.documents('api::article.article').findMany({\n  filters: {\n    rating: {\n      $lt: 10,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: User Middleware Registration in Strapi Application\nDESCRIPTION: Example showing how to register a middleware in the main Strapi application file.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/middlewares.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  register({ strapi }) {\n    strapi.documents.use((context, next) => {\n      // your logic\n      return next();\n    });\n  },\n\n  // bootstrap({ strapi }) {},\n  // destroy({ strapi }) {},\n};\n```\n\n----------------------------------------\n\nTITLE: Migration Step: Old Method in Strapi v4\nDESCRIPTION: Shows the deprecated method that needs to be replaced in the plugin's index.ts file during migration to Strapi 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\napp.injectContentManagerComponent()\n```\n\n----------------------------------------\n\nTITLE: Implementing Draft-Aware Data Fetching in Next.js\nDESCRIPTION: Utility function that fetches content from Strapi API with draft mode support. Checks Next.js draft mode status and includes appropriate query parameters for fetching draft or published content.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/preview.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draftMode } from \"next/headers\";\nimport qs from \"qs\";\n\nexport default async function fetchContentType(\n  contentType: string,\n  params: Record = {}\n): Promise {\n  // Check if Next.js draft mode is enabled\n  const { isEnabled: isDraftMode } = draftMode();\n  \n  try {\n    const queryParams = { ...params };\n    // Add status=draft parameter when draft mode is enabled\n    if (isDraftMode) {\n      queryParams.status = \"draft\";\n    }\n    \n    const url = `${baseURL}/${contentType}?${qs.stringify(queryParams)}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(\n        `Failed to fetch data from Strapi (url=${url}, status=${response.status})`\n      );\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching content:\", error);\n    throw error;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Documents with Filters in Strapi Document Service API\nDESCRIPTION: This snippet demonstrates using the findMany() method with filters to find multiple documents matching specific criteria. It returns draft versions in the default locale if no locale or status parameters are specified.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait strapi.documents('api::restaurant.restaurant').findMany(\n  {\n    filters: {  \n      name: {\n        $startsWith: 'Pizzeria'\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Registration in Strapi\nDESCRIPTION: Example of registering a basic middleware in the Strapi Document Service API.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/document-service/middlewares.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstrapi.documents.use((context, next) => {\n  return next();\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Components into Content Manager in Strapi 5\nDESCRIPTION: Demonstrates the new approach to inject components into the Content Manager in Strapi 5 using getPlugin('content-manager').injectComponent() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/inject-content-manager-component.md#2025-04-09_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\napp.getPlugin('content-manager').injectComponent('editView', 'right-links', {\n    name: 'PreviewButton',\n    Component: () => (\n      <Button onClick={() => window.alert('Not here, The preview is.')}>Preview</Button>\n    ),\n  });\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entry with Entity Service API in JavaScript\nDESCRIPTION: Uses the delete() method to remove an article entry by ID and returns the deleted entity.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/entity-service/crud.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst entry = await strapi.entityService.delete('api::article.article', 1);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom WYSIWYG Editor in Strapi (JavaScript)\nDESCRIPTION: Demonstrates how to register a custom WYSIWYG editor component in Strapi's admin panel using the bootstrap lifecycle function and app.addFields() method.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/wysiwyg-editor.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The following file contains the logic for your new WYSIWYG editor👇\nimport MyNewWYSIGWYG from \"./extensions/components/MyNewWYSIGWYG\";\n\nexport default {\n  bootstrap(app) {\n    app.addFields({ type: \"wysiwyg\", Component: MyNewWYSIGWYG });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Building a Strapi Plugin for Publishing\nDESCRIPTION: Command to bundle a Strapi plugin for publishing. Various options include force mode for non-interactive execution, debug mode, silent mode, minification, and sourcemap generation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/plugin-sdk.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstrapi-plugin build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using NPM package manager. If installation fails, users may need to delete package-lock.json and node_modules directory.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/install-npm-yarn.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using $gte Greater Than or Equal Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $gte operator to find records where an attribute is greater than or equal to a specified value. This query retrieves articles with ratings greater than or equal to 5.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $gte: 5,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration in TypeScript for Strapi 5 Admin Panel\nDESCRIPTION: Demonstrates how to extend webpack configuration in TypeScript for Strapi 5's admin panel. This example adds the IgnorePlugin to exclude test files from the build. The function receives the existing config and webpack instance.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/bundlers.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (config, webpack) => {\n  // Note: we provide webpack above so you should not `require` it\n\n  // Perform customizations to webpack config\n  config.plugins.push(new webpack.IgnorePlugin(/\\/__tests__\\//));\n\n  // Important: return the modified config\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: EditView Context Interface Definition for Strapi Content Manager\nDESCRIPTION: TypeScript interface defining the context properties passed to components in Edit View actions, including active tab, document metadata, and model information.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ninterface EditViewContext {\n  /**\n   * This will only be null if the content-type\n   * does not have draft & publish enabled.\n   */\n  activeTab: 'draft' | 'published' | null;\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * Will be undefined if someone is creating an entry.\n   */\n  document?: Document;\n  /**\n   * Will be undefined if someone is creating an entry.\n   */\n  documentId?: string;\n  /**\n   * Will be undefined if someone is creating an entry.\n   */\n  meta?: DocumentMetadata;\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Relation Management in Strapi Data Object\nDESCRIPTION: This code snippet demonstrates the structure for managing relations in Strapi's data object. It uses the connect, disconnect, and set parameters, following the syntax described in the REST API documentation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/snippets/managing-relations.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\nIn the `data` object, relations can be managed with the `connect`, `disconnect`, and `set` parameters using the syntax described for the REST API (see [managing relations](/cms/api/rest/relations)).\n:::\n```\n\n----------------------------------------\n\nTITLE: Example Response for Fetching a Specific Document in a Locale\nDESCRIPTION: This JSON response shows the structure of the data returned when querying for a specific restaurant document in the French locale. It includes the documentId, name, description, and locale of the restaurant.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/graphql/locale.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"restaurant\": {\n      \"documentId\": \"lviw819d5htwvga8s3kovdij\",\n      \"name\": \"Restaurant Biscotte\",\n      \"description\": \"Bienvenue au restaurant Biscotte!\",\n      \"locale\": \"fr\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirements\nDESCRIPTION: Lists the required Node.js, NPM and Yarn version requirements for contributing to Strapi documentation.\nSOURCE: https://github.com/strapi/documentation/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- NodeJS >=16.14 <=18.x.x\n- NPM >= 6.x\n- Yarn >= 1.22.x\n```\n\n----------------------------------------\n\nTITLE: ListView Context Interface Definition for Strapi Content Manager\nDESCRIPTION: TypeScript interface defining the context properties passed to components in List View actions, including collection type, selected documents, and model information.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ninterface ListViewContext {\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * The current selected documents in the table\n   */\n  documents: Document[];\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Avatars in Markdown\nDESCRIPTION: This snippet demonstrates how to render contributor avatars using HTML within a Markdown file. It uses inline HTML to create circular images linking to contributor GitHub profiles.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/release-notes.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<div>\n<a href=\"https://github.com/maccomaccomaccomacco\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/2686869?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"maccomaccomaccomacco\"/>\n</a>\n<a href=\"https://github.com/oktapodia\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/2752200?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"oktapodia\"/>\n</a>\n<a href=\"https://github.com/pwizla\" target=\"_blank\">\n    <img className=\"no-zoom\" src=\"https://avatars.githubusercontent.com/u/4233866?v=4\" width=\"40\" height=\"40\" style={{borderRadius: '50%'}} alt=\"pwizla\"/>\n</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deploying Strapi Project with Yarn\nDESCRIPTION: Command to deploy the Strapi project to Strapi Cloud using Yarn package manager. This initiates the deployment process.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cloud/getting-started/deployment-cli.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn strapi deploy\n```\n\n----------------------------------------\n\nTITLE: Listing Available Codemods in Strapi (Bash)\nDESCRIPTION: Command to list all available codemods that can be run for upgrading Strapi.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade codemods ls\n```\n\n----------------------------------------\n\nTITLE: Strapi v5 Content API Response Structure\nDESCRIPTION: Example of how documents are identified using 'documentId' in Strapi v5 API responses. Shows the new structure with system fields including documentId and locale.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/use-document-id.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    // system fields\n    \"documentId\": \"clkgylmcc000008lcdd868feh\",\n    \"locale\": \"en\",\n    // user fields\n    \"title\": \"Article A\"\n    \"relation\": {\n      // system fields\n      \"documentId\": \"clkgylw7d000108lc4rw1bb6s\"\n      // user fields\n      \"name\": \"Category A\"\n    }\n  }\n  \"meta\": {\n    // …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organized Redirects Output Structure in JavaScript\nDESCRIPTION: Illustrates the structure of the output file (redirects.organized.js) generated by the script. It preserves the original header comment and groups redirections into categories with descriptive comments.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/redirects-organizer/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * [Original header comment preserved]\n */\nmodule.exports = [\n\n  // Developer Documentation - API\n  {\n    \"from\": \"/developer-docs/api/old-path\",\n    \"to\": \"/dev-docs/api/new-path\"\n  },\n\n  // Backend Customization\n  {\n    \"from\": \"/developer-docs/backend/old-path\",\n    \"to\": \"/dev-docs/backend/new-path\"\n  },\n  // ... more organized redirections\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration in TypeScript for Strapi 5 Admin Panel\nDESCRIPTION: Shows how to extend Vite configuration using TypeScript for Strapi 5's admin panel. This example adds a path alias to the Vite resolver. The function takes the existing config and returns a merged configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/admin-panel-customization/bundlers.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeConfig } from \"vite\";\n\nexport default (config) => {\n  // Important: always return the modified config\n  return mergeConfig(config, {\n    resolve: {\n      alias: {\n        \"@\": \"/src\",\n      },\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Major Version in Strapi (Bash)\nDESCRIPTION: Command to upgrade a Strapi project to the next major version. This updates dependencies and runs codemods.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/upgrade-tool.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @strapi/upgrade major\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling for Apollo Server v4 in JavaScript\nDESCRIPTION: Example of updating error handling code when migrating to Apollo Server v4. This snippet shows the replacement of ApolloError with GraphQLError.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/upgrade-to-apollov4.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nthrow new ApolloError('Custom error message', 'ERROR_CODE');\n\n// After\nthrow new GraphQLError('Custom error message', {\n  extensions: { code: 'ERROR_CODE' }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Usage of Redirect Converter\nDESCRIPTION: Example of running the converter script with custom configuration options including input file, output file, and conversion mode\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/docusaurus-vercel-converter/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode docusaurus-vercel-converter.js --input=my-redirects.json --output=converted.js --mode=to-source\n```\n\n----------------------------------------\n\nTITLE: File Path Reference in SQL Database\nDESCRIPTION: Shows the default file path location for SQL database in Strapi applications.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/introduction-and-faq.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.tmp/data.db\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration Example\nDESCRIPTION: YAML frontmatter configuration showing the documentation metadata and page structure for the breaking change documentation.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/remove-webhook-populate-relations.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: The 'webhooks.populateRelations' server configuration is removed\ndescription: In Strapi 5, webhooks have been refactored and the `webhook.populateRelations` option will become redundant. This might affect lifecycles expecting the returned relations of create, update and delete to be populated.\nsidebar_label: No webhooks.populateRelations configuration\ndisplayed_sidebar: cmsSidebar\ntags:\n - breaking changes\n - webhooks\n - upgrade to Strapi 5\n---\n```\n\n----------------------------------------\n\nTITLE: Running URL Extraction Script\nDESCRIPTION: Bash command to execute the URL extraction script, which must be run before the redirect checker.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/check-redirections-existence/README.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/extract-urls.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN for Production Only (TypeScript)\nDESCRIPTION: Configuration to set the Sentry DSN only in production environment, using the env utility.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default ({ env }) => ({\n  // …\n  sentry: {\n    enabled: true,\n    config: {\n      // Only set `dsn` property in production\n      dsn: env('NODE_ENV') === 'production' ? env('SENTRY_DSN') : null,\n    },\n  },\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Using useFetchClient with Async/Await in TSX\nDESCRIPTION: Example showing how to use the useFetchClient hook with async/await pattern to replace the request utility from @strapi/helper-plugin.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nconst { get } = useFetchClient();\n\nconst { data } = await get(requestURL);\n```\n\n----------------------------------------\n\nTITLE: Vercel Redirect Configuration Format\nDESCRIPTION: JSON configuration format for setting up redirects in Vercel, including source path, destination path, and permanence flag.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/check-redirections-existence/README.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"redirects\": [\n    {\n      \"source\": \"/old-path\",\n      \"destination\": \"/new-path\",\n      \"permanent\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using $notContainsi Case-Insensitive Not Contains Operator in Strapi Query Engine\nDESCRIPTION: Example of using the $notContainsi operator for case-insensitive substring exclusion. This query finds articles with titles not containing 'hello' regardless of case.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/api/query-engine/filtering.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notContainsi: 'hello',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating InjectionZone Component in TSX\nDESCRIPTION: Example showing how to replace the InjectionZone component with a custom implementation using useStrapiApp hook.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/additional-resources/helper-plugin.md#2025-04-09_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n\nimport { InjectionZone } from '@strapi/helper-plugin';\n<InjectionZone area={`injection.zone.area`} />;\n\n// After\n\nconst MyComponent = ({ area, ...compProps }) => {\n  const getPlugin = useStrapiApp('MyComponent', (state) => state.getPlugin);\n\n  const [pluginName, page, position] = area.split('.');\n\n  const plugin = getPlugin(pluginName);\n  const components = plugin?.getInjectedComponents(page, position);\n\n  if (!plugin || !components) {\n    return null;\n  }\n\n  return components.map(({ name, Component }) => (\n    <Component key={name} {...props} />\n  ));\n};\n```\n\n----------------------------------------\n\nTITLE: Example Output of URL Extraction Script\nDESCRIPTION: Shows a sample of the extracted URLs, including main page URLs and URLs with anchors to headings.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/all-urls-extractor/README.md#2025-04-09_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/docs/intro\n/docs/intro#getting-started\n/docs/intro#installation\n/docs/advanced\n/docs/advanced#configuration\n```\n\n----------------------------------------\n\nTITLE: Strapi v4 Application Initialization\nDESCRIPTION: Shows how to initialize a Strapi application in version 4 using both import and require syntax.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/migration/v4-to-v5/breaking-changes/strapi-imports.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport strapi from '@strapi/strapi'; \n// or\nconst strapi = require('@strapi/strapi');\n\nstrapi();\n```\n\n----------------------------------------\n\nTITLE: Edit View Settings Configuration Table\nDESCRIPTION: Markdown table showing settings available for the edit view configuration, focusing on entry title configuration.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/features/content-manager.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting name    | Instructions                                                                          |\n| --------------- | ------------------------------------------------------------------------------------- |\n| Entry title     | Choose among the drop-down list the field that should be used as title for the entry. |\n```\n\n----------------------------------------\n\nTITLE: Running URL Extraction Script in Node.js\nDESCRIPTION: Executes the URL extraction script using Node.js.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/all-urls-extractor/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/extract-urls.js\n```\n\n----------------------------------------\n\nTITLE: Document Action Description Interface for Strapi Content Manager\nDESCRIPTION: TypeScript interface defining the properties for document actions, including action configuration, position, dialog options, and button variants.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins-development/content-manager-apis.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ninterface DocumentActionDescription {\n    label: string;\n    onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n    icon?: React.ReactNode;\n    /**\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * @default 'panel'\n     * @description Where the action should be rendered.\n     */\n    position?: DocumentActionPosition | DocumentActionPosition[];\n    dialog?: DialogOptions | NotificationOptions | ModalOptions;\n    /**\n     * @default 'secondary'\n     */\n    variant?: ButtonProps['variant'];\n}\n\ntype DocumentActionPosition = 'panel' | 'header' | 'table-row';\n\ninterface DialogOptions {\n    type: 'dialog';\n    title: string;\n    content?: React.ReactNode;\n    variant?: ButtonProps['variant'];\n    onConfirm?: () => void | Promise<void>;\n    onCancel?: () => void | Promise<void>;\n}\ninterface NotificationOptions {\n    type: 'notification';\n    title: string;\n    link?: {\n        label: string;\n        url: string;\n        target?: string;\n    };\n    content?: string;\n    onClose?: () => void;\n    status?: NotificationConfig['type'];\n    timeout?: number;\n}\ninterface ModalOptions {\n    type: 'modal';\n    title: string;\n    content: React.ComponentType<{\n        onClose: () => void;\n    }> | React.ReactNode;\n    footer?: React.ComponentType<{\n        onClose: () => void;\n    }> | React.ReactNode;\n    onClose?: () => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment for Dependency Hoisting in npm/pnpm\nDESCRIPTION: Configuration example for .npmrc file to enable dependency hoisting for npm or pnpm package managers to resolve module loading issues with Strapi packages.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhoist=true\n```\n\n----------------------------------------\n\nTITLE: Running the Deduplication Script\nDESCRIPTION: Command to execute the redirect deduplication script from the command line.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/remove-redirects-vercel-duplicates/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode compare-redirects-and-vercel.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN for Production Only (JavaScript)\nDESCRIPTION: Configuration to set the Sentry DSN only in production environment, using the env utility.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/docs/cms/plugins/sentry.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  // …\n  sentry: {\n    enabled: true,\n    config: {\n      // Only set `dsn` property in production\n      dsn: env('NODE_ENV') === 'production' ? env('SENTRY_DSN') : null,\n    },\n  },\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Redirect Format Example\nDESCRIPTION: Sample structure showing the format for defining redirects in Docusaurus using from/to properties.\nSOURCE: https://github.com/strapi/documentation/blob/main/docusaurus/scripts/redirects-utilities/remove-redirects-vercel-duplicates/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  from: '/old-path',\n  to: '/new-path'\n}\n```"
  }
]