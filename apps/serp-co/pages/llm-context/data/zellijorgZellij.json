[
  {
    "owner": "zellij-org",
    "repo": "zellij",
    "content": "TITLE: Handling Specific Error Types with downcast_ref in Rust\nDESCRIPTION: An example demonstrating how to recover specific error types from anyhow::Error using downcast_ref. This technique allows for targeted handling of specific error conditions while still maintaining good error context.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nmatch pty\n    .spawn_terminal(terminal_action, client_or_tab_index)\n    .with_context(err_context)  // <-- Note how we attach a context, but can\n                                //     still recover the error below!\n{\n    Ok(_) => {\n        // ... Whatever\n    },\n    Err(err) => match err.downcast_ref::<ZellijError>() {\n        Some(ZellijError::CommandNotFound { terminal_id, .. }) => {\n            // Do something now that this error occured.\n            // We can even access the values stored inside it, \"terminal_id\" in\n            // this case\n        },\n        // You can check for other error variants here\n        _ => {\n            // Some other error, which we haven't checked for, occured here.\n            // Now we can, for example, log it!\n            Err::<(), _>(err).non_fatal(),\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Building Zellij with Cargo Xtask Commands\nDESCRIPTION: Various commands for building, testing, and running Zellij using the cargo xtask system. These commands handle common development tasks like formatting, building, testing, and installing the application.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Format code, build, then run tests and clippy\ncargo xtask\n# You can also perform these actions individually\ncargo xtask format\ncargo xtask build\ncargo xtask test\n# Run Zellij (optionally with additional arguments)\ncargo xtask run\ncargo xtask run -l strider\n# Run Clippy\ncargo xtask clippy\n# Install Zellij to some directory\ncargo xtask install /path/of/zellij/binary\n# Publish the zellij and zellij-tile crates\ncargo xtask publish\n# Update manpage\ncargo xtask manpage\n```\n\n----------------------------------------\n\nTITLE: Preferred Error Logging with Result and non_fatal() in Rust\nDESCRIPTION: The recommended approach for logging errors in Zellij, using context() to add information and non_fatal() to log the error and continue execution. This preserves all error context from the Result type.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfs::create_dir_all(&plugin_global_data_dir)\n    .context(\"failed to create plugin asset directory\")\n    .non_fatal();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions to Zellij Sessions from CLI\nDESCRIPTION: Examples demonstrating how to use the new CLI action dispatch capability to control Zellij sessions. This feature allows sending commands to running Zellij sessions from the command line.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzellij\nzellij action NewTab:\n```\n\n----------------------------------------\n\nTITLE: Improved Function with Result Return Type and Error Context\nDESCRIPTION: The improved version of Screen::render that returns a Result type and provides context for errors. This allows errors to be propagated to calling functions for better handling and diagnostics.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n    pub fn render(&mut self) -> Result<()> {\n        let err_context = || \"failed to render screen\".to_string();\n        // ...\n\n        let serialized_output = output.serialize();\n        self.bus\n            .senders\n            .send_to_server(ServerInstruction::Render(Some(serialized_output)))\n            .with_context(err_context)\n    }\n```\n\n----------------------------------------\n\nTITLE: Using context and with_context in Rust with Anyhow\nDESCRIPTION: Example showing how to attach context to errors using Anyhow's Context trait methods. This demonstrates both static messages with context() and formatted messages with with_context().\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn move_clients_between_tabs(\n    &mut self,\n    source_tab_index: usize,\n    destination_tab_index: usize,\n    clients_to_move: Option<Vec<ClientId>>,\n) -> Result<()> {\n    // ...\n    if let Some(client_mode_info_in_source_tab) = drained_clients {\n        let destination_tab = self.get_indexed_tab_mut(destination_tab_index)\n            .context(\"failed to get destination tab by index\")\n            .with_context(|| format!(\"failed to move clients from tab {source_tab_index} to tab {destination_tab_index}\"))?\n        // ...\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Tab Keybindings in KDL\nDESCRIPTION: This KDL snippet demonstrates how to configure keybindings for creating new tabs in Zellij, including specifying custom working directory, tab name, and layout.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: kdl\nCODE:\n```\ntab {\n  bind \"n\" { NewTab; SwitchToMode \"Normal\"; }\n  bind \"m\" { NewTab { cwd \"/tmp\"; name \"example\"; layout \"/tmp/example.kdl\"; }; SwitchToMode \"Normal\"; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij via Curl (Bash/Zsh)\nDESCRIPTION: One-line command to download and run Zellij installer script for bash and zsh shells.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -L https://zellij.dev/launch)\n```\n\n----------------------------------------\n\nTITLE: Using context variables for reusable error messages in Rust\nDESCRIPTION: Demonstrates storing context messages in variables to avoid repetition. Shows both static context and closure-based context variables for consistent error handling across multiple function calls.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub fn render(&mut self) -> Result<()> {\n    let err_context = \"failed to render screen\";\n    // ...\n\n    for tab_index in tabs_to_close {\n        // ...\n        self.close_tab_at_index(tab_index)\n            .context(err_context)?;\n    }\n    // ...\n    self.bus\n        .senders\n        .send_to_server(ServerInstruction::Render(Some(serialized_output)))\n        .context(err_context)\n}\n// ...\npub fn close_tab(&mut self, client_id: ClientId) -> Result<()> {\n    let err_context = || format!(\"failed to close tab for client {client_id:?}\");\n\n    let active_tab_index = *self\n        .active_tab_indices\n        .get(&client_id)\n        .with_context(err_context)?;\n    self.close_tab_at_index(active_tab_index)\n        .with_context(err_context)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij via Curl (Fish/Xonsh)\nDESCRIPTION: Command to download and run Zellij installer script for fish and xonsh shells using bash as intermediary.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash -c 'bash <(curl -L https://zellij.dev/launch)'\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij on MacOS\nDESCRIPTION: Commands to install Zellij using either Homebrew or MacPorts package managers on MacOS.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/THIRD_PARTY_INSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install zellij\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo port install zellij\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij with Cargo\nDESCRIPTION: Command to install Zellij using Rust's Cargo package manager with locked dependencies.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --locked zellij\n```\n\n----------------------------------------\n\nTITLE: Sending Actions to Specific Zellij Sessions\nDESCRIPTION: Example showing how to target a specific Zellij session by name and send multiple actions to it, including creating a new pane and writing characters to it.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzellij -s fluffy-cat\nzellij -s fluffy-cat action 'NewPane: , WriteChars: \"echo Purrr\\n\"'\n```\n\n----------------------------------------\n\nTITLE: Importing Error Handling Utilities in Rust\nDESCRIPTION: This snippet shows how to import all the relevant error handling functions and traits in Zellij. This is a prerequisite for using the error handling facilities described in the document.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse zellij_utils::errors::prelude::*;\n```\n\n----------------------------------------\n\nTITLE: Improved Error Handling with match and non_fatal() in Rust\nDESCRIPTION: A better approach to error handling using match to access the error value, then wrapping it in a new Result, adding context, and using non_fatal() to log while preserving error information.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nmatch self.get_active_tab(client_id) {\n    Ok(active_tab) => {\n        let active_tab_pos = active_tab.position;\n        let new_tab_pos = (active_tab_pos + 1) % self.tabs.len();\n        return self.switch_active_tab(new_tab_pos, client_id);\n    },\n    Err(err) => Err::<(), _>(err).with_context(err_context).non_fatal(),\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Rust Project\nDESCRIPTION: Command to run all existing and new tests in the Rust project using Cargo to ensure code changes do not break existing functionality.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Opening Applications in New Zellij Tabs\nDESCRIPTION: Example showing how to use the action command to create a new tab running a specific application (htop in this case) using a shortened command syntax.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzj action \"NewTab: {run: {command: {cmd: htop}}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Theme in Zellij\nDESCRIPTION: Example of defining a color theme using RGB, 256-color, or hex color formats.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/MANPAGE.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nthemes:\n  default:\n    fg: [0,0,0]\n    bg: [0,0,0]\n    black: [0,0,0]\n    red: [0,0,0]\n    green: [0,0,0]\n    yellow: [0,0,0]\n    blue: [0,0,0]\n    magenta: [0,0,0]\n    cyan: [0,0,0]\n    white: [0,0,0]\n    orange: [0,0,0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Keybindings in Zellij\nDESCRIPTION: YAML configuration example showing how to set custom keybindings for creating and navigating tabs.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/MANPAGE.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkeybinds:\n    normal:\n        - action: [ NewTab, GoToTab: 1,]\n          key: [ Char: 'c',]\n```\n\n----------------------------------------\n\nTITLE: Rust Logging Example for Zellij Development\nDESCRIPTION: Example of how to use the log crate within Zellij for debugging. This shows how to log variable values during development to help with troubleshooting.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet my_variable = some_function();\nlog::info!(\"my variable is: {:?}\", my_variable);\n```\n\n----------------------------------------\n\nTITLE: Error handling for Option types with Anyhow in Rust\nDESCRIPTION: Shows proper error handling for Option types by attaching dual context messages: one explaining why None is an error and another providing the higher-level context about what operation was being attempted.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet destination_tab = self.get_indexed_tab_mut(destination_tab_index)\n    .context(\"failed to get destination tab by index\")\n    .with_context(|| format!(\"failed to move clients from tab {source_tab_index} to tab {destination_tab_index}\"))?\n```\n\n----------------------------------------\n\nTITLE: Terminating execution with fatal() in Rust error handling\nDESCRIPTION: Shows how errors are propagated up the call stack in a multi-threaded application and eventually terminated using the .fatal() method, which logs the error and panics the application.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nScreenInstruction::Render => {\n    screen.render()?;\n},\nScreenInstruction::NewPane(pid, client_or_tab_index) => {\n    // ...\n    screen.update_tabs()?;\n\n    screen.render()?;\n},\nScreenInstruction::OpenInPlaceEditor(pid, client_id) => {\n    // ...\n    screen.update_tabs()?;\n\n    screen.render()?;\n},\n```\n\n----------------------------------------\n\nTITLE: Example of suboptimal error context messages in Rust\nDESCRIPTION: Demonstrates a less preferable approach to error handling where the context messages repeat what the underlying errors already say, rather than providing meaningful context about the higher-level operation.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub fn render(&mut self) -> Result<()> {\n    // ...\n\n    for tab_index in tabs_to_close {\n        // ...\n        self.close_tab_at_index(tab_index)\n            .context(\"Failed to close tab at index: {tab_index}\")?;\n    }\n    // ...\n    self.bus\n        .senders\n        .send_to_server(ServerInstruction::Render(Some(serialized_output)))\n        .context(\"Failed to send message to server\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using fatal() to terminate execution in error handling\nDESCRIPTION: Shows the use of .fatal() method to log errors and terminate the application when errors can't be propagated further up the call stack, such as in a separate thread.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// ...\nscreen_thread_main(\n    screen_bus,\n    max_panes,\n    client_attributes_clone,\n    config_options,\n)\n.fatal();\n```\n\n----------------------------------------\n\nTITLE: Tab Layout Configuration with Template and Multiple Tabs\nDESCRIPTION: Demonstrates a YAML layout configuration for Zellij tabs with a template structure. The template defines the overall layout with placeholders for tabs, and the tabs section specifies multiple tab configurations.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntemplate:\n  direction: Horizontal\n  parts:\n    - direction: Vertical\n      borderless: true\n      split_size:\n        Fixed: 1\n      run:\n        plugin: tab-bar\n    - direction: Vertical # <= The location of\n      body: true          # <= the inserted tab.\n    - direction: Vertical\n      borderless: true\n      split_size:\n        Fixed: 2\n      run:\n        plugin: status-bar\ntabs:\n  - direction: Vertical # <= Multiple tabs can be\n  - direction: Vertical # <= specified in the layout.\n  - direction: Vertical\n```\n\n----------------------------------------\n\nTITLE: Unbinding Default Keybindings in Zellij\nDESCRIPTION: Examples of different ways to unbind default keybindings globally or for specific modes.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/MANPAGE.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkeybinds:\n    unbind: true\n```\n\n----------------------------------------\n\nTITLE: Plugin Permission Configuration in YAML Layout\nDESCRIPTION: Shows how to specify a plugin in a layout file, including the changes in format from a basic declaration to a structured one that can include command execution permissions.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nplugin: strider\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplugin:\n  path: strider\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplugin:\n  path: strider\n  _allow_exec_host_cmd: true\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Split Layout in Zellij\nDESCRIPTION: YAML configuration for creating a vertical split layout with horizontal sub-splits at 50% proportions.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/MANPAGE.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndirection: Vertical\nparts:\n    - direction: Horizontal\n      split_size:\n        Percent: 50\n      parts:\n        - direction: Vertical\n          split_size:\n            Percent: 50\n        - direction: Vertical\n          split_size:\n            Percent: 50\n    - direction: Horizontal\n      split_size:\n        Percent: 50\n```\n\n----------------------------------------\n\nTITLE: Action Binding for NewTab in Configuration\nDESCRIPTION: Shows how the NewTab action binding syntax has changed, requiring a colon even for empty options. Also demonstrates how to specify a custom layout when binding a NewTab action.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- action: [NewTab, ]\n  key: [F: 5,]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- action: [NewTab: ,]\n  key: [F: 5,]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- action: [NewTab: {\n  direction: Vertical,\n  parts: [ {direction: Horizontal, split_size: {Percent: 50}},\n  {direction: Horizontal, run: {command: {cmd: \"htop\"}}},],\n  key: [F: 6,]\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in Layouts\nDESCRIPTION: Shows the change in plugin specification format in layouts, where plugins are now placed under the 'run' category for better organization of executable elements.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nplugin: status-bar\n```\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n    plugin: status-bar\n```\n\n----------------------------------------\n\nTITLE: Improved Function with Error Propagation and Context\nDESCRIPTION: The improved version of resize_to_screen that returns a Result type and propagates errors from render() with additional context about the screen size. This enhances diagnostic capabilities.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    pub fn resize_to_screen(&mut self, new_screen_size: Size) -> Result<()> {\n        // ...\n        self.render()\n            .with_context(|| format!(\"failed to resize to screen size: {new_screen_size:#?}\"))\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Registry to Cargo Configuration\nDESCRIPTION: TOML configuration to add a private registry named 'ktra' to the local .cargo/config.toml file in the Zellij repository. This directs Cargo to use the custom index for dependencies.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n\n[registries]\nktra = { index = \"https://$INDEX_REPO\" }\n```\n\n----------------------------------------\n\nTITLE: Example of Function with Unwrap Before Error Handling Improvements\nDESCRIPTION: Shows the Screen::render function before applying proper error handling. The function terminates execution with unwrap() if sending a message to the server fails, which is problematic for diagnostics and recovery.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n    pub fn render(&mut self) {\n        // ...\n        let serialized_output = output.serialize();\n        self.bus\n            .senders\n            .send_to_server(ServerInstruction::Render(Some(serialized_output)))\n            .unwrap();\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Function Before Error Handling Improvements\nDESCRIPTION: Shows the resize_to_screen function before applying proper error handling. It calls render() but doesn't handle any potential errors that might occur during rendering.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    pub fn resize_to_screen(&mut self, new_screen_size: Size) {\n        // ...\n        self.render();\n    }\n```\n\n----------------------------------------\n\nTITLE: CLI Option Renaming and Configuration Changes\nDESCRIPTION: Breaking changes in version 0.21.0 showing renamed and inverted CLI options, along with added and removed flags for mouse mode and pane frames configuration.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndisable_mouse_mode -> mouse_mode\nno_pane_frames -> pane_frames\n```\n\nLANGUAGE: bash\nCODE:\n```\nmouse-mode [bool]\npane-frames [bool]\nsimplified-ui [bool]\n```\n\n----------------------------------------\n\nTITLE: Zellij CLI Mouse Mode Configuration Example\nDESCRIPTION: Example showing how to enable mouse mode via CLI options in version 0.21.0.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nzellij options --mouse-mode true\n```\n\n----------------------------------------\n\nTITLE: Error Handling with if let in Rust\nDESCRIPTION: An example of error handling using if let, which hides the error and prevents proper logging with context. This approach is not recommended for Zellij error handling.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nif let Ok(active_tab) = self.get_active_tab(client_id) {\n    let active_tab_pos = active_tab.position;\n    let new_tab_pos = (active_tab_pos + 1) % self.tabs.len();\n    return self.switch_active_tab(new_tab_pos, client_id);\n} else {\n    log::error!(\"Active tab not found for client_id: {:?}\", client_id);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Logging in Rust with log::error!\nDESCRIPTION: A simple example of logging an error using the log::error! macro, which is not the preferred approach in Zellij as it loses context information that might be available in Result types.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/ERROR_HANDLING.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlog::error!(\"failed to find tab with index {tab_index}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Ktra Registry Server\nDESCRIPTION: TOML configuration for the Ktra registry server that defines how it connects to the Git repository used as a package index. Includes authentication details and branch information.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[index_config]\nremote_url = \"https://$INDEX_REPO\"\nhttps_username = \"your-git-username\"\nhttps_password = \"$TOKEN\" \nbranch = \"main\"  # Or whatever branch name you used\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatter in Rust\nDESCRIPTION: Command to run the Rust code formatter (rustfmt) using Cargo to ensure adherence to the project's code style.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo fmt\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij on Fedora Linux\nDESCRIPTION: Commands to enable the COPR repository and install Zellij on Fedora Linux systems.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/THIRD_PARTY_INSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf copr enable varlad/zellij \nsudo dnf install zellij\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij on Void Linux\nDESCRIPTION: Command to install Zellij using the XBPS package manager on Void Linux.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/THIRD_PARTY_INSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo xbps-install zellij\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ANSI Color Codes in Bash\nDESCRIPTION: This bash command demonstrates the use of ANSI escape codes to change text color and add a blinking effect in the terminal. It prints 'Hi' in red and 'there!' in blinking red.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/TERMINOLOGY.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"\\033[31mHi \\033[5mthere!\"\n```\n\n----------------------------------------\n\nTITLE: Testing Installed Zellij Binary\nDESCRIPTION: Bash command to execute the Zellij binary installed from the private registry. This is the final verification step to ensure the release works as expected.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n/tmp/bin/zellij\n```\n\n----------------------------------------\n\nTITLE: Forcing Update to Remote Repository\nDESCRIPTION: Bash command to force-push the reset state to the remote repository, undoing the release commit there as well. Essential for cleaning up after the simulated release.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push --force <YOUR_ZELLIJ_FORK>\n```\n\n----------------------------------------\n\nTITLE: Modifying Cargo.toml for Private Registry Dependencies\nDESCRIPTION: Example of how to modify Cargo.toml files to specify the use of the private registry for Zellij subcrates. The original path-based dependency is preserved while adding the registry specification.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nzellij-utils = { path = \"../zellij-utils/\", version = \"XXX\" }\n```\n\nLANGUAGE: toml\nCODE:\n```\nzellij-utils = { path = \"../zellij-utils/\", version = \"XXX\", registry = \"ktra\" }\n```\n\n----------------------------------------\n\nTITLE: Resetting Local Git Repository After Testing\nDESCRIPTION: Bash command to undo the release commit in the local git repository. Part of the cleanup process after completing the simulated release.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard HEAD~1\n```\n\n----------------------------------------\n\nTITLE: Creating User in Ktra Registry Server using cURL\nDESCRIPTION: Bash command using cURL to create a new user in the Ktra registry server. This step is required to get a token for authenticating with the registry.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'Content-Type: application/json' -d '{\"password\":\"PASSWORD\"}' http://localhost:8000/ktra/api/v1/new_user/ALICE\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Release Tag\nDESCRIPTION: Bash command to delete the version tag created during the simulated release process. Part of restoring the repository to its pre-simulation state.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -d \"vX.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Release Tag\nDESCRIPTION: Bash command to delete the version tag from the remote repository. The final step in cleaning up after the simulated release process.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit push <YOUR_ZELLIJ_FORK> --force --delete \"vX.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Cargo Registry with JSON in Git Repository\nDESCRIPTION: JSON configuration for a private cargo registry hosted on localhost port 8000. This file needs to be added to the root of a git repository that will serve as the cargo index.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"dl\":\"http://localhost:8000/dl\",\"api\":\"http://localhost:8000\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cargo Registry\nDESCRIPTION: TOML configuration for ~/.cargo/config.toml to define the private registry globally for the Cargo package manager. This allows Cargo to know where to find the index for packages.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[registries.ktra]\nindex = \"https://$INDEX_REPO\"\n```\n\n----------------------------------------\n\nTITLE: Logging in to Private Cargo Registry\nDESCRIPTION: Bash command to login to the private Ktra registry using the token received from the user creation step. This authenticates Cargo for publishing packages.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo login --registry ktra \"KTRA_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Zellij to Private Registry\nDESCRIPTION: Bash command that publishes Zellij to the private Ktra registry using the custom 'cargo x publish' command. Specifies the git remote to use for tagging and the cargo registry to publish to.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo x publish --git-remote <YOUR_ZELLIJ_FORK> --cargo-registry ktra\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij on Arch Linux\nDESCRIPTION: Commands to install Zellij from the official Arch Linux extra repository or AUR using package managers.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/THIRD_PARTY_INSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npacman -S zellij\n```\n\nLANGUAGE: bash\nCODE:\n```\nparu -S zellij-git\n```\n\n----------------------------------------\n\nTITLE: Installing Zellij from Private Registry\nDESCRIPTION: Bash command to install Zellij from the private Ktra registry to a temporary directory for testing. This allows verification that the published package works correctly.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/docs/RELEASE.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --registry ktra --root /tmp zellij\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: A markdown formatted changelog detailing version releases and changes in the Zellij project. Each version includes associated pull request links and detailed descriptions of changes.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.12.0] - 2021-05-27\n* Remove unused imports\n* More Infrastructure changes for the upcoming session detach feature\n* Restructuring cargo workspace\n* Terminal compatibility improvements\n* Split layout flag\n* Fix clean flag behavior\n* Resource usage improvements\n* Add detachable sessions feature\n* Support wide characters\n```\n\n----------------------------------------\n\nTITLE: Configuring Newline Character Binding in Zellij\nDESCRIPTION: Demonstrates the correct way to bind the newline character in Zellij configuration using double quotes instead of single quotes to ensure proper character interpretation.\nSOURCE: https://github.com/zellij-org/zellij/blob/main/example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCtrl: \"\\n\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nCtrl: '\\n'\n```"
  }
]