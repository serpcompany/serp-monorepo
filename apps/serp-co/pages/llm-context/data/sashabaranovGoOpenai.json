[
  {
    "owner": "sashabaranov",
    "repo": "go-openai",
    "content": "TITLE: Basic ChatGPT Implementation in Go\nDESCRIPTION: A complete example showing how to use the go-openai library to create a ChatGPT completion. It initializes a client with an API token and sends a simple message to the GPT-3.5 Turbo model.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your token\")\n\tresp, err := client.CreateChatCompletion(\n\t\tcontext.Background(),\n\t\topenai.ChatCompletionRequest{\n\t\t\tModel: openai.GPT3Dot5Turbo,\n\t\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t\t{\n\t\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\t\tContent: \"Hello!\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t)\n\n\tif err != nil {\n\t\tfmt.Printf(\"ChatCompletion error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(resp.Choices[0].Message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: ChatGPT Conversation with Context Management in Go\nDESCRIPTION: Shows how to implement a conversational interface with ChatGPT that maintains context. The example creates a client, builds a message history array that maintains the conversation context, and processes user inputs and assistant responses in a loop.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your token\")\n\tmessages := make([]openai.ChatCompletionMessage, 0)\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Println(\"Conversation\")\n\tfmt.Println(\"---------------------\")\n\n\tfor {\n\t\tfmt.Print(\"-> \")\n\t\ttext, _ := reader.ReadString('\\n')\n\t\t// convert CRLF to LF\n\t\ttext = strings.Replace(text, \"\\n\", \"\", -1)\n\t\tmessages = append(messages, openai.ChatCompletionMessage{\n\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\tContent: text,\n\t\t})\n\n\t\tresp, err := client.CreateChatCompletion(\n\t\t\tcontext.Background(),\n\t\t\topenai.ChatCompletionRequest{\n\t\t\t\tModel:    openai.GPT3Dot5Turbo,\n\t\t\t\tMessages: messages,\n\t\t\t},\n\t\t)\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"ChatCompletion error: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tcontent := resp.Choices[0].Message.Content\n\t\tmessages = append(messages, openai.ChatCompletionMessage{\n\t\t\tRole:    openai.ChatMessageRoleAssistant,\n\t\t\tContent: content,\n\t\t})\n\t\tfmt.Println(content)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming ChatGPT Completion with Go OpenAI SDK\nDESCRIPTION: Demonstrates how to create a streaming chat completion request using OpenAI's GPT-3.5 Turbo model. The code initializes a client, sets up a request with user message, and processes the streamed response tokens.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.ChatCompletionRequest{\n\t\tModel:     openai.GPT3Dot5Turbo,\n\t\tMaxTokens: 20,\n\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t{\n\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\tContent: \"Lorem ipsum\",\n\t\t\t},\n\t\t},\n\t\tStream: true,\n\t}\n\tstream, err := c.CreateChatCompletionStream(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"ChatCompletionStream error: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer stream.Close()\n\n\tfmt.Printf(\"Stream response: \")\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tfmt.Println(\"\\nStream finished\")\n\t\t\treturn\n\t\t}\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"\\nStream error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(response.Choices[0].Delta.Content)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GPT-3 Completion with Go OpenAI SDK\nDESCRIPTION: Shows how to make a basic completion request using OpenAI's GPT-3 Babbage model. The example creates a client, configures a completion request with a prompt, and handles the response.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.CompletionRequest{\n\t\tModel:     openai.GPT3Babbage002,\n\t\tMaxTokens: 5,\n\t\tPrompt:    \"Lorem ipsum\",\n\t}\n\tresp, err := c.CreateCompletion(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"Completion error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(resp.Choices[0].Text)\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming GPT-3 Completion with Go OpenAI SDK\nDESCRIPTION: Demonstrates creating a streaming completion request with OpenAI's GPT-3 Babbage model. The code shows how to initialize a client, configure a streaming request, and process the stream of response tokens.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.CompletionRequest{\n\t\tModel:     openai.GPT3Babbage002,\n\t\tMaxTokens: 5,\n\t\tPrompt:    \"Lorem ipsum\",\n\t\tStream:    true,\n\t}\n\tstream, err := c.CreateCompletionStream(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"CompletionStream error: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer stream.Close()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tfmt.Println(\"Stream finished\")\n\t\t\treturn\n\t\t}\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Stream error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\n\t\tfmt.Printf(\"Stream response: %v\\n\", response)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Embeddings with OpenAI API in Go\nDESCRIPTION: This snippet initializes an OpenAI client, sends a request to create embeddings for a given text input using the Ada model, and prints the first and last 10 dimensions of the resulting embedding vector. It demonstrates error handling and uses the context package for request management.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ninput := \"Text to vectorize\"\n\nclient := openai.NewClientWithConfig(config)\nresp, err := client.CreateEmbeddings(\n\tcontext.Background(),\n\topenai.EmbeddingRequest{\n\t\tInput: []string{input},\n\t\tModel: openai.AdaEmbeddingV2,\n\t})\n\nif err != nil {\n\tfmt.Printf(\"CreateEmbeddings error: %v\\n\", err)\n\treturn\n}\n\nvectors := resp.Data[0].Embedding // []float32 with 1536 dimensions\n\nfmt.Println(vectors[:10], \"...\", vectors[len(vectors)-10:])\n```\n\n----------------------------------------\n\nTITLE: Embedding Semantic Similarity with Go OpenAI SDK\nDESCRIPTION: Shows how to calculate semantic similarity between text using OpenAI's embedding models. The example creates embeddings for a query and a target text, then calculates their dot product to determine similarity.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\topenai \"github.com/sashabaranov/go-openai\"\n\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your-token\")\n\n\t// Create an EmbeddingRequest for the user query\n\tqueryReq := openai.EmbeddingRequest{\n\t\tInput: []string{\"How many chucks would a woodchuck chuck\"},\n\t\tModel: openai.AdaEmbeddingV2,\n\t}\n\n\t// Create an embedding for the user query\n\tqueryResponse, err := client.CreateEmbeddings(context.Background(), queryReq)\n\tif err != nil {\n\t\tlog.Fatal(\"Error creating query embedding:\", err)\n\t}\n\n\t// Create an EmbeddingRequest for the target text\n\ttargetReq := openai.EmbeddingRequest{\n\t\tInput: []string{\"How many chucks would a woodchuck chuck if the woodchuck could chuck wood\"},\n\t\tModel: openai.AdaEmbeddingV2,\n\t}\n\n\t// Create an embedding for the target text\n\ttargetResponse, err := client.CreateEmbeddings(context.Background(), targetReq)\n\tif err != nil {\n\t\tlog.Fatal(\"Error creating target embedding:\", err)\n\t}\n\n\t// Now that we have the embeddings for the user query and the target text, we\n\t// can calculate their similarity.\n\tqueryEmbedding := queryResponse.Data[0]\n\ttargetEmbedding := targetResponse.Data[0]\n\n\tsimilarity, err := queryEmbedding.DotProduct(&targetEmbedding)\n\tif err != nil {\n\t\tlog.Fatal(\"Error calculating dot product:\", err)\n\t}\n\n\tlog.Printf(\"The similarity score between the query and the target is %f\", similarity)\n}\n```\n\n----------------------------------------\n\nTITLE: DALL-E 2 Image Generation with Go OpenAI SDK\nDESCRIPTION: Shows how to generate images using OpenAI's DALL-E 2 model. The example demonstrates two methods: generating an image and getting a URL, and generating an image with base64 encoding and saving it as a PNG file.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\topenai \"github.com/sashabaranov/go-openai\"\n\t\"image/png\"\n\t\"os\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\t// Sample image by link\n\treqUrl := openai.ImageRequest{\n\t\tPrompt:         \"Parrot on a skateboard performs a trick, cartoon style, natural light, high detail\",\n\t\tSize:           openai.CreateImageSize256x256,\n\t\tResponseFormat: openai.CreateImageResponseFormatURL,\n\t\tN:              1,\n\t}\n\n\trespUrl, err := c.CreateImage(ctx, reqUrl)\n\tif err != nil {\n\t\tfmt.Printf(\"Image creation error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(respUrl.Data[0].URL)\n\n\t// Example image as base64\n\treqBase64 := openai.ImageRequest{\n\t\tPrompt:         \"Portrait of a humanoid parrot in a classic costume, high detail, realistic light, unreal engine\",\n\t\tSize:           openai.CreateImageSize256x256,\n\t\tResponseFormat: openai.CreateImageResponseFormatB64JSON,\n\t\tN:              1,\n\t}\n\n\trespBase64, err := c.CreateImage(ctx, reqBase64)\n\tif err != nil {\n\t\tfmt.Printf(\"Image creation error: %v\\n\", err)\n\t\treturn\n\t}\n\n\timgBytes, err := base64.StdEncoding.DecodeString(respBase64.Data[0].B64JSON)\n\tif err != nil {\n\t\tfmt.Printf(\"Base64 decode error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tr := bytes.NewReader(imgBytes)\n\timgData, err := png.Decode(r)\n\tif err != nil {\n\t\tfmt.Printf(\"PNG decode error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfile, err := os.Create(\"example.png\")\n\tif err != nil {\n\t\tfmt.Printf(\"File creation error: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tif err := png.Encode(file, imgData); err != nil {\n\t\tfmt.Printf(\"PNG encode error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"The image was saved as example.png\")\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Transcription with Whisper API in Go\nDESCRIPTION: Shows how to use OpenAI's Whisper API for speech-to-text transcription. The example creates a client, configures an audio transcription request with a local audio file, and processes the text response.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.AudioRequest{\n\t\tModel:    openai.Whisper1,\n\t\tFilePath: \"recording.mp3\",\n\t}\n\tresp, err := c.CreateTranscription(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"Transcription error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(resp.Text)\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Captions Generation with Whisper API in Go\nDESCRIPTION: Demonstrates how to generate subtitles/captions using OpenAI's Whisper API. The code creates a client, configures an audio request with SRT format, and saves the result to a file with the same name as the input file but with a .srt extension.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(os.Getenv(\"OPENAI_KEY\"))\n\n\treq := openai.AudioRequest{\n\t\tModel:    openai.Whisper1,\n\t\tFilePath: os.Args[1],\n\t\tFormat:   openai.AudioResponseFormatSRT,\n\t}\n\tresp, err := c.CreateTranscription(context.Background(), req)\n\tif err != nil {\n\t\tfmt.Printf(\"Transcription error: %v\\n\", err)\n\t\treturn\n\t}\n\tf, err := os.Create(os.Args[1] + \".srt\")\n\tif err != nil {\n\t\tfmt.Printf(\"Could not open file: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer f.Close()\n\tif _, err := f.WriteString(resp.Text); err != nil {\n\t\tfmt.Printf(\"Error writing to file: %v\\n\", err)\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI ChatGPT Integration in Go\nDESCRIPTION: Demonstrates how to use Azure OpenAI services instead of OpenAI directly. The example shows configuring an Azure client, optionally mapping model names to deployment names, and making a chat completion request.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tconfig := openai.DefaultAzureConfig(\"your Azure OpenAI Key\", \"https://your Azure OpenAI Endpoint\")\n\t// If you use a deployment name different from the model name, you can customize the AzureModelMapperFunc function\n\t// config.AzureModelMapperFunc = func(model string) string {\n\t// \tazureModelMapping := map[string]string{\n\t// \t\t\"gpt-3.5-turbo\": \"your gpt-3.5-turbo deployment name\",\n\t// \t}\n\t// \treturn azureModelMapping[model]\n\t// }\n\n\tclient := openai.NewClientWithConfig(config)\n\tresp, err := client.CreateChatCompletion(\n\t\tcontext.Background(),\n\t\topenai.ChatCompletionRequest{\n\t\t\tModel: openai.GPT3Dot5Turbo,\n\t\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t\t{\n\t\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\t\tContent: \"Hello Azure OpenAI!\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\tfmt.Printf(\"ChatCompletion error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(resp.Choices[0].Message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Embeddings with Go SDK\nDESCRIPTION: Demonstrates how to use Azure OpenAI services for embeddings. The example shows how to configure an Azure client with custom API version and optionally map model names to deployment names.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\n\tconfig := openai.DefaultAzureConfig(\"your Azure OpenAI Key\", \"https://your Azure OpenAI Endpoint\")\n\tconfig.APIVersion = \"2023-05-15\" // optional update to latest API version\n\n\t//If you use a deployment name different from the model name, you can customize the AzureModelMapperFunc function\n\t//config.AzureModelMapperFunc = func(model string) string {\n\t//    azureModelMapping := map[string]string{\n\t//        \"gpt-3.5-turbo\":\"your gpt-3.5-turbo deployment name\",\n\t//    }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy for OpenAI Client in Go\nDESCRIPTION: Demonstrates how to configure an HTTP proxy for the OpenAI client. The example shows creating a custom HTTP transport with proxy settings and using it with the OpenAI client configuration.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nconfig := openai.DefaultConfig(\"token\")\nproxyUrl, err := url.Parse(\"http://localhost:{port}\")\nif err != nil {\n\tpanic(err)\n}\ntransport := &http.Transport{\n\tProxy: http.ProxyURL(proxyUrl),\n}\nconfig.HTTPClient = &http.Client{\n\tTransport: transport,\n}\n\nc := openai.NewClientWithConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Installing Go OpenAI Client Library\nDESCRIPTION: Command to install the go-openai library using Go modules. Requires Go version 1.18 or greater.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/sashabaranov/go-openai\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI API Examples with Environment Variable\nDESCRIPTION: Sets the OpenAI API key as an environment variable and executes a specific example from the repository. Replace '<target>' with the desired example file or directory to run.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"<your key here>\"\ngo run ./example/<target>\n```\n\n----------------------------------------\n\nTITLE: Running Go unit tests\nDESCRIPTION: This command runs all Go unit tests in the project to ensure changes don't break existing functionality.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Running Go integration tests with OpenAI API\nDESCRIPTION: This command runs integration tests against the production OpenAI API, requiring an API token set as an environment variable.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_TOKEN=XXX go test -v -tags=integration ./api_integration_test.go\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint for Go code linting\nDESCRIPTION: This snippet demonstrates how to install and run golangci-lint to check for syntax and style issues in Go code.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ngolangci-lint run --out-format=github-actions\n```\n\n----------------------------------------\n\nTITLE: Running goimports for Go code formatting\nDESCRIPTION: This snippet shows how to install and run goimports to format Go code according to standard conventions.\nSOURCE: https://github.com/sashabaranov/go-openai/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ngoimports -w .\n```"
  }
]