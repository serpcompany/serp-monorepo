[
  {
    "owner": "honojs",
    "repo": "honox-website",
    "content": "TITLE: Typical HonoX Project Structure Overview\nDESCRIPTION: A directory structure showing the organization of a typical HonoX application, including routes, server entry file, and configuration files.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app\n│   ├── global.d.ts // global type definitions\n│   ├── routes\n│   │   ├── _404.tsx // not found page\n│   │   ├── _error.tsx // error page\n│   │   ├── _renderer.tsx // renderer definition\n│   │   ├── about\n│   │   │   └── [name].tsx // matches `/about/:name`\n│   │   └── index.tsx // matches `/`\n│   └── server.ts // server entry file\n├── package.json\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a HonoX Server Entry File\nDESCRIPTION: Server entry point that initializes the HonoX application. It uses createApp() to generate a Hono instance and displays routes during development.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// app/server.ts\nimport { createApp } from 'honox/server'\nimport { showRoutes } from 'hono/dev'\n\nconst app = createApp()\n\nshowRoutes(app)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GET Route with createRoute in HonoX\nDESCRIPTION: Demonstrates how to create a simple route handler for GET requests using createRoute() helper function and JSX rendering.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\n// `createRoute()` helps you create handlers\nimport { createRoute } from 'honox/factory'\n\nexport default createRoute((c) => {\n  return c.render(\n    <div>\n      <h1>Hello!</h1>\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a JSX Renderer in HonoX\nDESCRIPTION: Creates a renderer middleware that defines the HTML structure for all pages. This component wraps rendered content with HTML, head, and body elements.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\n\nexport default jsxRenderer(({ children, title }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        {title ? <title>{title}</title> : <></>}\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example\nDESCRIPTION: Shows the basic file and directory structure for a HonoX application with client-side functionality.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── app\n│   ├── client.ts // client entry file\n│   ├── global.d.ts\n│   ├── islands\n│   │   └── counter.tsx // island component\n│   ├── routes\n│   │   ├── _renderer.tsx\n│   │   └── index.tsx\n│   └── server.ts\n├── package.json\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple HTTP Methods in HonoX Routes\nDESCRIPTION: Example showing how to handle both GET and POST requests in a single route file. The POST handler processes form data and sets a cookie, while the GET handler renders a form.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport { createRoute } from 'honox/factory'\nimport { getCookie, setCookie } from 'hono/cookie'\n\nexport const POST = createRoute(async (c) => {\n  const { name } = await c.req.parseBody<{ name: string }>()\n  setCookie(c, 'name', name)\n  return c.redirect('/')\n})\n\nexport default createRoute((c) => {\n  const name = getCookie(c, 'name') ?? 'no name'\n  return c.render(\n    <div>\n      <h1>Hello, {name}!</h1>\n      <form method='POST'>\n        <input type='text' name='name' placeholder='name' />\n        <input type='submit' />\n      </form>\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Simple JSX Component Routes in HonoX\nDESCRIPTION: Demonstrates the simplest way to define a route by directly returning JSX from a function component without using createRoute().\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nexport default function Home(_c: Context) {\n  return <h1>Welcome!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Routes with a Hono Instance in HonoX\nDESCRIPTION: Shows how to create API endpoints by exporting a Hono instance, enabling dynamic parameter handling with route parameters.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// app/routes/about/index.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\n// matches `/about/:name`\napp.get('/:name', (c) => {\n  const name = c.req.param('name')\n  return c.json({\n    'your name is': name,\n  })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Nested Layout with JSX Renderer in HonoX\nDESCRIPTION: This snippet demonstrates how to create a basic nested layout using the JSX Renderer middleware in HonoX. It shows how to wrap child content with a navigation menu inside a parent layout.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/02-guide/01-nested-layouts.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/posts/_renderer.tsx\n\nimport { jsxRenderer } from 'hono/jsx-renderer'\n\nexport default jsxRenderer(({ children, Layout }) => {\n  return (\n    <Layout>\n      <nav>Posts Menu</nav>\n      <div>{children}</div>\n    </Layout>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for HonoX Development\nDESCRIPTION: Minimal Vite configuration required to set up a HonoX application during development. It imports the HonoX plugin and applies it.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport honox from 'honox/vite'\n\nexport default defineConfig({\n  plugins: [honox()],\n})\n```\n\n----------------------------------------\n\nTITLE: Client Entry File Configuration\nDESCRIPTION: Basic client entry file setup using createClient().\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app/client.ts\nimport { createClient } from 'honox/client'\n\ncreateClient()\n```\n\n----------------------------------------\n\nTITLE: Interactive Counter Component Implementation\nDESCRIPTION: Example of an interactive island component implementing a counter with state management.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// app/islands/counter.tsx\nimport { useState } from 'hono/jsx'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Props for Nested Layouts in HonoX\nDESCRIPTION: This snippet shows how to define a route that will use nested layouts with props. It demonstrates passing a title prop to the render method, which will be used by the layout components.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/02-guide/01-nested-layouts.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/nested/index.tsx\nexport default createRoute((c) => {\n  return c.render(<div>Content</div>, { title: 'Dashboard' })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 404 Not Found Page in HonoX\nDESCRIPTION: Implements a custom Not Found handler that renders a JSX component when a route is not matched.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_404.tsx\nimport { NotFoundHandler } from 'hono'\n\nconst handler: NotFoundHandler = (c) => {\n  return c.render(<h1>Sorry, Not Found...</h1>)\n}\n\nexport default handler\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Error Page in HonoX\nDESCRIPTION: Defines an error handler that renders a custom error page with the error message when exceptions occur during request processing.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_error.tsx\nimport { ErrorHandler } from 'hono'\n\nconst handler: ErrorHandler = (e, c) => {\n  return c.render(<h1>Error! {e.message}</h1>)\n}\n\nexport default handler\n```\n\n----------------------------------------\n\nTITLE: Configuring React Client for Hydration in HonoX\nDESCRIPTION: Client-side setup that creates a HonoX client with React-specific hydration and element creation functions for client-side rendering.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/byor/react.mdx#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// app/client.ts\nimport { createClient } from 'honox/client'\n\ncreateClient({\n  hydrate: async (elem, root) => {\n    const { hydrateRoot } = await import('react-dom/client')\n    hydrateRoot(root, elem)\n  },\n  createElement: async (type: any, props: any) => {\n    const { createElement } = await import('react')\n    return createElement(type, props)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Renderer Implementation\nDESCRIPTION: Implementation of _renderer.tsx that handles client-side script loading based on environment.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\nimport { HasIslands } from 'honox/server'\n\nexport default jsxRenderer(({ children }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        {import.meta.env.PROD ? (\n          <HasIslands>\n            <script type='module' src='/static/client.js'></script>\n          </HasIslands>\n        ) : (\n          <script type='module' src='/app/client.ts'></script>\n        )}\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Renderer with Prop Propagation in HonoX\nDESCRIPTION: This snippet demonstrates a nested renderer that explicitly passes props to its parent layout. It shows how to receive props from a route and then forward them to the parent layout component.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/02-guide/01-nested-layouts.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/nested/_renderer.tsx\nexport default jsxRenderer(({ children, Layout, title }) => {\n  return (\n    <Layout title={title}>\n      {/* Pass the title prop to the parent renderer */}\n      <main>{children}</main>\n    </Layout>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parent Layout Renderer in HonoX\nDESCRIPTION: This snippet shows how to create a parent layout renderer that receives props from nested layouts. It demonstrates how to use the title prop passed from a child layout to set the page title in the HTML head.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/02-guide/01-nested-layouts.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nexport default jsxRenderer(({ children, title }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <title>{title}</title> {/* Use the title prop here */}\n      </head>\n      <body>\n        {children} {/* Insert the Layout's children here */}\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Route Component Integration\nDESCRIPTION: Example of integrating an interactive island component into a route component.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/index.tsx\nimport { createRoute } from 'honox/factory'\nimport Counter from '../islands/counter'\n\nexport default createRoute((c) => {\n  return c.render(\n    <div>\n      <h1>Hello</h1>\n      <Counter />\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating React Renderer Component in HonoX\nDESCRIPTION: Implementation of the main React renderer component that defines the HTML structure, handles conditional script loading based on environment, and renders the title and children components.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/byor/react.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { reactRenderer } from '@hono/react-renderer'\n\nexport default reactRenderer(({ children, title }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charSet='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        {import.meta.env.PROD ? (\n          <script type='module' src='/static/client.js'></script>\n        ) : (\n          <script type='module' src='/app/client.ts'></script>\n        )}\n        {title ? <title>{title}</title> : ''}\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Renderer in HonoX\nDESCRIPTION: Command to install the necessary packages for using React with HonoX, including @hono/react-renderer, react, react-dom, and hono, along with their TypeScript type definitions.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/byor/react.mdx#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nnpm i @hono/react-renderer react react-dom hono\nnpm i -D @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Manifest-based Renderer Implementation\nDESCRIPTION: Alternative renderer implementation using Script component for manifest-based script loading.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\nimport { Script } from 'honox/server'\n\nexport default jsxRenderer(({ children }) => {\n  return (\n    <html lang='en'>\n      <head>\n        <meta charset='UTF-8' />\n        <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n        <Script src='/app/client.ts' />\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Nonce-enabled Renderer Implementation\nDESCRIPTION: Renderer implementation with nonce attribute support for enhanced security.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// app/routes/_renderer.tsx\nimport { jsxRenderer } from 'hono/jsx-renderer'\nimport { Script } from 'honox/server'\n\nexport default jsxRenderer(({ children }, c) => {\n  return (\n    <html lang='en'>\n      <head>\n        <Script src='/app/client.ts' async nonce={c.get('secureHeadersNonce')} />\n      </head>\n      <body>{children}</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Security Headers Middleware Configuration\nDESCRIPTION: Configuration for adding nonce attributes to script elements using Security Headers Middleware.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/02-with-client.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/_middleware.ts\nimport { createRoute } from 'honox/factory'\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\n\nsecureHeaders({\n  contentSecurityPolicy: {\n    scriptSrc: [NONCE],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Type Extensions for HonoX Renderer\nDESCRIPTION: Global type definitions for the renderer functionality, extending the Hono context with a custom ContextRenderer type.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/01-basic.mdx#2025-04-11_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// app/global.d.ts\nimport type {} from 'hono'\n\ntype Head = {\n  title?: string\n}\n\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (content: string | Promise<string>, head?: Head): Response | Promise<Response>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Props Interface for React Renderer\nDESCRIPTION: TypeScript definition file that extends the @hono/react-renderer module to define custom Props interface with an optional title property.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/byor/react.mdx#2025-04-11_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// global.d.ts\nimport '@hono/react-renderer'\n\ndeclare module '@hono/react-renderer' {\n  interface Props {\n    title?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for React in HonoX\nDESCRIPTION: Vite configuration that sets up different build options for client and server modes, including proper bundling for client assets and external dependencies for server-side rendering.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/byor/react.mdx#2025-04-11_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// vite.config.ts\nimport build from '@hono/vite-build/cloudflare-pages'\nimport honox from 'honox/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig(({ mode }) => {\n  if (mode === 'client') {\n    return {\n      build: {\n        rollupOptions: {\n          input: ['./app/client.ts'],\n          output: {\n            entryFileNames: 'static/client.js',\n            chunkFileNames: 'static/assets/[name]-[hash].js',\n            assetFileNames: 'static/assets/[name].[ext]',\n          },\n        },\n        emptyOutDir: false,\n      },\n    }\n  } else {\n    return {\n      ssr: {\n        external: ['react', 'react-dom'],\n      },\n      plugins: [honox(), build()],\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting JSX Factory in TypeScript Configuration\nDESCRIPTION: TypeScript configuration snippet that sets the jsxImportSource to React, ensuring that TypeScript properly processes JSX syntax for React components.\nSOURCE: https://github.com/honojs/honox-website/blob/main/app/routes/docs/01-getting-started/byor/react.mdx#2025-04-11_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    ...\n    \"jsxImportSource\": \"react\"\n    ...\n  }\n}\n\n```"
  }
]