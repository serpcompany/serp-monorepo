[
  {
    "owner": "gnome",
    "repo": "gtk",
    "content": "TITLE: Creating Basic GTK Window Application in C\nDESCRIPTION: Demonstrates how to create a minimal GTK application that displays a 200x200 pixel window. Shows initialization of GtkApplication, window creation, and basic application lifecycle management.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\nstatic void\nactivate (GtkApplication* app,\n          gpointer        user_data)\n{\n  GtkWidget *window;\n\n  window = gtk_application_window_new (app);\n  gtk_window_set_title (GTK_WINDOW (window), \"Window\");\n  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n  gtk_window_present (GTK_WINDOW (window));\n}\n\nint\nmain (int    argc,\n      char **argv)\n{\n  GtkApplication *app;\n  int status;\n\n  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_DEFAULT_FLAGS);\n  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n  status = g_application_run (G_APPLICATION (app), argc, argv);\n  g_object_unref (app);\n\n  return status;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Drawing Application in GTK (C)\nDESCRIPTION: This snippet demonstrates how to create a GTK application that allows drawing on a canvas in response to mouse input. It uses Cairo for drawing operations and GtkGesture for handling mouse events.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\n/* Surface to store current scribbles */\nstatic cairo_surface_t *surface = NULL;\n\nstatic void\nclear_surface (void)\n{\n  cairo_t *cr;\n\n  cr = cairo_create (surface);\n\n  cairo_set_source_rgb (cr, 1, 1, 1);\n  cairo_paint (cr);\n\n  cairo_destroy (cr);\n}\n\n/* Create a new surface of the appropriate size to store our scribbles */\nstatic void\nresize_cb (GtkWidget *widget,\n           int        width,\n           int        height,\n           gpointer   data)\n{\n  if (surface)\n    {\n      cairo_surface_destroy (surface);\n      surface = NULL;\n    }\n\n  if (gtk_native_get_surface (gtk_widget_get_native (widget)))\n    {\n      surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32,\n                                            gtk_widget_get_width (widget),\n                                            gtk_widget_get_height (widget));\n\n      /* Initialize the surface to white */\n      clear_surface ();\n    }\n}\n\n/* Redraw the screen from the surface. Note that the draw\n * callback receives a ready-to-be-used cairo_t that is already\n * clipped to only draw the exposed areas of the widget\n */\nstatic void\ndraw_cb (GtkDrawingArea *drawing_area,\n         cairo_t        *cr,\n         int             width,\n         int             height,\n         gpointer        data)\n{\n  cairo_set_source_surface (cr, surface, 0, 0);\n  cairo_paint (cr);\n}\n\n/* Draw a rectangle on the surface at the given position */\nstatic void\ndraw_brush (GtkWidget *widget,\n            double     x,\n            double     y)\n{\n  cairo_t *cr;\n\n  /* Paint to the surface, where we store our state */\n  cr = cairo_create (surface);\n\n  cairo_rectangle (cr, x - 3, y - 3, 6, 6);\n  cairo_fill (cr);\n\n  cairo_destroy (cr);\n\n  /* Now invalidate the drawing area. */\n  gtk_widget_queue_draw (widget);\n}\n\nstatic double start_x;\nstatic double start_y;\n\nstatic void\ndrag_begin (GtkGestureDrag *gesture,\n            double          x,\n            double          y,\n            GtkWidget      *area)\n{\n  start_x = x;\n  start_y = y;\n\n  draw_brush (area, x, y);\n}\n\nstatic void\ndrag_update (GtkGestureDrag *gesture,\n             double          x,\n             double          y,\n             GtkWidget      *area)\n{\n  draw_brush (area, start_x + x, start_y + y);\n}\n\nstatic void\ndrag_end (GtkGestureDrag *gesture,\n          double          x,\n          double          y,\n          GtkWidget      *area)\n{\n  draw_brush (area, start_x + x, start_y + y);\n}\n\nstatic void\npressed (GtkGestureClick *gesture,\n         int              n_press,\n         double           x,\n         double           y,\n         GtkWidget       *area)\n{\n  clear_surface ();\n  gtk_widget_queue_draw (area);\n}\n\nstatic void\nclose_window (void)\n{\n  if (surface)\n    cairo_surface_destroy (surface);\n}\n\nstatic void\nactivate (GtkApplication *app,\n          gpointer        user_data)\n{\n  GtkWidget *window;\n  GtkWidget *frame;\n  GtkWidget *drawing_area;\n  GtkGesture *drag;\n  GtkGesture *press;\n\n  window = gtk_application_window_new (app);\n  gtk_window_set_title (GTK_WINDOW (window), \"Drawing Area\");\n\n  g_signal_connect (window, \"destroy\", G_CALLBACK (close_window), NULL);\n\n  frame = gtk_frame_new (NULL);\n  gtk_window_set_child (GTK_WINDOW (window), frame);\n\n  drawing_area = gtk_drawing_area_new ();\n  /* set a minimum size */\n  gtk_widget_set_size_request (drawing_area, 100, 100);\n\n  gtk_frame_set_child (GTK_FRAME (frame), drawing_area);\n\n  gtk_drawing_area_set_draw_func (GTK_DRAWING_AREA (drawing_area), draw_cb, NULL, NULL);\n\n  g_signal_connect_after (drawing_area, \"resize\", G_CALLBACK (resize_cb), NULL);\n\n  drag = gtk_gesture_drag_new ();\n  gtk_gesture_single_set_button (GTK_GESTURE_SINGLE (drag), GDK_BUTTON_PRIMARY);\n  gtk_widget_add_controller (drawing_area, GTK_EVENT_CONTROLLER (drag));\n  g_signal_connect (drag, \"drag-begin\", G_CALLBACK (drag_begin), drawing_area);\n  g_signal_connect (drag, \"drag-update\", G_CALLBACK (drag_update), drawing_area);\n  g_signal_connect (drag, \"drag-end\", G_CALLBACK (drag_end), drawing_area);\n\n  press = gtk_gesture_click_new ();\n  gtk_gesture_single_set_button (GTK_GESTURE_SINGLE (press), GDK_BUTTON_SECONDARY);\n  gtk_widget_add_controller (drawing_area, GTK_EVENT_CONTROLLER (press));\n\n  g_signal_connect (press, \"pressed\", G_CALLBACK (pressed), drawing_area);\n\n  gtk_window_present (GTK_WINDOW (window));\n}\n\nint\nmain (int    argc,\n      char **argv)\n{\n  GtkApplication *app;\n  int status;\n\n  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_DEFAULT_FLAGS);\n  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n  status = g_application_run (G_APPLICATION (app), argc, argv);\n  g_object_unref (app);\n\n  return status;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Actions and Startup in C\nDESCRIPTION: Defines action functions for preferences and quit, sets up action entries, and initializes the application in the startup function. It also sets up keyboard accelerators for the quit action.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nstatic void\npreferences_activated (GSimpleAction *action,\n                       GVariant      *parameter,\n                       gpointer       app)\n{\n}\n\nstatic void\nquit_activated (GSimpleAction *action,\n                GVariant      *parameter,\n                gpointer       app)\n{\n  g_application_quit (G_APPLICATION (app));\n}\n\nstatic GActionEntry app_entries[] =\n{\n  { \"preferences\", preferences_activated, NULL, NULL, NULL },\n  { \"quit\", quit_activated, NULL, NULL, NULL }\n};\n\nstatic void\nexample_app_startup (GApplication *app)\n{\n  GtkBuilder *builder;\n  GMenuModel *app_menu;\n  const char *quit_accels[2] = { \"<Ctrl>Q\", NULL };\n\n  G_APPLICATION_CLASS (example_app_parent_class)->startup (app);\n\n  g_action_map_add_action_entries (G_ACTION_MAP (app),\n                                   app_entries, G_N_ELEMENTS (app_entries),\n                                   app);\n  gtk_application_set_accels_for_action (GTK_APPLICATION (app),\n                                         \"app.quit\",\n                                         quit_accels);\n}\n\nstatic void\nexample_app_class_init (ExampleAppClass *class)\n{\n  G_APPLICATION_CLASS (class)->startup = example_app_startup;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GTK Application Window with Search Bar in XML\nDESCRIPTION: This XML template defines the structure of the application window, including a header bar with a search toggle button and a search bar widget. It demonstrates the use of GtkHeaderBar, GtkToggleButton, GtkSearchBar, and GtkSearchEntry.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <template class=\"ExampleAppWindow\" parent=\"GtkApplicationWindow\">\n    <property name=\"title\" translatable=\"yes\">Example Application</property>\n    <property name=\"default-width\">600</property>\n    <property name=\"default-height\">400</property>\n    <child type=\"titlebar\">\n      <object class=\"GtkHeaderBar\" id=\"header\">\n        <child type=\"title\">\n          <object class=\"GtkStackSwitcher\" id=\"tabs\">\n            <property name=\"stack\">stack</property>\n          </object>\n        </child>\n        <child type=\"end\">\n          <object class=\"GtkMenuButton\" id=\"gears\">\n            <property name=\"direction\">none</property>\n          </object>\n        </child>\n        <child type=\"end\">\n          <object class=\"GtkToggleButton\" id=\"search\">\n            <property name=\"sensitive\">0</property>\n            <property name=\"icon-name\">edit-find-symbolic</property>\n          </object>\n        </child>\n      </object>\n    </child>\n    <child>\n      <object class=\"GtkBox\" id=\"content_box\">\n        <property name=\"orientation\">vertical</property>\n        <child>\n          <object class=\"GtkSearchBar\" id=\"searchbar\">\n            <child>\n              <object class=\"GtkSearchEntry\" id=\"searchentry\">\n                <signal name=\"search-changed\" handler=\"search_text_changed\"/>\n              </object>\n            </child>\n          </object>\n        </child>\n        <child>\n          <object class=\"GtkStack\" id=\"stack\">\n            <signal name=\"notify::visible-child\" handler=\"visible_child_changed\"/>\n          </object>\n        </child>\n      </object>\n    </child>\n  </template>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: GTK Grid Layout with Multiple Buttons in C\nDESCRIPTION: Shows how to create a GTK window with multiple buttons arranged in a grid layout. Demonstrates grid attachment, button creation with labels, and signal handling for different actions.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\nstatic void\nprint_hello (GtkWidget *widget,\n             gpointer   data)\n{\n  g_print (\"Hello World\\n\");\n}\n\nstatic void\nactivate (GtkApplication *app,\n          gpointer        user_data)\n{\n  GtkWidget *window;\n  GtkWidget *grid;\n  GtkWidget *button;\n\n  /* create a new window, and set its title */\n  window = gtk_application_window_new (app);\n  gtk_window_set_title (GTK_WINDOW (window), \"Window\");\n\n  /* Here we construct the container that is going pack our buttons */\n  grid = gtk_grid_new ();\n\n  /* Pack the container in the window */\n  gtk_window_set_child (GTK_WINDOW (window), grid);\n\n  button = gtk_button_new_with_label (\"Button 1\");\n  g_signal_connect (button, \"clicked\", G_CALLBACK (print_hello), NULL);\n\n  /* Place the first button in the grid cell (0, 0), and make it fill\n   * just 1 cell horizontally and vertically (ie no spanning)\n   */\n  gtk_grid_attach (GTK_GRID (grid), button, 0, 0, 1, 1);\n\n  button = gtk_button_new_with_label (\"Button 2\");\n  g_signal_connect (button, \"clicked\", G_CALLBACK (print_hello), NULL);\n\n  /* Place the second button in the grid cell (1, 0), and make it fill\n   * just 1 cell horizontally and vertically (ie no spanning)\n   */\n  gtk_grid_attach (GTK_GRID (grid), button, 1, 0, 1, 1);\n\n  button = gtk_button_new_with_label (\"Quit\");\n  g_signal_connect_swapped (button, \"clicked\", G_CALLBACK (gtk_window_destroy), window);\n\n  /* Place the Quit button in the grid cell (0, 1), and make it\n   * span 2 columns.\n   */\n  gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 2, 1);\n\n  gtk_window_present (GTK_WINDOW (window));\n}\n\nint\nmain (int    argc,\n      char **argv)\n{\n  GtkApplication *app;\n  int status;\n\n  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_DEFAULT_FLAGS);\n  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n  status = g_application_run (G_APPLICATION (app), argc, argv);\n  g_object_unref (app);\n\n  return status;\n}\n```\n\n----------------------------------------\n\nTITLE: Building User Interface with GtkBuilder (C)\nDESCRIPTION: This snippet demonstrates how to use GtkBuilder to create a user interface from an XML description file. It loads the UI from a file, connects signal handlers, and sets up the application window.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n#include <glib/gstdio.h>\n\nstatic void\nprint_hello (GtkWidget *widget,\n             gpointer   data)\n{\n  g_print (\"Hello World\\n\");\n}\n\nstatic void\nquit_cb (GtkWindow *window)\n{\n  gtk_window_close (window);\n}\n\nstatic void\nactivate (GtkApplication *app,\n          gpointer        user_data)\n{\n  /* Construct a GtkBuilder instance and load our UI description */\n  GtkBuilder *builder = gtk_builder_new ();\n  gtk_builder_add_from_file (builder, \"builder.ui\", NULL);\n\n  /* Connect signal handlers to the constructed widgets. */\n  GObject *window = gtk_builder_get_object (builder, \"window\");\n  gtk_window_set_application (GTK_WINDOW (window), app);\n\n  GObject *button = gtk_builder_get_object (builder, \"button1\");\n  g_signal_connect (button, \"clicked\", G_CALLBACK (print_hello), NULL);\n\n  button = gtk_builder_get_object (builder, \"button2\");\n  g_signal_connect (button, \"clicked\", G_CALLBACK (print_hello), NULL);\n\n  button = gtk_builder_get_object (builder, \"quit\");\n  g_signal_connect_swapped (button, \"clicked\", G_CALLBACK (quit_cb), window);\n\n  gtk_widget_set_visible (GTK_WIDGET (window), TRUE);\n\n  /* We do not need the builder any more */\n  g_object_unref (builder);\n}\n\nint\nmain (int   argc,\n      char *argv[])\n{\n#ifdef GTK_SRCDIR\n  g_chdir (GTK_SRCDIR);\n#endif\n\n  GtkApplication *app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_DEFAULT_FLAGS);\n  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n\n  int status = g_application_run (G_APPLICATION (app), argc, argv);\n  g_object_unref (app);\n\n  return status;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GTK Window with Hello World Button in C\nDESCRIPTION: Demonstrates how to create a basic GTK application window with a centered 'Hello World' button. Shows window initialization, button creation, signal connection, and proper GTK application setup.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\nstatic void\nprint_hello (GtkWidget *widget,\n             gpointer   data)\n{\n  g_print (\"Hello World\\n\");\n}\n\nstatic void\nactivate (GtkApplication *app,\n          gpointer        user_data)\n{\n  GtkWidget *window;\n  GtkWidget *button;\n  GtkWidget *box;\n\n  window = gtk_application_window_new (app);\n  gtk_window_set_title (GTK_WINDOW (window), \"Window\");\n  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n\n  box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);\n  gtk_widget_set_halign (box, GTK_ALIGN_CENTER);\n  gtk_widget_set_valign (box, GTK_ALIGN_CENTER);\n\n  gtk_window_set_child (GTK_WINDOW (window), box);\n\n  button = gtk_button_new_with_label (\"Hello World\");\n\n  g_signal_connect (button, \"clicked\", G_CALLBACK (print_hello), NULL);\n  g_signal_connect_swapped (button, \"clicked\", G_CALLBACK (gtk_window_destroy), window);\n\n  gtk_box_append (GTK_BOX (box), button);\n\n  gtk_window_present (GTK_WINDOW (window));\n}\n\nint\nmain (int    argc,\n      char **argv)\n{\n  GtkApplication *app;\n  int status;\n\n  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_DEFAULT_FLAGS);\n  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n  status = g_application_run (G_APPLICATION (app), argc, argv);\n  g_object_unref (app);\n\n  return status;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GTK Application Class in C\nDESCRIPTION: This code defines the ExampleApp class, a subclass of GtkApplication. It overrides the activate() and open() virtual functions to handle application activation with and without command-line arguments.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\n#include \"exampleapp.h\"\n#include \"exampleappwin.h\"\n\nstruct _ExampleApp\n{\n  GtkApplication parent;\n};\n\nG_DEFINE_TYPE(ExampleApp, example_app, GTK_TYPE_APPLICATION);\n\nstatic void\nexample_app_init (ExampleApp *app)\n{\n}\n\nstatic void\nexample_app_activate (GApplication *app)\n{\n  ExampleAppWindow *win;\n\n  win = example_app_window_new (EXAMPLE_APP (app));\n  gtk_window_present (GTK_WINDOW (win));\n}\n\nstatic void\nexample_app_open (GApplication  *app,\n                  GFile        **files,\n                  int            n_files,\n                  const char    *hint)\n{\n  GList *windows;\n  ExampleAppWindow *win;\n  int i;\n\n  windows = gtk_application_get_windows (GTK_APPLICATION (app));\n  if (windows)\n    win = EXAMPLE_APP_WINDOW (windows->data);\n  else\n    win = example_app_window_new (EXAMPLE_APP (app));\n\n  for (i = 0; i < n_files; i++)\n    example_app_window_open (win, files[i]);\n\n  gtk_window_present (GTK_WINDOW (win));\n}\n\nstatic void\nexample_app_class_init (ExampleAppClass *class)\n{\n  G_APPLICATION_CLASS (class)->activate = example_app_activate;\n  G_APPLICATION_CLASS (class)->open = example_app_open;\n}\n\nExampleApp *\nexample_app_new (void)\n{\n  return g_object_new (EXAMPLE_APP_TYPE,\n                       \"application-id\", \"org.gtk.exampleapp\",\n                       \"flags\", G_APPLICATION_HANDLES_OPEN,\n                       NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GTK Application Main Function in C\nDESCRIPTION: Demonstrates the basic structure of a GTK application's main function, including initialization, window creation, and main event loop handling. Shows the fundamental setup required for a GTK application to handle user interactions and window management.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/initialization.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint\nmain (int argc, char **argv)\n{\n GtkWidget *window;\n  // Initialize i18n support with bindtextdomain(), etc.\n\n  // ...\n\n  // Initialize the widget set\n  gtk_init ();\n\n  // Create the main window\n  window = gtk_window_new ();\n\n  // Set up our GUI elements\n\n  // ...\n\n  // Show the application window\n  gtk_window_present (GTK_WINDOW (window));\n\n  // Enter the main event loop, and wait for user interaction\n  while (!done)\n    g_main_context_iteration (NULL, TRUE);\n\n  // The user lost interest\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GTK Application in C\nDESCRIPTION: This snippet shows the main() function for a GTK application. It creates an instance of the custom application class and runs it using g_application_run().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\n#include \"exampleapp.h\"\n\nint\nmain (int argc, char *argv[])\n{\n  return g_application_run (G_APPLICATION (example_app_new ()), argc, argv);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GTK Application Window Class in C\nDESCRIPTION: This snippet defines the ExampleAppWindow class, a subclass of GtkApplicationWindow. It provides the basic structure for the application's main window.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\n#include \"exampleapp.h\"\n#include \"exampleappwin.h\"\n\nstruct _ExampleAppWindow\n{\n  GtkApplicationWindow parent;\n};\n\nG_DEFINE_TYPE(ExampleAppWindow, example_app_window, GTK_TYPE_APPLICATION_WINDOW);\n\nstatic void\nexample_app_window_init (ExampleAppWindow *app)\n{\n}\n\nstatic void\nexample_app_window_class_init (ExampleAppWindowClass *class)\n{\n}\n\nExampleAppWindow *\nexample_app_window_new (ExampleApp *app)\n{\n  return g_object_new (EXAMPLE_APP_WINDOW_TYPE, \"application\", app, NULL);\n}\n\nvoid\nexample_app_window_open (ExampleAppWindow *win,\n                         GFile            *file)\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Text to Clipboard in GTK 4\nDESCRIPTION: Shows how to copy text from a GtkEditable widget to the clipboard using the new GdkClipboard API in GTK 4.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ncopy_text (GtkWidget *widget)\n{\n  GtkEditable *editable = GTK_EDITABLE (widget);\n\n  // Initialize a GValue with the contents of the widget\n  GValue value = G_VALUE_INIT;\n  g_value_init (&value, G_TYPE_STRING);\n  g_value_set_string (&value, gtk_editable_get_text (editable));\n\n  // Store the value in the clipboard object\n  GdkClipboard *clipboard = gtk_widget_get_clipboard (widget);\n  gdk_clipboard_set_value (clipboard, &value);\n\n  g_value_unset (&value);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Displaying File Contents in GTK Application\nDESCRIPTION: Implements the example_app_window_open function to open a file, create a GtkTextView, and add it to the stack. It loads the file contents and displays them in the text view.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid\nexample_app_window_open (ExampleAppWindow *win,\n                         GFile            *file)\n{\n  char *basename;\n  GtkWidget *scrolled, *view;\n  char *contents;\n  gsize length;\n\n  basename = g_file_get_basename (file);\n\n  scrolled = gtk_scrolled_window_new ();\n  gtk_widget_set_hexpand (scrolled, TRUE);\n  gtk_widget_set_vexpand (scrolled, TRUE);\n  view = gtk_text_view_new ();\n  gtk_text_view_set_editable (GTK_TEXT_VIEW (view), FALSE);\n  gtk_text_view_set_cursor_visible (GTK_TEXT_VIEW (view), FALSE);\n  gtk_scrolled_window_set_child (GTK_SCROLLED_WINDOW (scrolled), view);\n  gtk_stack_add_titled (GTK_STACK (win->stack), scrolled, basename, basename);\n\n  if (g_file_load_contents (file, NULL, &contents, &length, NULL, NULL))\n    {\n      GtkTextBuffer *buffer;\n\n      buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));\n      gtk_text_buffer_set_text (buffer, contents, length);\n      g_free (contents);\n    }\n\n  g_free (basename);\n}\n```\n\n----------------------------------------\n\nTITLE: Using GtkIconPaintable for Icon Theme Operations\nDESCRIPTION: Replace gtk_icon_theme_lookup_icon() usage to work with GtkIconPaintable instead of GtkIconInfo. Handle symbolic icons appropriately by using get_icon_name and setting on GtkImage.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_27\n\nLANGUAGE: c\nCODE:\n```\n// GTK 3\nGtkIconInfo *info = gtk_icon_theme_lookup_icon(...)\n\n// GTK 4\nGtkIconPaintable *paintable = gtk_icon_theme_lookup_icon(...);\nif (gtk_icon_paintable_is_symbolic(paintable)) {\n    const char *icon_name = gtk_icon_paintable_get_icon_name(paintable);\n    gtk_image_set_from_icon_name(image, icon_name);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling GTK Application with GCC\nDESCRIPTION: Shows the command line instruction for compiling a GTK application using GCC with proper flags and dependencies via pkg-config.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcc $( pkg-config --cflags gtk4 ) -o example-0 example-0.c $( pkg-config --libs gtk4 )\n```\n\n----------------------------------------\n\nTITLE: Pasting Text from Clipboard in GTK 4\nDESCRIPTION: Demonstrates how to paste text from the clipboard into a GtkEditable widget using the new GdkClipboard API in GTK 4.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic void\npaste_text (GtkWidget *widget)\n{\n  GtkEditable *editable = GTK_EDITABLE (widget);\n\n  // Initialize a GValue to receive text\n  GValue value = G_VALUE_INIT;\n  g_value_init (&value, G_TYPE_STRING);\n\n  // Get the content provider for the clipboard, and ask it for text\n  GdkClipboard *clipboard = gtk_widget_get_clipboard (widget);\n  GdkContentProvider *provider = gdk_clipboard_get_content (clipboard);\n\n  // If the content provider does not contain text, we are not interested\n  if (!gdk_content_provider_get_value (provider, &value, NULL))\n    return;\n\n  const char *str = g_value_get_string (&value);\n\n  gtk_editable_set_text (editable, str);\n\n  g_value_unset (&value);\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating UI Template in GTK Application Window Class\nDESCRIPTION: This code snippet shows how to integrate the UI template defined in XML into the ExampleAppWindow class. It uses gtk_widget_class_set_template_from_resource() and gtk_widget_init_template().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nexample_app_window_init (ExampleAppWindow *win)\n{\n  gtk_widget_init_template (GTK_WIDGET (win));\n}\n\nstatic void\nexample_app_window_class_init (ExampleAppWindowClass *class)\n{\n  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (class),\n                                               \"/org/gtk/exampleapp/window.ui\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keyboard Device in GTK 4\nDESCRIPTION: Demonstrates how to obtain the keyboard device from the default seat in GTK 4, replacing the deprecated GdkKeymap API.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ngdk_seat_get_keyboard (gdk_display_get_default_seat (display)\n```\n\n----------------------------------------\n\nTITLE: Implementing GtkTreeView with Custom Columns in C\nDESCRIPTION: This snippet demonstrates how to create a GtkTreeView with a custom model and multiple columns. It sets up a tree store, creates a view, and adds columns for book title, author, and checkout status. The code shows how to use different cell renderers and attributes for each column.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nenum\n{\n   TITLE_COLUMN,\n   AUTHOR_COLUMN,\n   CHECKED_COLUMN,\n   N_COLUMNS\n};\n\nvoid\nsetup_tree (void)\n{\n   GtkTreeStore *store;\n   GtkWidget *tree;\n   GtkTreeViewColumn *column;\n   GtkCellRenderer *renderer;\n\n   /* Create a model.  We are using the store model for now, though we\n    * could use any other GtkTreeModel */\n   store = gtk_tree_store_new (N_COLUMNS,\n                               G_TYPE_STRING,\n                               G_TYPE_STRING,\n                               G_TYPE_BOOLEAN);\n\n   /* custom function to fill the model with data */\n   populate_tree_model (store);\n\n   /* Create a view */\n   tree = gtk_tree_view_new_with_model (GTK_TREE_MODEL (store));\n\n   /* The view now holds a reference.  We can get rid of our own\n    * reference */\n   g_object_unref (G_OBJECT (store));\n\n   /* Create a cell render and arbitrarily make it red for demonstration\n    * purposes */\n   renderer = gtk_cell_renderer_text_new (<!-- -->);\n   g_object_set (G_OBJECT (renderer),\n                 \"foreground\", \"red\",\n                 NULL);\n\n   /* Create a column, associating the \"text\" attribute of the\n    * cell_renderer to the first column of the model */\n   column = gtk_tree_view_column_new_with_attributes (\"Author\", renderer,\n                                                      \"text\", AUTHOR_COLUMN,\n                                                      NULL);\n\n   /* Add the column to the view. */\n   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n\n   /* Second column.. title of the book. */\n   renderer = gtk_cell_renderer_text_new (<!-- -->);\n   column = gtk_tree_view_column_new_with_attributes (\"Title\",\n                                                      renderer,\n                                                      \"text\", TITLE_COLUMN,\n                                                      NULL);\n   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n\n   /* Last column.. whether a book is checked out. */\n   renderer = gtk_cell_renderer_toggle_new (<!-- -->);\n   column = gtk_tree_view_column_new_with_attributes (\"Checked out\",\n                                                      renderer,\n                                                      \"active\", CHECKED_COLUMN,\n                                                      NULL);\n   gtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n\n   /* Now we can manipulate the view just like any other GTK widget */\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Navigation Controls\nDESCRIPTION: Standard keyboard navigation controls used in GTK for focus movement and widget activation\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/input-handling.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTab - Move focus to next location\nShift+Tab - Move focus to previous location\nEnter/Space - Activate focused widget\nCtrl+Q - Example accelerator (quit)\nAlt+[Letter] - Mnemonic activation\n```\n\n----------------------------------------\n\nTITLE: Updating Keyboard Shortcut Handling in GTK 4\nDESCRIPTION: Replace GtkAccelGroup with GtkShortcutController and global scope. Use GtkWidgetClass methods for bindings instead of GtkBindingSet. Implement custom saving/loading of accelerators using GtkShortcutController's GListModel interface.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\nGtkAccelGroup *accel_group = gtk_accel_group_new();\n\n// New GTK 4 way\nGtkShortcutController *controller = gtk_shortcut_controller_new();\ngtk_shortcut_controller_set_scope(controller, GTK_SHORTCUT_SCOPE_GLOBAL);\n```\n\n----------------------------------------\n\nTITLE: Checking for GDK Backend Support in Multi-Platform GTK Applications\nDESCRIPTION: This snippet demonstrates how to properly check for different GDK backends (macOS, Wayland, X11) at both compile-time and run-time. It includes the appropriate header files conditionally and performs type checking to ensure backend-specific code only runs on supported platforms.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/macos.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#ifdef GDK_WINDOWING_MACOS\n#include <gdk/macos/gdkmacos.h>\n#endif\n#ifdef GDK_WINDOWING_WAYLAND\n#include <gdk/wayland/gdkwayland.h>\n#endif\n#ifdef GDK_WINDOWING_X11\n#include <gdk/x11/gdkx.h>\n#endif\n\n#ifdef GDK_WINDOWING_MACOS\n  if (GDK_IS_MACOS_DISPLAY (display))\n    {\n      // make macOS-specific calls here\n    }\n  else\n#endif\n#ifdef GDK_WINDOWING_WAYLAND\n  if (GDK_IS_WAYLAND_DISPLAY (display))\n    {\n      // make Wayland-specific calls here\n    }\n  else\n#endif\n#ifdef GDK_WINDOWING_X11\n  if (GDK_IS_X11_DISPLAY (display))\n    {\n      // make X11-specific calls here\n    }\n  else\n#endif\n  g_error (\"Unsupported GDK backend\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic GtkTextView with Buffer\nDESCRIPTION: Demonstrates the simplest usage of GtkTextView by creating a new text view widget, getting its buffer, and setting initial text content. Shows basic setup for editable text display.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-text-widget.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGtkWidget *view;\nGtkTextBuffer *buffer;\n\nview = gtk_text_view_new ();\n\nbuffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));\n\ngtk_text_buffer_set_text (buffer, \"Hello, this is some text\", -1);\n\n/* Now you might put the view in a container and display it on the\n * screen; when the user edits the text, signals on the buffer\n * will be emitted, such as \"changed\", \"insert_text\", and so on.\n */\n```\n\n----------------------------------------\n\nTITLE: Defining GTK Application Window with Sidebar in XML\nDESCRIPTION: This XML template extends the previous one by adding a sidebar using GtkRevealer and GtkListBox. It demonstrates the structure for a more complex application layout with a collapsible sidebar and a main content area.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <template class=\"ExampleAppWindow\" parent=\"GtkApplicationWindow\">\n    <property name=\"title\" translatable=\"yes\">Example Application</property>\n    <property name=\"default-width\">600</property>\n    <property name=\"default-height\">400</property>\n    <child type=\"titlebar\">\n      <object class=\"GtkHeaderBar\" id=\"header\">\n        <child type=\"title\">\n          <object class=\"GtkStackSwitcher\" id=\"tabs\">\n            <property name=\"stack\">stack</property>\n          </object>\n        </child>\n        <child type=\"end\">\n          <object class=\"GtkToggleButton\" id=\"search\">\n            <property name=\"sensitive\">0</property>\n            <property name=\"icon-name\">edit-find-symbolic</property>\n          </object>\n        </child>\n        <child type=\"end\">\n          <object class=\"GtkMenuButton\" id=\"gears\">\n            <property name=\"direction\">none</property>\n          </object>\n        </child>\n      </object>\n    </child>\n    <child>\n      <object class=\"GtkBox\" id=\"content_box\">\n        <property name=\"orientation\">vertical</property>\n        <child>\n          <object class=\"GtkSearchBar\" id=\"searchbar\">\n            <child>\n              <object class=\"GtkSearchEntry\" id=\"searchentry\">\n                <signal name=\"search-changed\" handler=\"search_text_changed\"/>\n              </object>\n            </child>\n          </object>\n        </child>\n        <child>\n          <object class=\"GtkBox\" id=\"hbox\">\n            <child>\n              <object class=\"GtkRevealer\" id=\"sidebar\">\n                <property name=\"transition-type\">slide-right</property>\n                <child>\n                  <object class=\"GtkScrolledWindow\" id=\"sidebar-sw\">\n                    <property name=\"hscrollbar-policy\">never</property>\n                    <child>\n                      <object class=\"GtkListBox\" id=\"words\">\n                        <property name=\"selection-mode\">none</property>\n                      </object>\n                    </child>\n                  </object>\n                </child>\n              </object>\n            </child>\n            <child>\n              <object class=\"GtkStack\" id=\"stack\">\n                <signal name=\"notify::visible-child\" handler=\"visible_child_changed\"/>\n              </object>\n            </child>\n          </object>\n        </child>\n      </object>\n    </child>\n  </template>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality in C\nDESCRIPTION: This C code snippet shows the implementation of the search functionality. It includes a signal handler for text changes in the search entry and performs a simple search in the visible text buffer. The code demonstrates text iteration and selection in GTK text widgets.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nsearch_text_changed (GtkEntry         *entry,\n                     ExampleAppWindow *win)\n{\n  const char *text;\n  GtkWidget *tab;\n  GtkWidget *view;\n  GtkTextBuffer *buffer;\n  GtkTextIter start, match_start, match_end;\n\n  text = gtk_editable_get_text (GTK_EDITABLE (entry));\n\n  if (text[0] == '\\0')\n    return;\n\n  tab = gtk_stack_get_visible_child (GTK_STACK (win->stack));\n  view = gtk_scrolled_window_get_child (GTK_SCROLLED_WINDOW (tab));\n  buffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));\n\n  /* Very simple-minded search implementation */\n  gtk_text_buffer_get_start_iter (buffer, &start);\n  if (gtk_text_iter_forward_search (&start, text, GTK_TEXT_SEARCH_CASE_INSENSITIVE,\n                                    &match_start, &match_end, NULL))\n    {\n      gtk_text_buffer_select_range (buffer, &match_start, &match_end);\n      gtk_text_view_scroll_to_iter (GTK_TEXT_VIEW (view), &match_start,\n                                    0.0, FALSE, 0.0, 0.0);\n    }\n}\n\nstatic void\nexample_app_window_init (ExampleAppWindow *win)\n{\n\n...\n\n  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (class), search_text_changed);\n\n...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Binding GSettings to Widgets in C\nDESCRIPTION: This C code snippet demonstrates how to initialize GSettings and bind a setting to a widget property. It binds the 'transition' setting to the 'transition-type' property of a stack widget.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nexample_app_window_init (ExampleAppWindow *win)\n{\n  gtk_widget_init_template (GTK_WIDGET (win));\n  win->settings = g_settings_new (\"org.gtk.exampleapp\");\n\n  g_settings_bind (win->settings, \"transition\",\n                   win->stack, \"transition-type\",\n                   G_SETTINGS_BIND_DEFAULT);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Video with GtkMediaFile\nDESCRIPTION: Demonstrates how to load a video file using GtkMediaFile and display it in a GtkPicture widget. This snippet creates a media file object and sets it as the paintable for a picture widget.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nmediafile = gtk_media_file_new_for_filename (\"example.webm\");\npicture = gtk_picture_new_for_paintable (GDK_PAINTABLE (mediafile));\n```\n\n----------------------------------------\n\nTITLE: Configuring GTK Build with Meson\nDESCRIPTION: Sets up a build directory for GTK with a custom installation prefix. This command initializes the build configuration using Meson.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeson setup --prefix /opt/gtk builddir\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Core Structures in C\nDESCRIPTION: Core structure definitions for GTK widgets including allocation, requisition, and the base widget structure. Defines the fundamental building blocks for GTK UI elements.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstruct _GtkRequisition\n{\n  int width;\n  int height;\n};\n\nstruct _GtkWidget\n{\n  GInitiallyUnowned parent_instance;\n\n  /*< private >*/\n\n  GtkWidgetPrivate *priv;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to Widgets in GTK\nDESCRIPTION: Illustrates methods for adding actions to widgets, including using the GActionMap interface and gtk_widget_insert_action_group() function. Also mentions gtk_widget_class_install_action() for adding actions globally to a widget class.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/actions.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ngtk_widget_insert_action_group()\n```\n\nLANGUAGE: C\nCODE:\n```\ngtk_widget_class_install_action()\n```\n\n----------------------------------------\n\nTITLE: Connecting Menu Actions in C\nDESCRIPTION: This C code snippet demonstrates how to connect the menu items to actions in the application. It shows the use of GSettings to create actions and how to add them to the application's action map.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nexample_app_window_init (ExampleAppWindow *win)\n{\n\n...\n\n  builder = gtk_builder_new_from_resource (\"/org/gtk/exampleapp/gears-menu.ui\");\n  menu = G_MENU_MODEL (gtk_builder_get_object (builder, \"menu\"));\n  gtk_menu_button_set_menu_model (GTK_MENU_BUTTON (priv->gears), menu);\n  g_object_unref (builder);\n\n  action = g_settings_create_action (priv->settings, \"show-words\");\n  g_action_map_add_action (G_ACTION_MAP (win), action);\n  g_object_unref (action);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GTK Application Menus and Actions in macOS\nDESCRIPTION: This snippet demonstrates how to set up application and window actions for the macOS system menu using GTK's Application class methods. It shows how to configure accelerators and set the menubar for the application.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/osx.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo extend the macOS system menu, add application and window actions to the\napplication with [`Application.set_accels_for_action()`](method.Application.set_accels_for_action.html).\nThe menubar can be configured via [`Application.set_menubar()`](method.Application.set_menubar.html).\nThose actions can then be activated from the menu.\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables for GTK\nDESCRIPTION: Configures environment variables needed to run GTK applications with a custom installation. These settings ensure the system can find the installed libraries and executables.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLD_LIBRARY_PATH=\"/opt/gtk/lib\"\nPATH=\"/opt/gtk/bin:$PATH\"\nexport LD_LIBRARY_PATH PATH\n```\n\n----------------------------------------\n\nTITLE: Defining GtkWidgetClass Structure in C\nDESCRIPTION: This snippet defines the GtkWidgetClass structure, which contains function pointers for various widget behaviors such as focus management, keyboard navigation, and tooltip handling.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ngboolean (* mnemonic_activate)        (GtkWidget           *widget,\n                                         gboolean             group_cycling);\n\n  /* explicit focus */\n  gboolean (* grab_focus)               (GtkWidget           *widget);\n  gboolean (* focus)                    (GtkWidget           *widget,\n                                         GtkDirectionType     direction);\n  void     (* set_focus_child)          (GtkWidget           *widget,\n                                         GtkWidget           *child);\n\n  /* keyboard navigation */\n  void     (* move_focus)               (GtkWidget           *widget,\n                                         GtkDirectionType     direction);\n  gboolean (* keynav_failed)            (GtkWidget           *widget,\n                                         GtkDirectionType     direction);\n\n  gboolean     (* query_tooltip)      (GtkWidget  *widget,\n                                       int         x,\n                                       int         y,\n                                       gboolean    keyboard_tooltip,\n                                       GtkTooltip *tooltip);\n\n  void         (* compute_expand)     (GtkWidget  *widget,\n                                       gboolean   *hexpand_p,\n                                       gboolean   *vexpand_p);\n\n  void         (* css_changed)                 (GtkWidget            *widget,\n                                                GtkCssStyleChange    *change);\n\n  void         (* system_setting_changed)      (GtkWidget            *widget,\n                                                GtkSystemSetting      settings);\n\n  void         (* snapshot)                    (GtkWidget            *widget,\n                                                GtkSnapshot          *snapshot);\n\n  gboolean     (* contains)                    (GtkWidget *widget,\n                                                double     x,\n                                                double     y);\n\n  /*< private >*/\n\n  GtkWidgetClassPrivate *priv;\n\n  gpointer padding[8];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Properties in GTK\nDESCRIPTION: Demonstrates how to define and use custom CSS properties in GTK, including fallback values.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-properties.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--prop: red;\n\ncolor: var(--prop);\n\ncolor: var(--prop, green);\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Actions in GTK Window\nDESCRIPTION: C code showing window initialization with property action creation and property binding between widgets. Creates a show-lines action tied to label visibility and binds visibility properties between two labels.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nstatic void\nexample_app_window_init (ExampleAppWindow *win)\n{\n  ...\n\n  action = (GAction*) g_property_action_new (\"show-lines\", win->lines, \"visible\");\n  g_action_map_add_action (G_ACTION_MAP (win), action);\n  g_object_unref (action);\n\n  g_object_bind_property (win->lines, \"visible\",\n                          win->lines_label, \"visible\",\n                          G_BINDING_DEFAULT);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Detailed Action Names in GTK\nDESCRIPTION: Demonstrates how to specify an action name and target using a single string with detailed action names. This is commonly used in APIs like GMenuModel and GtkActionable.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/actions.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n\"justify::left\"\n```\n\nLANGUAGE: C\nCODE:\n```\n\"open-bookmark('http://gnome.org/')\"\n```\n\n----------------------------------------\n\nTITLE: Using GtkDragSource for Drag Operations\nDESCRIPTION: Replace gtk_drag_source_set() with GtkDragSource controller. Create a GtkDragSource object, attach it to the widget using gtk_widget_add_controller(), and connect to GtkDragSource signals.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n// GTK 3\ngtk_drag_source_set(widget, ...)\ng_signal_connect(widget, \"drag-data-get\", ...)\n\n// GTK 4\nGtkDragSource *source = gtk_drag_source_new();\ngtk_widget_add_controller(widget, GTK_EVENT_CONTROLLER(source));\ng_signal_connect(source, \"prepare\", ...);\n```\n\n----------------------------------------\n\nTITLE: Backend Selection Options in GTK Build System\nDESCRIPTION: Configuration options for enabling specific GDK backends including X11, Windows, Broadway, Wayland, macOS, and Android. Default behavior varies by platform with Wayland preferred on Linux and platform-specific defaults elsewhere.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nx11-backend, win32-backend, broadway-backend, wayland-backend, macos-backend, android-backend\n```\n\n----------------------------------------\n\nTITLE: Creating Tree Store Model with Enumerated Columns\nDESCRIPTION: Shows how to create a GtkTreeStore with enumerated columns for a book catalog system.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nenum\n{\n   TITLE_COLUMN,\n   AUTHOR_COLUMN,\n   CHECKED_COLUMN,\n   N_COLUMNS\n};\n\nGtkTreeStore *store = gtk_tree_store_new (N_COLUMNS,       /* Total number of columns */\n                                          G_TYPE_STRING,   /* Book title              */\n                                          G_TYPE_STRING,   /* Author                  */\n                                          G_TYPE_BOOLEAN); /* Is checked out?         */\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Tree View\nDESCRIPTION: Shows how to add columns with cell renderers to a GtkTreeView widget.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nGtkCellRenderer *renderer;\nGtkTreeViewColumn *column;\n\nrenderer = gtk_cell_renderer_text_new ();\ncolumn = gtk_tree_view_column_new_with_attributes (\"Author\",\n                                                   renderer,\n                                                   \"text\", AUTHOR_COLUMN,\n                                                   NULL);\ngtk_tree_view_append_column (GTK_TREE_VIEW (tree), column);\n```\n\n----------------------------------------\n\nTITLE: Creating Tree View Widget\nDESCRIPTION: Demonstrates creating a GtkTreeView widget and connecting it to a tree model.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nGtkWidget *tree;\n\ntree = gtk_tree_view_new_with_model (GTK_TREE_MODEL (store));\n```\n\n----------------------------------------\n\nTITLE: Defining Application Menu in XML\nDESCRIPTION: This XML snippet defines the application menu structure, including options to show words, open preferences, and quit the application. It demonstrates the use of GMenu for creating application menus in GTK.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <menu id=\"menu\">\n    <section>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Words</attribute>\n        <attribute name=\"action\">win.show-words</attribute>\n      </item>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Preferences</attribute>\n        <attribute name=\"action\">app.preferences</attribute>\n      </item>\n    </section>\n    <section>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Quit</attribute>\n        <attribute name=\"action\">app.quit</attribute>\n      </item>\n    </section>\n  </menu>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Application Menubar in GTK\nDESCRIPTION: Shows how to set up an application menubar using gtk_application_set_menubar() function with a GMenu menu model.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/actions.md#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ngtk_application_set_menubar()\n```\n\n----------------------------------------\n\nTITLE: Drawing Transformed Text with Pango and Cairo in C\nDESCRIPTION: This snippet demonstrates how to render text in a circular pattern with color gradients using Pango and Cairo. It sets up a transformation matrix, creates a PangoLayout with specified font and text, then draws the text multiple times in a circle with different rotations and colors. The code handles proper context management, transformation, and cleanup of resources.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/pango.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define RADIUS 100\n#define N_WORDS 10\n#define FONT \"Sans Bold 18\"\n\nPangoContext *context;\nPangoLayout *layout;\nPangoFontDescription *desc;\n\ndouble radius;\nint width, height;\nint i;\n\n// Set up a transformation matrix so that the user space coordinates for\n// where we are drawing are [-RADIUS, RADIUS], [-RADIUS, RADIUS]\n// We first center, then change the scale\n\nwidth = gdk_surface_get_width (surface);\nheight = gdk_surface_get_height (surface);\nradius = MIN (width, height) / 2.;\n\ncairo_translate (cr,\n                 radius + (width - 2 * radius) / 2,\n                 radius + (height - 2 * radius) / 2);\n                 cairo_scale (cr, radius / RADIUS, radius / RADIUS);\n\n// Create a PangoLayout, set the font and text\ncontext = gdk_pango_context_get_for_display (display);\nlayout = pango_layout_new (context);\npango_layout_set_text (layout, \"Text\", -1);\ndesc = pango_font_description_from_string (FONT);\npango_layout_set_font_description (layout, desc);\npango_font_description_free (desc);\n\n// Draw the layout N_WORDS times in a circle\nfor (i = 0; i < N_WORDS; i++)\n  {\n    double red, green, blue;\n    double angle = 2 * G_PI * i / n_words;\n\n    cairo_save (cr);\n\n    // Gradient from red at angle == 60 to blue at angle == 300\n    red = (1 + cos (angle - 60)) / 2;\n    green = 0;\n    blue = 1 - red;\n\n    cairo_set_source_rgb (cr, red, green, blue);\n    cairo_rotate (cr, angle);\n\n    // Inform Pango to re-layout the text with the new transformation matrix\n    pango_cairo_update_layout (cr, layout);\n\n    pango_layout_get_size (layout, &width, &height);\n\n    cairo_move_to (cr, - width / 2 / PANGO_SCALE, - DEFAULT_TEXT_RADIUS);\n    pango_cairo_show_layout (cr, layout);\n\n    cairo_restore (cr);\n  }\n\ng_object_unref (layout);\ng_object_unref (context);\n```\n\n----------------------------------------\n\nTITLE: Implementing Preference Dialog in C\nDESCRIPTION: This C code defines the ExampleAppPrefs class, a subclass of GtkDialog. It initializes the dialog, binds settings to widgets, and provides methods for creating and disposing of the dialog instance.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n#include <gtk/gtk.h>\n\n#include \"exampleapp.h\"\n#include \"exampleappwin.h\"\n#include \"exampleappprefs.h\"\n\nstruct _ExampleAppPrefs\n{\n  GtkDialog parent;\n\n  GSettings *settings;\n  GtkWidget *font;\n  GtkWidget *transition;\n};\n\nG_DEFINE_TYPE (ExampleAppPrefs, example_app_prefs, GTK_TYPE_DIALOG)\n\nstatic void\nexample_app_prefs_init (ExampleAppPrefs *prefs)\n{\n  gtk_widget_init_template (GTK_WIDGET (prefs));\n  prefs->settings = g_settings_new (\"org.gtk.exampleapp\");\n\n  g_settings_bind (prefs->settings, \"font\",\n                   prefs->font, \"font\",\n                   G_SETTINGS_BIND_DEFAULT);\n  g_settings_bind (prefs->settings, \"transition\",\n                   prefs->transition, \"active-id\",\n                   G_SETTINGS_BIND_DEFAULT);\n}\n\nstatic void\nexample_app_prefs_dispose (GObject *object)\n{\n  ExampleAppPrefs *prefs;\n\n  prefs = EXAMPLE_APP_PREFS (object);\n\n  g_clear_object (&prefs->settings);\n\n  G_OBJECT_CLASS (example_app_prefs_parent_class)->dispose (object);\n}\n\nstatic void\nexample_app_prefs_class_init (ExampleAppPrefsClass *class)\n{\n  G_OBJECT_CLASS (class)->dispose = example_app_prefs_dispose;\n\n  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (class),\n                                               \"/org/gtk/exampleapp/prefs.ui\");\n  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (class), ExampleAppPrefs, font);\n  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (class), ExampleAppPrefs, transition);\n}\n\nExampleAppPrefs *\nexample_app_prefs_new (ExampleAppWindow *win)\n{\n  return g_object_new (EXAMPLE_APP_PREFS_TYPE, \"transient-for\", win, \"use-header-bar\", TRUE, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from GtkBox pack_start/pack_end to append/prepend in GTK 4\nDESCRIPTION: Replace GtkBox pack_start() and pack_end() methods with gtk_box_prepend() and gtk_box_append(). Use reordering methods as needed for child positioning.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\ngtk_box_pack_start(GTK_BOX(box), child, TRUE, TRUE, 0);\ngtk_box_pack_end(GTK_BOX(box), child, TRUE, TRUE, 0);\n\n// New GTK 4 way\ngtk_box_prepend(GTK_BOX(box), child);\ngtk_box_append(GTK_BOX(box), child);\n```\n\n----------------------------------------\n\nTITLE: Updating GTK 3 CSS icon effects to GTK 4 icon filters\nDESCRIPTION: GTK 4 replaces the -gtk-icon-effect property with the more versatile -gtk-icon-filter. This snippet shows how to update dim and highlight effects.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_14\n\nLANGUAGE: CSS\nCODE:\n```\n-gtk-icon-effect: dim; /* GTK 3 */\n-gtk-icon-filter: opacity(0.5); /* GTK 4 */\n\n-gtk-icon-effect: highlight; /* GTK 3 */\n-gtk-icon-filter: brightness(1.2); /* GTK 4 */\n```\n\n----------------------------------------\n\nTITLE: Associating Keyboard Shortcuts with Actions in GTK\nDESCRIPTION: Shows how to associate keyboard shortcuts with actions using the gtk_application_set_accels_for_action() API provided by GtkApplication.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/actions.md#2025-04-18_snippet_5\n\nLANGUAGE: C\nCODE:\n```\ngtk_application_set_accels_for_action()\n```\n\n----------------------------------------\n\nTITLE: Customizing GtkTextView Appearance with Tags and CSS\nDESCRIPTION: Shows how to modify text appearance using both tags and CSS. Demonstrates changing font, color, margins, and applying specific formatting to text ranges using tags.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-text-widget.md#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nGtkWidget *view;\nGtkTextBuffer *buffer;\nGtkTextIter start, end;\nPangoFontDescription *font_desc;\nGdkRGBA rgba;\nGtkTextTag *tag;\nGtkCssProvider *provider;\nGtkStyleContext *context;\n\nview = gtk_text_view_new ();\n\nbuffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (view));\n\ngtk_text_buffer_set_text (buffer, \"Hello, this is some text\", -1);\n\n/* Change default font and color throughout the widget */\nprovider = gtk_css_provider_new ();\ngtk_css_provider_load_from_data (provider,\n                                 \"textview {\"\n                                 \" font: 15px serif;\"\n                                 \"  color: green;\"\n                                 \"}\",\n                                 -1);\ncontext = gtk_widget_get_style_context (view);\ngtk_style_context_add_provider (context,\n                                GTK_STYLE_PROVIDER (provider),\n                                GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);\n\n/* Change left margin throughout the widget */\ngtk_text_view_set_left_margin (GTK_TEXT_VIEW (view), 30);\n\n/* Use a tag to change the color for just one part of the widget */\ntag = gtk_text_buffer_create_tag (buffer, \"blue_foreground\",\n                                  \"foreground\", \"blue\",\n                                  NULL);\ngtk_text_buffer_get_iter_at_offset (buffer, &start, 7);\ngtk_text_buffer_get_iter_at_offset (buffer, &end, 12);\ngtk_text_buffer_apply_tag (buffer, tag, &start, &end);\n```\n\n----------------------------------------\n\nTITLE: Opening Preference Dialog in C\nDESCRIPTION: This C function is called when the preferences action is activated. It creates a new preference dialog and presents it to the user.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nstatic void\npreferences_activated (GSimpleAction *action,\n                       GVariant      *parameter,\n                       gpointer       app)\n{\n  ExampleAppPrefs *prefs;\n  GtkWindow *win;\n\n  win = gtk_application_get_active_window (GTK_APPLICATION (app));\n  prefs = example_app_prefs_new (EXAMPLE_APP_WINDOW (win));\n  gtk_window_present (GTK_WINDOW (prefs));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating List Store Model in GTK\nDESCRIPTION: Demonstrates creating a basic GtkListStore model with string and boolean columns.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nGtkListStore *store = gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_BOOLEAN);\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Tree Store\nDESCRIPTION: Demonstrates adding a single row of data to a GtkTreeStore using iterators.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nGtkTreeIter iter;\n\ngtk_tree_store_append (store, &iter, NULL);  /* Acquire an iterator */\n\ngtk_tree_store_set (store, &iter,\n                    TITLE_COLUMN, \"The Principle of Reason\",\n                    AUTHOR_COLUMN, \"Martin Heidegger\",\n                    CHECKED_COLUMN, FALSE,\n                    -1);\n```\n\n----------------------------------------\n\nTITLE: Using pkg-config to get GTK compilation flags and libraries\nDESCRIPTION: This snippet shows how to use pkg-config to retrieve the necessary compiler flags and library links for GTK4.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/compiling.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pkg-config --cflags gtk4\n -pthread -I/usr/include/gtk-4.0 -I/usr/lib64/gtk-4.0/include -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12\n$ pkg-config --libs gtk4\n -pthread -lgtk-4 -lgdk-4 -lgio-2.0 -lpangoft2-1.0 -lgdk_pixbuf-2.0 -lpangocairo-1.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0\n```\n\n----------------------------------------\n\nTITLE: Migrating from GtkRadioButton to Grouped GtkCheckButton in GTK 4\nDESCRIPTION: Replace GtkRadioButton usage with grouped GtkCheckButton for traditional radio groups. Use gtk_check_button_set_group() to create button groups.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\nGtkWidget *radio1 = gtk_radio_button_new_with_label(NULL, \"Option 1\");\nGtkWidget *radio2 = gtk_radio_button_new_with_label_from_widget(GTK_RADIO_BUTTON(radio1), \"Option 2\");\n\n// New GTK 4 way\nGtkWidget *check1 = gtk_check_button_new_with_label(\"Option 1\");\nGtkWidget *check2 = gtk_check_button_new_with_label(\"Option 2\");\ngtk_check_button_set_group(GTK_CHECK_BUTTON(check2), GTK_CHECK_BUTTON(check1));\n```\n\n----------------------------------------\n\nTITLE: Declaring GTK Widget Functions in C\nDESCRIPTION: This snippet declares various GTK widget-related functions for managing widget lifecycle, visibility, drawing, sizing, and focus. It includes functions like gtk_widget_show, gtk_widget_hide, and gtk_widget_queue_draw.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\nGType      gtk_widget_get_type            (void) G_GNUC_CONST;\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_unparent            (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_show                (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_hide                (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_map                 (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_unmap               (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_realize             (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_unrealize           (GtkWidget           *widget);\n\n/* Queuing draws */\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_queue_draw          (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_queue_resize        (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_queue_allocate      (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nGdkFrameClock* gtk_widget_get_frame_clock (GtkWidget           *widget);\n\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_size_allocate       (GtkWidget           *widget,\n                                           const GtkAllocation *allocation,\n                                           int                  baseline);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_allocate            (GtkWidget               *widget,\n                                           int                      width,\n                                           int                      height,\n                                           int                      baseline,\n                                           GskTransform            *transform);\n```\n\n----------------------------------------\n\nTITLE: Setting Accessible Properties for GTK Value Controls\nDESCRIPTION: This snippet demonstrates the properties that should be set to make a value control widget accessible. It includes the minimum value, maximum value, and current value properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`GTK_ACCESSIBLE_PROPERTY_VALUE_MIN`,\n`GTK_ACCESSIBLE_PROPERTY_VALUE_MAX` and `GTK_ACCESSIBLE_PROPERTY_VALUE_NOW`\n```\n\n----------------------------------------\n\nTITLE: Input Handling Technical Terms\nDESCRIPTION: Key technical terms and classes used in GTK input handling including GdkDevice, GdkEvents, and event propagation phases.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/input-handling.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGdkDevice - Object representing input devices\nGdkEvents - Translated windowing system events\ngdk_event_get_event_type() - Function to identify event types\nGTK_PHASE_CAPTURE - First event propagation phase\nGTK_PHASE_TARGET - Second event propagation phase\nGTK_PHASE_BUBBLE - Third event propagation phase\n```\n\n----------------------------------------\n\nTITLE: Compiling a GTK Hello World program\nDESCRIPTION: This command demonstrates how to compile a GTK Hello World program using gcc and pkg-config to include the necessary flags and libraries.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/compiling.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cc `pkg-config --cflags gtk4` hello.c -o hello `pkg-config --libs gtk4`\n```\n\n----------------------------------------\n\nTITLE: Adapting to GtkHeaderBar API Changes in GTK 4\nDESCRIPTION: Update method names and property usage for GtkHeaderBar. Use gtk_header_bar_set_show_title_buttons() instead of gtk_header_bar_set_show_close_button(). Replace custom title setting with title widget property.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\ngtk_header_bar_set_show_close_button(header_bar, TRUE);\ngtk_header_bar_set_custom_title(header_bar, title_widget);\ngtk_header_bar_set_title(header_bar, \"Title\");\n\n// New GTK 4 way\ngtk_header_bar_set_show_title_buttons(header_bar, TRUE);\ngtk_header_bar_set_title_widget(header_bar, title_widget);\n// Set window title instead, or use a custom title widget\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Data in Tree Store\nDESCRIPTION: Shows how to create parent-child relationships in a GtkTreeStore for a hierarchical book catalog.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nGtkTreeIter iter1;  /* Parent iter */\nGtkTreeIter iter2;  /* Child iter  */\n\ngtk_tree_store_append (store, &iter1, NULL);  /* Acquire a top-level iterator */\ngtk_tree_store_set (store, &iter1,\n                    TITLE_COLUMN, \"The Art of Computer Programming\",\n                    AUTHOR_COLUMN, \"Donald E. Knuth\",\n                    CHECKED_COLUMN, FALSE,\n                    -1);\n\ngtk_tree_store_append (store, &iter2, &iter1);  /* Acquire a child iterator */\ngtk_tree_store_set (store, &iter2,\n                    TITLE_COLUMN, \"Volume 1: Fundamental Algorithms\",\n                    -1);\n\ngtk_tree_store_append (store, &iter2, &iter1);\ngtk_tree_store_set (store, &iter2,\n                    TITLE_COLUMN, \"Volume 2: Seminumerical Algorithms\",\n                    -1);\n\ngtk_tree_store_append (store, &iter2, &iter1);\ngtk_tree_store_set (store, &iter2,\n                    TITLE_COLUMN, \"Volume 3: Sorting and Searching\",\n                    -1);\n```\n\n----------------------------------------\n\nTITLE: Ensuring GType Registration\nDESCRIPTION: Shows how to ensure that a GType is registered when using GTK_TYPE_BLAH macros, which may be optimized away by the compiler. This uses g_type_ensure() to force type registration.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\ng_type_ensure (GTK_TYPE_BLAH);\n```\n\n----------------------------------------\n\nTITLE: GTK Accessible Role Example\nDESCRIPTION: Code reference showing the mapping of GtkAccessible roles to GTK widgets, demonstrating common control types and their accessibility roles.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Role name | Description | Related GTK widget |\n|-----------|-------------|--------------------|\\n| `WINDOW` | An application window | [class@Gtk.Window] |\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Window Controls in GTK HeaderBar for macOS\nDESCRIPTION: This code snippet explains how to enable native macOS window controls in a GTK HeaderBar. It shows the property to set for using native controls and how to customize the decoration layout.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/osx.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSince GTK 4.18, [`GtkHeaderBar`](class.HeaderBar.html) has the option to use native window controls.\nThe controls are positioned in their normal place: the top-left corner.\nThis feature can be enabled by setting the property [`use-native-controls`](property.HeaderBar.use-native-controls.html) to `TRUE` on a `GtkHeaderBar`.\nThe property [`decoration-layout`](property.HeaderBar.decoration-layout.html) can be used to\nenable/disable buttons.\n```\n\n----------------------------------------\n\nTITLE: XML UI Description for GtkBuilder (XML)\nDESCRIPTION: This XML file describes the user interface layout for the GtkBuilder example. It defines a window with a grid containing three buttons.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <object id=\"window\" class=\"GtkWindow\">\n    <property name=\"title\">Grid</property>\n    <child>\n      <object id=\"grid\" class=\"GtkGrid\">\n        <child>\n          <object id=\"button1\" class=\"GtkButton\">\n            <property name=\"label\">Button 1</property>\n            <layout>\n              <property name=\"column\">0</property>\n              <property name=\"row\">0</property>\n            </layout>\n          </object>\n        </child>\n        <child>\n          <object id=\"button2\" class=\"GtkButton\">\n            <property name=\"label\">Button 2</property>\n            <layout>\n              <property name=\"column\">1</property>\n              <property name=\"row\">0</property>\n            </layout>\n          </object>\n        </child>\n        <child>\n          <object id=\"quit\" class=\"GtkButton\">\n            <property name=\"label\">Quit</property>\n            <layout>\n              <property name=\"column\">0</property>\n              <property name=\"row\">1</property>\n              <property name=\"column-span\">2</property>\n            </layout>\n          </object>\n        </child>\n      </object>\n    </child>\n  </object>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Size in GTK 4\nDESCRIPTION: In GTK 4, GtkImage setters no longer take a GtkIconSize argument. Use the separate gtk_image_set_icon_size() setter to override the icon size.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_19\n\nLANGUAGE: C\nCODE:\n```\ngtk_image_set_from_icon_name(image, icon_name);\ngtk_image_set_icon_size(image, GTK_ICON_SIZE_LARGE);\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Drawing in GTK 4\nDESCRIPTION: The GtkWidget::draw signal has been removed in GTK 4. Widgets now need to implement the gtk_widget_snapshot() virtual function for drawing. Cairo can still be used via gtk_snapshot_append_cairo().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_16\n\nLANGUAGE: C\nCODE:\n```\ngtk_snapshot_append_cairo(snapshot, cairo_region, cairo_draw_function, user_data);\n```\n\n----------------------------------------\n\nTITLE: Creating Popover Menu for MenuButton in GTK\nDESCRIPTION: Demonstrates creating a popover menu for a menubutton using gtk_menu_button_set_menu_model() function with a GMenu menu model.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/actions.md#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ngtk_menu_button_set_menu_model()\n```\n\n----------------------------------------\n\nTITLE: Using GtkEditable API in GTK 4\nDESCRIPTION: In GTK 4, GtkEntry, GtkSearchEntry, GtkSpinButton, and GtkPasswordEntry implement the GtkEditable interface. Use GtkEditable API for common editable functionality.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_20\n\nLANGUAGE: C\nCODE:\n```\ngtk_editable_set_max_width_chars(GTK_EDITABLE(widget), max_chars);\n```\n\n----------------------------------------\n\nTITLE: Iterating the Main Loop in GTK 4\nDESCRIPTION: This code snippet demonstrates how to iterate the default main loop until all windows have been closed in GTK 4. It replaces the gtk_main() family of APIs that were removed in GTK 4.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nwhile (g_list_model_get_n_items (gtk_window_get_toplevels ()) > 0)\n  g_main_context_iteration (NULL, TRUE);\n```\n\n----------------------------------------\n\nTITLE: Activating Default Widget in GTK 4\nDESCRIPTION: In GTK 4, activating the default widget is done by calling gtk_widget_activate_default() on the widget that caused the activation, instead of using gtk_window_activate_default().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_22\n\nLANGUAGE: C\nCODE:\n```\ngtk_widget_activate_default(widget);\n```\n\n----------------------------------------\n\nTITLE: Using GtkDropTarget for Drop Operations\nDESCRIPTION: Replace gtk_drag_dest_set() with GtkDropTarget controller. Create a GtkDropTarget object, attach it to the widget using gtk_widget_add_controller(), and connect to GtkDropTarget signals.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n// GTK 3\ngtk_drag_dest_set(widget, ...)\ng_signal_connect(widget, \"drag-data-received\", ...)\n\n// GTK 4\nGtkDropTarget *target = gtk_drop_target_new();\ngtk_widget_add_controller(widget, GTK_EVENT_CONTROLLER(target));\ng_signal_connect(target, \"accept\", ...);\n```\n\n----------------------------------------\n\nTITLE: Connecting Search Entries to Global Events in GTK 4\nDESCRIPTION: The way search entries are connected to global events has changed in GTK 4. Use gtk_search_entry_set_key_capture_widget() and gtk_event_controller_key_forward() instead of gtk_search_entry_handle_event().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_21\n\nLANGUAGE: C\nCODE:\n```\ngtk_search_entry_set_key_capture_widget(search_entry, widget);\ngtk_event_controller_key_forward(controller, widget);\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in GtkTreeView Columns using C\nDESCRIPTION: This snippet demonstrates how to customize the formatting of numeric data in a GtkTreeView column. It uses a custom cell data function to convert double values to formatted strings.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nenum\n{\n  DOUBLE_COLUMN,\n  N_COLUMNS\n};\n\nGtkListStore *mycolumns;\n\nGtkTreeView *treeview;\n\nvoid\nmy_cell_double_to_text (GtkTreeViewColumn *tree_column,\n                        GtkCellRenderer   *cell,\n                        GtkTreeModel      *tree_model,\n                        GtkTreeIter       *iter,\n                        gpointer           data)\n{\n  GtkCellRendererText *cell_text = (GtkCellRendererText *)cell;\n  double d;\n  char *text;\n\n  /* Get the double value from the model. */\n  gtk_tree_model_get (tree_model, iter, (int)data, &d, -1);\n  /* Now we can format the value ourselves. */\n  text = g_strdup_printf (\"%.2f\", d);\n  g_object_set (cell, \"text\", text, NULL);\n  g_free (text);\n}\n\nvoid\nset_up_new_columns (GtkTreeView *myview)\n{\n  GtkCellRendererText *renderer;\n  GtkTreeViewColumn *column;\n  GtkListStore *mycolumns;\n\n  /* Create the data model and associate it with the given TreeView */\n  mycolumns = gtk_list_store_new (N_COLUMNS, G_TYPE_DOUBLE);\n  gtk_tree_view_set_model (myview, GTK_TREE_MODEL (mycolumns));\n\n  /* Create a GtkCellRendererText */\n  renderer = gtk_cell_renderer_text_new ();\n\n  /* Create a new column that has a title (\"Example column\"),\n   * uses the above created renderer that will render the double\n   * value into text from the associated model's rows.\n   */\n  column = gtk_tree_view_column_new ();\n  gtk_tree_view_column_set_title  (column, \"Example column\");\n  renderer = gtk_cell_renderer_text_new ();\n  gtk_tree_view_column_pack_start (column, renderer, TRUE);\n\n  /* Append the new column after the GtkTreeView's previous columns. */\n  gtk_tree_view_append_column (GTK_TREE_VIEW (myview), column);\n  /* Since we created the column by hand, we can set it up for our\n   * needs, e.g. set its minimum and maximum width, etc.\n   */\n  /* Set up a custom function that will be called when the column content\n   * is rendered. We use the func_data pointer as an index into our\n   * model. This is convenient when using multi column lists.\n   */\n  gtk_tree_view_column_set_cell_data_func (column, renderer,\n                                           my_cell_double_to_text,\n                                           (gpointer)DOUBLE_COLUMN, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Example - Widget Creation in GTK/C\nDESCRIPTION: Demonstrates proper memory management for GTK widgets, showing how to handle floating references correctly to prevent memory leaks.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfoo = gtk_foo_new ();\ng_object_ref_sink (foo);\n```\n\n----------------------------------------\n\nTITLE: Updating GtkWindow Size Management in GTK 4\nDESCRIPTION: Replace gtk_window_resize() and gtk_window_get_size() with gtk_window_set_default_size() and gtk_window_get_default_size(). This aligns with the new frame cycle integration for size changes.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\ngtk_window_resize(GTK_WINDOW(window), width, height);\ngtk_window_get_size(GTK_WINDOW(window), &width, &height);\n\n// New GTK 4 way\ngtk_window_set_default_size(GTK_WINDOW(window), width, height);\ngtk_window_get_default_size(GTK_WINDOW(window), &width, &height);\n```\n\n----------------------------------------\n\nTITLE: Specifying Scaled Images for Hi-Resolution Displays in GTK CSS\nDESCRIPTION: Shows how to specify normal and hi-resolution variants of images for scaled rendering on hi-resolution displays in GTK CSS.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-properties.md#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n-gtk-scaled(image1, image2)\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Size with Pango\nDESCRIPTION: Demonstrates how to measure the size of a piece of text using a Pango layout. This code creates a layout, sets the font, and retrieves the pixel size of the text.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nlayout = gtk_widget_create_pango_layout (widget, text);\nfontdesc = pango_font_description_from_string (\"Luxi Mono 12\");\npango_layout_set_font_description (layout, fontdesc);\npango_layout_get_pixel_size (layout, &width, &height);\npango_font_description_free (fontdesc);\ng_object_unref (layout);\n```\n\n----------------------------------------\n\nTITLE: Checking for Multiple GDK Backends Including Wayland and X11\nDESCRIPTION: This code demonstrates how to properly check for supported backends in GDK at both compile-time and run-time. It uses conditional compilation with GDK_WINDOWING_* preprocessor symbols and runtime type checking with GDK_IS_*_DISPLAY macros to ensure backend-specific code is only executed on supported platforms.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/wayland.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#ifdef GDK_WINDOWING_WAYLAND\n#include <gdk/wayland/gdkwayland.h>\n#endif\n#ifdef GDK_WINDOWING_X11\n#include <gdk/x11/gdkx.h>\n#endif\n\n#ifdef GDK_WINDOWING_WAYLAND\n  if (GDK_IS_WAYLAND_DISPLAY (display))\n    {\n      // make Wayland-specific calls here\n    }\n  else\n#endif\n#ifdef GDK_WINDOWING_X11\n  if (GDK_IS_X11_DISPLAY (display))\n    {\n      // make X11-specific calls here\n    }\n  else\n#endif\n  g_error (\"Unsupported GDK backend\");\n```\n\n----------------------------------------\n\nTITLE: Handling Consumed Modifiers in GTK Key Events\nDESCRIPTION: Example showing how to properly handle keyboard modifiers when checking for key combinations like Ctrl+Plus. The code demonstrates masking out irrelevant modifiers and checking for specific key combinations.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/keys.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// We want to ignore irrelevant modifiers like ScrollLock\n#define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_ALT_MASK)\nstate = gdk_event_get_modifier_state (event);\ngdk_keymap_translate_keyboard_state (keymap,\n                                     gdk_key_event_get_keycode (event),\n                                     state,\n                                     gdk_key_event_get_group (event),\n                                     &keyval, NULL, NULL, &consumed);\nif (keyval == GDK_PLUS &&\n    (state & ~consumed & ALL_ACCELS_MASK) == GDK_CONTROL_MASK)\n  // Control was pressed\n```\n\n----------------------------------------\n\nTITLE: Setting Accessibility Properties in XML UI\nDESCRIPTION: Example showing how to set accessible attributes including labels and relations in a GTK UI file using XML markup.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"GtkButton\" id=\"button1\">\n  <accessibility>\n    <property name=\"label\">Download</property>\n    <relation name=\"labelled-by\">label1</relation>\n  </accessibility>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Updating Widget Invalidation in GTK 4\nDESCRIPTION: In GTK 4, only gtk_widget_queue_draw() is available for marking a widget as needing redraw. Other variations have been removed, and the minimum unit of invalidation is now the widget.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_15\n\nLANGUAGE: C\nCODE:\n```\ngtk_widget_queue_draw(widget);\n```\n\n----------------------------------------\n\nTITLE: Loading Themed Icons in GTK CSS\nDESCRIPTION: Demonstrates how to load a themed icon using GTK's CSS extension for icon themes.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-properties.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n-gtk-icontheme(name)\n```\n\n----------------------------------------\n\nTITLE: Drawing Text with Pango and Cairo\nDESCRIPTION: Shows how to draw text onto a cairo surface using a Pango layout. This snippet creates a layout, sets the font description, and renders the text using PangoCairo.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nlayout = gtk_widget_create_pango_layout (widget, text);\nfontdesc = pango_font_description_from_string (\"Luxi Mono 12\");\npango_layout_set_font_description (layout, fontdesc);\npango_cairo_show_layout (cr, layout);\npango_font_description_free (fontdesc);\ng_object_unref (layout);\n```\n\n----------------------------------------\n\nTITLE: Widget CSS Management Functions in C\nDESCRIPTION: Functions for managing CSS classes and styling of widgets, including adding, removing, and querying CSS classes.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nconst char *            gtk_widget_get_css_name         (GtkWidget   *self) G_GNUC_PURE;\nvoid                    gtk_widget_add_css_class        (GtkWidget   *widget,\n                                                         const char  *css_class);\nvoid                    gtk_widget_remove_css_class     (GtkWidget   *widget,\n                                                         const char  *css_class);\ngboolean                gtk_widget_has_css_class        (GtkWidget   *widget,\n                                                         const char  *css_class);\n```\n\n----------------------------------------\n\nTITLE: Overriding Accessible Label Text in C\nDESCRIPTION: Shows how to override the accessible label text that will be perceived by assistive technologies, different from the visible label text.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ngtk_label_set_text (GTK_LABEL (label), \"Some text\");\ngtk_accessible_update_property (GTK_ACCESSIBLE (label),\n\t\t\t\tGTK_ACCESSIBLE_PROPERTY_LABEL,\n\t\t\t\t\"Assistive technologies users will perceive \"\n\t\t\t\t\"this text, not the contents of the label\",\n\t\t\t\t-1);\n```\n\n----------------------------------------\n\nTITLE: Setting GTK Debug Environment Variables\nDESCRIPTION: Environment variables for debugging GTK applications, including action tracing, builder operations, CSS features, and layout management. The 'all' value enables all debug options.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGTK_DEBUG=actions,builder,css,geometry\n```\n\n----------------------------------------\n\nTITLE: Getting Widget Surface in GTK 4\nDESCRIPTION: In GTK 4, use gtk_native_get_surface() in combination with gtk_widget_get_native() instead of gtk_widget_get_surface().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nGdkSurface *surface = gtk_native_get_surface(gtk_widget_get_native(widget));\n```\n\n----------------------------------------\n\nTITLE: Migrating Color Definitions in CSS from @define-color to Custom Properties\nDESCRIPTION: Shows how to replace deprecated @define-color syntax with modern CSS custom properties using :root scope and var() function.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-4to5.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@define-color fg_color #2e3436\n\n...\n\nbox {\n  color: @fg_color;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --fg-color: #2e3436;\n}\n\n...\n\nbox {\n  color: var(--fg-color);\n}\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Hierarchy Functions\nDESCRIPTION: Functions for managing widget parent-child relationships and querying widget ancestry and hierarchy information.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nvoid                  gtk_widget_set_parent             (GtkWidget    *widget,\n                                                         GtkWidget    *parent);\nGtkWidget *           gtk_widget_get_parent             (GtkWidget    *widget);\n\nGtkRoot *             gtk_widget_get_root               (GtkWidget    *widget);\n\nGtkNative *           gtk_widget_get_native             (GtkWidget    *widget);\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Template Binding Macros\nDESCRIPTION: Macro definitions for binding template callbacks and child widgets to widget classes. These macros provide convenience wrappers around template binding functions.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n#define gtk_widget_class_bind_template_callback(widget_class, callback) \\\n  gtk_widget_class_bind_template_callback_full (GTK_WIDGET_CLASS (widget_class), \\\n                                                #callback, \\\n                                                G_CALLBACK (callback))\n\n#define gtk_widget_class_bind_template_child(widget_class, TypeName, member_name) \\\n  gtk_widget_class_bind_template_child_full (widget_class, \\\n                                             #member_name, \\\n                                             FALSE, \\\n                                             G_STRUCT_OFFSET (TypeName, member_name))\n```\n\n----------------------------------------\n\nTITLE: Defining Menu Structure in GTK XML\nDESCRIPTION: XML interface definition for a menu structure including Words, Lines, Preferences and Quit items. The menu uses action names that correspond to window and application actions.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <menu id=\"menu\">\n    <section>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Words</attribute>\n        <attribute name=\"action\">win.show-words</attribute>\n      </item>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Lines</attribute>\n        <attribute name=\"action\">win.show-lines</attribute>\n      </item>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Preferences</attribute>\n        <attribute name=\"action\">app.preferences</attribute>\n      </item>\n    </section>\n    <section>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Quit</attribute>\n        <attribute name=\"action\">app.quit</attribute>\n      </item>\n    </section>\n  </menu>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Initializing ExampleAppWindow Structure in C\nDESCRIPTION: Defines the ExampleAppWindow structure and initializes the class, binding the 'stack' widget from the UI template.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nstruct _ExampleAppWindow\n{\n  GtkApplicationWindow parent;\n\n  GtkWidget *stack;\n};\n\nG_DEFINE_TYPE (ExampleAppWindow, example_app_window, GTK_TYPE_APPLICATION_WINDOW)\n\nstatic void\nexample_app_window_class_init (ExampleAppWindowClass *class)\n{\n  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (class),\n                                               \"/org/gtk/exampleapp/window.ui\");\n  gtk_widget_class_bind_template_child (GTK_WIDGET_CLASS (class), ExampleAppWindow, stack);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cursors in GTK 4\nDESCRIPTION: For creating custom cursors in GTK 4, use gdk_cursor_new_from_texture(). The ability to get cursor images has been removed.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nGdkCursor *cursor = gdk_cursor_new_from_texture(texture, hotspot_x, hotspot_y, NULL);\n```\n\n----------------------------------------\n\nTITLE: GTK Accessible States Documentation\nDESCRIPTION: Documentation of GTK accessibility states showing the mapping between GTK state names, ARIA attributes and their value types.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| State name | ARIA attribute | Value type | Notes |\n|------------|----------------|------------|-------|\n| `GTK_ACCESSIBLE_STATE_BUSY` | \"aria-busy\" | boolean |\n```\n\n----------------------------------------\n\nTITLE: Setting Related Accessible Elements in C\nDESCRIPTION: Example showing how to establish relationships between UI elements by setting accessible relations between a button and its label.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ngtk_button_set_label (GTK_BUTTON (button), \"Download\");\ngtk_box_append (GTK_BOX (box), button);\n\ngtk_label_set_text (GTK_LABEL (label), \"Final report.pdf\");\ngtk_box_append (GTK_BOX (box), label);\n\ngtk_accessible_update_relation (GTK_ACCESSIBLE (button),\n\t\t\t\tGTK_ACCESSIBLE_RELATION_LABELLED_BY,\n\t\t\t\tg_list_append (NULL, label),\n\t\t\t\t-1);\n```\n\n----------------------------------------\n\nTITLE: Setting GTK Theme Override\nDESCRIPTION: Forces GTK to use a specific theme, overriding system settings. Optional variant can be specified after a colon.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGTK_THEME=Adwaita:dark\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tree Selection Handler\nDESCRIPTION: Demonstrates how to set up selection handling for a GtkTreeView.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Prototype for selection handler callback */\nstatic void tree_selection_changed_cb (GtkTreeSelection *selection, gpointer data);\n\n/* Setup the selection handler */\nGtkTreeSelection *select;\n\nselect = gtk_tree_view_get_selection (GTK_TREE_VIEW (tree));\ngtk_tree_selection_set_mode (select, GTK_SELECTION_SINGLE);\ng_signal_connect (G_OBJECT (select), \"changed\",\n                  G_CALLBACK (tree_selection_changed_cb),\n                  NULL);\n```\n\n----------------------------------------\n\nTITLE: Setting GDK Backend Selection\nDESCRIPTION: Specifies which GDK backend(s) to use for display handling. Can include multiple comma-separated backends that will be tried in order.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGDK_BACKEND=wayland,x11,*\n```\n\n----------------------------------------\n\nTITLE: Internationalization Macros in GTK/C\nDESCRIPTION: Shows common macro definitions used for internationalization in GTK applications using gettext.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define  _(x)     gettext (x)\n#define N_(x)     x\n#define C_(ctx,x) pgettext (ctx, x)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Menu Structure in XML\nDESCRIPTION: Specifies the structure of the application menu using XML, defining menu items for preferences and quit actions.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_19\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <menu id=\"menu\">\n    <section>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Preferences</attribute>\n        <attribute name=\"action\">app.preferences</attribute>\n      </item>\n    </section>\n    <section>\n      <item>\n        <attribute name=\"label\" translatable=\"yes\">_Quit</attribute>\n        <attribute name=\"action\">app.quit</attribute>\n      </item>\n    </section>\n  </menu>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Accessible Role in C\nDESCRIPTION: Demonstrates how to set the accessible role for a widget class to define its expected behavior for assistive technologies.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ngtk_widget_class_set_accessible_role (widget_class, GTK_ACCESSIBLE_ROLE_BUTTON);\n```\n\n----------------------------------------\n\nTITLE: Configuring GTK Module Path\nDESCRIPTION: Specifies directories for GTK to search for dynamically loaded objects like input methods and print backends. Uses colon-separated paths on Unix/Linux and semicolon-separated paths on Windows.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGTK_PATH=/usr/local/lib/gtk-4.0/modules:/opt/gtk/modules\n```\n\n----------------------------------------\n\nTITLE: UTF-8 File Reading and Conversion in GTK/C\nDESCRIPTION: Shows how to read an ISO-8859-1 encoded text file and convert it to UTF-8 for use with GTK.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nchar *text, *utf8_text;\ngsize length;\nGError *error = NULL;\n\nif (g_file_get_contents (filename, &text, &length, NULL))\n  {\n    utf8_text = g_convert (text, length, \"UTF-8\", \"ISO-8859-1\",\n                           NULL, NULL, &error);\n    if (error != NULL)\n      {\n        fprintf (\"Couldn't convert file %s to UTF-8\\n\", filename);\n        g_error_free (error);\n      }\n    else\n      g_print (utf8_text);\n  }\nelse\n  fprintf (stderr, \"Unable to read file %s\\n\", filename);\n```\n\n----------------------------------------\n\nTITLE: Setting GSK Renderer Selection\nDESCRIPTION: Environment variable for selecting the GSK renderer, with options including broadway, cairo, opengl/gl, and vulkan renderers.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nGSK_RENDERER=\"opengl\"\n```\n\n----------------------------------------\n\nTITLE: UTF-8 String Handling Examples in GTK/C\nDESCRIPTION: Demonstrates different approaches to handling UTF-8 encoded strings in GTK applications.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ng_print (\"direct UTF-8: ©\");\ng_print (\"escaped UTF-8: \\302\\251\");\ntext = g_convert (\"runtime conversion: ©\", -1,\n                  \"ISO-8859-1\", \"UTF-8\", NULL, NULL, NULL);\ng_print (text);\ng_free (text);\n```\n\n----------------------------------------\n\nTITLE: Defining GTK Application Window UI in XML\nDESCRIPTION: This XML file defines the UI structure for the application window using GtkBuilder. It sets up a GtkStack widget as the main content area.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <template class=\"ExampleAppWindow\" parent=\"GtkApplicationWindow\">\n    <property name=\"title\" translatable=\"yes\">Example Application</property>\n    <property name=\"default-width\">600</property>\n    <property name=\"default-height\">400</property>\n    <child>\n      <object class=\"GtkBox\" id=\"content_box\">\n        <property name=\"orientation\">vertical</property>\n        <child>\n          <object class=\"GtkStack\" id=\"stack\"/>\n        </child>\n      </object>\n    </child>\n  </template>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Widget Action Callback Definition and Installation in C\nDESCRIPTION: Typedef and functions for installing and managing widget actions, including callback definition and property action installation.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_21\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (* GtkWidgetActionActivateFunc) (GtkWidget  *widget,\n                                              const char *action_name,\n                                              GVariant   *parameter);\n\nvoid                    gtk_widget_class_install_action (GtkWidgetClass              *widget_class,\n                                                         const char                  *action_name,\n                                                         const char                  *parameter_type,\n                                                         GtkWidgetActionActivateFunc  activate);\n```\n\n----------------------------------------\n\nTITLE: Declaring GTK Widget Class Binding and Shortcut Functions in C\nDESCRIPTION: This snippet declares functions for adding key bindings, shortcuts, and activation signals to GTK widget classes. It includes functions like gtk_widget_class_add_binding and gtk_widget_class_set_activate_signal.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_class_add_binding   (GtkWidgetClass      *widget_class,\n                                           guint                keyval,\n                                           GdkModifierType      mods,\n                                           GtkShortcutFunc      callback,\n                                           const char          *format_string,\n                                           ...);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_class_add_binding_signal\n                                          (GtkWidgetClass      *widget_class,\n                                           guint                keyval,\n                                           GdkModifierType      mods,\n                                           const char          *signal,\n                                           const char          *format_string,\n                                           ...);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_class_add_binding_action\n                                          (GtkWidgetClass      *widget_class,\n                                           guint                keyval,\n                                           GdkModifierType      mods,\n                                           const char          *action_name,\n                                           const char          *format_string,\n                                           ...);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_class_add_shortcut  (GtkWidgetClass      *widget_class,\n                                           GtkShortcut         *shortcut);\n\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_class_set_activate_signal                 (GtkWidgetClass *widget_class,\n                                                                 guint           signal_id);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_class_set_activate_signal_from_name       (GtkWidgetClass *widget_class,\n                                                                 const char     *signal_name);\nGDK_AVAILABLE_IN_ALL\nguint      gtk_widget_class_get_activate_signal                 (GtkWidgetClass *widget_class);\n```\n\n----------------------------------------\n\nTITLE: Visualizing CSS Node Structure for GtkScale\nDESCRIPTION: This ASCII diagram illustrates the CSS node hierarchy for a GtkScale widget, showing the main scale node with its child nodes including marks, trough, slider, and optional highlight and fill nodes. It demonstrates the parent-child relationships in the node tree that CSS selectors can target.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-overview.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nscale[.fine-tune]\n├── marks.top\n│   ├── mark\n┊   ┊\n│   ╰── mark\n├── trough\n│   ├── slider\n│   ├── [highlight]\n│   ╰── [fill]\n╰── marks.bottom\n    ├── mark\n    ┊\n    ╰── mark\n```\n\n----------------------------------------\n\nTITLE: Starting Broadway Server for GTK\nDESCRIPTION: Command to start the Broadway server (gtk-broadwayd) with a specific display number.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/broadway.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-broadwayd :5\n```\n\n----------------------------------------\n\nTITLE: Setting Event Mask in C++\nDESCRIPTION: Demonstrates how to set event masks for a GDK surface in C++, which requires explicit casting of the event mask flags to GdkEventMask.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\ngdk_surface_set_events (gdk_surface,\n                        (GdkEventMask) GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);\n```\n\n----------------------------------------\n\nTITLE: Defining Preference Dialog Template in XML\nDESCRIPTION: This XML template defines the layout and widgets for the preference dialog. It includes a font button and a combo box for selecting transitions, along with labels and layout properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <template class=\"ExampleAppPrefs\" parent=\"GtkDialog\">\n    <property name=\"title\" translatable=\"yes\">Preferences</property>\n    <property name=\"resizable\">0</property>\n    <property name=\"modal\">1</property>\n    <child internal-child=\"content_area\">\n      <object class=\"GtkBox\" id=\"content_area\">\n        <child>\n          <object class=\"GtkGrid\" id=\"grid\">\n            <property name=\"margin-start\">12</property>\n            <property name=\"margin-end\">12</property>\n            <property name=\"margin-top\">12</property>\n            <property name=\"margin-bottom\">12</property>\n            <property name=\"row-spacing\">12</property>\n            <property name=\"column-spacing\">12</property>\n            <child>\n              <object class=\"GtkLabel\" id=\"fontlabel\">\n                <property name=\"label\">_Font:</property>\n                <property name=\"use-underline\">1</property>\n                <property name=\"mnemonic-widget\">font</property>\n                <property name=\"xalign\">1</property>\n                <layout>\n                  <property name=\"column\">0</property>\n                  <property name=\"row\">0</property>\n                </layout>\n              </object>\n            </child>\n            <child>\n              <object class=\"GtkFontButton\" id=\"font\">\n                <layout>\n                  <property name=\"column\">1</property>\n                  <property name=\"row\">0</property>\n                </layout>\n              </object>\n            </child>\n            <child>\n              <object class=\"GtkLabel\" id=\"transitionlabel\">\n                <property name=\"label\">_Transition:</property>\n                <property name=\"use-underline\">1</property>\n                <property name=\"mnemonic-widget\">transition</property>\n                <property name=\"xalign\">1</property>\n                <layout>\n                  <property name=\"column\">0</property>\n                  <property name=\"row\">1</property>\n                </layout>\n              </object>\n            </child>\n            <child>\n              <object class=\"GtkComboBoxText\" id=\"transition\">\n                <items>\n                  <item translatable=\"yes\" id=\"none\">None</item>\n                  <item translatable=\"yes\" id=\"crossfade\">Fade</item>\n                  <item translatable=\"yes\" id=\"slide-left-right\">Slide</item>\n                </items>\n                <layout>\n                  <property name=\"column\">1</property>\n                  <property name=\"row\">1</property>\n                </layout>\n              </object>\n            </child>\n          </object>\n        </child>\n      </object>\n    </child>\n  </template>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Declaring GTK Widget Name and State Functions in C\nDESCRIPTION: This snippet declares GTK widget functions for setting and getting widget names and state flags. It includes functions like gtk_widget_set_name and gtk_widget_set_state_flags.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\nvoid                  gtk_widget_set_name               (GtkWidget    *widget,\n                                                         const char   *name);\nGDK_AVAILABLE_IN_ALL\nconst char *         gtk_widget_get_name               (GtkWidget    *widget);\n\n\nGDK_AVAILABLE_IN_ALL\nvoid                  gtk_widget_set_state_flags        (GtkWidget     *widget,\n                                                         GtkStateFlags  flags,\n```\n\n----------------------------------------\n\nTITLE: Compiling GTK Drawing Application (Bash)\nDESCRIPTION: This snippet shows the command to compile the GTK drawing application using GCC with the necessary flags and libraries.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcc $( pkg-config --cflags gtk4 ) -o example-3 example-3.c $( pkg-config --libs gtk4 )\n```\n\n----------------------------------------\n\nTITLE: Widget Type Definitions and Casting Macros in C\nDESCRIPTION: Standard GTK type checking and casting macros for the Widget class. Enables type-safe casting between widget types and class verification.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define GTK_TYPE_WIDGET                   (gtk_widget_get_type ())\n#define GTK_WIDGET(widget)                (G_TYPE_CHECK_INSTANCE_CAST ((widget), GTK_TYPE_WIDGET, GtkWidget))\n#define GTK_WIDGET_CLASS(klass)           (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_WIDGET, GtkWidgetClass))\n#define GTK_IS_WIDGET(widget)             (G_TYPE_CHECK_INSTANCE_TYPE ((widget), GTK_TYPE_WIDGET))\n#define GTK_IS_WIDGET_CLASS(klass)        (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WIDGET))\n#define GTK_WIDGET_GET_CLASS(obj)         (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_WIDGET, GtkWidgetClass))\n```\n\n----------------------------------------\n\nTITLE: Enabling diagnostic warnings for GTK 3.x applications\nDESCRIPTION: This command runs the application with the G_ENABLE_DIAGNOSTIC environment variable set, which enables runtime warnings for deprecated properties and signals.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nG_ENABLE_DIAGNOSTIC=1 ./your-app\n```\n\n----------------------------------------\n\nTITLE: Updating GTK CSS Color Functions to Standard CSS\nDESCRIPTION: Demonstrates how to replace GTK-specific color functions (mix, alpha, shade) with standard CSS color functions like color-mix() and calc().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-4to5.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\na {\n  color: mix(red, green, 0.8);\n}\n\nb {\n  color: alpha(green, 0.6);\n}\n\nc {\n  color: shade(red, 1.3);\n}\n\nd {\n  color: shade(red, 0.7);\n}\n```\n\nLANGUAGE: css\nCODE:\n```\na {\n  color: color-mix(in srgb, red, green 80%);\n}\n\nb {\n  color: rgb(from green, r g b / calc(alpha * 0.6));\n}\n\nc {\n  color: hsl(from red, h calc(s * 1.3) calc(l * 1.3));\n}\n\nd {\n  color: hsl(from red, h calc(s * 0.7) calc(l * 0.7));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tree Selection Changes\nDESCRIPTION: Shows implementation of a callback function to handle tree selection changes.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-tree-widget.md#2025-04-18_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic void\ntree_selection_changed_cb (GtkTreeSelection *selection, gpointer data)\n{\n  GtkTreeIter iter;\n  GtkTreeModel *model;\n  char *author;\n\n  if (gtk_tree_selection_get_selected (selection, &model, &iter))\n    {\n      gtk_tree_model_get (model, &iter, AUTHOR_COLUMN, &author, -1);\n\n      g_print (\"You selected a book by %s\\n\", author);\n\n      g_free (author);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GTK Widget State Management Functions\nDESCRIPTION: Function declarations for managing widget state flags, sensitivity and visibility. Includes getters and setters for basic widget properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nvoid                  gtk_widget_unset_state_flags      (GtkWidget     *widget,\n                                                         GtkStateFlags  flags);\nGtkStateFlags         gtk_widget_get_state_flags        (GtkWidget     *widget);\n\nvoid                  gtk_widget_set_sensitive          (GtkWidget    *widget,\n                                                         gboolean      sensitive);\ngboolean              gtk_widget_get_sensitive          (GtkWidget    *widget);\ngboolean              gtk_widget_is_sensitive           (GtkWidget    *widget);\n```\n\n----------------------------------------\n\nTITLE: Configuring GDK Debug Options\nDESCRIPTION: Debug flags for GDK functionality including events, drag-and-drop, input handling, and backend-specific features.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGDK_DEBUG=misc,events,dnd,input\n```\n\n----------------------------------------\n\nTITLE: GTK Accessible Properties Documentation\nDESCRIPTION: Documentation showing the mapping between GTK accessibility property names, ARIA attributes and their corresponding value types.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| State name | ARIA attribute | Value type |\n|------------|----------------|------------|\n| `GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE` | \"aria-autocomplete\" | `GtkAccessibleAutocomplete` |\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessibleRange Interface for Value Changes\nDESCRIPTION: This snippet mentions the recommended way to support value changes in GTK 4.10 and later versions by implementing the AccessibleRange interface.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[iface@Gtk.AccessibleRange]\n```\n\n----------------------------------------\n\nTITLE: GTK Instance Structure Definition\nDESCRIPTION: Shows the standard way to define GTK instance structures containing only the parent type\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n  struct _GtkFoo\n  {\n    GtkWidget parent_instance;\n  };\n```\n\n----------------------------------------\n\nTITLE: Installing GTK Demo Applications via Flatpak\nDESCRIPTION: Commands to add GNOME Nightly repository and install GTK demo applications using Flatpak package manager\nSOURCE: https://github.com/gnome/gtk/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflatpak remote-add --if-not-exists gnome-nightly https://nightly.gnome.org/gnome-nightly.flatpakrepo\nflatpak install gnome-nightly org.gtk.Demo4\nflatpak install gnome-nightly org.gtk.WidgetFactory4\nflatpak install gnome-nightly org.gtk.IconBrowser4\n```\n\n----------------------------------------\n\nTITLE: Internationalization Implementation Example in GTK/C\nDESCRIPTION: Demonstrates practical usage of gettext translation macros in GTK widget creation.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#include <gi18n.h>\n\nstatic const char *global_variable = N_(\"Translate this string\");\n\nstatic void\nmake_widgets (void)\n{\n  GtkWidget *label1;\n  GtkWidget *label2;\n\n  label1 = gtk_label_new (_(\"Another string to translate\"));\n  label2 = gtk_label_new (_(global_variable));\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Allowed GDK/GTK Version (C)\nDESCRIPTION: Defines a macro to specify the maximum GDK/GTK version allowed, limiting the use of newer APIs. This helps in ensuring compatibility with a specific version range.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/general.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define GDK_VERSION_MAX_ALLOWED (specific_version)\n```\n\n----------------------------------------\n\nTITLE: Replacing GTK 3 CSS gradient syntax with standard CSS in GTK 4\nDESCRIPTION: GTK 4 now supports standard CSS syntax for linear and radial gradients instead of the custom -gtk-gradient property used in GTK 3.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\n-gtk-gradient: linear(...); /* GTK 3 */\nlinear-gradient(...); /* GTK 4 */\n```\n\n----------------------------------------\n\nTITLE: Exporting Actions for Accessible Value Modification\nDESCRIPTION: This snippet suggests actions that should be exported to allow value modification through accessibility technologies. These actions do not take parameters.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/section-accessibility.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`increase-value`\nand `decrease-value`\n```\n\n----------------------------------------\n\nTITLE: GTK Source File Include Ordering\nDESCRIPTION: Demonstrates the proper ordering of includes in GTK source files: local, project, and subdirectory headers\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n  #include \"config.h\"\n\n  #include \"gtkfooprivate.h\"\n\n  #include \"gtkbutton.h\"\n  #include \"gtkwidget.h\"\n\n  #include \"a11y/gtkwidgetaccessible.h\"\n\n  #include \"gdk/gdkwindowprivate.h\"\n```\n\n----------------------------------------\n\nTITLE: Getting Entire Text Content from GtkTextView\nDESCRIPTION: Shows how to retrieve the entire content of a GtkTextView as a string. This code gets the buffer bounds and extracts the text between them.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/question_index.md#2025-04-18_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nGtkTextIter start, end;\nGtkTextBuffer *buffer;\nchar *text;\n\nbuffer = gtk_text_view_get_buffer (GTK_TEXT_VIEW (text_view));\ngtk_text_buffer_get_bounds (buffer, &start, &end);\ntext = gtk_text_iter_get_text (&start, &end);\n/* use text */\ng_free (text);\n```\n\n----------------------------------------\n\nTITLE: Updating Child Property Access for GtkStack in GTK 4\nDESCRIPTION: Use GtkStackPage objects to access and set child properties in GtkStack instead of container child properties. This applies to GtkAssistant and GtkNotebook as well.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\ngtk_container_child_set(GTK_CONTAINER(stack), child, \"property\", value, NULL);\n\n// New GTK 4 way\nGtkStackPage *page = gtk_stack_get_page(GTK_STACK(stack), child);\ng_object_set(G_OBJECT(page), \"property\", value, NULL);\n```\n\n----------------------------------------\n\nTITLE: Setting GTK Accessibility Backend\nDESCRIPTION: Environment variable for selecting the accessibility backend, with options for atspi, accesskit, test, or none.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nGTK_A11Y=\"atspi\"\n```\n\n----------------------------------------\n\nTITLE: Widget Tree Navigation Functions in C\nDESCRIPTION: Functions for traversing the widget tree hierarchy, including methods to get child widgets, siblings, and observe widget children and controllers.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nGtkWidget *             gtk_widget_get_first_child      (GtkWidget *widget);\nGtkWidget *             gtk_widget_get_last_child       (GtkWidget *widget);\nGtkWidget *             gtk_widget_get_next_sibling     (GtkWidget *widget);\nGtkWidget *             gtk_widget_get_prev_sibling     (GtkWidget *widget);\nGListModel *            gtk_widget_observe_children     (GtkWidget *widget);\nGListModel *            gtk_widget_observe_controllers  (GtkWidget *widget);\n```\n\n----------------------------------------\n\nTITLE: Adapting to GtkBin Removal in GTK 4\nDESCRIPTION: Update code for former GtkBin subclasses to use the \"child\" property instead of gtk_container_add(). This affects classes like GtkFrame, GtkButton, GtkWindow, etc.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n// Old GTK 3 way\ngtk_container_add(GTK_CONTAINER(frame), child);\n\n// New GTK 4 way\ngtk_frame_set_child(GTK_FRAME(frame), child);\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Dimension Functions\nDESCRIPTION: Functions for getting and setting widget dimensions, allocations and size requests.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nint                   gtk_widget_get_allocated_width    (GtkWidget     *widget);\nint                   gtk_widget_get_allocated_height   (GtkWidget     *widget);\nint                   gtk_widget_get_allocated_baseline (GtkWidget     *widget);\n\nvoid                  gtk_widget_get_allocation         (GtkWidget     *widget,\n                                                         GtkAllocation *allocation);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Proper Indentation in C\nDESCRIPTION: Shows the correct way to indent code blocks in C using spaces. Each new level is indented 2 or more spaces than the previous level.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n  if (condition)\n    single_statement ();\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Required GDK/GTK Version (C)\nDESCRIPTION: Defines a macro to specify the minimum GDK/GTK version required, controlling warnings about deprecated APIs. This helps in maintaining compatibility with older versions.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/general.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define GDK_VERSION_MIN_REQUIRED (specific_version)\n```\n\n----------------------------------------\n\nTITLE: Defining GSettings Schema in XML\nDESCRIPTION: This XML schema defines the settings for the example application, including font and transition preferences. It specifies default values, types, and descriptions for each setting.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<schemalist>\n  <schema path=\"/org/gtk/exampleapp/\" id=\"org.gtk.exampleapp\">\n    <key name=\"font\" type=\"s\">\n      <default>'Monospace 12'</default>\n      <summary>Font</summary>\n      <description>The font to be used for content.</description>\n    </key>\n    <key name=\"transition\" type=\"s\">\n      <choices>\n        <choice value='none'/>\n        <choice value='crossfade'/>\n        <choice value='slide-left-right'/>\n      </choices>\n      <default>'none'</default>\n      <summary>Transition</summary>\n      <description>The transition to use when switching tabs.</description>\n    </key>\n  </schema>\n</schemalist>\n```\n\n----------------------------------------\n\nTITLE: Declaring GTK Widget Size and Layout Functions in C\nDESCRIPTION: This snippet declares GTK widget functions related to size requests, layout management, and widget class layout configuration. It includes functions like gtk_widget_measure and gtk_widget_set_layout_manager.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\nGtkSizeRequestMode  gtk_widget_get_request_mode               (GtkWidget      *widget);\nGDK_AVAILABLE_IN_ALL\nvoid gtk_widget_measure (GtkWidget      *widget,\n                         GtkOrientation  orientation,\n                         int             for_size,\n                         int            *minimum,\n                         int            *natural,\n                         int            *minimum_baseline,\n                         int            *natural_baseline);\nGDK_AVAILABLE_IN_ALL\nvoid                gtk_widget_get_preferred_size             (GtkWidget      *widget,\n                                                               GtkRequisition *minimum_size,\n                                                               GtkRequisition *natural_size);\n\nGDK_AVAILABLE_IN_ALL\nvoid                    gtk_widget_set_layout_manager   (GtkWidget        *widget,\n                                                         GtkLayoutManager *layout_manager);\nGDK_AVAILABLE_IN_ALL\nGtkLayoutManager *      gtk_widget_get_layout_manager   (GtkWidget        *widget);\n\nGDK_AVAILABLE_IN_ALL\nvoid                    gtk_widget_class_set_layout_manager_type        (GtkWidgetClass *widget_class,\n                                                                         GType           type);\nGDK_AVAILABLE_IN_ALL\nGType                   gtk_widget_class_get_layout_manager_type        (GtkWidgetClass *widget_class);\n```\n\n----------------------------------------\n\nTITLE: Setting Cursors in GTK 4\nDESCRIPTION: In GTK 4, cursors are set using gtk_widget_set_cursor() instead of setting them on the underlying window directly. This change is necessary because most widgets no longer have their own window.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_17\n\nLANGUAGE: C\nCODE:\n```\ngtk_widget_set_cursor(widget, cursor);\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Core Functions Declaration\nDESCRIPTION: Core GTK Widget API function declarations for widget management including controllers, Pango context, font options, and directionality.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\nvoid gtk_widget_remove_controller(GtkWidget *widget,\n                                               GtkEventController *controller);\n\nGDK_AVAILABLE_IN_ALL\nPangoContext *gtk_widget_create_pango_context(GtkWidget *widget);\nGDK_AVAILABLE_IN_ALL\nPangoContext *gtk_widget_get_pango_context(GtkWidget *widget);\n```\n\n----------------------------------------\n\nTITLE: Proper Switch Statement Formatting in C\nDESCRIPTION: Shows the correct formatting for switch statements in C, with proper indentation and case block structure.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n  switch (condition)\n    {\n    case FOO:\n      do_foo ();\n      break;\n\n    case BAR:\n      do_bar ();\n      break;\n\n    default:\n      do_default ();\n    }\n```\n\n----------------------------------------\n\nTITLE: Compiling with deprecated symbol warnings in GTK 3.x\nDESCRIPTION: This command compiles the program with flags to disable deprecated GDK and GTK symbols, helping to identify usage of deprecated APIs.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake CFLAGS+=\"-DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED\"\n```\n\n----------------------------------------\n\nTITLE: GTK Header Include Guard Pragma\nDESCRIPTION: Modern pragma-based include guard for GTK headers\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n  #pragma once\n```\n\n----------------------------------------\n\nTITLE: Compiling GTK Hello World Application\nDESCRIPTION: Shell command for compiling the GTK application using GCC with required GTK4 flags and libraries.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngcc $( pkg-config --cflags gtk4 ) -o example-1 example-1.c $( pkg-config --libs gtk4 )\n```\n\n----------------------------------------\n\nTITLE: Referencing GDK Event Types in GTK Gesture Handling\nDESCRIPTION: This snippet demonstrates the use of GDK event types `GDK_TOUCH_BEGIN` and `GDK_BUTTON_PRESS` in the context of gesture handling. These events are emulated and propagated when a widget denies touch sequences during the capture phase.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/input-handling.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`GDK_TOUCH_BEGIN`/`GDK_BUTTON_PRESS`\n```\n\n----------------------------------------\n\nTITLE: Specifying Filter Values for Texture Scale Nodes in GTK\nDESCRIPTION: Shows the possible values for the filter property in a texture-scale node. This property determines how textures are filtered when scaled.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_27\n\nLANGUAGE: css\nCODE:\n```\nfilter: linear | nearest | trilinear\n```\n\n----------------------------------------\n\nTITLE: GTK Type Definitions\nDESCRIPTION: Standard pattern for declaring GTK type definitions\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_17\n\nLANGUAGE: c\nCODE:\n```\n  typedef struct _GtkFoo          GtkFoo;\n  typedef struct _GtkFooClass     GtkFooClass;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Widget in GTK 4\nDESCRIPTION: To mark a widget as default in GTK 4, use gtk_window_set_default_widget() directly instead of gtk_widget_grab_default().\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/migrating-3to4.md#2025-04-18_snippet_23\n\nLANGUAGE: C\nCODE:\n```\ngtk_window_set_default_widget(GTK_WINDOW(window), widget);\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Using SVG Syntax in GSK\nDESCRIPTION: An example of SVG path syntax that can be parsed with gsk_path_parse(). This creates a path with a cubic Bézier curve from point (100,100) to point (200,100) with control points at (100,200) and (200,200), and then closes the path.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gsk/paths.md#2025-04-18_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\nM 100 100 C 100 200 200 200 200 100 Z\n```\n\n----------------------------------------\n\nTITLE: Setting GTK Inspector Debug Mode\nDESCRIPTION: Environment variable to enable the GTK Inspector for interactive debugging of GTK applications.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nGTK_DEBUG=\"interactive\"\n```\n\n----------------------------------------\n\nTITLE: Using gtk4-rendernode-tool Command in Bash\nDESCRIPTION: This snippet shows the general syntax for using the gtk4-rendernode-tool command. It includes various subcommands and their respective options for working with rendernode files.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-rendernode-tool.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-rendernode-tool <COMMAND> [OPTIONS...] <FILE>\n\ngtk4-rendernode-tool benchmark [OPTIONS...] <FILE>\ngtk4-rendernode-tool compare [OPTIONS...] <FILE1> <FILE2>\ngtk4-rendernode-tool extract [OPTIONS...] <FILE>\ngtk4-rendernode-tool info [OPTIONS...] <FILE>\ngtk4-rendernode-tool render [OPTIONS...] <FILE> [<FILE>]\ngtk4-rendernode-tool show [OPTIONS...] <FILE>\n```\n\n----------------------------------------\n\nTITLE: Defining Color Matrix Node Properties in GTK\nDESCRIPTION: Specifies the properties for a color matrix node, including child, matrix, and offset. The node is created using gsk_color_matrix_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| child    | `<node>`         | color { }              | always      |\n| matrix   | `<transform>`    | none                   | non-default |\n| offset   | `<number>{4}`    | 0 0 0 0                | non-default |\n```\n\n----------------------------------------\n\nTITLE: Parsing and Printing Detailed Action Names in GTK\nDESCRIPTION: Shows the use of g_action_parse_detailed_name() and g_action_print_detailed_name() functions for converting between detailed action names and split-out action names and target values.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/actions.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ng_action_parse_detailed_name()\n```\n\nLANGUAGE: C\nCODE:\n```\ng_action_print_detailed_name()\n```\n\n----------------------------------------\n\nTITLE: Accessing GtkTreeView Size Fields in C\nDESCRIPTION: This snippet shows how the overall width and height of the GtkTreeView widget are stored in the private structure. The width includes headers, and the height is the sum of all visible columns' widths. These values are calculated in the _gtk_tree_view_update_size function.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/tree-column-sizing.txt#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntree_view->priv->width  = the width the widget wants to be, including headers.\ntree_view->priv->height = the height the widget requests.  It's the sum\n\t\t\t  of the width of all visible columns.\n```\n\n----------------------------------------\n\nTITLE: Compiling GtkBuilder Example (Bash)\nDESCRIPTION: This snippet shows the command to compile the GtkBuilder example using GCC with the necessary flags and libraries.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngcc $( pkg-config --cflags gtk4 ) -o example-4 example-4.c $( pkg-config --libs gtk4 )\n```\n\n----------------------------------------\n\nTITLE: GTK Documentation Example\nDESCRIPTION: Demonstrates the proper GTK documentation style using GTK-Doc format with Markdown support\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n  /**\n   * gtk_get_flow:\n   * @widget: a `GtkWidget`\n   *\n   * Gets the flow of a widget.\n   *\n   * Note that flows may be laminar or turbulent...\n   *\n   * Returns: (transfer none): the flow of @widget\n   */\n  GtkFlow *\n  gtk_get_flow (GtkWidget *widget)\n  {\n\n    ...\n\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for GTK Build\nDESCRIPTION: Sets compiler and linker environment variables for a custom GTK installation. These variables help the compiler and linker find the necessary include files and libraries.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCPPFLAGS=\"-I/opt/gtk/include\"\nLDFLAGS=\"-L/opt/gtk/lib\"\nPKG_CONFIG_PATH=\"/opt/gtk/lib/pkgconfig\"\nexport CPPFLAGS LDFLAGS PKG_CONFIG_PATH\n```\n\n----------------------------------------\n\nTITLE: Specifying Line Cap Values for Stroke Nodes in GTK\nDESCRIPTION: Shows the possible values for the line-cap property in a stroke node. These values control how the end of lines are rendered in the stroke operation.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_22\n\nLANGUAGE: css\nCODE:\n```\nline-cap: butt | round | square\n```\n\n----------------------------------------\n\nTITLE: Displaying GTK Build Configuration Options\nDESCRIPTION: Shows all available Meson configuration options for the GTK build. This command helps you understand what customization options are available for your build.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmeson configure builddir\n```\n\n----------------------------------------\n\nTITLE: Handling Single Statements with Long Conditions in C\nDESCRIPTION: Demonstrates the proper use of braces for single statements when the condition is composed of many lines.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n  if (condition1 ||\n      (condition2 && condition3) ||\n      condition4 ||\n      (condition5 && (condition6 || condition7)))\n    {\n      a_single_statement ();\n    }\n```\n\n----------------------------------------\n\nTITLE: Compiling with GTK 4.2 minimum version requirement\nDESCRIPTION: This command shows how to compile a GTK program specifying a minimum GTK version of 4.2, allowing the use of symbols that were not deprecated in 4.2.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/compiling.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cc `pkg-config --cflags gtk4` -DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_4_2 hello.c -o hello `pkg-config --libs gtk4`\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Coordinate Transform Functions\nDESCRIPTION: Functions for coordinate transformations and point/bounds computations between widgets.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_12\n\nLANGUAGE: c\nCODE:\n```\ngboolean                gtk_widget_compute_transform            (GtkWidget              *widget,\n                                                                 GtkWidget              *target,\n                                                                 graphene_matrix_t      *out_transform);\ngboolean                gtk_widget_compute_bounds               (GtkWidget              *widget,\n                                                                 GtkWidget              *target,\n                                                                 graphene_rect_t        *out_bounds);\n```\n\n----------------------------------------\n\nTITLE: Widget Template and Action Management Functions in C\nDESCRIPTION: Core function declarations for managing widget templates, action groups and activation in GTK. Includes methods for template scope setting, child binding, and action group insertion.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid    gtk_widget_class_set_template_scope             (GtkWidgetClass        *widget_class,\n                                                         GtkBuilderScope       *scope);\n\nvoid    gtk_widget_class_bind_template_child_full       (GtkWidgetClass        *widget_class,\n                                                         const char            *name,\n                                                         gboolean               internal_child,\n                                                         gssize                 struct_offset);\n\nvoid                    gtk_widget_insert_action_group  (GtkWidget    *widget,\n                                                         const char   *name,\n                                                         GActionGroup *group);\n```\n\n----------------------------------------\n\nTITLE: Texture Definition Syntax in GSK Node Format\nDESCRIPTION: Specifies the grammar for texture definitions in the node format, including reference by name, URL reference, or detailed property specification.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\ntexture: \"name\" | \"name\" <texture-definition>\ntexture-definition: <url> | <memory-texture> | <dmabuf-texture>\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient Node Properties in GTK\nDESCRIPTION: Specifies the properties for a linear gradient node, including bounds, start, end, stops, interpolation, and hue-interpolation. The node is created using gsk_linear_gradient_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| property          | syntax          | default        | printed     |\n| ----------------- | --------------- | -------------- | ----------- |\n| bounds            | `<rect>`        | 50             | always      |\n| start             | `<point>`       | 0 0            | always      |\n| end               | `<point>`       | 0 50           | always      |\n| stops             | `<color-stop>`  | 0 #AF0, 1 #F0C | always      |\n| interpolation     | `<color-state>` | srgb           | non-default |\n| hue-interpolation | `<hue-interp>`  | shorter        | non-default |\n```\n\n----------------------------------------\n\nTITLE: GTK Complete Include Pattern\nDESCRIPTION: Shows the complete include pattern including system headers placed last\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n  #include \"config.h\"\n\n  #include \"gtkbarprivate.h\"\n\n  #include \"gtkcontainerprivate.h\"\n\n  #include \"a11y/gtkcontaineraccessible.h\"\n  #include \"a11y/gtkwidgetaccessible.h\"\n\n  #include \"gdk/gdkwindowprivate.h\"\n\n  #include <graphene.h>\n  #include <string.h>\n```\n\n----------------------------------------\n\nTITLE: Defining GTK Application Resources in XML\nDESCRIPTION: This XML file defines the resources to be included in the application binary, specifically the UI file for the application window.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gresources>\n  <gresource prefix=\"/org/gtk/exampleapp\">\n    <file preprocess=\"xml-stripblanks\">window.ui</file>\n  </gresource>\n</gresources>\n```\n\n----------------------------------------\n\nTITLE: Color Definition Syntax in GSK Node Format\nDESCRIPTION: Demonstrates the syntax for specifying colors in the format, supporting both modern CSS-like color specification with color states and traditional RGB/RGBA syntax.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\ncolor(<color-state> <number> <number> <number> [\"/\" <number>])\n```\n\n----------------------------------------\n\nTITLE: Illustrating BTree Structure in GtkTextView (ASCII Diagram)\nDESCRIPTION: This ASCII diagram demonstrates the hierarchical structure of the BTree used in GtkTextView. It shows how nodes and lines are organized to efficiently represent paragraphs of text.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/text_widget_internals.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n               ------ Node (lines = 6)\n              /          Line 0\n             /           Line 1\n            /            Line 2\n           /             Line 3\n          /              Line 4\n         /               Line 5\n Node (lines = 12)       \n         \\\n          \\---------- Node (lines = 6)\n                         Line 6\n                         Line 7\n                         Line 8\n                         Line 9\n                         Line 10\n                         Line 11\n```\n\n----------------------------------------\n\nTITLE: Defining Inset Shadow Node Properties in GTK\nDESCRIPTION: Specifies the properties for an inset shadow node, including blur, color, dx, dy, outline, and spread. The node is created using gsk_inset_shadow_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| blur     | `<number>`       | 0                      | non-default |\n| color    | `<color>`        | black                  | non-default |\n| dx       | `<number>`       | 1                      | non-default |\n| dy       | `<number>`       | 1                      | non-default |\n| outline  | `<rounded-rect>` | 50                     | always      |\n| spread   | `<number>`       | 0                      | non-default |\n```\n\n----------------------------------------\n\nTITLE: Node Format Grammar Definition in CSS-like Syntax\nDESCRIPTION: Defines the grammar for the node text representation using CSS value definition syntax. Specifies the structure for documents, rules, nodes, and properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\ndocument: <@-rule>*<node>\n@-rule: @cicp \"name\" { <property>* }\nnode: container [ \"name\" ] { <document> } | <node-type> [ \"name\" ] { <property>* } | \"name\"\nproperty: <property-name>: <node> | <value> ;\n```\n\n----------------------------------------\n\nTITLE: Running GTK Application with Broadway Backend\nDESCRIPTION: Command to launch a GTK application (gtk4-demo) using the Broadway backend with specific display configuration.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/broadway.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGDK_BACKEND=broadway BROADWAY_DISPLAY=:5 gtk4-demo\n```\n\n----------------------------------------\n\nTITLE: Compiling GTK Grid Layout Example\nDESCRIPTION: Shell command for compiling the GTK grid layout application using GCC with required GTK4 flags and libraries.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/getting_started.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngcc $( pkg-config --cflags gtk4 ) -o example-2 example-2.c $( pkg-config --libs gtk4 )\n```\n\n----------------------------------------\n\nTITLE: Running gtk4-broadwayd with Display Number\nDESCRIPTION: Starts the Broadway display server on display 5, which will be accessible via port 8085 in a web browser.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-broadwayd.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-broadwayd :5\n```\n\n----------------------------------------\n\nTITLE: Defining Fill Node Properties in GTK\nDESCRIPTION: Specifies the properties for a fill node, including child, path, and fill-rule. The node is created using gsk_fill_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| property  | syntax          | default                | printed     |\n| --------- | --------------- | ---------------------- | ----------- |\n| child     | `<node>`        | *see below*            | always      |\n| path      | `<string>`      | \"\"                     | always      |\n| fill-rule | `<fill-rule>`   | winding                | always      |\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icon Palette in GTK CSS\nDESCRIPTION: Shows the syntax for defining a custom icon palette for symbolic icons in GTK CSS.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-properties.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nsuccess blue, warning #fc3, error magenta\n```\n\n----------------------------------------\n\nTITLE: Accessing GtkTreeViewColumn Size Fields in C\nDESCRIPTION: This snippet outlines the key size-related fields in the GtkTreeViewColumn structure, which are valid after realization. It includes fields for column type, button request, requested width, resized width, actual width, fixed width, minimum width, maximum width, and a flag for using resized width.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/tree-column-sizing.txt#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ncolumn_type\t    The sizing method to use when calculating the size\n\t\t    of the column.  Can be GROW_ONLY, AUTO, and FIXED.\n\nbutton_request    The width as requested by the button.\n\nrequested_width   The width of the column as requested by the column.\n\t\t    It is the max requested width of the bcells in the\n\t\t    column.  If the column_type is AUTO, then it is\n\t\t    recalculated when a column changes.  Otherwise, it\n\t\t    only grows.\n\nresized_width     The width after the user has resized the column.\n\nwidth             The actual width of the column as displayed.\n\nfixed_width       The requested fixed width for the column iff it's\n\t\t    sizing type is set to GTK_TREE_VIEW_COLUMN_FIXED.\n\t\t    Used instead of requested_width in that case.\n\nmin_width\t    The minimum width the column can be.  If set to -1,\n\t\t    this field is considered unset.\n\nmax_width\t    The maximum width the column can be.  This can be\n\t\t    overridden for the last column, if the tree_view is\n\t\t    actually wider than the sum of all of the columns\n\t\t    requested_widths.  If set to -1, this field is\n\t\t    considered unset.\n\n\nuse_resized_width Use resized_width to determine the size.\n```\n\n----------------------------------------\n\nTITLE: Compiling with GTK 4.2 maximum version allowed\nDESCRIPTION: This command demonstrates how to compile a GTK program specifying a maximum GTK version of 4.2, preventing the use of symbols introduced after 4.2.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/compiling.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cc `pkg-config --cflags gtk4` -DGDK_VERSION_MAX_ALLOWED=GDK_VERSION_4_2 hello.c -o hello `pkg-config --libs gtk4`\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Size Request Functions\nDESCRIPTION: Documentation for gtk_widget_set_size_request() function behavior, covering size request handling, toplevel window impacts, and dimension parameters.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/sizing-test.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngtk_widget_set_size_request():\n - causes the widget to request the given size\n - for toplevel windows, changes the default-requested size if \n   no default size is set and gtk_window_resize() has not been called\n - passing -1 for either width or height reverts to \"natural\" request\n   in that dimension\n - passing 0 is allowed, and results in requisition of 1x1 \n - causes notifies on width_request, height_request properties\n```\n\n----------------------------------------\n\nTITLE: Running GTK Applications with Broadway Backend\nDESCRIPTION: Sets environment variables to direct a GTK application (gtk4-demo) to use the Broadway backend on display 5.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-broadwayd.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGDK_BACKEND=broadway BROADWAY_DISPLAY=:5 gtk4-demo\n```\n\n----------------------------------------\n\nTITLE: Rounded Rectangle Syntax in GSK Node Format\nDESCRIPTION: Defines the CSS-like syntax for rounded rectangles, specifying both the rectangle dimensions and corner radii.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\nrounded-rect: <rect> [ \"/\" <number>{1,4} [ \"/\" <number>{1,4} ] ]\n```\n\n----------------------------------------\n\nTITLE: Recoloring Images in GTK CSS\nDESCRIPTION: Demonstrates the syntax for recoloring images that are not part of an icon theme using GTK's CSS extension.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-properties.md#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n-gtk-recolor(uri, palette)\n```\n\n----------------------------------------\n\nTITLE: Setting GDK OpenGL Disable Options\nDESCRIPTION: Environment variable that controls which OpenGL extension features should be disabled in GDK, such as debug, unpack-subimage, half-float, sync, and base-instance.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nGDK_GL_DISABLE=\"debug unpack-subimage half-float sync base-instance\"\n```\n\n----------------------------------------\n\nTITLE: GTK Class Documentation Example\nDESCRIPTION: Shows the standard format for documenting GTK classes using markdown-style documentation\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n  /**\n   * GtkSizeRequest:\n   *\n   * The GtkSizeRequest interface is GTK's height-for-width geometry\n   * geometry management system.\n   *\n   * # Geometry management\n   *\n   * ...\n   */\n```\n\n----------------------------------------\n\nTITLE: GTK Window Size and Position Queries\nDESCRIPTION: Documentation for functions that retrieve window size and position information.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/sizing-test.txt#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngtk_window_get_size():\n - obtains the client-side known size of widget->window, \n   as last received from a configure event\n - prior to mapping, returns the default size we will request\n - between realization and mapping, computes default size \n   rather than looking at widget->window up-to-date size\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax for gtk4-path-tool\nDESCRIPTION: Shows the basic command syntax for the gtk4-path-tool utility, which works with path data in SVG format. The tool accepts various commands like decompose, show, render, reverse, and info, along with options specific to each command.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-path-tool.rst#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n**gtk4-path-tool** <COMMAND> [OPTIONS...] <PATH>\n\n**gtk4-path-tool** decompose [OPTIONS...] <PATH>\n**gtk4-path-tool** show [OPTIONS...] <PATH>\n**gtk4-path-tool** render [OPTIONS...] <PATH>\n**gtk4-path-tool** reverse [OPTIONS...] <PATH>\n**gtk4-path-tool** info [OPTIONS...] <PATH>\n```\n\n----------------------------------------\n\nTITLE: Rectangle Definition Syntax in GSK Node Format\nDESCRIPTION: Specifies the syntax for defining rectangles and rounded rectangles in the node format using x, y, width, height parameters and optional radius values.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\nrect: <number> <number> <number> <number>\n```\n\n----------------------------------------\n\nTITLE: Defining Colors with @define-color in GTK CSS\nDESCRIPTION: Shows the syntax for defining named colors using @define-color in GTK CSS. This is a GTK-specific extension that is now deprecated.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/css-properties.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@define-color name color\n```\n\n----------------------------------------\n\nTITLE: GTK Window Default Size Management\nDESCRIPTION: Documentation for window default size functions including setting, getting, and behavior constraints.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/sizing-test.txt#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngtk_window_set_default_size():\n - has no effect after the window has been mapped the first time, \n   unless the window has been unrealized in which case it should \n   have an effect\n - allows size of 0, equivalent to 1\n - allows size of -1 to unset the default size\n - clamped to geometry hints\n - causes notifies on default_width, default_height properties\n```\n\n----------------------------------------\n\nTITLE: GTK Callback Type Definition\nDESCRIPTION: Standard pattern for declaring callback function types in GTK\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n  typedef void (* GtkCallback) (GtkWidget *widget,\n                                gpointer   user_data);\n```\n\n----------------------------------------\n\nTITLE: Widget Action Activation Functions in C\nDESCRIPTION: Function declarations for activating widget actions with different parameter types. Includes methods for both string format and variant-based activation.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_17\n\nLANGUAGE: C\nCODE:\n```\ngboolean                gtk_widget_activate_action      (GtkWidget  *widget,\n                                                         const char *name,\n                                                         const char *format_string,\n                                                         ...);\n\ngboolean                gtk_widget_activate_action_variant (GtkWidget  *widget,\n                                                            const char *name,\n                                                            GVariant   *args);\n\nvoid                    gtk_widget_activate_default     (GtkWidget *widget);\n```\n\n----------------------------------------\n\nTITLE: Using gtk4-image-tool Command Syntax\nDESCRIPTION: The basic syntax for using the gtk4-image-tool utility with various subcommands and options.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-image-tool.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-image-tool <COMMAND> [OPTIONS...] <FILE>...\n\ngtk4-image-tool compare [OPTIONS...] <FILE1> <FILE2>\ngtk4-image-tool convert [OPTIONS...] <FILE1> <FILE2>\ngtk4-image-tool info [OPTIONS...] <FILE>\ngtk4-image-tool relabel [OPTIONS...] <FILE1> <FILE2>\ngtk4-image-tool show [OPTIONS...] <FILE>...\n```\n\n----------------------------------------\n\nTITLE: Traditional RGB Color Syntax in GSK Node Format\nDESCRIPTION: Shows the traditional RGB/RGBA color syntax supported by the format alongside the modern color state approach.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\nrgba(<number>, <number>, <number>, <number>)\nrgb(<number, <number>, <number>)\n```\n\n----------------------------------------\n\nTITLE: Defining Cross Fade Node Properties in GTK\nDESCRIPTION: Specifies the properties for a cross fade node, including end, progress, and start. The node is created using gsk_cross_fade_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| end      | `<node>`         | color { }              | always      |\n| progress | `<number>`       | 0.5                    | non-default |\n| start    | `<node>`         | color { }              | always      |\n```\n\n----------------------------------------\n\nTITLE: Defining Repeating Radial Gradient Node Properties in GTK\nDESCRIPTION: Specifies the properties for a repeating radial gradient node, including bounds, center, hradius, vradius, start, end, and stops. The node is created using gsk_repeating_radial_gradient_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| bounds   | `<rect>`         | 50                     | always      |\n| center   | `<point>`        | 25 25                  | always      |\n| hradius  | `<number>`       | 25                     | always      |\n| vradius  | `<number>`       | 25                     | always      |\n| start    | `<number>`       | 0                      | always      |\n| end      | `<number>`       | 1                      | always      |\n| stops    | `<color-stop>`   | 0 #AF0, 1 #F0C         | always      |\n```\n\n----------------------------------------\n\nTITLE: GTK Keyboard Symbol Mappings\nDESCRIPTION: Maps hexadecimal codes to keyboard symbol names, including international characters, function keys, and special symbols. Used for keyboard input handling in GTK.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_2\n\nLANGUAGE: config\nCODE:\n```\n0x000ef6 Hangul_AraeA\n0x000ef7 Hangul_AraeAE\n0x000ef8 Hangul_J_PanSios\n0x000ef9 Hangul_J_KkogjiDalrinIeung\n0x000efa Hangul_J_YeorinHieuh\n0x000eff Korean_Won\n...0x1000556 Armenian_FE\n```\n\n----------------------------------------\n\nTITLE: Declaring GTK Widget Focus and Activation Functions in C\nDESCRIPTION: This snippet declares GTK widget functions related to focus management, activation, and targeting. It includes functions like gtk_widget_set_can_focus, gtk_widget_grab_focus, and gtk_widget_set_receives_default.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_mnemonic_activate   (GtkWidget           *widget,\n                                           gboolean             group_cycling);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_activate               (GtkWidget        *widget);\n\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_set_can_focus       (GtkWidget           *widget,\n                                           gboolean             can_focus);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_get_can_focus       (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_set_focusable       (GtkWidget           *widget,\n                                           gboolean             focusable);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_get_focusable       (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_has_focus           (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_is_focus            (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_has_visible_focus   (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_grab_focus          (GtkWidget           *widget);\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_set_focus_on_click  (GtkWidget           *widget,\n                                           gboolean             focus_on_click);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_get_focus_on_click  (GtkWidget           *widget);\n\nGDK_AVAILABLE_IN_ALL\nvoid       gtk_widget_set_can_target      (GtkWidget           *widget,\n                                           gboolean             can_target);\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_get_can_target      (GtkWidget           *widget);\n\nGDK_AVAILABLE_IN_ALL\ngboolean   gtk_widget_has_default         (GtkWidget           *widget);\n\nGDK_AVAILABLE_IN_ALL\nvoid      gtk_widget_set_receives_default (GtkWidget           *widget,\n                                           gboolean             receives_default);\nGDK_AVAILABLE_IN_ALL\ngboolean  gtk_widget_get_receives_default (GtkWidget           *widget);\n```\n\n----------------------------------------\n\nTITLE: Converting Emoji Data to GVariant Format for GTK (Bash)\nDESCRIPTION: This command uses the convert-emoji tool to transform Emoji data from a JSON file into a GVariant format that GTK can use. The example shown is for converting German Emoji data.\nSOURCE: https://github.com/gnome/gtk/blob/main/gtk/emoji/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconvert-emoji $emojibase/packages/data/de/data.raw.json de.data\n```\n\n----------------------------------------\n\nTITLE: Specifying Hint Metrics Values for Text Nodes in GTK\nDESCRIPTION: Defines the possible values for the hint-metrics property in a text node. This property controls whether font metrics are hinted when rendering text.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_26\n\nLANGUAGE: css\nCODE:\n```\nhint-metrics:  on | off\n```\n\n----------------------------------------\n\nTITLE: Defining Radial Gradient Node Properties in GTK\nDESCRIPTION: Specifies the properties for a radial gradient node, including bounds, center, hradius, vradius, start, end, stops, interpolation, and hue-interpolation. The node is created using gsk_radial_gradient_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| property          | syntax          | default        | printed     |\n| ----------------- | --------------- | -------------- | ----------- |\n| bounds            | `<rect>`        | 50             | always      |\n| center            | `<point>`       | 25 25          | always      |\n| hradius           | `<number>`      | 25             | always      |\n| vradius           | `<number>`      | 25             | always      |\n| start             | `<number>`      | 0              | always      |\n| end               | `<number>`      | 1              | always      |\n| stops             | `<color-stop>`  | 0 #AF0, 1 #F0C | always      |\n| interpolation     | `<color-state>` | srgb           | non-default |\n| hue-interpolation | `<hue-interp>`  | shorter        | non-default |\n```\n\n----------------------------------------\n\nTITLE: Defining Color Node Properties in GTK\nDESCRIPTION: Specifies the properties for a color node, including bounds and color. The color node is created using gsk_color_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| bounds   | `<rect>`         | 50                     | always      |\n| color    | `<color>`        | #FF00CC                | always      |\n```\n\n----------------------------------------\n\nTITLE: Building GTK Using Meson\nDESCRIPTION: Commands to build GTK from source using Meson build system and compile the project\nSOURCE: https://github.com/gnome/gtk/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ meson setup _build\n$ meson compile -C_build\n```\n\n----------------------------------------\n\nTITLE: Styling Widget Gallery Layout with CSS\nDESCRIPTION: CSS styling rule to create a flexible row-based layout for paragraphs, enabling wrapped content display.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/visual_index.md#2025-04-18_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\np { display: flex; flex-flow: row wrap; }\n```\n\n----------------------------------------\n\nTITLE: Defining Mathematical Symbols in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for various mathematical symbols in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n0x1002202 partdifferential\n0x1002205 emptyset\n0x1002208 elementof\n0x1002209 notelementof\n0x100220b containsas\n0x100221a squareroot\n0x100221b cuberoot\n0x100221c fourthroot\n0x100222c dintegral\n0x100222d tintegral\n0x1002235 because\n0x1002247 notapproxeq\n0x1002248 approxeq\n0x1002262 notidentical\n0x1002263 stricteq\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Class Definition in C\nDESCRIPTION: Complete widget class structure containing virtual functions for core widget operations like show/hide, map/unmap, size allocation, and event handling.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nstruct _GtkWidgetClass\n{\n  GInitiallyUnownedClass parent_class;\n\n  /*< public >*/\n\n  /* basics */\n  void (* show)                (GtkWidget        *widget);\n  void (* hide)                (GtkWidget        *widget);\n  void (* map)                 (GtkWidget        *widget);\n  void (* unmap)               (GtkWidget        *widget);\n  void (* realize)             (GtkWidget        *widget);\n  void (* unrealize)           (GtkWidget        *widget);\n  void (* root)                (GtkWidget        *widget);\n  void (* unroot)              (GtkWidget        *widget);\n  void (* size_allocate)       (GtkWidget           *widget,\n                                int                  width,\n                                int                  height,\n                                int                  baseline);\n  void (* state_flags_changed) (GtkWidget        *widget,\n                                GtkStateFlags     previous_state_flags);\n  void (* direction_changed)   (GtkWidget        *widget,\n                                GtkTextDirection  previous_direction);\n\n  /* size requests */\n  GtkSizeRequestMode (* get_request_mode)               (GtkWidget      *widget);\n  void              (* measure) (GtkWidget      *widget,\n                                 GtkOrientation  orientation,\n                                 int             for_size,\n                                 int            *minimum,\n                                 int            *natural,\n                                 int            *minimum_baseline,\n                                 int            *natural_baseline);\n```\n\n----------------------------------------\n\nTITLE: Defining Repeat Node Properties in GTK\nDESCRIPTION: Specifies the properties for a repeat node, including bounds, child, and child-bounds. The node is created using gsk_repeat_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| property     | syntax     | default                | printed     |\n| ------------ | ---------- | ---------------------- | ----------- |\n| bounds       | `<rect>`   | *bounds of child node* | non-default |\n| child        | `<node>`   | color { }              | always      |\n| child-bounds | `<rect>`   | *bounds of child node* | non-default |\n```\n\n----------------------------------------\n\nTITLE: Defining Repeating Linear Gradient Node Properties in GTK\nDESCRIPTION: Specifies the properties for a repeating linear gradient node, including bounds, start, end, and stops. The node is created using gsk_repeating_linear_gradient_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| bounds   | `<rect>`         | 50                     | always      |\n| start    | `<point>`        | 0 0                    | always      |\n| end      | `<point>`        | 0 50                   | always      |\n| stops    | `<color-stop>`   | 0 #AF0, 1 #F0C         | always      |\n```\n\n----------------------------------------\n\nTITLE: Defining Conic Gradient Node Properties in GTK\nDESCRIPTION: Specifies the properties for a conic gradient node, including bounds, center, rotation, stops, interpolation, and hue-interpolation. The node is created using gsk_conic_gradient_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| property          | syntax          | default        | printed     |\n| ----------------- | --------------- | -------------- | ----------- |\n| bounds            | `<rect>`        | 50             | always      |\n| center            | `<point>`       | 25, 25         | always      |\n| rotation          | `<number>`      | 0              | always      |\n| stops             | `<color-stop>`  | 0 #AF0, 1 #F0C | always      |\n| interpolation     | `<color-state>` | srgb           | non-default |\n| hue-interpolation | `<hue-interp>`  | shorter        | non-default |\n```\n\n----------------------------------------\n\nTITLE: GTK Text Color and Background Markup\nDESCRIPTION: Examples of text color and background color manipulation using color and background attributes.\nSOURCE: https://github.com/gnome/gtk/blob/main/demos/gtk-demo/markup.txt#2025-04-18_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\nText <span color=\"gray\">c<span color=\"green\">o</span>l<span color=\"tomato\">o</span>rs</span> and <span background=\"pink\">backgrounds</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Armenian Keycodes in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for Armenian characters and punctuation marks in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n0x100055a Armenian_apostrophe\n0x100055b Armenian_accent\n0x100055b Armenian_shesht\n0x100055c Armenian_amanak\n0x100055c Armenian_exclam\n0x100055d Armenian_but\n0x100055d Armenian_separation_mark\n0x100055e Armenian_paruyk\n0x100055e Armenian_question\n0x1000561 Armenian_ayb\n0x1000562 Armenian_ben\n0x1000563 Armenian_gim\n0x1000564 Armenian_da\n0x1000565 Armenian_yech\n0x1000566 Armenian_za\n0x1000567 Armenian_e\n0x1000568 Armenian_at\n0x1000569 Armenian_to\n0x100056a Armenian_zhe\n0x100056b Armenian_ini\n0x100056c Armenian_lyun\n0x100056d Armenian_khe\n0x100056e Armenian_tsa\n0x100056f Armenian_ken\n0x1000570 Armenian_ho\n0x1000571 Armenian_dza\n0x1000572 Armenian_ghat\n0x1000573 Armenian_tche\n0x1000574 Armenian_men\n0x1000575 Armenian_hi\n0x1000576 Armenian_nu\n0x1000577 Armenian_sha\n0x1000578 Armenian_vo\n0x1000579 Armenian_cha\n0x100057a Armenian_pe\n0x100057b Armenian_je\n0x100057c Armenian_ra\n0x100057d Armenian_se\n0x100057e Armenian_vev\n0x100057f Armenian_tyun\n0x1000580 Armenian_re\n0x1000581 Armenian_tso\n0x1000582 Armenian_vyun\n0x1000583 Armenian_pyur\n0x1000584 Armenian_ke\n0x1000585 Armenian_o\n0x1000586 Armenian_fe\n0x1000587 Armenian_ligature_ew\n0x1000589 Armenian_full_stop\n0x1000589 Armenian_verjaket\n0x100058a Armenian_hyphen\n0x100058a Armenian_yentamna\n```\n\n----------------------------------------\n\nTITLE: GTK Widget Template Management Functions\nDESCRIPTION: Function declarations for managing widget templates including initialization, child access, and template setting from resources.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nGDK_AVAILABLE_IN_ALL\nvoid    gtk_widget_init_template(GtkWidget *widget);\nGDK_AVAILABLE_IN_ALL\nGObject *gtk_widget_get_template_child(GtkWidget *widget,\n                                         GType widget_type,\n                                         const char *name);\nGDK_AVAILABLE_IN_ALL\nvoid    gtk_widget_class_set_template(GtkWidgetClass *widget_class,\n                                         GBytes *template_bytes);\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Hashing Function in C\nDESCRIPTION: This function calculates a hash value for an icon name string. It's used for the hash table in the icon theme cache format. The hash function should not be implemented by directly calling g_str_hash(), and for optimal results, the number of buckets should typically be prime.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/iconcache.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nunsigned int\nicon_str_hash (gconstpointer key)\n{\n  const char *p = key;\n  unsigned int h = *p;\n\n  if (h)\n    for (p += 1; *p != '\\0'; p++)\n      h = (h << 5) - h + *p;\n\n  return h;\n}\n```\n\n----------------------------------------\n\nTITLE: GTK Text Weight Markup Examples\nDESCRIPTION: Examples of text weight control from thin to ultraheavy using span tags with weight attributes.\nSOURCE: https://github.com/gnome/gtk/blob/main/demos/gtk-demo/markup.txt#2025-04-18_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n<span weight=\"thin\">thin</span> <span weight=\"light\">light</span> <span weight=\"normal\">normal</span> <span weight=\"bold\">bold</span> <span weight=\"ultraheavy\">ultraheavy</span>\n```\n\n----------------------------------------\n\nTITLE: Building and Installing GTK\nDESCRIPTION: Commands to compile and install GTK after configuration. These commands build the project and install it to the configured prefix directory.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeson compile -Cbuilddir\nmeson install -Cbuilddir\n```\n\n----------------------------------------\n\nTITLE: GTK Complex Text Formatting\nDESCRIPTION: Advanced examples of text formatting including superscripts, subscripts, letterspacing and OpenType features.\nSOURCE: https://github.com/gnome/gtk/blob/main/demos/gtk-demo/markup.txt#2025-04-18_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\nSuperscripts and subscripts: 𝜀<span rise=\"-6000\" size=\"x-small\" font_desc=\"italic\">0</span> = 𝜔<span rise=\"8000\" size=\"smaller\">𝜔<span rise=\"14000\" size=\"smaller\">𝜔<span rise=\"20000\">.<span rise=\"23000\">.<span rise=\"26000\">.</span></span></span></span></span>\n```\n\n----------------------------------------\n\nTITLE: Widget Font Management Functions in C\nDESCRIPTION: Functions for handling widget font maps, allowing setting and retrieving PangoFontMap instances for widgets.\nSOURCE: https://github.com/gnome/gtk/blob/main/testsuite/gdk/clipboard-data/test.txt#2025-04-18_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid                    gtk_widget_set_font_map         (GtkWidget             *widget,\n                                                         PangoFontMap          *font_map);\n\nPangoFontMap *          gtk_widget_get_font_map         (GtkWidget             *widget);\n```\n\n----------------------------------------\n\nTITLE: Windows Cursor Theme Paths\nDESCRIPTION: XDG-style file paths where GTK looks for cursor themes on Windows systems.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/windows.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n%HOME%/icons/THEME/cursors\\n%APPDATA%/icons/THEME/cursors\\nRUNTIME_PREFIX/share/icons/THEME/cursors\n```\n\n----------------------------------------\n\nTITLE: Specifying Hint Style Values for Text Nodes in GTK\nDESCRIPTION: Defines the possible values for the hint-style property in a text node. This property controls how font hinting is applied when rendering text.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_24\n\nLANGUAGE: css\nCODE:\n```\nhint-style: none | slight | full\n```\n\n----------------------------------------\n\nTITLE: GTK Public API C++ Guards\nDESCRIPTION: Standard C++ compatibility guards for public GTK APIs with availability macros\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n  G_BEGIN_DECLS\n\n  GDK_AVAILABLE_IN_ALL\n  GType         gtk_foo_get_type        (void) G_GNUC_CONST;\n\n  GDK_AVAILABLE_IN_ALL\n  GtkWidget *   gtk_foo_new             (void);\n\n  ...\n\n  G_END_DECLS\n```\n\n----------------------------------------\n\nTITLE: Defining GLShader Node Properties in GTK\nDESCRIPTION: Specifies the properties for a GLShader node, including bounds, sourcecode, args, and child nodes. The node creates a GLShader with the given properties and GLSL fragment shader.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| property   | syntax             | default                | printed     |\n| ---------- | ------------------ | ---------------------- | ----------- |\n| bounds     | `<rect>`           | 50                     | always      |\n| sourcecode | `<string>`         | \"\"                     | always      |\n| args       | `<uniform values>` | none                   | non-default |\n| child1     | `<node>`           | none                   | non-default |\n| child2     | `<node>`           | none                   | non-default |\n| child3     | `<node>`           | none                   | non-default |\n| child4     | `<node>`           | none                   | non-default |\n```\n\n----------------------------------------\n\nTITLE: Accessing GtkTreeView Vertical Offset Fields in C\nDESCRIPTION: This snippet outlines the key fields used for calculating and maintaining the vertical offset in GtkTreeView. It includes the current offset (dy), the top row, and the top row's offset. These fields are used to handle changes in the tree structure and update the display accordingly.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/tree-column-sizing.txt#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\ntree_view->priv->dy\n\ntree_view->priv->top_row\ntree_view->priv->top_row_dy\n```\n\n----------------------------------------\n\nTITLE: GTK Theme Component Class Names\nDESCRIPTION: Standardized class names used in GTK theming for text selection controls and slider elements. Includes variations for different states (normal, hover, active, insensitive), orientations (horizontal, vertical), and theme variants (light/dark).\nSOURCE: https://github.com/gnome/gtk/blob/main/gtk/theme/Default/assets.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntext-select-end\ntext-select-end-hover\ntext-select-end-active\ntext-select-start\ntext-select-start-hover\ntext-select-start-active\ntext-select-end-dark\ntext-select-end-hover-dark\ntext-select-end-active-dark\ntext-select-start-dark\ntext-select-start-hover-dark\ntext-select-start-active-dark\nslider-horz-scale-has-marks-below\nslider-horz-scale-has-marks-below-hover\nslider-horz-scale-has-marks-below-active\nslider-horz-scale-has-marks-below-insensitive\nslider-vert-scale-has-marks-below\nslider-vert-scale-has-marks-below-hover\nslider-vert-scale-has-marks-below-active\nslider-vert-scale-has-marks-below-insensitive\nslider-horz-scale-has-marks-above\nslider-horz-scale-has-marks-above-hover\nslider-horz-scale-has-marks-above-active\nslider-horz-scale-has-marks-above-insensitive\nslider-vert-scale-has-marks-above\nslider-vert-scale-has-marks-above-hover\nslider-vert-scale-has-marks-above-active\nslider-vert-scale-has-marks-above-insensitive\nslider-horz-scale-has-marks-below-dark\nslider-horz-scale-has-marks-below-hover-dark\nslider-horz-scale-has-marks-below-active-dark\nslider-horz-scale-has-marks-below-insensitive-dark\nslider-vert-scale-has-marks-below-dark\nslider-vert-scale-has-marks-below-hover-dark\nslider-vert-scale-has-marks-below-active-dark\nslider-vert-scale-has-marks-below-insensitive-dark\nslider-horz-scale-has-marks-above-dark\nslider-horz-scale-has-marks-above-hover-dark\nslider-horz-scale-has-marks-above-active-dark\nslider-horz-scale-has-marks-above-insensitive-dark\nslider-vert-scale-has-marks-above-dark\nslider-vert-scale-has-marks-above-hover-dark\nslider-vert-scale-has-marks-above-active-dark\nslider-vert-scale-has-marks-above-insensitive-dark\n```\n\n----------------------------------------\n\nTITLE: Disabling Deprecation Warnings in GDK/GTK (C)\nDESCRIPTION: Defines a macro to disable deprecation warnings before including the gdk.h header. This allows the use of deprecated APIs without compiler warnings.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/general.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define GDK_DISABLE_DEPRECATION_WARNINGS\n#include <gdk.h>\n```\n\n----------------------------------------\n\nTITLE: Building GTK from Source with Meson\nDESCRIPTION: Commands for configuring and compiling the GTK source code using the Meson build system and Ninja.\nSOURCE: https://github.com/gnome/gtk/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ meson setup _builddir .\n$ meson compile -C _builddir\n```\n\n----------------------------------------\n\nTITLE: Defining Mask Node Properties in GTK\nDESCRIPTION: Specifies the properties for a mask node, including source, mode, and mask. The node is created using gsk_mask_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| source   | `<node>`         | color { }              | always      |\n| mode     | `<mask-mode>`    | alpha                  | non-default |\n| mask     | `<node>`         | color { }              | always      |\n```\n\n----------------------------------------\n\nTITLE: Defining Outset Shadow Node Properties in GTK\nDESCRIPTION: Specifies the properties for an outset shadow node, including blur, color, dx, dy, outline, and spread. The node is created using gsk_outset_shadow_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| blur     | `<number>`       | 0                      | non-default |\n| color    | `<color>`        | black                  | non-default |\n| dx       | `<number>`       | 1                      | non-default |\n| dy       | `<number>`       | 1                      | non-default |\n| outline  | `<rounded-rect>` | 50                     | always      |\n| spread   | `<number>`       | 0                      | non-default |\n```\n\n----------------------------------------\n\nTITLE: Windows Tablet Input API Options\nDESCRIPTION: Environment variable values for GDK_WIN32_TABLET_INPUT_API that control tablet support in GTK on Windows.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/windows.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnone\\nwintab\\nwinpointer\n```\n\n----------------------------------------\n\nTITLE: Command Line Syntax for gtk4-node-editor\nDESCRIPTION: Shows the basic command line syntax for running the gtk4-node-editor utility with optional parameters and file input.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-node-editor.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-node-editor [OPTIONS...] [FILE]\n```\n\n----------------------------------------\n\nTITLE: Graphics and Media Support Options in GTK\nDESCRIPTION: Build options for graphics APIs (Vulkan) and media playback support through GStreamer backend. These can be explicitly controlled during build configuration.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nvulkan\nmedia-gstreamer\n```\n\n----------------------------------------\n\nTITLE: Defining Opacity Node Properties in GTK\nDESCRIPTION: Specifies the properties for an opacity node, including child and opacity. The node is created using gsk_transform_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| child    | `<node>`         | color { }              | always      |\n| opacity  | `<number>`       | 0.5                    | non-default |\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Node Properties in GTK\nDESCRIPTION: Specifies the properties for a debug node, including child and message. The node is created using gsk_debug_node_new() with the given properties.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| property | syntax           | default                | printed     |\n| -------- | ---------------- | ---------------------- | ----------- |\n| child    | `<node>`         | color { }              | always      |\n| message  | `<string>`       | \"\"                     | non-default |\n```\n\n----------------------------------------\n\nTITLE: Running gtk4-encode-symbolic-svg Command in Bash\nDESCRIPTION: This command demonstrates the basic usage of gtk4-encode-symbolic-svg. It converts a symbolic SVG file to a specially prepared PNG file with specified dimensions. The utility supports additional options for output directory and debugging.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-encode-symbolic-svg.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-encode-symbolic-svg [OPTIONS...] <PATH> <WIDTH>x<HEIGHT>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Tab Character Usage in C\nDESCRIPTION: Demonstrates the correct interpretation of tab characters in C code, where tabs should advance to the next column which is a multiple of 8.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\tAdvance to the next column which is a multiple of 8.\n        [ these two lines should be aligned ]\n```\n\n----------------------------------------\n\nTITLE: Print Backend Configuration Options\nDESCRIPTION: Options to control the building of CUPS and file print backends based on dependency availability.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nprint-cups, print-cpdb\n```\n\n----------------------------------------\n\nTITLE: GTK Header Function Alignment Pattern\nDESCRIPTION: Shows the standard vertical alignment pattern for function definitions in GTK headers with three columns: return value, function name, and parameters\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n  return value          function_name           (type   argument,\n                                                 type   argument,\n                                                 type   argument);\n```\n\n----------------------------------------\n\nTITLE: Specifying Antialiasing Values for Text Nodes in GTK\nDESCRIPTION: Shows the possible values for the antialias property in a text node. This property determines the antialiasing method used when rendering text.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_25\n\nLANGUAGE: css\nCODE:\n```\nantialias:  none | gray\n```\n\n----------------------------------------\n\nTITLE: Legacy Consumed Modifiers Handling in GTK\nDESCRIPTION: Demonstrates an older, deprecated approach to handling consumed modifiers in GTK. This example shows why the older interpretation of consumed modifiers was problematic with multi-modifier combinations.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/keys.md#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// XXX Don't do this XXX\nif (keyval == accel_keyval &&\n    (state & ~consumed & ALL_ACCELS_MASK) == (accel_mods & ~consumed))\n  // Accelerator was pressed\n```\n\n----------------------------------------\n\nTITLE: Defining Special Key Functions for GTK\nDESCRIPTION: This snippet lists hexadecimal mappings for various special keyboard functions, including virtual terminal switching, system controls, and multimedia keys. Each line pairs a hexadecimal code with its corresponding function name.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n0x1008fe01 Switch_VT_1\n0x1008fe02 Switch_VT_2\n0x1008fe03 Switch_VT_3\n0x1008fe04 Switch_VT_4\n0x1008fe05 Switch_VT_5\n0x1008fe06 Switch_VT_6\n0x1008fe07 Switch_VT_7\n0x1008fe08 Switch_VT_8\n0x1008fe09 Switch_VT_9\n0x1008fe0a Switch_VT_10\n0x1008fe0b Switch_VT_11\n0x1008fe0c Switch_VT_12\n0x1008fe20 Ungrab\n0x1008fe21 ClearGrab\n0x1008fe22 Next_VMode\n0x1008fe23 Prev_VMode\n0x1008fe24 LogWindowTree\n0x1008fe25 LogGrabInfo\n0x1008ff01 ModeLock\n0x1008ff02 MonBrightnessUp\n0x1008ff03 MonBrightnessDown\n0x1008ff04 KbdLightOnOff\n0x1008ff05 KbdBrightnessUp\n0x1008ff06 KbdBrightnessDown\n0x1008ff10 Standby\n0x1008ff11 AudioLowerVolume\n0x1008ff12 AudioMute\n0x1008ff13 AudioRaiseVolume\n0x1008ff14 AudioPlay\n0x1008ff15 AudioStop\n0x1008ff16 AudioPrev\n0x1008ff17 AudioNext\n0x1008ff18 HomePage\n0x1008ff19 Mail\n0x1008ff1a Start\n0x1008ff1b Search\n0x1008ff1c AudioRecord\n0x1008ff1d Calculator\n0x1008ff1e Memo\n0x1008ff1f ToDoList\n0x1008ff20 Calendar\n0x1008ff21 PowerDown\n0x1008ff22 ContrastAdjust\n0x1008ff23 RockerUp\n0x1008ff24 RockerDown\n0x1008ff25 RockerEnter\n0x1008ff26 Back\n0x1008ff27 Forward\n0x1008ff28 Stop\n0x1008ff29 Refresh\n0x1008ff2a PowerOff\n0x1008ff2b WakeUp\n0x1008ff2c Eject\n0x1008ff2d ScreenSaver\n0x1008ff2e WWW\n0x1008ff2f Sleep\n0x1008ff30 Favorites\n0x1008ff31 AudioPause\n0x1008ff32 AudioMedia\n0x1008ff33 MyComputer\n0x1008ff34 VendorHome\n0x1008ff35 LightBulb\n0x1008ff36 Shop\n0x1008ff37 History\n0x1008ff38 OpenURL\n0x1008ff39 AddFavorite\n0x1008ff3a HotLinks\n0x1008ff3b BrightnessAdjust\n0x1008ff3c Finance\n0x1008ff3d Community\n0x1008ff3e AudioRewind\n0x1008ff3f BackForward\n0x1008ff40 Launch0\n0x1008ff41 Launch1\n0x1008ff42 Launch2\n0x1008ff43 Launch3\n0x1008ff44 Launch4\n0x1008ff45 Launch5\n0x1008ff46 Launch6\n0x1008ff47 Launch7\n0x1008ff48 Launch8\n0x1008ff49 Launch9\n0x1008ff4a LaunchA\n0x1008ff4b LaunchB\n0x1008ff4c LaunchC\n0x1008ff4d LaunchD\n0x1008ff4e LaunchE\n0x1008ff4f LaunchF\n0x1008ff50 ApplicationLeft\n0x1008ff51 ApplicationRight\n0x1008ff52 Book\n0x1008ff53 CD\n0x1008ff55 WindowClear\n0x1008ff56 Close\n0x1008ff57 Copy\n0x1008ff58 Cut\n0x1008ff59 Display\n0x1008ff5a DOS\n0x1008ff5b Documents\n0x1008ff5c Excel\n0x1008ff5d Explorer\n0x1008ff5e Game\n0x1008ff5f Go\n0x1008ff60 iTouch\n0x1008ff61 LogOff\n0x1008ff62 Market\n0x1008ff63 Meeting\n0x1008ff65 MenuKB\n0x1008ff66 MenuPB\n0x1008ff67 MySites\n0x1008ff68 New\n0x1008ff69 News\n0x1008ff6a OfficeHome\n0x1008ff6b Open\n0x1008ff6c Option\n0x1008ff6d Paste\n0x1008ff6e Phone\n0x1008ff72 Reply\n0x1008ff73 Reload\n0x1008ff74 RotateWindows\n0x1008ff75 RotationPB\n0x1008ff76 RotationKB\n0x1008ff77 Save\n0x1008ff78 ScrollUp\n0x1008ff79 ScrollDown\n0x1008ff7a ScrollClick\n0x1008ff7b Send\n0x1008ff7c Spell\n0x1008ff7d SplitScreen\n0x1008ff7e Support\n0x1008ff7f TaskPane\n0x1008ff80 Terminal\n0x1008ff81 Tools\n0x1008ff82 Travel\n0x1008ff84 UserPB\n0x1008ff85 User1KB\n0x1008ff86 User2KB\n0x1008ff87 Video\n0x1008ff88 WheelButton\n0x1008ff89 Word\n0x1008ff8a Xfer\n0x1008ff8b ZoomIn\n0x1008ff8c ZoomOut\n0x1008ff8d Away\n0x1008ff8e Messenger\n0x1008ff8f WebCam\n0x1008ff90 MailForward\n0x1008ff91 Pictures\n0x1008ff92 Music\n0x1008ff93 Battery\n0x1008ff94 Bluetooth\n0x1008ff95 WLAN\n0x1008ff96 UWB\n0x1008ff97 AudioForward\n0x1008ff98 AudioRepeat\n0x1008ff99 AudioRandomPlay\n0x1008ff9a Subtitle\n0x1008ff9b AudioCycleTrack\n0x1008ff9c CycleAngle\n0x1008ff9d FrameBack\n0x1008ff9e FrameForward\n0x1008ff9f Time\n0x1008ffa0 SelectButton\n0x1008ffa1 View\n0x1008ffa2 TopMenu\n0x1008ffa3 Red\n0x1008ffa4 Green\n0x1008ffa5 Yellow\n0x1008ffa6 Blue\n0x1008ffa7 Suspend\n0x1008ffa8 Hibernate\n0x1008ffa9 TouchpadToggle\n0x1008ffb0 TouchpadOn\n0x1008ffb1 TouchpadOff\n0x1008ffb2 AudioMicMute\n0xffffff VoidSymbol\n```\n\n----------------------------------------\n\nTITLE: Development and Testing Build Options\nDESCRIPTION: Configuration options for building test suites, examples, and demos. These are useful for development but can be disabled for production builds.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/building.md#2025-04-18_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild-testsuite\nbuild-tests, build-examples, build-demos\n```\n\n----------------------------------------\n\nTITLE: Specifying Line Join Values for Stroke Nodes in GTK\nDESCRIPTION: Shows the possible values for the line-join property in a stroke node. These values determine how line segments are joined together in the stroke operation.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/node-format.md#2025-04-18_snippet_23\n\nLANGUAGE: css\nCODE:\n```\nline-join: miter | round | bevel\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git\nDESCRIPTION: Command for creating and switching to a new Git branch for development work.\nSOURCE: https://github.com/gnome/gtk/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git switch -C your-branch\n```\n\n----------------------------------------\n\nTITLE: Defining Superscript and Subscript Numbers in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for superscript and subscript numbers in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n0x1002070 zerosuperior\n0x1002074 foursuperior\n0x1002075 fivesuperior\n0x1002076 sixsuperior\n0x1002077 sevensuperior\n0x1002078 eightsuperior\n0x1002079 ninesuperior\n0x1002080 zerosubscript\n0x1002081 onesubscript\n0x1002082 twosubscript\n0x1002083 threesubscript\n0x1002084 foursubscript\n0x1002085 fivesubscript\n0x1002086 sixsubscript\n0x1002087 sevensubscript\n0x1002088 eightsubscript\n0x1002089 ninesubscript\n```\n\n----------------------------------------\n\nTITLE: Converting X11 Compose File for GTK (Bash)\nDESCRIPTION: This snippet demonstrates the process of converting the X11 Compose file into the format required by GTK. It uses cpp to preprocess the file, sed to clean up comments, and a custom tool 'compose-parse' to generate the final data files.\nSOURCE: https://github.com/gnome/gtk/blob/main/gtk/compose/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncpp -DXCOMM='#' Compose.pre | sed -e 's/^ *#/#/' > Compose\ncompose-parse Compose sequences-little-endian sequences-big-endian chars gtkcomposedata.h\n```\n\n----------------------------------------\n\nTITLE: GTK Text Style Markup Examples\nDESCRIPTION: Examples of text style attributes including normal, italic, and oblique using span tags.\nSOURCE: https://github.com/gnome/gtk/blob/main/demos/gtk-demo/markup.txt#2025-04-18_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<span style=\"normal\">Normal</span> <span style=\"italic\">Italic</span> <span style=\"oblique\">Olique</span>\n```\n\n----------------------------------------\n\nTITLE: HTML Image Links for GTK Windows Documentation\nDESCRIPTION: HTML markup for responsive dark/light mode images linking to GTK window class documentation. Each link contains a picture element with source sets for dark and light themes.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/visual_index.md#2025-04-18_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"class.Window.html\"><picture><source srcset=\"window-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"window.png\"></picture></a>\n<a href=\"class.Dialog.html\"><picture><source srcset=\"dialog-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"dialog.png\"></picture></a>\n<a href=\"class.MessageDialog.html\"><picture><source srcset=\"messagedialog-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"messagedialog.png\"></picture></a>\n<a href=\"class.AboutDialog.html\"><picture><source srcset=\"aboutdialog-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"aboutdialog.png\"></picture></a>\n<a href=\"class.Assistant.html\"><picture><source srcset=\"assistant-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"assistant.png\"></picture></a>\n<a href=\"class.ColorChooserDialog.html\"><picture><source srcset=\"colorchooser-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"colorchooser.png\"></picture></a>\n<a href=\"class.FileChooserDialog.html\"><picture><source srcset=\"filechooser-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"filechooser.png\"></picture></a>\n<a href=\"class.FontChooserDialog.html\"><picture><source srcset=\"fontchooser-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"fontchooser.png\"></picture></a>\n<a href=\"class.AppChooserDialog.html\"><picture><source srcset=\"appchooserdialog-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"appchooserdialog.png\"></picture></a>\n<a href=\"class.PageSetupUnixDialog.html\"><picture><source srcset=\"pagesetupdialog-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"pagesetupdialog.png\"></picture></a>\n<a href=\"class.PrintUnixDialog.html\"><picture><source srcset=\"printdialog-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"printdialog.png\"></picture></a>\n<a href=\"class.ShortcutsWindow.html\"><picture><source srcset=\"shortcuts-window-dark.png\" media=\"(prefers-color-scheme: dark)\"><img src=\"shortcuts-window.png\"></picture></a>\n```\n\n----------------------------------------\n\nTITLE: Defining Georgian Keycodes in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for Georgian characters in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n0x10010d0 Georgian_an\n0x10010d1 Georgian_ban\n0x10010d2 Georgian_gan\n0x10010d3 Georgian_don\n0x10010d4 Georgian_en\n0x10010d5 Georgian_vin\n0x10010d6 Georgian_zen\n0x10010d7 Georgian_tan\n0x10010d8 Georgian_in\n0x10010d9 Georgian_kan\n0x10010da Georgian_las\n0x10010db Georgian_man\n0x10010dc Georgian_nar\n0x10010dd Georgian_on\n0x10010de Georgian_par\n0x10010df Georgian_zhar\n0x10010e0 Georgian_rae\n0x10010e1 Georgian_san\n0x10010e2 Georgian_tar\n0x10010e3 Georgian_un\n0x10010e4 Georgian_phar\n0x10010e5 Georgian_khar\n0x10010e6 Georgian_ghan\n0x10010e7 Georgian_qar\n0x10010e8 Georgian_shin\n0x10010e9 Georgian_chin\n0x10010ea Georgian_can\n0x10010eb Georgian_jil\n0x10010ec Georgian_cil\n0x10010ed Georgian_char\n0x10010ee Georgian_xan\n0x10010ef Georgian_jhan\n0x10010f0 Georgian_hae\n0x10010f1 Georgian_he\n0x10010f2 Georgian_hie\n0x10010f3 Georgian_we\n0x10010f4 Georgian_har\n0x10010f5 Georgian_hoe\n0x10010f6 Georgian_fi\n```\n\n----------------------------------------\n\nTITLE: Defining Latin Extended Characters in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for various accented Latin characters and special symbols in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n0x1001e02 Babovedot\n0x1001e03 babovedot\n0x1001e0a Dabovedot\n0x1001e0b dabovedot\n0x1001e1e Fabovedot\n0x1001e1f fabovedot\n0x1001e36 Lbelowdot\n0x1001e37 lbelowdot\n0x1001e40 Mabovedot\n0x1001e41 mabovedot\n0x1001e56 Pabovedot\n0x1001e57 pabovedot\n0x1001e60 Sabovedot\n0x1001e61 sabovedot\n0x1001e6a Tabovedot\n0x1001e6b tabovedot\n0x1001e80 Wgrave\n0x1001e81 wgrave\n0x1001e82 Wacute\n0x1001e83 wacute\n0x1001e84 Wdiaeresis\n0x1001e85 wdiaeresis\n0x1001e8a Xabovedot\n0x1001e8b xabovedot\n0x1001ea0 Abelowdot\n0x1001ea1 abelowdot\n0x1001ea2 Ahook\n0x1001ea3 ahook\n0x1001ea4 Acircumflexacute\n0x1001ea5 acircumflexacute\n0x1001ea6 Acircumflexgrave\n0x1001ea7 acircumflexgrave\n0x1001ea8 Acircumflexhook\n0x1001ea9 acircumflexhook\n0x1001eaa Acircumflextilde\n0x1001eab acircumflextilde\n0x1001eac Acircumflexbelowdot\n0x1001ead acircumflexbelowdot\n0x1001eae Abreveacute\n0x1001eaf abreveacute\n0x1001eb0 Abrevegrave\n0x1001eb1 abrevegrave\n0x1001eb2 Abrevehook\n0x1001eb3 abrevehook\n0x1001eb4 Abrevetilde\n0x1001eb5 abrevetilde\n0x1001eb6 Abrevebelowdot\n0x1001eb7 abrevebelowdot\n0x1001eb8 Ebelowdot\n0x1001eb9 ebelowdot\n0x1001eba Ehook\n0x1001ebb ehook\n0x1001ebc Etilde\n0x1001ebd etilde\n0x1001ebe Ecircumflexacute\n0x1001ebf ecircumflexacute\n0x1001ec0 Ecircumflexgrave\n0x1001ec1 ecircumflexgrave\n0x1001ec2 Ecircumflexhook\n0x1001ec3 ecircumflexhook\n0x1001ec4 Ecircumflextilde\n0x1001ec5 ecircumflextilde\n0x1001ec6 Ecircumflexbelowdot\n0x1001ec7 ecircumflexbelowdot\n0x1001ec8 Ihook\n0x1001ec9 ihook\n0x1001eca Ibelowdot\n0x1001ecb ibelowdot\n0x1001ecc Obelowdot\n0x1001ecd obelowdot\n0x1001ece Ohook\n0x1001ecf ohook\n0x1001ed0 Ocircumflexacute\n0x1001ed1 ocircumflexacute\n0x1001ed2 Ocircumflexgrave\n0x1001ed3 ocircumflexgrave\n0x1001ed4 Ocircumflexhook\n0x1001ed5 ocircumflexhook\n0x1001ed6 Ocircumflextilde\n0x1001ed7 ocircumflextilde\n0x1001ed8 Ocircumflexbelowdot\n0x1001ed9 ocircumflexbelowdot\n0x1001eda Ohornacute\n0x1001edb ohornacute\n0x1001edc Ohorngrave\n0x1001edd ohorngrave\n0x1001ede Ohornhook\n0x1001edf ohornhook\n0x1001ee0 Ohorntilde\n0x1001ee1 ohorntilde\n0x1001ee2 Ohornbelowdot\n0x1001ee3 ohornbelowdot\n0x1001ee4 Ubelowdot\n0x1001ee5 ubelowdot\n0x1001ee6 Uhook\n0x1001ee7 uhook\n0x1001ee8 Uhornacute\n0x1001ee9 uhornacute\n0x1001eea Uhorngrave\n0x1001eeb uhorngrave\n0x1001eec Uhornhook\n0x1001eed uhornhook\n0x1001eee Uhorntilde\n0x1001eef uhorntilde\n0x1001ef0 Uhornbelowdot\n0x1001ef1 uhornbelowdot\n0x1001ef2 Ygrave\n0x1001ef3 ygrave\n0x1001ef4 Ybelowdot\n0x1001ef5 ybelowdot\n0x1001ef6 Yhook\n0x1001ef7 yhook\n0x1001ef8 Ytilde\n0x1001ef9 ytilde\n```\n\n----------------------------------------\n\nTITLE: Building GTK with Meson\nDESCRIPTION: Standard build sequence using Meson and Ninja to compile GTK from source.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/RELEASE-HOWTO.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ meson setup _build\n$ meson compile -C _build\n```\n\n----------------------------------------\n\nTITLE: GTK Text Size Markup Examples\nDESCRIPTION: Examples of text size control using span tags with size attributes ranging from xx-small to xx-large.\nSOURCE: https://github.com/gnome/gtk/blob/main/demos/gtk-demo/markup.txt#2025-04-18_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<span size=\"xx-small\">tiny </span><span size=\"x-small\">very small </span><span size=\"small\">small </span><span size=\"medium\">normal </span><span size=\"large\">large </span><span size=\"x-large\">very large </span><span size=\"xx-large\">huge</span>\n```\n\n----------------------------------------\n\nTITLE: Broadway Port Calculation Formula\nDESCRIPTION: Formula showing how Broadway calculates the port number based on the display number.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/broadway.md#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nport = 8080 + display\n```\n\n----------------------------------------\n\nTITLE: Defining Arabic and Farsi Keycodes in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for Arabic and Farsi characters and numerals in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n0x1000653 Arabic_madda_above\n0x1000654 Arabic_hamza_above\n0x1000655 Arabic_hamza_below\n0x1000660 Arabic_0\n0x1000661 Arabic_1\n0x1000662 Arabic_2\n0x1000663 Arabic_3\n0x1000664 Arabic_4\n0x1000665 Arabic_5\n0x1000666 Arabic_6\n0x1000667 Arabic_7\n0x1000668 Arabic_8\n0x1000669 Arabic_9\n0x100066a Arabic_percent\n0x1000670 Arabic_superscript_alef\n0x1000679 Arabic_tteh\n0x100067e Arabic_peh\n0x1000686 Arabic_tcheh\n0x1000688 Arabic_ddal\n0x1000691 Arabic_rreh\n0x1000698 Arabic_jeh\n0x10006a4 Arabic_veh\n0x10006a9 Arabic_keheh\n0x10006af Arabic_gaf\n0x10006ba Arabic_noon_ghunna\n0x10006be Arabic_heh_doachashmee\n0x10006c1 Arabic_heh_goal\n0x10006cc Arabic_farsi_yeh\n0x10006cc Farsi_yeh\n0x10006d2 Arabic_yeh_baree\n0x10006d4 Arabic_fullstop\n0x10006f0 Farsi_0\n0x10006f1 Farsi_1\n0x10006f2 Farsi_2\n0x10006f3 Farsi_3\n0x10006f4 Farsi_4\n0x10006f5 Farsi_5\n0x10006f6 Farsi_6\n0x10006f7 Farsi_7\n0x10006f8 Farsi_8\n0x10006f9 Farsi_9\n```\n\n----------------------------------------\n\nTITLE: Setting GDK Vulkan Disable Options\nDESCRIPTION: Environment variable that controls which Vulkan features should be disabled in GDK, including dmabuf, ycbr, semaphore operations, and swapchain features.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/running.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nGDK_VULKAN_DISABLE=\"dmabuf ycbr semaphore-export semaphore-import incremental-present swapchain-maintenance\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Hexadecimal Codes to Character Names\nDESCRIPTION: This snippet demonstrates the format used throughout the file to map Unicode hexadecimal codes to their corresponding character names. Each line represents a single character mapping.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n0x000020 space\n0x000021 exclam\n0x000022 quotedbl\n0x000023 numbersign\n0x000024 dollar\n0x000025 percent\n```\n\n----------------------------------------\n\nTITLE: Running GTK Test Suite\nDESCRIPTION: Command to execute the GTK test suite using Meson\nSOURCE: https://github.com/gnome/gtk/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ meson test -C_build\n```\n\n----------------------------------------\n\nTITLE: Proper Function Declaration in C\nDESCRIPTION: Illustrates the correct way to declare functions in C, with the return type on a separate line and properly aligned arguments.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n  void\n  my_function (some_type_t     type,\n               another_type_t *a_pointer,\n               final_type_t    another_type)\n  {\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating GTK Translation Template\nDESCRIPTION: Command to generate and update the GTK translation template (pot) file using Ninja.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/RELEASE-HOWTO.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ninja -C _build gtk40-pot\n```\n\n----------------------------------------\n\nTITLE: Defining Keysym Mappings for Greek and Special Characters\nDESCRIPTION: This snippet provides a comprehensive list of keysym mappings for Greek letters, mathematical symbols, and special characters. Each line contains a hexadecimal code followed by the character name it represents.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n0x0007a8 Greek_UPSILONaccent\n0x0007a9 Greek_UPSILONdieresis\n0x0007ab Greek_OMEGAaccent\n0x0007ae Greek_accentdieresis\n0x0007af Greek_horizbar\n0x0007b1 Greek_alphaaccent\n0x0007b2 Greek_epsilonaccent\n0x0007b3 Greek_etaaccent\n0x0007b4 Greek_iotaaccent\n0x0007b5 Greek_iotadieresis\n0x0007b6 Greek_iotaaccentdieresis\n0x0007b7 Greek_omicronaccent\n0x0007b8 Greek_upsilonaccent\n0x0007b9 Greek_upsilondieresis\n0x0007ba Greek_upsilonaccentdieresis\n0x0007bb Greek_omegaaccent\n0x0007c1 Greek_ALPHA\n0x0007c2 Greek_BETA\n0x0007c3 Greek_GAMMA\n0x0007c4 Greek_DELTA\n0x0007c5 Greek_EPSILON\n0x0007c6 Greek_ZETA\n0x0007c7 Greek_ETA\n0x0007c8 Greek_THETA\n0x0007c9 Greek_IOTA\n0x0007ca Greek_KAPPA\n0x0007cb Greek_LAMBDA\n0x0007cb Greek_LAMDA\n0x0007cc Greek_MU\n0x0007cd Greek_NU\n0x0007ce Greek_XI\n0x0007cf Greek_OMICRON\n0x0007d0 Greek_PI\n0x0007d1 Greek_RHO\n0x0007d2 Greek_SIGMA\n0x0007d4 Greek_TAU\n0x0007d5 Greek_UPSILON\n0x0007d6 Greek_PHI\n0x0007d7 Greek_CHI\n0x0007d8 Greek_PSI\n0x0007d9 Greek_OMEGA\n0x0007e1 Greek_alpha\n0x0007e2 Greek_beta\n0x0007e3 Greek_gamma\n0x0007e4 Greek_delta\n0x0007e5 Greek_epsilon\n0x0007e6 Greek_zeta\n0x0007e7 Greek_eta\n0x0007e8 Greek_theta\n0x0007e9 Greek_iota\n0x0007ea Greek_kappa\n0x0007eb Greek_lambda\n0x0007eb Greek_lamda\n0x0007ec Greek_mu\n0x0007ed Greek_nu\n0x0007ee Greek_xi\n0x0007ef Greek_omicron\n0x0007f0 Greek_pi\n0x0007f1 Greek_rho\n0x0007f2 Greek_sigma\n0x0007f3 Greek_finalsmallsigma\n0x0007f4 Greek_tau\n0x0007f5 Greek_upsilon\n0x0007f6 Greek_phi\n0x0007f7 Greek_chi\n0x0007f8 Greek_psi\n0x0007f9 Greek_omega\n0x0008a1 leftradical\n0x0008a2 topleftradical\n0x0008a3 horizconnector\n0x0008a4 topintegral\n0x0008a5 botintegral\n0x0008a6 vertconnector\n0x0008a7 topleftsqbracket\n0x0008a8 botleftsqbracket\n0x0008a9 toprightsqbracket\n0x0008aa botrightsqbracket\n0x0008ab topleftparens\n0x0008ac botleftparens\n0x0008ad toprightparens\n0x0008ae botrightparens\n0x0008af leftmiddlecurlybrace\n0x0008b0 rightmiddlecurlybrace\n0x0008b1 topleftsummation\n0x0008b2 botleftsummation\n0x0008b3 topvertsummationconnector\n0x0008b4 botvertsummationconnector\n0x0008b5 toprightsummation\n0x0008b6 botrightsummation\n0x0008b7 rightmiddlesummation\n0x0008bc lessthanequal\n0x0008bd notequal\n0x0008be greaterthanequal\n0x0008bf integral\n0x0008c0 therefore\n0x0008c1 variation\n0x0008c2 infinity\n0x0008c5 nabla\n0x0008c8 approximate\n0x0008c9 similarequal\n0x0008cd ifonlyif\n0x0008ce implies\n0x0008cf identical\n0x0008d6 radical\n0x0008da includedin\n0x0008db includes\n0x0008dc intersection\n0x0008dd union\n0x0008de logicaland\n0x0008df logicalor\n0x0008ef partialderivative\n0x0008f6 function\n0x0008fb leftarrow\n0x0008fc uparrow\n0x0008fd rightarrow\n0x0008fe downarrow\n0x0009df blank\n0x0009e0 soliddiamond\n0x0009e1 checkerboard\n0x0009e2 ht\n0x0009e3 ff\n0x0009e4 cr\n0x0009e5 lf\n0x0009e8 nl\n0x0009e9 vt\n0x0009ea lowrightcorner\n0x0009eb uprightcorner\n0x0009ec upleftcorner\n0x0009ed lowleftcorner\n0x0009ee crossinglines\n0x0009ef horizlinescan1\n0x0009f0 horizlinescan3\n0x0009f1 horizlinescan5\n0x0009f2 horizlinescan7\n0x0009f3 horizlinescan9\n0x0009f4 leftt\n0x0009f5 rightt\n0x0009f6 bott\n0x0009f7 topt\n0x0009f8 vertbar\n0x000aa1 emspace\n0x000aa2 enspace\n0x000aa3 em3space\n0x000aa4 em4space\n0x000aa5 digitspace\n0x000aa6 punctspace\n0x000aa7 thinspace\n0x000aa8 hairspace\n0x000aa9 emdash\n0x000aaa endash\n0x000aac signifblank\n0x000aae ellipsis\n0x000aaf doubbaselinedot\n0x000ab0 onethird\n0x000ab1 twothirds\n0x000ab2 onefifth\n0x000ab3 twofifths\n0x000ab4 threefifths\n0x000ab5 fourfifths\n0x000ab6 onesixth\n0x000ab7 fivesixths\n0x000ab8 careof\n0x000abb figdash\n0x000abc leftanglebracket\n0x000abd decimalpoint\n0x000abe rightanglebracket\n0x000abf marker\n0x000ac3 oneeighth\n0x000ac4 threeeighths\n0x000ac5 fiveeighths\n0x000ac6 seveneighths\n0x000ac9 trademark\n0x000aca signaturemark\n0x000acb trademarkincircle\n0x000acc leftopentriangle\n0x000acd rightopentriangle\n0x000ace emopencircle\n0x000acf emopenrectangle\n0x000ad0 leftsinglequotemark\n0x000ad1 rightsinglequotemark\n0x000ad2 leftdoublequotemark\n0x000ad3 rightdoublequotemark\n0x000ad4 prescription\n0x000ad5 permille\n0x000ad6 minutes\n0x000ad7 seconds\n0x000ad9 latincross\n0x000ada hexagram\n0x000adb filledrectbullet\n0x000adc filledlefttribullet\n0x000add filledrighttribullet\n0x000ade emfilledcircle\n0x000adf emfilledrect\n0x000ae0 enopencircbullet\n0x000ae1 enopensquarebullet\n0x000ae2 openrectbullet\n0x000ae3 opentribulletup\n0x000ae4 opentribulletdown\n0x000ae5 openstar\n0x000ae6 enfilledcircbullet\n0x000ae7 enfilledsqbullet\n0x000ae8 filledtribulletup\n0x000ae9 filledtribulletdown\n0x000aea leftpointer\n0x000aeb rightpointer\n0x000aec club\n0x000aed diamond\n0x000aee heart\n0x000af0 maltesecross\n0x000af1 dagger\n0x000af2 doubledagger\n0x000af3 checkmark\n0x000af4 ballotcross\n0x000af5 musicalsharp\n0x000af6 musicalflat\n0x000af7 malesymbol\n0x000af8 femalesymbol\n0x000af9 telephone\n0x000afa telephonerecorder\n0x000afb phonographcopyright\n0x000afc caret\n0x000afd singlelowquotemark\n0x000afe doublelowquotemark\n0x000aff cursor\n0x000ba3 leftcaret\n0x000ba6 rightcaret\n0x000ba8 downcaret\n0x000ba9 upcaret\n0x000bc0 overbar\n0x000bc2 downtack\n0x000bc3 upshoe\n0x000bc4 downstile\n0x000bc6 underbar\n0x000bca jot\n0x000bcc quad\n0x000bce uptack\n0x000bcf circle\n0x000bd3 upstile\n0x000bd6 downshoe\n0x000bd8 rightshoe\n0x000bda leftshoe\n0x000bdc lefttack\n0x000bfc righttack\n0x000cdf hebrew_doublelowline\n0x000ce0 hebrew_aleph\n0x000ce1 hebrew_bet\n0x000ce1 hebrew_beth\n0x000ce2 hebrew_gimel\n0x000ce2 hebrew_gimmel\n0x000ce3 hebrew_dalet\n0x000ce3 hebrew_daleth\n0x000ce4 hebrew_he\n0x000ce5 hebrew_waw\n0x000ce6 hebrew_zain\n0x000ce6 hebrew_zayin\n0x000ce7 hebrew_chet\n0x000ce7 hebrew_het\n0x000ce8 hebrew_tet\n0x000ce8 hebrew_teth\n0x000ce9 hebrew_yod\n0x000cea hebrew_finalkaph\n0x000ceb hebrew_kaph\n0x000cec hebrew_lamed\n0x000ced hebrew_finalmem\n0x000cee hebrew_mem\n0x000cef hebrew_finalnun\n0x000cf0 hebrew_nun\n0x000cf1 hebrew_samech\n0x000cf1 hebrew_samekh\n0x000cf2 hebrew_ayin\n0x000cf3 hebrew_finalpe\n0x000cf4 hebrew_pe\n0x000cf5 hebrew_finalzade\n0x000cf5 hebrew_finalzadi\n0x000cf6 hebrew_zade\n0x000cf6 hebrew_zadi\n0x000cf7 hebrew_kuf\n0x000cf7 hebrew_qoph\n0x000cf8 hebrew_resh\n0x000cf9 hebrew_shin\n0x000cfa hebrew_taf\n0x000cfa hebrew_taw\n0x000da1 Thai_kokai\n0x000da2 Thai_khokhai\n0x000da3 Thai_khokhuat\n0x000da4 Thai_khokhwai\n0x000da5 Thai_khokhon\n0x000da6 Thai_khorakhang\n0x000da7 Thai_ngongu\n0x000da8 Thai_chochan\n0x000da9 Thai_choching\n0x000daa Thai_chochang\n0x000dab Thai_soso\n0x000dac Thai_chochoe\n0x000dad Thai_yoying\n0x000dae Thai_dochada\n0x000daf Thai_topatak\n0x000db0 Thai_thothan\n0x000db1 Thai_thonangmontho\n0x000db2 Thai_thophuthao\n0x000db3 Thai_nonen\n0x000db4 Thai_dodek\n0x000db5 Thai_totao\n0x000db6 Thai_thothung\n0x000db7 Thai_thothahan\n0x000db8 Thai_thothong\n0x000db9 Thai_nonu\n0x000dba Thai_bobaimai\n0x000dbb Thai_popla\n0x000dbc Thai_phophung\n0x000dbd Thai_fofa\n0x000dbe Thai_phophan\n0x000dbf Thai_fofan\n0x000dc0 Thai_phosamphao\n0x000dc1 Thai_moma\n0x000dc2 Thai_yoyak\n0x000dc3 Thai_rorua\n0x000dc4 Thai_ru\n0x000dc5 Thai_loling\n0x000dc6 Thai_lu\n0x000dc7 Thai_wowaen\n0x000dc8 Thai_sosala\n0x000dc9 Thai_sorusi\n0x000dca Thai_sosua\n0x000dcb Thai_hohip\n0x000dcc Thai_lochula\n0x000dcd Thai_oang\n0x000dce Thai_honokhuk\n0x000dcf Thai_paiyannoi\n0x000dd0 Thai_saraa\n0x000dd1 Thai_maihanakat\n0x000dd2 Thai_saraaa\n0x000dd3 Thai_saraam\n0x000dd4 Thai_sarai\n0x000dd5 Thai_saraii\n0x000dd6 Thai_saraue\n0x000dd7 Thai_sarauee\n0x000dd8 Thai_sarau\n0x000dd9 Thai_sarauu\n0x000dda Thai_phinthu\n0x000dde Thai_maihanakat_maitho\n0x000ddf Thai_baht\n0x000de0 Thai_sarae\n0x000de1 Thai_saraae\n0x000de2 Thai_sarao\n0x000de3 Thai_saraaimaimuan\n0x000de4 Thai_saraaimaimalai\n0x000de5 Thai_lakkhangyao\n0x000de6 Thai_maiyamok\n0x000de7 Thai_maitaikhu\n0x000de8 Thai_maiek\n0x000de9 Thai_maitho\n0x000dea Thai_maitri\n0x000deb Thai_maichattawa\n0x000dec Thai_thanthakhat\n0x000ded Thai_nikhahit\n0x000df0 Thai_leksun\n0x000df1 Thai_leknung\n0x000df2 Thai_leksong\n0x000df3 Thai_leksam\n0x000df4 Thai_leksi\n0x000df5 Thai_lekha\n0x000df6 Thai_lekhok\n0x000df7 Thai_lekchet\n0x000df8 Thai_lekpaet\n0x000df9 Thai_lekkao\n0x000ea1 Hangul_Kiyeog\n0x000ea2 Hangul_SsangKiyeog\n0x000ea3 Hangul_KiyeogSios\n0x000ea4 Hangul_Nieun\n0x000ea5 Hangul_NieunJieuj\n0x000ea6 Hangul_NieunHieuh\n0x000ea7 Hangul_Dikeud\n0x000ea8 Hangul_SsangDikeud\n0x000ea9 Hangul_Rieul\n0x000eaa Hangul_RieulKiyeog\n0x000eab Hangul_RieulMieum\n0x000eac Hangul_RieulPieub\n0x000ead Hangul_RieulSios\n0x000eae Hangul_RieulTieut\n0x000eaf Hangul_RieulPhieuf\n0x000eb0 Hangul_RieulHieuh\n0x000eb1 Hangul_Mieum\n0x000eb2 Hangul_Pieub\n0x000eb3 Hangul_SsangPieub\n0x000eb4 Hangul_PieubSios\n0x000eb5 Hangul_Sios\n0x000eb6 Hangul_SsangSios\n0x000eb7 Hangul_Ieung\n0x000eb8 Hangul_Jieuj\n0x000eb9 Hangul_SsangJieuj\n0x000eba Hangul_Cieuc\n0x000ebb Hangul_Khieuq\n0x000ebc Hangul_Tieut\n0x000ebd Hangul_Phieuf\n0x000ebe Hangul_Hieuh\n0x000ebf Hangul_A\n0x000ec0 Hangul_AE\n0x000ec1 Hangul_YA\n0x000ec2 Hangul_YAE\n0x000ec3 Hangul_EO\n0x000ec4 Hangul_E\n0x000ec5 Hangul_YEO\n0x000ec6 Hangul_YE\n0x000ec7 Hangul_O\n0x000ec8 Hangul_WA\n0x000ec9 Hangul_WAE\n0x000eca Hangul_OE\n0x000ecb Hangul_YO\n0x000ecc Hangul_U\n0x000ecd Hangul_WEO\n0x000ece Hangul_WE\n0x000ecf Hangul_WI\n0x000ed0 Hangul_YU\n0x000ed1 Hangul_EU\n0x000ed2 Hangul_YI\n0x000ed3 Hangul_I\n0x000ed4 Hangul_J_Kiyeog\n0x000ed5 Hangul_J_SsangKiyeog\n0x000ed6 Hangul_J_KiyeogSios\n0x000ed7 Hangul_J_Nieun\n0x000ed8 Hangul_J_NieunJieuj\n0x000ed9 Hangul_J_NieunHieuh\n0x000eda Hangul_J_Dikeud\n0x000edb Hangul_J_Rieul\n0x000edc Hangul_J_RieulKiyeog\n0x000edd Hangul_J_RieulMieum\n0x000ede Hangul_J_RieulPieub\n0x000edf Hangul_J_RieulSios\n0x000ee0 Hangul_J_RieulTieut\n0x000ee1 Hangul_J_RieulPhieuf\n0x000ee2 Hangul_J_RieulHieuh\n0x000ee3 Hangul_J_Mieum\n0x000ee4 Hangul_J_Pieub\n0x000ee5 Hangul_J_PieubSios\n0x000ee6 Hangul_J_Sios\n0x000ee7 Hangul_J_SsangSios\n0x000ee8 Hangul_J_Ieung\n0x000ee9 Hangul_J_Jieuj\n0x000eea Hangul_J_Cieuc\n0x000eeb Hangul_J_Khieuq\n0x000eec Hangul_J_Tieut\n0x000eed Hangul_J_Phieuf\n0x000eee Hangul_J_Hieuh\n0x000eef Hangul_RieulYeorinHieuh\n0x000ef0 Hangul_SunkyeongeumMieum\n0x000ef1 Hangul_SunkyeongeumPieub\n0x000ef2 Hangul_PanSios\n0x000ef3 Hangul_KkogjiDalrinIeung\n0x000ef4 Hangul_SunkyeongeumPhieuf\n0x000ef5 Hangul_YeorinHieuh\n```\n\n----------------------------------------\n\nTITLE: Installing GTK System-wide\nDESCRIPTION: Command to install GTK on the system using Meson with sudo privileges\nSOURCE: https://github.com/gnome/gtk/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo meson install -C_build\n```\n\n----------------------------------------\n\nTITLE: Structuring Struct Declarations in C\nDESCRIPTION: Demonstrates the proper way to declare struct types in C, using newlines to separate logical sections of the structure.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n  struct _GtkWrapBoxPrivate\n  {\n    GtkOrientation        orientation;\n    GtkWrapAllocationMode mode;\n\n    GtkWrapBoxSpreading   horizontal_spreading;\n    GtkWrapBoxSpreading   vertical_spreading;\n\n    guint16               vertical_spacing;\n    guint16               horizontal_spacing;\n\n    guint16               minimum_line_children;\n    guint16               natural_line_children;\n\n    GList                *children;\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Braille Patterns in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for Braille patterns in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_11\n\nLANGUAGE: C\nCODE:\n```\n0x1002800 braille_blank\n0x1002801 braille_dots_1\n0x1002802 braille_dots_2\n0x1002803 braille_dots_12\n0x1002804 braille_dots_3\n0x1002805 braille_dots_13\n0x1002806 braille_dots_23\n0x1002807 braille_dots_123\n0x1002808 braille_dots_4\n0x1002809 braille_dots_14\n0x100280a braille_dots_24\n0x100280b braille_dots_124\n0x100280c braille_dots_34\n0x100280d braille_dots_134\n0x100280e braille_dots_234\n0x100280f braille_dots_1234\n0x1002810 braille_dots_5\n0x1002811 braille_dots_15\n0x1002812 braille_dots_25\n0x1002813 braille_dots_125\n0x1002814 braille_dots_35\n0x1002815 braille_dots_135\n0x1002816 braille_dots_235\n0x1002817 braille_dots_1235\n0x1002818 braille_dots_45\n0x1002819 braille_dots_145\n0x100281a braille_dots_245\n0x100281b braille_dots_1245\n0x100281c braille_dots_345\n0x100281d braille_dots_1345\n0x100281e braille_dots_2345\n0x100281f braille_dots_12345\n0x1002820 braille_dots_6\n0x1002821 braille_dots_16\n0x1002822 braille_dots_26\n0x1002823 braille_dots_126\n0x1002824 braille_dots_36\n0x1002825 braille_dots_136\n0x1002826 braille_dots_236\n0x1002827 braille_dots_1236\n0x1002828 braille_dots_46\n0x1002829 braille_dots_146\n0x100282a braille_dots_246\n0x100282b braille_dots_1246\n0x100282c braille_dots_346\n0x100282d braille_dots_1346\n0x100282e braille_dots_2346\n0x100282f braille_dots_12346\n0x1002830 braille_dots_56\n0x1002831 braille_dots_156\n0x1002832 braille_dots_256\n0x1002833 braille_dots_1256\n0x1002834 braille_dots_356\n0x1002835 braille_dots_1356\n0x1002836 braille_dots_2356\n0x1002837 braille_dots_12356\n0x1002838 braille_dots_456\n0x1002839 braille_dots_1456\n0x100283a braille_dots_2456\n0x100283b braille_dots_12456\n0x100283c braille_dots_3456\n0x100283d braille_dots_13456\n0x100283e braille_dots_23456\n0x100283f braille_dots_123456\n0x1002840 braille_dots_7\n0x1002841 braille_dots_17\n0x1002842 braille_dots_27\n0x1002843 braille_dots_127\n0x1002844 braille_dots_37\n0x1002845 braille_dots_137\n0x1002846 braille_dots_237\n0x1002847 braille_dots_1237\n0x1002848 braille_dots_47\n0x1002849 braille_dots_147\n0x100284a braille_dots_247\n```\n\n----------------------------------------\n\nTITLE: Launching GtkTreeView with Debug Option\nDESCRIPTION: Command to launch testtreeview with tree debugging enabled. This ensures that debugging code in the tree widget is executed.\nSOURCE: https://github.com/gnome/gtk/blob/main/tests/testtreeview-plan.txt#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntesttreeview --gtk-debug=tree\n```\n\n----------------------------------------\n\nTITLE: Proper Brace Usage for Multiple Statements in C\nDESCRIPTION: Shows the correct way to use curly braces for multiple statements in a code block, with braces on a new indentation level.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n  if (condition)\n    {\n      statement_1 ();\n      statement_2 ();\n      statement_3 ();\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Sinhala Keycodes in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for Sinhala characters and vowel modifiers in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n0x1000d82 Sinh_ng\n0x1000d83 Sinh_h2\n0x1000d85 Sinh_a\n0x1000d86 Sinh_aa\n0x1000d87 Sinh_ae\n0x1000d88 Sinh_aee\n0x1000d89 Sinh_i\n0x1000d8a Sinh_ii\n0x1000d8b Sinh_u\n0x1000d8c Sinh_uu\n0x1000d8d Sinh_ri\n0x1000d8e Sinh_rii\n0x1000d8f Sinh_lu\n0x1000d90 Sinh_luu\n0x1000d91 Sinh_e\n0x1000d92 Sinh_ee\n0x1000d93 Sinh_ai\n0x1000d94 Sinh_o\n0x1000d95 Sinh_oo\n0x1000d96 Sinh_au\n0x1000d9a Sinh_ka\n0x1000d9b Sinh_kha\n0x1000d9c Sinh_ga\n0x1000d9d Sinh_gha\n0x1000d9e Sinh_ng2\n0x1000d9f Sinh_nga\n0x1000da0 Sinh_ca\n0x1000da1 Sinh_cha\n0x1000da2 Sinh_ja\n0x1000da3 Sinh_jha\n0x1000da4 Sinh_nya\n0x1000da5 Sinh_jnya\n0x1000da6 Sinh_nja\n0x1000da7 Sinh_tta\n0x1000da8 Sinh_ttha\n0x1000da9 Sinh_dda\n0x1000daa Sinh_ddha\n0x1000dab Sinh_nna\n0x1000dac Sinh_ndda\n0x1000dad Sinh_tha\n0x1000dae Sinh_thha\n0x1000daf Sinh_dha\n0x1000db0 Sinh_dhha\n0x1000db1 Sinh_na\n0x1000db3 Sinh_ndha\n0x1000db4 Sinh_pa\n0x1000db5 Sinh_pha\n0x1000db6 Sinh_ba\n0x1000db7 Sinh_bha\n0x1000db8 Sinh_ma\n0x1000db9 Sinh_mba\n0x1000dba Sinh_ya\n0x1000dbb Sinh_ra\n0x1000dbd Sinh_la\n0x1000dc0 Sinh_va\n0x1000dc1 Sinh_sha\n0x1000dc2 Sinh_ssha\n0x1000dc3 Sinh_sa\n0x1000dc4 Sinh_ha\n0x1000dc5 Sinh_lla\n0x1000dc6 Sinh_fa\n0x1000dca Sinh_al\n0x1000dcf Sinh_aa2\n0x1000dd0 Sinh_ae2\n0x1000dd1 Sinh_aee2\n0x1000dd2 Sinh_i2\n0x1000dd3 Sinh_ii2\n0x1000dd4 Sinh_u2\n0x1000dd6 Sinh_uu2\n0x1000dd8 Sinh_ru2\n0x1000dd9 Sinh_e2\n0x1000dda Sinh_ee2\n0x1000ddb Sinh_ai2\n0x1000ddc Sinh_o2\n0x1000ddd Sinh_oo2\n0x1000dde Sinh_au2\n0x1000ddf Sinh_lu2\n0x1000df2 Sinh_ruu2\n0x1000df3 Sinh_luu2\n0x1000df4 Sinh_kunddaliya\n```\n\n----------------------------------------\n\nTITLE: Cleaning Git Working Directory for GTK Release\nDESCRIPTION: Command to clean the Git working directory by removing all untracked files and directories, ensuring a pristine state before release.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/RELEASE-HOWTO.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clean -dfx\n```\n\n----------------------------------------\n\nTITLE: Running GTK4 Demo Application in Command Line\nDESCRIPTION: Shows the basic syntax for running the gtk4-demo application from the command line, with optional arguments.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-demo.rst#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**gtk4-demo** [OPTIONS...]\n```\n\n----------------------------------------\n\nTITLE: GTK Enumeration Type Definition\nDESCRIPTION: Shows the proper way to define enumeration types in GTK\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_18\n\nLANGUAGE: c\nCODE:\n```\n  typedef enum\n  {\n    GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT,\n    GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH\n  } GtkSizeRequestMode;\n```\n\n----------------------------------------\n\nTITLE: Uploading GTK Release Tarball\nDESCRIPTION: Commands for uploading and installing the GTK release tarball to GNOME servers using scp and ftpadmin.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/RELEASE-HOWTO.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ scp gtk-4.2.0.tar.xz matthiasc@master.gnome.org:\n$ ssh matthiasc@master.gnome.org\n$ ftpadmin install gtk-4.2.0.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Using gtk4-update-icon-cache Command Syntax\nDESCRIPTION: Basic command syntax for the gtk4-update-icon-cache utility that creates mmap-able cache files for icon themes. It requires a path to an icon theme directory containing an index.theme file.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-update-icon-cache.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-update-icon-cache [OPTIONS...] <PATH>\n```\n\n----------------------------------------\n\nTITLE: GTK Header Function Alignment Example\nDESCRIPTION: Demonstrates practical examples of function declaration alignment in GTK headers\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n  void        gtk_type_set_property (GtkType      *type,\n                                     const char   *value,\n                                     GError      **error);\n  const char *gtk_type_get_property (GtkType      *type);\n```\n\n----------------------------------------\n\nTITLE: Using gtk4-query-settings Command with Optional Pattern Filter\nDESCRIPTION: The command syntax for gtk4-query-settings, which can be used to print the names and values of GTK settings properties. Optionally, a pattern can be specified to filter the properties displayed.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-query-settings.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngtk4-query-settings [PATTERN]\n```\n\n----------------------------------------\n\nTITLE: GTK Header Tab-Based Alignment\nDESCRIPTION: Shows alternative tab-based alignment for function declarations in GTK headers\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n  void          gtk_type_set_prop           (GtkType *type,\n                                             float    value);\n  float         gtk_type_get_prop           (GtkType *type);\n  int           gtk_type_update_foobar      (GtkType *type);\n```\n\n----------------------------------------\n\nTITLE: Executing GTK4 Widget Factory Command\nDESCRIPTION: Shows the basic syntax for running the gtk4-widget-factory command with optional arguments.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-widget-factory.rst#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngtk4-widget-factory [OPTIONS...]\n```\n\n----------------------------------------\n\nTITLE: GTK Public Header Include Guard\nDESCRIPTION: Standard include guard pattern for public GTK headers to ensure they are only included through gtk.h\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n  #if !defined (__GTK_H_INSIDE__) && !defined (GTK_COMPILATION)\n  #error \"Only <gtk/gtk.h> can be included directly.\"\n  #endif\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Page Structure in reStructuredText for GTK4 Demo Application\nDESCRIPTION: This snippet defines the structure of a manual page for gtk4-demo-application using reStructuredText markup. It includes the command name, description, version, manual section, and manual group.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gtk/gtk4-demo-application.rst#2025-04-18_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. _gtk4-demo-application(1):\n\n=====================\ngtk4-demo-application\n=====================\n\n--------------------------\nDemonstrate GtkApplication\n--------------------------\n\n:Version: GTK\n:Manual section: 1\n:Manual group: GTK commands\n\nSYNOPSIS\n--------\n|   **gtk4-demo-application**\n\n\nDESCRIPTION\n-----------\n\n``gtk4-demo-application`` is an example application used by ``gtk4-demo``.\n\nThere is no need to call it manually.\n```\n\n----------------------------------------\n\nTITLE: GTK Private Header Structure\nDESCRIPTION: Shows the proper structure for private GTK headers including public header inclusion\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n  #pragma once\n\n  /* gtkfooprivate.h */\n\n  #include \"gtkfoo.h\"\n\n  ...\n\n  #endif /* __GTK_FOO_PRIVATE_H__ */\n```\n\n----------------------------------------\n\nTITLE: Tagging GTK Release in Git\nDESCRIPTION: Git command to create an annotated tag for the GTK release with a version message.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/RELEASE-HOWTO.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git tag -m \"GTK 4.2.0\" 4.2.0\n```\n\n----------------------------------------\n\nTITLE: GTK Basic Source File Include Pattern\nDESCRIPTION: Shows the basic include pattern for GTK source files with config.h and matching header\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/CODING-STYLE.md#2025-04-18_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n  /* gtkfoo.c */\n\n  #include \"config.h\"\n\n  #include \"gtkfoo.h\"\n```\n\n----------------------------------------\n\nTITLE: Calculating UI Element Positions in GTK\nDESCRIPTION: This snippet performs calculations for positioning UI elements, likely in a GTK-based application. It includes operations on coordinates and dimensions.\nSOURCE: https://github.com/gnome/gtk/blob/main/demos/gtk-demo/path_world.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n5.6161.15598zm171.37 1.6156c-1.596-1.923-1.2143-2.1634 1.675-1.0547 1.0275.39428 1.8682 1.1915 1.8682 1.7716 0 1.6337-1.9137 1.2465-3.5432-.7169zm5.5315-1.0421c-.4439-1.1571-.7736-2.9904-.7324-4.074.05-1.3049.4598-1.0074 1.2148.88121.627 1.5683.9566 3.4016.7325 4.074-.2242.67239-.7708.27586-1.2149-.88121zm91.316 1.1118c0-.28646.5315-.84931 1.1811-1.2508s1.1811-.1671 1.1811.52083-.5315 1.2508-1.1811 1.2508-1.1811-.23437-1.1811-.52083zm-302.07-4.9605c-.8161-.34418-1.1833-1.1119-.8161-1.706.9022-1.4598 8.472-1.3785 9.3862.10086.4014.64959.034 1.1883-.8162 1.1972-.8502.009-2.609.24509-3.9082.52491-1.2992.27983-3.0298.22717-3.8458-.11705zm17.534-.88658c-2.1461-2.586.327-3.3731 5.8912-1.8748 5.6054 1.5094 5.5865 1.7451-.2237 2.7941-3.0173.54471-4.6758.27571-5.6675-.91924zm177.33-.71852c-.8172-1.3085-.9625-2.3621-.3258-2.3621.6324 0 1.7185 1.063 2.4138 2.3621s.8418 2.3621.3256 2.3621c-.5161 0-1.6024-1.063-2.4136-2.3621zm7.3963-1.1883c-3.1576-3.489-1.4673-4.0378 1.7825-.57864 1.5232 1.6214 2.2277 2.948 1.5656 2.948s-2.1688-1.0662-3.3481-2.3694zm-221.44-.20485c-4.2223-.58537-10.176-1.8841-13.229-2.8862-3.0538-1.002-6.6519-1.4728-7.9959-1.0463-2.7041.85825-14.207-2.5232-14.207-4.1763 0-3.7754 10.588-4.0621 16.214-.43914 2.1004 1.3525 3.7563 1.443 8.1976.44766 4.9199-1.1026 5.9448-.96681 8.8355 1.1704 1.7985 1.3297 3.8051 2.4176 4.4589 2.4176 2.335 0 9.4239 3.951 8.8257 4.9189-.3353.54255-1.2427.91245-2.0163.82202-.7737-.0905-4.8613-.64336-9.0836-1.2287zm212-5.6933c-1.1757-1.2992-1.6062-2.3621-.9567-2.3621.6496 0 2.1431 1.063 3.3189 2.3621 1.1757 1.2992 1.6062 2.3621.9566 2.3621s-2.143-1.063-3.3188-2.3621zm-7.4482-1.4959c-.6709-.80848-1.5619-3.0614-1.9799-5.0066-.6734-3.1332-.598-3.2672.6609-1.1745.7815 1.2992 2.1784 3.2395 3.1041 4.3118.9812 1.1365 1.2144 2.2394.559 2.6444-.6183.38214-1.6731.0333-2.3441-.77514zm-25.013-3.7553-2.9344-1.6243 4.5488-.85337c2.5018-.46936 6.3469-2.4321 8.5444-4.3616 2.399-2.1063 3.9885-2.8694 3.9776-1.9095-.027 2.4017-1.4798 4.2523-5.8945 7.5093-4.6112 3.4021-4.3939 3.3694-8.2419 1.2394zm-221.55-4.5987c-4.3393-2.472-12.166-12.036-14.713-17.981-1.3744-3.2065-4.5241-8.4874-6.9995-11.735-2.4753-3.248-5.3167-7.4998-6.3141-9.4486-.9975-1.9488-4.0271-5.6692-6.7325-8.2675-5.7042-5.4784-9.2124-11.235-6.8215-11.194 3.0988.0534 11.077 4.4891 14.498 8.0611 9.4394 9.8542 11.374 11.608 15.829 14.353 4.3004 2.6496 6.3366 5.407 6.541 8.858.038.64959 1.2615 2.5098 2.7178 4.1338s4.204 4.6783 6.106 6.7873c1.9019 2.109 3.8018 5.3996 4.2219 7.3124 1.3751 6.2608-3.6668 11.779-8.3335 9.1203zm-237.9-.77972c0-.64959.53149-1.1811 1.1811-1.1811.64959 0 1.1811.53149 1.1811 1.1811 0 .64958-.53149 1.1811-1.1811 1.1811-.64958 0-1.1811-.53149-1.1811-1.1811zm312.39-.0106c-.4051-.6554-.4083-2.2256-.012-3.4894.4016-1.2654-.086-3.5426-1.0861-5.0683-1.6448-2.5103-1.6292-3.0363.1666-5.6001 1.09-1.5563 2.3762-5.7353 2.8582-9.2867.5946-4.3818 1.7688-7.3497 3.6533-9.2342 2.5776-2.5776 3.2255-2.692 9.02-1.5931 4.9752.94353 6.9329.82709 9.6412-.57345 4.5353-2.3453 4.8662-2.2404 3.3602 1.0651-1.9145 4.2018-5.7396 5.5447-9.7734 3.4312-7.2024-3.7737-16.759 1.8347-11.717 6.8765 1.8531 1.8532 2.8786 2.0217 6.3114 1.0372 5.8836-1.6874 8.2034-1.3776 4.5496.60774-4.1358 2.2471-4.9206 4.7409-2.7891 8.8626.9698 1.8754 1.7632 4.7835 1.7632 6.4626 0 2.6877-.2827 2.9016-2.364 1.7877-1.3004-.69588-3.1761-3.2087-4.1686-5.584-1.7908-4.286-1.8222-4.3012-4.114-2.0093-2.0101 2.0101-2.1457 2.903-1.0456 6.8869.9941 3.6003.9273 4.7908-.3131 5.577-2.0865 1.3226-3.0556 1.2843-3.9456-.15585zm162.04-6.2995c-1.1134-1.6992-3.6631-3.9369-5.6661-4.9727-2.0031-1.0358-3.3762-2.149-3.0514-2.4738 1.8365-1.8365 12.085 6.5048 11.212 9.1252-.2683.805-1.3393.0842-2.4944-1.6787zm-185.47-3.9309c-1.7818-.93354-4.1823-1.3981-5.3347-1.0324-2.938.93249-14.61-1.4429-15.766-3.2086-.9201-1.405-3.6255-10.058-5.0729-16.226-.398-1.6958 0-3.8961.9295-5.1691 1.352-1.8469 2.0508-1.9872 4.1915-.8415 2.2595 1.2092 2.7388 1.0023 3.9777-1.7168.7748-1.7004 3.3538-4.084 5.7312-5.2969 2.5178-1.2845 4.9371-3.689 5.7947-5.7593.9885-2.3868 2.7941-3.9904 5.4969-4.8824 2.2136-.73057 5.4106-3.1453 7.1045-5.3662 1.6939-2.2208 3.7098-4.0378 4.4796-4.0378.7699 0 3.1003 1.7545 5.1786 3.8988l3.779 3.8989-3.0292 4.0734c-3.4412 4.6275-3.2608 8.6075.6382 14.083l2.3607 3.3153-2.9416 1.9274c-1.6178 1.0601-2.9393 2.5795-2.9367 3.3765.012 2.7053-7.5579 18.298-9.4548 19.482-1.3207.82482-2.8582.6691-5.1261-.51915zm68.61-.0217c-2.4441-.63868-2.7833-2.729-.4429-2.729.8933 0 3.3929.35378 5.5548.78617 3.3286.66572 3.5775.92441 1.624 1.6886-2.5646 1.0033-3.7051 1.0463-6.7359.2543zm188.09-15.061c0-.28646.5315-.84931 1.181-1.2508.6496-.40147 1.1811-.1671 1.1811.52083s-.5315 1.2508-1.1811 1.2508c-.6495 0-1.181-.23437-1.181-.52083zm-192.22-3.2033c-.9442-.94418-.9999-2.0386-.1817-3.5676.6493-1.2131.8656-2.7151.4807-3.3379-1.0651-1.7234 1.6031-5.9054 3.7679-5.9054 1.7364 0 1.7296.2028-.076 2.197-1.5607 1.7244-1.7342 2.8653-.8068 5.3046 1.8747 4.9308-.1644 8.3299-3.185 5.3093zm-593.19-3.8831c0-.28646.53148-.84931 1.1811-1.2508s1.1811-.1671 1.1811.52083-.53149 1.2508-1.1811 1.2508-1.1811-.23437-1.1811-.52083zm819.07-3.0224c-.4014-.64959-.1671-1.1811.5209-1.1811.6878 0 1.2507.53149 1.2507 1.1811 0 .64958-.2343 1.1811-.5208 1.1811-.2864 0-.8493-.53149-1.2508-1.1811zm-811.99-11.151c0-.28646.53148-.84931 1.1811-1.2508s1.1811-.1671 1.1811.52083-.53149 1.2508-1.1811 1.2508-1.1811-.23437-1.1811-.52083zm568.11-17.758c-2.2525-5.255-2.5532-5.4913-6.0198-4.7299-3.4558.75903-3.5765.6663-2.2816-1.7532 1.0722-2.0035 2.0662-2.4011 4.607-1.843 2.4493.53796 4.0142-.006 6.4137-2.2299 1.7457-1.6178 3.1857-3.897 3.2-5.0648.037-2.981 4.4228 7.0162 5.4236 12.361.7599 4.0583.665 4.2792-1.1806 2.7503-2.7398-2.2695-5.3773.0849-3.1295 2.7935.897 1.0808 1.0119 1.8217.2827 1.8217-.6759 0-2.065.32079-3.0867.71288-1.3711.52611-2.479-.73627-4.2288-4.8185zm-215.34 2.0868c-1.3204-2.1447-2.0712-11.769-1.1173-14.323 1.0115-2.7084 1.0875-2.6755 4.0966 1.7716 3.6062 5.3297 4.7605 8.7476 3.5706 10.573-1.1391 1.7469-5.8216 3.1616-6.5498 1.9788zm263.76-6.1093c0-.64959.5314-1.5095 1.181-1.911s1.1811-.19845 1.1811.45113c0 .64959-.5315 1.5095-1.1811 1.911s-1.181.19846-1.181-.45113zm185.43-.1394c0-.64959.2343-1.1811.5209-1.1811.2864 0 .8493.53148 1.2507 1.1811.4015.64959.1671 1.1811-.5208 1.1811s-1.2508-.53148-1.2508-1.1811zm-268.1-6.8235c0-.50498 2.3678-3.561 5.2619-6.7912 4.2406-4.7331 5.2722-5.402 5.3148-3.4464.03 1.3346-1.7461 4.3907-3.9449 6.7912-3.7284 4.0705-6.6318 5.5794-6.6318 3.4464zm25.581-3.1514c-.4303-1.1214-.343-2.824.194-3.7836.8322-1.487 1.1785-1.5013 2.3441-.0969 1.0438 1.2578.9979 2.1534-.194 3.7835-1.4639 2.0021-1.6106 2.0082-2.3441.0969zm-904.45-4.6019c.72349-.87175.96573-1.9347.53831-2.3621-.42743-.42742.32465-.77714 1.6713-.77714 1.8669 0 2.3017.56099 1.8307 2.3622-.35872 1.3717-1.611 2.3621-2.9867 2.3621-1.8479 0-2.0797-.34864-1.0536-1.585zm912.38-.31282c-.4402-1.2298-1.0156-2.6345-1.2785-3.1217-.263-.4872.022-.88581.6349-.88581 1.178 0 2.8376 4.8498 1.96 5.7276-.2838.28374-.8761-.49027-1.3164-1.72zm-11.968-3.0814c-1.6589-1.9989-.043-4.844 2.4382-4.2903 1.5557.34729 1.6126.83845.3647 3.1488-1.2041 2.2293-1.7242 2.4411-2.8029 1.1415zm13.964-4.0591c-1.3554-1.7232-2.2673-3.3301-2.0264-3.571.9597-.95976 4.2812 1.1551 6.0473 3.8505 2.716 4.1453-.7289 3.9058-4.021-.27948zm-19.416-4.5721c-1.0516-1.0517-1.9122-2.5238-1.9122-3.2714 0-.74754 1.1663-.19285 2.5917 1.2326 1.4256 1.4255 2.2861 2.8976 1.9123 3.2714-.3738.37377-1.5401-.1809-2.5919-1.2326zm-927.08-.16872c-.43306-.43306-.78738-1.3366-.78738-2.0078 0-.74005.55011-.67032 1.3976.17717.76869.76868 1.123 1.6722.78738 2.0078s-.96455.2559-1.3976-.17716zm-6.6927-1.5748c0-.64959.23437-1.1811.52083-1.1811s.84931.53148 1.2508 1.1811.1671 1.1811-.52083 1.1811-1.2508-.53148-1.2508-1.1811zm55.51-2.3622c0-.64958.23437-1.1811.52083-1.1811s.84931.53149 1.2508 1.1811c.40147.64959.1671 1.1811-.52083 1.1811s-1.2508-.53149-1.2508-1.1811zm890.15-.17999c-1.1839-.66781-3.4285-.89394-4.9881-.5025-2.2866.57388-3.8636-.34599-8.1446-4.7506-6.0476-6.2224-7.2232-8.8459-5.4491-12.161.6856-1.281 1.2465-3.9271 1.2465-5.8803 0-6.411 4.2941-6.1518 7.4419.4491 1.7438 3.657 1.7548 4.4422.1157 8.3647-1.7645 4.223-1.7298 4.4112 1.4176 7.6964 2.2734 2.373 3.9793 3.1786 5.7758 2.7277 1.5186-.38114 3.1563.0912 4.0499 1.1679 2.1269 2.5627 1.1988 4.3915-1.4658 2.8883zm-897.23-7.4273c0-.28646.53148-.84931 1.1811-1.2508.64959-.40147 1.1811-.1671 1.1811.52083 0 .68792-.53148 1.2508-1.1811 1.2508-.64959 0-1.1811-.23437-1.1811-.52082zm185.43-4.2035c0-.64959.53148-1.1811 1.1811-1.1811s1.1811.53148 1.1811 1.1811-.53148 1.1811-1.1811 1.1811-1.1811-.53148-1.1811-1.1811zm-188.97-4.5849c0-.64959.53148-1.5095 1.1811-1.911.64959-.40147 1.1811-.19845 1.1811.45114s-.53148 1.5095-1.1811 1.911c-.64959.40147-1.1811.19845-1.1811-.45114zm-10.031-4.8502c-.41378-.6695.0604-.8675 1.1114-.46417 2.0461.78516 2.4205 1.6317.72159 1.6317-.61125 0-1.4361-.5254-1.833-1.1676zm187.78-.0135c-.40147-.64958-.1671-1.1811.52082-1.1811.68793 0 1.2508.53149 1.2508 1.1811 0 .64959-.23437 1.1811-.52083 1.1811-.28645 0-.8493-.53149-1.2508-1.1811zm-183.07-2.3621c-.40147-.64959-.1671-1.1811.52083-1.1811s1.2508.53148 1.2508 1.1811-.23437 1.1811-.52083 1.1811-.84931-.53148-1.2508-1.1811zm5.3148 0c0-.64959.23437-1.1811.52083-1.1811s.84931.53148 1.2508 1.1811c.40147.64959.1671 1.1811-.52083 1.1811s-1.2508-.53148-1.2508-1.1811zm-81.199-3.1443c-.81199-.32764-1.4763-1.0829-1.4763-1.6784 0-1.7029 5.2135-1.2645 7.7465.65139 2.178 1.6474 2.1155 1.7313-1.2506 1.6784-1.9488-.0306-4.2076-.32375-5.0196-.65139zm29.886-.67004c-1.0592-.59278-3.3993-.75415-5.2003-.3586-1.8009.39555-4.5709.20055-6.1555-.4333-2.5479-1.0192-2.3223-1.1394 1.9499-1.0396 6.2793.14679 7.9556-.87583 6.3508-3.8744-1.139-2.1283-.79659-2.2905 4.8379-2.2905 5.4503 0 13.313 2.4998 14.646 4.6562.886 1.4336-14.314 4.5238-16.429 3.3401zm22.655.74678c-1.3997-1.3996.3399-2.8378 3.4326-2.8378 1.857 0 2.798.55676 2.4952 1.4763-.54453 1.6534-4.6848 2.6044-5.9278 1.3614zm854.48-1.8781c-3.1274-3.1274-.032-6.865 5.6854-6.865 2.5345 0 2.53\n```\n\n----------------------------------------\n\nTITLE: Pushing GTK Release to Remote Repository\nDESCRIPTION: Git commands to push both the release changes and the new version tag to the remote repository.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/RELEASE-HOWTO.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ git push origin\n$ git push origin 4.2.0\n```\n\n----------------------------------------\n\nTITLE: Checking for X11 and Wayland Backends in GTK\nDESCRIPTION: This code snippet demonstrates how to perform both compile-time and run-time checks for X11 and Wayland backends in GTK. It includes conditional compilation directives and runtime type checking to ensure backend-specific calls are made correctly.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/gdk/x11.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#ifdef GDK_WINDOWING_X11\n#include <gdk/x11/gdkx.h>\n#endif\n#ifdef GDK_WINDOWING_WAYLAND\n#include <gdk/wayland/gdkwayland.h>\n#endif\n\n#ifdef GDK_WINDOWING_X11\n  if (GDK_IS_X11_DISPLAY (display))\n    {\n      // make X11-specific calls here\n    }\n  else\n#endif\n#ifdef GDK_WINDOWING_WAYLAND\n  if (GDK_IS_WAYLAND_DISPLAY (display))\n    {\n      // make Wayland-specific calls here\n    }\n  else\n#endif\n  g_error (\"Unsupported GDK backend\");\n```\n\n----------------------------------------\n\nTITLE: Defining Braille Dot Combinations in Hexadecimal for GTK\nDESCRIPTION: This snippet shows the hexadecimal mappings for various Braille dot combinations. Each line represents a unique Braille character, with the hexadecimal code on the left and the corresponding dot combination on the right.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n0x100284b braille_dots_1247\n0x100284c braille_dots_347\n0x100284d braille_dots_1347\n0x100284e braille_dots_2347\n0x100284f braille_dots_12347\n0x1002850 braille_dots_57\n0x1002851 braille_dots_157\n0x1002852 braille_dots_257\n0x1002853 braille_dots_1257\n0x1002854 braille_dots_357\n// ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Documenting GTK Function in C\nDESCRIPTION: Example of documenting a GTK function using GObject Introspection style comments. Shows proper format for function description, parameter documentation, and return value documentation.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/README.md#2025-04-18_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/**\n * gtk_foo_set_bar:\n * @self: a foo widget\n * @bar: (nullable): the bar to set\n *\n * Sets the given `GtkBar` instance on a foo widget.\n *\n * Returns: `TRUE` if the bar was set\n */\ngboolean\ngtk_foo_set_bar (GtkFoo *self,\n                 GtkBar *bar)\n{\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Symbols in GTK\nDESCRIPTION: This snippet defines hexadecimal keycodes for various currency symbols in the GTK framework.\nSOURCE: https://github.com/gnome/gtk/blob/main/gdk/keynames.txt#2025-04-18_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n0x10020a0 EcuSign\n0x10020a1 ColonSign\n0x10020a2 CruzeiroSign\n0x10020a3 FFrancSign\n0x10020a4 LiraSign\n0x10020a5 MillSign\n0x10020a6 NairaSign\n0x10020a7 PesetaSign\n0x10020a8 RupeeSign\n0x10020a9 WonSign\n0x10020aa NewSheqelSign\n0x10020ab DongSign\n```\n\n----------------------------------------\n\nTITLE: GTK Window Position Management\nDESCRIPTION: Documentation for window positioning functions including move operations and position constraints.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/sizing-test.txt#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngtk_window_move():\n - always causes a configure request if the window is mapped, \n   unless the last configure request we sent was for the same\n   position being moved to\n - position may be negative to move windows offscreen\n - if GTK_WIN_POS_CENTER_ALWAYS (or other future position \n   constraints we may add) is in effect, the move\n   request is clamped to obey the constraints\n - overrides all GTK_WIN_POS_ except CENTER_ALWAYS\n```\n\n----------------------------------------\n\nTITLE: Documenting GTK Type Structure in C\nDESCRIPTION: Example of documenting a GTK type structure using GObject Introspection style comments. Shows the format for describing type structures and their private members.\nSOURCE: https://github.com/gnome/gtk/blob/main/docs/reference/README.md#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/**\n * GtkFoo:\n *\n * A foo widget instance.\n */\nstruct _GtkFoo\n{\n  /*< private >*/\n  GtkWidget parent_instance;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up GTK Development Environment\nDESCRIPTION: Instructions for forking, cloning the GTK repository, and setting up the initial development environment using Git.\nSOURCE: https://github.com/gnome/gtk/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://gitlab.gnome.org/yourusername/gtk.git\n$ cd gtk\n```"
  }
]