[
  {
    "owner": "verifytests",
    "repo": "verify",
    "content": "TITLE: Recommending Text File Settings for Verified Snapshots (.gitattributes)\nDESCRIPTION: Lists .gitattributes entries to enforce consistent line endings (LF) and encoding (UTF-8 with BOM) on text-based verified snapshot files. Settings help ensure snapshot integrity across systems and avoid platform-specific diffs in CI/CD or when collaborating. This snippet should be added to .gitattributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample XunitV3 Test with Verify\nDESCRIPTION: Sample XunitV3 test that demonstrates how to use Verify with a simple person object, showing the basic usage pattern of getting data and calling Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: This snippet shows a sample NUnit test using Verify. It demonstrates how to use the [Test] attribute, async Task, and the Verify() method to perform a verification test on a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    await Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Sample test class showing how to run Verify convention checks using Xunit test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example of a simple Verify test using Xunit, demonstrating how to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This sample test demonstrates how to use Verify with Xunit. It creates a Person object, serializes it to JSON, and then uses Verify to compare the result against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    var json = JsonConvert.SerializeObject(person);\n    return Verify(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verify Test with TUnit (C#)\nDESCRIPTION: Demonstrates a basic TUnit test using VerifyTests. The `Sample` class contains a `Test` method marked with `[Test]`. Inside the test, an object `person` is obtained from `ClassBeingTested.FindPerson()`, and `Verify(person)` is called to perform snapshot testing. VerifyTests serializes the `person` object and compares it against a previously approved `.verified` snapshot file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files (.editorconfig)\nDESCRIPTION: Provides EditorConfig settings for text-based received and verified files (`.json`, `.txt`, `.xml`) to ensure UTF-8 BOM charset, LF line endings, and no final newline. This aligns editor behavior with VerifyTests conventions when manually editing these files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with TUnit\nDESCRIPTION: A sample TUnit test that demonstrates how to use Verify with TUnit to verify an object returned by a method. This shows the basic pattern for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A simple example of a Fixie test class that uses Verify to snapshot test a Person object. This demonstrates the basic usage pattern of Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test with Verify\nDESCRIPTION: Example test method using Verify with XunitV3 to snapshot test a person object returned from a class being tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with MSTest\nDESCRIPTION: Sample MSTest class demonstrating a basic test that uses Verify to test the output of a method. This shows the standard pattern for verification-based testing in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Expecto Test with Verify\nDESCRIPTION: Demonstrates how to write an Expecto test using Verify to compare results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Static Settings Configuration for Verify\nDESCRIPTION: Demonstrates how to configure static global settings for Verify using a module initializer. These settings apply to all verification operations in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class StaticSettings\n{\n    [ModuleInitializer]\n    public static void Initialize()\n    {\n        VerifierSettings.DerivePathInfo(\n            sourceFile => new(\n                directory: Path.Combine(\n                    Path.GetDirectoryName(sourceFile)!,\n                    \"Snapshots\"),\n                typeName: null,\n                methodName: null));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Tests with xUnitV3\nDESCRIPTION: Example of how to use Verify with xUnitV3 test framework. The test retrieves a Person object and uses Verify to create or compare a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Xunit\nDESCRIPTION: A sample Xunit test that demonstrates how to use Verify with a simple test case. It retrieves a person object from a test class and uses Verify() to perform snapshot verification on it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an NUnit test. It uses the [Test] attribute and calls VerifyChecks.Run() to perform the verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit v3, including the test SDK and Verify.XunitV3\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: An example of how to write a test using Verify with Xunit, including setting up a test method and verifying an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic NUnit Test with Verify\nDESCRIPTION: A sample NUnit test using Verify to test the output of a method. The test retrieves a person object and verifies its structure and content without writing explicit assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test with Verify Snapshot Assertion - C#\nDESCRIPTION: Provides a basic XunitV3 test class showing how to use the Verify framework to assert on a returned object (here, a 'person'). The asynchronous test calls Verify, which will snapshot and compare the result. Requires Verify.XunitV3, Xunit, and project properly configured for implicit usings or explicit use of Verifier.Verify. Inputs: output of ClassBeingTested.FindPerson. Outputs: test pass/fail based on snapshot comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying FileStream in C#\nDESCRIPTION: This snippet shows how to verify a FileStream without specifying an extension. The Verify framework can automatically determine the file type for FileStreams.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/binary.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task FileStream() =>\n    Verify(File.OpenRead(\"sample.txt\"));\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with XunitV3\nDESCRIPTION: Example C# test class using Verify with XunitV3. The test verifies the result from a ClassBeingTested.FindPerson() method using the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: This snippet shows a complete example of an MSTest test class that uses Verify. It includes a test method that creates a Person object and verifies its serialized output using the Verify extension method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyTests;\n\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Dob = new(2000, 10, 1),\n        };\n        return Verify(person);\n    }\n}\n\npublic class Person\n{\n    public string GivenNames { get; set; }\n    public string FamilyName { get; set; }\n    public DateTime Dob { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Snapshot Tool - Bash\nDESCRIPTION: This command installs the Verify.Terminal global tool using the .NET CLI, allowing for command-line management of verification snapshots. Prerequisite: .NET SDK must be installed. The tool is optional but helpful for snapshot review and management outside the IDE. The installation is global, meaning the tool is available anywhere on the system.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Text Verification\nDESCRIPTION: This EditorConfig block ensures that editors respect the conventions for verified and received files, especially with regards to encoding and end-of-line characters. This is crucial for maintaining file integrity across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Test with Verify and NUnit\nDESCRIPTION: This C# code snippet shows a sample test implementation using Verify with NUnit. It demonstrates how to set up a test method, create a person object, and use Verify to assert the object's state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps for Publishing Received Files\nDESCRIPTION: This YAML configuration allows Azure DevOps to handle `.received` files when test steps fail, by staging and publishing these files as build artifacts. Ensure the Azure DevOps pipeline is configured to recognize these YAML steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Image Comparer in C#\nDESCRIPTION: A sample implementation of a custom image comparer that only compares file sizes. Returns CompareResult.Equal if sizes match, otherwise CompareResult.NotEqual. This demonstrates how to implement a custom binary file comparison function.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/comparer.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Task<CompareResult> CompareImages(\n    Stream received,\n    Stream verified,\n    IReadOnlyDictionary<string, object> context)\n{\n    // Fake comparison\n    if (received.Length == verified.Length)\n    {\n        return Task.FromResult(CompareResult.Equal);\n    }\n\n    var result = CompareResult.NotEqual();\n    return Task.FromResult(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: This snippet provides a complete example of a Verify test using Expecto. It demonstrates how to set up a test module, configure Verify settings, and write a test that verifies an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests\n\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testList \"Tests\" [\n        testCase \"Test\" <| fun _ ->\n            let settings = VerifySettings()\n            settings.UseDirectory(\"Snapshots\")\n\n            let target = {|\n                GivenNames = \"John\"\n                FamilyName = \"Smith\"\n                Spouse = \"Jill\"\n                Address = {|\n                    Street = \"1 Puddle Lane\"\n                    Country = \"USA\"\n                |}\n                Children = [|\n                    \"Sam\"\n                    \"Mary\"\n                |]\n            |}\n\n            Verifier.Verify(target, settings)\n            |> Async.RunSynchronously\n    ]\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: This code snippet shows a sample Xunit test using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Lines Containing Multiple Strings using Verify .NET in C#\nDESCRIPTION: Removes all lines from the test output that contain any of a provided set of substrings using ScrubLinesContaining in Verify .NET. By default, the operation is case insensitive (StringComparison.OrdinalIgnoreCase). This utility is commonly used to exclude content dynamically from snapshot tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Remove lines containing \\'text1\\' or \\'text2\\' (case insensitive by default)\nsettings.ScrubLinesContaining(\"text1\", \"text2\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Fixie Test with Verify\nDESCRIPTION: A simple example showing how to write a Fixie test that uses Verify to snapshot test a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using xUnitV3 with Verify\nDESCRIPTION: Shows how to integrate Verify with xUnitV3. The test creates a ClassBeingTested instance and verifies it by comparing against a stored snapshot file.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new ClassBeingTested\n    {\n        Title = \"Mr\",\n        Name = \"John Smith\",\n        Age = 10\n    };\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto Testing\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto testing framework, including YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with Xunit\nDESCRIPTION: This example shows how to write a simple Verify test using Xunit. It demonstrates finding a person object and verifying its contents using the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: The command installs DiffEngineTray, a tool that monitors changes in test snapshots and provides a user interface for managing these changes. This tool is optional for running comparison verifications but is recommended for improved workflow.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using XUnit v3. It creates a test method that calls VerifyChecks.Run() to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Verified Output Format for Custom Combination Serialization\nDESCRIPTION: This snippet contains a sample output from a test demonstrating custom combination serialization. The format shows serialized data including fields like streetNumbers and cities with results formatted accordingly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n{\n  streetNumbers, streets   , cities : Result,\n  1, Smith St, Sydney: 1 Smith St, Sydney,\n  1, Smith St, Chicago: 1 Smith St, Chicago,\n  1, Wallace St, Sydney: 1 Wallace St, Sydney,\n  1, Wallace St, Chicago: 1 Wallace St, Chicago,\n  10, Smith St, Sydney: 10 Smith St, Sydney,\n  10, Smith St, Chicago: 10 Smith St, Chicago,\n  10, Wallace St, Sydney: 10 Wallace St, Sydney,\n  10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Object Ordering in Verify Tests\nDESCRIPTION: This snippet shows how to enable ordering of JSON and JObject properties in Verify tests. It uses a module initializer to set the SortJsonObjects option globally.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.SortJsonObjects();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with MSTest\nDESCRIPTION: Sample MSTest test class demonstrating how to use Verify to snapshot test a Person object returned from a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add necessary NuGet packages for using Verify with Xunit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: Example test class showing how to use Verify with Fixie to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Basic example of an MSTest test class using Verify to snapshot test a person object returned from a method. Shows the standard pattern for verification testing with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages in .NET CLI\nDESCRIPTION: Install essential testing packages like Microsoft.NET.Test.Sdk and Verify.Xunit using the .NET CLI to enable Xunit and Verify for testing. It is assumed that the .NET SDK is installed on the system.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files from Source Control (.gitignore)\nDESCRIPTION: Provides `.gitignore` entries to prevent `*.received.*` files and `*.received/` directories (when using UseSplitModeForUniqueDirectory) from being tracked by Git. These files represent the actual output during a test run and should not typically be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: This code demonstrates how to run Verify checks using Expecto. It creates a test that calls VerifyChecks.Run() to check conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet verifyConventions () =\n    task {\n        do! VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test Using MSTest\nDESCRIPTION: A complete sample test using Verify with MSTest. It demonstrates how to create a verification test that captures and verifies the output of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task PersonTest()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"1 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n\npublic class Person\n{\n    public string GivenNames { get; set; }\n    public string FamilyName { get; set; }\n    public string Spouse { get; set; }\n    public Address Address { get; set; }\n}\n\npublic class Address\n{\n    public string Street { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hashed Parameters in Verify Tests (Fluent Method)\nDESCRIPTION: Shows how to use hashed parameters in a Verify test using the fluent method. This approach provides a more concise syntax for enabling parameter hashing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task HashParametersUsageFluent(string arg) =>\n    Verify(arg)\n        .HashParameters();\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Snapshot Test using Verify - C#\nDESCRIPTION: Defines a TUnit test class with a sample test method that calls Verify(person), where 'person' is obtained from ClassBeingTested.FindPerson(). Demonstrates typical usage of Verify in a TUnit test to perform snapshot comparison on complex objects. Requires references to TUnit and Verify.TUnit. The method returns a Task; the test runner executes and reports verification results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example test showing how to use Verify with Xunit to test a class method and verify its output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: An example NUnit test that demonstrates how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default DateTimeOffset Comparer for .NET (C#)\nDESCRIPTION: This snippet implements the default IEqualityComparer<DateTimeOffset>, considering both the instant and the offset (time zone). Used automatically for DateTimeOffset comparisons within the verification/test infrastructure. It adds the integer representation of TotalMinutes of the offset to the hash code to ensure differing time zones yield unique hashes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nclass DateTimeOffsetComparer :\n    IEqualityComparer<DateTimeOffset>\n{\n    public bool Equals(DateTimeOffset x, DateTimeOffset y) =>\n        x == y && x.Offset == y.Offset;\n\n    public int GetHashCode(DateTimeOffset obj) =>\n        obj.GetHashCode() + (int) obj.Offset.TotalMinutes;\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters for Verified Files in xUnit (Fluent)\nDESCRIPTION: Demonstrates a fluent approach to hashing parameters when naming verified files in xUnit. This method chains the UseParameters and HashParameters calls directly to the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task HashParametersUsageFluent(string arg) =>\n    Verify(arg)\n        .UseParameters(arg)\n        .HashParameters();\n```\n\n----------------------------------------\n\nTITLE: Verifying Anonymous Types with xUnit\nDESCRIPTION: Shows anonymous type verification implementation using xUnit. Creates and verifies two Person objects using the Fact attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/anonymous-types.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Anon()\n{\n    var person1 = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\"\n    };\n    var person2 = new Person\n    {\n        GivenNames = \"Marianne\",\n        FamilyName = \"Aguirre\"\n    };\n\n    return Verify(\n        new\n        {\n            person1,\n            person2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Image Comparer in C#\nDESCRIPTION: A sample implementation of a custom comparer that only compares image sizes rather than pixel content. It returns CompareResult.NotEqual with a descriptive message when sizes differ.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/comparer.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass ImageComparer :\n    IComparer\n{\n    public Task<CompareResult> Compare(Stream received, Stream verified, IReadOnlyDictionary<string, object> context)\n    {\n        using var verifiedImage = Image.FromStream(verified);\n        using var receivedImage = Image.FromStream(received);\n        if (verifiedImage.Size == receivedImage.Size)\n        {\n            return Task.FromResult(CompareResult.Equal);\n        }\n\n        return Task.FromResult(\n            CompareResult.NotEqual(\n                $\"Image sizes differ. Expected: {verifiedImage.Size}, but was: {receivedImage.Size}\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with XUnit V3\nDESCRIPTION: This snippet demonstrates a minimal implementation of a Verify test using XUnit V3, showing how to create a Fact test method that verifies an object from a class being tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit V3\nDESCRIPTION: A code snippet showing how to run Verify checks in an XUnit V3 test. This ensures that all conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public void Run()\n    {\n        VerifyChecks.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to ensure DiffPlex is set up before any tests run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members That Throw Specific Exceptions in C#\nDESCRIPTION: Demonstrates how to configure Verify to ignore members that throw NotImplementedException or NotSupportedException during serialization. This is the default behavior for these exception types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/members-throw.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIgnoreMembersThatThrow<NotImplementedException>();\nIgnoreMembersThatThrow<NotSupportedException>();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify Source Generator for a Class (MSTest)\nDESCRIPTION: C# code snippet showing how to apply the `[UsesVerify]` attribute directly to a test class. This attribute opts-in the specific class for processing by the Verify.MSTest source generator, enabling the `Verify()` extension method within that class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Test with XUnit v3 and Verify\nDESCRIPTION: Example test implementation using XUnit v3 and Verify, demonstrating how to test a method and verify its output against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Class with xUnit V3 - CSharp\nDESCRIPTION: This is a sample xUnit V3 test class demonstrating Verify snapshot testing with an asynchronous Fact method. It creates a person object using ClassBeingTested.FindPerson() and verifies it. Dependencies: xUnit V3, Verify, and a reference to the test subject class. The method is asynchronous and returns a Task. Input depends on ClassBeingTested.FindPerson; output verifies the result using snapshot testing conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and MSTest NuGet Packages - .NET Project (csproj)\nDESCRIPTION: Demonstrates the inclusion of necessary NuGet dependencies for MSTest and Verify in a .NET test project's .csproj file. Required dependencies include Microsoft.NET.Test.Sdk for test host support, MSTest for test framework functionality, and Verify.MSTest for snapshot verification. Update versions as needed for compatibility. No other parameters are needed beyond the package references themselves.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Microsoft.NET.Test.Sdk\\\" Version=\\\"17.13.0\\\" />\\n<PackageReference Include=\\\"MSTest\\\" Version=\\\"3.8.3\\\" />\\n<PackageReference Include=\\\"Verify.MSTest\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using InlineData with Fluent API in Xunit Verify\nDESCRIPTION: Shows a cleaner fluent syntax for configuring parameters with Xunit InlineData theories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task InlineDataUsageFluent(string arg) =>\n    Verify(arg)\n        .UseParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with Xunit, including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Testing With Header Option for Combination Serialization in C#\nDESCRIPTION: This C# test snippet executes a combination test with header enabled, leveraging the Combination function to verify a build address operation. The test demonstrates enriching the serialization output with column headers using variable names from input collections.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task BuildAddressWithHeaderTest()\n{\n    int[] number = [1, 10];\n    string[] street = [\"Smith St\", \"Wallace St\"];\n    string[] city = [\"Sydney\", \"Chicago\"];\n    return Combination(header: true)\n        .Verify(\n            BuildAddress,\n            number,\n            street,\n            city);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest with Verify\nDESCRIPTION: This C# snippet illustrates a simple sample test using MSTest framework to verify a person object. Ensure the necessary testing libraries are referenced in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Guids in C#\nDESCRIPTION: This snippet demonstrates the default guid sanitization process in verification tests. It replaces guid values with a counter-based system for repeatable tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new GuidTarget(\"ebced679-45d3-4653-8791-3d969c4a986c\");\nvar settings = new VerifySettings();\nsettings.ScrubLinesWithReplace(s => s.Replace(target.DataId.ToString(), \"Guid\"));\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verification Test\nDESCRIPTION: Sample MSTest verification test that demonstrates the basic pattern of testing with Verify.MSTest, capturing the result of a method and verifying its output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test\nDESCRIPTION: Example test implementation showing how to use Verify with XUnit V3 to test a person finder method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Naming for Verified Tests (Instance Method) - C#\nDESCRIPTION: Illustrates how to use custom parameter naming in verified tests using the instance method approach with xUnit. It demonstrates passing a formatted string to IgnoreParametersForVerified.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParams(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified($\"Number{arg}\");\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing BuildAddress with Exception Capture in C#\nDESCRIPTION: Demonstrates how to use Combination() with exception capture enabled. It tests the BuildAddress method with inputs that will trigger exceptions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task BuildAddressExceptionsTest()\n{\n    int[] number = [-1, 0, 10];\n    string[] street = [\"\", \" \", \"Valid St\"];\n    string[] city = [null!, \"Valid City\"];\n    return Combination(captureExceptions: true)\n        .Verify(\n            BuildAddress,\n            number,\n            street,\n            city\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Class Being Tested in Verify Example\nDESCRIPTION: Defines a sample class that is used in verification tests. Contains properties for Title, Name, and Age that will be serialized and verified in snapshot tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ClassBeingTested\n{\n    public string? Title { get; set; }\n    public string? Name { get; set; }\n    public int Age { get; set; }\n    public DateTimeOffset DateOfBirth { get; set; } = new(2000, 1, 1, 0, 0, 0, TimeSpan.Zero);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Stream with Extension in C#\nDESCRIPTION: This snippet demonstrates how to verify a binary stream by providing an explicit file extension. It reads a PNG file into a MemoryStream and verifies it using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/binary.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task StreamWithExtension()\n{\n    var stream = new MemoryStream(File.ReadAllBytes(\"sample.png\"));\n    return Verify(stream, \"png\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Fixie Test Project for Verify – C#\nDESCRIPTION: Implements both ITestProject and IExecution interfaces in C# to integrate Verify with Fixie. Configures the VerifierSettings to use the correct assembly, and wraps tests in ExecutionState.Set to properly manage state during parallel test execution. Add this test project setup to ensure proper snapshot isolation and Fixie convention compliance. Requires Fixie and Verify.Fixie dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\\n    ITestProject,\\n    IExecution\\n{\\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\\n    {\\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\\n    }\\n\\n    public async Task Run(TestSuite testSuite)\\n    {\\n        foreach (var testClass in testSuite.TestClasses)\\n        {\\n            foreach (var test in testClass.Tests)\\n            {\\n                if (test.HasParameters)\\n                {\\n                    foreach (var parameters in test\\n                                 .GetAll<TestCase>()\\n                                 .Select(_ => _.Parameters))\\n                    {\\n                        using (ExecutionState.Set(testClass, test, parameters))\\n                        {\\n                            await test.Run(parameters);\\n                        }\\n                    }\\n                }\\n                else\\n                {\\n                    using (ExecutionState.Set(testClass, test, null))\\n                    {\\n                        await test.Run();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Verify with MSTest\nDESCRIPTION: Example showing how to use Verify in an MSTest test class. The class is marked with TestClass attribute and includes a test method that finds a person object and verifies it.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using xUnit with Verify\nDESCRIPTION: Demonstrates how to use Verify with xUnit testing framework. The test creates a ClassBeingTested instance and verifies its serialized representation against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new ClassBeingTested\n    {\n        Title = \"Mr\",\n        Name = \"John Smith\",\n        Age = 10\n    };\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Verify Tests in Azure DevOps Pipeline\nDESCRIPTION: This YAML snippet adds a build step that sets a flag when the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps to determine whether to publish Verify .received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test class that demonstrates the basic usage of Verify in a test method, showing how to verify the state of an object returned by a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Converter Implementation\nDESCRIPTION: Demonstrates how to create a custom JSON converter for a specific type (Company) using WriteOnlyJsonConverter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nclass CompanyConverter :\n    WriteOnlyJsonConverter<Company>\n{\n    public override void Write(VerifyJsonWriter writer, Company company) =>\n        writer.WriteMember(company, company.Name, \"Name\");\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying All Files in a Zip Archive Using VerifyZip in Xunit v3 (C#)\nDESCRIPTION: Demonstrates how to use the VerifyZip helper in Xunit v3 C# test projects to verify all files within a zip archive for snapshot testing. This pattern creates a unique test directory and a separate verification target for each file in the archive, ensuring comprehensive change detection. Depends on Verify library and Xunit v3; requires referencing test data as a zip archive.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-zip.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyZipXunitV3\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Serializer Settings in Verify Testing\nDESCRIPTION: Demonstrates how to apply scoped serialization settings to a specific verification. Shows both direct settings approach and fluent interface configuration, with TypeNameHandling set to include full type information.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task ScopedSerializer()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\"\n    };\n    var settings = new VerifySettings();\n    settings.AddExtraSettings(_ => _.TypeNameHandling = TypeNameHandling.All);\n    return Verify(person, settings);\n}\n\n[Fact]\npublic Task ScopedSerializerFluent()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\"\n    };\n    return Verify(person)\n        .AddExtraSettings(_ => _.TypeNameHandling = TypeNameHandling.All);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: An example of a Verify test using MSTest, demonstrating basic usage and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using XunitV3\nDESCRIPTION: A sample test class demonstrating how to use Verify with XunitV3. The test verifies the output of a method by comparing it to a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit\nDESCRIPTION: Test class implementation for running Verify convention checks using XUnit V3 fact attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Test with Verify and XUnit v3\nDESCRIPTION: Basic example of a test using Verify with XUnit v3. The test creates an object from a class being tested and verifies its structure and content against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XunitV3 NuGet Packages for Verify\nDESCRIPTION: Required NuGet package references needed to set up Verify with XunitV3, including the core testing packages and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of a test class inheriting from VerifyBase to use Verify functionality without explicit attribute marking.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verification Test with NUnit\nDESCRIPTION: A sample NUnit test that demonstrates the basic pattern for Verify tests. The test retrieves an object from a class being tested and uses Verify to create or validate a snapshot of that object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Members by Expression in Verify Tests (C#)\nDESCRIPTION: Demonstrates how to scrub specific members of a type using expressions in Verify tests. Includes both local settings and fluent API approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreExplicitTarget\n{\n    Include = \"Value\",\n    Field = \"Value\",\n    Property = \"Value\",\n    PropertyWithPropertyName = \"Value\"\n};\nvar settings = new VerifySettings();\nsettings.ScrubMembers<IgnoreExplicitTarget>(\n    _ => _.Property,\n    _ => _.PropertyWithPropertyName,\n    _ => _.Field,\n    _ => _.GetOnlyProperty,\n    _ => _.PropertyThatThrows);\nreturn Verify(target, settings);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreExplicitTarget\n{\n    Include = \"Value\",\n    Field = \"Value\",\n    Property = \"Value\"\n};\nreturn Verify(target)\n    .ScrubMembers<IgnoreExplicitTarget>(\n        _ => _.Property,\n        _ => _.Field,\n        _ => _.GetOnlyProperty,\n        _ => _.PropertyThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Verifying File Without Unit Test in C#\nDESCRIPTION: This example demonstrates how to use VerifyFile functionality outside of a unit test context, using InnerVerifier for external file verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-file.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic async Task VerifyExternalFile()\n{\n    using var verifier = new InnerVerifier(targetDirectory, name: \"sample\");\n    await verifier.VerifyFile(filePath);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample XUnit v3 Test with Verify\nDESCRIPTION: Example XUnit v3 test class demonstrating how to use Verify to snapshot test a person object returned from a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - shell\nDESCRIPTION: Installs the Verify.DiffPlex package, which enables inline textual diff highlighting in Verify snapshot comparisons. Run the command in the context of your test project. Verify.Xunit and its dependencies must already be present.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files, setting line endings to LF and encoding to UTF-8.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files in Azure DevOps (YAML)\nDESCRIPTION: This Azure DevOps pipeline task (PublishBuildArtifacts@1) publishes the contents of the staged Verify directory (`$(Build.ArtifactStagingDirectory)/Verify`) as a build artifact named `Verify`. It only runs if the `publishverify` variable is set to `Yes` (`condition: eq(variables['publishverify'], 'Yes')`), making the received files available for download from the build results, typically to diagnose test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: F# code snippet showing a sample Expecto test using Verify to compare test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: An example of a Fixie test method using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with Verify and XunitV3\nDESCRIPTION: A basic example of a test using Verify with XunitV3, demonstrating the pattern of getting data from a system under test and verifying it with a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which allows managing snapshots from the command line, providing additional flexibility for working with verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase for MSTest\nDESCRIPTION: An example showing how to create an MSTest verification test by inheriting from VerifyBase, which provides the necessary marker for the source generator.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with NUnit\nDESCRIPTION: Example of a Verify test using NUnit, demonstrating how to verify the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with Xunit. These packages include the .NET Test SDK, Verify.Xunit, Xunit, and the Xunit Visual Studio runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool Globally Using dotnet CLI - Shell\nDESCRIPTION: Installs Verify.Terminal, a global .NET CLI tool for managing Verify snapshot files from the command line. Allows users to list, view, accept, or discard received snapshots. Run this command in any terminal (PowerShell, CMD, or bash).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example test that demonstrates how to use Verify with Xunit to snapshot test a Person object returned by a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify testing with NUnit, including the test SDK, NUnit framework, NUnit adapter, and Verify.NUnit package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and xUnit\nDESCRIPTION: Commands to add necessary NuGet packages for Verify and xUnit testing in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test in Xunit\nDESCRIPTION: A sample test class demonstrating how to verify an object returned by a tested class function using the Verify library. This requires Xunit and Verify.Xunit installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic XML Verification using VerifyXml in C#\nDESCRIPTION: This C# snippet demonstrates a basic test method using `VerifyXunit.VerifyXml`. It takes an XML string, performs pretty-printing, and compares it against a `.verified.xml` snapshot file for approval.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Xml()\n{\n    var xml = \"<body><node>text</node></body>\";\n    return VerifyXml(xml);\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test in C#\nDESCRIPTION: An example of a snapshot test that automatically captures and verifies the state of the test subject.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/compared-to-assertion.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSnapshotTest\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: A code snippet demonstrating how to run Verify conventions check in an MSTest setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public void RunChecks()\n    {\n        VerifyChecks.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Checks with XunitV3\nDESCRIPTION: A test class that implements VerifyChecks.Run() to ensure all verification conventions are properly configured and followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Combination Test Sample\nDESCRIPTION: Example of a basic combination test implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSample\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This snippet shows a complete sample Xunit test using Verify. It demonstrates how to create a Person object, use Verify to compare it against a snapshot, and handle any differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie test runner\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Sample test code demonstrating how to use Verify with Xunit. This snippet shows the basic structure of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit testing framework. Includes test SDK, Verify.Xunit, xunit core, and Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for setting up Verify tests with Xunit. It includes Verify.Xunit for the core functionality and Verify.ImageMagick for image comparison capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Verify.ImageMagick\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie TestProject for Verify Integration\nDESCRIPTION: Implementation of Fixie's ITestProject and IExecution interfaces to properly integrate Verify with Fixie. This handles assigning the target assembly and managing execution state for each test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: Provides a sample Xunit test using Verify. This test demonstrates how to use the VerifyXunit attribute and the Verify() method to perform snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Recording Status in C#\nDESCRIPTION: Demonstrates how to check the status of Recording using the IsRecording method. This can be useful when the cost of capturing data to add to recording is high.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic void IsRecording()\n{\n    Assert.False(Recording.IsRecording());\n    Recording.Start();\n    Assert.True(Recording.IsRecording());\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Scrubbing Types\nDESCRIPTION: Shows how to configure type scrubbing globally for all verifications in a project. This applies the type scrubbing consistently across all tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.ScrubMembersWithType<ToIgnore>();\n```\n\n----------------------------------------\n\nTITLE: Basic Fixie Test with Verify\nDESCRIPTION: A sample Fixie test class demonstrating how to use Verify to snapshot test the result of a method returning a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: A code snippet demonstrating how to check Verify conventions by calling VerifyChecks.Run() in an XunitV3 test. This ensures that your verification setup follows recommended practices.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public void Run()\n    {\n        // Verify all settings and conventions.\n        // Will throw an exception is there are any problems.\n        // Add this test to help identify any configuration issues\n        // ReSharper disable once InvokeAsExtensionMethod\n        VerifyChecks.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: This snippet demonstrates how to create a test method that runs Verify checks using XUnit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly and Class-level Source Generator Marker for UsesVerify (C# attribute syntax)\nDESCRIPTION: Shows how to opt-in to the Verify source generator by applying the UsesVerify attribute at the assembly or class level. Enables Verify's advanced source generator features on marked tests/classes. Place in AssemblyInfo.cs for global application or atop specific test classes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[assembly: UsesVerify]\n```\n\nLANGUAGE: cs\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test using TUnit in C#\nDESCRIPTION: The C# snippet provides a sample test using TUnit where a Verify method is called on a test object. It demonstrates the basic setup for performing a test verification with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with XUnit v3\nDESCRIPTION: Example of a Verify test using XUnit v3, demonstrating how to write and structure a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test implementation using Verify with XUnit V3\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify\nDESCRIPTION: A complete example showing a basic test using Verify with XunitV3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Verification Test\nDESCRIPTION: Example test implementation showing how to use Verify with XUnit V3 to test a class method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verified Test Using XunitV3 (C#)\nDESCRIPTION: A sample xUnit V3 test class verifying a 'person' object using Verify. Illustrates the integration between xUnit and Verify, using [Fact] and returning Task from the test method. person is fetched from the system under test. Requires: Verify, xunit.v3, Async handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps YAML\nDESCRIPTION: This YAML snippet defines a task to publish the staged Verify files as build artifacts. It only executes if the 'publishverify' flag is set to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: A complete example of an Expecto test using Verify. The test demonstrates verifying a Target object with specified properties, showing proper async handling in F# with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[<Test>]\nlet Sample () =\n    let target = Target(\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = Address(\n            Street = \"1 Puddle Lane\",\n            Country = \"USA\"\n        )\n    )\n\n    Verifier.Verify(target)\n    |> Async.AwaitTask\n    |> Async.RunSynchronously\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Collect Received Files on Test Failure\nDESCRIPTION: PowerShell script for AppVeyor build configuration to collect and upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text comparison behavior to highlight differences inline instead of showing the full content of both files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and NUnit Packages via dotnet CLI - Shell\nDESCRIPTION: Shows the exact sequence of shell commands to install the required packages to integrate Verify and NUnit into a test project using the dotnet CLI. No additional dependencies are required beyond the .NET SDK and NuGet. These commands should be run at the root of your test project. Each package fulfills a specific testing requirement, and all are essential for using Verify with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with NUnit\nDESCRIPTION: A complete example of a Verify test using NUnit, demonstrating the basic pattern for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\nusing VerifyNUnit;\n\n[TestFixture]\npublic class Tests\n{\n    [Test]\n    public Task Test()\n    {\n        return Verifier.Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: Basic example of a NUnit test that uses Verify for snapshot testing. Demonstrates the standard pattern for creating a verify test with object initialization and verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verifier.Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in MSTest\nDESCRIPTION: Test class implementation for running verification checks using MSTest framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Lines Containing Specific Text in C#\nDESCRIPTION: Demonstrates how to use ScrubLines to remove lines containing specific text from the verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nverifySettings.ScrubLines(line => line.Contains(\"text\"));\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Example NUnit test class showing how to use Verify to test a method that returns a person object, demonstrating the basic verification pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Tool\nDESCRIPTION: Command to install the `DiffEngineTray` .NET global tool using the .NET CLI. `DiffEngineTray` is an optional but recommended companion tool for Verify that runs in the Windows tray, monitoring snapshot changes and providing UI to accept or reject them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Example test showing basic usage of Verify with NUnit to test a person finder method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool\nDESCRIPTION: Command to install the `verify.tool` .NET global tool using the .NET CLI. `Verify.Terminal` provides optional command-line capabilities for managing Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in NUnit\nDESCRIPTION: NUnit test fixture to run Verify checks, ensuring that all conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: File Verification with Additional Info Placeholder (VerifyTests)\nDESCRIPTION: Placeholder representing code that verifies a file while providing additional context via an 'info' object. This object is serialized to JSON and included in the verification process, often aiding debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-file.source.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsnippet: VerifyFileWithInfo\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto Testing\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto testing framework, including YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions with VerifyChecks in Fixie\nDESCRIPTION: Example of how to check conventions using VerifyChecks.Run() in a Fixie test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Named Dates and Times at Instance Level\nDESCRIPTION: Assigning specific names to date/time values so they're consistently replaced with those names during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nNamedDatesAndTimesInstance\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test fixture demonstrating how to use Verify in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in NUnit\nDESCRIPTION: Code example showing how to run verification checks to ensure conventions are correctly configured in an NUnit test. This helps validate that Verify is properly set up in your project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for VerifyTests Output Files\nDESCRIPTION: This snippet shows how to configure .gitignore to exclude *.received.* files from source control. These files are typically generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/include-exclude.include.md#2025-04-22_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters for Verified Files in xUnit (Instance)\nDESCRIPTION: Shows how to hash parameters when naming verified files using xUnit. This approach uses the UseParameters and HashParameters methods on VerifySettings to create a hash of the parameter values.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task HashParametersUsage(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseParameters(arg);\n    settings.HashParameters();\n    return Verify(arg, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with XUnit v3\nDESCRIPTION: Example test class showing basic usage of Verify with XUnit v3 for testing a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie in C#\nDESCRIPTION: Demonstrates how to run Verify checks using Fixie test framework. This test method calls VerifyChecks.Run() to check conventions in the current assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Case\nDESCRIPTION: The code defines a simple test case in XunitV3 where a person object is retrieved using ClassBeingTested.FindPerson() and then verified using the Verify framework. This demonstrates a typical pattern for setting up a unit test with an asynchronous return type.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: C# code demonstrating a sample Fixie test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: A sample C# test method using Verify with MSTest to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verify Test Implementation\nDESCRIPTION: A basic example of a test class using Verify with MSTest, showing how to create a simple test that verifies the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie in C#\nDESCRIPTION: Illustrates a sample test using Verify with Fixie. The test finds a person using ClassBeingTested.FindPerson() and verifies the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project Configuration for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to integrate Verify with Fixie. This class configures the test framework to work with Verify by setting the target assembly and managing test execution state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .csproj\nDESCRIPTION: Property setting to enable implicit usings in the project file, which allows direct usage of Verify() without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit and Verify NuGet Packages in C# Project\nDESCRIPTION: Adds the necessary NuGet packages for Xunit and Verify to a C# project file. This includes Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks with Fixie\nDESCRIPTION: Test class for running verification checks on assembly conventions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with NUnit\nDESCRIPTION: Sample NUnit test that demonstrates how to use Verify to test a person object returned from a method. Shows the basic pattern of calling Verify() on the result to create and compare snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Fixie Test Project Setup in C#\nDESCRIPTION: Defines a custom test project implementation using Fixie by implementing ITestProject and IExecution interfaces. This configuration is vital for setting target assemblies and managing test executions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest implementation with Verify\nDESCRIPTION: A complete example of a test class using Verify with MSTest, demonstrating the proper test attributes, initialization, and a simple verification test that creates and verifies an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Threading.Tasks;\nusing VerifyTests;\n\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Example NUnit test class demonstrating how to use Verify for testing a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Ignoring Members That Throw Exceptions with Specific Messages in C#\nDESCRIPTION: This snippet shows how to globally configure Verify to ignore members that throw exceptions with specific messages during serialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/members-throw.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreMembersThatThrow<Exception>(_ => _.Message == \"Ignore\");\n```\n\n----------------------------------------\n\nTITLE: Defining Serialization Test Structure in JSON-like Format\nDESCRIPTION: This snippet defines a structure for testing serialization of different data types. It includes fields for GUID, DateTime, DateTimeOffset, and a custom type named SerializationTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryKey.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  guid: {\n    Guid_1: value\n  },\n  dateTime: {\n    DateTime_1: value\n  },\n  dateTimeOffset: {\n    DateTimeOffset_1: value\n  },\n  type: {\n    SerializationTests: value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with MSTest\nDESCRIPTION: A code snippet demonstrating how to implement a test that checks if Verify conventions are properly configured. This is useful to ensure your project follows the expected snapshot testing conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyTests\n{\n    [TestMethod]\n    public Task VerifyConventions() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with TUnit\nDESCRIPTION: Example TUnit test that demonstrates how to use Verify to create a snapshot test. The test captures the output of a method call and verifies it against an expected snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with Expecto\nDESCRIPTION: Complete example of implementing a verification test using Expecto and Verify. Shows how to set up a test that verifies a target object's serialized state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet Sample () = task {\n    let person = Person(GivenNames = \"John\", FamilyName = \"Smith\", Spouse = \"Jill\")\n\n    do! Verifier.Verify(person)\n}\n\ntype Person(GivenNames: string, FamilyName: string, Spouse: string) =\n    member _.GivenNames = GivenNames\n    member _.FamilyName = FamilyName\n    member _.Spouse = Spouse\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Test with Verify.Expecto in F#\nDESCRIPTION: Shows how to write a simple test using Verify.Expecto in F#, demonstrating the usage of Verifier.Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A basic example of how to use Verify with NUnit to test a method result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify, including target assembly assignment and execution state management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to enable Verify integration with Fixie. Handles test discovery configuration and manages test execution state for both parameterized and non-parameterized tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Member Scrubbing by Predicate in C# Verify Tests\nDESCRIPTION: Shows how to set up global member scrubbing using a predicate function that checks the declaring type and name of the member.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.ScrubMembers(\n    _=>_.DeclaringType == typeof(TargetClass) &&\n       _.Name == \"Proprty\");\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with XunitV3\nDESCRIPTION: Provides an example of a simple Verify test using XunitV3, demonstrating how to verify an object's state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class showing basic usage of Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add necessary NuGet packages for using Verify with MSTest, including Microsoft.NET.Test.Sdk, MSTest.TestAdapter, MSTest.TestFramework, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Example test class demonstrating basic usage of Verify with NUnit including test fixture setup and verification of a person object\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrubber Levels in NUnit\nDESCRIPTION: Demonstrates scrubbers at method, class, and global levels in NUnit tests, showing how to define and combine scrubbers at different scopes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class ScrubberLevelsSample\n{\n    VerifySettings classLevelSettings;\n\n    public ScrubberLevelsSample()\n    {\n        classLevelSettings = new();\n        classLevelSettings.AddScrubber(_ => _.Replace(\"Three\", \"C\"));\n    }\n\n    [Test]\n    public Task Simple()\n    {\n        var settings = new VerifySettings(classLevelSettings);\n        settings.AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n        return Verify(\"One Two Three\", settings);\n    }\n\n    [Test]\n    public Task SimpleFluent() =>\n        Verify(\"One Two Three\", classLevelSettings)\n            .AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n\n    [ModuleInitializer]\n    public static void Setup() =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"One\", \"A\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify (C#)\nDESCRIPTION: C# code sample for a Fixie test class that demonstrates snapshot verification. The 'Test' method constructs a sample object via ClassBeingTested.FindPerson and then uses 'Verify' to create or compare a snapshot. Requires Verify.Fixie as a dependency and assumes ImplicitUsings are enabled for seamless usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class Sample\\n{\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test fixture demonstrating how to use Verify in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A sample NUnit test that demonstrates how to use Verify for snapshot testing in an NUnit environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with XUnit v3\nDESCRIPTION: Example of a basic XUnit v3 test using Verify to snapshot test the result of a method call. The test returns a Task from the Verify method call which must be awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Anonymous Type with xUnit and Verify\nDESCRIPTION: This C# snippet shows how to use an anonymous type to group `target1` and `target2` for snapshot verification within an xUnit `[Fact]` test method using `Verifier.Verify()`. It requires the xUnit framework and the Verify.Xunit library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/anonymous-types.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Anon()\n{\n    var target1 = new Target\n    {\n        Property = \"Value1\"\n    };\n    var target2 = new Target\n    {\n        Property = \"Value2\"\n    };\n    return Verifier.Verify(\n        new\n        {\n            target1,\n            target2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Path using VerifyFile in C#\nDESCRIPTION: This snippet demonstrates the basic usage of VerifyFile to verify the contents of a file specified by its path.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-file.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task VerifyFilePath() =>\n    VerifyFile(\"sample.txt\");\n```\n\n----------------------------------------\n\nTITLE: Ignoring Types in Verify Output\nDESCRIPTION: Demonstrates how to ignore members of specific types from serialization results. Shows implementation with both regular and fluent approaches, handling different type scenarios including inheritance, interfaces, and struct types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task IgnoreType()\n{\n    var target = new IgnoreTypeTarget\n    {\n        ToIgnore = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByInterface = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBase = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBaseGeneric = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByType = new()\n        {\n            Property = \"Value\"\n        },\n        ToInclude = new()\n        {\n            Property = \"Value\"\n        },\n        ToIncludeNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreStruct = new(\"Value\"),\n        ToIgnoreStructNullable = new(\"Value\"),\n        ToIncludeStruct = new(\"Value\"),\n        ToIncludeStructNullable = new(\"Value\")\n    };\n    var settings = new VerifySettings();\n    settings.IgnoreMembersWithType<ToIgnore>();\n    settings.IgnoreMembersWithType<ToIgnoreByType>();\n    settings.IgnoreMembersWithType<InterfaceToIgnore>();\n    settings.IgnoreMembersWithType<BaseToIgnore>();\n    settings.IgnoreMembersWithType(typeof(BaseToIgnoreGeneric<>));\n    settings.IgnoreMembersWithType<ToIgnoreStruct>();\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task IgnoreTypeFluent()\n{\n    var target = new IgnoreTypeTarget\n    {\n        ToIgnore = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByInterface = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBase = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBaseGeneric = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByType = new()\n        {\n            Property = \"Value\"\n        },\n        ToInclude = new()\n        {\n            Property = \"Value\"\n        },\n        ToIncludeNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreStruct = new(\"Value\"),\n        ToIgnoreStructNullable = new(\"Value\"),\n        ToIncludeStruct = new(\"Value\"),\n        ToIncludeStructNullable = new(\"Value\")\n    };\n    return Verify(target)\n        .IgnoreMembersWithType<ToIgnore>()\n        .IgnoreMembersWithType<ToIgnoreByType>()\n        .IgnoreMembersWithType<InterfaceToIgnore>()\n        .IgnoreMembersWithType<BaseToIgnore>()\n        .IgnoreMembersWithType(typeof(BaseToIgnoreGeneric<>))\n        .IgnoreMembersWithType<ToIgnoreStruct>();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DateTime Comparer Implementation\nDESCRIPTION: Creating a custom DateTime comparer to override the default comparison behavior during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nCustomDateTimeComparer\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members by Expression in Verify Tests (C#)\nDESCRIPTION: Demonstrates how to ignore specific members of a type using expressions in Verify tests. Includes both local settings and fluent API approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreExplicitTarget\n{\n    Include = \"Value\",\n    Field = \"Value\",\n    Property = \"Value\",\n    PropertyWithPropertyName = \"Value\"\n};\nvar settings = new VerifySettings();\nsettings.IgnoreMembers<IgnoreExplicitTarget>(\n    _ => _.Property,\n    _ => _.PropertyWithPropertyName,\n    _ => _.Field,\n    _ => _.GetOnlyProperty,\n    _ => _.PropertyThatThrows);\nreturn Verify(target, settings);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreExplicitTarget\n{\n    Include = \"Value\",\n    Field = \"Value\",\n    Property = \"Value\"\n};\nreturn Verify(target)\n    .IgnoreMembers<IgnoreExplicitTarget>(\n        _ => _.Property,\n        _ => _.Field,\n        _ => _.GetOnlyProperty,\n        _ => _.PropertyThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XunitV3 C#\nDESCRIPTION: This snippet shows a simple test setup for running convention checks using VerifyChecks in an XunitV3 test class. It includes a test method annotated with [Fact] that calls VerifyChecks.Run() to ensure that project conventions are adhered to.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: Example test class showing how to use Verify with TUnit to test an object's state. The Verify method serializes and compares the object against a verified snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with XunitV3 Framework\nDESCRIPTION: Complete sample test demonstrating how to use Verify with XunitV3. Shows the basic pattern of creating a test that verifies a result against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleTestsXunitV3\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Sample\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: Example test class demonstrating how to use Verify with Xunit to test a method that returns a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example MSTest implementation using Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members by Name in C# Verify Tests\nDESCRIPTION: This snippet demonstrates how to ignore specific members by name in Verify tests. It shows both instance-level and fluent approaches for ignoring members for all types, specific types, and using expressions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task IgnoreMemberByName()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    var settings = new VerifySettings();\n\n    // For all types\n    settings.IgnoreMember(\"PropertyByName\");\n\n    // For a specific type\n    settings.IgnoreMember(typeof(IgnoreExplicitTarget), \"Property\");\n\n    // For a specific type generic\n    settings.IgnoreMember<IgnoreExplicitTarget>(\"Field\");\n\n    // For a specific type with expression\n    settings.IgnoreMember<IgnoreExplicitTarget>(_ => _.PropertyThatThrows);\n\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task IgnoreMemberByNameFluent()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    return Verify(target)\n        // For all types\n        .IgnoreMember(\"PropertyByName\")\n\n        // For a specific type\n        .IgnoreMember(typeof(IgnoreExplicitTarget), \"Property\")\n\n        // For a specific type generic\n        .IgnoreMember<IgnoreExplicitTarget>(\"Field\")\n\n        // For a specific type with expression\n        .IgnoreMember<IgnoreExplicitTarget>(_ => _.PropertyThatThrows);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit V3\nDESCRIPTION: A sample test class demonstrating how to use Verify with XUnit V3 to verify the state of an object from a method being tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using XunitV3 - CSharp\nDESCRIPTION: This C# snippet exemplifies writing a test with XunitV3 and Verify. It defines a test class with a [Fact] method that retrieves a 'person' object and calls Verify on it, using the implicit usings and asynchronous pattern. It assumes that ClassBeingTested.FindPerson() is available and returns a serializable object suitable for snapshot testing. The test returns a Task, with input and output determined by the test framework and object being verified.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a Named Tuple Method in C#\nDESCRIPTION: This snippet demonstrates how to use the VerifyTuple method to test a method that returns a named tuple.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/named-tuples.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait VerifyTuple(() => MethodWithNamedTuple());\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Class in C#\nDESCRIPTION: Example class being tested that creates and returns a Person object with nested properties. This demonstrates the kind of complex object that Verify helps test.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ClassBeingTested\n{\n    public static Person FindPerson() =>\n        new()\n        {\n            Id = new(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n            Title = Title.Mr,\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children =\n            [\n                \"Sam\",\n                \"Mary\"\n            ],\n            Address = new()\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This C# code snippet shows a sample Xunit test using Verify. It demonstrates how to create a fact test that verifies a Person object with specific properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File with Custom Extension in C#\nDESCRIPTION: This snippet illustrates how to use VerifyFile with a custom file extension, allowing for flexibility in file type verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-file.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task VerifyFilePathWithExtension() =>\n    VerifyFile(\"sample.txt\", extension: \"csv\");\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie Test\nDESCRIPTION: C# code to run Verify checks in a Fixie test, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto Test\nDESCRIPTION: This C# code snippet demonstrates how to run Verify checks in an Expecto test. It creates a test case that executes VerifyChecks.Run() on the assembly containing the test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text File Convention for Files Without Extensions in VerifyTests - C#\nDESCRIPTION: This snippet shows how to treat files with no extensions as text files within the Verify snapshot testing process using the AddTextFileConvention method from the EmptyFiles utility. This ensures that even files lacking an extension launch the appropriate diff tool and are processed as text for verification purposes. Dependencies include Verify.Xunit v3 and the EmptyFiles convention utility. Input is a predicate function that matches file paths. Outputs are updated internal conventions affecting future directory verifications. This approach is needed to avoid treating extensionless files as binaries by default.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-directory.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nEmptyFiles.AddTextFileConvention(path => path.Contains(\"myfile\"));\n```\n\n----------------------------------------\n\nTITLE: Source Control Text File Settings in .gitattributes (INI)\nDESCRIPTION: Specifies text handling for *.verified.* text files in Git using .gitattributes, enforcing line feed newlines and UTF-8 encoding with BOM. Ensures consistency and correct diffing/merging for verified output files across environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: This configuration for a `.gitignore` file ensures that VerifyTests' received files (`*.received.*`) are not committed to source control. If using `UseSplitModeForUniqueDirectory`, the corresponding directory pattern (`*.received/`) should also be added.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: A complete example of an Expecto test using Verify to capture and verify test output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests\n\nopen System.Runtime.CompilerServices\nopen System.Threading.Tasks\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<ModuleInitializer>]\nlet Initialize() = VerifyExpecto.Enable()\n\n[<Tests>]\nlet Sample_test () =\n    task {\n        let person = \n            {|\n                GivenNames = \"John\"\n                FamilyName = \"Smith\"\n                Spouse = \"Jill\"\n                Address = {|\n                    Street = \"1 Puddle Lane\"\n                    Country = \"USA\"\n                |}\n                Children = [\n                    \"Sam\"\n                    \"Mary\"\n                ]\n            |}\n\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Better Diff Output\nDESCRIPTION: Code to initialize VerifyDiffPlex, which provides improved text difference highlighting in test failure messages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files on Test Failure in GitHub Actions\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload any *.received.* files as artifacts when the build fails. It uses the actions/upload-artifact@v4 action and is conditional on the failure of previous steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: Azure DevOps pipeline task that publishes the staged received files as build artifacts when tests fail. Makes the files available for download from the build results page for inspection and debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: GitAttributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Using Parameters with XUnit V3 Theory\nDESCRIPTION: Demonstrates basic usage of UseParameters() to control which parameters are used for file naming in verification tests. Shows how to verify parameterized test output with specific arguments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task UseParametersUsage(string arg)\n{\n    var somethingToVerify = $\"{arg} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global AutoVerify with Delegate in Verify for C#\nDESCRIPTION: This code sets up global AutoVerify using a delegate in the Verify library. The delegate enables context-based logic for auto-verification across the entire project. Place this in the test assembly setup or static initialization. Dependencies: Verify for C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.AutoVerify(context => ShouldAutoVerify(context));\n```\n\n----------------------------------------\n\nTITLE: Verified Output with Header for Combination Serialization\nDESCRIPTION: The snippet displays the verified output of a combination test when headers are enabled. The test result showcases serialized data with headers aligning with input variable names such as number and street.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\n{\n  number, street    , city   : Result,\n       1, Smith St  , Sydney : 1 Smith St, Sydney,\n       1, Smith St  , Chicago: 1 Smith St, Chicago,\n       1, Wallace St, Sydney : 1 Wallace St, Sydney,\n       1, Wallace St, Chicago: 1 Wallace St, Chicago,\n      10, Smith St  , Sydney : 10 Smith St, Sydney,\n      10, Smith St  , Chicago: 10 Smith St, Chicago,\n      10, Wallace St, Sydney : 10 Wallace St, Sydney,\n      10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Typed File Converter in C#\nDESCRIPTION: Demonstrates how to register a typed file converter that acts on an in-memory instance based on type. It converts a TIFF image to multiple PNG files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.RegisterFileConverter<Image>(\n    canConvert: ImageCanConvert,\n    conversion: ImageConversion);\n```\n\n----------------------------------------\n\nTITLE: Default Stream Comparison Implementation in Verify\nDESCRIPTION: The default binary comparison algorithm used by Verify. It reads streams in chunks for memory efficiency and compares them byte by byte. The implementation includes helper methods for ensuring streams are at their starting position and reading buffer content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/comparer.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nconst int bufferSize = 1024 * sizeof(long);\n\npublic static async Task<CompareResult> AreEqual(Stream stream1, Stream stream2)\n{\n    EnsureAtStart(stream1);\n    EnsureAtStart(stream2);\n\n    var buffer1 = new byte[bufferSize];\n    var buffer2 = new byte[bufferSize];\n\n    while (true)\n    {\n        var count = await ReadBufferAsync(stream1, buffer1);\n\n        //no need to compare size here since only enter on files being same size\n\n        if (count == 0)\n        {\n            return CompareResult.Equal;\n        }\n\n        await ReadBufferAsync(stream2, buffer2);\n\n        for (var i = 0; i < count; i += sizeof(long))\n        {\n            if (BitConverter.ToInt64(buffer1, i) != BitConverter.ToInt64(buffer2, i))\n            {\n                return CompareResult.NotEqual();\n            }\n        }\n    }\n}\n\nstatic void EnsureAtStart(Stream stream)\n{\n    if (stream.CanSeek &&\n        stream.Position != 0)\n    {\n        throw new(\"Expected stream to be at position 0.\");\n    }\n}\n\nstatic async Task<int> ReadBufferAsync(Stream stream, byte[] buffer)\n{\n    var bytesRead = 0;\n    while (bytesRead < buffer.Length)\n    {\n        var read = await stream.ReadAsync(buffer, bytesRead, buffer.Length - bytesRead);\n        if (read == 0)\n        {\n            // Reached end of stream.\n            return bytesRead;\n        }\n\n        bytesRead += read;\n    }\n\n    return bytesRead;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Defining a Custom Time Equality Comparer in .NET (C#)\nDESCRIPTION: A module initializer installs a custom comparer for the Time type that exclusively compares the hour, minute, and second fields, disregarding any subseconds or other properties. This ensures Time instances with identical visible components are considered equal in test assertions. It requires Time, Counter, and .NET 5+ for global module initializers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void UseCustomTimeComparer() =>\n    Counter.UseTimeComparer(new CustomTimeComparer());\n\npublic class CustomTimeComparer :\n    IEqualityComparer<Time>\n{\n    public bool Equals(Time x, Time y) =>\n        new Time(x.Hour, x.Minute, x.Second) ==\n        new Time(y.Hour, y.Minute, y.Second);\n\n    public int GetHashCode(Time date) =>\n        new Time(date.Hour, date.Minute, date.Second).GetHashCode();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: Example implementation of a basic test using Verify with Expecto framework to verify a person object. Shows proper usage of Verifier.Verify with F# async task pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: Example F# test using Verify with Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verify Test with TUnit\nDESCRIPTION: Create a sample test class using TUnit and Verify. This demonstrates how to write a basic snapshot test for a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with TUnit\nDESCRIPTION: Shows a basic example of how to write a TUnit test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: NUnit test fixture to run Verify checks, ensuring all conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages\nDESCRIPTION: Required NuGet package references for using TUnit with Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using XUnit v3\nDESCRIPTION: Example C# code demonstrating a simple Verify test using XUnit v3, showing how to verify an object's state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Person Verification Test using Verify and Fixie - C#\nDESCRIPTION: This is a sample Fixie test class using the Verify library. It constructs a test method that fetches a person object via ClassBeingTested.FindPerson() and then verifies the output using the Verify() method. Requires Verify.Fixie dependency and a suitable ClassBeingTested implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\\n{\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to ensure DiffPlex is set up before any tests are run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[<ModuleInitializer>]\nlet Initialize () =\n    VerifyDiffPlex.Initialize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control to Exclude Received Files\nDESCRIPTION: Git configuration to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Named Date and Time Serialization Settings in .NET (C#)\nDESCRIPTION: This snippet uses a module initializer to globally establish named representations for various date and time types via the VerifierSettings API. It defines named values for DateTime, Time, Date, and DateTimeOffset, making them reusable throughout the test suite. Dependencies include VerifierSettings and the relevant temporal types (Date, Time, DateTime, DateTimeOffset), and it requires .NET 5+ for [ModuleInitializer]. No input or output parameters are involved; it registers global settings at module load time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void NamedDatesAndTimesGlobal()\n{\n    VerifierSettings.AddNamedDateTime(new(2030, 1, 1), \"namedDateTime\");\n    VerifierSettings.AddNamedTime(new(1, 1), \"namedTime\");\n    VerifierSettings.AddNamedDate(new(2030, 1, 1), \"namedDate\");\n    VerifierSettings.AddNamedDateTimeOffset(new(new(2030, 1, 1)), \"namedDateTimeOffset\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an Xunit test. It uses the [Fact] attribute to define a test method and calls VerifyChecks.Run() to execute the convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void CheckConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Build Step to Set Publish Flag on Test Failure (YAML)\nDESCRIPTION: Shows an Azure DevOps YAML task that sets a pipeline variable if the test runner fails, enabling subsequent steps to publish Verify '*.received.*' files as build artifacts. The CmdLine@2 task executes with the 'failed()' condition. This is essential for surfacing failed test outputs within CI builds.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\\n  condition: failed()\\n  inputs:\\n    script: 'echo \\\"##vso[task.setvariable variable=publishverify]Yes\\\"'\n```\n\n----------------------------------------\n\nTITLE: Verify Convention Check Test\nDESCRIPTION: Test implementation to verify that all conventions are being followed correctly in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test in Fixie\nDESCRIPTION: C# implementation of a test class to run verification checks using Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: NUnit test fixture to run Verify checks and ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Basic example showing how to implement a Verify test using Xunit. Demonstrates verifying the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and Fixie testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Case with Verification\nDESCRIPTION: This C# snippet provides a sample NUnit test case that calls a method to find a person and then verifies the results using the Verify library. It demonstrates basic verification in a typical test scenario.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with TUnit\nDESCRIPTION: A basic example of using Verify with TUnit to create a snapshot test for a person object, showing the standard pattern of getting data and verifying it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Verify Checks Test with XunitV3\nDESCRIPTION: Test class that runs VerifyChecks.Run() to ensure all Verify conventions are correctly set up in the project. This is recommended as part of the setup process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verification Test with NUnit\nDESCRIPTION: A sample NUnit test that demonstrates the basic pattern for using Verify to test an object's state. The test gets a person object and verifies its properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with Verify\nDESCRIPTION: NuGet package references required for setting up Verify with Fixie test framework. These packages provide the core functionality for snapshot testing and Fixie integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Project and Execution for Verify - C#\nDESCRIPTION: Full example showing how to implement Fixie\\'s ITestProject and IExecution for integration with Verify. Sets the target assembly for verification and manages execution context, including parameterized and non-parameterized test handling. Required for aligning Fixie test execution lifecycle with Verify's snapshot management; add this class to your test project for advanced customization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\\n    ITestProject,\\n    IExecution\\n{\\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\\n    {\\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\\n    }\\n\\n    public async Task Run(TestSuite testSuite)\\n    {\\n        foreach (var testClass in testSuite.TestClasses)\\n        {\\n            foreach (var test in testClass.Tests)\\n            {\\n                if (test.HasParameters)\\n                {\\n                    foreach (var parameters in test\\n                                 .GetAll<TestCase>()\\n                                 .Select(_ => _.Parameters))\\n                    {\\n                        using (ExecutionState.Set(testClass, test, parameters))\\n                        {\\n                            await test.Run(parameters);\\n                        }\\n                    }\\n                }\\n                else\\n                {\\n                    using (ExecutionState.Set(testClass, test, null))\\n                    {\\n                        await test.Run();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Utilize this test to ensure conventions are correctly applied in your project. Requires Verify library integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add necessary NuGet packages to the test project for using Verify with XUnit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Failure\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: A sample C# test method using Verify with XUnit v3, demonstrating how to verify the output of a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: Sample code that demonstrates how to run Verify's convention checks in an NUnit test to ensure all conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Basic Sample Test with MSTest and Verify\nDESCRIPTION: A sample test class demonstrating how to use Verify with MSTest to verify the state of an object returned from a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with Xunit\nDESCRIPTION: This snippet shows a basic example of how to write a Verify test using Xunit. It demonstrates finding a person object and verifying its contents using the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: A code snippet demonstrating how to run Verify checks within an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: Example of a simple test using Verify with XUnit v3 to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Anonymous Type with NUnit and Verify\nDESCRIPTION: This C# snippet demonstrates using an anonymous type to group `target1` and `target2` objects for snapshot verification within an NUnit test method using `Verifier.Verify()`. It requires the NUnit framework and the Verify.NUnit library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/anonymous-types.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Anon()\n{\n    var target1 = new Target\n    {\n        Property = \"Value1\"\n    };\n    var target2 = new Target\n    {\n        Property = \"Value2\"\n    };\n    return Verifier.Verify(\n        new\n        {\n            target1,\n            target2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Necessary Packages with dotnet CLI - Shell\nDESCRIPTION: This snippet demonstrates the commands needed to add required NuGet packages to an Xunit V3 test project using the .NET CLI. Dependencies include Microsoft.NET.Test.Sdk for test support, Verify.XunitV3 for snapshot testing, as well as xunit.v3 and xunit.runner.visualstudio both as prerelease. The input is direct CLI commands and the output is package references added to the project file. These should be executed in the root directory of the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package Verify.XunitV3\\ndotnet add package xunit.v3 --prerelease\\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with TUnit\nDESCRIPTION: Sample code that demonstrates how to run verification checks using VerifyChecks.Run() in a TUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test Using TUnit\nDESCRIPTION: A sample TUnit test class demonstrating how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of using the VerifyBase class in MSTest to simplify verification tests by inheriting from the base class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XunitV3\nDESCRIPTION: A sample test snippet demonstrating the usage of Verify with XunitV3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Checks in MSTest - C#\nDESCRIPTION: This MSTest-based snippet shows how to invoke VerifyChecks.Run() to validate all project and source control conventions are correctly applied. Add this test class to your test project and run it to catch misconfigurations early. The sample uses async Task to support Verify’s asynchronous interfaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic partial class VerifyChecksTests\\n{\\n    [TestMethod]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Lines with Custom Logic in C#\nDESCRIPTION: Demonstrates the use of ScrubLinesWithReplace to modify lines in the verification output based on custom logic.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nverifySettings.ScrubLinesWithReplace(line => line.ToUpper());\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in XML\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex improves text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example of a simple NUnit test using Verify to compare the result of a method call with a verified snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A complete sample test using Verify with the Fixie test framework, showing how to structure and implement verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify\nDESCRIPTION: Example of a sample test using Verify with XunitV3. This snippet is referenced but not provided in the given content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Actual code not provided in the given content\n// Placeholder for SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Demonstrates how to run Verify convention checks using TUnit. This ensures that all Verify conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with xUnit\nDESCRIPTION: A sample xUnit test that runs Verify convention checks to ensure the project is set up correctly according to Verify's requirements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Convention Verification Tests with NUnit\nDESCRIPTION: Sample test that runs VerifyChecks.Run() to validate that all Verify conventions are being followed in the project. This helps ensure proper configuration of file settings and source control patterns.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test using TUnit Framework in C#\nDESCRIPTION: Illustrates a simple test method `Test` within a `Sample` class using the TUnit framework. It calls a method `ClassBeingTested.FindPerson()` and then uses `Verify(person)` to perform snapshot testing on the returned object `person`. Assumes Implicit Usings are enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test class showing how to implement a basic verification test using TUnit and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in MSTest\nDESCRIPTION: Example implementation of Verify checks in MSTest. This test class runs verification checks to ensure file conventions are followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Lines with Case-Sensitive Comparison in C#\nDESCRIPTION: Illustrates how to use ScrubLinesContaining with a specific StringComparison option for case-sensitive text matching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nverifySettings.ScrubLinesContaining(StringComparison.Ordinal, \"text1\", \"text2\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex using a module initializer. It enables the enhanced text comparison functionality provided by DiffPlex.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Test Implementation\nDESCRIPTION: C# implementation of verification checks using Expecto\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test (C# with XunitV3)\nDESCRIPTION: Presents a basic example of a Verify test using Xunit v3. It demonstrates the typical pattern: arrange/act (getting an object from `ClassBeingTested.FindPerson()`) and assert (calling `Verify()` on the result) within an Xunit `[Fact]` test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: This C# code snippet demonstrates how to run Verify checks using NUnit. It sets up a test method that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with Xunit\nDESCRIPTION: Example test class showing how to implement a basic verification test using Verify with Xunit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime Objects for Verification in C#\nDESCRIPTION: Demonstrates how to create and verify DateTime, DateTimeOffset and custom date objects with the Verify framework. Shows how date values are automatically sanitized during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar dateTime = DateTime.Now;\nvar dateTimeOffset = DateTimeOffset.Now;\nvar target = new DateTimeTarget\n{\n    DateTime = dateTime,\n    Date = new(dateTime.Year, dateTime.Month, dateTime.Day),\n    DateNullable = new(dateTime.Year, dateTime.Month, dateTime.Day),\n    DateString = new Date(dateTime.Year, dateTime.Month, dateTime.Day).ToString(),\n    DateTimeNullable = dateTime,\n    DateTimeString = dateTime.ToString(\"F\"),\n    DateTimeOffset = dateTimeOffset,\n    DateTimeOffsetNullable = dateTimeOffset,\n    DateTimeOffsetString = dateTimeOffset.ToString(\"F\")\n};\n\nawait Verify(target);\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example test class demonstrating how to write a basic snapshot test using Verify with Xunit. The test verifies the output of a method by comparing it to a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify Library\nDESCRIPTION: This C# code snippet shows a sample NUnit test using the Verify library to check the properties of an object returned by a class under test, demonstrating basic usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyBase in MSTest\nDESCRIPTION: Example test class showing how to inherit from VerifyBase to enable Verify functionality without explicitly using the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: Example test that runs VerifyChecks.Run() to validate that all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Verify Recording (C#)\nDESCRIPTION: Demonstrates the fundamental use of `Recording.Add()` to include data in the verification snapshot. Data added via `Recording.Add()` anywhere before the `Verify()` call (and after `Recording.Start()` if not implicitly handled) will be captured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'Recording' snippet\nRecording.Add(\"key1\", \"value1\");\nRecording.Add(\"key2\", new { Prop = \"value2\" });\n\nawait Verify(somethingElse); // Recorded items will be added to the snapshot\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: An example of a sample test using Verify with Xunit. This snippet demonstrates how to write a test method that uses Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: F# code demonstrating how to write a simple Verify test using Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying AutoVerify with Delegate in Verify for C#\nDESCRIPTION: This snippet shows how to apply AutoVerify using a delegate to provide more dynamic control within the test logic. The delegate allows conditional acceptance based on test circumstances. Requires the Verify library and is typically used in a unit test. The delegate receives verification context to programmatically determine whether to auto-verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(target).AutoVerify(context => ShouldAutoVerify(context));\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify - C#\nDESCRIPTION: Contains a sample NUnit test class demonstrating end-to-end usage of the Verify library. The test locates a test entity using 'ClassBeingTested.FindPerson()' and invokes 'Verify(person)' to assert and snapshot the result. This snippet serves as a template for writing real snapshot tests using NUnit. Dependencies: Verify, NUnit, and access to the ClassBeingTested static context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This step copies all *.received.* files to the artifact staging directory when the publishverify flag is set to 'Yes'. It will search throughout the repository for any received files generated by failed Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: Sample code showing how to run Verify conventions checks in an NUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: Test class implementation for running verification checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Directories for Split Mode\nDESCRIPTION: An additional `.gitignore` pattern for excluding received file directories when using the `UseSplitModeForUniqueDirectory` naming convention in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C# using ModuleInitializer\nDESCRIPTION: This C# code demonstrates how to enable the Verify.DiffPlex integration globally for an assembly using the `ModuleInitializer` attribute. The `Initialize` method, marked with this attribute, is automatically executed when the assembly loads, calling `VerifyDiffPlex.Initialize()` to activate the enhanced inline text diffing provided by the package. This ensures the DiffPlex comparer is used for all Verify text comparisons within the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using Parameters with Xunit Theory in Verify\nDESCRIPTION: Shows how to use UseParameters() to explicitly specify parameters for file naming with Xunit InlineData.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task UseParametersUsage(string arg)\n{\n    var somethingToVerify = $\"{arg} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Extension-based File Converter in C#\nDESCRIPTION: Demonstrates how to use the extension-based file converter in a verification test, converting and verifying a TIFF file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task ExtensionConverter()\n{\n    return Verifier.VerifyFile(\"sample.tif\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Scrubbers in TUnit with Verify .NET (C#)\nDESCRIPTION: Presents how to apply several scrubbers in a TUnit test for output cleaning using Verify .NET. Focuses on hiding machine information and sensitive lines before verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleTestClass\n{\n    [Test]\n    public async Task TestWithScrubbers()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesContaining(\"password\", \"token\");\n        settings.ScrubMachineName();\n        await Verifier.Verify(someResult, settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This snippet shows a sample Xunit test using Verify. It demonstrates how to create a test method that verifies a Person object with specific properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with TUnit\nDESCRIPTION: This C# code defines a TUnit test class `VerifyChecksTests` with a single test method `Run`. This test executes `VerifyChecks.Run()` to programmatically check if the project adheres to VerifyTests conventions, such as the required `.gitignore` and `.gitattributes` settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to set up a test project with Verify and MSTest. These packages include the core testing SDK, MSTest adapters and frameworks, and Verify integration for MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A sample TUnit test demonstrating how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (Shell)\nDESCRIPTION: Demonstrates using the .NET CLI to add the Verify.DiffPlex package, an optional add-on which enables inline diff highlighting in snapshot comparison results. Intended for larger or more complex string/object comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: This snippet shows a sample Verify test using Xunit. It demonstrates how to create a simple test that verifies a string value using the Verify.Xunit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: C# code snippet showing a sample MSTest test method using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing an Asynchronous Method That Throws an Exception (Task) Using Verify in C#\nDESCRIPTION: This snippet demonstrates how to use Verify.ThrowsTask to test an asynchronous method that throws an exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task TestMethodThatThrowsTask() =>\n    ThrowsTask(MethodThatThrowsTask);\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray using Dotnet CLI\nDESCRIPTION: Installs DiffEngineTray via the .NET CLI tool installer, enabling monitoring of changes in snapshot tests. Ensure the .NET SDK is installed. The command runs globally on the machine, requiring administrative permissions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A sample NUnit test demonstrating the usage of Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which provides command-line utilities for managing snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Code to initialize Verify.DiffPlex using a module initializer. This changes the text compare result to highlight differences inline for easier comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies the code by allowing direct usage of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex using a module initializer. This enables the inline text difference highlighting feature.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: This EditorConfig setting treats unused return values of pure methods as errors, which is useful for catching missed Verify() calls.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for Fixie\nDESCRIPTION: Shows how to run VerifyChecks in a Fixie test to ensure that snapshot file conventions are correctly configured for source control integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in XUnit v3\nDESCRIPTION: Sample test class that runs verification checks to ensure all conventions are properly configured in the project. This is recommended as part of the test suite.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying XML Content in C#\nDESCRIPTION: Shows how to verify XML content using the VerifyXml method. This snippet demonstrates a unit test that verifies the structure and content of an XML string.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Xml() =>\n    VerifyXml(xml);\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps\nDESCRIPTION: This step sets a pipeline variable when tests fail, which will be used to trigger the publishing of Verify's received files. It uses the Azure DevOps condition: failed() to execute only when the previous test task fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Test using Verify and XunitV3 (C#)\nDESCRIPTION: This C# code demonstrates a simple Xunit v3 test method `Test` within a class `Sample`. It calls a method `ClassBeingTested.FindPerson()` to get an object `person` and then uses `Verify(person)` to perform a snapshot assertion on that object. Requires Implicit Usings or `using static Verifier;`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with F# and Expecto\nDESCRIPTION: Example test using Verify with Expecto in F#, demonstrating how to verify the state of an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with MSTest\nDESCRIPTION: This code demonstrates a basic test using Verify with MSTest. It shows the pattern of getting some data from the system under test and using Verify to create or validate a snapshot of that data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Verification Test with TUnit\nDESCRIPTION: A TUnit test method that verifies if all Verify conventions are being followed in the current project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in a Module - CSharp\nDESCRIPTION: This snippet shows how to set up Verify.DiffPlex by using a module initializer in a C# project. The [ModuleInitializer] attribute ensures VerifyDiffPlex.Initialize() is invoked on assembly load, allowing customized text diffing in test outputs. It requires both Verify.XunitV3 and Verify.DiffPlex packages and should be placed in a code file in the test project. No input parameters are present; this method provides global configuration for the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto in F#\nDESCRIPTION: A sample F# test using Verify with Expecto. The example demonstrates how to create a test task that verifies an object returned from a method call using the Verifier.Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: Example F# test that uses Verify with Expecto to verify the output of a method call, demonstrating the typical test structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks in Expecto (C#)\nDESCRIPTION: This C# code demonstrates how to create an Expecto test that uses `VerifyChecks.Run()` to validate project conventions, such as `.gitattributes` settings and BOM presence in text files. The check is performed against the assembly containing the `VerifyChecksTests` class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Example of how to run Verify checks in an Xunit test method. This snippet demonstrates the usage of VerifyChecks.Run() within a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an MSTest environment. It uses the [TestMethod] attribute and calls VerifyChecks.Run() to execute the checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task VerifyCheckRun() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: This snippet shows a sample test method using Verify with XUnit v3 to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto in F#\nDESCRIPTION: A sample F# test using Expecto and Verify to capture and verify the output of a method call. This demonstrates the basic pattern for creating snapshot tests in F#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Tests with Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify tests using Xunit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation\nDESCRIPTION: Example test implementation using Verify with Xunit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with MSTest\nDESCRIPTION: Defines an MSTest test class (`VerifyChecksTests`) with a test method (`Run`) that executes `VerifyChecks.Run()`. This method checks if the project adheres to Verify's recommended conventions, such as `.gitignore` and `.gitattributes` settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Subset with NUnit TestCase\nDESCRIPTION: Demonstrates how to use a subset of parameters for file naming in a NUnit TestCase with Verify. The example shows using UseParameters() to select specific parameters from the method signature for the verified filename.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\", \"Value2\", \"Value3\")]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    var somethingToVerify = $\"{arg1} {arg2} {arg3} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verification in C#\nDESCRIPTION: Illustrates a sample NUnit test class written in C#. This test initializes a person object from a hypothetical ClassBeingTested and verifies it through Verify(). It assumes the Verify.NUnit library is installed and accessible.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit V3\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, Verify.XunitV3, and XUnit V3 packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Expecto Test with Verify\nDESCRIPTION: F# code illustrating a basic Expecto test (`tests`) that uses Verify. It defines a test task `findPerson` which calls a method `ClassBeingTested.FindPerson()` and then uses `Verifier.Verify(\"findPerson\", person).ToTask()` to snapshot-test the result. Requires `Expecto`, `VerifyTests`, and `VerifyExpecto` namespaces/packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Verification Test with Fixie\nDESCRIPTION: A sample test class using the Verify framework with Fixie to test and verify a person object. This demonstrates the basic pattern of using Verify to capture and compare test outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: C# code snippet demonstrating how to run Verify convention checks in an MSTest test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A sample test implementation demonstrating how to use Verify with TUnit for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify. This setup is crucial for proper test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex which enhances the text comparison behavior to show inline differences rather than full content dumps when snapshots don't match.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit Verify Test\nDESCRIPTION: Example implementation of a basic verify test using XUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit Test with Verify\nDESCRIPTION: A sample XUnit test that demonstrates how to use Verify for snapshot testing. This is a placeholder for the actual code that would be shown in the documentation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Verify Test with Fixie\nDESCRIPTION: Basic example of a test class using Verify with Fixie test framework. Shows how to verify a person object returned from a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MSTest Sample Using Verify\nDESCRIPTION: A simple MSTest example showing how to use Verify to test and capture the state of an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class showing basic usage of Verify with MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A complete example showing how to implement a TUnit test with Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [TestCase]\n    public Task Test()\n    {\n        return Verifier.Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify in C#\nDESCRIPTION: Example of a Fixie test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison behavior in tests. Uses ModuleInitializer to ensure initialization occurs at startup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in XunitV3 Test - CSharp\nDESCRIPTION: This C# class demonstrates how to check Verify snapshot conventions by invoking VerifyChecks.Run() within an async Xunit test. It requires the VerifyChecks utility library and Xunit v3. The [Fact] attribute marks the test method, and the test is asynchronous, returning a Task. No input parameters are required, and the test ensures conventions are validated according to the Verify framework setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: A sample test using TUnit with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: A C# test method to run Verify's convention checks using Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying a DateOnly Object with Verify Function in C#\nDESCRIPTION: This C# code snippet demonstrates how to pass a DateOnly object directly to the Verify() function, which bypasses json serialization. The Verify function requires the Verify library as a dependency with the capability to handle DateOnly objects directly. It takes a DateOnly object as input and verifies it without serialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/type-to-string-mapping.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Example() =>\n    Verify(new DateOnly(2020, 10, 4));\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Basic example of a TUnit test that uses Verify to snapshot test a person object. The test retrieves a person from ClassBeingTested and uses Verify to compare it against a verified snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AutoVerify in Verify for C#\nDESCRIPTION: This snippet demonstrates how to enable AutoVerify for a single test instance when using the Verify library. AutoVerify allows test runs to auto-accept changes to verified files, facilitating workflows where changes are frequent or expected, such as maintaining database schema text files. Dependencies: Verify.NUnit or similar. The method is typically used within a test method, and will auto-approve received files, making them the new verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(target).AutoVerify();\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks Conventions with TUnit (C#)\nDESCRIPTION: This C# sample defines a test class using TUnit that calls VerifyChecks.Run(), asserting project conventions and settings. Requires the Verify.TUnit and TUnit packages as dependencies. The test method returns a Task and checks if current verification file/source control conventions are followed. No input; the output is a test result indicating conventions compliance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest and Verify testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Implementing DanglingSnapshots in XUnit\nDESCRIPTION: Creates a shared fixture collection in XUnit to handle dangling snapshot verification. Implements IDisposable to run the snapshot check during cleanup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dangling-files.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable VerifyDanglingSnapshots\n\n[CollectionDefinition(nameof(SharedFixtureCollection))]\npublic class SharedFixtureCollection :\n    ICollectionFixture<SharedFixture>;\n\npublic sealed class SharedFixture :\n    IDisposable\n{\n    public void Dispose() =>\n        DanglingSnapshots.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit Test Using Verify\nDESCRIPTION: Example XUnit test method that uses Verify to test a method that returns a person object, demonstrating the basic usage pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example TUnit test showing basic usage of Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with NUnit\nDESCRIPTION: Example NUnit test that demonstrates how to use Verify to snapshot test a Person object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Shows a basic example of how to write a Verify test using TUnit. It demonstrates verifying the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit V3 Testing\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit V3, including test SDK, Verify.XunitV3, and XUnit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project Configuration with Verify\nDESCRIPTION: Example implementation showing how to configure Verify with Fixie by implementing ITestProject and IExecution interfaces. Demonstrates setting target assembly and wrapping test executions with proper state management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/fixie-convention.include.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject : ITestProject, IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add(new DefaultConvention());\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        using var _ = ExecutionState.Set();\n        await testSuite.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test class showing basic usage of Verify with TUnit to test a person finder method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify - csharp\nDESCRIPTION: Demonstrates using Verify in an Xunit test class to verify the output of a method. The 'FindPerson' method is stubbed out in 'ClassBeingTested'. Requires Verify.Xunit and Xunit NuGet packages, as well as any custom code under test. The test returns a Task for async support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Custom Test Project Implementation for Fixie\nDESCRIPTION: Implements a custom TestProject class for Fixie that handles test parameterization and integrates with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-fixie.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Add this pattern to the .gitignore file to exclude all received files generated by Verify from source control, while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Example test implementation using Verify with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: Example test class showing how to write a test using Verify with MSTest, demonstrating the basic pattern of getting data and verifying it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Provides an example of a simple NUnit test that uses Verify to compare the result of a method call against a verified file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: Example of writing a test using Expecto with Verify, demonstrating the basic structure and verification pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Recording Status with IsRecording (C#)\nDESCRIPTION: Shows how to use the `Recording.IsRecording` boolean property to check if recording is currently active. This is useful for conditionally executing expensive data capture logic only when needed for verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'IsRecording' snippet\nRecording.Start();\n\nif (Recording.IsRecording)\n{\n    // Simulate potentially expensive data retrieval\n    var dataToRecord = GetDataForRecording(); \n    Recording.Add(\"data\", dataToRecord);\n}\n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing Combination Target Method\nDESCRIPTION: Sample target method that is being tested with combinations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationTargetMethod\n```\n\n----------------------------------------\n\nTITLE: Using a Subset of Parameters with Xunit Theory in Verify\nDESCRIPTION: Demonstrates how to use only a subset of test parameters for file naming, taking parameters in order from the start of the parameter list.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\", \"Value2\", \"Value3\")]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    var somethingToVerify = $\"{arg1} {arg2} {arg3} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex with a Module Initializer - C#\nDESCRIPTION: Demonstrates how to initialize the VerifyDiffPlex diff engine in a .NET test project using a C# module initializer. The method will be triggered on module load, registering DiffPlex as the text diff provider for Verify. Dependency: Project must reference Verify.DiffPlex. Key parameter: none. Input: no direct user input—code runs automatically. Output: modifies global diff output format during test execution. Constraints: Available in .NET 5+ with C# 9 for module initializers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: Creates a pipeline variable 'publishverify' when tests fail, using the Azure DevOps failed() condition. This flag is used to control subsequent artifact publishing steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Class Using Verify\nDESCRIPTION: Example test class showing a basic implementation of a test using Verify with MSTest to verify a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Xunit Test with Verify\nDESCRIPTION: Example of a minimal Xunit test that uses Verify to snapshot test a person object returned from a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: A sample Xunit test that uses Verify to perform snapshot testing. This example shows the basic structure and syntax for creating tests with Verify and Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: Add the Fixie and Verify.Fixie NuGet packages to the test project's csproj file. This snippet shows the necessary PackageReference entries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in MSTest\nDESCRIPTION: This snippet shows a basic example of how to write a test using Verify in an MSTest class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Instance-Level OnHandlers for Verify in C#\nDESCRIPTION: This snippet shows configuring verification lifecycle handlers for a single instance in the Verify library for C#. Instance-level handlers enable custom logic before and after verification, on first verification, or upon a mismatch, but only for that specific verification call. Use in situations where global handlers are too broad.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(target)\n    .OnVerify((before, after) =>\n    {\n        // Custom logic before verification\n    },\n    (before, after) =>\n    {\n        // Custom logic after verification\n    })\n    .OnFirstVerify(context =>\n    {\n        // Custom logic for first verification\n    })\n    .OnVerifyMismatch((received, verified) =>\n    {\n        // Custom logic when mismatch occurs\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI for Verify with XunitV3\nDESCRIPTION: CLI commands to add the necessary NuGet packages to a test project for using Verify with XunitV3, including the Microsoft.NET.Test.Sdk, Verify.XunitV3, and xunit.v3 packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with XUnit V3\nDESCRIPTION: C# code snippet showing a sample test using Verify with XUnit V3 to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A basic example of an Xunit test that uses Verify to capture and verify the state of an object. The test gets a person from a test class and verifies its properties against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing XML Member in C#\nDESCRIPTION: Illustrates how to scrub (replace with a placeholder) a specific XML member during verification. This snippet shows a unit test that scrubs the 'node' element in the XML structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task XmlScrubMember() =>\n    VerifyXml(xml)\n        .ScrubMember(\"node\");\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: Sample code showing how to run Verify's conventions check in an Xunit test. This ensures that all the expected conventions for snapshot testing are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksXunit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex PackageReference to Configuration File\nDESCRIPTION: This XML snippet adds the Verify.DiffPlex package to the project's dependencies, facilitating inline text comparison for test verifications. Ensure that you have a project configuration file where you can add this PackageReference with an unspecified version marked with '*'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Scrubber Example in NUnit\nDESCRIPTION: A complete example showcasing various scrubber techniques in NUnit tests, including line replacement, removal, and case-sensitive scrubbing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class ScrubbersSample\n{\n    [Test]\n    public Task Lines()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesWithReplace(\n            replaceLine: _ =>\n            {\n                if (_.Contains(\"LineE\"))\n                {\n                    return \"NoMoreLineE\";\n                }\n\n                return _;\n            });\n        settings.ScrubLines(removeLine: _ => _.Contains('J'));\n        settings.ScrubLinesContaining(\"b\", \"D\");\n        settings.ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n        return Verify(\n            settings: settings,\n            target: \"\"\"\n                    LineA\n                    LineB\n                    LineC\n                    LineD\n                    LineE\n                    LineH\n                    LineI\n                    LineJ\n                    \"\"\");\n    }\n\n    [Test]\n    public Task LinesFluent() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               LineD\n               LineE\n               LineH\n               LineI\n               LineJ\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: _ =>\n                {\n                    if (_.Contains(\"LineE\"))\n                    {\n                        return \"NoMoreLineE\";\n                    }\n\n                    return _;\n                })\n            .ScrubLines(removeLine: _ => _.Contains('J'))\n            .ScrubLinesContaining(\"b\", \"D\")\n            .ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n\n    [Test]\n    public Task RemoveOrReplace() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: line =>\n                {\n                    if (line.Contains(\"LineB\"))\n                    {\n                        return null;\n                    }\n\n                    return line.ToLower();\n                });\n\n    [Test]\n    public Task EmptyLines() =>\n        Verify(\"\"\"\n\n               LineA\n\n               LineC\n\n               \"\"\")\n            .ScrubEmptyLines();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom DateTime Format\nDESCRIPTION: Demonstrates how to add custom date formats for scrubbing using AddExtraDateTimeFormat.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void UseAddExtraDateTimeFormat() =>\n    VerifierSettings.AddExtraDateTimeFormat(\"yyyy-MM-dd\");\n\n[Fact]\npublic Task WithExtraDateTimeFormat() =>\n    Verify(\n        new\n        {\n            date = \"2022-11-08\"\n        });\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with Expecto in F#\nDESCRIPTION: F# example demonstrating how to write a verification test using Expecto and Verify to test a ClassBeingTested.FindPerson() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration in C#\nDESCRIPTION: Enables the Verify.DiffPlex integration using a C# ModuleInitializer. This code ensures that DiffPlex is initialized when the assembly loads, modifying Verify's default text comparison behavior to use DiffPlex's inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Test class that runs VerifyChecks.Run() to validate that all necessary Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Test class for checking if Verify conventions are followed in the project. Uses the VerifyChecks.Run() method with TUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Combination Test Results\nDESCRIPTION: Verified output from the combination test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nCombinationSample.BuildAddressTest.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in TUnit\nDESCRIPTION: Test class implementation for running Verify convention checks using TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrubber Levels in TUnit\nDESCRIPTION: Demonstrates how to implement scrubbers at method, class, and global levels in TUnit tests, showing both traditional and fluent configuration styles.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubberLevelsSample\n{\n    VerifySettings classLevelSettings;\n\n    public ScrubberLevelsSample()\n    {\n        classLevelSettings = new();\n        classLevelSettings.AddScrubber(_ => _.Replace(\"Three\", \"C\"));\n    }\n\n    [Test]\n    public Task Simple()\n    {\n        var settings = new VerifySettings(classLevelSettings);\n        settings.AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n        return Verify(\"One Two Three\", settings);\n    }\n\n    [Test]\n    public Task SimpleFluent() =>\n        Verify(\"One Two Three\", classLevelSettings)\n            .AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n\n    [ModuleInitializer]\n    public static void Setup() =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"One\", \"A\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with XUnit v3\nDESCRIPTION: XUnit v3 test class that runs VerifyChecks.Run() to ensure Verify conventions are being followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verify Test with Fixie\nDESCRIPTION: A complete sample test using Verify with Fixie framework. This example demonstrates how to write a test that verifies the string representation of a Person object against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public async Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"1 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        await Verifier.Verify(person);\n    }\n}\n\npublic class Person\n{\n    public string? GivenNames { get; set; }\n    public string? FamilyName { get; set; }\n    public string? Spouse { get; set; }\n    public Address? Address { get; set; }\n}\n\npublic class Address\n{\n    public string? Street { get; set; }\n    public string? Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Scrubbers in xUnit with Verify .NET (C#)\nDESCRIPTION: Provides an example of an xUnit test using Verify .NET with various scrubbers configured through VerifySettings. Demonstrates the application of line filtering and environment property replacement before output verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleTestClass\n{\n    [Fact]\n    public Task TestWithScrubbers()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesContaining(\"password\", \"token\");\n        settings.ScrubMachineName();\n        return Verifier.Verify(someResult, settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes to ensure consistent handling of verified text files, setting line endings to LF and encoding to UTF-8.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: Provides a basic example of an MSTest test class (`Sample`) and test method (`Test`) that uses Verify. It calls a method `ClassBeingTested.FindPerson()` and passes the result to the `Verify()` method for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Setting for Pure Method Return Value Enforcement\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors. This helps catch cases where Verify() calls are not properly awaited, which is a common mistake.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Git ignore patterns for Verify test output files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with NUnit, demonstrating how to verify test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This code snippet provides a sample Xunit test using Verify. It demonstrates how to create a simple object, serialize it, and verify its contents using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            },\n            Children = new List<string>\n            {\n                \"Sam\",\n                \"Mary\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit in C#\nDESCRIPTION: Provides an example of a Verify test using TUnit, demonstrating how to verify a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: To enable inline text difference highlighting, the Verify.DiffPlex package needs to be added using the dotnet CLI. This package is optional but recommended for better error visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Expecto Verify Tests\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto testing framework, including test SDK, Expecto framework and Verify.Expecto integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core Fixie test framework and Verify.Fixie packages via NuGet\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Task for Publishing Received Files as Artifacts\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline task that publishes the staged received files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Implementation of a test that runs Verify conventions check using Expecto's test framework. This ensures that all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet verifyConventions () = task {\n    do! VerifyChecks.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Zip Verification with XUnit\nDESCRIPTION: Simple example of verifying a zip file's contents using VerifyZip method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-zip.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithZip() =>\n    VerifyZip(zipPath);\n```\n\n----------------------------------------\n\nTITLE: Writing a Sample Expecto Test with Verify (C#)\nDESCRIPTION: References a C# code snippet (`SampleTestExpecto`) that provides a basic example of how to write a test using the Expecto framework integrated with Verify. It likely demonstrates calling a `Verify(...)` method within an Expecto test case to perform snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestExpecto\n// This snippet likely contains C# code for an Expecto test,\n// for example:\n// open Expecto\n// open VerifyTests\n// open VerifyExpecto\n// \n// [<Tests>]\n// let tests = \n//    test \"Sample\" { \n//        let person = new { Name = \"Joe\", Age = 30 }\n//        Verifier.Verify(person) |> Async.AwaitTask\n//    }\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Snapshot Verification Test - C#\nDESCRIPTION: This C# test demonstrates a basic NUnit test using Verify snapshot testing. It creates or finds a test object with ClassBeingTested.FindPerson(), then verifies it with Verify(person). Requires NUnit and Verify.NUnit, and Implicit Usings enabled unless using Verifier.Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: This code demonstrates how to run Verify's conventions check using TUnit. It creates a test method that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyConventions()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an NUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test with Verify in C#\nDESCRIPTION: This code provides a sample test using Fixie and Verify. It demonstrates how to write a test method that uses Verify to compare a string value against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test() =>\n        Verify(\"Some String\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example implementation of a basic verification test using MSTest and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify.Xunit Test in C#\nDESCRIPTION: Example of a simple Verify.Xunit test method in C#, demonstrating how to use the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring and accepting/rejecting snapshot changes via the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files across editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control (.gitignore)\nDESCRIPTION: This shell snippet configures .gitignore to exclude all '*.received.*' files from source control. This ensures that temporary artifacts generated during test runs are not committed to the repository. Add this line to your .gitignore file at the root of your repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: Example C# code showing a basic XUnit v3 test using Verify to snapshot test a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the necessary NuGet packages (Fixie and Verify.Fixie) to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: An example Xunit test demonstrating the use of the Verify library to check objects. Defines a task-based test method for verifying the output of `ClassBeingTested.FindPerson()`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example of a Verify test using Xunit, demonstrating how to write and structure a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conventions Check with Fixie in C#\nDESCRIPTION: Runs a conventions check using VerifyChecks to ensure code adheres to specified testing conventions. Utilize VerifyChecks.Run within a test class to perform automatic verification of conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with Fixie test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataRow for Parameterized Tests in MSTest\nDESCRIPTION: Shows how to use DataRow attribute for parameterized tests in MSTest with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"Value1\", \"Value2\")]\npublic Task DataRowInstance(string arg1, string arg2) =>\n    Verify(\"value\");\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: An example of how to write a Verify test using the Expecto framework, demonstrating the basic structure and assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"Test\" {\n        let person = Person(\"John\", \"Smith\")\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit and Verify NuGet Packages to Test Project\nDESCRIPTION: The required NuGet package references to set up an Xunit project with Verify integration. Includes Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio packages with specified versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages to Test Project\nDESCRIPTION: This shell command adds necessary NuGet packages to a .NET test project, including Microsoft.NET.Test.Sdk, MSTest.TestAdapter, MSTest.TestFramework, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: A sample Verify test implementation using TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check using XUnit v3 testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: C# code snippet demonstrating how to use the VerifyBase class in an MSTest test class to simplify Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: An example test method demonstrating how to use Verify with XUnit v3 to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test\nDESCRIPTION: MSTest implementation of a VerifyChecks.Run() test that validates all verification conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in C#\nDESCRIPTION: C# test class implementing verification checks for assembly conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Fixie and Verify\nDESCRIPTION: The NuGet packages required to use Verify with Fixie test framework. These packages provide the core functionality for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Test\nDESCRIPTION: Example test implementation using Verify with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test using TUnit\nDESCRIPTION: Example of a basic Verify test using TUnit, demonstrating how to verify the output of a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in NUnit\nDESCRIPTION: NUnit test implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks for Expecto\nDESCRIPTION: This code snippet demonstrates how to implement VerifyChecks.Run() in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with NUnit\nDESCRIPTION: Example of a basic test implementation using Verify with NUnit. The snippet demonstrates the structure and pattern for creating verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Fixie\nDESCRIPTION: Demonstrates a basic test class using Verify to test person finding functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example implementation of a basic NUnit test using Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance-Level Enumerable Ordering in Verify Tests\nDESCRIPTION: This snippet shows how to configure enumerable ordering for a specific test instance. It creates a VerifySettings object and uses OrderEnumerableBy to specify the ordering criteria.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task EnumerableOrder()\n{\n    var settings = new VerifySettings();\n    settings.OrderEnumerableBy<Target>(_ => _.Value);\n    return Verify(\n        new List<Target>\n        {\n            new(\"a\"),\n            new(\"c\"),\n            new(\"b\")\n        },\n        settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Converter Condition Check in C#\nDESCRIPTION: Illustrates the implementation of a canConvert function to ensure only TIFF images are processed by the converter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nstatic bool ImageCanConvert(Image image)\n{\n    return image.RawFormat.Guid == ImageFormat.Tiff.Guid;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying JSON Data in Different Formats\nDESCRIPTION: Examples of using VerifyJson with different input formats: JSON string, JSON stream, and JToken object. The verification process converts inputs to a standardized format and applies ignore rules before verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[Fact]\npublic Task VerifyJsonString()\n{\n    var json = \"{'key': {'msg': 'No action taken'}}\";\n    return VerifyJson(json);\n}\n\n[Fact]\npublic Task VerifyJsonStream()\n{\n    var json = \"{'key': {'msg': 'No action taken'}}\";\n    var stream = new MemoryStream(Encoding.UTF8.GetBytes(json));\n    return VerifyJson(stream);\n}\n\n[Fact]\npublic Task VerifyJsonJToken()\n{\n    var json = \"{'key': {'msg': 'No action taken'}}\";\n    var target = JToken.Parse(json);\n    return Verify(target);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verify Test for Snapshot Comparison (C#)\nDESCRIPTION: Defines a C# NUnit test class with a method that creates/loads a 'person' object via a static factory and verifies it using the Verify() assertion. Inputs and outputs depend on the test subject (ClassBeingTested.FindPerson); Verify() compares the actual object to a verified snapshot, failing if they differ.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test with Verify\nDESCRIPTION: A sample test using Verify with XunitV3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    return Verify(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging (Azure DevOps YAML)\nDESCRIPTION: Provides an Azure DevOps CopyFiles@2 YAML task that conditionally copies all '*.received.*' files to a staging directory if the publish flag is set. This is required because artifact publishing does not support wildcards directly. The task overwrites and cleans the target folder as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\\n  condition: eq(variables['publishverify'], 'Yes')\\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\\n  inputs:\\n    contents: '**/*.received.*' \\n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\\n    cleanTargetFolder: true\\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test\nDESCRIPTION: Example implementation of a basic verification test using XUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test implementation using Verify with Fixie test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameterisation for Fixie and Verify.Fixie\nDESCRIPTION: Shows how to implement custom test parameterisation for Fixie, including necessary modifications for Verify.Fixie integration. It includes setting up ITestProject and IExecution interfaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-fixie.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject : ITestProject\n{\n    public void Configure(IFixieConfiguration configuration, TestEnvironment environment)\n    {\n        configuration.Classes\n            .Where(type => type.IsPublic);\n\n        configuration.Methods\n            .Where(method => method.IsPublic);\n\n        configuration.Parameters\n            .Add(new ParameterSource());\n\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n    }\n\n    public IExecution CreateExecution(TestClass testClass, IEnumerable<Test> tests)\n    {\n        return new Execution();\n    }\n\n    private class Execution : IExecution\n    {\n        public async Task Run(IFixieContext context, TestClass testClass)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                var parameters = test.HasParameters\n                    ? context.Parameters.SelectMany(x => x.GetParameters(testClass, test)).ToArray()\n                    : Array.Empty<object>();\n\n                using (ExecutionState.Set(testClass, test, parameters))\n                {\n                    await context.Run(testClass, test, parameters);\n                }\n            }\n        }\n    }\n\n    private class ParameterSource : IParameterSource\n    {\n        public IEnumerable<object[]> GetParameters(TestClass testClass, Test test)\n        {\n            var methodInfo = test.Method;\n\n            var testCase = methodInfo.GetCustomAttribute<TestCaseAttribute>();\n            if (testCase != null)\n            {\n                yield return testCase.Parameters;\n            }\n        }\n    }\n}\n\n[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]\npublic class TestCaseAttribute : Attribute\n{\n    public TestCaseAttribute(params object[] parameters)\n    {\n        Parameters = parameters;\n    }\n\n    public object[] Parameters { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Using MemberData with Fluent API in Xunit Verify\nDESCRIPTION: Shows a cleaner fluent syntax for configuring parameters with Xunit MemberData theories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[MemberData(nameof(GetData))]\npublic Task MemberDataUsageFluent(string arg) =>\n    Verify(arg)\n        .UseParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Sample xUnit Test with Verify\nDESCRIPTION: Example of an xUnit test using Verify to snapshot test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        },\n        Children = new List<string>\n        {\n            \"Sam\",\n            \"Mary\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify.Expecto Test in F#\nDESCRIPTION: F# code snippet showing a sample test using Verify.Expecto to verify a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test implementation using Verify with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify test implementation with MSTest\nDESCRIPTION: Example of a complete MSTest test method using Verify to create a snapshot test. Shows the basic structure for writing and running a Verify test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class SampleTestMSTest\n{\n    [TestMethod]\n    public Task Test()\n    {\n        return Verifier.Verify(\"sample\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VerifyChecks Test with NUnit\nDESCRIPTION: An NUnit test fixture that runs verification checks to ensure all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Framework Configuration for Verify\nDESCRIPTION: Implementation of Fixie's ITestProject and IExecution interfaces to properly integrate Verify with Fixie test runner, handling target assembly assignment and execution state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Snapshot Test with MSTest (C#)\nDESCRIPTION: Provides an MSTest sample verifying an object snapshot. This class defines a test that creates a 'person' object (from 'ClassBeingTested.FindPerson()') and asserts its snapshot matches expected. Useful as a boilerplate for new tests. Requires implicit usings, MSTest, and Verify.MSTest set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic partial class Sample\\n{\\n    [TestMethod]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks in NUnit\nDESCRIPTION: Example test fixture showing how to implement verification checks using NUnit test framework with the Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different Scrubber Levels in TUnit with Verify .NET (C#)\nDESCRIPTION: Shows how to layer and reuse scrubber settings in TUnit tests using the Verify .NET library. Method-specific and class-wide configurations are demonstrated for comprehensive output cleaning.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubberLevelsSample\n{\n    static VerifySettings classSettings = new VerifySettings().ScrubLinesContaining(\"api-key\");\n\n    [Test]\n    public async Task MethodLevelScrubbing()\n    {\n        var settings = new VerifySettings().ScrubLinesContaining(\"token\");\n        await Verifier.Verify(someResult, settings);\n    }\n\n    [Test]\n    public async Task ClassLevelScrubbing()\n    {\n        await Verifier.Verify(someResult, classSettings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: A sample test that demonstrates how to use Verify with TUnit. This shows the basic structure of a verification test in the TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: This snippet shows a sample test using Verify with MSTest. It demonstrates how to use the Verify method to compare a complex object against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task TestVerify()\n{\n    var person = new Person(\n        id: \"ebced679-45d3-4653-8791-3d969c4a986c\",\n        title: Title.Mr,\n        givenNames: \"John\",\n        familyName: \"Smith\",\n        dob: new DateTime(2000, 10, 1));\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A simple NUnit test example showing how to use Verify with NUnit to verify the state of an object returned from a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with NUnit\nDESCRIPTION: Example of a Verify test using NUnit, demonstrating the basic structure and assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    return Verify(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic F# Verification Test\nDESCRIPTION: Demonstrates how to write a basic verification test in F#, showing proper async handling with ToTask().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/fsharp.md#2025-04-22_snippet_2\n\nLANGUAGE: fsharp\nCODE:\n```\n[<Fact>]\nlet MyTest () =\n     Verifier.Verify(15).ToTask() |> Async.AwaitTask\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with MSTest\nDESCRIPTION: Sample MSTest test class demonstrating how to use Verify to snapshot test a person object returned from a class being tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example implementation of a basic verify test using XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Test Results on Failure\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail. This helps in debugging failed Verify tests in CI/CD pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test in C# using Verify\nDESCRIPTION: This code snippet shows a snapshot test using the Verify library. It tests the FindPerson method by verifying the entire Person object against a stored snapshot, simplifying the test code and improving maintainability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/compared-to-assertion.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task SnapshotTest()\n{\n    var person = ClassBeingTested.FindPerson();\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example of a basic Verify test implementation using xUnit, demonstrating how to verify an object's state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: Example test implementation showing how to use Verify with Fixie for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test with XUnit v3 and Verify\nDESCRIPTION: A sample test implementation using XUnit v3 with Verify. This snippet demonstrates how to write a basic verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an NUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with XunitV3 and Verify\nDESCRIPTION: A sample test implementation using XunitV3 with Verify to demonstrate the basic usage pattern of snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: Provides a sample test class and method using Verify with MSTest, demonstrating how to verify the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Strict JSON Settings in C#\nDESCRIPTION: Initializes global settings to use strict JSON formatting across all tests using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Init() =>\n    VerifierSettings.UseStrictJson();\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up MSTest with Verify testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A complete example of a Fixie test class that uses Verify to snapshot test an object. Shows the basic pattern for creating and running a verification test that compares actual results against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Test with Verify and Fixie in C#\nDESCRIPTION: Demonstrates a basic test using Verify with the Fixie framework. The test finds a person and verifies the result using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in Xunit\nDESCRIPTION: Sample test class demonstrating how to implement VerifyChecks.Run() to validate testing conventions and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Implicit Usings in csproj\nDESCRIPTION: XML configuration for enabling implicit usings in a project file. When enabled, it allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Example of how to run the Verify conventions check in a TUnit test to ensure proper configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyConventions() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with MSTest\nDESCRIPTION: Defines an MSTest test class (`VerifyChecksTests`) with a test method (`Run`) that executes `VerifyChecks.Run()`. This test verifies that the project adheres to VerifyTests conventions, such as correct `.gitignore` and `.gitattributes` settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A basic sample test using Verify with Fixie to verify the state of an object returned by a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with Verify\nDESCRIPTION: Example test class demonstrating how to use Verify with TUnit for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase for MSTest Integration (C#)\nDESCRIPTION: An MSTest test class (`VerifyBaseUsage`) that inherits from `VerifyBase`. This is an alternative method to opt-in the class for Verify's Source Generator processing and provides direct access to Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up VerifyChecks for Expecto Tests\nDESCRIPTION: A C# example showing how to implement a verification check test with Expecto. This test ensures that Verify's conventions are correctly applied to the executing assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Extending WriteOnlyJsonConverter for Combination Results in C#\nDESCRIPTION: This snippet defines the CombinationResultsConverter class, which serializes combination results into JSON format. It overrides the Write method from WriteOnlyJsonConverter, iterating through combination results to build JSON objects based on the presented keys and values. The class also provides functionality for writing column names and handling different result types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nnamespace VerifyTests;\n\npublic class CombinationResultsConverter :\n    WriteOnlyJsonConverter<CombinationResults>\n{\n    public override void Write(VerifyJsonWriter writer, CombinationResults results)\n    {\n        writer.WriteStartObject();\n\n        var items = results.Items;\n        if (items.Count == 0)\n        {\n            return;\n        }\n\n        var keysLength = items[0].Keys.Count;\n\n        int[] maxKeyLengths;\n        if (results.Columns == null)\n        {\n            maxKeyLengths = new int[keysLength];\n        }\n        else\n        {\n            maxKeyLengths = results.Columns.Select(_=>_.Length).ToArray();\n        }\n\n        var keyValues = new string[items.Count, keysLength];\n\n        for (var itemIndex = 0; itemIndex < items.Count; itemIndex++)\n        {\n            var item = items[itemIndex];\n            for (var keyIndex = 0; keyIndex < keysLength; keyIndex++)\n            {\n                var key = item.Keys[keyIndex];\n                var name = VerifierSettings.GetNameForParameter(key, writer.Counter, pathFriendly: false);\n                keyValues[itemIndex, keyIndex] = name;\n                var currentKeyLength = maxKeyLengths[keyIndex];\n                if (name.Length > currentKeyLength)\n                {\n                    maxKeyLengths[keyIndex] = name.Length;\n                }\n            }\n        }\n\n        WriteColumns(writer, results, maxKeyLengths);\n\n        // keys is reused\n        var keys = new CombinationKey[keysLength];\n        for (var itemIndex = 0; itemIndex < items.Count; itemIndex++)\n        {\n            for (var keyIndex = 0; keyIndex < keysLength; keyIndex++)\n            {\n                keys[keyIndex] = new(\n                    Value: keyValues[itemIndex, keyIndex],\n                    MaxLength: maxKeyLengths[keyIndex],\n                    Type: results.KeyTypes?[keyIndex]);\n            }\n\n            var item = items[itemIndex];\n            var name = BuildPropertyName(keys);\n            writer.WritePropertyName(name);\n            WriteValue(writer, item);\n        }\n\n        writer.WriteEndObject();\n    }\n\n    static void WriteColumns(VerifyJsonWriter writer, CombinationResults results, int[] maxKeyLengths)\n    {\n        if (results.Columns == null)\n        {\n            return;\n        }\n\n        var builder = new StringBuilder();\n        for (var index = 0; index < results.Columns.Count; index++)\n        {\n            var column = results.Columns[index];\n            var maxLength = maxKeyLengths[index];\n            var padding = maxLength - column.Length;\n            builder.Append(column);\n            builder.Append(' ', padding);\n            builder.Append(\", \");\n        }\n        builder.Length -= 2;\n\n        writer.WritePropertyName(builder.ToString());\n        writer.WriteValue(\"Result\");\n    }\n\n    protected virtual string BuildPropertyName(IReadOnlyList<CombinationKey> keys)\n    {\n        var builder = new StringBuilder();\n        foreach (var (value, maxLength, type) in keys)\n        {\n            var padding = maxLength - value.Length;\n            if (type != null &&\n                type.IsNumeric())\n            {\n                builder.Append(' ', padding);\n                builder.Append(value);\n            }\n            else\n            {\n                builder.Append(value);\n                builder.Append(' ', padding);\n            }\n\n            builder.Append(\", \");\n        }\n\n        builder.Length -= 2;\n        return builder.ToString();\n    }\n\n    protected virtual void WriteValue(VerifyJsonWriter writer, CombinationResult result)\n    {\n        switch (result.Type)\n        {\n            case CombinationResultType.Void:\n                writer.WriteValue(\"void\");\n                break;\n            case CombinationResultType.Value:\n                if (result.Value == null)\n                {\n                    writer.WriteNull();\n                }\n                else\n                {\n                    writer.Serialize(result.Value);\n                }\n                break;\n            case CombinationResultType.Exception:\n                var exception = result.Exception;\n                var message = exception.Message;\n                if (exception is ArgumentException)\n                {\n                    message = FlattenMessage(message);\n                }\n\n                writer.WriteValue($\"{exception.GetType().Name}: {message}\");\n                break;\n            default:\n                throw new ArgumentOutOfRangeException();\n        }\n    }\n\n    static string FlattenMessage(string message)\n    {\n        var builder = new StringBuilder();\n\n        foreach (var line in message.AsSpan().EnumerateLines())\n        {\n            var trimmed = line.TrimEnd();\n            builder.Append(trimmed);\n            if (!trimmed.EndsWith('.'))\n            {\n                builder.Append(\". \");\n            }\n        }\n\n        builder.TrimEnd();\n        return builder.ToString();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude received files from source control. These are temporary files generated during testing and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Test with Verify\nDESCRIPTION: Provides a sample test using XUnit V3 with Verify. This test demonstrates how to use the Verify framework in a practical scenario.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultValueHandling for F# Option Types in Argon\nDESCRIPTION: This snippet demonstrates how to configure DefaultValueHandling to include F# Option.None values, which are treated as null by default.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/fsharp.source.md#2025-04-22_snippet_1\n\nLANGUAGE: fs\nCODE:\n```\nVerifierSettings.AddExtraSettings(fun settings ->\n    settings.DefaultValueHandling <- DefaultValueHandling.Include)\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example XUnit test showing basic usage of Verify for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing NUnit Verify Checks Test\nDESCRIPTION: This code sample demonstrates how to implement a test that runs Verify's built-in checks to ensure all conventions are properly set up. It uses the NUnit testing framework with Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration (C#)\nDESCRIPTION: Defines a module initializer using the `[ModuleInitializer]` attribute. Inside the `Initialize` method, it calls `VerifyDiffPlex.Initialize()` to activate the DiffPlex integration for VerifyTests, ensuring enhanced diff output is used during test failures. This requires the `Verify.DiffPlex` NuGet package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Verify Check with XunitV3\nDESCRIPTION: Sample test class that runs VerifyChecks.Run() to ensure all verification conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MSTest and Verify NuGet Packages\nDESCRIPTION: This snippet shows the required NuGet package references for using MSTest with Verify. It includes Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text difference visualization during test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Tests\nDESCRIPTION: Git configuration to exclude received files from source control. All *.received.* files should be excluded while verified files should be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: An example of a Fixie test method using Verify to perform snapshot testing. It demonstrates the basic structure and usage of Verify in a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Auto-Verify Configuration in C#\nDESCRIPTION: Shows how to configure auto-verification globally using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.AutoVerify();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Tests with xUnit\nDESCRIPTION: Example of how to use Verify with xUnit test framework. The test retrieves a Person object and uses Verify to create or compare a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Example of a Fixie test using Verify to test a method that finds a person.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring UsesVerify Attribute for a Single Test Class - C#\nDESCRIPTION: Illustrates how to annotate a single MSTest class to include it in the Verify source generation process. Ensures correct behavioral integration of Verify. Requires Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control to Exclude Received Files\nDESCRIPTION: GitIgnore configuration to exclude all *.received.* files from source control, as they should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: This snippet demonstrates a basic Verify test using MSTest, showing how to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via CLI\nDESCRIPTION: This command installs the DiffEngineTray tool globally using the .NET CLI, which helps in managing snapshot differences directly from the Windows tray for better file comparison management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Received Files as AppVeyor Artifacts on Failure\nDESCRIPTION: Shows a YAML configuration snippet for AppVeyor's `on_failure` build step. It uses PowerShell (`ps`) to find all `*.received.*` files recursively (`Get-ChildItem`) and uploads each one as a build artifact using `Push-AppveyorArtifact`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Text Files (EditorConfig/INI)\nDESCRIPTION: Provides an EditorConfig section to enforce settings for verified and received text files, including UTF-8 BOM encoding, LF line endings, and disabling trailing whitespace trimming and final newline insertion. Helps editors respect file conventions necessary for reliable verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Setting for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps ensure that Verify() calls are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with Xunit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for managing snapshots\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Source control settings for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in Expecto with Verify\nDESCRIPTION: Code snippet demonstrating how to set up a test that checks if Verify's conventions are being followed correctly in an Expecto test project. This helps ensure snapshot testing is configured properly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nlet verifyChecks = testCase \"VerifyChecks\" <| fun _ ->\n    Verifier.ThrowIfVerifyHasNotBeenConfigured()\n    Verifier.VerifyChecks()\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: A basic example of a Fixie test that uses Verify to snapshot test the output of a method called FindPerson(), demonstrating the minimal syntax required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages using dotnet CLI\nDESCRIPTION: Demonstrates how to add the `TUnit` and `Verify.TUnit` NuGet packages to a .NET test project using the `dotnet add package` command. These packages are essential for integrating Verify snapshot testing with the TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: An example of an NUnit test using Verify to perform snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        Id = new(Guid.NewGuid()),\n        Title = Title.Mr,\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Children = new List<string>\n        {\n            \"Sam\",\n            \"Mary\"\n        },\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Fixie Packages with dotnet CLI\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with the Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Targets in NUnit\nDESCRIPTION: Demonstrates how to use explicit targets in NUnit verification tests. Shows target handling as string or serialized objects.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/explicit-targets.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nExplicitTargetsNunit\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: This code snippet shows a sample NUnit test using Verify. It demonstrates how to create a test method that verifies the output of a method call using Verify's assertion mechanism.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using MSTest - C#\nDESCRIPTION: An example MSTest class that uses Verify to snapshot test an object found by ClassBeingTested.FindPerson(). Requires MSTest, Verify.MSTest, and properly configured source generator attributes. 'person' parameter is the test input; Verify verifies output structure/content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic partial class Sample\\n{\\n    [TestMethod]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with XunitV3\nDESCRIPTION: A simple example test class demonstrating how to use Verify with XunitV3 to create a snapshot test for a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: This code snippet demonstrates a sample test using TUnit and Verify to test a Person class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        Id = new Guid(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n        Title = \"Mr\",\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Children = new List<string>{\"Sam\", \"Mary\"},\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - Shell\nDESCRIPTION: This code uses the dotnet CLI to add the Verify.DiffPlex package, which enhances Verify's diff output to inline text highlighting. Run this command from your test project directory; Verify.DiffPlex is an optional but recommended dependency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Using CurrentFile Utility for Path Operations\nDESCRIPTION: Shows how to use the CurrentFile utility class to find paths relative to the current file. This is useful for locating test resources and outputs relative to test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class CurrentFile\n{\n    static string CallerFilePath([CallerFilePath] string? path = null) => path!;\n\n    public static string Relative([CallerFilePath] string? path = null, string? relativePath = null)\n    {\n        if (string.IsNullOrEmpty(relativePath))\n        {\n            return CallerFilePath(path);\n        }\n\n        var directory = Path.GetDirectoryName(CallerFilePath(path))!;\n        return Path.GetFullPath(Path.Combine(directory, relativePath));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with XunitV3\nDESCRIPTION: A reference to a sample test implementation using XunitV3 with Verify. This shows the basic structure of a verification test using the XunitV3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example of a basic verify test using MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: This snippet shows a sample NUnit test method using Verify. It demonstrates how to use the Verify() method to compare the actual result with the expected snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify and Xunit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with Fixie\nDESCRIPTION: Example of a simple Verify test using Fixie testing framework, demonstrating how to verify a string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example of inheriting from VerifyBase in an MSTest class to enable Verify functionality without explicitly using the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: C# code snippet showing a sample MSTest test method using Verify to compare the result of a method call against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with Fixie for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase to enable verification capabilities in a test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: C# code snippet to run Verify checks as part of an Xunit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package - Shell\nDESCRIPTION: This command adds the Verify.DiffPlex NuGet package to an existing project, enabling inline highlighting of text difference results on test failures. Execute this in the CLI within the project directory. No additional parameters are required; DiffPlex is an optional, recommended extension for improved output readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify (C#)\nDESCRIPTION: Provides a basic example of a Fixie test class containing a test method that uses `Verify()` to perform snapshot testing on a simple anonymous object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Example Fixie test class\npublic class SampleTests\n{\n    [Fact] // Or use Fixie's convention-based discovery\n    public Task RunSampleTest()\n    {\n        var data = new { Name = \"John Doe\", Age = 42 };\n        return Verify(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with VerifyChecks in Expecto\nDESCRIPTION: Implementation of a test that runs Verify's convention checks using Expecto. This ensures that all Verify conventions are properly configured in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyConventions() =\n    task {\n        return VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Test Implementation\nDESCRIPTION: C# test class implementing VerifyChecks to validate conventions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with Expecto\nDESCRIPTION: Example of a basic Verify test implemented with Expecto testing framework. The test initializes verification settings and verifies a target object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests\n\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet ``Sample test`` () = task {\n    let settings = VerifySettings()\n    settings.UseDirectory(\"Snapshots\")\n    do! Verifier.Verify(\"Sample\", settings)\n}\n\n[<EntryPoint>]\nlet main args = runTestsWithArgs defaultConfig args Tests.``Sample test``\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an Expecto test. It uses the VerifyChecks.Run() method to check conventions in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: Provides a sample test using Verify with TUnit to test a FindPerson method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verification Conventions with NUnit - C#\nDESCRIPTION: This C# test class uses NUnit to check file and source control conventions for Verify snapshot files by calling VerifyChecks.Run(). Requires NUnit, Verify.NUnit, and VerifyChecks to be referenced. Place this in your test project to automate convention enforcement.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic xUnit Test with Verify\nDESCRIPTION: A sample xUnit test that demonstrates how to use Verify to test a class method and automatically verify its output through snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: Example MSTest test class that demonstrates basic usage of Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test with Verify\nDESCRIPTION: Example test code for XunitV3 with Verify. This sample demonstrates the basic structure and syntax for writing a Verify test using XunitV3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verification Conventions Check with MSTest\nDESCRIPTION: Test class that runs VerifyChecks to validate that all required verification conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: Uses the ModuleInitializer attribute to ensure VerifyDiffPlex is initialized when the module is loaded. This setup is necessary for integrating VerifyDiffPlex with the testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: Provides an example of a test method using Verify with XUnit v3. This test demonstrates how to use the Verify framework to compare actual results with expected results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            },\n            Children = new List<string> {\"Sam\", \"Mary\"},\n            Guid = Guid.Parse(\"ebced679-45d3-4653-8791-3d969c4a986c\")\n        };\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: F# code snippet showing a sample Expecto test that uses Verify to compare test results with verified snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with Xunit\nDESCRIPTION: A unit test class that runs the VerifyChecks to ensure all verification conventions are properly configured. This test validates that the project follows the recommended conventions for snapshot testing with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Provides a sample Xunit test using Verify. The test creates a person object and uses Verify to assert its properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify.MSTest (CSPROJ)\nDESCRIPTION: Demonstrates the inclusion of required NuGet packages in a .csproj file to enable MSTest with the Verify.MSTest extension. Dependencies include 'Microsoft.NET.Test.Sdk', 'MSTest', and 'Verify.MSTest'. Ensure these are present in your test project file before running snapshot verification tests. No additional configuration needed; versions should be aligned with those in the snippet or later.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Microsoft.NET.Test.Sdk\\\" Version=\\\"17.13.0\\\" />\\n<PackageReference Include=\\\"MSTest\\\" Version=\\\"3.8.3\\\" />\\n<PackageReference Include=\\\"Verify.MSTest\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie NuGet Packages for Verify Integration\nDESCRIPTION: Required NuGet package references for using Verify with Fixie test framework, including Fixie core and Verify.Fixie packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in TUnit Tests\nDESCRIPTION: Demonstrates how to use UseParameters() to control what parameters are used when naming files in Verify.TUnit tests. This is useful when parameters are not automatically detected.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\")]\npublic Task UseParametersUsage(string arg)\n{\n    var somethingToVerify = $\"{arg} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Xunit Sample Test with Verify\nDESCRIPTION: Demonstrates an Xunit test class using the Verify library to validate an object. Ensure the Verify library is referenced.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using MSTest\nDESCRIPTION: A sample test method demonstrating how to use Verify with MSTest, including setting up the test class and writing a simple verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FileScrubber with VerifyZip for Per-File Normalization in Xunit v3 (C#)\nDESCRIPTION: Demonstrates how to apply a custom file scrubber function to the files within the zip archive during verification in Xunit v3 C#. The fileScrubber parameter allows dynamic content normalization for files considered as text by FileExtensions.IsText. This is useful for hiding or standardizing non-testable content. Depends on Verify and Xunit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-zip.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyZipWithFileScrubberXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: This snippet demonstrates how to create a test method that runs Verify's convention checks. It ensures that all necessary conventions are followed in the project setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in NUnit\nDESCRIPTION: Example test fixture showing how to implement convention checks using VerifyChecks.Run() in NUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Ignore Stack Trace for Exception Verification in C#\nDESCRIPTION: This snippet shows how to globally set the ignore stack trace option for all exception verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.IgnoreStackTrace();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with XUnit\nDESCRIPTION: Example test class showing how to implement a basic verification test using XUnit and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Manually Verifying Recording in C#\nDESCRIPTION: Illustrates how to stop Recording and manually verify the resulting data. It allows for filtering or processing the recorded data before verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task Stop()\n{\n    Recording.Start();\n    Recording.Add(\"name1\", \"value1\");\n    Recording.Add(\"name2\", \"value2\");\n    var appends = Recording.Stop();\n    return Verify(appends.Where(_ => _.Name != \"name1\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Verify with Async Functions\nDESCRIPTION: Demonstrates how to use Verify with async lambda expressions by passing a Func<Task<T>> to the verification method, which is awaited before verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task VerifyFuncOfTaskOfT()\n{\n    var output = await Verify(\n        () => Task.FromResult(\n            new\n            {\n                Property = \"value\"\n            }));\n    Debug.WriteLine(output.FileName);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verify Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit, including test SDK, Verify.Xunit, and xunit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with TUnit\nDESCRIPTION: A sample TUnit test that verifies the output of a method using Verify's snapshot testing capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Verify Calls in Single Test\nDESCRIPTION: Shows how to handle multiple verify calls in a single test method using different method names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task MultipleCalls() =>\n    Task.WhenAll(\n        Verify(\"Value1MultipleCalls\")\n            .UseMethodName(\"MultipleCalls_1\"),\n        Verify(\"Value1MultipleCalls\")\n            .UseMethodName(\"MultipleCalls_2\"));\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: NUnit test fixture to run Verify's convention checks, ensuring proper setup and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Comparer in Verify Tests\nDESCRIPTION: Shows how to register an instance of a custom comparer for specific file extensions. This approach allows passing parameters to the comparer during initialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/comparer.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize()\n{\n    var comparer = new ImageComparer();\n    VerifierSettings.RegisterComparer(\"bmp\", comparer);\n    VerifierSettings.RegisterComparer(\"png\", comparer);\n    VerifierSettings.RegisterComparer(\"jpg\", comparer);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: Example of a simple XUnit v3 test method using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing User Name in Verify Tests\nDESCRIPTION: Demonstrates how to use ScrubUserName to replace the Environment.UserName with a placeholder in the verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nverifySettings.ScrubUserName();\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration Implementation\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie. Handles test discovery, execution state management, and supports both parameterized and non-parameterized tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool using .NET CLI\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required MSTest NuGet Packages\nDESCRIPTION: NuGet package references required for MSTest testing with Verify framework including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Machine Name in Verify Tests\nDESCRIPTION: Shows how to use ScrubMachineName to replace the Environment.MachineName with a placeholder in the verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nverifySettings.ScrubMachineName();\n```\n\n----------------------------------------\n\nTITLE: MSTest Sample Using Verify\nDESCRIPTION: Example MSTest class demonstrating how to use Verify to create a snapshot test for an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages (csproj)\nDESCRIPTION: Specifies the necessary NuGet package references for using Fixie as the test framework and Verify.Fixie for integration with the Verify testing library within a .NET project file (.csproj).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: This snippet shows a sample test using Verify with Expecto. It demonstrates how to create a simple object and verify its serialized form using the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[<Tests>]\nlet Tests =\n    testTask \"Sample\" {\n        let person = Person(Id = Guid(\"ebced679-45d3-4653-8791-3d969c4a986c\"), Title = \"Mr\")\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: This snippet shows a basic example of how to write a test using Verify with TUnit in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Tests with Fixie\nDESCRIPTION: Example of how to use Verify with Fixie test framework. The test retrieves a Person object and uses Verify to create or compare a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify (C#)\nDESCRIPTION: Illustrates a simple XunitV3 test using Verify to snapshot the result of a method. Relies on Verify.XunitV3 and implicit usings for shorthand Verify(). Shows how to compose a test that captures object state for verification. Input: object returned by ClassBeingTested.FindPerson(); Output: produces/compares snapshot files. Limitation: assumes implicit usings and correct NuGet setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Xunit\nDESCRIPTION: A sample Xunit test that demonstrates how to use Verify to snapshot test a Person object. The test retrieves data from a ClassBeingTested and verifies it against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with TUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Combination Serialization in C#\nDESCRIPTION: This snippet shows how to create a custom converter by inheriting from CombinationResultsConverter. It overrides the BuildPropertyName method to modify how property names are constructed during the serialization of combination results, bypassing default behaviors like padding and key conversion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\nclass CustomCombinationConverter :\n    CombinationResultsConverter\n{\n    protected override string BuildPropertyName(IReadOnlyList<CombinationKey> keys) =>\n        string.Join(\", \", keys.Select(_ => _.Value));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: A complete sample test demonstrating how to use Verify with Xunit. The test shows the basic pattern for creating a snapshot test that verifies a simple string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyXunit;\n\n[UsesVerify]\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: An example of a Fixie test that uses Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Specific Guids Globally in C#\nDESCRIPTION: This code demonstrates how to globally name specific guids for all tests in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar guid = Guid.NewGuid();\nVerifierSettings.UseGuidName(\"key\", guid);\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit v3 NuGet Packages for Verify\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit v3, including the test SDK, Verify.XunitV3, and XUnit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing TestCase Attribute in TUnit\nDESCRIPTION: Demonstrates the use of the TestCase attribute for parameterized testing in TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestCase(\"Value1\", \"Value2\")]\npublic Task UseParameters(string arg1, string arg2)\n{\n    return Verifier.Verify(\"content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test implementation using Verify.NET, demonstrating the basic structure of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks with NUnit\nDESCRIPTION: Sample test fixture showing how to implement convention checks using VerifyChecks.Run() with NUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: Code snippet showing how to run convention checks in tests using VerifyChecks.Run() with XUnit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Verify Test Results\nDESCRIPTION: GitHub Actions workflow step to upload *.received.* files as artifacts when tests fail, making it easier to diagnose test failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages - .NET Project File - csproj\nDESCRIPTION: This snippet provides the necessary PackageReference entries for adding the Fixie test framework and the Verify.Fixie integration to a .NET test project's .csproj file. Fixie enables an opinionated test runner, while Verify.Fixie adds snapshot verification capabilities. The version numbers for these packages are specified, and they are required to execute and manage snapshot-based tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Fixie\\\" Version=\\\"4.1.0\\\" />\\n<PackageReference Include=\\\"Verify.Fixie\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test implementation using Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example implementation of a basic verification test using MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for enhanced diff visualization in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Fixie. It includes packages for Verify, Fixie, and their dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"3.*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.*\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify artifacts in Azure DevOps pipelines when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: Defines EditorConfig settings for verified and received files to maintain consistent formatting. This ensures files use UTF-8 with BOM, LF line endings, and have no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Copying Received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: YAML task that copies all *.received.* files to the artifact staging directory. Only runs when the publishverify flag has been set to 'Yes' by the previous condition task.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for setting up Verify with XUnit V3 testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in a TUnit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: A sample Xunit test using Verify. The actual code is not provided in the snippet, but referenced as 'SampleTestXunit'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: Code to initialize Verify.DiffPlex for improved text comparison visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding MSTest and Verify NuGet Packages in C#\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using MSTest with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, allowing snapshot management from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in xUnit V3 Test - CSharp\nDESCRIPTION: This C# snippet provides an xUnit V3 test class that runs the VerifyChecks.Run() method to audit Verify's conventions and configuration (such as line endings and file encodings) within the test project. Dependencies: xUnit V3, Verify, and its configuration files. The [Fact] attribute declares this as a test method. There are no explicit parameters; the test checks the current project's configuration. Expected output is standard xUnit pass/fail depending on convention compliance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example of a basic Fixie test using Verify to test a class method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using TUnit and Verify\nDESCRIPTION: This code snippet shows a sample test using TUnit and Verify. The actual implementation is not provided in the snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages using dotnet CLI\nDESCRIPTION: Adds the `TUnit` and `Verify.TUnit` NuGet packages to the current .NET project using the `dotnet add package` command. This is a prerequisite for using VerifyTests snapshot testing capabilities within a TUnit test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase for MSTest Integration\nDESCRIPTION: C# code snippet demonstrating an alternative way to enable Verify.MSTest integration by inheriting the test class (`VerifyBaseUsage`) from `VerifyBase`. This implicitly opts the class into processing by the source generator and provides access to the `Verify()` method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows usage of Verify() without fully qualifying it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Instances Globally in Verify Tests (C#)\nDESCRIPTION: Shows how to scrub instances of a type globally in Verify tests using VerifierSettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.ScrubInstance<Instance>(_ => _.Property == \"Ignore\");\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A sample test demonstrating how to use Verify with Xunit. It shows how to verify an object using the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Dob = DateTime.Now\n        };\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: F# code snippet demonstrating a sample Expecto test using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging\nDESCRIPTION: YAML configuration to copy all *.received.* files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for handling received files in AppVeyor build pipeline\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet Tool - Shell\nDESCRIPTION: This shell command installs the DiffEngineTray utility globally via the dotnet tool system. DiffEngineTray helps manage received/verified file diffs from the Windows system tray. Dependency: .NET CLI. This tool is optional but recommended for easier diff management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray with dotnet Tool\nDESCRIPTION: This shell snippet shows the command to globally install DiffEngineTray using the dotnet CLI. DiffEngineTray is optional but recommended for managing file diffs during verification. Requires .NET SDK installed; expects execution in a terminal. No input; output is an installed tool monitoring for snapshot diffs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Using Recording in C# with Verify\nDESCRIPTION: Demonstrates basic usage of Recording to add information to a snapshot. It starts recording, adds a name-value pair, and verifies the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task Usage()\n{\n    Recording.Start();\n    Recording.Add(\"name\", \"value\");\n    return Verify(\"TheValue\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: Provides a sample test using Verify with Expecto, demonstrating how to write and run a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet Tests () =\n    testTask \"Test\" {\n        let result = \"Hello From Verify\"\n        do! Verifier.Verify(result)\n    }\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML task copies all .received files to the artifact staging directory. It executes only when the publishverify flag is set to 'Yes', which happens when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Snapshot Tests with NUnit\nDESCRIPTION: Example of how to use Verify with NUnit test framework. The test retrieves a Person object and uses Verify to create or compare a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Verification Test\nDESCRIPTION: Example test demonstrating how to use Verify with XUnit V3 to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: Example test implementation using Verify with Expecto testing framework in F#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to your test project including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Checks in MSTest\nDESCRIPTION: Example of using VerifyChecks.Run() in an MSTest test class to validate that all verification conventions are being followed correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Convention Checks with VerifyChecks\nDESCRIPTION: NUnit test fixture for running convention checks using VerifyChecks.Run() to ensure proper configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Fixie test configuration with Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in NUnit Tests (VerifyChecks.Run, C#)\nDESCRIPTION: Illustrates a C# NUnit test class that invokes VerifyChecks.Run() to validate conventions (such as snapshot management, file layout, and configuration) in the current test project. The test can be run as part of the suite to surface Verify-related configuration errors during CI or local development. No input parameters are required; any issues are reported as test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, MSTest testing packages, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Writing a Sample Verify Test with Fixie in C#\nDESCRIPTION: A simple C# Fixie test class (`Sample`) demonstrating a test method (`Test`) that calls `Verify()` on an object (`person`). This shows the basic usage pattern for creating snapshot tests with Verify.Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: A code snippet demonstrating how to run Verify checks using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntestCase \"VerifyChecks\" <| fun _ ->\n    VerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test with XUnit V3\nDESCRIPTION: Sample test class showing how to implement verification checks using XUnit V3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation with NUnit\nDESCRIPTION: Sample test class showing how to implement convention checks using VerifyChecks.Run() in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up VerifyChecks with XUnit v3\nDESCRIPTION: Sample implementation of a test that runs VerifyChecks to validate conventions are properly configured in the project. This helps ensure consistent behavior across the codebase.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test class showing how to implement a basic verification test using TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example TUnit test implementation using Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and TUnit testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging\nDESCRIPTION: YAML task that copies all .received files to the artifact staging directory when tests have failed. This runs conditionally based on the publishverify variable set in the previous step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Test Results in GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration to upload *.received.* files as artifacts when tests fail. Uses the actions/upload-artifact@v4 action with a failure() condition.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in Fixie\nDESCRIPTION: Implementation of verify checks test in Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Implementation\nDESCRIPTION: F# code showing a sample test implementation using Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A sample NUnit test demonstrating the usage of Verify. The actual code is not provided in the snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Code snippet showing how to run the Verify conventions check in an Expecto test. This ensures that all Verify configuration conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksExpecto\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Checks with Expecto\nDESCRIPTION: Code example showing how to run Verify's convention checks in an Expecto test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksExpecto\n```\n\n----------------------------------------\n\nTITLE: Manually Stopping Recording and Verifying Data (C#)\nDESCRIPTION: Demonstrates how to explicitly stop a recording session using `Recording.Stop()` and retrieve the captured data. This allows for manual verification of the recorded data separately from the main `Verify()` call target.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingStop' snippet\nRecording.Start();\nRecording.Add(\"key1\", \"value1\");\n\n// Stop recording and get the recorded data\nIReadOnlyDictionary<string, object> recordedData = Recording.Stop();\n\n// Manually verify the recorded data\nawait Verify(recordedData);\n```\n\n----------------------------------------\n\nTITLE: Passing Explicit Targets in NUnit with Verify\nDESCRIPTION: This snippet demonstrates how to pass explicit targets when using Verify with NUnit. It creates an anonymous object and passes a custom Target with a specific extension, data, and name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task WithTargets() =>\n    Verify(\n        new\n        {\n            Property = \"Value\"\n        },\n        [\n            new Target(\n                extension: \"txt\",\n                data: \"Raw target value\",\n                name: \"targetName\")\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Appending Existing Files to Test Verification in C#\nDESCRIPTION: This code demonstrates how to append an existing file to a verification test. It allows a secondary file (in this case a PNG) to be included in the verification process alongside the primary text output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/append-file.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task AppendFile()\n{\n    return Verifier.Verify(\"Foo\")\n        .AppendFile(\"sample.png\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in NUnit Test - C#\nDESCRIPTION: Provides a sample NUnit test fixture demonstrating how to invoke 'VerifyChecks.Run()' in a test, ensuring project snapshot file conventions are followed. Utilizes Implicit Usings. The test can be run as part of the test suite to verify configuration compliance. Requires the Verify library, NUnit framework, and that project conventions have been appropriately set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for NUnit with Verify\nDESCRIPTION: The necessary NuGet package references to add to a test project using NUnit with the Verify framework. Includes Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Using MemberData with VerifySettings Instance in Xunit\nDESCRIPTION: Shows how to configure parameters using a VerifySettings instance with Xunit MemberData theories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[MemberData(nameof(GetData))]\npublic Task MemberDataUsage(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseParameters(arg);\n    return Verify(arg, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Zip Verification with Structure Information\nDESCRIPTION: Demonstrates how to include the zip directory structure in the verification output using the includeStructure parameter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-zip.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithZipAndStructure() =>\n    VerifyZip(zipPath, includeStructure: true);\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: A complete example of an Expecto test that uses Verify for snapshot testing. Demonstrates the basic structure and syntax for writing verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestExpecto\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: XUnit test class implementing VerifyChecks to validate conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex Initialization\nDESCRIPTION: Code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Creating Verify Conventions Check Test with MSTest\nDESCRIPTION: MSTest test class for running Verify conventions checks to ensure proper configuration of Verify in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Test Classes as Using Verify - Assembly and Class Attributes\nDESCRIPTION: Include this attribute at the assembly or class level to enable source generator support for Verify in MSTest. You can add [assembly: UsesVerify] in AssemblyInfo.cs, [UsesVerify] to individual test classes, or inherit from VerifyBase. This ensures your tests gain full snapshot assertion capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[assembly: UsesVerify]\n```\n\nLANGUAGE: cs\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with Xunit\nDESCRIPTION: Test class that runs Verify's convention checks to ensure the environment is properly configured for tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an Xunit test. It uses the [Fact] attribute to define a test method and calls VerifyChecks.Run() to perform the verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void CheckConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test using MSTest\nDESCRIPTION: This snippet shows a sample test using Verify with MSTest. It demonstrates how to use the [TestMethod] attribute along with UsesVerify to indicate that the test uses Verify, and how to perform a simple verification of a string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    [UsesVerify]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Explicit Targets in Fixie with Verify\nDESCRIPTION: This snippet demonstrates how to pass explicit targets when using Verify with Fixie. It creates an anonymous object and passes a custom Target with a specific extension, data, and name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task WithTargets() =>\n    Verify(\n        new\n        {\n            Property = \"Value\"\n        },\n        [\n            new(\n                extension: \"txt\",\n                data: \"Raw target value\",\n                name: \"targetName\")\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test using MSTest (C#)\nDESCRIPTION: A basic example of an MSTest test class (`Sample`) containing a test method (`Test`). It demonstrates calling a method (`ClassBeingTested.FindPerson()`) and then using `Verify()` to perform snapshot testing on the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verify Test Implementation\nDESCRIPTION: Example MSTest test class showing how to implement a simple verification test using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie TestProject Configuration for Verify Integration\nDESCRIPTION: Implementation of Fixie's ITestProject and IExecution interfaces to properly integrate Verify with Fixie's test discovery and execution pipeline, handling both parameterized and standard tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie. Handles test discovery, execution state management, and parameter handling for test cases.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool Globally - shell\nDESCRIPTION: Installs the DiffEngineTray tool globally so that snapshot changes can be monitored and accepted\\\\/rejected via a system tray utility. The dotnet tool requires a compatible .NET SDK. Usage is optional but recommended for teams using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: This C# snippet uses a ModuleInitializer to call VerifyDiffPlex.Initialize(), setting up the enhanced diff capabilities. Requires importing relevant namespaces and utilizing .NET 5 or later features.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Test code showing how to run Verify's convention checks in an Expecto test to ensure your environment is configured correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerificationChecks () =\n    task {\n        do! Verifier.Verify()\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: This code snippet demonstrates how to create a test method that runs the VerifyChecks.Run() method to check if all Verify conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify and Expecto Test Packages using dotnet CLI - Shell\nDESCRIPTION: This snippet provides the dotnet CLI commands required to add Verify and Expecto related NuGet packages to the test project. These packages enable snapshot testing using the Expecto test framework in .NET. Run these commands in the root folder of your test project to install the dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\\ndotnet add package Expecto\\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters in NUnit Verify Tests (Instance)\nDESCRIPTION: Demonstrates how to hash parameters for the verified filename in NUnit Verify tests using the instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task HashParameters(string arg1, string arg2)\n{\n    return Verify(\"value\")\n        .UseParameters(\n            (\"arg1\", arg1.Hash()),\n            (\"arg2\", arg2.Hash()));\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Collecting Received Files on Test Failure\nDESCRIPTION: GitHub Actions workflow configuration that uploads *.received.* files as artifacts when tests fail. This helps with diagnosing test failures in CI/CD pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received files as artifacts on test failure in GitHub Actions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in a TUnit test by calling VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest with Verify\nDESCRIPTION: This C# snippet demonstrates a sample MSTest class using the Verify library, which verifies the output of finding a person object in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: This step publishes the previously staged *.received.* files as build artifacts when the publishverify flag is set to 'Yes'. This makes the failed test output available for inspection in the build artifacts section of Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed File Converter in C#\nDESCRIPTION: Shows how to use the typed file converter in a verification test, converting and verifying a TIFF image.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task TypedConverter()\n{\n    var image = Image.FromFile(\"sample.tif\");\n    return Verifier.Verify(image);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex Initialization\nDESCRIPTION: Code to initialize VerifyDiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with Expecto\nDESCRIPTION: C# code demonstrating how to create an Expecto test (`verifyChecksTest`) that runs Verify's convention checks using `VerifyChecks.Run()`. It checks if the project setup (like `.gitignore`, `.gitattributes`) adheres to Verify's recommendations. The test is defined within a `VerifyChecksTests` class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XunitV3\nDESCRIPTION: Example of a simple test method using Verify with XunitV3 to verify the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: A complete example of a Verify test using MSTest. The test creates a Person object with name 'John' and age 10, then uses Verify() to snapshot test the object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyTests;\n\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            Name = \"John\",\n            Age = 10\n        };\n\n        return Verify(person);\n    }\n}\n\npublic class Person\n{\n    public string Name { get; set; } = null!;\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Expecto in F#\nDESCRIPTION: F# example showing how to create a verification test using Expecto testing framework with Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Verifying JSON Data\nDESCRIPTION: Shows how to use VerifyJson to verify JSON data. The method converts the input to JToken if necessary, applies ignore rules for specific keys, and pretty-prints the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyJsonString()\n{\n    var json = \"{'fruit':'Apple','size':'Large'}\";\n    return VerifyJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation for XUnit\nDESCRIPTION: Sample test class showing how to implement verification checks using XUnit testing framework. Demonstrates proper setup of convention verification\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: Example test implementation showing how to use Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class showing basic usage of Verify with MSTest to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class showing basic usage of Verify with MSTest for testing object verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test implementation showing how to use Verify with TUnit to test class behavior\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Example C# code demonstrating a simple Xunit test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto in F#\nDESCRIPTION: Provides a sample Expecto test in F# (`testTask`). It calls a method `ClassBeingTested.FindPerson()`, then uses `Verifier.Verify()` along with the `VerifyExpecto` integration (`.ToTask()`) to perform snapshot verification on the returned result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Marking Tests Using Verify with VerifyBase - C#\nDESCRIPTION: This MSTest snippet demonstrates how to write a test class that uses VerifyBase for snapshot testing. The test method calls Verify with an example string value, showing best practices for authoring snapshot validations using the inheritance approach. Prerequisite: Reference Verify.MSTest and apply correct attributes for MSTest discovery.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic class VerifyBaseUsage :\\n    VerifyBase\\n{\\n    [TestMethod]\\n    public Task Simple() =>\\n        Verify(\\\"The content\\\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Directory Contents using Verify in xUnit v3 - C#\nDESCRIPTION: This snippet demonstrates how to verify all files in a specified directory using the Verify library in an xUnit v3 test fixture. The VerifyDirectory method snapshots every file inside the path, combining unique per-file targets with directory-wide testing. It requires Verify.Xunit v3 as a dependency, and accepts the target directory path as input. The output is a set of verification files for the directory contents. Ensure the test directory exists and contains test files. No filtering or custom file scrubbing is applied in this basic scenario.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-directory.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.VerifyDirectory(\"targetDirectory\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fixie Test with Verify\nDESCRIPTION: A sample Fixie test class demonstrating how to use Verify to snapshot test the result of a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Implementation with Verify\nDESCRIPTION: Example test class demonstrating how to write a basic test using NUnit with Verify framework to test a person finding functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Members by Name in C# Verify Tests\nDESCRIPTION: This snippet demonstrates how to scrub specific members by name in Verify tests. It shows both instance-level and fluent approaches for scrubbing members for all types, specific types, and using expressions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task ScrubMemberByName()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    var settings = new VerifySettings();\n\n    // For all types\n    settings.ScrubMember(\"PropertyByName\");\n\n    // For a specific type\n    settings.ScrubMember(typeof(IgnoreExplicitTarget), \"Property\");\n\n    // For a specific type generic\n    settings.ScrubMember<IgnoreExplicitTarget>(\"Field\");\n\n    // For a specific type with expression\n    settings.ScrubMember<IgnoreExplicitTarget>(_ => _.PropertyThatThrows);\n\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task ScrubMemberByNameFluent()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    return Verify(target)\n        // For all types\n        .ScrubMember(\"PropertyByName\")\n\n        // For a specific type\n        .ScrubMember(typeof(IgnoreExplicitTarget), \"Property\")\n\n        // For a specific type generic\n        .ScrubMember<IgnoreExplicitTarget>(\"Field\")\n\n        // For a specific type with expression\n        .ScrubMember<IgnoreExplicitTarget>(_ => _.PropertyThatThrows);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Zip Directory Structure in Snapshots with VerifyZip in Xunit v3 (C#)\nDESCRIPTION: Explains how to include the overall zip directory structure in the verification result using the includeStructure parameter in Xunit v3 C#. When true, an additional structure.verified.md snapshot file is generated, capturing the hierarchy and file listing. This requires Verify and Xunit v3, with the structure inclusion useful for auditing layout changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-zip.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyZipWithStructureXunitV3\n```\n\n----------------------------------------\n\nTITLE: Installing Verify TUnit Packages with .NET CLI\nDESCRIPTION: Commands to install the necessary NuGet packages for using Verify with TUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Example test class showing how to write a basic verification test using NUnit and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Fixie test configuration with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with XUnit v3 to test a person finding operation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Guid Scrubbing (Fluent) in C#\nDESCRIPTION: This code demonstrates how to enable scrubbing of inline guids using a fluent API approach in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verify(target)\n    .ScrubInlineGuids();\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Runner Function in Python\nDESCRIPTION: Implements a function to execute test cases and compare actual results with expected outputs. The function runs the specified operation with the given inputs and verifies the results.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineGuidsWrappedWithSymbol.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef run_test(test_case, operation):\n    result = operation(*test_case[\"inputs\"])\n    if result == test_case[\"expected_output\"]:\n        print(f\"Test {test_case['name']} passed!\")\n        return True\n    else:\n        print(f\"Test {test_case['name']} failed. Expected {test_case['expected_output']}, got {result}\")\n        return False\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: Demonstrates how to run Verify checks using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Test>]\nlet VerifyConventions () =\n    task {\n        do! VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: A sample test demonstrating how to use Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet verifyTests =\n    testTask \"Test\" {\n        let settings = verifySettings\n        do! Verifier.Verify(\"Hello World!\", settings)\n    }\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: MSTest implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Capture for Specific Combination Test in C#\nDESCRIPTION: Demonstrates how to disable exception capture for a specific Combination() call when it's enabled globally.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task BuildAddressExceptionsDisabledTest()\n{\n    int[] number = [1, 10];\n    string[] street = [\"Smith St\", \"Wallace St\"];\n    string[] city = [\"Sydney\", \"Chicago\"];\n    return Combination(captureExceptions: false)\n        .Verify(\n            BuildAddress,\n            number,\n            street,\n            city);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: A sample test method demonstrating how to use Verify with XUnit v3 for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is recommended for Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up NUnit with Verify, including test SDK, NUnit core, Verify.NUnit, and NUnit test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Conventions Check with VerifyChecks\nDESCRIPTION: This C# snippet demonstrates how to run convention checks in a test class using VerifyChecks.Run() method, ensuring coding standards are adhered to.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Result with Cleanup in C#\nDESCRIPTION: Example showing how to implement cleanup logic after verification using ConversionResult.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nreturn new(\n    info: null,\n    \"bin\",\n    stream: File.OpenRead(withStreamRequiringCleanupPath),\n    cleanup: () =>\n    {\n        File.Delete(withStreamRequiringCleanupPath);\n        return Task.CompletedTask;\n    });\n```\n\n----------------------------------------\n\nTITLE: Testing BuildAddress with Combinations in C#\nDESCRIPTION: Demonstrates how to use Combination() to test the BuildAddress method with multiple input combinations. It uses arrays for number, street, and city inputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task BuildAddressTest()\n{\n    int[] number = [1, 10];\n    string[] street = [\"Smith St\", \"Wallace St\"];\n    string[] city = [\"Sydney\", \"Chicago\"];\n    return Combination()\n        .Verify(\n            BuildAddress,\n            number,\n            street,\n            city);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper file formatting for verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with Verify\nDESCRIPTION: NuGet package references needed to set up Verify tests with the Fixie testing framework. These packages provide the core verification functionality and Fixie integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the DiffPlex configuration for Verify tests using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package. This package enhances the text comparison behavior of Verify to highlight text differences inline rather than outputting full contents on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase in MSTest implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: MSTest test class that runs VerifyChecks to validate that proper conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Xunit\nDESCRIPTION: This snippet shows the NuGet packages required for setting up Verify with Xunit. It includes Verify.Xunit for core functionality and AutoFixture for test data generation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"AutoFixture\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in ReSharper\nDESCRIPTION: Configuration to disable orphaned process detection in ReSharper, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: Implementation of verification checks using XUnit V3 test framework to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Framework Checks with NUnit\nDESCRIPTION: A test fixture that verifies all Verify framework conventions are properly set up. This can be used to ensure the project follows all required conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: This code demonstrates how to run Verify checks in an Xunit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: NUnit test class to verify that all conventions are being followed by running VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BuildAddress Method in C#\nDESCRIPTION: Defines a method that builds an address string from number, street, and city inputs. It includes input validation using ArgumentException and ArgumentOutOfRangeException.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string BuildAddress(int number, string street, string city)\n{\n    ArgumentException.ThrowIfNullOrWhiteSpace(street);\n    ArgumentException.ThrowIfNullOrWhiteSpace(city);\n    ArgumentOutOfRangeException.ThrowIfLessThan(number, 1);\n\n    return $\"{number} {street}, {city}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: YAML task that copies all .received files to the artifact staging directory when tests fail. Executes conditionally based on the publishverify variable set in the previous step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Failed Verify Test Results\nDESCRIPTION: GitHub Actions workflow snippet that uploads .received files when tests fail, making it easier to diagnose verification failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex in C# Tests\nDESCRIPTION: Initialize VerifyDiffPlex for enhanced text difference highlighting in Expecto tests. This requires the Verify.DiffPlex package. The initialization method uses a C# attribute, and it has no inputs or outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test using Fixie\nDESCRIPTION: A sample Fixie test that demonstrates how to use Verify for snapshot testing. This example shows the basic pattern for implementing a test with the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public async Task Test()\n    {\n        await Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages in C# Project\nDESCRIPTION: This snippet shows how to add the required NuGet packages for Fixie and Verify.Fixie to a C# project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Scrubbers in MSTest Tests\nDESCRIPTION: This snippet illustrates text scrubbing techniques using the MSTest framework. It includes methods for line replacement, removal, and handling empty lines. The code demonstrates both settings-based and fluent configurations for scrubbing in MSTest context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[TestClass]\npublic partial class ScrubbersSample\n{\n    [TestMethod]\n    public Task Lines()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesWithReplace(\n            replaceLine: _ =>\n            {\n                if (_.Contains(\"LineE\"))\n                {\n                    return \"NoMoreLineE\";\n                }\n\n                return _;\n            });\n        settings.ScrubLines(removeLine: _ => _.Contains('J'));\n        settings.ScrubLinesContaining(\"b\", \"D\");\n        settings.ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n        return Verify(\n            settings: settings,\n            target: \"\"\"\n                    LineA\n                    LineB\n                    LineC\n                    LineD\n                    LineE\n                    LineH\n                    LineI\n                    LineJ\n                    \"\");\n    }\n\n    [TestMethod]\n    public Task LinesFluent() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               LineD\n               LineE\n               LineH\n               LineI\n               LineJ\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: _ =>\n                {\n                    if (_.Contains(\"LineE\"))\n                    {\n                        return \"NoMoreLineE\";\n                    }\n\n                    return _;\n                })\n            .ScrubLines(removeLine: _ => _.Contains('J'))\n            .ScrubLinesContaining(\"b\", \"D\")\n            .ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n\n    [TestMethod]\n    public Task RemoveOrReplace() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: line =>\n                {\n                    if (line.Contains(\"LineB\"))\n                    {\n                        return null;\n                    }\n\n                    return line.ToLower();\n                });\n\n    [TestMethod]\n    public Task EmptyLines() =>\n        Verify(\"\"\"\n\n               LineA\n\n               LineC\n\n               \"\"\")\n            .ScrubEmptyLines();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Descending Enumerable Ordering in C#\nDESCRIPTION: Sets up global descending ordering for IEnumerable items using a specified key selector.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.OrderEnumerableByDescending<Person>(_ => _.Name);\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to set a flag when tests fail, used to determine if Verify files should be published.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: This snippet shows a sample NUnit test using Verify. It demonstrates how to create a test method that verifies the output of a method call using Verify(person).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: Sample test that runs Verify's convention checks to ensure the testing environment is properly configured. This helps identify any issues with the Verify setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyChecks\n{\n    [TestMethod]\n    public void RunChecks() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an MSTest setup. It uses the [TestClass] attribute to define a test class and [TestMethod] to define a test method that calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task CheckVerifyConventions() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with XUnit V3 testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Failure Artifacts Configuration\nDESCRIPTION: PowerShell script to push received files as artifacts on AppVeyor build failure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for improved diff output in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation for Fixie\nDESCRIPTION: Implementation of verification checks using Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Ignoring Types\nDESCRIPTION: Shows how to configure type ignoring globally for all verifications in a project. This approach applies the type ignoring across all tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.IgnoreMembersWithType<ToIgnore>();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text difference highlighting in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages in .csproj\nDESCRIPTION: Required NuGet package references to add to your test project for using NUnit with Verify. Includes Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Staging Directory\nDESCRIPTION: Copies all .received.* files to the artifact staging directory when the publishverify flag is set. Uses wildcard pattern matching to collect files and stages them in a clean target folder.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation in Fixie\nDESCRIPTION: A basic example showing how to implement a test using Verify with Fixie framework. The test finds a person using ClassBeingTested and verifies the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: GitAttributes configuration to ensure proper handling of verified text files with consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps Pipeline\nDESCRIPTION: This YAML task copies all .received files to the artifact staging directory when the 'publishverify' variable is set to 'Yes'. It uses a wildcard pattern to find all .received files in the repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation in C#\nDESCRIPTION: Demonstrates a basic test using Verify to validate a person object. Shows the minimal test structure required for verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Verify Files on Azure DevOps Failure\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to set a flag when tests fail, which will be used to determine if *.received.* files should be published.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in Fixie Tests\nDESCRIPTION: C# code example showing how to implement a test that runs verification checks on the current assembly using Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: An example of how to run Verify checks using Expecto in a test method. This ensures that all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests =\n    [<Tests>]\n    let verifyChecks = test \"Verify checks\" {\n        VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example of a complete Verify test using Xunit. The test shows the basic pattern for creating snapshots and verifying them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verifier.Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in TUnit\nDESCRIPTION: A TUnit test class that runs VerifyChecks.Run() to ensure all Verify conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using JsonAppender in Tests\nDESCRIPTION: Demonstrates how to use JsonAppender in a test method to verify content\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/jsonappender.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithJsonAppender() =>\n    Verify(\"TheValue\");\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in NUnit Tests (Fluent Approach)\nDESCRIPTION: Demonstrates how to override parameter text in file naming using the fluent syntax with UseTextForParameters() in NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task UseTextForParametersFluent(string arg) =>\n    Verify(arg + \"UseTextForParametersFluent\")\n        .UseTextForParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This snippet shows a sample Xunit test using Verify. It demonstrates how to create a test method that verifies the output of a ClassBeingTested.FindPerson() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Ignoring Members That Throw Exceptions with Expression in C#\nDESCRIPTION: Shows how to globally configure Verify to ignore members that throw exceptions based on both the exception type and a specific expression. This configuration applies to all members on all types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/members-throw.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreMembersThatThrow<Exception>(\n    x => x.Message.Contains(\"Ignore me\"));\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check in an MSTest test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test for Expecto\nDESCRIPTION: Example test implementation for running Verify convention checks using Expecto test framework. The test ensures all verify conventions are properly followed in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in Expecto\nDESCRIPTION: Example of implementing a verification checks test using Expecto framework. The test runs VerifyChecks on the assembly containing the test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Checks Test in MSTest\nDESCRIPTION: Test class that runs Verify's convention checks to ensure proper setup. This helps validate that all configuration settings are correctly applied.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Xunit\nDESCRIPTION: Sample Xunit test that demonstrates the basic pattern for using Verify to create a snapshot test for a person object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: A complete example of a verification test using XUnit v3 with the Verify framework, demonstrating how to structure and implement a typical test case.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class SampleTests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: This snippet shows the NuGet package references required for using NUnit with Verify. It includes the Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: This snippet illustrates a sample Verify test using Fixie. It demonstrates how to create a test method that verifies the contents of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex in C# Tests\nDESCRIPTION: This C# code snippet demonstrates how to initialize VerifyDiffPlex within a module initializer. A prerequisite is the Verify.DiffPlex NuGet package. Once enabled, it configures the text comparison feature to highlight differences, improving the output quality upon test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in NUnit\nDESCRIPTION: NUnit test to verify that all Verify conventions are correctly set up for the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: This code snippet demonstrates how to use the VerifyBase class in MSTest. It shows a test class inheriting from VerifyBase and using the Verify method to verify content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in NUnit\nDESCRIPTION: NUnit test implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: NUnit test fixture to run Verify checks, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters for Verified Tests (Fluent Method) - C#\nDESCRIPTION: Shows how to hash parameters for verified tests using the fluent method syntax with xUnit. It uses method chaining to configure parameter hashing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task HashParametersUsageFluent(string arg) =>\n    Verify(arg)\n        .HashParameters();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: Example of how to create a test that runs Verify's built-in conventions check to ensure proper configuration. This helps ensure that all the necessary conventions are in place for Verify to function correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task VerifyConventions() => \n    await VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify NuGet Packages - C# Project File\nDESCRIPTION: Illustrates the necessary <PackageReference> entries to install Fixie and Verify.Fixie in a .NET test project csproj file. No additional prerequisites beyond a compatible .NET project. Required to enable Fixie-based testing and snapshot verification functionality. No parameters; this code is copied into the .csproj file to add the packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Fixie\\\" Version=\\\"4.1.0\\\" />\\n<PackageReference Include=\\\"Verify.Fixie\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Text Files\nDESCRIPTION: These `.gitattributes` entries ensure that text-based verified files (`.txt`, `.xml`, `.json`) are treated consistently by Git regarding line endings (LF) and encoding (UTF-8). This prevents issues caused by different environment settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet publishes the staged Verify *.received.* files as build artifacts in Azure DevOps. It runs conditionally based on the previously set flag.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Globally Including Obsolete Properties in C# Verify Tests\nDESCRIPTION: This snippet shows how to globally configure Verify to include obsolete properties in all tests using VerifierSettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/obsolete-members.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IncludeObsoletes();\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Recording (C#)\nDESCRIPTION: Illustrates using `Recording.Pause()` and `Recording.Resume()` to temporarily suspend and then reactivate recording. Calls to `Recording.Add()` or `Recording.TryAdd()` while paused have no effect.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingPauseResume' snippet\nRecording.Start();\nRecording.Add(\"key1\", \"value1\"); // Recorded\n\nRecording.Pause();\nRecording.Add(\"key2\", \"value2\"); // Not recorded (paused)\n\nRecording.Resume();\nRecording.Add(\"key3\", \"value3\"); // Recorded\n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Verify Base Class Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase class to enable verification capabilities in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in TUnit\nDESCRIPTION: Example implementation of Verify checks in TUnit. This test class runs verification checks to ensure file conventions are followed correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex with ModuleInitializer\nDESCRIPTION: Sets up the Verify.DiffPlex plugin using a module initializer to enhance the text comparison behavior of Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with NUnit\nDESCRIPTION: An example of a Verify test using NUnit, demonstrating how to verify an object's serialized state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verifier.Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Descending Enumerable Ordering in Verify Tests\nDESCRIPTION: This snippet shows how to use fluent syntax to order enumerables in descending order in a Verify test. It directly chains the OrderEnumerableByDescending method to the Verify call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task OrderEnumerableByDescendingFluent() =>\n    Verify(\n            new List<Target>\n            {\n                new(\"a\"),\n                new(\"c\"),\n                new(\"b\")\n            })\n        .OrderEnumerableByDescending<Target>(_ => _.Value);\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit and Verify NuGet Packages for Test Project\nDESCRIPTION: This snippet shows the required NuGet package references that need to be added to a test project, including Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter with their respective versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verification Test with Expecto in F#\nDESCRIPTION: Example F# test using Expecto and Verify.Expecto to verify the result of a method call. Shows how to write a testTask that calls a method and verifies its output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase Class in C#\nDESCRIPTION: This snippet illustrates how to inherit from the VerifyBase class to enable Verify functionality. This approach provides an alternative to using attributes and allows for additional setup or shared functionality across test classes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/mstest-marker.include.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyBaseUsage.cs\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with XUnit V3\nDESCRIPTION: Example test class showing basic usage of Verify with XUnit V3 for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: An example of a Verify test using Expecto, demonstrating how to structure and write a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ntest \"Test\" {\n    let person = Person(Id = \"abc\", Title = \"Title\")\n    Verifier.Verify(person)\n        .AutoVerify()\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: Example of a simple Verify test using MSTest, demonstrating how to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test\nDESCRIPTION: Example test implementation using Verify with XUnit V3\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Specific Guids (Fluent) in C#\nDESCRIPTION: This snippet shows how to name specific guids using a fluent API approach in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar guid = Guid.NewGuid();\nawait Verify(target)\n    .UseGuidName(\"key\", guid);\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project Configuration\nDESCRIPTION: Complete implementation of ITestProject and IExecution interfaces for configuring Verify with Fixie test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MemberData Usage with XUnit V3\nDESCRIPTION: Shows how to use XUnit's MemberData attribute to provide test data from a method for parameterized testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[MemberData(nameof(GetData))]\npublic Task MemberDataUsage(string arg) =>\n    Verify(arg);\n\npublic static IEnumerable<object[]> GetData()\n{\n    yield return\n    [\n        \"Value1\"\n    ];\n    yield return\n    [\n        \"Value2\"\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test using Verify to snapshot test the result of FindPerson() method, demonstrating the basic usage pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Specific MSTest Class for Verify via Class Attribute\nDESCRIPTION: Demonstrates applying the `[UsesVerify]` attribute directly to a specific MSTest test class. This opts-in only that particular class for processing by the Verify.MSTest source generator, enabling Verify functionality within it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Passing Explicit Targets in Xunit with Verify\nDESCRIPTION: This snippet shows how to pass explicit targets when using Verify with Xunit. It creates an anonymous object and passes a custom Target with a specific extension, data, and name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithTargets() =>\n    Verify(\n        new\n        {\n            Property = \"Value\"\n        },\n        [\n            new(\n                extension: \"txt\",\n                data: \"Raw target value\",\n                name: \"targetName\")\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Inline DateTimes with Fluent API\nDESCRIPTION: Demonstrates how to scrub inline date strings using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task ScrubInlineDateTimesFluent() =>\n    Verify(\"content 2020-10-20 content\")\n        .ScrubInlineDateTimes(\"yyyy-MM-dd\");\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for setting up Verify tests with Xunit. It includes Verify.Xunit for integration with Xunit, and Microsoft.NET.Test.Sdk for test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.4.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: An example of a test method using Verify with Xunit to verify a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool globally for managing snapshots from terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Test Implementation\nDESCRIPTION: MSTest implementation for running verification checks to ensure conventions are followed\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: A TUnit test that checks whether all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Exception Capture for Combinations in C#\nDESCRIPTION: Shows how to enable exception capture globally for all Combination() calls using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void EnableCaptureExceptions() =>\n    CombinationSettings.CaptureExceptions();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline Comparison - CSharp\nDESCRIPTION: This C# code initializes inline text comparison in Verify using the Verify.DiffPlex integration. The [ModuleInitializer] attribute ensures that VerifyDiffPlex.Initialize() is called once at module load time, configuring the comparison tool for all tests run in the context. This requires that the Verify.DiffPlex NuGet package is installed. No parameters are needed; the output is that all Verify string comparisons will use inline diffing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Verify Test Implementation\nDESCRIPTION: Example test class demonstrating how to implement a basic Verify test using XUnit V3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify.Xunit convention checks in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline to Capture Verify Received Files\nDESCRIPTION: YAML configuration for Azure DevOps pipeline that sets a flag when tests fail, copies Verify's *.received.* files, and publishes them as build artifacts for easier debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes''\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified file types\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Class with VerifyBase\nDESCRIPTION: Example of creating an MSTest test class that inherits from VerifyBase to enable Verify functionality without additional attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit\nDESCRIPTION: Test class implementation for running Verify convention checks using XUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Method That Throws an Exception (ValueTask) in C#\nDESCRIPTION: This snippet defines an asynchronous method that throws an exception after a delay, returning a ValueTask.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nstatic async ValueTask MethodThatThrowsValueTask()\n{\n    await Task.Delay(1);\n    throw new(\"The Message\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to properly configure Fixie to work with Verify, including setting up the target assembly and execution state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in MSTest\nDESCRIPTION: Code snippet showing how to implement a test that runs verification checks to ensure all conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksMSTest\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package using .NET CLI\nDESCRIPTION: Installs the optional Verify.DiffPlex package into the current .NET project using the dotnet CLI. This package enhances text comparison failures by highlighting differences inline, which is recommended for better readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\ndotnet add package Verify.DiffPlex\n```\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class demonstrating how to write a basic verification test using MSTest and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example of a simple NUnit test case using Verify to test a method that returns a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Code for calling VerifyChecks.Run() to verify that all conventions are correctly set up in a Fixie test. This ensures that Verify is properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventions\n{\n    public void Run()\n    {\n        VerifyChecks.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where Verify() calls are not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: A sample C# test method using Verify with XUnit v3 to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A sample TUnit test that demonstrates how to use Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Using JsonAppender with Streams\nDESCRIPTION: Demonstrates how to use JsonAppender with stream/binary file inputs\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/jsonappender.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Stream() =>\n    Verify(IoHelpers.OpenRead(\"sample.txt\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie to Work with Verify (C#)\nDESCRIPTION: This advanced C# implementation shows how to integrate Verify with Fixie's ITestProject and IExecution interfaces. It assigns the test project assembly to VerifierSettings and wraps test execution in ExecutionState.Set for proper context handling. This approach is required for full control over test discovery and parameterized test execution in Fixie, and depends on the Verify, Fixie, and related libraries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\\n    ITestProject,\\n    IExecution\\n{\\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\\n    {\\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\\n    }\\n\\n    public async Task Run(TestSuite testSuite)\\n    {\\n        foreach (var testClass in testSuite.TestClasses)\\n        {\\n            foreach (var test in testClass.Tests)\\n            {\\n                if (test.HasParameters)\\n                {\\n                    foreach (var parameters in test\\n                                 .GetAll<TestCase>()\\n                                 .Select(_ => _.Parameters))\\n                    {\\n                        using (ExecutionState.Set(testClass, test, parameters))\\n                        {\\n                            await test.Run(parameters);\\n                        }\\n                    }\\n                }\\n                else\\n                {\\n                    using (ExecutionState.Set(testClass, test, null))\\n                    {\\n                        await test.Run();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example TUnit test class showing basic verify test implementation\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with Expecto\nDESCRIPTION: Test code to verify that all Verify conventions are being followed in the project using Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test that uses Verify to perform snapshot testing of an object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex\nDESCRIPTION: C# code to initialize and enable DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison output in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Global OnHandlers for Verify in C#\nDESCRIPTION: Demonstrates how to register global handlers for verification events (such as OnVerify, OnFirstVerify, or OnVerifyMismatch) using the static VerifierSettings API. These handlers execute custom logic before and after each verification or mismatch event, allowing for logging or custom notifications. Register these handlers in setup or static initialization code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.OnVerify((before, after) =>\n{\n    // Custom logic before verification\n},\n(before, after) =>\n{\n    // Custom logic after verification\n});\nVerifierSettings.OnFirstVerify(context =>\n{\n    // Custom logic for first verification\n});\nVerifierSettings.OnVerifyMismatch((received, verified) =>\n{\n    // Custom logic when mismatch occurs\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Sample Verify Test with Expecto in F#\nDESCRIPTION: This snippet shows how to write a sample test using Verify with Expecto in F#. It demonstrates the basic structure of a Verify test case.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Fluent Auto-Verify Configuration in C#\nDESCRIPTION: Example of using fluent syntax to configure auto-verification in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task AutoVerifyFluent() =>\n    Verify(\"Value\")\n        .AutoVerify();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex PackageReference in XML\nDESCRIPTION: This snippet shows how to add a PackageReference for Verify.DiffPlex in a .NET project's XML file. Verify.DiffPlex is used for enhanced text comparison by highlighting text differences inline. The specific version of the package is not mentioned, allowing flexibility in version selection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: Azure DevOps pipeline task to copy all received files to the artifact staging directory when tests fail, preparing them for publishing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Running Conventions Checks with MSTest\nDESCRIPTION: MSTest class that runs VerifyChecks to ensure all conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots from terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in a Fixie test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Stack Trace in Exception Verification Using Settings API in C#\nDESCRIPTION: This snippet demonstrates how to use the settings API to ignore the stack trace when verifying an exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task TestMethodThatThrowsIgnoreStackTraceSettings()\n{\n    var settings = new VerifySettings();\n    settings.IgnoreStackTrace();\n    return Throws(MethodThatThrows, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused pure method return values as errors, ensuring that calls to Verify() are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: A sample C# test method using Verify with TUnit, demonstrating how to verify the output of a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Source Control Ignore for Received Files - Shell\nDESCRIPTION: This snippet provides a .gitignore directive to exclude all files matching the *.received.* pattern from version control. It is vital to prevent transient or unverified test output from polluting the repository. Simply add this line to your project's .gitignore file; no other configuration is necessary.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in MSTest\nDESCRIPTION: Test class that runs VerifyChecks.Run() to ensure all Verify conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: Code snippet showing how to run Verify conventions check in a test. This helps ensure that all required Verify settings and conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Verifying Anonymous Types with Fixie\nDESCRIPTION: Demonstrates anonymous type verification using the Fixie test framework. Implements the same Person object verification pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/anonymous-types.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task Anon()\n{\n    var person1 = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\"\n    };\n    var person2 = new Person\n    {\n        GivenNames = \"Marianne\",\n        FamilyName = \"Aguirre\"\n    };\n\n    return Verify(\n        new\n        {\n            person1,\n            person2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to the project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Test Failure in Azure DevOps\nDESCRIPTION: Azure DevOps pipeline task that sets a flag when tests fail, which will be used to determine whether to publish the *.received.* files as artifacts. Uses the condition property to only run when the test step fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text difference visualization in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie in C#\nDESCRIPTION: This code demonstrates how to set up a Fixie test to run Verify checks on the current assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Object with Properties - JavaScript\nDESCRIPTION: This snippet initializes a JavaScript object with two properties, 'Foo1' and 'Foo2', assigned to the value 'Bar'. No external dependencies are required, but 'Bar' should be previously defined for correct operation. Expected input is the object literal as shown, and the output is the creation of an in-memory object. It serves as a fundamental example of JavaScript object syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.DictionaryOrderNonComparable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  Foo1: Bar,\\n  Foo2: Bar\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set text file attributes for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with XunitV3\nDESCRIPTION: C# test class that runs the VerifyChecks.Run() method to ensure that all conventions are properly set up in the project. This helps identify any configuration issues early.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: The code snippet demonstrates how to initialize the VerifyDiffPlex library in a .NET application. It uses a static module initializer to set up the library, ensuring that text difference highlighting is enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n\n```\n\n----------------------------------------\n\nTITLE: Verifying DateOnly Example in C#\nDESCRIPTION: Example of passing a DateOnly object directly to Verify() which will use the type-to-string mapping.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/type-to-string-mapping.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task Example() =>\n    Verify(new DateOnly(2020, 10, 4));\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Git ignore patterns for Verify test output files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps: Setting Flag for Failed Tests\nDESCRIPTION: YAML configuration for Azure DevOps to set a flag when tests fail, used for publishing .received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files as Artifacts in AppVeyor on Build Failure - YAML/PowerShell\nDESCRIPTION: Specifies an AppVeyor CI build step that, upon build failure, discovers all Verify '.received.*' files and uploads them as build artifacts using the Push-AppveyorArtifact cmdlet. This snippet is to be added in the on_failure section of the appveyor.yml configuration. Input: build server environment. Output: captured .received files as downloadable artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command line instruction to install the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing required NuGet packages for Verify with xUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with xUnit. Includes the Test SDK, Verify.Xunit, Xunit, and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Generated File Warning\nDESCRIPTION: Warning comment indicating this is an auto-generated file by MarkdownSnippets that should not be edited directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_Rider_Cli_Xunit.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file to ensure examples compile correctly without explicit using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: csproj\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project (XML)\nDESCRIPTION: This XML snippet ensures that the ImplicitUsings property is enabled in the project file. With ImplicitUsings set to 'enable', commonly used .NET namespaces are automatically included, allowing the provided code examples (which omit using directives) to compile. Edit the project's .csproj file to include this property inside a PropertyGroup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for MSTest and Verify testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Build Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for Azure DevOps to capture and publish .received files as artifacts when tests fail, making them easily accessible for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable implicit usings in the project file for simpler code syntax\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Verifying Anonymous Types with NUnit\nDESCRIPTION: Demonstrates how to verify multiple Person objects using an anonymous type in NUnit. Creates two Person instances and combines them into a single anonymous object for verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/anonymous-types.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Anon()\n{\n    var person1 = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\"\n    };\n    var person2 = new Person\n    {\n        GivenNames = \"Marianne\",\n        FamilyName = \"Aguirre\"\n    };\n\n    return Verify(\n        new\n        {\n            person1,\n            person2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Conventions Check in NUnit Tests\nDESCRIPTION: This C# snippet demonstrates how to place a call to VerifyChecks.Run() within an NUnit test to ensure that all conventions are adhered to in the test environment. VerifyChecks.Run() will validate that configuration and expectations are met before tests are run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set the correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Test Using Verify\nDESCRIPTION: This snippet shows a sample XUnit V3 test using Verify. It demonstrates how to create a test method that verifies the output of a method call using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Example of a simple Xunit test method using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Conventions with Verify in Expecto\nDESCRIPTION: Demonstrates how to check conventions using VerifyChecks.Run() in an Expecto test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet Conventions () =\n    test \"Conventions\" {\n        VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages CLI\nDESCRIPTION: These shell commands add the necessary NuGet packages for running NUnit tests with Verify. The packages include Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Creating Verification Checks Test with MSTest\nDESCRIPTION: A sample MSTest class that runs verification checks to ensure all required conventions are properly set up. This test validates the Verify configuration is correct for the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration for Verify\nDESCRIPTION: Complete implementation of ITestProject and IExecution interfaces required to configure Verify with Fixie. Handles test discovery, execution state management, and parameter handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the VerifyDiffPlex functionality using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: An example Xunit test method demonstrating how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for MSTest\nDESCRIPTION: Shows how to run VerifyChecks in an MSTest test to validate that snapshot file conventions are correctly setup. This ensures correct file inclusions/exclusions in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Conventions Check with VerifyChecks\nDESCRIPTION: Use the `VerifyChecks.Run()` method in a Xunit test to ensure all Verify conventions are adhered to within the testing framework. Requires Verify.Xunit dependency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Xunit\nDESCRIPTION: A sample C# test method demonstrating how to use Verify with Xunit to test a method's output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: A test method to run Verify checks, ensuring that all conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: XUnit test implementation for running Verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Basic example of a NUnit test class implementing Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Convention Checks with XUnit\nDESCRIPTION: XUnit test that executes VerifyChecks.Run() to ensure all Verify conventions are properly configured and followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to the project for improved diff output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex using ModuleInitializer in C#\nDESCRIPTION: This C# code uses a `ModuleInitializer` attribute to automatically call `VerifyDiffPlex.Initialize()` when the assembly loads. This enables the enhanced inline text diffing provided by the Verify.DiffPlex package for all Verify tests within the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Azure DevOps Artifacts\nDESCRIPTION: Azure DevOps task to publish the staged .received files as build artifacts for inspection when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Applying UsesVerify Attribute to Specific Test Class in C#\nDESCRIPTION: This snippet shows how to apply the UsesVerify attribute to a specific test class. This allows the Source Generator to process only the marked class for use with Verify, rather than all classes in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/mstest-marker.include.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Test with Verify and XunitV3\nDESCRIPTION: This snippet shows how to create a simple test using Verify with XunitV3. It demonstrates verifying the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with MSTest\nDESCRIPTION: A sample MSTest class that runs Verify's conventions check to ensure that the project is properly configured according to Verify's requirements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AutoVerify with Delegate in Fluent Style for Verify in C#\nDESCRIPTION: This snippet illustrates how to use a delegate within the fluent API to conditionally apply AutoVerify logic when using the Verify library. The delegate provides logic based on the current context for auto-accepting file changes. Intended for test methods requiring dynamic verification criteria.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(target)\n    .AutoVerify(context => ShouldAutoVerify(context));\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using a Subset of Parameters in NUnit Verify Tests\nDESCRIPTION: Demonstrates how to use a subset of parameters with UseParameters() in NUnit Verify tests. This results in a file named with the specified parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    return Verify(\"value\")\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test implementation showing basic usage of Verify with MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Initialization for VerifyDiffPlex - C#\nDESCRIPTION: Shows how to use a C# module initializer to activate the VerifyDiffPlex extension for improved inline diffing in snapshot tests. This static method should be placed in any type within the assembly, typically in a static class for clarity. It requires the Verify.DiffPlex package as a dependency and C# 9.0 or later for module initializers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with Fixie\nDESCRIPTION: A complete example of a Verify test using the Fixie test framework. This includes test initialization, test method implementation, and proper namespaces for a working verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyNamespace;\n\n[UsesVerify]\npublic class Tests\n{\n    [ModuleInitializer]\n    public static void Initialize() => \n        VerifyFixie.Initialize();\n\n    [Test]\n    public Task Test() => \n        Verify(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages via dotnet CLI - Shell\nDESCRIPTION: This snippet demonstrates how to add the core NuGet packages necessary for running Verify with xUnit V3 and Visual Studio integration via the dotnet CLI. Run these commands in the terminal in the root of the test project. Required dependencies: .NET CLI. The commands add Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease). Ensure the test project's directory is set as the current working directory when executing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package Verify.XunitV3\\ndotnet add package xunit.v3 --prerelease\\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: Example test implementation using Verify with XUnit v3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: File Name Example for Parameterised Tests\nDESCRIPTION: Demonstrates the file naming convention for parameterised tests using the format _ParamName=ParamValue. Shows example with two parameters and their corresponding verified file names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMyTest.MyMethod_param1=value1a_param2=value2a.verified.txt\nMyTest.MyMethod_param1=value1b_param2=value2b.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: Test class implementation to run verification checks using XUnit v3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: Example test class implementing VerifyChecks to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verification Test with MSTest\nDESCRIPTION: Sample MSTest test class showing how to use Verify to snapshot test a person object. Demonstrates the basic pattern for verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Text Extensions\nDESCRIPTION: This .gitattributes snippet sets the end-of-line to LF and encoding to UTF-8 BOM for verified result files (with 'verified' in the filename) for text, xml, and json extensions. Ensures consistency across operating systems and proper file handling. No inputs or outputs—affects Git's storage and checkout behavior for text verification artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Zip Verification with Additional Info\nDESCRIPTION: Shows how to include additional context information when verifying a zip file. The info parameter is serialized to JSON in the verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-zip.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyZipWithInfo() =>\n    VerifyZip(\n        zipPath,\n        info: \"the info\");\n```\n\n----------------------------------------\n\nTITLE: Implementing MemberData in Xunit for Parameterized Tests\nDESCRIPTION: Defines the data source for MemberData-based tests, providing test data through a static method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IEnumerable<object[]> GetData()\n{\n    yield return\n    [\n        \"Value1\"\n    ];\n    yield return\n    [\n        \"Value2\"\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Recorded Values by Key (C#)\nDESCRIPTION: Demonstrates how multiple calls to `Recording.Add()` with the same key result in the values being grouped together under that key in the final snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingSameKey' snippet\nRecording.Add(\"theKey\", \"value1\");\nRecording.Add(\"theKey\", \"value2\");\n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Adding Verification and Testing Packages via .NET CLI - Bash\nDESCRIPTION: This snippet demonstrates how to install essential NuGet packages for enabling NUnit-based verification testing in a .NET project through the command line interface. It includes the test SDK, NUnit itself, a test adapter for discovering NUnit tests, and the Verify.NUnit package. Prerequisites: .NET SDK installed, and a test project to run these commands in. Each command adds a package to the project; outputs are standard NuGet install logs. These steps are foundational and must precede usage of Verify functionalities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test implementation showing basic usage of Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example of a simple Verify test using Xunit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Type Name Using Fluent API\nDESCRIPTION: Shows how to override the default type name using the fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nawait Verify(\"valueUseTypeNameFluent\")\n    .UseTypeName(\"CustomTypeName\");\n```\n\n----------------------------------------\n\nTITLE: Traditional Assertion Test in C#\nDESCRIPTION: An example of a traditional assertion-based test that manually verifies each property of the test subject.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/compared-to-assertion.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTraditionalTest\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: GitAttributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and NUnit Testing in .NET\nDESCRIPTION: Commands to add necessary NuGet packages for setting up Verify with NUnit in a .NET project. These packages include the test SDK, NUnit, NUnit test adapter, and Verify for NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in Fixie\nDESCRIPTION: Test class implementation for running verification checks using Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: Example of a Verify test using Expecto, demonstrating how to structure and write a test case.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Sample test`` () =\n    task {\n        let person = Person(Id = Guid(\"ebced679-45d3-4653-8791-3d969c4a986c\"), Title = \"Mr\", GivenNames = \"John\", FamilyName = \"Smith\", Spouse = \"Jill\", Children = [\"Sam\"; \"Mary\"], Address = Address(Street = \"1 Puddle Lane\", Country = \"USA\"))\n\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A basic example of a Verify test using Xunit, demonstrating how to verify an object returned from a method being tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in NUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify convention checks in an NUnit test using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: XML configuration to enable implicit usings in the project file for cleaner code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up NUnit with Verify testing framework including test SDK, NUnit core, Verify.NUnit and test adapter\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally as a .NET tool. This utility monitors snapshot changes and provides a mechanism to accept or reject them from the Windows tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages\nDESCRIPTION: Commands to add required NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Using TestCase Attribute for Parameterized Tests in Fixie\nDESCRIPTION: Demonstrates how to use the TestCase attribute for parameterized testing in Fixie after implementing the custom parameterisation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-fixie.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [TestCase(\"Value1\", \"Value2\")]\n    public Task Test(string arg1, string arg2)\n    {\n        return Verifier.Verify($\"{arg1} {arg2}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Dependency in XML\nDESCRIPTION: This XML snippet shows how to add the `Verify.DiffPlex` NuGet package reference to a .NET project file (e.g., .csproj). Including this package enables an alternative text comparison mechanism for Verify that highlights differences inline within the exception message, which can be clearer than the default output, especially for large strings. The `Version=\"*\"` attribute typically resolves to the latest stable version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Verify with Expecto in F#\nDESCRIPTION: Example showing how to use the Verify library with the Expecto testing framework in F#. The test verifies a person object and converts it to a task for verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_6\n\nLANGUAGE: F#\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings\nDESCRIPTION: MSBuild property setting to enable implicit usings for simplified code structure in test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: Provides a sample TUnit test that uses Verify to compare the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase to enable verification functionality\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Received Files\nDESCRIPTION: YAML configuration for a GitHub Actions step to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify\nDESCRIPTION: Example test code demonstrating how to create a verification test using XunitV3 and Verify. This serves as a template for creating your own verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A basic example of a Xunit test using Verify to snapshot test an object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: This is a sample test using Verify with XUnit v3. It demonstrates how to write a simple test that verifies a string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: A sample test using Verify with TUnit, demonstrating the basic structure of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fixie Test with Verify\nDESCRIPTION: A sample Fixie test that demonstrates how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test class showing how to use Verify with TUnit for testing object verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verify Test\nDESCRIPTION: Example test class showing how to use Verify with TUnit for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Verify Test with TUnit\nDESCRIPTION: A simple example of using Verify with TUnit to test a method that returns a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: Example test showing the standard pattern for using Verify with Fixie. The test creates a simple Person object and verifies its serialized representation matches the expected snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class SampleTest\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Member Scrubbing in C# Verify Tests\nDESCRIPTION: This snippet shows how to globally scrub members in Verify tests. It demonstrates scrubbing for all types, specific types, and using expressions at a global level.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n// For all types\nVerifierSettings.ScrubMember(\"PropertyByName\");\n\n// For a specific type\nVerifierSettings.ScrubMember(typeof(IgnoreExplicitTarget), \"Property\");\n\n// For a specific type generic\nVerifierSettings.ScrubMember<IgnoreExplicitTarget>(\"Field\");\n\n// For a specific type with expression\nVerifierSettings.ScrubMember<IgnoreExplicitTarget>(_ => _.PropertyThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This snippet shows a sample Xunit test that uses Verify to test a method finding a person.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with MSTest\nDESCRIPTION: An example of a basic test using Verify with MSTest, demonstrating how to verify the results of a Person object. It shows the proper use of the [TestMethod] attribute and async Task pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestFixtureSource with NUnit and Verify\nDESCRIPTION: Demonstrates the usage of TestFixtureSource attribute in NUnit with Verify, showing how the test method name is used in the verified file name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture(\"Value1\", 1)]\n[TestFixture(\"Value2\", 2)]\npublic class TestFixtureSourceUsage\n{\n    string arg1;\n    int arg2;\n\n    public TestFixtureSourceUsage(string arg1, int arg2)\n    {\n        this.arg1 = arg1;\n        this.arg2 = arg2;\n    }\n\n    [Test]\n    public Task Test()\n    {\n        return Verify(new {arg1, arg2});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with XunitV3 in C#\nDESCRIPTION: Demonstrates a basic Xunit `[Fact]` test method `Test` within a `Sample` class. It retrieves data using `ClassBeingTested.FindPerson()` and then calls `Verify(person)` to perform snapshot verification. The returned `Task` should be returned or awaited for the test to function correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Scrubbers in TUnit\nDESCRIPTION: Demonstrates various line scrubbing techniques including replacing, removing specific lines based on content, and handling empty lines in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubbersSample\n{\n    [Test]\n    public Task Lines()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesWithReplace(\n            replaceLine: _ =>\n            {\n                if (_.Contains(\"LineE\"))\n                {\n                    return \"NoMoreLineE\";\n                }\n\n                return _;\n            });\n        settings.ScrubLines(removeLine: _ => _.Contains('J'));\n        settings.ScrubLinesContaining(\"b\", \"D\");\n        settings.ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n        return Verify(\n            settings: settings,\n            target: \"\"\"\n                    LineA\n                    LineB\n                    LineC\n                    LineD\n                    LineE\n                    LineH\n                    LineI\n                    LineJ\n                    \"\"\");\n    }\n\n    [Test]\n    public Task LinesFluent() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               LineD\n               LineE\n               LineH\n               LineI\n               LineJ\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: _ =>\n                {\n                    if (_.Contains(\"LineE\"))\n                    {\n                        return \"NoMoreLineE\";\n                    }\n\n                    return _;\n                })\n            .ScrubLines(removeLine: _ => _.Contains('J'))\n            .ScrubLinesContaining(\"b\", \"D\")\n            .ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n\n    [Test]\n    public Task RemoveOrReplace() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: line =>\n                {\n                    if (line.Contains(\"LineB\"))\n                    {\n                        return null;\n                    }\n\n                    return line.ToLower();\n                });\n\n    [Test]\n    public Task EmptyLines() =>\n        Verify(\"\"\"\n\n               LineA\n\n               LineC\n\n               \"\"\")\n            .ScrubEmptyLines();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Scrubbers in NUnit with Verify .NET (C#)\nDESCRIPTION: Presents a full-featured NUnit test class showing the use of multiple scrubbers in Verify .NET. Scrubbers can be mixed and added at different locations (method, class, or global) to manipulate output data as needed for robust snapshot verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class SampleTestClass\n{\n    [Test]\n    public Task TestWithScrubbers()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesContaining(\"password\", \"token\");\n        settings.ScrubMachineName();\n        return Verifier.Verify(someResult, settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrubber Levels in xUnit\nDESCRIPTION: Shows how to implement scrubbers at method, class, and global levels in xUnit tests, demonstrating both fluent and traditional approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubberLevelsSample\n{\n    VerifySettings classLevelSettings;\n\n    public ScrubberLevelsSample()\n    {\n        classLevelSettings = new();\n        classLevelSettings.AddScrubber(_ => _.Replace(\"Three\", \"C\"));\n    }\n\n    [Fact]\n    public Task Usage()\n    {\n        var settings = new VerifySettings(classLevelSettings);\n        settings.AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n        return Verify(\"One Two Three\", settings);\n    }\n\n    [Fact]\n    public Task UsageFluent() =>\n        Verify(\"One Two Three\", classLevelSettings)\n            .AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n\n    [ModuleInitializer]\n    public static void Initialize() =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"One\", \"A\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example of inheriting from VerifyBase class to enable Verify functionality in MSTest without using the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to ensure DiffPlex is set up when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex as a module initializer, enabling enhanced diff visualization for Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Including Verified Files with UTF-8 BOM and LF EOL in Git - .gitattributes Configuration\nDESCRIPTION: These lines are added to the .gitattributes file to ensure that all '*.verified.*' files use UTF-8 encoding with BOM and line-feed line endings in the working tree. The settings ensure cross-platform consistency for checked-in verification files for .txt, .xml, and .json extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Fluent OnHandlers for Verify in C#\nDESCRIPTION: Demonstrates the use of fluent syntax to register verification event handlers (OnVerify, OnFirstVerify, OnVerifyMismatch) within test code using Verify for C#. The handlers are attached directly to the verification call for fine-grained, test-specific control. Useful when only certain tests need custom event handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(target)\n    .OnVerify((before, after) =>\n    {\n        // Fluent-style custom logic before verification\n    },\n    (before, after) =>\n    {\n        // Fluent-style custom logic after verification\n    })\n    .OnFirstVerify(context =>\n    {\n        // Fluent-style custom logic for first verification\n    })\n    .OnVerifyMismatch((received, verified) =>\n    {\n        // Fluent-style custom logic when mismatch occurs\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit NuGet Packages for Verify\nDESCRIPTION: Required NuGet package references for setting up Verify with Xunit in a project, including Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Adding MSTest NuGet packages for Verify\nDESCRIPTION: Required NuGet packages to include in the test project for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.8.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, MSTest packages, and Verify.MSTest to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A basic example of a TUnit test that uses Verify to snapshot test the output of a method. It demonstrates the standard pattern for verification-based testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verify Test with Expecto\nDESCRIPTION: Example of a simple Verify test using Expecto framework. The test creates a target object with a GUID, verifies it with the VerifySettings enabling scrubbing of GUIDs, and returns the verification result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet sample () = task {\n    let target = new {a = \"b\"; id = Guid.NewGuid()}\n    let verifySettings = VerifySettings()\n    verifySettings.ScrubInlineGuids()\n    do! Verifier.Verify(target, verifySettings)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the TUnit and Verify.TUnit NuGet packages to your test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: This snippet shows the required NuGet package references for using NUnit with Verify. It includes Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure editors respect Verify's file format conventions, including UTF-8 with BOM, LF line endings, and no final newline for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: MSBuild property setting to enable implicit usings in the project, which is required for the Verify examples to work correctly without explicit imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to globally install the Verify.Terminal tool which enables managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with Fixie\nDESCRIPTION: Test class that runs VerifyChecks to ensure all Verify conventions are properly configured in the test project using the Fixie framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.MSTest NuGet Packages via .NET CLI\nDESCRIPTION: Installs the necessary NuGet packages for using VerifyTests with MSTest in a .NET project using the command line interface. This includes the .NET Test SDK, MSTest adapter and framework, and the Verify.MSTest integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for MSTest\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with MSTest. It includes Verify.MSTest for core functionality and Microsoft.NET.Test.Sdk for test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.8.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Configuration for .gitattributes to ensure verified text files have consistent line endings (LF) and UTF-8 encoding, maintaining compatibility across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with TUnit\nDESCRIPTION: Test class implementation for running Verify convention checks using TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline: Publish Verify Artifacts - yaml\nDESCRIPTION: Defines a YAML pipeline task in Azure DevOps to publish previously staged '*.received.*' files as build artifacts named 'Verify'. It is conditioned on 'publishverify' variable being 'Yes'. This step should typically follow copying files to the staging directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\\n  displayName: 'Publish Verify *.received.* files as Artifacts'\\n  name: 'verifypublish'\\n  condition: eq(variables['publishverify'], 'Yes')\\n  inputs:\\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\\n    ArtifactName: 'Verify'\\n    publishLocation: 'Container'\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances the text comparison behavior by highlighting differences inline instead of showing the full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for better diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper formatting and encoding for verified and received files when editing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are dynamically generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify and XUnit testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in a TUnit Test - C#\nDESCRIPTION: This C# class demonstrates how to verify that project and file conventions are being followed by invoking VerifyChecks.Run() within a unit test. Requires the VerifyChecks library and TUnit attributes. The single test method is asynchronous and returns a Task; it will run all convention checks as part of normal test execution. Suitable for inclusion in your test suite to continuously validate repository health.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit NuGet Packages for Verify\nDESCRIPTION: NuGet packages required for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: This snippet demonstrates how to use the VerifyBase class in an MSTest test class to simplify the usage of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Lines with a Condition using Verify .NET in C#\nDESCRIPTION: Demonstrates how to remove lines from verification output that match a specific condition using the ScrubLines API in Verify .NET. This approach relies on passing a Func delegate to exclude or modify lines containing certain text during test output verification. Requires a reference to the Verify testing library and the expected use of test framework integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Remove lines containing the word \\'text\\'\nsettings.ScrubLines(line => line.Contains(\"text\"));\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: This YAML snippet copies Verify's *.received.* files to the artifact staging directory in Azure DevOps. It runs conditionally based on the previously set flag.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in Fixie - C#\nDESCRIPTION: Implements a Fixie test class that validates project-wide Verify conventions using VerifyChecks.Run. This task ensures project and source control configuration correctness; add this test class to your suite to automatically catch convention mismatches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    public Task Run() =>\\n        VerifyChecks.Run(GetType().Assembly);\\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verify Text Files\nDESCRIPTION: These `.gitattributes` lines configure Git to handle text-based verified files (`.txt`, `.xml`, `.json`) consistently. It enforces Unix-style line endings (LF) and UTF-8 encoding, aligning with Verify's default text file settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore patterns to exclude received test files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify Files\nDESCRIPTION: GitIgnore configuration to exclude received test files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing DanglingSnapshots in MSTest\nDESCRIPTION: Sets up assembly cleanup to check for dangling snapshots using MSTest's AssemblyCleanup attribute. This runs after all tests complete to verify no orphaned snapshot files exist.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dangling-files.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable VerifyDanglingSnapshots\n[TestClass]\npublic static class Cleanup\n{\n    [AssemblyCleanup]\n    public static void Run() =>\n        DanglingSnapshots.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example implementation of a basic NUnit test using Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in Expecto\nDESCRIPTION: Example snippet for calling VerifyChecks within an Expecto test to validate conventions across assemblies. This ensures that custom configurations meet expected standards and practices. Place this code in a test file where convention checks are needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: C# code showing how to implement convention checks using VerifyChecks.Run()\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyCheckException JSON Structure for Missing .gitattributes Settings\nDESCRIPTION: JSON representation of a VerifyCheckException that occurs when .gitattributes file is missing required Verify settings. The exception includes the error type, detailed message with file path, recommended settings to add, and an empty stack trace field.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/InnerVerifyChecksTests/VerifyChecksTests.PartialGitAttributes.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: VerifyCheckException,\n  Message:\nExpected .gitattributes to contain settings for Verify.\nPath: file:///{ProjectDirectory}InnerVerifyChecksTests/Partial/.gitattributes\nRecommended settings:\n\n# Verify\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n,\n  StackTrace: \n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet publishes the staged .received files as build artifacts. It's conditional on the publishverify flag being set to 'Yes'. This step makes the .received files available for download and inspection after the build.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Filtered Zip Verification with XUnit\nDESCRIPTION: Demonstrates how to verify zip contents with a filter predicate that only includes files containing 'Doc' in their path.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-zip.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithZipFiltered() =>\n    VerifyZip(\n        zipPath,\n        include: filePath => filePath.FullName.Contains(\"Doc\"));\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in TUnit\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check using TUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with VerifyChecks in Xunit\nDESCRIPTION: C# test class that runs VerifyChecks to verify that all conventions are properly set up in the project. This helps ensure consistency across the testing environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in a Fixie Test (C#)\nDESCRIPTION: Demonstrates how to invoke `VerifyChecks.Run()` within a Fixie test method to ensure that project conventions related to Verify (like snapshot settings and file includes/excludes) are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Example usage within a Fixie test class\npublic class ConventionTests\n{\n    public void CheckVerifyConventions()\n    {\n        // This call checks if Verify conventions are correctly set up\n        VerifyChecks.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to enable Verify in Fixie test projects. This configures the test execution environment to work with Verify's snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced diff visualization in tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: Example test class demonstrating how to use Verify with TUnit for snapshot testing. Shows testing a person object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Code for initializing Verify.DiffPlex, which changes the text comparison behavior to highlight differences inline for better visualization of test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in XunitV3\nDESCRIPTION: Example implementation of Verify checks in XunitV3. This test class runs verification checks to ensure file conventions are followed correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XunitV3\nDESCRIPTION: Basic example of a test method using Verify to snapshot test a Person object. Shows the standard pattern for verification in XunitV3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit V3\nDESCRIPTION: C# code demonstrating a sample test using Verify with XUnit V3, showing how to verify the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Validating Anonymous Type with Fixie and Verify\nDESCRIPTION: This C# snippet illustrates using an anonymous type to group `target1` and `target2` for snapshot verification within a Fixie test method using `Verifier.Verify()`. It requires the Fixie framework and the Verify.Fixie library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/anonymous-types.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task Anon()\n{\n    var target1 = new Target\n    {\n        Property = \"Value1\"\n    };\n    var target2 = new Target\n    {\n        Property = \"Value2\"\n    };\n    return Verifier.Verify(\n        new\n        {\n            target1,\n            target2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received files to ensure consistent encoding (UTF-8 with BOM), line endings (LF), and formatting across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation for Fixie\nDESCRIPTION: Test class that runs verification checks on the assembly to ensure proper setup and conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit V3 Testing\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit V3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: XUnit test implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Defining a Custom DateTimeOffset Comparer in .NET (C#)\nDESCRIPTION: This snippet registers a custom DateTimeOffset comparer that considers only the date component (year, month, day) for equality, excluding time and offset. The module initializer globally installs this comparer for test validation via Counter.UseDateTimeOffsetComparer. Dependencies are DateTimeOffset, DateTime, and the Counter utility; requires .NET 5+ for [ModuleInitializer].\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void UseCustomDateTimeOffsetComparer() =>\n    Counter.UseDateTimeOffsetComparer(new CustomDateTimeOffsetComparer());\n\npublic class CustomDateTimeOffsetComparer :\n    IEqualityComparer<DateTimeOffset>\n{\n    public bool Equals(DateTimeOffset x, DateTimeOffset y) =>\n        new DateTimeOffset(new(x.Year, x.Month, x.Day)) ==\n        new DateTimeOffset(new(y.Year, y.Month, y.Day));\n\n    public int GetHashCode(DateTimeOffset date)\n    {\n        var dateTime = new DateTime(date.Year, date.Month, date.Day);\n        return new DateTimeOffset(dateTime)\n            .GetHashCode();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: C# code snippet demonstrating how to use the VerifyBase class in MSTest to simplify test setup for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestProject for Fixie and Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces required to properly integrate Verify with Fixie's test execution pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: A simple example of a TUnit test that uses Verify to snapshot test an object. The test creates an object and verifies its serialized state against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: This snippet shows a basic NUnit test fixture using Verify. It demonstrates how to create a test method that verifies the output of a ClassBeingTested.FindPerson() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Filename in MSTest\nDESCRIPTION: Demonstrates how to ignore parameters when generating the verified filename using IgnoreParametersForVerified(). This is useful when you want the same verified file for all test cases.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"One\")]\n[DataRow(\"Two\")]\npublic Task IgnoreParametersForVerified(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified(arg);\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output After Pausing and Resuming (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file from the `RecordingPauseResume` snippet, showing that items added while paused are excluded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.PauseResume.verified.txt\n{\n  Recorded:\n  {\n    key1: value1,\n    key3: value3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces required to enable Verify in a Fixie test project. It handles the setup of VerifierSettings and test execution with proper context management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Received Files as Artifacts in Azure DevOps - YAML Build Step\nDESCRIPTION: Pipeline step to copy all Verify '.received.*' files into the Artifact Staging Directory on Azure DevOps when the 'publishverify' variable is set. Ensures these files are available for later publishing or examination. Used with conditional publishing workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\\n  condition: eq(variables['publishverify'], 'Yes')\\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\\n  inputs:\\n    contents: '**/*.received.*' \\n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\\n    cleanTargetFolder: true\\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Value Usage\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is useful for ensuring proper usage of Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure verified files have consistent line endings (LF) and UTF-8 encoding, which is important for cross-platform compatibility.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in XunitV3\nDESCRIPTION: A code snippet demonstrating how to run Verify conventions check using VerifyChecks.Run() in an XunitV3 test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the DiffPlex module to enhance text comparison for Verify tests with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: This snippet shows a sample MSTest test class using Verify. It demonstrates how to create a test method that verifies the output of a method call using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in F# with Expecto\nDESCRIPTION: F# code example showing how to write a simple snapshot test using Verify.Expecto. The test finds a person using a method in ClassBeingTested and verifies the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_12\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using TUnit with Verify\nDESCRIPTION: Demonstrates using Verify with TUnit testing framework. The test creates a ClassBeingTested instance and performs snapshot verification against a stored result file.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new ClassBeingTested\n    {\n        Title = \"Mr\",\n        Name = \"John Smith\",\n        Age = 10\n    };\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration with Verify - C#\nDESCRIPTION: Shows the boilerplate needed to initialize Verify.DiffPlex via a ModuleInitializer. Place this in a static context in your test project. Requires the Verify.DiffPlex NuGet package. No further parameters required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: Example C# code demonstrating a simple Verify test using TUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test Using Fixie\nDESCRIPTION: A complete example of a Fixie test that uses Verify to compare and snapshot test outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TUnit Test for Verify Convention Checks (C#)\nDESCRIPTION: Implements a test class `VerifyChecksTests` using TUnit attributes (`[Test]`). The `Run` test method invokes `VerifyChecks.Run()`, a utility provided by VerifyTests, which programmatically checks if the project setup adheres to recommended conventions like `.gitignore` rules and text file settings. This helps ensure the environment is correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Address Verification Test Data Structure in JSON Format\nDESCRIPTION: A JSON structure containing test cases for address verification. Each entry includes a house number, street name, and city as input, with the expected output result following the colon.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.WithGlobalHeaders.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  number, street    , city   : Result,\n  1, Smith St, Sydney: 1 Smith St, Sydney,\n  1, Smith St, Chicago: 1 Smith St, Chicago,\n  1, Wallace St, Sydney: 1 Wallace St, Sydney,\n  1, Wallace St, Chicago: 1 Wallace St, Chicago,\n  10, Smith St, Sydney: 10 Smith St, Sydney,\n  10, Smith St, Chicago: 10 Smith St, Chicago,\n  10, Wallace St, Sydney: 10 Wallace St, Sydney,\n  10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Testing with NUnit\nDESCRIPTION: Commands to add required NuGet packages for Verify testing with NUnit, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of a test class that inherits from VerifyBase, which automatically marks the class for Verify's source generator processing, eliminating the need for explicit UsesVerify attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline Diffing - C#\nDESCRIPTION: Initializes Verify.DiffPlex for improved inline diffing in test output by calling VerifyDiffPlex.Initialize() at module load via a ModuleInitializer method. Must reference the Verify.DiffPlex package and requires C# 9 or newer for the ModuleInitializer attribute. This integration runs automatically before any tests execute, modifying diff output globally.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using Typed File Converter in C#\nDESCRIPTION: Shows how to use the registered typed file converter to verify a TIFF image from a file stream.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nusing var stream = File.OpenRead(\"sample.tif\");\nawait Verify(Image.FromStream(stream));\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test in C#\nDESCRIPTION: This C# code shows a basic TUnit test class `Sample` with a test method `Test`. It calls a method `ClassBeingTested.FindPerson()` to get an object and then uses `Verify(person)` to perform snapshot verification on the returned object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: Example of a Verify test implementation using the Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestExpecto\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: Code snippet showing how to run Verify's conventions check in an MSTest test method. This ensures that all Verify configuration conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task CheckConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the required NuGet packages to a test project for using Verify with XunitV3. This includes the test SDK, Verify.XunitV3, xunit.v3 (prerelease), and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: NUnit Dangling Snapshots Implementation\nDESCRIPTION: Implementation of dangling snapshots detection using NUnit's OneTimeTearDown feature.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nDanglingSnapshotsNUnitUsage/DanglingSnapshots.cs\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for setting up Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Overriding Default TreatAsString Behavior in C#\nDESCRIPTION: Example showing how to override the default string conversion behavior for a specific type (DateTime in this case).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/type-to-string-mapping.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.TreatAsString<DateTime>(\n    (target, settings) => target.ToString(\"D\"));\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A basic NUnit test class demonstrating how to use Verify with NUnit to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for enhanced diff visualization in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File - XML\nDESCRIPTION: This code block shows how to enable implicit usings in a .NET project file, which is necessary for the example code to compile as presented. It requires setting the <ImplicitUsings> property to enable, typically within a .csproj file. No parameters are needed beyond directly adding the property group, and the absence of this setting may require fully qualified namespace calls in example code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Verify Artifacts\nDESCRIPTION: AppVeyor build configuration to capture *.received.* files as artifacts when tests fail, making them available for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: An example of an Xunit test method utilizing Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: This C# code snippet demonstrates how to run Verify checks within an Xunit test method. It uses the VerifyChecks.Run() method to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run()\n{\n    return VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Verify Test with Fixie\nDESCRIPTION: A simple test class showing how to use Verify with Fixie. Demonstrates verifying a person object returned from a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3 in C#\nDESCRIPTION: This snippet demonstrates how to run Verify checks using XUnit v3. It includes a test method that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run()\n{\n    return VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Date Counting\nDESCRIPTION: Shows how to globally disable date counting across all tests using ModuleInitializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void ModuleInitializer() =>\n    VerifierSettings.DisableDateCounting();\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Example of a simple Fixie test class using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet shows how to run Verify checks in an MSTest test class to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Verified Output for Basic XML Verification\nDESCRIPTION: This XML represents the content of the `.verified.xml` file generated by the basic `VerifyXml` test. It shows the input XML after being automatically pretty-printed by the Verify library during the snapshot comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<body>\n  <node>text</node>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Checks with Fixie – C#\nDESCRIPTION: Defines a test class using C# and Fixie syntax, invoking VerifyChecks.Run() to programmatically verify that conventions (such as file creation, formatting, and structure) are followed in the current assembly. Requires Verify.Fixie and Fixie as dependencies. Call this test to ensure your project adheres to Verify expectations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    public Task Run() =>\\n        VerifyChecks.Run(GetType().Assembly);\\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase with MSTest\nDESCRIPTION: An example of inheriting from VerifyBase in MSTest to enable verification testing without explicitly adding the UsesVerify attribute. This is an alternative way to mark a test class for Verify processing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison results by highlighting differences inline instead of showing complete received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Named Dates and Times Global Configuration\nDESCRIPTION: Setting global configuration to assign names to specific date/time values for all verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nNamedDatesAndTimesGlobal\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider to Treat Pure Method Return Values as Required\nDESCRIPTION: EditorConfig setting to configure Rider and ReSharper to treat unused return values of pure methods (like Verify()) as errors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check in XunitV3\nDESCRIPTION: A test class that runs VerifyChecks.Run() to validate that all conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Recording with Identifier\nDESCRIPTION: Displays the verified output when using an identifier with Recording, showing the recorded value in an array format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n[\n  {\n    name: value\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control for Verified Files via GitAttributes (gitattributes)\nDESCRIPTION: This snippet shows how to configure Git to ensure all text extensions of '*.verified.*' files use LF newlines and UTF-8 encoding with BOM in the working tree. It should be added to the project’s .gitattributes file and adapted to cover all relevant file extensions (txt, xml, json, etc.). This enforces consistent handling of newlines and encoding across all environments and avoids encoding-related verification diffs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/text-file-settings.include.md#2025-04-22_snippet_0\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Basic Recording Usage (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file resulting from the basic `Recording` snippet usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.Usage.verified.txt\n{\n  Recorded:\n  {\n    key1: value1,\n    key2: {\n      Prop: value2\n    }\n  },\n  Target: somethingElse // Assuming Verify(somethingElse)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal as a Global Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which provides command-line capabilities for managing snapshots and verification files from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool\nDESCRIPTION: Installs the DiffEngineTray .NET global tool using the command line. DiffEngineTray runs in the Windows system tray, monitoring snapshot changes detected by VerifyTests and providing options to accept or reject them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex for Inline Diffs - C# Module Initializer\nDESCRIPTION: This code uses a ModuleInitializer to execute VerifyDiffPlex.Initialize() automatically at module load time, ensuring inline diff support in Verify for all tests. It must be included in the test project's C# code; the Verify.DiffPlex NuGet package is required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor Build Failure Artifact Collection\nDESCRIPTION: PowerShell script to configure AppVeyor to collect and upload .received files as artifacts when tests fail. Uses Get-ChildItem to recursively find .received files and Push-AppveyorArtifact to upload them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet packages for Fixie and Verify\nDESCRIPTION: Add the required NuGet packages to the test project for Fixie and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while including *.verified.* files, ensuring that only verified snapshots are committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings for Verify Testing\nDESCRIPTION: Configuration setting to enable implicit usings in the project file, which simplifies the use of Verify by allowing direct access to the Verify() method without full qualification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Converter Module for C#\nDESCRIPTION: This snippet demonstrates how to register a custom combination converter at the top of the converter stack for VerifySettings. Using a ModuleInitializer, the sample configures the custom converter to be used by inserting it into the converter list.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nstatic CustomCombinationConverter customConverter = new();\n\n[ModuleInitializer]\npublic static void Init() =>\n    VerifierSettings.AddExtraSettings(_ => _.Converters.Insert(0, customConverter));\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML setting to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced text comparison functionality in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing ITestProject and IExecution for Fixie with Verify\nDESCRIPTION: C# implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify, including setting up the target assembly and wrapping test executions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Project and Test Execution Convention with Fixie and Verify - C#\nDESCRIPTION: This C# snippet provides a full implementation of a Fixie ITestProject and IExecution. It assigns the test assembly to VerifierSettings.AssignTargetAssembly in Configure, and runs all test classes and test methods using ExecutionState.Set. It also supports handling parameterized test cases, ensuring Verify is used correctly in custom test setups. Dependencies: Fixie, Verify.Fixie, and project test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\\n    ITestProject,\\n    IExecution\\n{\\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\\n    {\\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\\n    }\\n\\n    public async Task Run(TestSuite testSuite)\\n    {\\n        foreach (var testClass in testSuite.TestClasses)\\n        {\\n            foreach (var test in testClass.Tests)\\n            {\\n                if (test.HasParameters)\\n                {\\n                    foreach (var parameters in test\\n                                 .GetAll<TestCase>()\\n                                 .Select(_ => _.Parameters))\\n                    {\\n                        using (ExecutionState.Set(testClass, test, parameters))\\n                        {\\n                            await test.Run(parameters);\\n                        }\\n                    }\\n                }\\n                else\\n                {\\n                    using (ExecutionState.Set(testClass, test, null))\\n                    {\\n                        await test.Run();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex via ModuleInitializer (C#)\nDESCRIPTION: This C# code shows how to enable the Verify.DiffPlex integration using a `ModuleInitializer`. Calling `VerifyDiffPlex.Initialize()` ensures that DiffPlex is used for text comparisons by VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Registering JsonAppender in C#\nDESCRIPTION: Shows how to register a JsonAppender that conditionally adds key-value pairs to verification output based on context\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/jsonappender.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.RegisterJsonAppender(\n    context =>\n    {\n        if (ShouldInclude(context))\n        {\n            return new ToAppend(\"theData\", \"theValue\");\n        }\n\n        return null;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Up Verify Convention Checks with Expecto\nDESCRIPTION: An example of implementing VerifyChecks.Run() in an Expecto test to ensure all Verify conventions are followed correctly within the assembly. This helps validate configuration and setup are correct.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages (TUnit and Verify.TUnit) to a test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages via dotnet CLI\nDESCRIPTION: These commands use the .NET CLI to add the core Fixie test runner package and the specific Verify integration package for Fixie to the current .NET project. These are the essential packages needed to start using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required to use Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: Provides EditorConfig settings (`[*.{received,verified}.{json,txt,xml}]`) to maintain consistency when editing Verify's text-based received and verified files. It enforces `charset = \"utf-8-bom\"`, `end_of_line = lf`, and prevents unwanted whitespace changes. Users should add other relevant extensions as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: EditorConfig settings for handling verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using VerifyExpecto\nDESCRIPTION: Example fsharp test utilizing VerifyExpecto to perform snapshot testing on a method returning a person entity. Demonstrates how to use the Verifier for asynchronous verification tasks within a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File for Verify\nDESCRIPTION: XML configuration to enable implicit using directives in the project file, which allows for shorter syntax when using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: XUnit test implementation to run Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit testing framework, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Return Value Checks in .editorconfig\nDESCRIPTION: Sets up Rider and ReSharper to highlight unused return values of methods marked with the PureAttribute as errors. This uses a configuration setting in the .editorconfig file. No additional dependencies are required, but the PureAttribute feature relies on .NET's System.Diagnostics.Contracts namespace.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/pure.include.md#2025-04-22_snippet_0\n\nLANGUAGE: Config\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Named Dates and Times with Instance Settings\nDESCRIPTION: Shows how to configure named dates and times for specific test instances.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.AddNamedDate(new(2020, 10, 11), \"instanceNamedDate\");\nsettings.AddNamedTime(new(1, 2), \"instanceTime\");\nsettings.AddNamedDateTime(new(2030, 1, 2), \"instanceNamedDateTime\");\nsettings.AddNamedDateTimeOffset(new DateTime(2030, 1, 2), \"instanceNamedTimeOffset\");\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Sample test showing how to run VerifyChecks to validate the Verify conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Checks\n{\n    public void Run() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text difference visualization by highlighting differences inline rather than showing complete verified and received contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Calculating Date with Windows Command Line\nDESCRIPTION: Demonstrates how to calculate a future date (7 days from now) using the Windows command line. It first sets the current date to a variable and then adds 7.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineDateTimesEndingWithSymbol.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nset day=%date%\nset /a day+=7\necho %day%\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration for handling verified and received files with correct encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in a C# project file, which allows for shorter syntax in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Using Hashed Parameters in Verify Tests (Instance Method)\nDESCRIPTION: Demonstrates how to use hashed parameters in a Verify test using the instance method. This approach is useful for large parameters that might exceed OS filename length limits.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task HashParametersUsage(string arg)\n{\n    var settings = new VerifySettings();\n    settings.HashParameters();\n    return Verify(arg, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Date Property in JSON\nDESCRIPTION: This code snippet defines a JSON object with a single property 'Date_1' set to the numeric value 1234. This could represent a date or timestamp in a specific format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringDateKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Date_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet publishes the staged Verify *.received.* files as build artifacts. It uses a PublishBuildArtifacts task that runs conditionally based on the previously set flag.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: Demonstrates how to run Verify checks using NUnit to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DanglingSnapshots in XUnitV3\nDESCRIPTION: Sets up shared fixture collection for XUnit V3 to handle dangling snapshot verification, following the same pattern as regular XUnit but for V3 compatibility.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dangling-files.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable VerifyDanglingSnapshots\n\n[CollectionDefinition(nameof(SharedFixtureCollection))]\npublic class SharedFixtureCollection :\n    ICollectionFixture<SharedFixture>;\n\npublic sealed class SharedFixture :\n    IDisposable\n{\n    public void Dispose() =>\n        DanglingSnapshots.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files in text editors, including charset, line endings, and whitespace handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test with Fixie\nDESCRIPTION: A Fixie test that runs verification checks against the assembly to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: A basic example of a Verify test using MSTest. This demonstrates how to create a simple test that captures and verifies an object's state using the AutoVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    [AutoVerify] // or add [Verify] for explicit verification control\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: This snippet shows a sample test using Verify with Fixie. It demonstrates how to use the Verify method to compare a string with its verified counterpart.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public async Task Test()\n    {\n        await Verify(\"Some String\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in Module Initializer\nDESCRIPTION: Code to initialize the VerifyDiffPlex module, which changes the text compare result to highlight text differences inline when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: This code demonstrates how to run Verify checks using Expecto. It creates a test that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[<Test>]\nlet VerifyConventions () =\n    VerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit V3\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an XUnit V3 test. It creates a test method that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages via dotnet CLI - Shell\nDESCRIPTION: This shell code installs necessary packages for snapshot verification tests with NUnit and Verify.NUnit. It uses the dotnet CLI to add: Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit. These dependencies are required for running and verifying tests; run each command from the test project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package NUnit\\ndotnet add package NUnit3TestAdapter\\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example NUnit test class showing how to use Verify to test a person object with snapshot verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test class showing how to implement a basic verification test using TUnit and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase for simplified test implementation\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git configuration to ensure proper line endings and encoding for verified text files. Sets eol to lf and working-tree-encoding to UTF-8.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Save Received Files on Test Failure\nDESCRIPTION: PowerShell command for AppVeyor's on_failure build step to collect and upload all *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto Testing\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto testing framework, including YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: Copies all .received files to the artifact staging directory when tests have failed. This step runs conditionally based on the publishverify variable and collects all .received files from the entire workspace.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages to .NET Test Project\nDESCRIPTION: This shell script installs necessary NuGet packages for NUnit testing in a .NET project. Packages include Microsoft.NET.Test.Sdk for running tests, NUnit for test framework, NUnit3TestAdapter for integration, and Verify.NUnit for verification purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration (C#)\nDESCRIPTION: Provides the C# code required to enable the Verify.DiffPlex integration. It uses a `ModuleInitializer` attribute to ensure `VerifyDiffPlex.Initialize()` is called at assembly load time, modifying Verify's text comparison behavior globally for the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Custom Fixie Test Project and Execution for Verify - C#\nDESCRIPTION: Implements a custom Fixie ITestProject and IExecution for integrating Verify into the test lifecycle. Assigns the test assembly to Verify, sets up test discovery convention, and wraps every test run in Verify's execution state (including parameterized tests). Requires Fixie and Verify libraries; useful for users wiring up their own test pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class TestProject :\\n    ITestProject,\\n    IExecution\\n{\\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\\n    {\\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\\n    }\\n\\n    public async Task Run(TestSuite testSuite)\\n    {\\n        foreach (var testClass in testSuite.TestClasses)\\n        {\\n            foreach (var test in testClass.Tests)\\n            {\\n                if (test.HasParameters)\\n                {\\n                    foreach (var parameters in test\\n                                 .GetAll<TestCase>()\\n                                 .Select(_ => _.Parameters))\\n                    {\\n                        using (ExecutionState.Set(testClass, test, parameters))\\n                        {\\n                            await test.Run(parameters);\\n                        }\\n                    }\\n                }\\n                else\\n                {\\n                    using (ExecutionState.Set(testClass, test, null))\\n                    {\\n                        await test.Run();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in TUnit Tests (Fluent)\nDESCRIPTION: Demonstrates how to override the text used for parameters in file naming using UseTextForParameters() with a fluent interface in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\")]\n[Arguments(\"Value2\")]\npublic Task UseTextForParametersFluent(string arg) =>\n    Verify(arg + \"UseTextForParametersFluent\")\n        .UseTextForParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Fixie Tests\nDESCRIPTION: Demonstrates basic parameter usage in Fixie tests using the UseParameters method to control parameter naming in verification files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-fixie.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task UseParametersUsage(string arg)\n{\n    var somethingToVerify = $\"{arg} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Key Grouping in Recording (C#)\nDESCRIPTION: Shows that keys used in `Recording.Add()` are treated case-insensitively when grouping values. Adding values with keys differing only by case will result in them being grouped together.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingIgnoreCase' snippet\nRecording.Add(\"MixedCaseKey\", \"value1\");\nRecording.Add(\"mixedcasekey\", \"value2\");\n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Replacing Machine Name using Scrubber in Verify .NET (C#)\nDESCRIPTION: Demonstrates masking the Environment.MachineName with a static value ('TheMachineName') in the test verification output using Verify .NET. Useful for removing environment-specific data from test results. Requires the Verify library and integration with the chosen test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Replace MachineName with \\'TheMachineName\\' in scrubbed output\nsettings.ScrubMachineName();\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify NuGet Packages via CLI (.NET Shell)\nDESCRIPTION: These shell commands add the Fixie and Verify.Fixie packages to a .NET test project using the dotnet CLI. The packages enable snapshot testing using the Fixie framework. Execute these in the test project's directory to install the necessary dependencies. No code changes required; outputs are success messages confirming installation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for XunitV3\nDESCRIPTION: Shows how to run VerifyChecks in an XunitV3 test to validate that snapshot file conventions are correctly configured for source control integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Using TryAdd with Recording in C#\nDESCRIPTION: Illustrates the use of Recording.TryAdd() which only adds an item if Recording is active. It demonstrates the difference between TryAdd before and after Recording.Start().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task TryAdd()\n{\n    //using Recording.Add here would throw since Recording.Start has not been called\n    Recording.TryAdd(\"name1\", \"value1\");\n    Recording.Start();\n    Recording.TryAdd(\"name2\", \"value2\");\n    return Verify(\"TheValue\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks in Fixie\nDESCRIPTION: Test class implementation for running Verify convention checks in a Fixie test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Base Class Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase for simplified test implementation\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the DiffPlex verification settings using a module initializer\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in F#\nDESCRIPTION: Example F# test demonstrating how to use Verify with Expecto for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verification Test with XUnit\nDESCRIPTION: Sample XUnit test that demonstrates the basic pattern for using Verify with XUnit. The test retrieves a person object and verifies its state using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: Example of how to check conventions by calling VerifyChecks.Run() in an Xunit test. This ensures that all required conventions for Verify are properly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks with Verify in C#\nDESCRIPTION: C# test that runs verification checks against an assembly to ensure all conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with VerifyChecks in Expecto\nDESCRIPTION: C# code that demonstrates how to implement a test to check if your project follows Verify's conventions. Uses VerifyChecks.Run on the current assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: C# code snippet showing how to run Verify checks in an MSTest test class to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Template for Time and Date Object Equality Testing\nDESCRIPTION: A JSON structure defining pairs of time-related objects with identical values. This template likely serves as test data for verification frameworks to check object equality comparison logic for Time, DateTime, and DateTimeOffset types.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CustomDateCompareTests.Run.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Time1: Time_1,\n  Time2: Time_1,\n  DateTime1: DateTime_1,\n  DateTime2: DateTime_1,\n  DateTimeOffset1: DateTimeOffset_1,\n  DateTimeOffset2: DateTimeOffset_1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool which allows managing snapshots from the command line. This provides additional flexibility for working with verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Disabling Guid Sanitization (Fluent) in C#\nDESCRIPTION: This snippet shows how to disable guid sanitization using a fluent API approach in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verify(target)\n    .DontScrubGuids();\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase for MSTest Classes in C#\nDESCRIPTION: Shows an MSTest test class (`VerifyBaseUsage`) inheriting from `VerifyBase`. Inheriting from `VerifyBase` implicitly marks the class for processing by the Verify.MSTest source generator and provides access to Verify methods directly without needing `Verifier.` prefix (if ImplicitUsings are disabled).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit V3\nDESCRIPTION: Sample test class demonstrating how to run Verify convention checks using XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and MSTest\nDESCRIPTION: Commands to add required NuGet packages for using Verify with MSTest, including test SDK and adapters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Instances in Verify Tests (C#)\nDESCRIPTION: Demonstrates how to scrub instances of a type based on a delegate in Verify tests. Includes both local settings and fluent API approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreInstanceTarget\n{\n    ToIgnore = new()\n    {\n        Property = \"Ignore\"\n    },\n    ToInclude = new()\n    {\n        Property = \"Include\"\n    }\n};\nvar settings = new VerifySettings();\nsettings.ScrubInstance<Instance>(_ => _.Property == \"Ignore\");\nreturn Verify(target, settings);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreInstanceTarget\n{\n    ToIgnore = new()\n    {\n        Property = \"Ignore\"\n    },\n    ToInclude = new()\n    {\n        Property = \"Include\"\n    }\n};\nreturn Verify(target)\n    .ScrubInstance<Instance>(_ => _.Property == \"Ignore\");\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified text files with specific encoding and line ending settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: Adds the required NuGet packages for Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify and XunitV3\nDESCRIPTION: Commands to add necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Reporting\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension which enhances diff output by showing inline differences between received and verified content instead of showing both files in their entirety.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Global Member Ignoring by Predicate in C# Verify Tests\nDESCRIPTION: This snippet shows how to globally ignore members using a predicate function in Verify tests. It demonstrates ignoring members based on their declaring type and name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreMembers(\n    _=>_.DeclaringType == typeof(TargetClass) &&\n       _.Name == \"Proprty\");\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors. Specifies character encoding, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Test with Verify.Expecto in F#\nDESCRIPTION: Example of a basic verification test using Verify.Expecto in F#. This demonstrates how to structure a test that captures and verifies the state of a test subject.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with Expecto in F#\nDESCRIPTION: F# implementation of a verification test using Expecto and Verify.Expecto to verify the output of FindPerson().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_9\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Different Scrubber Levels in xUnit with Verify .NET (C#)\nDESCRIPTION: Shows the use of scrubbers at different scoping levels (method, class, global) with xUnit tests using Verify .NET. Useful for organizing scrubber application logically by test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubberLevelsSample\n{\n    static VerifySettings classSettings = new VerifySettings().ScrubLinesContaining(\"api-key\");\n\n    [Fact]\n    public Task MethodLevelScrubbing()\n    {\n        var settings = new VerifySettings().ScrubLinesContaining(\"token\");\n        return Verifier.Verify(someResult, settings);\n    }\n\n    [Fact]\n    public Task ClassLevelScrubbing()\n    {\n        return Verifier.Verify(someResult, classSettings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Single Key-Value Pair\nDESCRIPTION: This snippet defines a JSON object containing a single key 'Value' with the corresponding value 'Value2'. It's a basic structure often used in configuration files or for data exchange.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberStructData_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Value: Value2\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A complete example of a NUnit test that uses Verify to perform snapshot testing, including the test class definition, module initializer for configuration, and a sample test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\nusing VerifyNUnit;\nusing VerifyTests;\n\n[TestFixture]\npublic class Tests\n{\n    [ModuleInitializer]\n    public static void Initialize()\n    {\n    }\n\n    [Test]\n    public Task Test()\n    {\n        return Verifier.Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A sample Xunit test method using Verify. This snippet demonstrates how to write a test that verifies the content of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation in Fixie\nDESCRIPTION: A basic example showing how to implement a verification test using Fixie test framework. The test finds a person using ClassBeingTested and verifies the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in Expecto Tests\nDESCRIPTION: Example of implementing verification checks in an Expecto test class to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Project Conventions with VerifyChecks - NUnit Test - cs\nDESCRIPTION: Implements a simple NUnit test fixture that invokes VerifyChecks.Run() to validate that project and source control conventions are correctly set up for snapshot testing. Requires Verify.NUnit and should be part of your test suite to automatically assert repository compliance. The method returns a Task, designed for async test workflows, and ensures best practices are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: XUnit test implementation for running verify checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Counting with Instance Settings\nDESCRIPTION: Shows how to disable the date counting feature and revert to simple scrubbing for a specific test instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nvar target = new\n{\n    Date = new DateTime(2020, 10, 10, 0, 0, 0, DateTimeKind.Utc)\n};\n\nvar settings = new VerifySettings();\nsettings.DisableDateCounting();\n\nreturn Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Fixie\nDESCRIPTION: A sample Fixie test that demonstrates how to use Verify to snapshot test a person object returned from a class being tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Convention Check Test with Xunit\nDESCRIPTION: An Xunit test that runs VerifyChecks.Run() to validate that all Verify conventions are properly followed in the project. This ensures consistent configuration across the test suite.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Demonstrates how to run Verify checks using Xunit. This code snippet shows a test class with a single test method that calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Demonstrates how to run Verify checks in an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task CheckConventions() =>\n    await VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in Verify.XunitV3 (C#)\nDESCRIPTION: Provides a sample XunitV3 test class implementing the VerifyChecks.Run() method to programmatically check Verify snapshot/test conventions. Requires Verify.XunitV3, Xunit, and async C# support. The test can be included in any test suite to validate source control and text encoding conventions. Input: None; Output: Task returned by convention check. Limitation: Appropriate for projects enforcing Verify conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Testing an Asynchronous Method That Throws an Exception (ValueTask) Using Verify in C#\nDESCRIPTION: This snippet demonstrates how to use Verify.ThrowsValueTask to test an asynchronous method that throws an exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task TestMethodThatThrowsValueTask() =>\n    ThrowsValueTask(MethodThatThrowsValueTask);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with Fixie\nDESCRIPTION: A Fixie test that runs VerifyChecks.Run() to ensure all Verify conventions are correctly set up for the assembly, validating proper configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase to enable verification functionality in test classes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages via .NET CLI\nDESCRIPTION: Adds the required NuGet packages 'Fixie' and 'Verify.Fixie' to the current .NET test project using the command line interface. These packages are necessary to use the Fixie testing framework and integrate it with VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: Command-line instructions for adding the necessary NuGet packages to set up Verify with Xunit in a test project. This includes the Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages via dotnet CLI - Bash\nDESCRIPTION: Installs Fixie and Verify.Fixie NuGet packages into the current test project by running dotnet CLI commands in the terminal. No prerequisites beyond the .NET SDK and a test project are needed. Outputs packages ready for use in the test environment, and must be run from the directory of the project or specify the project path.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Creating a Verify Checks Test with Xunit\nDESCRIPTION: A Xunit test to run Verify's convention checks, ensuring the environment is properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced difference highlighting in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using File Scrubbers with Directory Verification in xUnit v3 - C#\nDESCRIPTION: This code demonstrates extending VerifyDirectory with a fileScrubber parameter, which allows custom transformation (\"scrubbing\") of the contents of files before they are snapshot-verified. The fileScrubber is a function that receives the file path and content, and returns the scrubbed content. Dependencies include Verify.Xunit v3. Inputs are the directory path and a scrubbing function. The output is verification files with the transformed contents. Only files identified as known text files are subject to scrubbing; binary files and unknown extensions are not affected.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-directory.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.VerifyDirectory(\n    \"targetDirectory\",\n    fileScrubber: (path, content) => content.Replace(\"secret\", \"*\")\n);\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase for MSTest Integration\nDESCRIPTION: Example of inheriting from VerifyBase in MSTest to enable Verify functionality without explicitly applying the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Applying UsesVerify Attribute for MSTest Source Generator - Shell\nDESCRIPTION: Displays two mutually exclusive approaches for marking classes/assemblies to be picked up by Verify's MSTest Source Generator: one at the assembly-level and one at the class-level. Enables automatic scaffolding for test augmentation. Add these directly to a test source file as appropriate.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n[assembly: UsesVerify]\n```\n\nLANGUAGE: shell\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent Descending Enumerable Ordering in C#\nDESCRIPTION: Sets up fluent descending ordering for IEnumerable items using a specified key selector.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar person1 = new Person(\"b\");\nvar person2 = new Person(\"a\");\nawait Verify(new List<Person> {person1, person2})\n    .OrderEnumerableByDescending<Person>(_ => _.Name);\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration (C#)\nDESCRIPTION: This C# snippet uses a module initializer (`[ModuleInitializer]`) to automatically call `VerifyDiffPlex.Initialize()` when the assembly loads. This enables the DiffPlex integration for displaying inline text differences in Verify failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verify\nDESCRIPTION: Git attributes configuration for handling text file encodings and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Validating BST Property with Bounded Values in Java\nDESCRIPTION: A recursive helper method that verifies if a tree satisfies the BST property within specific bounds. Each node's value must be within the allowed range, and the range is adjusted for each subtree traversal. This ensures the entire tree maintains proper binary search tree ordering.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.DerivePaths.Tests/Relative/Tests.Test.verified.txt#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nstatic boolean isBSTBounded(Node tree, int min, int max) {\n    if (tree == null) return true;\n    if (tree.value < min || tree.value > max) return false;\n    return isBSTBounded(tree.left, min, tree.value) &&\n           isBSTBounded(tree.right, tree.value, max);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages in C# Project\nDESCRIPTION: NuGet package references to add to the test project for TUnit testing with Verify. This includes TUnit and Verify.TUnit packages with specific versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Excluding \\u002A.received.\\u002A from Git Version Control (Gitignore)\nDESCRIPTION: Adds a pattern to .gitignore to exclude all snapshot files matching *.received.*, which are temporary files generated by Verify during tests. Ensures only verified artifacts are tracked by source control (Git).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline for Test Artifacts\nDESCRIPTION: YAML configuration for handling failed tests and publishing .received files in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/build-server.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Combination Test with Header Overrides\nDESCRIPTION: This text snippet shows the expected verified output file content for the `BuildAddressWithHeaderOverridesTest`. It presents the test results in a tabular format, where the first row contains the explicitly specified custom headers (\"Number\", \"Street\", \"City\", \"Result\"), followed by rows representing each input combination and its corresponding output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Number, Street    , City   : Result,\n       1, Smith St  , Sydney : 1 Smith St, Sydney,\n       1, Smith St  , Chicago: 1 Smith St, Chicago,\n       1, Wallace St, Sydney : 1 Wallace St, Sydney,\n       1, Wallace St, Chicago: 1 Wallace St, Chicago,\n      10, Smith St  , Sydney : 10 Smith St, Sydney,\n      10, Smith St  , Chicago: 10 Smith St, Chicago,\n      10, Wallace St, Sydney : 10 Wallace St, Sydney,\n      10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for NUnit and Verify\nDESCRIPTION: Commands to add required NuGet packages to the test project, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check using TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension. This module initializer sets up DiffPlex to enhance the visualization of differences between expected and actual results in snapshot tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class for Testing in C#\nDESCRIPTION: This code snippet defines a ClassBeingTested with a FindPerson method that returns a Person object with various properties. It's used as the subject for the comparison between traditional and snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/compared-to-assertion.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ClassBeingTested\n{\n    public static Person FindPerson() =>\n        new()\n        {\n            Id = new(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n            Title = Title.Mr,\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children =\n            [\n                \"Sam\",\n                \"Mary\"\n            ],\n            Address = new()\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which helps monitor and handle snapshot comparison in the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with XunitV3, including test SDK, verification libraries, and xunit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify) as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: This C# code shows a sample TUnit test method using Verify to compare a string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var value = \"Some String\";\n    return Verify(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit V3\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check using XUnit V3 test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with MSTest, including test adapters and frameworks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Fixie with Verify\nDESCRIPTION: Demonstrates how to use Verify with the Fixie test framework. The test creates a ClassBeingTested object and verifies its serialized output against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task Test()\n{\n    var person = new ClassBeingTested\n    {\n        Title = \"Mr\",\n        Name = \"John Smith\",\n        Age = 10\n    };\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: This code demonstrates how to run Verify conventions check using XunitV3. It creates a test method that calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally, which provides command-line utilities for managing snapshots outside the IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Lambda Expression for Message Conversion (C#)\nDESCRIPTION: This C# lambda expression defines an anonymous function that takes an input object 'source', accesses its 'Message' property, and passes this property to a method named 'Convert'. It's commonly used in LINQ queries or other functional programming scenarios for data transformation or projection. The effectiveness depends on the existence and signature of the 'Convert' method and the structure of the 'source' object.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ExpressionString.Net.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsource => Convert(source.Message)\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: XML configuration for adding Verify.DiffPlex NuGet package to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Using Different Scrubber Levels in Fixie with Verify .NET (C#)\nDESCRIPTION: Exemplifies configuring and applying scrubbers at various levels (method, class, global) in Fixie with Verify .NET. Useful for sharing or specializing output transformations across tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubberLevelsSample\n{\n    static VerifySettings classSettings = new VerifySettings().ScrubLinesContaining(\"api-key\");\n\n    public async Task MethodLevelScrubbing()\n    {\n        var settings = new VerifySettings().ScrubLinesContaining(\"token\");\n        await Verifier.Verify(someResult, settings);\n    }\n\n    public async Task ClassLevelScrubbing()\n    {\n        await Verifier.Verify(someResult, classSettings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: This snippet shows a sample Expecto test using Verify. It demonstrates how to create a test that finds a person and verifies the result using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Diff Output\nDESCRIPTION: Module initializer to configure Verify.DiffPlex for improved text difference visualization in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for Azure DevOps pipeline that sets up handling of received files when tests fail, ensuring they are available as artifacts for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files on Test Failure\nDESCRIPTION: PowerShell script for an AppVeyor on_failure build step that uploads all *.received.* files as artifacts for easier debugging of failed tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with XunitV3 and Verify\nDESCRIPTION: Example of a test using XunitV3 with Verify integration, demonstrating the basic pattern for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in TUnit Tests (Fluent Approach)\nDESCRIPTION: Demonstrates how to override the text used for parameters in the verified file name using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(\"Foo\")\n    .UseTextForParameters(value => value);\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: Code sample showing how to run VerifyChecks.Run() in an NUnit test to check that all Verify conventions are correctly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Default Path Info Derivation Implementation\nDESCRIPTION: The default implementation for deriving path information for verified snapshots, resolving directory from source file and combining type and method names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_21\n\nLANGUAGE: cs\nCODE:\n```\npublic static PathInfo DeriveDefault(\n    string sourceFile,\n    string projectDirectory,\n    Type type,\n    MethodInfo method) =>\n    new(\n        directory: IoHelpers.ResolveDirectoryFromSourceFile(sourceFile),\n        typeName: type.NameWithParent(),\n        methodName: method.Name);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project (MSBuild, xml)\nDESCRIPTION: Shows how to enable Implicit Usings in a .NET project file, allowing example code with Verify to compile without explicit using statements. The <ImplicitUsings> property must be set to 'enable' in the csproj XML. This reduces boilerplate in test files by referencing core namespaces automatically.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase with MSTest\nDESCRIPTION: Example of inheriting from VerifyBase to simplify verification in MSTest. This approach automatically marks the class as using Verify and provides access to verification methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray monitors snapshot changes and provides acceptance/rejection mechanisms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands for installing the necessary NuGet packages to use Verify with the Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Disabling Rider/Resharper Orphaned Process Detection (.DotSettings)\nDESCRIPTION: Provides the XML configuration line to add to a solution's `.sln.DotSettings` file. This setting prevents Rider/Resharper from prompting the user to terminate diff tool processes launched by Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: Code example showing how to run Verify conventions check within an Xunit test. The test method ensures all Verify conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksXunit\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Overrides for Verified Files in xUnit (Fluent)\nDESCRIPTION: Demonstrates a fluent approach to using custom parameter overrides when ignoring parameters for verified files in xUnit. This method chains the IgnoreParametersForVerified call with a custom parameter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParamsFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified($\"Number{arg}\");\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI for Verify with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration with Verify - CSharp\nDESCRIPTION: This C# snippet demonstrates how to enable the Verify.DiffPlex integration by calling its initializer in a static ModuleInitializer method. Dependency: Verify.DiffPlex package must be installed. Include this code in any source file of the test project for automatic configuration at module load. No input/output parameters; enables inline difference highlighting globally for all Verify assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for XunitV3 in XML\nDESCRIPTION: This code snippet provides the necessary PackageReference elements to add essential packages for XunitV3 testing framework in a .NET test project. These packages include Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify.Fixie using ITestProject and IExecution in C#\nDESCRIPTION: C# implementation of Fixie's `ITestProject` and `IExecution` interfaces. It demonstrates how to assign the target assembly using `VerifierSettings.AssignTargetAssembly` and wrap test execution using `ExecutionState.Set` for proper Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control while keeping verified files included.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase to Inherit MSTest Verification Features (C#)\nDESCRIPTION: Demonstrates creating a test class inheriting from VerifyBase, allowing easy access to Verify methods in MSTest. This pattern centralizes setup and gives all derived tests snapshot capabilities. Include MSTest and Verify.MSTest dependencies; apply the [TestClass] attribute as shown.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic class VerifyBaseUsage :\\n    VerifyBase\\n{\\n    [TestMethod]\\n    public Task Simple() =>\\n        Verify(\\\"The content\\\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required xUnit NuGet Packages for Verify Tests\nDESCRIPTION: The required NuGet package references for using Verify with xUnit, including Microsoft.NET.Test.Sdk, Verify.Xunit, xUnit, and xUnit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the Verify.DiffPlex integration for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Parameter Text Override with Instance Settings\nDESCRIPTION: Demonstrates how to override parameter text in verification file names using instance-based settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-fixie.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task UseTextForParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseTextForParameters(arg);\n    return Verify(arg + \"UseTextForParameters\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Sanitization in C# Verification Tests\nDESCRIPTION: Default behavior for date sanitization in verification tests, where date values are replaced with a counter-based format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nDate\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex plugin for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify Text Files\nDESCRIPTION: Git configuration for text files verified by Verify, ensuring consistent line endings and UTF-8 encoding for *.verified.* files across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Ignoring Obsolete Properties in C# Verify Tests\nDESCRIPTION: This snippet demonstrates how Verify ignores properties marked with ObsoleteAttribute by default. It includes a class with an obsolete property and a test method that verifies the serialization output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/obsolete-members.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass WithObsolete\n{\n    [Obsolete]\n    public string ObsoleteProperty { get; set; }\n\n    public string OtherProperty { get; set; }\n}\n\n[Fact]\npublic Task WithObsoleteProp()\n{\n    var target = new WithObsolete\n    {\n        ObsoleteProperty = \"value1\",\n        OtherProperty = \"value2\"\n    };\n    return Verify(target);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands for adding the necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Disabling Guid Sanitization Globally in C#\nDESCRIPTION: This code demonstrates how to globally disable guid sanitization for all tests in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.DontScrubGuids();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for MSTest and Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: Example NUnit test implementation showing how to use Verify framework to test a class method and verify its output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: Code snippet showing how to implement a test that runs VerifyChecks.Run() to ensure all Verify conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Defining Before and After States in JSON\nDESCRIPTION: This JSON object defines three numbered entries, each containing 'Before' and 'After' states. It demonstrates a simple structure for comparing two states across multiple items.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_BeforeValueAfterNewLine.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  1:\nBefore\nAfter,\n  2:\nBefore\nAfter,\n  3:\nBefore\nAfter\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing .received Artifacts in Azure DevOps - YAML Build Step\nDESCRIPTION: Azure DevOps pipeline step to publish staged Verify '.received.*' files as named build artifacts. Relies on previous steps to conditionally stage files and requires corresponding variable to be set by a failed test. ArtifactName and PathtoPublish parameters control output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\\n  displayName: 'Publish Verify *.received.* files as Artifacts'\\n  name: 'verifypublish'\\n  condition: eq(variables['publishverify'], 'Yes')\\n  inputs:\\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\\n    ArtifactName: 'Verify'\\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Validating Anonymous Type with MSTest and Verify\nDESCRIPTION: This C# snippet demonstrates using an anonymous type to combine `target1` and `target2` for snapshot verification within an MSTest `[TestMethod]` using `Verifier.Verify()`. It requires the MSTest framework and the Verify.MSTest library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/anonymous-types.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task Anon()\n{\n    var target1 = new Target\n    {\n        Property = \"Value1\"\n    };\n    var target2 = new Target\n    {\n        Property = \"Value2\"\n    };\n    return Verifier.Verify(\n        new\n        {\n            target1,\n            target2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: Implements a test method that runs VerifyChecks.Run() to validate that all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required for using Verify with Fixie test framework. Includes Fixie core package and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Code to initialize VerifyDiffPlex for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the DiffPlex integration with Verify using a module initializer\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test Using Fixie\nDESCRIPTION: Example implementation of a basic verification test using Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test in F# with Expecto\nDESCRIPTION: Example F# test that demonstrates how to use Verify with Expecto to create a snapshot test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Scoped Recording with Using Statement (C#)\nDESCRIPTION: Shows how to manage the recording lifecycle using a `using` statement with `Recording.Start()`. This ensures recording is properly started and stopped within the defined scope.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingScoped' snippet\nawait Verify(async () =>\n{\n    using (Recording.Start())\n    {\n        Recording.Add(\"key1\", \"value1\");\n        // Recording stops automatically at the end of the using block\n    }\n    // Data recorded within the scope will be part of the snapshot\n});\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie Test\nDESCRIPTION: C# code to run Verify checks in a Fixie test, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Enumerable Ordering in Verify Tests\nDESCRIPTION: This code demonstrates how to use fluent syntax to order enumerables in a Verify test. It directly chains the OrderEnumerableBy method to the Verify call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task EnumerableOrderFluent() =>\n    Verify(\n            new List<Target>\n            {\n                new(\"a\"),\n                new(\"c\"),\n                new(\"b\")\n            })\n        .OrderEnumerableBy<Target>(_ => _.Value);\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify in Rider - cs\nDESCRIPTION: Provides a full NUnit test class demonstrating the use of Verify for snapshot testing. The test method obtains a sample object and submits it to Verify for result validation. Depends on NUnit and Verify.NUnit packages, and showcases best practices for asynchronous test execution in .NET.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an Xunit test. It creates a test method that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property for Verify MSTest Integration in C#\nDESCRIPTION: Defines a TestContext property in a partial Base class. This property interfaces with VerifyMSTest.Verifier to manage the current test context. It's generated automatically and should not be manually modified.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAssemblyAttributeWithTestClassOnDerivedAndMarkerAttributeOnBase.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Base\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Handling Async Operations with Argon in F#\nDESCRIPTION: This snippet shows how to properly await SettingsTask.ToTask() when using Argon's async operations in F#, due to F#'s lack of support for implicit operator conversion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/fsharp.source.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nlet Test () =\n    async {\n        do! Verifier.Verify(\"Hello F#\")\n                   .UseDirectory(Path.Combine(__SOURCE_DIRECTORY__, \"__snapshots__\"))\n                   .ToTask()\n                   |> Async.AwaitTask\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: Project configuration setting to enable implicit usings, which allows simplified syntax for Verify method calls without explicit qualification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Stack Trace in Exception Verification Using Fluent API in C#\nDESCRIPTION: This snippet shows how to use the fluent API to ignore the stack trace when verifying an exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task TestMethodThatThrowsIgnoreStackTraceFluent() =>\n    Throws(MethodThatThrows)\n        .IgnoreStackTrace();\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with TUnit\nDESCRIPTION: A sample TUnit test class demonstrating how to use Verify to snapshot test the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: UseTextForParameters Instance Example\nDESCRIPTION: Shows how to override parameter text in verified filenames using instance-based approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task UseTextForParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseTextForParameters(arg);\n    return Verify(arg + \"UseTextForParameters\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps Pipeline\nDESCRIPTION: Configures an Azure DevOps `CopyFiles@2` task. It runs conditionally (`condition: eq(variables['publishverify'], 'Yes')`) to copy all `*.received.*` files from the build workspace to the `$(Build.ArtifactStagingDirectory)/Verify` directory, preparing them for publishing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Disabling DateTime Scrubbing with Instance Settings\nDESCRIPTION: Shows how to disable date scrubbing for a specific test instance using VerifySettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar target = new\n{\n    Date = new DateTime(2020, 10, 10, 0, 0, 0, DateTimeKind.Utc)\n};\n\nvar settings = new VerifySettings();\nsettings.DontScrubDateTimes();\n\nreturn Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet packages to Xunit project\nDESCRIPTION: Defines the necessary NuGet package references required for Xunit testing in a .NET project. It includes packages for the test SDK, Verify.Xunit, and the Xunit runner. Make sure to have .NET environment setup for these dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: Example of a simple Verify test using Fixie test framework to verify a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified files, ensuring consistent handling across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: Example of a simple Verify test using MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Inline DateTimes with Instance Settings\nDESCRIPTION: Shows how to configure scrubbing of inline date strings for a specific test instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task ScrubInlineDateTimesInstance()\n{\n    var settings = new VerifySettings();\n    settings.ScrubInlineDateTimes(\"yyyy-MM-dd\");\n    return Verify(\n        \"content 2020-10-20 content\",\n        settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages to a Project\nDESCRIPTION: Adds the necessary NuGet package references to enable Verify testing with TUnit. This includes the TUnit test framework and the Verify.TUnit integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify.Throws Result Output in TXT Format\nDESCRIPTION: This snippet shows the expected output of the Verify.Throws test in a text file format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.MethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit Test Dependencies\nDESCRIPTION: Required NuGet package references for setting up NUnit testing with Verify framework including test SDK, NUnit, and Verify.NUnit packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Example of how to run the Verify conventions check using TUnit. This test verifies that all conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\npublic void VerifyConventions() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Object with Numeric and Boolean Values\nDESCRIPTION: A simple JSON object with a numeric key-value pair (1: 1) and a boolean key-value pair (2: true). This demonstrates basic key-value data structure in JSON format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NotScrubNonStringDictionaryValues.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  1: 1,\n  2: true\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring XML Members during Verification in C#\nDESCRIPTION: This C# snippet shows how to use `VerifySettings` with `IgnoreMember(\"node\")` to exclude the `<node>` element and its content from the comparison when verifying XML with `VerifyXml`. This is useful when parts of the XML are dynamic or irrelevant to the test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task XmlIgnoreMember()\n{\n    var settings = new VerifySettings();\n    settings.IgnoreMember(\"node\");\n    var xml = \"<body><node>text</node></body>\";\n    return VerifyXml(xml, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit\nDESCRIPTION: Example of running Verify convention checks in an XUnit test\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in NUnit with Verify\nDESCRIPTION: Example test that runs Verify's convention checks to ensure all repository conventions are being followed correctly. This helps maintain consistency in verification settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task CheckVerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A basic TUnit test implementation that demonstrates how to use Verify with a hypothetical class being tested, showing the pattern of returning the Task from Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Implementation\nDESCRIPTION: Example of implementing a verification test using Expecto and F#. Shows how to verify a person object using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: A complete example of a Verify test using NUnit. This sample demonstrates the TestCase attribute, parameter handling, and calling the Verify method to compare actual output against stored snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task SampleTest(string arg)\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"1 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person)\n        .UseTextForParameters(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: This snippet demonstrates a sample Verify test using Xunit. It shows how to create a test method, use AutoFixture to generate test data, and verify the results using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Fixture().Create<Person>();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Parameters in TUnit (Instance Method)\nDESCRIPTION: Illustrates how to ignore parameters while passing custom parameters for file naming using an instance method approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.IgnoreParametersForVerified(\n    parameters => new[]\n    {\n        parameters[\"arg1\"],\n        parameters[\"arg2\"]\n    });\nawait Verifier.Verify(\"Foo\", settings);\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and MSTest NuGet Packages via dotnet CLI - Shell\nDESCRIPTION: These commands install the required NuGet packages for integrating Verify with MSTest into a .NET test project. Dependencies include Microsoft.NET.Test.Sdk (test runner), MSTest.TestAdapter and MSTest.TestFramework (test framework), and Verify.MSTest (snapshot testing). Must be run from the project's root directory. Outputs no result except for success/failure of package installation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package MSTest.TestAdapter\\ndotnet add package MSTest.TestFramework\\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in C#\nDESCRIPTION: Example of implementing a test to run Verify framework convention checks using Expecto test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances the text comparison behavior of Verify by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enhance diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the VerifyDiffPlex functionality for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON-like Array with Value Objects for Verification\nDESCRIPTION: This snippet presents an array structure, similar to JSON format, containing three objects. Each object features a 'Value' key associated with a single-character identifier ('a', 'b', or 'c'). Given the file path '/verifytests/verify', this data structure is likely employed as sample input or expected results during verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.EnumerableOrder.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\\ufeff[\n  {\n    Value: a\n  },\n  {\n    Value: b\n  },\n  {\n    Value: c\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: UniqueFor Configuration Sample for XUnit\nDESCRIPTION: Comprehensive example showing various UniqueFor configurations in XUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class UniqueForSample\n{\n    [Fact]\n    public Task Runtime()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntime();\n        return Verify(\"value\", settings);\n    }\n\n    [Fact]\n    public Task RuntimeFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntime();\n\n    [Fact]\n    public Task RuntimeAndVersion()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntimeAndVersion();\n        return Verify(\"value\", settings);\n    }\n\n    [Fact]\n    public Task AssemblyConfiguration()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForAssemblyConfiguration();\n        return Verify(\"value\", settings);\n    }\n\n    [Fact]\n    public Task AssemblyConfigurationFluent() =>\n        Verify(\"value\")\n            .UniqueForAssemblyConfiguration();\n\n    [Fact]\n    public Task Architecture()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForArchitecture();\n        return Verify(\"value\", settings);\n    }\n\n    [Fact]\n    public Task ArchitectureFluent() =>\n        Verify(\"value\")\n            .UniqueForArchitecture();\n\n    [Fact]\n    public Task OSPlatform()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForOSPlatform();\n        return Verify(\"value\", settings);\n    }\n\n    [Fact]\n    public Task OSPlatformFluent() =>\n        Verify(\"value\")\n            .UniqueForOSPlatform();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit\nDESCRIPTION: Test class demonstrating how to run verification checks using TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which allows managing snapshots from the command line, providing additional flexibility for verification workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Pure Method Return Value Check in EditorConfig\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors, which prevents forgetting to await the Verify() call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Artifacts in Azure DevOps\nDESCRIPTION: YAML configuration for publishing Verify *.received.* files as build artifacts in Azure DevOps pipelines when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in CSharp\nDESCRIPTION: The C# code snippet demonstrates how to use a module initializer to set up VerifyDiffPlex, enabling inline diff highlighting in your test environment. This setup is activated during application start-up and is crucial for using Verify with customized diff behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Basic File Verification Placeholder (VerifyTests)\nDESCRIPTION: Placeholder representing the code to perform basic verification of a file's contents using the VerifyTests library. The actual implementation compares a target file against a '.verified' file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-file.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsnippet: VerifyFile\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Git Exclusion Pattern for Verify Test Results\nDESCRIPTION: Pattern to add to .gitignore to exclude temporary *.received.* files generated by Verify tests from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files\nDESCRIPTION: An `EditorConfig` section suggesting settings for text editors when handling Verify's `*.received.*` and `*.verified.*` files (specifically for JSON, TXT, XML). It enforces UTF-8 BOM encoding, `lf` line endings, and prevents trailing newlines to align with Verify's conventions. Users should add other extensions as required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Dictionary Ordering in C#\nDESCRIPTION: Configures Verify to not order dictionaries by key.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nDontScrubGuids();\nVerifySettings.AddExtraSettings(\n    _ =>\n    {\n        _.DontOrderDictionaries();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project\nDESCRIPTION: Setting to enable implicit usings in the project file for cleaner code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to configure a GitHub Actions workflow to upload .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify with Expecto testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Targets in XUnit v3\nDESCRIPTION: Shows the implementation of explicit targets in XUnit v3 verification tests. Demonstrates target handling patterns specific to XUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/explicit-targets.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nExplicitTargetsXunitV3\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: This .gitignore entry excludes all *.received.* files from source control, which is a recommended practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with NUnit in a .NET test project. These packages include the testing SDK, NUnit, NUnit adapter, and Verify's NUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Passing Explicit Targets in MSTest with Verify\nDESCRIPTION: This snippet shows how to pass explicit targets when using Verify with MSTest. It creates an anonymous object and passes a custom Target with a specific extension, data, and name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task WithTargets() =>\n    Verify(\n        target: new\n        {\n            Property = \"Value\"\n        },\n        rawTargets:\n        [\n            new(\n                extension: \"txt\",\n                data: \"Raw target value\",\n                name: \"targetName\")\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Naming Specific Guids (Instance) in C#\nDESCRIPTION: This code demonstrates how to name specific guids for a particular instance in C#. When these guids are found, they will be replaced with the supplied name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar guid = Guid.NewGuid();\nvar settings = new VerifySettings();\nsettings.UseGuidName(\"key\", guid);\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration setting to enable implicit usings in the project file, which simplifies code by removing the need for explicit using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pause and Resume in Verify Tests (C#)\nDESCRIPTION: This code snippet demonstrates how to use Recording.Start(), Pause(), Resume(), and Add() methods in a Verify test. It shows the process of pausing and resuming recording, and how certain additions are included or excluded based on the recording state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task PauseResume()\n{\n    Recording.Start();\n    Recording.Pause();\n    Recording.Add(\"name1\", \"value1\");\n    Recording.Resume();\n    Recording.Add(\"name2\", \"value2\");\n    Recording.Pause();\n    Recording.Add(\"name3\", \"value3\");\n    return Verify();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package for Enhanced Diff Visualization\nDESCRIPTION: Command for adding the Verify.DiffPlex package which provides inline text difference highlighting when verification fails, improving readability for large string comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet packages for Expecto with Verify\nDESCRIPTION: Required NuGet package references for setting up Verify with Expecto in an F# project, including TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: A test that executes VerifyChecks.Run() to validate that the current environment has the correct setup for Verify. This ensures conventions are properly configured before running actual tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task VerifyChecks() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Inline Text Comparison\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verification Status Output\nDESCRIPTION: A status output indicating a successful verification test result.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/TypeConverterTests.ConvertWithCanConvert_Valid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nValid\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Push Received Files as Artifacts on Test Failure\nDESCRIPTION: This YAML snippet configures AppVeyor to push all *.received.* files as artifacts when a build fails. It uses the on_failure build step and the Push-AppveyorArtifact cmdlet to upload the files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example of implementing a test class that inherits from VerifyBase.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text Using Fluent API in Fixie\nDESCRIPTION: Demonstrates how to override the text used for parameters using the fluent API in Fixie and Verify.Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-fixie.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParametersSample\n{\n    [Fact]\n    public Task UseTextForParameters(string arg1, string arg2)\n    {\n        return Verifier.Verify(\"value\")\n            .UseTextForParameters(builder =>\n            {\n                builder.Add(\"argAlias1\", arg1);\n                builder.Add(\"argAlias2\", arg2);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test with TUnit\nDESCRIPTION: Creates a test class that runs the VerifyChecks.Run() method to validate that all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default DateTime Equality Comparison in .NET (C#)\nDESCRIPTION: This defines the default comparer for DateTime, implementing IEqualityComparer<DateTime> to check both the value and the Kind property for equality. Used internally by the verification/counter infrastructure, it ensures comparisons honor both instant data and time zone context. No inputs/outputs except the comparer logic; it depends on System.DateTime and System.Collections.Generic.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nclass DateTimeComparer : IEqualityComparer<DateTime>\n{\n    public bool Equals(DateTime x, DateTime y) =>\n        x == y &&\n        x.Kind == y.Kind;\n\n    public int GetHashCode(DateTime obj) =>\n        obj.GetHashCode() + (int) obj.Kind;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Lines with a Function using Verify .NET in C#\nDESCRIPTION: Shows how to transform or replace matching lines with the output of a provided function using ScrubLinesWithReplace in Verify .NET. In this example, all lines are converted to upper case before verification, demonstrating flexible text manipulation during test output processing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Replace each line with its upper-case version\nsettings.ScrubLinesWithReplace(line => line.ToUpperInvariant());\n```\n\n----------------------------------------\n\nTITLE: Verification Results Output\nDESCRIPTION: Shows the output of verification tests with explicit targets, including both standard and named target results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/explicit-targets.source.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nVerify.MSTest.Tests/Tests.WithTargets.verified.txt\n```\n\nLANGUAGE: txt\nCODE:\n```\nVerify.MSTest.Tests/Tests.WithTargets#targetName.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git attributes to ensure consistent line endings and encoding for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff output in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages\nDESCRIPTION: Required NuGet package references for MSTest testing with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize the VerifyDiffPlex extension, which provides improved text difference visualization in verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for TUnit Verification\nDESCRIPTION: Commands to add required NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Basic NUnit Test Using Verify\nDESCRIPTION: Sample NUnit test that demonstrates how to use Verify for snapshot testing. It captures the output of a method and verifies it against the previously approved snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add necessary NuGet packages to the test project for using Verify with XUnit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with Xunit\nDESCRIPTION: These commands add the necessary NuGet packages to the test project for using Verify with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper formatting of verified and received text files in editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline: Publish Staged Verify Artifacts (YAML)\nDESCRIPTION: Uses PublishBuildArtifacts@1 to upload staged Verify *.received.* files as build artifacts in Azure DevOps, conditional on the publishverify variable. Ties together previous staging steps, specifying artifact path and name. Ensures test output is available for triage when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\\n  displayName: 'Publish Verify *.received.* files as Artifacts'\\n  name: 'verifypublish'\\n  condition: eq(variables['publishverify'], 'Yes')\\n  inputs:\\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\\n    ArtifactName: 'Verify'\\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for MSTest in C#\nDESCRIPTION: This snippet installs necessary NuGet packages to set up MSTest with the Verify library in a .NET test project. Ensure .NET CLI is installed to execute these commands. The command adds Microsoft.NET.Test.Sdk, MSTest adapters, and Verify MSTest for enhanced testing capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: Example of how to run Verify checks in an XUnit v3 test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: C# code to initialize the Verify.DiffPlex extension which provides improved text difference highlighting when verification fails. Uses ModuleInitializer to ensure it's set up before tests run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Serialized Output of Sanitized Guids\nDESCRIPTION: This snippet shows the result of guid sanitization in the verified output file. The guid has been replaced with a numbered placeholder.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\n  DataId: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex using a module initializer. This enables the improved diff highlighting for text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are the temporary files generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: A Fixie test class that runs VerifyChecks to ensure that all conventions are properly followed in the test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks with VerifyChecks in Xunit\nDESCRIPTION: Sample test class that runs VerifyChecks.Run() to verify that all conventions are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase Class with MSTest\nDESCRIPTION: Example showing how to inherit from VerifyBase class, which implicitly marks the test class as using Verify and provides access to the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify testing with Expecto\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Example test class demonstrating basic usage of Verify with NUnit for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality using a module initializer\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention Pattern for Verified Tests in C#\nDESCRIPTION: This code snippet shows the file naming convention pattern used for verified tests. It includes placeholders for various components like directory, test class name, test method name, parameters, and unique identifiers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/override-parameters-text.include.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{Directory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Step for Uploading Received Files on Failure (YAML/PowerShell)\nDESCRIPTION: Configures an AppVeyor CI on_failure build step to push all '*.received.*' files as artifacts using 'Push-AppveyorArtifact'. Ensures any failed snapshots are available for inspection post-build. Place under 'on_failure' in your .appveyor.yml configuration and requires the AppVeyor build worker environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Scoped Recording in C# with Verify\nDESCRIPTION: Shows how to use Recording in a scoped manner using a 'using' statement. It demonstrates that Recording.Add is only effective within the scope.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task RecordingScoped()\n{\n    using (Recording.Start())\n    {\n        Recording.Add(\"name1\", \"value1\");\n    }\n\n    // Recording.Add is ignored here\n    Recording.Add(\"name2\", \"value2\");\n    return Verify();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: An Xunit test that calls VerifyChecks.Run() to validate that the project follows all the conventions required by Verify, including file naming and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Expecto Test with Verify (F#)\nDESCRIPTION: This F# code snippet demonstrates a basic Expecto test using VerifyExpecto. It defines a test case `findPerson` that calls a method `ClassBeingTested.FindPerson()` and uses `Verifier.Verify()` to perform snapshot testing on the result, converting the Verify result to a Task.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown navigation structure showing the hierarchy and available build server options for MSTest CLI projects\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Other](Windows_Other.md) > [Prefer CLI](Windows_Other_Cli.md) > [MSTest](Windows_Other_Cli_MSTest.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Windows_Other_Cli_MSTest_AppVeyor.md)\n * [GitHub Actions](Windows_Other_Cli_MSTest_GitHubActions.md)\n * [Azure DevOps](Windows_Other_Cli_MSTest_AzureDevOps.md)\n * [No build server](Windows_Other_Cli_MSTest_None.md)\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text comparison behavior to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex integration with Verify for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Stopping Recording Without Automatic Verification in C#\nDESCRIPTION: Shows that when Recording is stopped, the results are not automatically verified. The subsequent Verify call only includes the explicitly provided data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task StopNotInResult()\n{\n    Recording.Start();\n    Recording.Add(\"name1\", \"value1\");\n    Recording.Add(\"name2\", \"value2\");\n    Recording.Stop();\n    return Verify(\"other data\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify\nDESCRIPTION: Basic example showing how to write a test that uses Verify with XunitV3 to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Step for Handling Test Failures\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline step that sets a flag when tests fail, used to control publishing of received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: This code snippet demonstrates how to create a test fixture that runs the VerifyChecks.Run() method to ensure all Verify conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: C# code snippet for running Verify checks in an MSTest test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test implementation for running Verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: NuGet package references needed to set up Verify with Expecto testing framework. This snippet shows the essential packages that should be added to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nexpecto-nugets\n```\n\n----------------------------------------\n\nTITLE: Default Comparison Behavior in Verify Tests\nDESCRIPTION: Shows the default comparison behavior used when no custom comparer is registered for a file extension. It performs a binary comparison between received and verified streams.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/comparer.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static async Task<CompareResult> Compare(Stream received, Stream verified, IReadOnlyDictionary<string, object> context)\n{\n    if (await StreamsAreEqual(received, verified))\n    {\n        return CompareResult.Equal;\n    }\n\n    return CompareResult.NotEqual();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Expecto and Verify\nDESCRIPTION: This snippet shows the NuGet package references required for using Expecto with Verify. It includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit and Verify NuGet Packages\nDESCRIPTION: NuGet package references required for setting up NUnit testing with Verify, including test SDK, NUnit framework, and test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration for Verify - C#\nDESCRIPTION: This C# code snippet shows how to initialize the DiffPlex integration for the Verify library in a .NET test project using MSTest. By marking the method with [ModuleInitializer], DiffPlex support is set up automatically when the test assembly is loaded, ensuring all text diffing leverages Verify.DiffPlex. Requires the Verify.DiffPlex NuGet package and C# 9.0 or newer; outputs are enhanced test result diffs with inline highlighting for textual differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex, which enhances text comparison results in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet packages for Verify\nDESCRIPTION: NuGet package references required to set up Verify with MSTest. This includes core packages like Verify.MSTest and Microsoft.NET.Test.Sdk needed for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.6.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the core Verify and Fixie NuGet packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for Verify.Xunit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses the ModuleInitializer attribute to ensure the initialization occurs at the appropriate time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in csproj\nDESCRIPTION: Sets the `<ImplicitUsings>` property to `enable` within the project file (`.csproj`). This .NET SDK feature automatically includes common global using directives, simplifying code examples that rely on it. If disabled, `Verifier.Verify()` must be used instead of `Verify()`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: csproj\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable implicit usings in the project, which simplifies Verify syntax by allowing direct access to Verify methods without fully qualifying them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for Xunit\nDESCRIPTION: Demonstrates running VerifyChecks in an Xunit test to validate that snapshot file conventions are correctly setup, ensuring proper source control integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex in C# (with ModuleInitializer)\nDESCRIPTION: This C# snippet uses the ModuleInitializer attribute to automatically invoke VerifyDiffPlex.Initialize at module load, enabling improved text diffing for verification failures. Requires the Verify.DiffPlex package and C# 9 or newer (for ModuleInitializer feature). No input/output—sets default comparison behavior on assembly load.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in Expecto\nDESCRIPTION: Example implementation of Verify checks in Expecto. This test class creates a test case that runs verification checks against the current assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation for Fixie\nDESCRIPTION: Test class that runs verification checks on the assembly to ensure proper setup and conventions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: This snippet shows how to inherit from VerifyBase in an MSTest class to simplify Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Numeric Keys and Values\nDESCRIPTION: This snippet demonstrates a JSON object structure with integer keys and values. It contains three key-value pairs, each using a numeric key (1, 2, 3) associated with the value 10.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_NoMatch.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  1: 10,\n  2: 10,\n  3: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Types in Verify Output\nDESCRIPTION: Demonstrates how to scrub (replace with a placeholder) members of specific types in serialization results. Shows both direct and fluent configuration approaches for various type scenarios.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task ScrubType()\n{\n    var target = new IgnoreTypeTarget\n    {\n        ToIgnore = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByInterface = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBase = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBaseGeneric = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByType = new()\n        {\n            Property = \"Value\"\n        },\n        ToInclude = new()\n        {\n            Property = \"Value\"\n        },\n        ToIncludeNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreStruct = new(\"Value\"),\n        ToIgnoreStructNullable = new(\"Value\"),\n        ToIncludeStruct = new(\"Value\"),\n        ToIncludeStructNullable = new(\"Value\")\n    };\n    var settings = new VerifySettings();\n    settings.ScrubMembersWithType<ToIgnore>();\n    settings.ScrubMembersWithType<ToIgnoreByType>();\n    settings.ScrubMembersWithType<InterfaceToIgnore>();\n    settings.ScrubMembersWithType<BaseToIgnore>();\n    settings.ScrubMembersWithType(typeof(BaseToIgnoreGeneric<>));\n    settings.ScrubMembersWithType<ToIgnoreStruct>();\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task ScrubTypeFluent()\n{\n    var target = new IgnoreTypeTarget\n    {\n        ToIgnore = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByInterface = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBase = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByBaseGeneric = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreByType = new()\n        {\n            Property = \"Value\"\n        },\n        ToInclude = new()\n        {\n            Property = \"Value\"\n        },\n        ToIncludeNullable = new()\n        {\n            Property = \"Value\"\n        },\n        ToIgnoreStruct = new(\"Value\"),\n        ToIgnoreStructNullable = new(\"Value\"),\n        ToIncludeStruct = new(\"Value\"),\n        ToIncludeStructNullable = new(\"Value\")\n    };\n    return Verify(target)\n        .ScrubMembersWithType<ToIgnore>()\n        .ScrubMembersWithType<ToIgnoreByType>()\n        .ScrubMembersWithType<InterfaceToIgnore>()\n        .ScrubMembersWithType<BaseToIgnore>()\n        .ScrubMembersWithType(typeof(BaseToIgnoreGeneric<>))\n        .ScrubMembersWithType<ToIgnoreStruct>();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with Xunit\nDESCRIPTION: A sample test class that runs VerifyChecks.Run() to ensure all verification conventions are properly configured in the project. This is important for consistent test behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Test Failure\nDESCRIPTION: GitHub Actions workflow step to upload .received files as artifacts when tests fail, enabling easier debugging of snapshot test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: A sample C# test using Verify with Fixie to demonstrate basic usage of the framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convention Check Test for Verify with XUnit v3\nDESCRIPTION: XUnit v3 test class that runs Verify's built-in checks to ensure that all conventions are properly configured in the environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test implementation for running verify checks to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: A code snippet showing how to run Verify convention checks using TUnit. This ensures that all Verify configurations and conventions are properly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify Framework\nDESCRIPTION: A complete example of a MSTest test using the Verify framework. This demonstrates the pattern for writing and verifying tests, including the use of attributes and the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyTests;\n\n[TestClass]\npublic class Tests\n{\n    // By convention, Verify automatically finds and calls methods named `Initialize` in a test class.\n    static void Initialize() =>\n        VerifierSettings.UseMethodName(\"/\");\n\n    [TestMethod]\n    public Task Test()\n    {\n        return Verify(\"sample\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Parameter Types in NUnit Tests\nDESCRIPTION: Shows how to handle complex parameter types in NUnit tests using NameForParameter() to customize parameter text in filenames. Uses ModuleInitializer to register custom parameter naming logic.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class ComplexParametersSample\n{\n    [ModuleInitializer]\n    public static void Initialize() =>\n        VerifierSettings.NameForParameter<ComplexData>(_ => _.Value);\n\n    [TestCaseSource(nameof(GetData))]\n    public Task ComplexTestCaseSource(ComplexData arg) =>\n        Verify(arg);\n\n    public static IEnumerable<object[]> GetData()\n    {\n        yield return\n        [\n            new ComplexData(\"Value1\")\n        ];\n        yield return\n        [\n            new ComplexData(\"Value2\")\n        ];\n    }\n\n    public record ComplexData(string Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie in C#\nDESCRIPTION: A C# code snippet demonstrating how to run Verify checks using Fixie testing framework. It shows the setup of a test method that calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyTests\n{\n    public void CheckConventions() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: A C# code snippet demonstrating how to run Verify checks using Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecks\n{\n    public void Run() =>\n        VerifierSettings.RunChecks();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying All Files in a Directory using XUnit\nDESCRIPTION: Demonstrates how to use VerifyDirectory to snapshot test all files in a specified directory using XUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-directory.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task WithDirectory() =>\n    VerifyDirectory(directoryToVerify);\n```\n\n----------------------------------------\n\nTITLE: Replacing User Name using Scrubber in Verify .NET (C#)\nDESCRIPTION: Shows how to replace the Environment.UserName with a constant ('TheUserName') in test output using the Verify .NET framework. This is typically used to stabilize snapshot tests by removing user-specific information.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Replace UserName with \\'TheUserName\\' in scrubbed output\nsettings.ScrubUserName();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest - C#\nDESCRIPTION: Demonstrates an MSTest test class that performs Verify's conventions check by invoking VerifyChecks.Run(). The class and method are annotated with standard MSTest attributes. Relies on the Verify.MSTest library and should be included in the test suite to ensure project conventions are enforced. The method returns a Task for asynchronous operation and outputs test pass/fail results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\\npublic partial class VerifyChecksTests\\n{\\n    [TestMethod]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: A sample test using Verify with Expecto that demonstrates how to create and run a snapshot test in an F# Expecto project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace MyProject\n\nopen Verify.Expecto\nopen Expecto\n\n[<Tests>]\nlet Tests =\n    testList \"Tests\" [\n        testTask \"MyTest\" {\n            let target = \"value\"\n\n            do! Verifier.Verify(target)\n\n            // Supports processing of custom objects via mutable options\n            // Verifier.VerifyWithOptions(\n            //    target,\n            //    fun options -> options.UseDirectory(\"CustomDirectory\"))\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Implementation with Verify\nDESCRIPTION: Example test class showing how to implement a basic verification test using NUnit and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example implementation of a basic verification test using MSTest and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: Example of a Verify test using MSTest, demonstrating the basic structure and usage of Verify in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Case in C#\nDESCRIPTION: A sample test case using Fixie framework, demonstrating the use of the Verify method to verify output results. This snippet highlights an example usage of a Fixie test class with a sample verification method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Value in a Binary Search Tree in Java\nDESCRIPTION: A recursive method that searches for a specific value in a binary search tree. The method returns true if the value is found, and false otherwise. It leverages the BST property that values less than the current node are in the left subtree and values greater are in the right subtree.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.DerivePaths.Tests/Relative/Tests.Test.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nstatic boolean member(Node tree, int x) {\n    if (tree == null) return false;\n    if (tree.value == x) return true;\n    if (x < tree.value)\n        return member(tree.left, x);\n    else\n        return member(tree.right, x);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks with Fixie\nDESCRIPTION: A Fixie test class that runs verification checks on the assembly to ensure all conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool via CLI\nDESCRIPTION: Installs the 'verify.tool' as a .NET global tool using the command line interface. Verify.Terminal allows managing Verify snapshots directly from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Execution for Verify\nDESCRIPTION: Provides an example implementation of Fixie's `ITestProject` and `IExecution` interfaces required for Verify integration. The `Configure` method assigns the target assembly to Verify using `VerifierSettings.AssignTargetAssembly`. The `Run` method wraps test executions (both parameterless and parameterized) using `ExecutionState.Set` to correctly manage Verify's context for each test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test implementation using Verify with MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example XUnit test using Verify framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A basic example of how to use Verify in an Xunit test to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Fixie\nDESCRIPTION: A Fixie test class that runs Verify's convention checks to ensure all recommended practices are being followed in the project. This helps maintain consistency in verification practices.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Verification Test\nDESCRIPTION: Example test class showing basic usage of Verify with NUnit to verify test outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify in C#\nDESCRIPTION: A sample NUnit test using Verify. This snippet demonstrates how to structure and write a test using Verify with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline: Flag Failed Test Step for Publish (YAML)\nDESCRIPTION: Adds a CmdLine@2 build step to Azure DevOps pipelines to set the publishverify variable if any test step fails, enabling conditional upload of Verify *.received.* files. Should be added directly after test steps. Uses a failed() condition and sets a VSO build variable for later steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\\n  condition: failed()\\n  inputs:\\n    script: 'echo \\\"##vso[task.setvariable variable=publishverify]Yes\\\"'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality for enhanced diff comparison\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Displaying Serialization Result for Custom Exception Property in C#\nDESCRIPTION: Shows the result of serialization after configuring Verify to ignore members that throw specific exceptions. This snippet demonstrates the output format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/members-throw.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Property: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Code snippet demonstrating how to run Verify checks within an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit and Verify Related NuGet Packages via dotnet CLI - Shell\nDESCRIPTION: This snippet shows a sequence of dotnet CLI commands for adding test and verification packages (Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit) to a .NET test project. These packages are required for integrating NUnit-based tests with the Verify snapshot framework. Run these commands in the root directory of your test project to ensure all prerequisites are installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project file. This package enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: MSTest implementation for running Verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Rider/ReSharper Orphaned Process Detection in .sln.DotSettings\nDESCRIPTION: Adds an XML entry to the solution's `.sln.DotSettings` file to configure Rider/ReSharper's behavior regarding processes spawned during unit tests. Setting `SpawnedProcessesResponse` to `DoNothing` prevents prompts to terminate diff tools launched by Verify after test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Disabling GUID Sanitization - Global Setting\nDESCRIPTION: Shows how to globally disable GUID sanitization across all tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.DontScrubGuids();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced difference visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Implementation in Expecto\nDESCRIPTION: C# code demonstrating how to implement verification checks using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Gitattributes Configuration for Verify\nDESCRIPTION: Configuration for .gitattributes to ensure verified files use consistent line endings (LF) and UTF-8 encoding, which is important for reliable snapshot testing across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Manually Stopped Recording (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file when manually verifying data obtained via `Recording.Stop()` from the `RecordingStop` snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.Stop.verified.txt\n// Note: The structure might vary slightly based on Verify's output for dictionaries\n{\n  key1: value1\n}\n```\n\n----------------------------------------\n\nTITLE: Using UseParameters() with Fixie for Test Parameterization\nDESCRIPTION: Demonstrates how to use UseParameters() to control the parameters used in naming test files. It shows both full and subset parameter usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-fixie.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParametersSample\n{\n    [Fact]\n    public Task UseParameters(string arg1, string arg2, string arg3)\n    {\n        return Verifier.Verify(\"value\")\n            .UseParameters(arg1, arg2, arg3);\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParametersSample\n{\n    [Fact]\n    public Task UseParametersSubSet(string arg1, string arg2, string arg3)\n    {\n        return Verifier.Verify(\"value\")\n            .UseParameters(\"Value1\", \"Value2\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in JetBrains Products\nDESCRIPTION: Configuration to add to the solution settings file to prevent Rider/ReSharper from prompting about orphaned processes spawned by tests. This is necessary because Verify launches diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: markup\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: Test class implementing a method to run verification checks that ensure all conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase with MSTest\nDESCRIPTION: Shows how to inherit from VerifyBase to enable Verify functionality in an MSTest class without explicitly using the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Example of how to run Verify's conventions check in a TUnit test. This ensures that all verification conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required MSTest NuGet Packages\nDESCRIPTION: NuGet package references required for setting up MSTest with Verify framework including test SDK, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Example test class demonstrating how to use Verify with NUnit for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing .received Files as Artifacts on AppVeyor Build Failure\nDESCRIPTION: This YAML configuration snippet sets up an on_failure build step in AppVeyor. It uses PowerShell to find all .received files recursively and push them as artifacts, which can be accessed for debugging failed tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Expecto in C#\nDESCRIPTION: Demonstrates how to create an Expecto test case in C# using `Runner.TestCase` to execute `VerifyChecks.Run()`. This checks if the project adheres to Verify's conventions regarding source control ignores and file encodings, using the assembly containing the test class as input.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie Tests\nDESCRIPTION: C# code to run Verify checks in a Fixie test class, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling - .gitattributes for Verified Files - plaintext\nDESCRIPTION: Specifies Git attributes for maintaining correct encoding and line endings of *.verified.* files. Place these lines in your project's .gitattributes file to enforce UTF-8 with BOM, LF newlines, and proper working tree encoding for verified test outputs. Adjust patterns or file extensions as required based on your verified artifact types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Verifying Directory Contents with Additional Info in xUnit v3 - C#\nDESCRIPTION: This snippet shows how to pass extra contextual information via the info parameter when verifying a directory. The info object is serialized as JSON and included in the verification output, which helps in debugging and reporting. Requires the Verify.Xunit v3 dependency. Inputs include the directory path and any object for the info parameter. The output consists of verification files augmented with the provided context. This feature is particularly useful for parameterized or data-driven tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-directory.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.VerifyDirectory(\n    \"targetDirectory\",\n    info: new { description = \"Sample Directory\" });\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test Result in Plain Text\nDESCRIPTION: This code snippet shows the resulting snapshot file (SnapshotTest.verified.txt) produced by the snapshot test. It contains a JSON-like representation of the Person object, which is used for future comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/compared-to-assertion.md#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration (C#)\nDESCRIPTION: This C# code snippet shows how to enable the Verify.DiffPlex integration. By calling `VerifyDiffPlex.Initialize()` within a method marked with `[ModuleInitializer]`, the enhanced diffing behavior is automatically configured when the assembly loads.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test with Verify\nDESCRIPTION: A complete sample test using Verify with XunitV3, showing how to structure a test method that verifies a target object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [PFact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: This code demonstrates how to run Verify Checks using XUnit v3. It creates a fact test that calls VerifyChecks.Run() to check conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex for Improved Diff Visualization\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text comparison behavior to highlight differences inline, making it easier to understand the changes between received and verified snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with XUnit V3\nDESCRIPTION: Commands to add required NuGet packages for using Verify with XUnit V3 in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check in TUnit\nDESCRIPTION: Test class that runs VerifyChecks.Run() to ensure all Verify conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.XunitV3 NuGet Packages in csproj\nDESCRIPTION: Specifies the required `Microsoft.NET.Test.Sdk`, `Verify.XunitV3`, `xunit.runner.visualstudio`, and `xunit.v3` packages for a .NET test project using Verify with Xunit version 3. These packages provide the necessary testing infrastructure and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters in NUnit Verify Tests (Fluent)\nDESCRIPTION: Shows how to hash parameters for the verified filename in NUnit Verify tests using the fluent approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task HashParameters(string arg1, string arg2)\n{\n    return Verifier.Verify(\"value\")\n        .UseParameters(\n            (\"arg1\", arg1.Hash()),\n            (\"arg2\", arg2.Hash()));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit v3 NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for setting up Verify tests with XUnit v3. It includes Verify.Xunit and xunit.runner.visualstudio packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex for Diff Viewing\nDESCRIPTION: This C# code snippet initializes Verify.DiffPlex, which enhances text comparison by highlighting differences inline within text.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files when editing them in an IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up VerifyChecks with TUnit\nDESCRIPTION: A TUnit test that runs the VerifyChecks.Run() method to validate that all Verify conventions are properly configured in the project. This ensures proper setup of file conventions and environment configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required XunitV3 NuGet Packages for Verify Testing\nDESCRIPTION: The essential NuGet package references needed to set up Verify with XunitV3. Includes the core Verify.XunitV3 package, Microsoft.NET.Test.Sdk, xunit runner, and xunit v3 core package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Pushing .received Files as Artifacts on AppVeyor Failure\nDESCRIPTION: This PowerShell script is used in an AppVeyor build configuration to push all .received files as artifacts when a build fails. It uses the Push-AppveyorArtifact cmdlet to upload the files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit V3 NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit V3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Declaring UsesVerify Attribute for All Test Classes - Assembly Attribute C#\nDESCRIPTION: Code for opting in all test classes in an assembly to process by the Verify source generator. Add this at the assembly-level in your test project. Requires source generator support and Verify.MSTest NuGet package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[assembly: UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: A TUnit test method to run Verify's convention checks, ensuring that all necessary configurations are correctly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Expecto with Verify\nDESCRIPTION: Shows the integration of Verify with Expecto testing framework. The test creates a ClassBeingTested instance and verifies it by comparing with a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[<Test>]\nlet Test() =\n    task {\n        let person = ClassBeingTested()\n        person.Title <- \"Mr\"\n        person.Name <- \"John Smith\"\n        person.Age <- 10\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: TUnit Verify Checks Implementation\nDESCRIPTION: Implementation of convention checks using VerifyChecks.Run() in a TUnit test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core Fixie test framework and Verify.Fixie integration packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test implementation showing how to use Verify with TUnit for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with TUnit\nDESCRIPTION: A basic TUnit test that demonstrates how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Received Files on GitHub Actions Failure\nDESCRIPTION: A GitHub Actions workflow step configuration in YAML. It uses the `actions/upload-artifact@v4` action to upload all `*.received.*` files as build artifacts, but only executes `if` the workflow `failure()` occurs. This facilitates debugging Verify test failures in CI by providing access to the actual generated (received) files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Scrubbing Globally\nDESCRIPTION: Setting a global configuration to disable date sanitization for all verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nDontScrubDateTimesGlobal\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Ignoring Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while ensuring verified files are committed. This is a required convention when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify, including setting up the target assembly and wrapping test executions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Verified Text Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files, setting line endings to LF and encoding to UTF-8. These settings should be added to .gitattributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension using a module initializer. This improves the readability of test failures by showing inline differences rather than full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A C# code snippet showing a sample test using Fixie and Verify to test a Person class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            },\n            Children = new List<string>{\"Sam\", \"Mary\"},\n            Guid = Guid.NewGuid(),\n        };\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in Xunit\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check in an Xunit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example NUnit test using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Type to String Mapping in C#\nDESCRIPTION: Example showing how to add custom types to the TreatAsString mapping for direct string conversion when passed to Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/type-to-string-mapping.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.TreatAsString<ClassWithToString>(\n    (target, settings) => target.Property);\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package using dotnet CLI\nDESCRIPTION: Adds the `Verify.DiffPlex` NuGet package to the current .NET project using the `dotnet add package` command. This optional package integrates the DiffPlex library to provide enhanced inline text difference highlighting within the exception message when a Verify test fails due to text mismatches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify Output Files\nDESCRIPTION: Configuration for excluding *.received.* files from source control. These files are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Verify Test Results\nDESCRIPTION: This YAML snippet shows how to configure GitHub Actions to upload .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in XunitV3 Tests - C#\nDESCRIPTION: Defines a simple XunitV3 test class that runs Verify's convention checks within a test context. The VerifyChecks.Run method validates the setup and conventions as required by the framework. Uses Fact for test declaration and is compatible with .NET async testing. Dependencies: Xunit, Verify.XunitV3. No parameters; any misconfiguration/failure is reported as a test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Xunit and Verify\nDESCRIPTION: This XML snippet shows the NuGet packages that need to be added to the test project for using Verify with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n```\n\n----------------------------------------\n\nTITLE: Using Subset of Parameters in MSTest\nDESCRIPTION: Demonstrates how to use a subset of parameters when naming files in MSTest. This example shows how to use UseParameters() to specify which parameters should be included in the file name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"Value1\", \"Value2\", \"Value3\")]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    var somethingToVerify = $\"{arg1} {arg2} {arg3} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required for using Verify with Fixie test runner. Includes core Fixie package and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances the text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: UniqueFor Configuration Sample for NUnit\nDESCRIPTION: Comprehensive example showing various UniqueFor configurations in NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class UniqueForSample\n{\n    [Test]\n    public Task Runtime()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntime();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task RuntimeFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntime();\n\n    [Test]\n    public Task AssemblyConfiguration()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForAssemblyConfiguration();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task AssemblyConfigurationFluent() =>\n        Verify(\"value\")\n            .UniqueForAssemblyConfiguration();\n\n    [Test]\n    public Task RuntimeAndVersion()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntimeAndVersion();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task RuntimeAndVersionFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntimeAndVersion();\n\n    [Test]\n    public Task Architecture()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForArchitecture();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task ArchitectureFluent() =>\n        Verify(\"value\")\n            .UniqueForArchitecture();\n\n    [Test]\n    public Task OSPlatform()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForOSPlatform();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task OSPlatformFluent() =>\n        Verify(\"value\")\n            .UniqueForOSPlatform();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Provides an example of a Fixie test using Verify to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Sample implementation showing how to inherit from VerifyBase class in MSTest to enable verification functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output for failed verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Initialize Verify.DiffPlex to use enhanced diff output for text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Timestamp with Timezone Format\nDESCRIPTION: Example of a timestamp format showing date, time with milliseconds precision, and timezone offset. Uses the format YYYY-MM-DD HH:MM:SS.mmm Z.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.DateTimeOffset.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2000-01-01 00:01:01.001 +0\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git configuration for how verified text files should be handled by source control, ensuring consistent line endings and encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration for enabling implicit usings in the project file, which allows direct use of Verify() method instead of Verifier.Verify() in test code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result for Ignoring Members (Text)\nDESCRIPTION: Shows the expected output of a Verify test when ignoring specific members using expressions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_24\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Include: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for NUnit and Verify\nDESCRIPTION: Commands to add required NuGet packages for NUnit testing and Verify to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: This snippet demonstrates how to run Verify checks in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test with XUnit V3\nDESCRIPTION: Example test class showing how to implement convention checks using VerifyChecks.Run() with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Descending Enumerable Ordering in Verify Tests\nDESCRIPTION: This snippet shows how to set up global descending order for IEnumerable items in Verify tests. It uses a module initializer to configure OrderEnumerableByDescending for a specific type.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void OrderEnumerableByDescendingInitializer() =>\n    VerifierSettings.OrderEnumerableByDescending<TargetForGlobalDescending>(_ => _.Value);\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This snippet shows a basic Xunit test that uses Verify to compare the result of a method call against a verified file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Verify Checks with NUnit\nDESCRIPTION: Example of creating a test that runs VerifyChecks.Run() to validate that all the conventions required by Verify are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Fixie testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit V3\nDESCRIPTION: Test class implementation for running Verify convention checks using XUnit V3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File for Verify\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows direct usage of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet initializes Verify.DiffPlex, which enhances the text comparison behavior of Verify by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: Code snippet demonstrating how to run Verify conventions check in an MSTest test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: Test fixture demonstrating how to run convention checks using VerifyChecks.Run() in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in MSTest\nDESCRIPTION: Code snippet demonstrating how to run verification checks in an MSTest project to ensure all conventions are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A sample test using Verify with Fixie testing framework. The test verifies a Target object with some properties, demonstrating the basic pattern for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public async Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        await Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Global Event Handlers Configuration in C#\nDESCRIPTION: Shows how to configure global event handlers for verification events.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init()\n    {\n        VerifierSettings.OnVerify(\n            before: () => Debug.WriteLine(\"before\"),\n            after: () => Debug.WriteLine(\"after\"));\n        VerifierSettings.OnFirstVerify(\n            (receivedFile, receivedText, autoVerify) =>\n            {\n                Debug.WriteLine(receivedFile);\n                Debug.WriteLine(receivedText);\n                return Task.CompletedTask;\n            });\n        VerifierSettings.OnVerifyMismatch(\n            (filePair, message, autoVerify) =>\n            {\n                Debug.WriteLine(filePair.ReceivedPath);\n                Debug.WriteLine(filePair.VerifiedPath);\n                Debug.WriteLine(message);\n                return Task.CompletedTask;\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: Example test method that runs VerifyChecks.Run() to verify that all conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for DiffPlex Integration\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Inline Diffs in Verify - C#\nDESCRIPTION: Illustrates how to enable the Verify.DiffPlex extension by initializing it within the test assembly. This C# snippet leverages a module initializer to automatically invoke 'VerifyDiffPlex.Initialize()', ensuring the custom diff behavior is enabled for all verification operations. Requires adding Verify.DiffPlex NuGet package and referencing the 'VerifyDiffPlex' static class. Outputs enhanced, inline diff results on snapshot mismatches. Must be referenced at module load time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of how to create a test class that inherits from VerifyBase, which automatically provides the Verify method and required attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Archive .received Files on Test Failure\nDESCRIPTION: PowerShell command for AppVeyor on_failure step to upload all .received.* files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: DateTime Formatting Implementation in C#\nDESCRIPTION: Implementation of the DateFormatter class that handles converting DateTime objects to strings with different formats based on the time components.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/type-to-string-mapping.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nstatic partial class DateFormatter\n{\n    public static string ToJsonString(DateTime value)\n    {\n        var result = GetJsonDatePart(value);\n\n        if (value.Kind != DateTimeKind.Unspecified)\n        {\n            result += $\" {value.Kind}\";\n        }\n\n        return result;\n    }\n\n    static string GetJsonDatePart(DateTime value)\n    {\n        if (value.TimeOfDay == TimeSpan.Zero)\n        {\n            return value.ToString(\"yyyy-MM-dd\", Culture.InvariantCulture);\n        }\n\n        if (value is {Second: 0, Millisecond: 0})\n        {\n            return value.ToString(\"yyyy-MM-dd HH:mm\", Culture.InvariantCulture);\n        }\n\n        if (value.Millisecond == 0)\n        {\n            return value.ToString(\"yyyy-MM-dd HH:mm:ss\", Culture.InvariantCulture);\n        }\n\n        return value.ToString(\"yyyy-MM-dd HH:mm:ss.FFFFFFF\", Culture.InvariantCulture);\n    }\n\n    public static string ToParameterString(DateTime value)\n    {\n        var result = GetParameterDatePart(value);\n\n        if (value.Kind != DateTimeKind.Unspecified)\n        {\n            result += value.Kind;\n        }\n\n        return result;\n    }\n\n    static string GetParameterDatePart(DateTime value)\n    {\n        if (value.TimeOfDay == TimeSpan.Zero)\n        {\n            return value.ToString(\"yyyy-MM-dd\", Culture.InvariantCulture);\n        }\n\n        if (value is {Second: 0, Millisecond: 0})\n        {\n            return value.ToString(\"yyyy-MM-ddTHH-mm\", Culture.InvariantCulture);\n        }\n\n        if (value.Millisecond == 0)\n        {\n            return value.ToString(\"yyyy-MM-ddTHH-mm-ss\", Culture.InvariantCulture);\n        }\n\n        return value.ToString(\"yyyy-MM-ddTHH-mm-ss.FFFFFFF\", Culture.InvariantCulture);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File (csproj)\nDESCRIPTION: Shows how to enable the Implicit Usings feature in a .NET project file (.csproj) by setting the `<ImplicitUsings>` property to `enable`. This simplifies C# code examples by automatically including common namespaces, preventing compilation errors if explicit using directives are omitted.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified file types to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent handling of verified text files. This sets end-of-line behavior to line-feed and UTF-8 encoding for various verified file types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in ReSharper\nDESCRIPTION: Configuration to disable ReSharper's orphaned process detection, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and TUnit NuGet Packages - .NET .csproj XML\nDESCRIPTION: This example shows how to include the necessary NuGet packages, TUnit and Verify.TUnit, in a .NET project using the .csproj file format. Adding these PackageReference elements ensures that TUnit is available for running tests and Verify.TUnit is available for performing snapshot verification within those tests. Ensure the correct package versions are specified, and these references are added to the test project's .csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"TUnit\\\" Version=\\\"0.19.86\\\" />\\n<PackageReference Include=\\\"Verify.TUnit\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Stream Verification Output\nDESCRIPTION: Shows the verification output format when using JsonAppender with streams\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/jsonappender.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n{\n  target: null,\n  theData: theValue\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: Azure DevOps task to copy all .received files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Appending String Content as File in Verify Test\nDESCRIPTION: Shows how to append additional text content as a separate verification file. This creates two verified files - one containing the original content and another containing the appended string content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/append-file.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task AppendContentAsFile() =>\n    Verify(\"Foo\")\n        .AppendContentAsFile(\"extra content\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Diff Highlighting with Verify.DiffPlex - C#\nDESCRIPTION: This C# code snippet uses a ModuleInitializer to configure text diffing behavior for Verify by invoking VerifyDiffPlex.Initialize() before any tests run in the process. It requires a reference to the Verify.DiffPlex NuGet package. No parameters are needed; placing this in a module triggers initialization application-wide, allowing all verification failures to show inline text highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for testing with Verify and Xunit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files. These settings configure UTF-8 with BOM, line-feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Uploading Failed Test Artifacts in GitHub Actions YAML\nDESCRIPTION: This YAML snippet defines a step in a GitHub Actions workflow that uploads *.received.* files as artifacts when the build fails. It uses the actions/upload-artifact@v4 action and is conditionally executed using the failure() function.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/build-server-githubactions.include.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions with VerifyChecks in xUnit\nDESCRIPTION: Example of how to run convention checks in a test by calling VerifyChecks.Run() within an xUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() => \n    VerifyChecks.Run();\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Diff Tool in C#\nDESCRIPTION: Shows how to disable the diff tool functionality in verification settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.DisableDiff();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project File\nDESCRIPTION: Shows the XML element `<ImplicitUsings>enable</ImplicitUsings>` required in a `.csproj` file to enable the Implicit Usings feature in .NET. This simplifies code by automatically including common namespaces and is recommended for Verify examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Verify Checks in MSTest\nDESCRIPTION: Implementation of convention checks for Verify in MSTest test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ReSharper Orphaned Process Detection in DotSettings\nDESCRIPTION: Configuration to add to the solution DotSettings file to prevent ReSharper from showing dialogs about processes spawned by Verify's diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which provides command-line utilities for managing verification snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Disabling Dictionary Ordering in Verify Tests\nDESCRIPTION: This code shows how to disable dictionary ordering in a Verify test. It creates a dictionary with entries in a specific order and uses the DontSortDictionaries() method to preserve that order during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task DontOrderDictionaries()\n{\n    var dictionary = new Dictionary<string, string>\n    {\n        {\n            \"Entry_1\", \"1234\"\n        },\n        {\n            \"Entry_3\", \"1234\"\n        },\n        {\n            \"Entry_2\", \"5678\"\n        }\n    };\n\n    return Verify(dictionary)\n        .DontSortDictionaries();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Packages for Verify with NUnit in Rider\nDESCRIPTION: Essential NuGet packages needed to use Verify with NUnit testing framework. These packages provide the core functionality for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: C# code demonstrating how to use the VerifyBase class in MSTest to simplify Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Value Checking\nDESCRIPTION: EditorConfig setting to treat unused return values of methods marked with PureAttribute as errors. Helps catch missing await calls on Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Basic MSTest Sample with Verify\nDESCRIPTION: A simple MSTest example showing how to use Verify to test a method that returns an object requiring verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with XunitV3. This includes test SDK, Verify.XunitV3, xunit.v3 (prerelease), and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify.Expecto\nDESCRIPTION: Required NuGet package references for a project using Verify with Expecto testing framework in F#. Includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core update, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters in Verified Filenames (Fluent Approach)\nDESCRIPTION: Demonstrates using IgnoreParametersForVerified() with the fluent syntax to create a single verified file for parameterized tests in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"One\")]\n[TestCase(\"Two\")]\npublic Task IgnoreParametersForVerifiedFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified();\n```\n\n----------------------------------------\n\nTITLE: Generating TestContext Property for Verify MSTest Integration in C#\nDESCRIPTION: This code snippet defines a partial class 'Base' with a TestContext property. It's designed to integrate Verify with MSTest, providing access to the current test context and managing its lifecycle.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAssemblyAttributeAndTestClassInheritance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//-----------------------------------------------------\n// This code was generated by a tool.\n//\n// Changes to this file may cause incorrect behavior\n// and will be lost when the code is regenerated.\n// <auto-generated />\n//-----------------------------------------------------\n\npartial class Base\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Commands to add required NuGet packages for NUnit testing with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify, including target assembly assignment and test execution wrapping.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in MSTest\nDESCRIPTION: Sample test class showing how to implement verification checks using MSTest attributes and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Alphabetical Property Sorting in C#\nDESCRIPTION: This snippet demonstrates how to configure Verify to sort properties alphabetically using a module initializer. This setting ignores the order in which properties are defined when using reflection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.SortPropertiesAlphabetically();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Globally Using dotnet CLI - Shell\nDESCRIPTION: Installs the DiffEngineTray dotnet global tool, which provides a Windows tray application for managing snapshot differences interactively. Run in a terminal or PowerShell for any user profile.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Parameter Types in NUnit Verify Tests\nDESCRIPTION: Shows how to handle unknown parameter types in NUnit Verify tests by providing a custom string conversion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.NameForParameter<Unknown>(_ => _.ToString());\n\n[Test]\npublic Task ParametersWithUnknownType(Unknown unknown)\n{\n    return Verify(\"value\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps Pipeline\nDESCRIPTION: YAML task that sets a pipeline variable when tests fail, enabling conditional execution of subsequent steps. Uses the failed() condition to execute only when the test runner step fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Provides an example of a simple NUnit test that uses Verify to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Xunit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages with dotnet CLI\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension, which enhances the text comparison output with inline difference highlighting for better readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings for Verified Files\nDESCRIPTION: A `.gitattributes` configuration to ensure consistent line endings (`lf`) and encoding (`UTF-8`) for text-based `*.verified.*` files (e.g., `.txt`, `.xml`, `.json`) in the Git repository. This helps maintain consistency across different development environments and aligns with Verify's text file settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie Test\nDESCRIPTION: C# code to run Verify checks within a Fixie test class, ensuring all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: NuGet package references that need to be added to the test project to use Verify with MSTest. Includes Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references needed to use Verify with Fixie testing framework. These packages provide the core functionality for snapshot testing with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"3.*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto, including YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters in TUnit Tests (Instance)\nDESCRIPTION: Shows how to hash parameters for file naming using HashParameters() with an instance of VerifySettings in TUnit tests. This is useful for large parameters that could exceed OS filename length limits.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\")]\n[Arguments(\"Value2\")]\npublic Task HashParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.HashParameters();\n    return Verify(arg, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Enumerable Ordering in Verify Tests\nDESCRIPTION: This code demonstrates how to set up global ordering for IEnumerable items in Verify tests. It uses a module initializer to configure OrderEnumerableBy for a specific type.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void OrderEnumerableByInitializer() =>\n    VerifierSettings.OrderEnumerableBy<TargetForGlobal>(_ => _.Value);\n```\n\n----------------------------------------\n\nTITLE: Setting Azure DevOps Variable on Test Failure for Verify Artifacts\nDESCRIPTION: Uses the `CmdLine@2` task in an Azure DevOps pipeline YAML file. This task runs conditionally (`condition: failed()`) only if a previous step (like the test runner) fails. It sets a pipeline variable `publishverify` to `Yes` using a VSO command, enabling subsequent steps to publish Verify artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output for failed verifications by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Test Implementation\nDESCRIPTION: C# implementation of verification checks using XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: This code demonstrates how to run Verify checks using Expecto. It creates a test that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet verifyConventions =\n    test \"Verify Conventions\" {\n        VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks with Expecto\nDESCRIPTION: Test implementation for running verification checks using Expecto test framework. The test ensures all verification conventions are followed in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify NuGet Packages to Test Project\nDESCRIPTION: Required NuGet package references for using Verify with TUnit testing framework. Includes both the TUnit test framework and the Verify.TUnit integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in TUnit\nDESCRIPTION: Example of a TUnit test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Verify Test with MSTest in C#\nDESCRIPTION: Demonstrates a simple MSTest test class (`Sample`) containing a test method (`Test`) that uses Verify. It calls a method (`ClassBeingTested.FindPerson()`) and passes the result to `Verify()` to perform snapshot testing. Requires the test class to be marked for Verify (e.g., `[UsesVerify]` or inherit `VerifyBase`).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Received Files on Failure in GitHub Actions (YAML)\nDESCRIPTION: This YAML snippet defines a step for a GitHub Actions workflow. It uses the `actions/upload-artifact@v4` action to upload all files matching the pattern `**/*.received.*` as build artifacts named `verify-test-results`. The `if: failure()` condition ensures this step only runs if a previous step in the job has failed, facilitating debugging of snapshot test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks with Expecto\nDESCRIPTION: Example of running verification convention checks using Expecto test framework. This helps ensure all verification practices are consistent across the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for MSTest with Verify\nDESCRIPTION: Specifies the NuGet package references needed to use Verify with MSTest, including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling AutoVerify in Fluent Style for Verify in C#\nDESCRIPTION: Demonstrates the fluent-style configuration of AutoVerify for a verification call using the Verify library in C#. This approach allows chaining AutoVerify as part of the method call to increase readability in test code. Useful for single-use scenarios or fine-grained configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(target)\n    .AutoVerify();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: Adds the optional 'Verify.DiffPlex' NuGet package to the current .NET project using the command line interface. This package provides enhanced text comparison capabilities, showing inline differences instead of separate received/verified blocks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Inline Diff Highlighting - C#\nDESCRIPTION: This C# code snippet shows how to enable DiffPlex-based diff functionality in Verify by calling VerifyDiffPlex.Initialize() inside a ModuleInitializer. This ensures that the inline diff highlighting behavior is active for all snapshot tests in the test assembly. No additional parameters are required, but the Verify.DiffPlex NuGet package must be installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required to use Verify with Fixie test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Test class demonstrating how to run verification checks using Verify.Xunit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File (XML)\nDESCRIPTION: Specifies the required project property setting in the .csproj file to enable Implicit Usings, ensuring the included code snippets will compile as shown. No external dependencies are needed, but editing the .csproj file is required. This setting is important so that common namespaces are automatically available throughout the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline Highlighting via ModuleInitializer (C#)\nDESCRIPTION: Displays a C# ModuleInitializer that configures Verify to use DiffPlex for enhanced inline diff outputs in test failures. This static method should be present in test projects that want improved snapshot comparison, and VerifyDiffPlex.Initialize() should be called exactly once per process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the required Verify and Fixie NuGet packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Test Results on Failure\nDESCRIPTION: GitHub Actions workflow step to upload *.received.* files as artifacts when tests fail, facilitating debugging of verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: Test class implementation for running verification checks using TUnit framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Testing with Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify testing with Xunit. These packages include the test SDK, Verify.Xunit, Xunit, and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required MSTest NuGet Packages for Verify\nDESCRIPTION: NuGet package references required for using Verify with MSTest, including the testing SDK, MSTest framework, and Verify.MSTest package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and XunitV3 NuGet Packages in .NET Project (csproj)\nDESCRIPTION: Demonstrates how to include the required NuGet packages for Verify.XunitV3-based tests in a .NET test project. Dependencies include Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3, with specific version numbers. This setup ensures that the Verify API and XunitV3 test runner are available for test execution. Inputs are PackageReference elements in a .csproj file; output is properly restored packages during build. Limitations: Versions should be updated as needed based on Verify and XunitV3 updates.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Microsoft.NET.Test.Sdk\\\" Version=\\\"17.13.0\\\" />\\n<PackageReference Include=\\\"Verify.XunitV3\\\" Version=\\\"29.2.0\\\" />\\n<PackageReference Include=\\\"xunit.runner.visualstudio\\\" Version=\\\"3.0.2\\\" PrivateAssets=\\\"all\\\" />\\n<PackageReference Include=\\\"xunit.v3\\\" Version=\\\"2.0.1\\\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Initializes the Verify.DiffPlex library to enable enhanced text comparison in your project. This static method should be marked with [ModuleInitializer] to ensure it's called during module load.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Generating TestContext Property for Generic Test Class in C#\nDESCRIPTION: Defines a TestContext property for a generic test class TestClass1<U> within nested namespaces and classes. The property interacts with VerifyMSTest.Verifier for test context management.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NamespaceTests.HasAttributeOnClassWithGenericsInNestedNamespace.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace A.B\n{\npartial class C<T>\n{\npartial class D\n{\npartial class TestClass1<U>\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and Expecto NuGet Packages - fsproj - XML\nDESCRIPTION: This snippet provides the required <PackageReference> elements to include the core dependencies: YoloDev.Expecto.TestSdk, Expecto, FSharp.Core (update), and Verify.Expecto into the test project file. These enable Expecto-based tests with snapshot verification. To use, add these lines under an <ItemGroup> in your .fsproj file. Specifying versions ensures compatibility, and these dependencies are necessary for snapshot-based testing in F# with Expecto and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\\\"YoloDev.Expecto.TestSdk\\\" Version=\\\"0.15.3\\\" />\\n<PackageReference Include=\\\"Expecto\\\" Version=\\\"10.2.3\\\" />\\n<PackageReference Update=\\\"FSharp.Core\\\" Version=\\\"9.0.202\\\" />\\n<PackageReference Include=\\\"Verify.Expecto\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Using Identifier with Recording in C#\nDESCRIPTION: Illustrates how to use an identifier with Recording to group recordings. The identifier should be statically unique, like a fully qualified test name or a GUID.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task Identifier()\n{\n    Recording.Start(\"identifier\");\n    Recording.Add(\"identifier\", \"name\", \"value\");\n    return Verify(Recording.Stop(\"identifier\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Checks with XunitV3\nDESCRIPTION: A C# test class that runs verification checks to ensure proper configuration of the Verify framework with XunitV3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining Person Data Structure in JSON\nDESCRIPTION: A JSON object containing information about two people with their given names and family names. Each person is represented as a nested object with standardized properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/VerifyObjectSamples.Anon.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  person1: {\n    GivenNames: John,\n    FamilyName: Smith\n  },\n  person2: {\n    GivenNames: Marianne,\n    FamilyName: Aguirre\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: NUnit Test to Verify Convention Checks\nDESCRIPTION: NUnit test to run verification checks that ensure all Verify conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in the Project\nDESCRIPTION: Code to initialize Verify.DiffPlex in the project using a module initializer, which will enhance the diff display for test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit and Verify (C#)\nDESCRIPTION: This C# class defines a test using TUnit that verifies the output of ClassBeingTested.FindPerson(), illustrating typical usage of the Verify library with TUnit. Depends on TUnit, Verify.TUnit, and the tested code. Returns a Task from the test method, verifying the resulting object. Input: none directly; Output: test result depending on object's state and verification artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with MSTest\nDESCRIPTION: This C# snippet demonstrates invoking `VerifyChecks.Run()` within an MSTest method to perform conventions verification. Ensure the Verify library is included and integrated into the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Xunit\nDESCRIPTION: Test class demonstrating how to run Verify convention checks using Xunit's Fact attribute\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringBuilder Value Pattern\nDESCRIPTION: JSON-style configuration that maps a StringBuilder type to a value property. This appears to be a type configuration or validation pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.NestedStringBuilder.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  StringBuilder: value\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Pure Method Return Value Usage in EditorConfig\nDESCRIPTION: Configures `.editorconfig` for Rider/ReSharper to treat the non-usage of return values from methods marked with the `[Pure]` attribute (like Verify methods) as an error. This helps catch potential bugs where verification results are accidentally ignored. Requires the `resharper_return_value_of_pure_method_is_not_used_highlighting` setting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: Code snippet demonstrating how to run Verify checks in an NUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyChecks()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files on GitHub Actions Failure - YAML\nDESCRIPTION: This YAML GitHub Actions step uploads all '*.received.*' files as an artifact if the workflow fails. It uses actions/upload-artifact and only runs if previous steps fail, helping diagnose snapshot test failures in CI environments. Add this to your workflow YAML.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\\n  if: failure()\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: verify-test-results\\n    path: |\\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using Xunit. It creates a test method that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in XUnit\nDESCRIPTION: XUnit test method that runs verification checks to ensure all conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check in Expecto\nDESCRIPTION: A C# test class that calls VerifyChecks.Run() to ensure all Verify conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of inheriting from VerifyBase class in MSTest, which provides the necessary Verify methods without requiring explicit UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: This C# code snippet demonstrates how to run Verify checks using Xunit. It creates a fact test that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verify Files\nDESCRIPTION: Configuration to add to .gitattributes to ensure verified files use consistent line endings (LF) and UTF-8 encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring GitAttributes for Verified Files\nDESCRIPTION: GitAttributes configuration for text files to ensure consistent line endings and encoding for verified test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Configuration for .gitattributes to ensure consistent handling of verified text files with proper line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling line endings and encoding in verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: F# code snippet showing a sample Expecto test that uses Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Using Verify\nDESCRIPTION: This snippet shows a complete sample test using Verify with MSTest. It demonstrates how to set up a test method, use the [TestMethod] attribute, and call the Verify() method to perform assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Xunit test method to run Verify checks, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: Example of how to run Verify checks using Expecto in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Verify Checks`` () =\n    VerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation with TUnit\nDESCRIPTION: Test class implementation for running verify checks using TUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in Fixie\nDESCRIPTION: Test class implementation for running verify checks using Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Dotnet Tool (Shell)\nDESCRIPTION: Installs the DiffEngineTray global .NET tool, which monitors and manages Verify snapshot file changes from the Windows tray. Provides end-user UI for accepting or discarding detected differences. Requires .NET SDK and network access for tool installation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitUsings in a .NET Project for Verify\nDESCRIPTION: Setting the ImplicitUsings property to enable in the project file, which allows direct usage of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using NUnit with Verify\nDESCRIPTION: Shows how to use Verify with NUnit for snapshot testing. The test verifies the output of a ClassBeingTested instance by comparing it against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new ClassBeingTested\n    {\n        Title = \"Mr\",\n        Name = \"John Smith\",\n        Age = 10\n    };\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider/ReSharper\nDESCRIPTION: Configuration to disable orphaned process detection in JetBrains Rider or ReSharper, which is necessary when using Verify with diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize and enable Verify.DiffPlex for improved text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase for Convenient Test Base Class - C#\nDESCRIPTION: Demonstrates inheriting from the VerifyBase class in MSTest, allowing test methods to call Verify() directly without further setup. The [TestClass] and [TestMethod] attributes, along with the inheritance pattern, show best-practices for clean snapshot test design with minimal boilerplate. Requires Verify.MSTest and MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\\npublic class VerifyBaseUsage :\\n    VerifyBase\\n{\\n    [TestMethod]\\n    public Task Simple() =>\\n        Verify(\"The content\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File (XML)\nDESCRIPTION: Shows the MSBuild property `<ImplicitUsings>` set to `enable` within a project file (e.g., .csproj). This setting allows the compiler to automatically include common namespace directives, simplifying code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting ImplicitUsings to enable in the project file to support the shorthand Verify() syntax rather than requiring Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example of inheriting from VerifyBase class in MSTest to enable verify functionality without explicit UsesVerify attribute, simplifying test class creation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic Verify test implementation with MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Defining a Method That Throws an Exception in C#\nDESCRIPTION: This snippet defines a static method that throws an exception with a specific message.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nstatic void MethodThatThrows() =>\n    throw new(\"The Message\");\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files\nDESCRIPTION: PowerShell command to add to AppVeyor's on_failure build step to capture *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Basic Sample Test Using Verify with XunitV3\nDESCRIPTION: A simple example of a Verify test using XunitV3. The test gets a person object from a test class and uses Verify to generate and compare snapshots, demonstrating the basic pattern for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test with Verify\nDESCRIPTION: This code snippet provides a sample test using XUnit v3 with Verify. It demonstrates how to create a test method, use the [Fact] attribute, and call the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie in C#\nDESCRIPTION: This code demonstrates how to create a Fixie test class that runs Verify checks on the current assembly. It uses the VerifyChecks.Run method to perform the checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Object Ordering in C#\nDESCRIPTION: Configures Verify to order JSON and JObject properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nDontScrubGuids();\nVerifySettings.AddExtraSettings(\n    _ =>\n    {\n        _.OrderJsonObjects();\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Text Comparisons\nDESCRIPTION: Code example for initializing the Verify.DiffPlex extension which enhances text comparison output with highlighted inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verified Serialization Output for Named Date Value in .NET (Plain Text)\nDESCRIPTION: This snippet shows the expected serialized output after applying a named date via AddNamedDate, where the value property is replaced by its registered name (namedDate). Used as a verification baseline for the related test. There are no dependencies, and it simply illustrates the result of scrubbed serialization with named substitution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_16\n\nLANGUAGE: Plain Text\nCODE:\n```\n{\n  value: namedDate\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages via Dotnet CLI - Shell\nDESCRIPTION: Installs the required Verify and TUnit NuGet packages into the current test project using the dotnet CLI. These packages enable snapshot testing by providing integration between the TUnit test framework and Verify library. Dependencies: .NET SDK and access to the NuGet package feed. Run from the directory containing the project file. Output consists of installed package references in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verification Conventions Check in XunitV3\nDESCRIPTION: A test that verifies all Verify conventions are being followed in the project, ensuring proper configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool which provides command-line capabilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused pure method return values as errors, ensuring Verify method calls are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: XML configuration to enable implicit usings in the project file for proper compilation of examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray, a tool that sits in the Windows tray to monitor pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files\nDESCRIPTION: AppVeyor build configuration that captures *.received.* files as build artifacts when tests fail, making them accessible in the AppVeyor UI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Storing Verified Files with Specific Encoding and EOL (.gitattributes)\nDESCRIPTION: This configuration snippet sets file attributes for verified snapshots using .gitattributes. It ensures files matching '*.verified.txt', '*.verified.xml', and '*.verified.json' are treated as UTF-8 encoded with BOM and use LF line endings. Place this in your project's .gitattributes file to enforce consistent storage of snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: MSBuild property setting to enable implicit usings, which simplifies the test code by removing the need for explicit using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting to enable C# Implicit Usings feature in the project file, which allows using Verify() method directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Registering Extension-based File Converter in C#\nDESCRIPTION: Shows how to register a file converter that acts on a file or stream based on the file extension.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.RegisterFileConverter(\n    \"tif\",\n    (stream, _) => ConvertTiffToPngs(stream));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto in F#\nDESCRIPTION: A sample F# test implementation that uses Verify with Expecto to snapshot test the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: GitHub Actions workflow configuration to upload received files on test failure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test class showing basic Verify usage with Fixie\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test class implementation for running verify checks to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Verify Test Implementation with Fixie\nDESCRIPTION: Simple example showing how to write a Verify test using Fixie test framework. Demonstrates verifying a person object returned from a test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with TUnit in C#\nDESCRIPTION: This C# code demonstrates how to run convention checks using VerifyChecks in TUnit. It provides a task-based test that executes VerifyChecks.Run() to validate adherence to specified conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an MSTest test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit with Verify Framework\nDESCRIPTION: NuGet package references required for setting up XUnit with the Verify framework, including test SDK, Verify.XUnit, XUnit core, and XUnit Visual Studio runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Serializing Object with Obsolete Property in C#\nDESCRIPTION: This snippet shows a serialization test where an object with an obsolete property is serialized. By default, the obsolete property is ignored in the serialization process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/obsolete-members.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithObsoleteProp()\n{\n    var target = new WithObsolete\n    {\n        Property = \"Value1\",\n        ObsoleteProperty = \"Value2\"\n    };\n    return Verify(target);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Naming for Verify Test in JSON\nDESCRIPTION: This JSON snippet configures a verify test to use an instance naming convention. The 'value' property is set to 'instanceNamed', indicating that instances should be named according to a specific pattern or rule.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimes_instanceNamed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Fixie Testing with Verify\nDESCRIPTION: NuGet package references needed to use Verify with Fixie test framework. This includes the core Verify packages along with Fixie-specific integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks with Fixie\nDESCRIPTION: A simple Fixie test class that verifies all conventions are correctly applied by running VerifyChecks on the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Fixie test configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages for testing with Verify and NUnit, including the test SDK, NUnit framework, NUnit adapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex for Verify - ModuleInitializer in C# - cs\nDESCRIPTION: Defines a static initialization method for integrating Verify.DiffPlex at application/module load time. Place this ModuleInitializer method in your test assembly to activate inline diffing for Verify. This dependency on .NET's ModuleInitializer is compatible with .NET 5+ and requires Verify.DiffPlex NuGet package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Expecto in F#\nDESCRIPTION: F# code snippet showing a sample test using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Extension using dotnet CLI - Shell\nDESCRIPTION: This shell command installs the Verify.DiffPlex NuGet package into the test project using the dotnet CLI. This dependency enhances text diffing by displaying inline highlights of differences when snapshot verification fails. The output will confirm installation or report errors if the package cannot be found. Must be executed within the context of an existing test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Text Comparison\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify.NUnit in .NET CLI\nDESCRIPTION: Commands to add the essential NuGet packages needed for using Verify.NUnit in a test project, including the test SDK, NUnit framework, NUnit adapter, and Verify.NUnit package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received test files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify.Xunit via CLI\nDESCRIPTION: Installs the necessary NuGet packages (Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, xunit.runner.visualstudio) for a test project using the .NET CLI. These packages provide the core testing framework, Verify integration for Xunit, the Xunit framework itself, and Visual Studio test runner support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages to Test Project\nDESCRIPTION: This shell snippet demonstrates how to add essential NuGet packages to a test project using the dotnet CLI. Key packages include YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto, which are necessary for verifying tests and working with expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Creating Convention Check Test in C# with Expecto\nDESCRIPTION: C# test implementation that runs VerifyChecks to ensure all conventions are correctly followed in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in TUnit Tests (Instance Method)\nDESCRIPTION: Shows how to override the text used for parameters in the verified file name using an instance method approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseTextForParameters(value => value);\nawait Verifier.Verify(\"Foo\", settings);\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install Verify.Terminal, a global dotnet tool for managing snapshots from the command line, providing additional functionality for working with Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Ignore Spawned Processes\nDESCRIPTION: DotSettings configuration to disable ReSharper's orphaned process detection, which would otherwise prompt to terminate diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: Code snippet demonstrating how to run VerifyChecks to validate that project conventions are correctly configured in an NUnit test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks in NUnit\nDESCRIPTION: Sample test fixture showing how to implement convention checks using VerifyChecks.Run() in NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify with Expecto\nDESCRIPTION: The NuGet package references needed to use Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nsnippet: expecto-nugets\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify.Expecto (CLI)\nDESCRIPTION: Installs the necessary NuGet packages for using Expecto with Verify and the Expecto TestSdk using the .NET CLI `dotnet add package` command. These packages provide the core functionality for Verify.Expecto integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto Tests\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test with TUnit\nDESCRIPTION: TUnit test implementation that runs VerifyChecks to validate that all project conventions for Verify are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to handle Verify's received files when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for NUnit with Verify\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with NUnit, including the test SDK, NUnit, NUnit test adapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring Name Handling for Complex Parameters in Verify\nDESCRIPTION: Shows how to configure parameter name derivation for custom complex types using NameForParameter in a complete example with record types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ComplexParametersSample\n{\n    [ModuleInitializer]\n    public static void Initialize()\n    {\n        VerifierSettings.NameForParameter<ComplexData>(_ => _.Value);\n        VerifierSettings.NameForParameter<ComplexStructData>(_ => _.Value);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberData(ComplexData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberDataFluent(ComplexData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberNullableData(ComplexData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberNullableDataFluent(ComplexData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    public static IEnumerable<object[]> GetData()\n    {\n        yield return\n        [\n            new ComplexData(\"Value1\")\n        ];\n        yield return\n        [\n            new ComplexData(\"Value2\")\n        ];\n    }\n\n    public record ComplexData(string Value);\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberStructData(ComplexStructData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberStructDataFluent(ComplexStructData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberNullableStructData(ComplexStructData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberNullableStructDataFluent(ComplexStructData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    public static IEnumerable<object[]> GetStructData()\n    {\n        yield return [new ComplexStructData(\"Value1\")];\n        yield return [new ComplexStructData(\"Value2\")];\n    }\n\n    public record ComplexStructData(string Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: C# code to initialize the Verify.DiffPlex module, which changes text comparison to highlight differences inline rather than showing the full content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex via Module Initializer in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a C# Module Initializer. This ensures that DiffPlex is activated when the assembly loads, providing enhanced text diffing capabilities for VerifyTests failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for running Verify tests with Xunit. It includes Verify.Xunit for integration with Xunit, and Microsoft.NET.Test.Sdk for test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.6.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test case.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters in NUnit Verify Tests (Fluent)\nDESCRIPTION: Shows how to ignore specific parameters when generating the verified filename in NUnit Verify tests using the fluent approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task IgnoreParameters(string arg1, string arg2)\n{\n    return Verifier.Verify(\"value\")\n        .IgnoreParametersForVerified(\"arg2\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A basic example showing how to use Verify with NUnit. The test retrieves a person object and verifies its content against the approved snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: Configures `.gitignore` to exclude `*.received.*` files, preventing temporary or generated files from VerifyTests from being committed to source control. Optionally includes `*.received/` if `UseSplitModeForUniqueDirectory` is used.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.NUnit via CLI\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: This C# code initializes Verify with DiffPlex, enhancing text comparison by highlighting inline differences. Ensure the `Verify.DiffPlex` package is installed and referenced in your project before using.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core Verify testing packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required xUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with xUnit, including test SDK, Verify.Xunit, and xUnit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: Specifies the required NuGet packages to add to the test project for using NUnit with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XunitV3 with Verify\nDESCRIPTION: The necessary NuGet package references to add to a test project for using Verify with XunitV3. This includes Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class showing how to implement a basic verification test using MSTest and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changed Implementation for Testing Verification\nDESCRIPTION: Example showing changes to a class being tested that would result in test failures during verification. Contains modifications to property values including adding a middle name and changing an address.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ClassBeingTested\n{\n    public static Person FindPerson() =>\n        new()\n        {\n            Id = new(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n            Title = Title.Mr,\n            // Middle name added\n            GivenNames = \"John James\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children =\n            [\n                \"Sam\",\n                \"Mary\"\n            ],\n            Address = new()\n            {\n                // Address changed\n                Street = \"64 Barnett Street\",\n                Country = \"USA\"\n            }\n        };\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with TUnit\nDESCRIPTION: TUnit test that runs Verify's convention checks to ensure all configuration is properly set up. The VerifyChecks.Run() method validates that the environment meets all requirements for Verify to work correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: A sample NUnit test method using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Header for Generated File\nDESCRIPTION: Auto-generated file warning comment indicating this is created by MarkdownSnippets tool and should not be edited directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_Other_Gui_XunitV3.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for NUnit with Verify\nDESCRIPTION: The essential NuGet package references needed to use Verify with NUnit, including the test SDK, NUnit framework, Verify.NUnit integration, and the NUnit test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit NuGet Packages for Verify Testing\nDESCRIPTION: This snippet shows the NuGet packages required for setting up Verify with Xunit. It includes Verify.Xunit for core functionality and Microsoft.NET.Test.Sdk for test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n<PackageReference Include=\"xunit\" Version=\"*\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"*\">\n  <PrivateAssets>all</PrivateAssets>\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n</PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify Tests\nDESCRIPTION: This YAML snippet shows how to configure an Azure DevOps pipeline to capture *.received.* files as artifacts when tests fail, helping with debugging verification tests in CI/CD.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: Demonstrates how to run Verify checks within an Xunit test method. This ensures that conventions are being followed in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in text editors. Configures UTF-8 with BOM, LF line endings, and disables various automatic formatting features.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Applying File-Specific Scrubbing in Directory Verification\nDESCRIPTION: Shows how to use the 'fileScrubber' parameter to perform file-specific content manipulation during directory verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-directory.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task VerifyDirectoryWithFileScrubber() =>\n    VerifyDirectory(\n        directoryToVerify,\n        fileScrubber: (path, builder) =>\n        {\n            if (Path.GetFileName(path) == \"TextDoc.txt\")\n            {\n                builder.Clear();\n                builder.Append(\"New text\");\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: Demonstrates how to create a test fixture for running Verify checks using NUnit. This ensures that all conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Verified Output with Ignored Member\nDESCRIPTION: This XML shows the content of the `.verified.xml` file when the `<node>` element is ignored using `IgnoreMember`. Although the element is present in the pretty-printed output, its content is not considered during the verification diff process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<body>\n  <node>text</node>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an MSTest test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: This sample shows how to inherit from VerifyBase in an MSTest class to enable Verify functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample xUnit v3 Test with Verify\nDESCRIPTION: A sample test using xUnit v3 and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test with Verify Framework\nDESCRIPTION: Demonstrates a basic test implementation using Verify with XunitV3, showing the pattern for creating verifiable tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Setting for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (such as Verify()) as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit V3\nDESCRIPTION: C# code demonstrating how to run verification checks using the VerifyChecks.Run() method in a test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar checks = VerifyChecks.Run();\nawait Verify(checks);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: XML configuration to enable implicit usings in the C# project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversion Result with Cleanup in C#\nDESCRIPTION: Shows how to implement a conversion result with a cleanup callback to handle post-verification tasks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = new ConversionResult(\n    info,\n    streams,\n    cleanup: () =>\n    {\n        info.Dispose();\n        foreach (var stream in streams)\n        {\n            stream.Dispose();\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: Example NUnit test that demonstrates how to use Verify for snapshot testing. The test creates a person object and verifies its serialized representation against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verify(person);\n}\n\npublic class Person\n{\n    public Person(string firstName, string lastName)\n    {\n        FirstName = firstName;\n        LastName = lastName;\n    }\n\n    public string FirstName { get; }\n    public string LastName { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: This command uses the .NET CLI to add the `Verify.DiffPlex` NuGet package to the current .NET project. This package enhances Verify's text comparison by showing inline differences in the failure output, which can be clearer than showing the full received and verified strings separately.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool via CLI\nDESCRIPTION: Shows the `dotnet tool install -g DiffEngineTray` command used to install the DiffEngineTray tool globally using the .NET CLI. DiffEngineTray assists in managing Verify snapshot changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances the diff output for text comparisons in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining Personal Information Structure in JSON-like Format\nDESCRIPTION: This snippet outlines a data structure for personal information. It includes fields for names, spouse, address (nested object), children (array), and a unique identifier. The structure uses a mix of simple key-value pairs and nested objects.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/Snippets/Sample.Test.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files on Test Failure\nDESCRIPTION: AppVeyor YAML configuration to automatically capture and upload .received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration (XML)\nDESCRIPTION: Shows how to enable implicit usings in the project. Setting <ImplicitUsings> to 'enable' allows examples to compile without explicit using directives. Add this configuration property to your .csproj or related project file. This is critical for the correct operation of code samples unless you manually use 'Verifier.Verify()' instead of 'Verify()'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Disabling Verify Dangling Snapshots Warning\nDESCRIPTION: Pragma directive to disable the experimental VerifyDanglingSnapshots warning feature.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable VerifyDanglingSnapshots\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Source Control Settings for Verified Artifacts - ini\nDESCRIPTION: Illustrates addition to .gitattributes to ensure text-based verification files (e.g., .verified.txt, .verified.xml, .verified.json) are always saved with LF line endings and UTF-8 BOM encoding. This guarantees consistency across team members and CI systems. Use this configuration for all relevant text extension types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Fixie\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with Fixie tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Flag for Verify Tests in Azure DevOps\nDESCRIPTION: This task sets a pipeline variable when tests fail, which can be used to conditionally publish Verify's *.received.* files. It uses the failed() condition to only execute when the previous test step fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider\nDESCRIPTION: Configuration to disable orphaned process detection in JetBrains Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify.Xunit Project\nDESCRIPTION: Commands to add required NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit Package Dependencies\nDESCRIPTION: Required NuGet package references for setting up NUnit with Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify and Xunit testing framework to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check Test with XunitV3 in C#\nDESCRIPTION: Defines an Xunit test class `VerifyChecksTests` with a `[Fact]` method `Run`. This test executes `VerifyChecks.Run()` to programmatically check if project conventions, such as source control excludes and text file settings, are correctly configured according to Verify's requirements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: A gitignore pattern to exclude all *.received.* files from source control, which are the temporary files generated during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in F#\nDESCRIPTION: Example of a basic verification test written in F# using Expecto and Verify frameworks to test a FindPerson method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for F# Expecto Testing with Verify\nDESCRIPTION: Required NuGet package references for setting up Verify with Expecto in an F# project. This includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure verified files are handled correctly with proper line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Package References for TUnit in .NET Project\nDESCRIPTION: The XML snippet shows how to add necessary NuGet packages to a test project in a .NET csproj file. Dependencies include TUnit and Verify.TUnit, which are required for setting up test verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Xunit Test to Check Verify Conventions in C#\nDESCRIPTION: Demonstrates an Xunit test class (`VerifyChecksTests`) with a test method (`Run`) that calls `VerifyChecks.Run()`. This test verifies that project conventions (like `.gitignore` settings) related to Verify are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, Verify.XunitV3, and XUnit V3 packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for MSTest and Verify\nDESCRIPTION: Specifies the NuGet packages required for using MSTest with Verify, including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Zip Verification with File Content Scrubbing\nDESCRIPTION: Example of using a file scrubber to modify specific file contents during verification. In this case, it replaces the content of 'TextDoc.txt' with 'New text'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-zip.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyZipWithFileScrubber() =>\n    VerifyZip(\n        zipPath,\n        fileScrubber: (path, builder) =>\n        {\n            if (Path.GetFileName(path) == \"TextDoc.txt\")\n            {\n                builder.Clear();\n                builder.Append(\"New text\");\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Defining Verify Test Cases in JSON\nDESCRIPTION: This JSON structure defines test cases for a verify function. It specifies input parameters and expected results, including exceptions with specific messages for different parameter combinations.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.ExceptionCallbacksTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  params1, params2: Result,\n  1, value1: Exception: Message,\n  1, value2: Exception: Message,\n  10, value1: Exception: Message,\n  10, value2: Exception: Message\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File - xml\nDESCRIPTION: Ensures the C# project enables 'ImplicitUsings', allowing sample code that omits explicit 'using' statements to compile. This setting should be included in the project file (e.g., .csproj) as shown. Omission may require changing 'Verify()' to 'Verifier.Verify()' in code. No dependencies beyond SDK-style .NET projects.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\\n\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check for XUnit v3\nDESCRIPTION: Code example showing how to run Verify convention checks in an XUnit v3 test. This ensures that all Verify conventions are properly set up in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to ensure DiffPlex is set up when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and TUnit NuGet Packages in C#\nDESCRIPTION: Adds the required NuGet packages for TUnit and Verify.TUnit to the test project's .csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Info for XUnit V3\nDESCRIPTION: Configures the path derivation logic for XUnit V3 tests, setting snapshot files to be stored in a Snapshots directory under the project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_17\n\nLANGUAGE: cs\nCODE:\n```\nVerifier.DerivePathInfo(\n    (sourceFile, projectDirectory, type, method) => new(\n        directory: Path.Combine(projectDirectory, \"Snapshots\"),\n        typeName: type.Name,\n        methodName: method.Name));\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages for Fixie Tests in C#\nDESCRIPTION: Commands to add Fixie and Verify.Fixie NuGet packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Verify and TUnit NuGet Packages\nDESCRIPTION: Add the TUnit and Verify.TUnit NuGet packages to the test project's csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks in Expecto Test\nDESCRIPTION: Creates a test case to run VerifyChecks and ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for TUnit in C#\nDESCRIPTION: Adds the necessary NuGet packages to the test project for using Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Combination Test Headers in C# using Verify\nDESCRIPTION: This C# unit test (`BuildAddressWithHeaderOverridesTest`) uses the Verify library's `Combination` method to test the `BuildAddress` function with multiple input combinations. It explicitly sets `header: true` and provides custom header names (\"Number\", \"Street\", \"City\") to override the default headers in the verified output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task BuildAddressWithHeaderOverridesTest()\n{\n    int[] number = [1, 10];\n    string[] street = [\"Smith St\", \"Wallace St\"];\n    string[] city = [\"Sydney\", \"Chicago\"];\n    return Combination(header: true)\n        .Verify(\n            BuildAddress,\n            number,\n            street,\n            city,\n            \"Number\",\n            \"Street\",\n            \"City\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project - .csproj XML\nDESCRIPTION: This snippet demonstrates enabling implicit global usings in a .NET project file by setting the <ImplicitUsings> property to 'enable'. This feature ensures that standard .NET namespace usings are included automatically, simplifying example code and preventing compile-time errors related to missing imports. Add this option to your .csproj to follow the documentation's code samples as-is.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: csproj\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify.TUnit NuGet Packages\nDESCRIPTION: Add the required NuGet packages to the test project's .csproj file. This includes TUnit for testing and Verify.TUnit for snapshot testing integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit and Verify NuGet Packages in C#\nDESCRIPTION: Adds the required NuGet packages for NUnit testing and Verify to the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Failure Handling Configuration\nDESCRIPTION: PowerShell script for handling test failures in AppVeyor by uploading received files as artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Setting Up VerifyChecks with Expecto Test Framework\nDESCRIPTION: Example of implementing VerifyChecks.Run() in an Expecto test to validate that all verification conventions are correctly applied to the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: JsonAppender Output Format\nDESCRIPTION: Shows the resulting verified output format when using JsonAppender\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/jsonappender.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n{\n  target: TheValue,\n  theData: theValue\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable Implicit Usings in the project file, which simplifies the usage of Verify's API by removing the need for explicit imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where the result of Verify() is not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Disabling UTF-8 BOM for Snapshot Files in C#\nDESCRIPTION: This snippet demonstrates how to disable UTF-8 byte order marks (BOM) for snapshot files using the VerifierSettings.UseUtf8NoBom() method. It uses a module initializer to ensure the setting is applied at the start of the program.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/encoding.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.UseUtf8NoBom();\n}\n```\n\n----------------------------------------\n\nTITLE: Combination Test with Headers\nDESCRIPTION: Example of enabling headers in combination test output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSampleWithHeader\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (CLI)\nDESCRIPTION: Uses the `dotnet add package` command to install the optional `Verify.DiffPlex` package. This package enhances Verify's text comparison output by showing inline differences, which can be more helpful than the default behavior of outputting the full received and verified strings, especially for large text blocks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example of a basic test implementation using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Xunit\nDESCRIPTION: This snippet shows how to add essential NuGet packages for an Xunit test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, and xunit. These dependencies are necessary to run and verify integration tests using Xunit and related tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This YAML snippet defines a PublishBuildArtifacts task that publishes the staged .received files as build artifacts. Like the CopyFiles task, it only runs if the 'publishverify' variable is set to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Implementing Conventions Check with VerifyChecks in TUnit\nDESCRIPTION: A TUnit test class that runs verification convention checks to ensure proper setup of verification tests in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C# Project\nDESCRIPTION: Code snippet showing how to initialize Verify.DiffPlex in a C# project using a module initializer. This enables enhanced text comparison results with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff output in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with Expecto in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Override (Instance Approach)\nDESCRIPTION: Shows how to use IgnoreParametersForVerified() with custom parameter values to override the parameters used in the received filename while maintaining a single verified file in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"One\")]\n[TestCase(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParams(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified($\"Number{arg}\");\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a convention for using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify with XUnit testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: A basic example of a TUnit test that uses Verify to snapshot test an object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing .received Files as Artifacts on AppVeyor Build Failure\nDESCRIPTION: This YAML configuration snippet sets up an on_failure build step in AppVeyor. It uses PowerShell to find all .received files recursively and push them as artifacts. This helps in analyzing failed Verify tests by making the .received files easily accessible.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Verify Files\nDESCRIPTION: Git ignore configuration to exclude received files from source control while preserving verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally, which provides a Windows tray utility for monitoring and accepting/rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Convention Check Test Implementation\nDESCRIPTION: NUnit test implementation for verifying conventions using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up NUnit testing with Verify framework including test SDK, NUnit core, Verify.NUnit, and NUnit test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A sample Xunit test that demonstrates how to use Verify to test a class method that returns a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add required NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration for handling line endings and encoding of verified text files, ensuring consistency across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Serialization Test Constructor\nDESCRIPTION: Constructor definition for a test class that likely contains serialization verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Constructor.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSerializationTests.ctor()\n```\n\n----------------------------------------\n\nTITLE: Person Data Structure in JSON\nDESCRIPTION: JSON structure representing a person's profile with nested objects for address information and an array of children. Includes basic personal details, family relationships, and a unique identifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.FSharpTests/Tests.findPerson.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: C# code demonstrating a sample Xunit test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for properly handling line endings and encoding in verified files. This ensures consistent file formatting across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: YAML configuration for Azure DevOps to publish *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks in Fixie\nDESCRIPTION: Shows a Fixie test class `VerifyChecksTests` that runs Verify's convention checks using `VerifyChecks.Run()`, passing the current assembly. This test helps ensure that project conventions (like gitignore and gitattributes settings) are correctly configured for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: This code demonstrates how to run Verify checks using Xunit. It creates a fact test that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test with XunitV3\nDESCRIPTION: A code snippet showing how to create a test that runs Verify's convention checks. This confirms that your project follows the recommended setup for Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Code snippet showing how to call VerifyChecks.Run() in a test to validate that all Verify conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This snippet demonstrates how to run Verify checks in an MSTest test class to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: A test method that verifies the project follows all Verify conventions using VerifyChecks.Run() with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with VerifyChecks in TUnit\nDESCRIPTION: A TUnit test class that runs convention checks to ensure proper Verify configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in NUnit\nDESCRIPTION: NUnit test fixture for running Verify's convention checks to ensure proper configuration of the testing environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify Source Generator for an Assembly (MSTest)\nDESCRIPTION: C# code snippet showing how to apply the `[assembly: UsesVerify]` attribute. This attribute opts-in the entire assembly for processing by the Verify.MSTest source generator, enabling the `Verify()` extension method in all test classes within that assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with Fixie\nDESCRIPTION: Example showing a basic test implementation using Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Scrubbers in MSTest with Verify .NET (C#)\nDESCRIPTION: Shows how to configure and use multiple scrubbers in a MSTest unit test when using the Verify .NET library. Demonstrates removing sensitive data and environment information from verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class SampleTestClass\n{\n    [TestMethod]\n    public Task TestWithScrubbers()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesContaining(\"password\", \"token\");\n        settings.ScrubMachineName();\n        return Verifier.Verify(someResult, settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value in Plaintext\nDESCRIPTION: A simple variable assignment that sets 'value' to 10. This type of assignment is commonly used in configuration files, environment variables, or simple key-value stores.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.Dictionary.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvalue=10\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex Inline Diff Highlighting (C#)\nDESCRIPTION: Initializes the VerifyDiffPlex extension at module load using a C# [ModuleInitializer] static method, enabling pretty inline diff rendering in snapshot result outputs. Requires: Verify.DiffPlex NuGet package; should be in a shared initialization location.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: This F# code snippet shows a sample Expecto test using Verify. It demonstrates how to create a test that finds a person and verifies the result using Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members That Throw Exceptions with Specific Messages in C#\nDESCRIPTION: This snippet demonstrates how to ignore members that throw exceptions with specific messages during serialization. It shows both instance-specific and fluent configurations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/members-throw.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task ExceptionMessageProp()\n{\n    var target = new WithExceptionIgnoreMessage();\n\n    var settings = new VerifySettings();\n    settings.IgnoreMembersThatThrow<Exception>(_ => _.Message == \"Ignore\");\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task ExceptionMessagePropFluent()\n{\n    var target = new WithExceptionIgnoreMessage();\n\n    return Verify(target)\n        .IgnoreMembersThatThrow<Exception>(_ => _.Message == \"Ignore\");\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps to publish Verify's received files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: A reference implementation of a sample test using Verify with TUnit, demonstrating the basic structure and syntax of verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: A code snippet demonstrating how to run Verify conventions check in an MSTest test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with Fixie\nDESCRIPTION: A Fixie test class that runs checks to ensure all Verify conventions are being followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify convention checks with MSTest\nDESCRIPTION: Example of how to set up a test method that runs Verify's convention checks using MSTest. This ensures the proper configuration of Verify in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyConventions\n{\n    [TestMethod]\n    public Task Run() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Exceptions with Verifier.Throws\nDESCRIPTION: Example of accessing the Exception object when using Verifier.Throws. This allows for additional assertions on the exception that was thrown during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await Throws(MethodThatThrows);\nAssert.NotNull(result.Exception);\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: This snippet shows a sample test using Verify with Expecto. It demonstrates how to create a test that verifies an object using Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Sample Test`` () =\n    task {\n        let person =\n            {\n                GivenNames = \"John\"\n                FamilyName = \"Smith\"\n                Spouse = \"Jill\"\n                Address =\n                    {\n                        Street = \"4 Puddle Lane\"\n                        Country = \"USA\"\n                    }\n                Children =\n                    [\n                        \"Sam\"\n                        \"Mary\"\n                    ]\n            }\n\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Snapshot Files\nDESCRIPTION: This snippet provides rules for a `.gitignore` file to prevent Verify's `*.received.*` files and directories (if using `UseSplitModeForUniqueDirectory`) from being committed to source control. This ensures only the verified snapshots are tracked.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control using Gitignore - Shell\nDESCRIPTION: Instructs git to ignore all files matching the pattern '*.received.*', preventing them from being tracked in source control. Used to avoid noise and clutter from transient files produced by Verify during failed snapshot tests. Place these entries in the .gitignore file at the repository root. This affects only git behavior and does not remove previously committed files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control while keeping verified files committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while keeping verified files. This is a recommended practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test execution but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up NUnit with Verify testing framework, including test SDK and adapters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: Adds the necessary NuGet packages to the test project for using NUnit with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Command-line instructions for adding the necessary NuGet packages to set up Verify with MSTest, including the test SDK, MSTest adapter and framework, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test with Verify\nDESCRIPTION: C# code snippet showing a sample XUnit v3 test using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify in C#\nDESCRIPTION: This snippet showcases a simple Xunit test case that uses Verify to assert on a 'person' object obtained from the method ClassBeingTested.FindPerson(). It highlights the usage of Verify to perform assertions, which checks that the results are as expected.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\\n{\\n    [Fact]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrubber Levels in Fixie\nDESCRIPTION: Demonstrates implementing scrubbers at method, class, and global levels in Fixie tests, showing both traditional and fluent configuration approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ScrubberLevelsSample\n{\n    VerifySettings classLevelSettings;\n\n    public ScrubberLevelsSample()\n    {\n        classLevelSettings = new();\n        classLevelSettings.AddScrubber(_ => _.Replace(\"Three\", \"C\"));\n    }\n\n    public Task Simple()\n    {\n        var settings = new VerifySettings(classLevelSettings);\n        settings.AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n        return Verify(\"One Two Three\", settings);\n    }\n\n    public Task SimpleFluent() =>\n        Verify(\"One Two Three\", classLevelSettings)\n            .AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n\n    [ModuleInitializer]\n    public static void Setup() =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"One\", \"A\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced text comparison functionality in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: A sample test using Verify with Fixie to demonstrate the basic structure and usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fixie Test with Verify\nDESCRIPTION: A sample Fixie test that demonstrates how to use Verify to snapshot test a person object. This shows the basic pattern for writing tests with Verify in Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sample Test with Fixie and Verify\nDESCRIPTION: Implements a simple Fixie test that demonstrates how to use Verify to capture and verify the state of an object. The test gets a person object and verifies its properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files. These settings ensure proper encoding, line endings, and prevent extra whitespace or newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in NUnit Tests\nDESCRIPTION: This C# snippet demonstrates how to run verification checks within an NUnit test by calling the VerifyChecks.Run() method, which ensures the defined conventions are upheld in test data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with TUnit\nDESCRIPTION: Sample TUnit test that demonstrates how to verify an object using Verify. It shows the basic pattern of retrieving an object and calling Verify on it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Example of a simple test method using Verify with TUnit to verify a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest and Verify NuGet Packages\nDESCRIPTION: Commands to add required NuGet packages for MSTest testing and Verify framework integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are dynamically generated during testing. These files should not be committed while the verified files should be included.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test with TUnit\nDESCRIPTION: A TUnit test that runs the VerifyChecks utility to ensure all Verify conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using Expecto and Verify together.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verified Test Case with Fixie and Verify - C#\nDESCRIPTION: Demonstrates a sample Fixie test class employing Verify for snapshot testing. The Test method retrieves a test object and passes it to Verify for result comparison. This template illustrates best practice for authoring snapshot tests with Fixie and Verify.Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\\n{\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify and Fixie – C#\nDESCRIPTION: Defines a sample test class and method using C#, where an object is retrieved and then passed to the Verify() method for snapshot testing. This is a basic pattern for using Verify.Fixie: arrange sample data, then verify the result. Requires that Verify and Fixie are installed, and may depend on implicit usings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Sample Verify Test with Fixie\nDESCRIPTION: Example of a simple Verify test using Fixie. This test creates a person object and verifies its content using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Defining a Custom DateTime Equality Comparer in .NET (C#)\nDESCRIPTION: This snippet shows how to globally register a custom DateTime comparer that only considers year, month, and day for equality (ignoring time components and Kind). It uses a module initializer to install the new comparer via Counter.UseDateTimeComparer. Dependencies include Counter, DateTime, and IEqualityComparer<DateTime>; module initializers require .NET 5+. This pattern is useful for tests where only calendar dates matter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void UseCustomDateTimeComparer() =>\n    Counter.UseDateTimeComparer(new CustomDateTimeComparer());\n\npublic class CustomDateTimeComparer :\n    IEqualityComparer<DateTime>\n{\n    public bool Equals(DateTime x, DateTime y) =>\n        new DateTime(x.Year, x.Month, x.Day) ==\n        new DateTime(y.Year, y.Month, y.Day);\n\n    public int GetHashCode(DateTime date) =>\n        new DateTime(date.Year, date.Month, date.Day).GetHashCode();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to set up Verify with XunitV3 in a test project, including the Microsoft testing SDK, Verify.XunitV3, xunit.v3 prerelease, and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration (C#)\nDESCRIPTION: C# code snippet demonstrating how to enable Verify.DiffPlex integration using a module initializer. The `[ModuleInitializer]` attribute ensures `VerifyDiffPlex.Initialize()` is called automatically when the assembly loads.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: This snippet demonstrates how to create an Xunit test that runs Verify's convention checks. It helps ensure that the project follows Verify's recommended conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit Test\nDESCRIPTION: A code snippet demonstrating how to run Verify checks within an NUnit test method. This ensures that all conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test with Expecto and Verify\nDESCRIPTION: Sample F# test using Verify.Expecto to create a snapshot test. The test finds a person object and verifies its state against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Value Class Definition in C#\nDESCRIPTION: Defines a Value class that implements IEquatable<Value> interface. This class handles value representation and comparison, with support for null values and string formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/UseSplitModeForUniqueDirectoryTests.DontUseSplitModeForUniqueDirectory_Fluent/target.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class Value : IEquatable<Value>\n{\n    private readonly object? _value;\n\n    public Value(object? value)\n    {\n        _value = value;\n    }\n\n    public override bool Equals(object? obj)\n    {\n        return obj is Value value && Equals(value);\n    }\n\n    public bool Equals(Value? other)\n    {\n        return other != null\n          && ((_value == null && other._value == null)\n            || (_value != null && other._value != null && _value.Equals(other._value)));\n    }\n\n    public override int GetHashCode()\n    {\n        return _value?.GetHashCode() ?? 0;\n    }\n\n    public override string ToString()\n    {\n        return _value == null ? \"null\" : _value.ToString() ?? string.Empty;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the optional Verify.Terminal tool globally, which enables managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in TUnit\nDESCRIPTION: Shows how to run Verify conventions check with TUnit by calling VerifyChecks.Run() in a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Implementation\nDESCRIPTION: Example of a basic NUnit test using Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GUID Fields in C# Data Structure\nDESCRIPTION: This code snippet defines a structure or class with four GUID-related fields. It includes a regular Guid, a nullable Guid, a Guid represented as a string, and another Guid field named OtherGuid.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ReUseGuid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  Guid: Guid_1,\n  GuidNullable: Guid_1,\n  GuidString: Guid_1,\n  OtherGuid: Guid_2\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Line Entries in Text\nDESCRIPTION: A simple text structure showing different lines labeled alphabetically.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/Scrubbers/ScrubbersSample.Lines.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLineA\nLineC\nNoMoreLineE\nLineI\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Object Instance with Type Hints\nDESCRIPTION: This snippet defines a data structure representing a 'Person'. It uses a JSON-like syntax with extensions like `$type` to specify object types (Person, Address, List<string>) and `$values` for list elements. The structure includes basic string fields (GivenNames, FamilyName, Spouse), a nested object (Address), a list of strings (Children), and an identifier (Id). This format is likely specific to a particular serialization library or framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TypeNameHandlingAll.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  $type: Person,\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    $type: Address,\n    Street: 1 Puddle Lane,\n    Country: USA\n  },\n  Children: {\n    $type: List<string>,\n    $values: [\n      Sam,\n      Mary\n    ]\n  },\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: Test class to run verification of conventions and settings\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results in GitHub Actions\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail, aiding in debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing Conventions Check with Verify in C#\nDESCRIPTION: C# implementation of a test case that runs Verify's convention checks on the current assembly to ensure consistent configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified files, ensuring consistent formatting across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings - XML Project File\nDESCRIPTION: Sets the <ImplicitUsings> property in a .NET project file to 'enable', allowing for simplified code by implicitly including common .NET namespaces. Required for all sample code in this documentation to compile as displayed. Inserted into the csproj file's <PropertyGroup>.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files on Test Failure in GitHub Actions\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload any *.received.* files as artifacts if the build fails. It uses the actions/upload-artifact@v4 action with a failure() condition.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example of using VerifyBase in an MSTest test class for easier Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for consistent file formatting of verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages to a test project, including TUnit and Verify.TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper/Rider to Ignore Spawned Processes\nDESCRIPTION: XML configuration to disable ReSharper/Rider's orphaned process detection for the solution, preventing unnecessary dialogs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: DiffPlex Integration - Enabling in C# via ModuleInitializer\nDESCRIPTION: This snippet shows how to enable Verify.DiffPlex integration via a C# ModuleInitializer. The method calls VerifyDiffPlex.Initialize() to register the diff engine for use in all snapshot comparisons. Place this static method in a project source file to register the diffing behavior at module initialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Module initializer to set up Verify.DiffPlex, which enhances verification failure messages by showing inline text differences instead of dumping entire files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files on Test Failure\nDESCRIPTION: PowerShell command for an AppVeyor on_failure build step to capture and upload all *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of a test class inheriting from VerifyBase, which is one way to mark tests as using Verify. This approach automatically provides access to verification methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: Code to initialize VerifyDiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: This F# code snippet shows a sample Verify test using Expecto. It demonstrates how to create a test that finds a person and verifies the result using Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project Configuration for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to properly configure Fixie for use with Verify, including target assembly assignment and execution state management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: C# code to initialize VerifyDiffPlex, which enhances text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is recommended for Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit and Verify.TUnit integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks using Xunit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XunitV3\nDESCRIPTION: Shows how to create a test method to run Verify checks, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Generating TestContext Property for Verify MSTest Integration in C#\nDESCRIPTION: This code snippet defines a partial class Derived with a TestContext property. It's generated to integrate Verify with MSTest, providing access to the current test context and managing test execution details.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAttributeOnDerivedClass.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//-----------------------------------------------------\n// This code was generated by a tool.\n//\n// Changes to this file may cause incorrect behavior\n// and will be lost when the code is regenerated.\n// <auto-generated />\n//-----------------------------------------------------\n\npartial class Derived\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using InlineData with VerifySettings Instance in Xunit\nDESCRIPTION: Shows how to configure parameters using a VerifySettings instance with Xunit InlineData theories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task InlineDataUsage(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseParameters(arg);\n    return Verify(arg, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Integration Package - Shell\nDESCRIPTION: Installs the Verify.DiffPlex package, which enables inline diff highlighting in snapshot test output by integrating DiffPlex with Verify. Run in the test project's directory using the dotnet CLI. No output besides package reference updates in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and TUnit testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Creating a Conventions Check Test with MSTest\nDESCRIPTION: MSTest test class that runs VerifyChecks.Run() to validate that project conventions for Verify are correctly configured, ensuring consistent testing behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with Fixie\nDESCRIPTION: Test class implementation for running Verify convention checks using Fixie test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Implementing Conventions Check with VerifyChecks in MSTest\nDESCRIPTION: Test class that runs VerifyChecks.Run() to validate that all verification conventions are properly set up in the project. This ensures that file naming, exclusions, and other settings are correct.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Fixie with Verify\nDESCRIPTION: The NuGet package references required for using Verify with Fixie testing framework. Includes the core Verify package, Fixie integration, and source generators for snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"3.*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n<PackageReference Include=\"Verify.SourceGenerators\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging Directory in Azure DevOps\nDESCRIPTION: This YAML task copies all .received files to a staging directory when the publishverify flag is set to Yes. This step is necessary since the PublishBuildArtifacts task doesn't support wildcards.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts in Azure DevOps (YAML)\nDESCRIPTION: Demonstrates an Azure DevOps PublishBuildArtifacts@1 YAML task that publishes staged Verify .received files as a build artifact named 'Verify'. The task runs only if the pipeline variable is set, making all failed snapshot test outputs available for download from the build summary.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\\n  displayName: 'Publish Verify *.received.* files as Artifacts'\\n  name: 'verifypublish'\\n  condition: eq(variables['publishverify'], 'Yes')\\n  inputs:\\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\\n    ArtifactName: 'Verify'\\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit and Verify NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using Xunit. It creates a fact test method that calls VerifyChecks.Run() to execute the convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Alphabetical Ordering of Properties in C#\nDESCRIPTION: Sets up alphabetical ordering of serialized properties, ignoring their defined order when using reflection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nDontScrubGuids();\nVerifySettings.AddExtraSettings(\n    _ =>\n    {\n        _.OrderProperties();\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex to Enable Inline Text Diffing - Shell\nDESCRIPTION: Adds the Verify.DiffPlex NuGet package to the project to support better inline diffing of large or complex text outputs when using snapshot testing. Run in the terminal within the project folder.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with XUnit v3 in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File for Verify\nDESCRIPTION: XML configuration to enable implicit usings in a project file, which allows for cleaner code when using Verify by eliminating the need for explicit namespace declarations. With this enabled, developers can use Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify with Expecto in F#\nDESCRIPTION: NuGet package references needed to set up Verify with Expecto in an F# project. Includes YoloDev.Expecto.TestSdk, Expecto, an updated FSharp.Core reference, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI\nDESCRIPTION: Commands to add essential NuGet packages for MSTest and Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps: Set Variable on Test Failure (YAML)\nDESCRIPTION: This Azure DevOps pipeline YAML step sets a custom variable ('publishverify') if the test step fails. The condition 'failed()' ensures this runs only on test failure, and the script sets a variable needed for subsequent steps to publish snapshot files. Insert directly after your test step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\\n  condition: failed()\\n  inputs:\\n    script: 'echo \\\"##vso[task.setvariable variable=publishverify]Yes\\\"'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit\nDESCRIPTION: Test class implementation to run verification checks using the VerifyChecks utility.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Test Artifacts\nDESCRIPTION: GitHub Actions workflow configuration to upload .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Text Comparison\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text comparison behavior to highlight differences inline when verification fails, improving readability of test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verify Result - Custom Target\nDESCRIPTION: This snippet shows the verified output of the custom target passed to Verify. It contains the raw target value specified in the test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nRaw target value\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify convention checks in a TUnit test by calling VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: C# code demonstrating a sample test using Verify with XUnit v3, showing how to verify the output of a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension which changes the text comparison result to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Verify Test Results\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C#\nDESCRIPTION: Initializes Verify.DiffPlex integration using a C# module initializer (`[ModuleInitializer]`). This ensures DiffPlex is enabled globally for the test assembly at startup, modifying the default text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Build Pipeline Configuration\nDESCRIPTION: YAML configuration for Azure DevOps build pipeline to handle verification test artifacts and failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex for Verify\nDESCRIPTION: Code to initialize DiffPlex integration with Verify. The ModuleInitializer attribute ensures this code runs when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages in C# Project\nDESCRIPTION: This snippet shows how to add the required NuGet packages for Fixie and Verify.Fixie to a C# project file. It specifies the versions for Fixie and Verify.Fixie packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Text for Parameters with Fluent API\nDESCRIPTION: Shows how to override the text used for parameters in file naming using UseTextForParameters with a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task UseTextForParametersFluent(string arg) =>\n    Verify(arg + \"UseTextForParametersFluent\")\n        .UseTextForParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for MSTest and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using MSTest with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for TUnit and Verify.TUnit\nDESCRIPTION: These commands add the necessary NuGet packages for TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands for adding the necessary NuGet packages to set up Verify with NUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration in C#\nDESCRIPTION: Shows how to enable the Verify.DiffPlex integration using a module initializer. Calling `VerifyDiffPlex.Initialize()` at startup configures VerifyTests to use DiffPlex for comparing text-based results. Requires the `Verify.DiffPlex` NuGet package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing ITestProject and IExecution for Fixie with Verify\nDESCRIPTION: C# implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify, including setting up the target assembly and wrapping test executions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files to GitHub Actions Artifacts on Failure (YAML)\nDESCRIPTION: Provides a YAML configuration snippet for a GitHub Actions workflow step that uploads all Verify *.received.* files as artifacts when a build fails. Uses the actions/upload-artifact@v4 action and a conditional if: failure() to ensure files are only uploaded on test failures. Inputs: the build system and file pattern; Output: downloaded artifact of failed snapshots for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\\n  if: failure()\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: verify-test-results\\n    path: |\\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: This XML snippet should be added to the project's `.csproj` file to enable the Implicit Usings feature available in newer .NET SDKs. Enabling this simplifies code by automatically including common global using directives, which is assumed by the documentation examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider/ReSharper\nDESCRIPTION: Settings configuration to disable the orphaned process detection feature in Rider/ReSharper, which would otherwise interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Implementation in Expecto\nDESCRIPTION: Implementation of verification checks using Expecto testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify Expecto NuGet Packages via CLI\nDESCRIPTION: This command uses the dotnet CLI to add the necessary NuGet packages (YoloDev.Expecto.TestSdk, Expecto, Verify.Expecto) to the current .NET test project for integrating VerifyTests with the Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the Verify.DiffPlex plugin using a module initializer. This configures Verify to use DiffPlex for comparing text differences when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project using the dotnet CLI\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to respect Verify's text file conventions for verified and received files, ensuring consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test class showing how to implement a basic verification test using Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Targets in TUnit\nDESCRIPTION: Implementation example of explicit targets in TUnit testing framework. Shows TUnit-specific verification patterns.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/explicit-targets.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nExplicitTargetsTUnit\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Staging Directory in Azure DevOps\nDESCRIPTION: This task copies all *.received.* files to the artifact staging directory when the publishverify flag is set. It's necessary because PublishBuildArtifacts doesn't support wildcards directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for enhanced text comparison with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Verification Test with Expecto and F#\nDESCRIPTION: A sample F# test using Expecto and Verify.Expecto to verify the output of a method. This demonstrates the basic pattern of creating a verification test with the findPerson test case.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified text files. Sets all verified text files to use LF line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters in TUnit Tests (Instance Method)\nDESCRIPTION: Demonstrates how to hash parameters for use in the verified file name using an instance method approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseParametersHash();\nawait Verifier.Verify(\"Foo\", settings);\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for MSTest and Verify testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML configuration copies all .received files to the artifact staging directory. It's conditional on the publishverify flag being set to 'Yes'. This step is necessary because PublishBuildArtifacts doesn't support wildcards.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in Fixie Test (C#)\nDESCRIPTION: Implements a Fixie test to invoke VerifyChecks, ensuring project and snapshot conventions are validated. This C# class requires the Verify.Checks library as a dependency and is placed within a test project. The 'Run' method passes the current assembly to VerifyChecks.Run to check configuration compliance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    public Task Run() =>\\n        VerifyChecks.Run(GetType().Assembly);\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages with .NET CLI\nDESCRIPTION: Commands to add the required NuGet packages (TUnit and Verify.TUnit) to a test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Guid Scrubbing (Instance) in C#\nDESCRIPTION: This snippet shows how to enable scrubbing of inline guids for a specific instance in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.ScrubInlineGuids();\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify\nDESCRIPTION: Basic example showing how to write a test using Verify with XunitV3. It demonstrates finding a person object from a test class and verifying its contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Expecto (C#)\nDESCRIPTION: This C# snippet demonstrates how to create an Expecto test that runs Verify's convention checks using `VerifyChecks.Run()`. This test verifies that the project adheres to recommended conventions, such as `.gitignore` settings for snapshot files, using the current test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Project file setting to enable implicit usings, which allows direct usage of Verify() method without fully qualifying it with the Verifier class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Snapshot Tool via dotnet CLI - Shell\nDESCRIPTION: This shell command installs the verify.tool, a global dotnet tool for managing test snapshot files from the command line. After installation, the verify tool can be invoked globally for manual snapshot approval and inspection tasks. Only requires the dotnet CLI and internet access; no input parameters. The command outputs installation status or errors if unsuccessful.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Task for Publishing Verify Artifacts\nDESCRIPTION: YAML configuration for Azure DevOps to publish Verify's *.received.* files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding the Verify.DiffPlex NuGet Package - Shell\nDESCRIPTION: Adds the Verify.DiffPlex package via the dotnet CLI to enhance text differencing in snapshot tests. This package is optional but recommended for improved text comparison visualization. Requires the .NET SDK and access to the test project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: MSTest implementation for running verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Tests with UsesVerifyAttribute\nDESCRIPTION: This comment describes multiple ways to mark MSTest classes for verification processing, using UsesVerifyAttribute or inheriting from VerifyBase.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Pure Method Usage via .editorconfig for Rider/ReSharper\nDESCRIPTION: Sets the `resharper_return_value_of_pure_method_is_not_used_highlighting` property to `error` in the `.editorconfig` file for C# files (`[*.cs]`). This configures Rider/ReSharper to report an error if the return value (e.g., a `Task`) of a method marked with `[Pure]`, such as `Verify()`, is not used (e.g., not awaited).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in MSTest (C#)\nDESCRIPTION: An MSTest test class (`VerifyChecksTests`) with a test method (`Run`) that executes `VerifyChecks.Run()`. This task checks if the project adheres to Verify's conventions, such as `.gitignore` and `.gitattributes` settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: NuGet package references needed to use Verify with MSTest, including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Personal Information Data Structure\nDESCRIPTION: Demonstrates a structured data format for storing personal information including given names, family name, spouse status, address, and date of birth. Uses a custom format with colon-separated key-value pairs.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/VerifyObjectSamples.ScopedSerializerFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: null,\n  Address: null,\n  Dob: 2000-10-01 +0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Input-Output Mappings - Data Structure - JSON\nDESCRIPTION: This code snippet defines a mapping between sets of three parameters (string, integer, boolean) and either test output identifiers or exception error messages. The mapping helps establish expected outcomes for parameterized test cases, where entering 'b' as the first parameter always yields an 'ArgumentException'. The data is formatted similarly to JSON or dictionary literals, and is intended to facilitate assertions in test frameworks for test verification. Inputs are (Letter, number, boolean), outputs are either a label or an error message; no executable logic is present, only data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.WithException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  A, 1, True : a1True,\\n  A, 1, False: a1False,\\n  A, 2, True : a2True,\\n  A, 2, False: a2False,\\n  A, 3, True : a3True,\\n  A, 3, False: a3False,\\n  b, 1, True : ArgumentException: B is not allowed.,\\n  b, 1, False: ArgumentException: B is not allowed.,\\n  b, 2, True : ArgumentException: B is not allowed.,\\n  b, 2, False: ArgumentException: B is not allowed.,\\n  b, 3, True : ArgumentException: B is not allowed.,\\n  b, 3, False: ArgumentException: B is not allowed.,\\n  C, 1, True : c1True,\\n  C, 1, False: c1False,\\n  C, 2, True : c2True,\\n  C, 2, False: c2False,\\n  C, 3, True : c3True,\\n  C, 3, False: c3False\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified and Received Text Files - editorconfig\nDESCRIPTION: This snippet ensures consistent editing conventions for verified or received files in any EditorConfig-enabled editor. Sets charset to UTF-8 BOM, enforces LF line endings, disallows trailing newline, disables indentation auto-formatting, and disables trimming trailing whitespace. Add this section to .editorconfig at the root of your repo. Targets files with specific extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \"utf-8-bom\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair in JSON\nDESCRIPTION: This JSON snippet defines a basic object with a single property named \"Value\" assigned the string \"Value1\". It likely serves as configuration data or test input/output for the verification process within the '/verifytests/verify' project context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/Snippets/ComplexParametersSample.ComplexMemberStructData_arg=Value1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value1\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent editing behavior for verified and received text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Named GUID - Instance Configuration\nDESCRIPTION: Shows how to configure named GUIDs for specific test instances.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task NamedGuidInstance()\n{\n    var settings = new VerifySettings();\n    var guid = new Guid(\"c8eeaf99-d5c4-4341-8543-4597c3fd40d9\");\n    settings.AddNamedGuid(guid, \"instanceNamed\");\n    return Verify(\n        new\n        {\n            value = guid\n        },\n        settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DateTimeOffset Conversion to UTC in C#\nDESCRIPTION: This test method demonstrates the conversion of a DateTimeOffset to UTC. It creates a DateTimeOffset with a specific offset and verifies that the UTC conversion results in the expected date and time values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimeOffsets_trailing.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[Fact]\npublic void DateTimeOffset_ToUniversalTime()\n{\n    var dateTimeOffset = new DateTimeOffset(2015, 12, 31, 23, 59, 59, TimeSpan.FromHours(2));\n    var universalTime = dateTimeOffset.ToUniversalTime();\n    Assert.Equal(2016, universalTime.Year);\n    Assert.Equal(1, universalTime.Month);\n    Assert.Equal(1, universalTime.Day);\n    Assert.Equal(TimeSpan.Zero, universalTime.Offset);\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for consistent handling of verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify received files in Azure DevOps pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Inline GUID Scrubbing - Fluent API\nDESCRIPTION: Shows how to enable inline GUID scrubbing using fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task ScrubInlineGuidsFluent() =>\n    Verify(\"content 651ad409-fc30-4b12-a47e-616d3f953e4c content\")\n        .ScrubInlineGuids();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, enhancing code quality and preventing misuse of Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex for Inline Diffs – Shell\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, enabling improved inline text diff visualization for failed verifies. This is an optional package used with .NET/C#, requiring prior installation of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation with TUnit\nDESCRIPTION: Example test class showing how to implement a basic verification test using TUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: This snippet demonstrates a basic test using the Verify framework with NUnit. It shows how to verify the output of a method by capturing its result and passing it to the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages to TUnit Project\nDESCRIPTION: Adding the necessary NuGet package references to a TUnit test project to enable Verify functionality. Requires TUnit and Verify.TUnit packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in Xunit\nDESCRIPTION: This snippet creates a test class to run VerifyChecks, ensuring all testing conventions are correctly followed. It depends on Verify library integration with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Tests (Fluent Method) - C#\nDESCRIPTION: Shows how to ignore parameters for verified tests using the fluent method syntax with xUnit. It uses method chaining to configure parameter ignoring.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerifiedFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(arg);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Globally Ignoring Members That Throw Custom Exceptions in C#\nDESCRIPTION: This snippet shows how to globally configure Verify to ignore members that throw a custom exception type during serialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/members-throw.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreMembersThatThrow<CustomException>();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool Globally\nDESCRIPTION: Install the Verify Terminal tool globally to manage snapshots via the command line. This tool helps to operate Verify processes outside the integrated development environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test implementation showing how to verify an object using TUnit and Verify framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify to Use UTF-8 Without BOM\nDESCRIPTION: Demonstrates how to disable byte order marks (BOM) in snapshot files by using the UseUtf8NoBom method in VerifierSettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/encoding.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.UseUtf8NoBom();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for XunitV3 and Verify\nDESCRIPTION: Specifies the required NuGet packages to add to the test project for using Verify with XunitV3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Publishing Staged Files as Artifacts in Azure DevOps\nDESCRIPTION: YAML task that publishes the staged *.received.* files as build artifacts. Only runs when the publishverify flag is set to 'Yes', making these files available for download from the Azure DevOps pipeline interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Settings for Verify\nDESCRIPTION: Example of configuring static settings for Verify using a Module Initializer. This demonstrates how to add a scrubber that replaces specific text in verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StaticSettings\n{\n    [Fact]\n    public Task Test() =>\n        Verify(\"String to verify\");\n}\n\npublic static class StaticSettingsUsage\n{\n    [ModuleInitializer]\n    public static void Initialize() =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"String to verify\", \"new value\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit, including test SDK, Verify.Xunit, and Xunit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit V3 NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit v3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Globally Including Obsolete Properties in Serialization Tests\nDESCRIPTION: This snippet shows how to globally configure VerifyTests to include obsolete properties in all serialization tests. This setting affects all tests in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/obsolete-members.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init()\n    {\n        VerifierSettings.IncludeObsoletes();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex using ModuleInitializer in C#\nDESCRIPTION: Shows how to enable the Verify.DiffPlex integration using a `ModuleInitializer` attribute in C#. The `Initialize()` method calls `VerifyDiffPlex.Initialize()` to register the DiffPlex comparer with Verify at assembly load time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() directly without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in .NET Core Projects\nDESCRIPTION: This XML configuration snippet enables implicit usings in a .NET Core project to allow simplified code syntax in examples, specifically for use with Verify and NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Marking All MSTest Classes for Verify via Assembly Attribute\nDESCRIPTION: Shows how to apply the `[assembly: UsesVerify]` attribute, typically in `AssemblyInfo.cs` or any C# file. This attribute signals to the Verify.MSTest source generator that all MSTest test classes within the assembly should be processed to enable Verify functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[assembly: UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration for Verify\nDESCRIPTION: YAML configuration for AppVeyor CI to capture and upload .received files as artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Staging Directory\nDESCRIPTION: Copies all *.received.* files to the artifact staging directory when publishverify flag is set. Uses CopyFiles task to stage files for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Add Verify.DiffPlex package\nDESCRIPTION: Includes the Verify.DiffPlex package which improves the text comparison by highlighting differences inline. This is useful for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Uploading Failed Verify Test Results in GitHub Actions\nDESCRIPTION: YAML configuration for GitHub Actions workflow that uploads *.received.* files as artifacts when tests fail. This allows for inspection of test failures in the GitHub Actions interface. Uses the conditional 'if: failure()' to trigger only when tests don't pass.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify NuGet Packages - csproj\nDESCRIPTION: Specifies required NuGet packages to add to the test project's .csproj for Fixie and Verify.Fixie integration. Add these PackageReference nodes within your test project's project file to install the right versions. Both packages are necessary to enable test authoring with Fixie and snapshot verification with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Fixie\\\" Version=\\\"4.1.0\\\" />\\n<PackageReference Include=\\\"Verify.Fixie\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test implementation using Verify with Fixie test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JsonAppender Output Example with Text Content\nDESCRIPTION: This shows the verified output file that includes both the original content and the appended JSON content from the JsonAppender.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/jsonappender.source.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Key\": \"Value\",\n  \"Value\": \"content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex for Text Comparison\nDESCRIPTION: This C# code block initializes Verify.DiffPlex, an extension for the Verify library that enhances text diff comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File - XML\nDESCRIPTION: This XML configuration enables Implicit Usings in the project. Implicit Usings reduce required using statements in code samples, simplifying test code. Add this property to the project file (e.g., .csproj) to ensure code samples compile as shown.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Example of an Xunit test method using Verify to perform snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verifier.Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify files in Azure DevOps build pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example of inheriting from VerifyBase in an MSTest class to simplify usage of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: Test class implementation for checking if all verification conventions are properly set up in the project using Fixie as the test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Files in xUnit (Fluent)\nDESCRIPTION: Shows a fluent approach to ignoring parameters when naming verified files in xUnit. This method chains the IgnoreParametersForVerified call directly to the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerifiedFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(arg);\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks for Fixie\nDESCRIPTION: Create a test class to run VerifyChecks, which ensures that all conventions are followed. This is important for maintaining consistency in verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool for Command-Line Snapshot Management\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which provides command-line capabilities for managing snapshots without an IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for MSTest Verify Tests\nDESCRIPTION: This snippet shows the NuGet package references required for setting up Verify with MSTest in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex integration for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Case Insensitivity in Recording with C#\nDESCRIPTION: Demonstrates that Recording ignores case when adding values. Different cases of the same key are treated as separate entries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task Case()\n{\n    Recording.Start();\n    Recording.Add(\"name\", \"value1\");\n    Recording.Add(\"Name\", \"value2\");\n    return Verify(\"TheValue\");\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps: Publishing Received Files as Artifacts\nDESCRIPTION: YAML configuration for Azure DevOps to publish .received files as build artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified/Received Files\nDESCRIPTION: This EditorConfig snippet configures how editors handle received/verified files across json, txt, and xml extensions. It sets BOM encoding, LF line endings, disables final newline insertion, and disables whitespace trimming. Helps maintain verified files in a canonical format, reducing diffs due to editor settings. No code execution, purely configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: Example of a sample test using Verify with Expecto. This demonstrates how to write and run a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testList \"Sample\" [\n        testCase \"Test\" <| fun () ->\n            task {\n                let! result = Verifier.Verify(\"Hello World!\")\n                test <@ result.Received = \"Hello World!\" @>\n            }\n            |> Async.AwaitTask\n            |> Async.RunSynchronously\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for enabling verification testing with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text difference highlighting in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages to Project\nDESCRIPTION: Required NuGet package references to be added to the test project's csproj file to use TUnit with Verify. The snippet includes the specific version numbers needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files on Test Failure\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail, aiding in debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for NUnit and Verify\nDESCRIPTION: This snippet shows the XML configuration for adding the required NuGet packages to the test project. It includes packages for NUnit, Verify, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify\nDESCRIPTION: Adding received files to .gitignore to exclude them from source control, as only the verified files should be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Azure DevOps Artifacts\nDESCRIPTION: Defines an Azure DevOps `PublishBuildArtifacts@1` task that publishes files as build artifacts. It runs conditionally (`condition: eq(variables['publishverify'], 'Yes')`) and publishes the contents of `$(Build.ArtifactStagingDirectory)/Verify` (containing the `*.received.*` files) under the artifact name `Verify`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Verifying DateTime Equality in C#\nDESCRIPTION: This test case checks the equality of two DateTime objects. It creates two DateTime instances with the same values and asserts that they are equal using the Assert.AreEqual method.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineDateTimesWrappedInNewLine.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nDateTime_1\n\n[Test]\npublic void VerifyTest()\n{\n    DateTime dt1 = new DateTime(2009, 9, 1, 9, 0, 0);\n    DateTime dt2 = new DateTime(2009, 9, 1, 9, 0, 0);\n    Assert.AreEqual(dt1, dt2);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration for enabling implicit usings in the project file. This enables simplified code syntax by automatically including common namespaces, allowing direct use of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase with MSTest\nDESCRIPTION: Example showing how to inherit from VerifyBase to enable Verify functionality in an MSTest test class, which is one way to mark tests as using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultValueHandling for F# Option Types\nDESCRIPTION: Sets up the verifier to include Option.None values in serialization by changing DefaultValueHandling to Include.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/fsharp.md#2025-04-22_snippet_1\n\nLANGUAGE: fsharp\nCODE:\n```\nVerifierSettings.AddExtraSettings(fun settings -> settings.DefaultValueHandling <- DefaultValueHandling.Include)\n```\n\n----------------------------------------\n\nTITLE: Using Extension-Based File Converter in C#\nDESCRIPTION: Demonstrates how to verify a TIFF file using the extension-based converter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nawait VerifyFile(\"sample.tif\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration (C#)\nDESCRIPTION: Shows the C# code required to activate the Verify.DiffPlex integration. It uses a `[ModuleInitializer]` attribute on a static method to call `VerifyDiffPlex.Initialize()` at assembly load time, enabling its enhanced text comparison features.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using MSTest with Verify\nDESCRIPTION: Shows how to use Verify with MSTest framework. The test verifies a ClassBeingTested instance by comparing its serialized form against a stored snapshot file.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task Test()\n{\n    var person = new ClassBeingTested\n    {\n        Title = \"Mr\",\n        Name = \"John Smith\",\n        Age = 10\n    };\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateException Structure in JSON\nDESCRIPTION: A JSON structure representing an AggregateException with two inner Exception objects. The structure includes the exception type (AggregateException), an array of inner exceptions each with their own type and message, and a stack trace pointing to ThrowsTests.MethodThatThrowsAggregate().\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsAggregate.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: AggregateException,\n  InnerExceptions: [\n    {\n      Type: Exception,\n      Message: The Message1\n    },\n    {\n      Type: Exception,\n      Message: The Message2\n    }\n  ],\n  StackTrace: at ThrowsTests.MethodThatThrowsAggregate()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for text comparison in Verify tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit NuGet Packages for Verify Testing\nDESCRIPTION: NuGet package references needed for using Verify testing framework with TUnit. These packages provide the core verification functionality and TUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"*\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Verify File Conventions with Expecto - C#\nDESCRIPTION: This C# test class uses Expecto and VerifyChecks to programmatically verify that test file conventions (such as inclusion/exclusion and encoding) are followed in the test assembly. It defines a static test by invoking VerifyChecks.Run with the assembly reference. Requires the Verify.Expecto package and Expecto attributes. Add to your test suite to help enforce repository standards.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Tests]\\n    public static Test verifyChecksTest = Runner.TestCase(\\n        nameof(verifyChecksTest),\\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Azure DevOps Artifacts\nDESCRIPTION: Azure DevOps pipeline task to publish the staged received files as build artifacts when tests fail, making them accessible for review in the pipeline results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Instances in Verify Tests (C#)\nDESCRIPTION: Demonstrates how to ignore instances of a type based on a delegate in Verify tests. Includes both local settings and fluent API approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreInstanceTarget\n{\n    ToIgnore = new()\n    {\n        Property = \"Ignore\"\n    },\n    ToInclude = new()\n    {\n        Property = \"Include\"\n    }\n};\nvar settings = new VerifySettings();\nsettings.IgnoreInstance<Instance>(_ => _.Property == \"Ignore\");\nreturn Verify(target, settings);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = new IgnoreInstanceTarget\n{\n    ToIgnore = new()\n    {\n        Property = \"Ignore\"\n    },\n    ToInclude = new()\n    {\n        Property = \"Include\"\n    }\n};\nreturn Verify(target)\n    .IgnoreInstance<Instance>(_ => _.Property == \"Ignore\");\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie\nDESCRIPTION: Adds the necessary NuGet packages to the test project for using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"3.*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.*\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with XUnit\nDESCRIPTION: Example test implementation showing how to use Verify with XUnit to test a class method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verified Output for Scrubber Levels in Verify .NET (Plain Text)\nDESCRIPTION: Provides example verified output for a test suite demonstrating method, class, and global scrubbers in action within the Verify .NET framework. Illustrates the result after all selected scrubbing has occurred.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\napi-key: scrubbed\ntoken: scrubbed\n```\n\n----------------------------------------\n\nTITLE: Default JSON Serializer Settings\nDESCRIPTION: Defines the default JsonSerializerSettings used by Verify including formatting, reference loop handling, and default value handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new JsonSerializerSettings\n{\n    Formatting = Formatting.Indented,\n    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,\n    DefaultValueHandling = DefaultValueHandling.Ignore\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty JSON Configuration\nDESCRIPTION: An empty JSON object used as a placeholder or base configuration structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.EmptyDictionaryProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to set up Verify with Expecto in a test project. Includes YoloDev.Expecto.TestSdk for test discovery, Expecto for the testing framework, and Verify.Expecto for snapshot testing integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project with Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to enable Verify with Fixie. It configures the test environment for Verify and handles test execution with proper state management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the Verify.DiffPlex integration using a module initializer. This enables enhanced diff visualization for text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Name\nDESCRIPTION: Demonstrates how to specify a custom file name using VerifySettings instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseFileName(\"CustomFileName\");\nawait Verify(\"valueUseFileName\", settings);\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic NUnit Test with Verify\nDESCRIPTION: A sample NUnit test that demonstrates how to use Verify to test an object's state. The test retrieves a person object and verifies its state against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Method That Throws an Exception (Task) in C#\nDESCRIPTION: This snippet defines an asynchronous method that throws an exception after a delay, returning a Task.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nstatic async Task MethodThatThrowsTask()\n{\n    await Task.Delay(1);\n    throw new(\"The Message\");\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: XUnit test implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify.Expecto in F#\nDESCRIPTION: F# code demonstrating a sample test using Verify.Expecto to verify the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: This snippet demonstrates how to run Verify checks using Expecto. It creates a test case that calls VerifyChecks.Run() on the assembly containing the test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Adds the `Verify.DiffPlex` NuGet package to the test project using the dotnet CLI. This package enhances text comparison failures by highlighting differences inline within the exception message, which can be clearer than seeing the full received and verified strings separately, especially for large text.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks in Fixie (C#)\nDESCRIPTION: Shows a Fixie test class `VerifyChecksTests` that runs Verify's built-in convention checks using `VerifyChecks.Run()`. This helps ensure that project settings (like `.gitattributes` and `.editorconfig`) align with Verify's expectations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GUID Sanitization Example in C#\nDESCRIPTION: Demonstrates basic GUID sanitization functionality where multiple GUIDs are converted to numbered placeholders for consistent testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar guid = Guid.NewGuid();\nvar target = new GuidTarget\n{\n    Guid = guid,\n    GuidNullable = guid,\n    GuidString = guid.ToString(),\n    OtherGuid = Guid.NewGuid()\n};\n\nawait Verify(target);\n```\n\n----------------------------------------\n\nTITLE: Instance-level Strict JSON Configuration\nDESCRIPTION: Demonstrates how to configure strict JSON settings for a specific verification instance using VerifySettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar target = new TheTarget\n{\n    Value = \"Foo\"\n};\nvar settings = new VerifySettings();\nsettings.UseStrictJson();\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify\nDESCRIPTION: C# code implementing ITestProject and IExecution interfaces to configure Fixie for use with Verify, including target assembly assignment and test execution wrapping.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Address Data and Exception Mapping - Plain Text\nDESCRIPTION: This snippet demonstrates various input combinations for address creation or validation routines and maps them to the expected exception messages such as ArgumentException, ArgumentNullException, and ArgumentOutOfRangeException. Inputs include numeric values for 'number', optional 'street', and optional 'city'. Dependencies may include data validation libraries or custom datatype constraints baked into application logic. The snippet serves as a quick reference for required validation paths, outlining accepted input boundaries and documenting the error responses for invalid or missing data fields.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationSample.BuildAddressExceptionsTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\\n  -1,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  -1,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  -1,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  -1,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  -1, Valid St, null      : ArgumentNullException: Value cannot be null. (Parameter 'city').,\\n  -1, Valid St, Valid City: ArgumentOutOfRangeException: number ('-1') must be greater than or equal to '1'. (Parameter 'number'). Actual value was -1.,\\n   0,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n   0,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n   0,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n   0,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n   0, Valid St, null      : ArgumentNullException: Value cannot be null. (Parameter 'city').,\\n   0, Valid St, Valid City: ArgumentOutOfRangeException: number ('0') must be greater than or equal to '1'. (Parameter 'number'). Actual value was 0.,\\n  10,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  10,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  10,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  10,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\\n  10, Valid St, null      : ArgumentNullException: Value cannot be null. (Parameter 'city').,\\n  10, Valid St, Valid City: 10 Valid St, Valid City\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DanglingSnapshots in NUnit\nDESCRIPTION: Configures one-time teardown to check for dangling snapshots using NUnit's OneTimeTearDown attribute. This ensures snapshot verification occurs after all tests have completed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dangling-files.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable VerifyDanglingSnapshots\n\n[SetUpFixture]\npublic static class SetUp\n{\n    [OneTimeTearDown]\n    public static void Run() =>\n        DanglingSnapshots.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool via .NET CLI\nDESCRIPTION: Command to install the DiffEngineTray global tool using the .NET CLI. DiffEngineTray is used for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Git\nDESCRIPTION: A `.gitignore` pattern to prevent `*.received.*` files (generated by Verify during tests) from being committed to source control. These files represent the actual output of a test run and are typically transient.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: AppVeyor configuration for handling failed tests and artifacts\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison results in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts in GitHub Actions when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: NUnit test fixture to run the VerifyChecks.Run() method, which validates that all project conventions for the Verify framework are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Namer Runtime Information\nDESCRIPTION: Shows how to access the current runtime and runtime version information from the Namer class. This is useful when implementing custom logic based on the runtime environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nDebug.WriteLine(Namer.Runtime);\nDebug.WriteLine(Namer.RuntimeAndVersion);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sample Test with Verify and Expecto\nDESCRIPTION: F# code demonstrating a sample test using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Verify Checks in Expecto Tests\nDESCRIPTION: Example of implementing VerifyChecks.Run() in an Expecto test to validate that all conventions are being followed. This checks that the environment is properly configured for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using Expecto with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: Provides EditorConfig settings (`charset`, `end_of_line`, `insert_final_newline`, etc.) for various text-based received and verified file extensions (`.json`, `.txt`, `.xml`). This helps maintain consistent formatting (UTF-8 with BOM, LF line endings, no trailing newline) when editing these files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Text Comparison in Initialize Module - C#\nDESCRIPTION: This C# snippet enables the DiffPlex plugin for the Verify library by running VerifyDiffPlex.Initialize() in a module initializer. Requires the Verify.DiffPlex package. Use this code in any static class to set up enhanced inline text diffing; it runs before other static initialization. Expects .NET 5+ for [ModuleInitializer] and that Verify.DiffPlex is included as a dependency. No function parameters; side-effect is global Verify configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit and Verify NuGet Packages via .NET CLI\nDESCRIPTION: This command adds the essential NuGet packages required for running NUnit tests with VerifyTests integration using the .NET CLI. It includes the Test SDK, NUnit framework, NUnit test adapter, and the core Verify.NUnit package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: Code snippet showing how to run verification checks using TUnit. This validates that all conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example of using VerifyBase class in MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: InlineData Usage with XUnit V3\nDESCRIPTION: Demonstrates basic usage of XUnit's InlineData attribute for parameterized testing with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task InlineDataUsage(string arg) =>\n    Verify(arg);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for more concise code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in Fixie\nDESCRIPTION: Sample code showing how to implement convention checks using VerifyChecks.Run() in a Fixie test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Stopped Recording\nDESCRIPTION: Displays the verified output when stopping Recording and manually verifying the filtered data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\n[\n  {\n    name2: value2\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Display\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension which changes text compare results to highlight differences inline, making it easier to identify discrepancies in large text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal CLI tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and Fixie NuGet Packages – Shell\nDESCRIPTION: Demonstrates using the .NET CLI to add both Fixie and Verify.Fixie packages to a test project. These packages are necessary for integrating the Fixie test runner with Verify snapshot testing. Execute the commands in the test project directory; they require .NET SDK installed and access to NuGet.org.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Creating a Verify Conventions Check Test in XunitV3\nDESCRIPTION: An XunitV3 test class that runs VerifyChecks.Run() to ensure all Verify conventions are correctly implemented in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks with TUnit\nDESCRIPTION: Test class implementation to run Verify convention checks using TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enable implicit usings in .NET project\nDESCRIPTION: Adds a setting to enable implicit usings in .NET projects to reduce boilerplate. This is required to compile the provided examples without explicitly including every used namespace.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: This YAML task publishes the staged .received files as build artifacts. Like the CopyFiles task, it only executes when the publishverify flag is set to 'Yes', making the test failure artifacts available for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Displaying Serialization Result for Exception Message Property in C#\nDESCRIPTION: Shows the result of serialization after configuring Verify to ignore members that throw exceptions based on type and expression. This snippet demonstrates the output format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/members-throw.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Property: 1,\n  Throws: \"Exception message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto and Verify\nDESCRIPTION: NuGet package references required for using Verify with Expecto testing framework, including YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in .NET Project\nDESCRIPTION: Shows the `PackageReference` XML element needed in a `.csproj` file to add the `Verify.DiffPlex` NuGet package. This package enhances text comparison by showing inline differences instead of separate files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Value Enforcement\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where Verify() calls aren't awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool\nDESCRIPTION: Command to install DiffEngineTray as a global .NET tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: Setting ImplicitUsings property to enable in project file to simplify code by allowing direct Verify() calls instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex package to enhance text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Verify Test with TUnit\nDESCRIPTION: Sample TUnit test class demonstrating how to use Verify. Shows how to test a method and verify its output using the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: MSTest implementation for running verification checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally. This optional tool allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Failure Artifact Configuration\nDESCRIPTION: PowerShell script for AppVeyor to collect and push received files as artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: Sets EditorConfig rules for verified and received text files (`.json`, `.txt`, `.xml`) to maintain specific formatting: UTF-8 with BOM charset, `lf` line endings, and no final newline. This ensures editor consistency when modifying these files. Users are advised to add other text extensions as required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto Testing\nDESCRIPTION: The necessary NuGet package references to add to an F# project file for using Verify with Expecto test framework. This includes YoloDev.Expecto.TestSdk, Expecto, an updated FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Implementation\nDESCRIPTION: Example NUnit test implementation using Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output for failed verifications by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: DataRow Usage in MSTest\nDESCRIPTION: Shows how to use DataRow attribute in MSTest for parameterized testing. This snippet demonstrates passing different values to a test method using DataRow.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"Value1\")]\n[DataRow(\"Value2\")]\npublic Task DataRowUsage(string arg) =>\n    Verify(arg);\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts\nDESCRIPTION: This YAML task publishes the staged *.received.* files as build artifacts when the publishverify flag is set to 'Yes'. This makes the files available for inspection in the Azure DevOps pipeline results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: This snippet shows a sample Expecto test using Verify. It demonstrates how to create a test that finds a person and verifies the result using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Code to initialize Verify.DiffPlex using a module initializer to enhance text comparison functionality in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control\nDESCRIPTION: Adds a pattern to the `.gitignore` file to prevent `*.received.*` files (generated by Verify during tests) from being committed to source control. It also mentions optionally including `*.received/` if using `UseSplitModeForUniqueDirectory`. All `*.verified.*` files should be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initialize VerifyDiffPlex Module in C#\nDESCRIPTION: This C# snippet shows how to initialize the VerifyDiffPlex module using a ModuleInitializer. VerifyDiffPlex enhances text comparison by highlighting differences inline, which improves clarity when verifying large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Fixie test configuration with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline: Copy Verify Received Files - yaml\nDESCRIPTION: Azure DevOps YAML task that copies any '*.received.*' snapshot files to an artifact staging directory if 'publishverify' variable is set to 'Yes'. Cleans the target folder before copying and overwrites existing files. Typically follows the variable-setting step in the pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\\n  condition: eq(variables['publishverify'], 'Yes')\\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\\n  inputs:\\n    contents: '**/*.received.*' \\n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\\n    cleanTargetFolder: true\\n    overWrite: true\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to set up DiffPlex for use with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using a Subset of Parameters in TUnit Tests\nDESCRIPTION: Shows how to use a subset of parameters with UseParameters() in Verify.TUnit tests. This results in a file name that includes only the specified parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\", \"Value2\", \"Value3\")]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    var somethingToVerify = $\"{arg1} {arg2} {arg3} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Capturing Combination Test\nDESCRIPTION: Example of capturing exceptions in combination tests using captureExceptions flag.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSample_CaptureExceptions\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify XUnit V3\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, Verify.XunitV3, and XUnit V3 packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced difference visualization in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Testing DateOnly Handling with Verify in C#\nDESCRIPTION: Shows how to test DateOnly type handling in the Verify framework. It creates a simple DateOnly object and verifies its serialization behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.Run_square.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task DateOnly()\n{\n    var dateOnly = new DateOnly(2000, 1, 1);\n    return Verifier.Verify(dateOnly);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with XUnit, demonstrating how to verify the output of a method under test\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Fixie\nDESCRIPTION: Commands to add the required NuGet packages (Fixie and Verify.Fixie) to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified and Received Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: NuGet package references to add to your test project for using Verify with TUnit. This includes the TUnit framework and the Verify.TUnit integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a C# module initializer. This ensures that DiffPlex is used for text comparisons by Verify throughout the test assembly, replacing the default behavior. Requires the Verify.DiffPlex NuGet package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n```cs\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Scrubbed XML Member Output\nDESCRIPTION: Displays the result of scrubbing an XML member during verification. This snippet shows the verified XML with the 'node' element's content replaced by 'Scrubbed'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <node>Scrubbed</node>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Verify.XunitV3 and xunit.v3 with prerelease dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an XUnit v3 test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a C# Conversion Lambda Expression\nDESCRIPTION: This configuration snippet defines an 'expression' property whose value is a C# lambda expression. The lambda `source => Convert(source.Message)` takes a source object, accesses its 'Message' property, and applies an assumed 'Convert' method. This structure is likely used to configure data mapping or transformation rules, potentially within a framework like Verify Testing, as indicated by the project path '/verifytests/verify'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ExpressionStringNested.Net.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  expression: source => Convert(source.Message)\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation with Fixie\nDESCRIPTION: Test class implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor for Verify Artifacts\nDESCRIPTION: PowerShell script to push *.received.* files as artifacts in AppVeyor on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: Enables implicit usings in the project file to simplify code and ensure examples compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: This C# snippet is a sample NUnit test using the Verify library. It demonstrates finding a person object and verifying it within a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Expecto and Verify NuGet Packages in F# Project\nDESCRIPTION: This snippet shows the NuGet package references to add to the F# test project for using Expecto and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex Module Initializer - C#\nDESCRIPTION: This snippet defines a module initializer for the Verify.DiffPlex integration in a C# project. The static Initialize method invokes VerifyDiffPlex.Initialize, enabling enhanced diff output in test failures. Requires the Verify.DiffPlex package as a dependency, and .NET 5+ or explicit use of ModuleInitializer (with System.Runtime.CompilerServices). No parameters are expected; its output is the change in behavior for diff presentation during test verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample MSTest Verification Test\nDESCRIPTION: Shows a basic example of a verification test using MSTest, where a person object is retrieved from a class and then verified using the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding F# Converters to Argon Settings in F#\nDESCRIPTION: This snippet shows how to add F# converters to Argon's VerifierSettings to properly serialize F# types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/fsharp.source.md#2025-04-22_snippet_0\n\nLANGUAGE: fs\nCODE:\n```\nVerifierSettings.AddExtraSettings(fun settings -> settings.AddFSharpConverters())\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify .received Files on GitHub Actions Failure - YAML\nDESCRIPTION: This YAML snippet can be inserted into your GitHub Actions workflow to upload all *.received.* files as artifacts if any test fails. It uses the actions/upload-artifact action with a condition for failure(). Name and path are customizable; this facilitates debugging by examining failed verification outputs in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\\n  if: failure()\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: verify-test-results\\n    path: |\\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent Enumerable Ordering in C#\nDESCRIPTION: Sets up fluent ordering for IEnumerable items using a specified key selector.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar person1 = new Person(\"b\");\nvar person2 = new Person(\"a\");\nawait Verify(new List<Person> {person1, person2})\n    .OrderEnumerableBy<Person>(_ => _.Name);\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Xunit Test with Verify\nDESCRIPTION: Example of a simple Xunit test class that uses Verify to test the output of a method call against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test to Check Verify Conventions\nDESCRIPTION: A TUnit test that runs VerifyChecks.Run() to validate that all conventions required by Verify are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JSON Object with Property and Disposed State\nDESCRIPTION: A JSON object structure that includes a generic Property with an unspecified Value and a Disposed property set to false. This represents a simple data structure that could be used for object serialization or configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.FuncOfTaskResultDisposable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value,\n  Disposed: false\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps: Copy Received Files to Artifact Staging (YAML)\nDESCRIPTION: This YAML pipeline step copies all received snapshot files ('*.received.*') to the Artifact Staging directory only if the custom 'publishverify' variable is 'Yes'. It prepares test output files for later publication as artifacts. Place this step after variable setting and before the publish step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\\n  condition: eq(variables['publishverify'], 'Yes')\\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\\n  inputs:\\n    contents: '**/*.received.*' \\n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\\n    cleanTargetFolder: true\\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control – Gitignore\nDESCRIPTION: Shows the .gitignore rule to exclude all \\*.received.* files from version control. These files are generated by Verify during test failure and should not be committed. Add this line to your repository's .gitignore to avoid clutter and accidental commits.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for better text difference visualization in verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verify Example Output with Type Information\nDESCRIPTION: Shows the serialized output when TypeNameHandling is set to All. The output includes the full type name ($type) along with the object properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n{\n  $type: VerifyObjectSamples.Person,\n  GivenNames: John,\n  FamilyName: Smith\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: A simple example of a Verify test using Xunit, demonstrating how to verify the output of a method against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set end-of-line and encoding attributes for verified text files to ensure consistent formatting across different systems.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in Xunit V3 Test (C#)\nDESCRIPTION: Implements a basic xUnit test that calls VerifyChecks.Run(), which checks project convention compliance for Verify usage. Relies on the Xunit [Fact] attribute and the VerifyChecks static class. No parameters; passes/fails based on project state and conventions. Prerequisites: VerifyChecks available, xUnit V3 NuGet packages installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: This YAML snippet sets a flag to publish Verify *.received.* files when the test step fails in Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Include Directive in JSON\nDESCRIPTION: A simple JSON configuration that includes the value '2', likely referencing another test file or configuration to be included in the verification test suite.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.JObjectIgnore.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Include: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: MSBuild property setting to enable implicit usings for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Exclude Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved text difference visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the required NuGet packages Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Array in JSON\nDESCRIPTION: An empty JSON array that may serve as a placeholder or initial configuration for verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.EnumerableStaticEmpty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Defining File and Directory Paths in JSON Configuration\nDESCRIPTION: A JSON configuration object that specifies a file path and a directory path using Windows-style notation. The paths are defined as string values with drive letter and forward slashes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.PathInfos.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  file: c:/foo/bar.txt,\n  directory: c:/foo/bar/\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML snippet copies Verify *.received.* files to the Artifact Staging directory in Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Testing DateTimeOffset Parsing from String in C#\nDESCRIPTION: This snippet tests the parsing of a DateTimeOffset from a string representation. It verifies that the parsed value matches the expected date, time, and offset components.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDateTimeOffsets_trailing.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void Parse_1b()\n{\n    var dto = DateTimeOffset.Parse(\"2009-06-15T13:45:30.0900000-07:00\");\n    Assert.That(dto.DateTime, Is.EqualTo(new DateTime(2009, 6, 15, 13, 45, 30, 90)).Within(TimeSpan.FromTicks(1)));\n    Assert.That(dto.Offset, Is.EqualTo(TimeSpan.FromHours(-7)));\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TestContext Property Implementation for MSTest Verification\nDESCRIPTION: Auto-generated partial class implementation that provides a TestContext property with getter and setter methods. The property interfaces with VerifyMSTest.Verifier's CurrentTestContext for test execution handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/GlobalNamespaceTests.HasAttributeOnClass.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Foo\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running VerifyTests Conventions Check with TUnit\nDESCRIPTION: A TUnit test that calls VerifyChecks.Run() to verify that all conventions are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunVerifyChecks() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Fixie\nDESCRIPTION: Commands to add the required NuGet packages for Verify and Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: This task publishes the staged .received files as build artifacts when the publishverify flag is set. It uses a container as the publish location and names the artifact 'Verify'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add necessary NuGet packages for using Verify with XUnit v3 in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Subset with XUnit V3\nDESCRIPTION: Shows how to use a subset of method parameters for file naming, matching parameters from the start of the method signature.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\", \"Value2\", \"Value3\")]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    var somethingToVerify = $\"{arg1} {arg2} {arg3} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Command to add the Verify.DiffPlex package which provides enhanced text difference visualization for failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: CurrentFile Utility for Path Resolution\nDESCRIPTION: The CurrentFile utility class provides methods for finding paths relative to the current source file. It includes methods to get the current file path, directory, and to resolve relative paths.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing IOPath = System.IO.Path;\n\nnamespace VerifyTests;\n\npublic static class CurrentFile\n{\n    public static string Path([CallerFilePath] string file = \"\") =>\n        file;\n\n    public static string Directory([CallerFilePath] string file = \"\") =>\n        IOPath.GetDirectoryName(file)!;\n\n    public static string Relative(string relative, [CallerFilePath] string file = \"\")\n    {\n        var directory = IOPath.GetDirectoryName(file)!;\n        return IOPath.Combine(directory, relative);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Orphaned Process Detection in Solution DotSettings - xml\nDESCRIPTION: Configures JetBrains Rider or ReSharper to disable warnings about child processes spawned by test runners by adding this to the DotSettings file. Necessary when Verify launches external diff tools, preventing dialogs about non-terminated processes after tests complete.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\\\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\\\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Comparing Date/Time Values with Before and After\nDESCRIPTION: A simple string that demonstrates a date/time value followed by an 'after' indicator, potentially used in verification testing to compare timestamp values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineDateTimesWrappedInLetters.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbeforeDateTime_1after\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie in C#\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase in MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify's convention checks using XUnit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Azure DevOps Variable on Test Failure - YAML\nDESCRIPTION: A YAML snippet for Azure DevOps pipelines to create a variable if the MSTest step fails, used to control conditional publishing of Verify '.received.*' files. Must be added after the test runner step in an Azure DevOps YAML pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\\n  condition: failed()\\n  inputs:\\n    script: 'echo \\\"##vso[task.setvariable variable=publishverify]Yes\\\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Flag for Verify Tests in Azure DevOps YAML\nDESCRIPTION: This YAML snippet adds a build step to set a flag if the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for NUnit testing with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Checks\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, helping catch cases where Verify() calls are not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to publish Verify's received files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Artifacts in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to publish the staged Verify artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Sample implementation showing how to inherit from VerifyBase for verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to the project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML setting to enable Implicit Usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit and Verify Packages in C# Project\nDESCRIPTION: This snippet illustrates how to include Xunit and Verify packages in a C# project file using NuGet PackageReference format. Required packages include Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio. This setup is crucial for enabling testing frameworks in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Artifact Push on Failure\nDESCRIPTION: This PowerShell snippet is used in an AppVeyor build step to push 'received' files as artifacts upon build failure, thereby assisting in troubleshooting failed tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps Pipeline\nDESCRIPTION: This YAML snippet adds a build step to set a flag if the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks with Fixie\nDESCRIPTION: A Fixie test class that runs VerifyChecks to ensure conventions are followed in the test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results with GitHub Actions on Failure\nDESCRIPTION: YAML configuration that uploads *.received.* files as artifacts when tests fail in GitHub Actions workflows. This helps with debugging failed verification tests by making the received files available for examination.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: This task publishes the staged *.received.* files as build artifacts when the publishverify flag is set. These artifacts can be downloaded for inspection to debug test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for configuring Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit V3 NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit V3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files. Ensures UTF-8 with BOM encoding, line-feed line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Text Comparison for Verify.NUnit - Bash\nDESCRIPTION: This command installs the Verify.DiffPlex extension package using the .NET CLI, enabling an improved inline diff presentation when verification fails. Prerequisite: Existing .NET test project. The package is optional but recommended for more readable failure diagnostics in string/content assertion scenarios.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with MSTest\nDESCRIPTION: Test class implementation for running Verify convention checks using MSTest framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Named GUID - Inferred Names\nDESCRIPTION: Demonstrates how to use inferred names for GUIDs based on variable names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task InferredNamedGuidFluent()\n{\n    var namedGuid = new Guid(\"c8eeaf99-d5c4-4341-8543-4597c3fd40d9\");\n    return Verify(\n            new\n            {\n                value = namedGuid\n            })\n        .AddNamedGuid(namedGuid);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# module initializer for enabling Verify.DiffPlex integration, which provides inline highlighting of text differences in test failure output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test with Fixie\nDESCRIPTION: Test class implementation to run verification checks on the assembly using Fixie test framework. Ensures all verification conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required TUnit NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit and Verify.TUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which provides inline highlighting of text differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which modifies the text comparison behavior of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify in C#\nDESCRIPTION: Sets up Fixie to work with Verify by implementing ITestProject and IExecution interfaces. It configures the target assembly and wraps test executions in ExecutionState.Set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: Commands to add the necessary NuGet packages for running MSTest with Verify in a .NET project. Includes the core testing SDK, MSTest adapter and framework, and Verify.MSTest for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration to ensure text editors maintain the required format for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received test files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files on Test Failures\nDESCRIPTION: AppVeyor build configuration to capture and publish all *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project File - XML\nDESCRIPTION: Shows how to enable implicit usings in a project file to simplify sample code and avoid explicit using statements in C#. This setting should be placed within the main .csproj or project file.<ImplicitUsings> must be set to 'enable' to ensure all demonstration code compiles successfully. Input is an XML property; output is an updated project configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with XUnit V3\nDESCRIPTION: Example test implementation showing how to use Verify with XUnit V3 for testing class behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool – Shell\nDESCRIPTION: Provides the .NET CLI command to globally install verify.tool, a command line utility for managing Verify snapshots. Optional but useful for users preferring terminal-driven snapshot acceptance/rejection workflows. Requires .NET CLI available in the system environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check Test in Xunit\nDESCRIPTION: Sample test that runs the VerifyChecks.Run() method to ensure all Verify test conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Expecto NuGet Packages in F# Project\nDESCRIPTION: This snippet shows the NuGet package references to add to an F# project file for using Verify with Expecto. It includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result for Scrubbing Instances (Text)\nDESCRIPTION: Shows the expected output of a Verify test when scrubbing specific instances.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_23\n\nLANGUAGE: txt\nCODE:\n```\n{\n  ToIgnore: {Scrubbed},\n  ToInclude: {\n    Property: Include\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Test Output for Numeric Id Scrubbing\nDESCRIPTION: This snippet shows the output of the Verify test after applying the numeric Id scrubbing. The Id field is replaced with {Scrubbed}, while the Name field remains unchanged.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/numeric-ids.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Id: {Scrubbed},\n  Name: The Name\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Ignoring of Parameters for Verified Filename in MSTest\nDESCRIPTION: Demonstrates the fluent syntax for ignoring parameters when generating the verified filename in MSTest Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task IgnoreParametersForVerifiedFluent(string toIgnore, string toInclude) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(x => x.toIgnore);\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Inline Dates with Fluent API\nDESCRIPTION: Using the fluent API to enable scrubbing of dates appearing inline within strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nScrubInlineDateTimesFluent\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Error Checking\nDESCRIPTION: EditorConfig configuration to treat unused return values of methods marked with PureAttribute as errors, which helps catch cases where Verify() calls are not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable implicit usings in the project file, which simplifies using Verify by allowing direct calls to Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Global Auto-Verify with Delegate in C#\nDESCRIPTION: Demonstrates global configuration of auto-verification with a conditional delegate.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.AutoVerify(\n            (typeName, methodName, verifiedFile) =>\n                Path.GetExtension(verifiedFile) == \"png\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueFor Settings with Expecto in F#\nDESCRIPTION: Shows how to use UniqueForRuntime setting in an Expecto F# test. This creates a runtime-specific verification file using the F# syntax for the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_13\n\nLANGUAGE: fs\nCODE:\n```\n[<Tests>]\nlet uniqueTests =\n    testTask \"unique\" {\n        let settings = VerifySettings()\n        settings.UniqueForRuntime()\n        do! Verifier.Verify(\"unique\", \"value\", settings).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: This is a sample MSTest test class demonstrating how to use Verify to test a method's output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopped Recording Data Not Auto-Verified (C#)\nDESCRIPTION: Clarifies that if `Recording.Stop()` is called, the recorded data is removed from the ambient context and will *not* be automatically included in subsequent `Verify()` calls unless explicitly passed to it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingStopNotInResult' snippet\nRecording.Start();\nRecording.Add(\"key1\", \"value1\");\n\n// Stop recording; data is no longer implicitly available\nRecording.Stop(); \n\n// Verify something else; the stopped recording data ('key1') is NOT included\nawait Verify(\"some other data\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie test runner. Handles test discovery and execution while managing verification state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet shows how to run Verify checks in an MSTest test class to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check in MSTest\nDESCRIPTION: Example test class that runs the VerifyChecks to validate that all Verify conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestCase Attribute with NUnit and Verify\nDESCRIPTION: Shows how to use the TestCase attribute in NUnit with Verify for parameterised tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestCase(\"Value1\", \"Value2\")]\npublic Task TestCaseSample(string arg1, string arg2)\n{\n    return Verify(new{arg1, arg2});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Store .received Files as Artifacts\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step to automatically collect and upload all .received.* files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Including Obsolete Property in Serialization Test\nDESCRIPTION: This snippet demonstrates how to include obsolete properties in the serialization process using the IncludeObsoletes setting. This allows the obsolete property to be serialized and verified.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/obsolete-members.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithObsoletePropIncluded()\n{\n    var target = new WithObsolete\n    {\n        Property = \"Value1\",\n        ObsoleteProperty = \"Value2\"\n    };\n    return Verify(target)\n        .IncludeObsoletes();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Targets in MSTest\nDESCRIPTION: Shows how to implement explicit targets in MSTest verification tests. Demonstrates MSTest-specific verification patterns.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/explicit-targets.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nExplicitTargetsMSTest\n```\n\n----------------------------------------\n\nTITLE: Default Type to String Mapping in C#\nDESCRIPTION: The default mapping for converting various types directly to strings when passed to Verify(). This includes primitive types, date/time types, XML types, and more.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/type-to-string-mapping.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n{\n    typeof(StringBuilder), (target, _) => ((StringBuilder) target).ToString()\n},\n{\n    typeof(StringWriter), (target, _) => ((StringWriter) target).ToString()\n},\n{\n    typeof(bool), (target, _) => ((bool) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(short), (target, _) => ((short) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(ushort), (target, _) => ((ushort) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(int), (target, _) => ((int) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(uint), (target, _) => ((uint) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(long), (target, _) => ((long) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(ulong), (target, _) => ((ulong) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(decimal), (target, _) => ((decimal) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(BigInteger), (target, _) => ((BigInteger) target).ToString(Culture.InvariantCulture)\n},\n#if NET6_0_OR_GREATER\n{\n    typeof(Half), (target, _) => ((Half) target).ToString(Culture.InvariantCulture)\n},\n#endif\n#if NET6_0_OR_GREATER\n{\n    typeof(Date), (target, _) =>\n    {\n        var date = (Date) target;\n        return date.ToString(\"yyyy-MM-dd\", Culture.InvariantCulture);\n    }\n},\n{\n    typeof(Time), (target, _) =>\n    {\n        var time = (Time) target;\n        return time.ToString(\"h:mm tt\", Culture.InvariantCulture);\n    }\n},\n#endif\n{\n    typeof(float), (target, _) => ((float) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(double), (target, _) => ((double) target).ToString(Culture.InvariantCulture)\n},\n{\n    typeof(Guid), (target, _) => ((Guid) target).ToString()\n},\n{\n    typeof(DateTime), (target, _) => DateFormatter.ToJsonString((DateTime) target)\n},\n{\n    typeof(DateTimeOffset), (target, _) => DateFormatter.ToJsonString((DateTimeOffset) target)\n},\n{\n    typeof(XmlNode), (target, _) =>\n    {\n        var converted = (XmlNode) target;\n        var document = XDocument.Parse(converted.OuterXml);\n        return new(document.ToString(), \"xml\");\n    }\n},\n{\n    typeof(XElement), (target, settings) =>\n    {\n        var converted = (XElement) target;\n        return new(converted.ToString(), \"xml\");\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Converting Members in C# Verify Tests\nDESCRIPTION: Demonstrates how to convert member values before serialization in Verify tests. It includes examples of converting a field and a property using different conversion methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void MemberConverterByExpressionInit()\n{\n    // using only the member\n    VerifierSettings.MemberConverter<MemberTarget, string>(\n        expression: _ => _.Field,\n        converter: _ => $\"{_}_Suffix\");\n\n    // using target and member\n    VerifierSettings.MemberConverter<MemberTarget, string>(\n        expression: _ => _.Property,\n        converter: (target, member) => $\"{target}_{member}_Suffix\");\n}\n\n[Fact]\npublic Task MemberConverterByExpression()\n{\n    var input = new MemberTarget\n    {\n        Field = \"FieldValue\",\n        Property = \"PropertyValue\"\n    };\n\n    return Verify(input);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch misuse of Verify() method calls.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit Test\nDESCRIPTION: NUnit test fixture to run Verify checks for ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GUID Sanitization - Fluent API\nDESCRIPTION: Demonstrates fluent API approach to disable GUID sanitization for a specific test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nawait Verify(target)\n    .DontScrubGuids();\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks with NUnit\nDESCRIPTION: An NUnit test fixture that runs Verify's built-in convention checks to ensure proper configuration of the testing environment and adherence to best practices.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: C# code snippet demonstrating how to use the VerifyBase class in an MSTest test class to enable Verify functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XunitV3\nDESCRIPTION: A sample test implementation using Verify with XunitV3, demonstrating the structure and approach for creating snapshot tests in this environment. This serves as a starting template for new tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Git Source Control Configuration\nDESCRIPTION: GitIgnore configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks using TUnit in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Creating a Convention Check Test with Fixie\nDESCRIPTION: A Fixie test class that runs Verify's convention checks to ensure all verification settings are properly configured in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Task for Setting Flag on Test Failure\nDESCRIPTION: Command line task for Azure DevOps pipeline that sets a variable flag when tests fail, allowing conditional publishing of verification artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: F# code snippet showing a sample Expecto test that uses Verify to compare test results against stored snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in TUnit\nDESCRIPTION: C# code to run Verify convention checks in a TUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NUnit Test Using Verify\nDESCRIPTION: Sample NUnit test that demonstrates how to use Verify to snapshot test a person object returned from a method. The test uses the Verify() extension method to create and verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with MSTest\nDESCRIPTION: Complete sample test implementation using Verify with MSTest. This demonstrates the proper structure and syntax for creating verification tests including the necessary test class and method attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: An example of how to write a Verify test using Xunit. This test verifies the content of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            Id = new Guid(\"ebced679-45d3-4653-8791-3d969c4a986c\"),\n            Title = \"Mr\",\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children = new List<string>{\"Sam\", \"Mary\"},\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opting into Source Generator Usage\nDESCRIPTION: To leverage the MSTest integration with Source Generators, apply the `UsesVerify` attribute either at the assembly level or class level. This enables the transformer processing required by the Verify library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n[assembly: UsesVerify]\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Test Verification Data Object in JSON\nDESCRIPTION: A JSON object containing test verification data with beforeKeys and afterKeys arrays (both containing the same values: 10 and 'value2'), and an afterResult field showing the concatenated result '10 value2'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.CallbackResults.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  beforeKeys: [\n    10,\n    value2\n  ],\n  afterKeys: [\n    10,\n    value2\n  ],\n  afterResult: 10 value2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files\nDESCRIPTION: AppVeyor configuration to capture *.received.* files as artifacts on test failure, allowing easier debugging of failed Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes settings for verified files to ensure consistent line endings (LF) and UTF-8 encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: This XML snippet sets ImplicitUsings to 'enable' in a .NET project file, ensuring that code examples compile correctly by automatically including commonly used namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure verified files use consistent line endings (LF) and UTF-8 encoding, which is important for consistent test results across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Capturing Verify Received Files\nDESCRIPTION: This YAML snippet shows how to configure an Azure DevOps pipeline to capture and publish *.received.* files generated by Verify when tests fail, making them available as build artifacts for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Defining Date and Time Value Mappings Using JavaScript Object - JavaScript\nDESCRIPTION: This code snippet defines a JavaScript object literal that systematically maps a variety of date and time-related property names to their respective variable references. Each property represents a different form or naming convention of dates, times, or offsets, including nullable and string representations. No external dependencies are strictly required, although all referenced variables (such as DateTime_1, namedDateTime, instanceNamedDateTime, Time_1, etc.) must be defined in the same scope or imported beforehand for this mapping to be fully operational. This structure is commonly used for configuration, mapping values for tests, or as part of a data verification routine. Inputs are the referenced variables; output is the structured object itself. All comments and whitespace are preserved as in the original.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDateTime.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  DateTime: DateTime_1,\n  NamedDateTime: namedDateTime,\n  InstanceNamedDateTime: instanceNamedDateTime,\n  DateTimeNullable: DateTime_2,\n  Date: Date_1,\n  NamedDate: Date_1,\n  InstanceNamedDate: instanceNamedDate,\n  Time: Time_1,\n  TimeString: Time_1,\n  NamedTime: namedTime,\n  InstanceNamedTime: instanceTime,\n  DateNullable: Date_2,\n  NamedDateTimeOffset: namedDateTimeOffset,\n  InstanceNamedDateTimeOffset: instanceNamedTimeOffset,\n  DateTimeOffset: DateTimeOffset_1,\n  DateTimeOffsetNullable: DateTimeOffset_2,\n  DateTimeString: DateTimeOffset_3,\n  DateTimeOffsetString: DateTimeOffset_3,\n  DateString: Date_2\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Command Line Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Task for Copying Received Files\nDESCRIPTION: Copy task that stages all *.received.* files to the artifact staging directory when tests fail, preparing them for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: This C# code snippet demonstrates how to run Verify checks using Expecto. It defines a test case that calls VerifyChecks.Run() on the assembly containing the test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling in .gitattributes for Verify Files\nDESCRIPTION: Provides configuration lines for `.gitattributes` to manage line endings (`eol=lf`) and character encoding (`working-tree-encoding=UTF-8`) for various text-based `*.verified.*` files (like `.txt`, `.xml`, `.json`). This ensures consistency across different development environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Key-Value Mapping Structure\nDESCRIPTION: A data structure showing mapping between composite keys (letter and number combinations) and corresponding values. Each key follows a pattern of a letter (A/b/C) and a number (1/2/3) mapping to values with matching patterns.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.Two.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1: a1,\n  A, 2: a2,\n  A, 3: a3,\n  b, 1: b1,\n  b, 2: b2,\n  b, 3: b3,\n  C, 1: c1,\n  C, 2: c2,\n  C, 3: c3\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify.XunitV3 Project\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with XUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Shows how to initialize Verify.DiffPlex using a module initializer. This enables enhanced text comparison for Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using Unique Directory for Verify Tests\nDESCRIPTION: Example showing how to configure tests to use a unique directory for each test's verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_23\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseUniqueDirectory();\nawait Verify(\"TheValue\", settings);\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in XML\nDESCRIPTION: Adds the Verify.DiffPlex NuGet package to the project file. This package enhances text comparison during verification failures by highlighting differences inline, which is recommended for better readability, especially with large strings. The version is specified as '*' to get the latest version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify.DiffPlex for Improved Diff Rendering\nDESCRIPTION: Code snippet showing how to initialize and enable the Verify.DiffPlex integration, which enhances text comparison by highlighting differences inline rather than showing complete received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git configuration that sets proper line endings and encoding for verified text files to ensure consistent comparison across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Check conventions with VerifyChecks\nDESCRIPTION: A unit test using Verify.Xunit to run convention checks. Ensure Verify.Xunit is referenced and Xunit is installed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: C# code snippet for initializing VerifyDiffPlex. This enables the enhanced text comparison feature provided by Verify.DiffPlex.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings for Verify\nDESCRIPTION: MSBuild property setting to enable Implicit Usings feature, which simplifies Verify method calls. When enabled, allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Upload for Failed Verify Tests\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail. Uses the actions/upload-artifact@v4 action with a failure() condition to capture verification test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are the files generated during test execution when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to mark unused return values of pure methods as errors, which helps catch cases where Verify() calls are not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: Commands to add necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison behavior by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with XUnit v3. Includes the Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Code snippet demonstrating how to run Verify conventions check using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\n\n[<Tests>]\nlet verifyChecks =\n    testTask \"VerifyChecks\" {\n        do! VerifyChecks.run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files as Artifacts on AppVeyor Build Failure\nDESCRIPTION: This PowerShell script, configured as an on_failure build step in AppVeyor, recursively finds all .received files and uploads them as artifacts. This helps in diagnosing test failures by making the received files easily accessible.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Module\nDESCRIPTION: C# code to initialize the VerifyDiffPlex module for enhanced difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings\nDESCRIPTION: XML configuration to enable implicit usings in project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test with Fixie\nDESCRIPTION: Test implementation to run convention checks on the assembly to ensure proper configuration of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: Demonstrates how to enable implicit usings in the project file to allow using Verify() method directly without fully qualifying it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received files as artifacts in GitHub Actions on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture .received Files on Test Failure\nDESCRIPTION: AppVeyor build configuration to capture and upload .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: A code snippet showing a sample TUnit test using Verify. The actual implementation is not provided in the snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages via CLI\nDESCRIPTION: Commands to add TUnit and Verify.TUnit NuGet packages to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: This code snippet demonstrates how to create a test method that runs VerifyChecks.Run() to ensure all Verify conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Installs the Verify terminal tool for managing snapshots via command line, allowing easier snapshot operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: Sample code for running convention checks in a Verify test using Xunit. This ensures that all Verify conventions are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: Example test method that runs the conventions check to verify all necessary configurations are in place for Verify to work properly with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunChecks() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Email Address Structure\nDESCRIPTION: Basic JSON object structure that defines a single field named 'emailaddress' which holds an email value represented by 'TheValue' placeholder.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ClaimWithClaimType.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  emailaddress: TheValue\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in MSTest\nDESCRIPTION: Test class implementation for running Verify convention checks using MSTest framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with NUnit\nDESCRIPTION: NUnit test class that runs verification checks to ensure all conventions are correctly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in NUnit Test Project - C#\nDESCRIPTION: This code snippet demonstrates how to enable the text differ behavior by registering the VerifyDiffPlex module at application startup. The [ModuleInitializer] attribute ensures VerifyDiffPlex.Initialize() is called before test execution. Requires C# 9.0+ and the Verify.DiffPlex package. The key effect is improved output highlighting for failed verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which should be added to the .gitignore file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool for Command Line Snapshot Management\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from the command line, providing an alternative interface for accepting and rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet publishes the staged Verify *.received.* files as build artifacts in Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation with MSTest\nDESCRIPTION: C# implementation of verification checks using MSTest framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Property setting in the project file to enable implicit usings, which simplifies code by allowing direct use of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which should be added to the .gitignore file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit Test\nDESCRIPTION: Demonstrates how to run Verify checks in an NUnit test fixture to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray dotnet tool globally. This tool sits in the Windows tray and monitors pending changes in snapshots, providing a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Object Definition\nDESCRIPTION: This code snippet defines an empty JSON object, potentially including a Byte Order Mark (BOM) at the beginning. It represents a structure with no key-value pairs and is commonly used as a default value, placeholder, or initial data state in JSON-based configurations or data exchanges.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithWriteMemberNull.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\\ufeff{}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with XunitV3. Includes the Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Checks in MSTest - C#\nDESCRIPTION: A simple MSTest test class that runs VerifyChecks.Run() to ensure Verify conventions and file structure compliance. Requires Microsoft.NET.Test.Sdk, MSTest.TestFramework, and Verify.MSTest NuGet packages. Main parameter is the test runner entry point; test passes/fails based on conventions state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic partial class VerifyChecksTests\\n{\\n    [TestMethod]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Artifacts in Azure DevOps\nDESCRIPTION: YAML configuration to publish the staged Verify received files as build artifacts when tests have failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting to enable Implicit Usings in the project file, which allows using Verify() directly instead of Verifier.Verify() in test methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: Sets up VerifyDiffPlex by calling Initialize in a static method decorated with ModuleInitializer. This is necessary to enable inline text difference highlighting during test execution in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with Fixie in C#\nDESCRIPTION: C# code for a Fixie test class (`VerifyChecksTests`) that calls `VerifyChecks.Run()` on the test assembly. This helps ensure that source control and file settings conventions are correctly applied in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Received Files on Failure in GitHub Actions Workflow\nDESCRIPTION: Shows a YAML configuration snippet for a GitHub Actions workflow step. It uses the `actions/upload-artifact@v4` action with an `if: failure()` condition to upload all `*.received.*` files as artifacts named `verify-test-results` only when a preceding step in the job fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: DateTimeOffset Formatting Implementation in C#\nDESCRIPTION: Implementation of the DateFormatter class that handles converting DateTimeOffset objects to strings with proper formatting of date, time, and offset components.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/type-to-string-mapping.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nstatic partial class DateFormatter\n{\n    public static string ToJsonString(DateTimeOffset value)\n    {\n        var result = GetJsonDatePart(value);\n        result += $\" {GetDateOffset(value)}\";\n        return result;\n    }\n\n    static string GetJsonDatePart(DateTimeOffset value)\n    {\n        if (value.TimeOfDay == TimeSpan.Zero)\n        {\n            return value.ToString(\"yyyy-MM-dd\", Culture.InvariantCulture);\n        }\n\n        if (value is {Second: 0, Millisecond: 0})\n        {\n            return value.ToString(\"yyyy-MM-dd HH:mm\", Culture.InvariantCulture);\n        }\n\n        if (value.Millisecond == 0)\n        {\n            return value.ToString(\"yyyy-MM-dd HH:mm:ss\", Culture.InvariantCulture);\n        }\n\n        return value.ToString(\"yyyy-MM-dd HH:mm:ss.FFFFFFF\", Culture.InvariantCulture);\n    }\n\n    public static string ToParameterString(DateTimeOffset value)\n    {\n        var result = GetParameterDatePart(value);\n        result += GetDateOffset(value);\n\n        return result;\n    }\n\n    static string GetParameterDatePart(DateTimeOffset value)\n    {\n        if (value.TimeOfDay == TimeSpan.Zero)\n        {\n            return value.ToString(\"yyyy-MM-dd\", Culture.InvariantCulture);\n        }\n\n        if (value is {Second: 0, Millisecond: 0})\n        {\n            return value.ToString(\"yyyy-MM-ddTHH-mm\", Culture.InvariantCulture);\n        }\n\n        if (value.Millisecond == 0)\n        {\n            return value.ToString(\"yyyy-MM-ddTHH-mm-ss\", Culture.InvariantCulture);\n        }\n\n        return value.ToString(\"yyyy-MM-ddTHH-mm-ss.FFFFFFF\", Culture.InvariantCulture);\n    }\n\n    static string GetDateOffset(DateTimeOffset value)\n    {\n        var offset = value.Offset;\n\n        if (offset > TimeSpan.Zero)\n        {\n            if (offset.Minutes == 0)\n            {\n                return $\"+{offset.TotalHours:0}\";\n            }\n\n            return $\"+{offset.Hours:0}-{offset.Minutes:00}\";\n        }\n\n        if (offset < TimeSpan.Zero)\n        {\n            if (offset.Minutes == 0)\n            {\n                return $\"{offset.Hours:0}\";\n            }\n\n            return $\"{offset.Hours:0}{offset.Minutes:00}\";\n        }\n\n        return \"+0\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: This code snippet demonstrates how to create a test method that runs Verify's convention checks using Xunit. It ensures that all necessary conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: Project configuration to enable Implicit Usings to simplify code by automatically including common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Artifacts in Azure DevOps\nDESCRIPTION: Publishes the staged .received files as build artifacts when the publishverify flag is set. This makes the files available for download and inspection after the build completes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding. Sets line endings to LF and encoding to UTF-8 for all verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Disabling Guid Sanitization (Instance) in C#\nDESCRIPTION: This code demonstrates how to disable guid sanitization for a specific instance in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.DontScrubGuids();\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an NUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Text Comparison in C#\nDESCRIPTION: This C# snippet configures Verify.DiffPlex to enhance text comparison by highlighting differences inline. It requires importing the Verify.DiffPlex NuGet package and calls the VerifyDiffPlex.Initialize() method within a ModuleInitializer to set it up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to ensure Rider/ReSharper treats unused return values of pure methods as errors, which helps catch cases where Verify() calls aren't awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify Text Files\nDESCRIPTION: Sets Git attributes for verified text files to ensure consistent line endings (LF) and UTF-8 encoding, which is essential for predictable verification results across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Key-Value Structure\nDESCRIPTION: A JSON object containing two numeric entries with underscore-separated keys. Each entry maps a string identifier to an integer value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DictionaryOrderString.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Entry_1: 1234,\n  Entry_2: 5678\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Verify Files\nDESCRIPTION: Git ignore configuration to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diffs\nDESCRIPTION: Module initializer code to configure Verify.DiffPlex for enhanced difference visualization when comparing expected and actual test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verifying Image Properties JSON\nDESCRIPTION: JSON object defining expected image properties including pixel format and dimensions. Used for test verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Snippets/ConverterSnippets.Extension.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  PixelFormat: Format8bppIndexed,\n  Size: 473, 355\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent text encoding and line endings across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Including Implicit Usings Configuration\nDESCRIPTION: This placeholder indicates where configuration for implicit usings should be included, likely referencing a common file or section defining standard namespace imports for C# projects.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ninclude: implicit-usings\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: A test class that runs verification checks to ensure all conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with TUnit\nDESCRIPTION: A complete example of a verification test using TUnit. It demonstrates creating a Person object and verifying its serialized output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task PersonTest()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"1 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files when edited directly in an IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Azure DevOps Artifacts\nDESCRIPTION: Employs the `PublishBuildArtifacts@1` task in Azure DevOps YAML. Running conditionally (`condition: eq(variables['publishverify'], 'Yes')`), this task publishes the contents of the staging directory (`$(Build.ArtifactStagingDirectory)/Verify`) as a build artifact named `Verify`. This makes the `.received.*` files accessible from the build results when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: This code demonstrates how to create a Fixie test class that runs Verify checks on the current assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enhance diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: ReSharper Configuration for Pure Method Return Value\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, ensuring that Verify() method calls are properly awaited in test methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for .NET Projects\nDESCRIPTION: These commands add necessary testing packages to a .NET test project using the CLI. Ensure the .NET SDK is installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Checks with Expecto\nDESCRIPTION: Example test that runs the VerifyChecks.Run() method to validate that the project follows required conventions for using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyConventions () = task {\n    do! VerifyChecks.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit V3 NuGet Packages\nDESCRIPTION: Specifies the NuGet packages required for using XUnit V3 with Verify. These packages should be added to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.4.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.5.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.0\">\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n  <PrivateAssets>all</PrivateAssets>\n</PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code snippet showing how to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Configuration for handling line endings and encoding in verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally as a dotnet tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: Configuration for handling received files in AppVeyor CI/CD pipeline\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions with VerifyChecks in TUnit\nDESCRIPTION: A code snippet showing how to run verification checks in a TUnit test to ensure your project follows Verify conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps YAML\nDESCRIPTION: This YAML snippet defines a task to publish the staged *.received.* files as build artifacts. It's conditionally executed based on the publishverify flag and uses the files copied in the previous step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add required NuGet packages for using Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider/ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add required NuGet packages for using Verify with XUnit v3 in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider\nDESCRIPTION: Modify Rider and Resharper settings to prevent notifications about orphaned processes for snapshot tools launched by tests. Involves configuring `.sln.DotSettings` with a specific key-value pair.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex in your project. This module initializer sets up the enhanced diff visualization for text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the .NET CLI. DiffEngineTray monitors snapshot changes and provides accept/reject functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Using Custom Text for Parameters with VerifySettings Instance\nDESCRIPTION: Shows how to override the text used for parameters in file naming using UseTextForParameters with a VerifySettings instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task UseTextForParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseTextForParameters(arg);\n    return Verify(arg + \"UseTextForParameters\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Collecting Verify Failure Artifacts\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step that collects all *.received.* files as artifacts when tests fail, making them available for inspection in the build results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Disabling Rider/ReSharper Orphaned Process Check (Solution)\nDESCRIPTION: Configures the solution's `.sln.DotSettings` file to disable Rider/ReSharper's feature that checks for orphaned processes spawned by the test runner. This prevents warnings when Verify launches external diff tools, by setting `/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue` to `DoNothing`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper/Rider for Verify\nDESCRIPTION: XML configuration to disable orphaned process detection in ReSharper/Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results on GitHub Actions Failure\nDESCRIPTION: YAML configuration for uploading *.received.* files as artifacts when tests fail on GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required MSTest NuGet Packages\nDESCRIPTION: NuGet package references required for setting up MSTest with Verify, including the test SDK, MSTest framework, and Verify.MSTest package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Verify Test Received Files on Failure\nDESCRIPTION: This snippet shows how to add a workflow step that uploads all *.received.* files as artifacts when a build fails. It uses the 'if: failure()' condition to only execute when previous steps have failed, and the 'actions/upload-artifact' action to store the files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Sample implementation showing how to inherit from VerifyBase for MSTest verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in a project file, which allows use of Verify() without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify received files in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is useful for Verify's PureAttribute usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts\nDESCRIPTION: YAML task that publishes the staged .received files as build artifacts when tests have failed. This makes the files available for download and inspection after the build completes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line utilities for managing verification snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Pushing .received Files as AppVeyor Artifacts on Test Failure\nDESCRIPTION: This PowerShell script, configured as an AppVeyor on_failure build step, recursively finds all .received files and pushes them as artifacts. This helps in debugging failed Verify tests by making the .received files easily accessible.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Filename in TUnit (Instance Method)\nDESCRIPTION: Shows how to ignore specific parameters when generating the verified file name using an instance method approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.IgnoreParametersForVerified(_ => new[] {\"param1\"});\nawait Verifier.Verify(\"Foo\", settings);\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Object Structure in JSON\nDESCRIPTION: A JSON object with three numeric keys (1, 2, and 3) without assigned values. This represents an empty or placeholder data structure where each key exists but points to empty/undefined values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_Value.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  1: ,\n  2: ,\n  3: \n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Fixie and Verify.Fixie to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: This snippet shows how to enable Implicit Usings in the project file. This setting allows for shorter syntax in test files by implicitly including common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the Verify.DiffPlex integration using a module initializer\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with Xunit\nDESCRIPTION: Xunit test class that runs VerifyChecks.Run() to validate that all recommended conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files, ensuring proper encoding and line ending configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration in C#\nDESCRIPTION: Uses a `[ModuleInitializer]` attribute on a static `Initialize` method to call `VerifyDiffPlex.Initialize()`. This code, placed typically in a central location or startup file, ensures that the DiffPlex text comparer is registered and enabled for all Verify tests within the assembly at module load time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings (LF) and UTF-8 encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Install DiffEngineTray\nDESCRIPTION: Command to globally install the DiffEngineTray tool via dotnet CLI. DiffEngineTray monitors snapshot changes and aids users in deciding whether to accept changes. Useful for keeping an eye on differences during testing workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts\nDESCRIPTION: Defines a PublishBuildArtifacts task that uploads the staged .received files as build artifacts. This task also only runs when the publishverify flag is set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: This code snippet shows how to enable implicit usings in the project file. This setting allows for shorter syntax in test files by implicitly including common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Demonstrates how to enable Implicit Usings in the project file to simplify using statements in test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Verification Test with TUnit\nDESCRIPTION: Sample TUnit test that demonstrates how to use Verify to snapshot test the results of a method call, showing the basic pattern of creating verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ReSharper Orphaned Process Detection in Settings File\nDESCRIPTION: Configuration to add to the solution settings file to prevent ReSharper from showing orphaned process dialogs when diff tools are launched.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: C# code snippet showing a sample Xunit test that uses Verify to test a method's output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit NuGet Packages for Verify Framework\nDESCRIPTION: Required NuGet package references for setting up Verify with Xunit, including test SDK, Verify.Xunit, and Xunit runners\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Text Comparisons\nDESCRIPTION: Code to initialize VerifyDiffPlex, which enhances text comparison by highlighting differences inline rather than showing full content in failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: C# code to create an Expecto test case that runs Verify's convention checks on the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex integration with Verify for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: Initialize VerifyDiffPlex via a ModuleInitializer in C# to enable enhanced inline diff highlighting in text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Visualization in C#\nDESCRIPTION: Shows how to initialize Verify.DiffPlex to enhance text comparison behavior in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to ensure that VerifyDiffPlex is initialized when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: This snippet demonstrates how to initialize Verify.DiffPlex to enable improved diff visualization in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: MSTest Dangling Snapshots Implementation\nDESCRIPTION: Implementation of dangling snapshots detection using MSTest's AssemblyCleanup feature.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nDanglingSnapshotsMSTestUsage/DanglingSnapshots.cs\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced difference comparison functionality\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verifying Anonymous Types with MSTest\nDESCRIPTION: Shows how to implement anonymous type verification using MSTest. Uses TestMethod attribute and follows the same verification pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/anonymous-types.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task Anon()\n{\n    var person1 = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\"\n    };\n    var person2 = new Person\n    {\n        GivenNames = \"Marianne\",\n        FamilyName = \"Aguirre\"\n    };\n\n    return Verify(\n        new\n        {\n            person1,\n            person2\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex for Verify Tests\nDESCRIPTION: C# code to initialize the DiffPlex integration with Verify for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Using VerifyResult for Additional Assertions\nDESCRIPTION: Example of using the VerifyResult return value to perform additional assertions on verified content. This allows for explicit checks on the content of verification files after a successful verification run.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await Verify(\n    new\n    {\n        Property = \"Value To Check\"\n    });\nAssert.Contains(\"Value To Check\", result.Text);\n```\n\n----------------------------------------\n\nTITLE: Using TestCase in TUnit Tests\nDESCRIPTION: Demonstrates how to use TestCase attributes with Verify in TUnit tests. This allows running the same test with different input parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\")]\n[Arguments(\"Value2\")]\npublic Task TestCaseUsage(string arg) =>\n    Verify(arg);\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with MSTest\nDESCRIPTION: These commands add the necessary NuGet packages to the test project for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Text Comparison\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline. This is optional but recommended for better readability of test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a module initializer in C#. This ensures that DiffPlex is used for text comparisons performed by Verify across the test assembly, providing inline diff highlighting on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initialize Verify.DiffPlex for text comparison\nDESCRIPTION: Enables Verify.DiffPlex for better text difference visualization in tests. Place this in a static initializer or startup logic of your testing library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet defines a PublishBuildArtifacts@1 task that publishes the staged .received files as build artifacts. It only runs if the 'publishverify' variable is set to 'Yes', and it publishes the files to a container named 'Verify'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Clearing Recording Data in C#\nDESCRIPTION: Shows how to clear the current recorded items using the Clear method. This allows for resetting the recorded data within a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task Clear()\n{\n    Recording.Start();\n    Recording.Add(\"name1\", \"value1\");\n    Recording.Clear();\n    Recording.Add(\"name2\", \"value2\");\n    return Verify();\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Build Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps build pipeline, including copying and publishing artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: Sample test code for checking Verify conventions by calling VerifyChecks.Run() within an XunitV3 test method. This helps ensure all Verify conventions are properly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit in C#\nDESCRIPTION: Demonstrates how to run Verify checks using TUnit in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: A TUnit test that executes VerifyChecks.Run() to validate that all Verify conventions are being followed in the project, ensuring consistent snapshot behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Example of how to run Verify checks in an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: CLI commands to add the necessary NuGet packages to a test project for Verify with NUnit, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.MSTest\nDESCRIPTION: Commands to add the essential NuGet packages to enable Verify with MSTest, including the test SDK, test adapters, and the Verify.MSTest package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Scrubbers in xUnit Tests\nDESCRIPTION: This snippet demonstrates various text scrubbing techniques using xUnit. It includes methods for replacing specific lines, removing lines containing certain characters, and handling empty lines. The code uses VerifySettings to configure scrubbing behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScrubbersSample\n{\n    [Fact]\n    public Task Lines()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesWithReplace(\n            replaceLine: line =>\n            {\n                if (line.Contains(\"LineE\"))\n                {\n                    return \"NoMoreLineE\";\n                }\n\n                return line;\n            });\n        settings.ScrubLines(removeLine: _ => _.Contains('J'));\n        settings.ScrubLinesContaining(\"b\", \"D\");\n        settings.ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n        return Verify(\n            settings: settings,\n            target: \"\"\"\n                    LineA\n                    LineB\n                    LineC\n                    LineD\n                    LineE\n                    LineH\n                    LineI\n                    LineJ\n                    \"\");\n    }\n\n    [Fact]\n    public Task EmptyLine()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesWithReplace(\n            replaceLine: _ => \"\");\n        return Verify(\n            settings: settings,\n            target: \"\");\n    }\n\n    [Fact]\n    public Task LinesFluent() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               LineD\n               LineE\n               LineH\n               LineI\n               LineJ\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: _ =>\n                {\n                    if (_.Contains(\"LineE\"))\n                    {\n                        return \"NoMoreLineE\";\n                    }\n\n                    return _;\n                })\n            .ScrubLines(removeLine: _ => _.Contains('J'))\n            .ScrubLinesContaining(\"b\", \"D\")\n            .ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n\n    [Fact]\n    public Task RemoveOrReplace() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: line =>\n                {\n                    if (line.Contains(\"LineB\"))\n                    {\n                        return null;\n                    }\n\n                    return line.ToLower();\n                });\n\n    [Fact]\n    public Task EmptyLines() =>\n        Verify(\"\"\"\n\n               LineA\n\n               LineC\n\n               \"\"\")\n            .ScrubEmptyLines();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool via dotnet CLI\nDESCRIPTION: Uses the dotnet CLI to install DiffEngineTray as a global tool. DiffEngineTray is a recommended Windows tray application that monitors snapshot changes and allows accepting or rejecting them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration for verified files to ensure consistent line endings and encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration in Verify (C#)\nDESCRIPTION: This C# snippet enables Verify.DiffPlex integration at module initialization time. The [ModuleInitializer] attribute ensures that VerifyDiffPlex.Initialize() is called before any tests are run, registering the diff behavior globally. Add this code to a startup class to activate the integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Rules for Verified/Received Files - .editorconfig - plaintext\nDESCRIPTION: Sets recommended EditorConfig options to ensure editors handle encoding, line endings, and whitespace properly for verified and received files. Place this section in .editorconfig to ensure consistent BOM, LF line endings, and no trailing newlines, aligning editor behavior with Verify snapshot file requirements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control - .gitignore Pattern - plaintext\nDESCRIPTION: Demonstrates the .gitignore pattern to prevent *.received.* files from being committed to version control. Add this pattern to your repository's .gitignore file to ignore test artifacts generated by Verify, maintaining clean version history. If split mode is enabled, also include '*.received/' to ignore received output directories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Test with Verify and TUnit\nDESCRIPTION: A sample TUnit test that demonstrates how to use Verify with TUnit. The test retrieves a person object from a class being tested and verifies its state using the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Params in NUnit Verify Tests (Instance)\nDESCRIPTION: Demonstrates how to ignore parameters and use custom parameters in NUnit Verify tests using the instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task IgnoreParametersWithCustom(string arg1, string arg2)\n{\n    return Verify(\"value\")\n        .IgnoreParametersForVerified(\n            (\"arg2\"),\n            (\"customArg\", \"customValue\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray - Command Line\nDESCRIPTION: Installs the DiffEngineTray tool globally, which monitors snapshot changes and helps manage them. Recommended as an optional setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line interface for managing snapshots and verification results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie NuGet Packages for Verify Framework\nDESCRIPTION: Required NuGet packages to add to the test project for using Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: C# code snippet to run Verify conventions check using Xunit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Source Control Settings for Verified Files\nDESCRIPTION: This configuration for .gitattributes ensures that text files with verified extensions maintain consistent newline and encoding settings, which is required to prevent unwanted diff noise.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: Code to initialize the Verify.DiffPlex integration for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider/ReSharper - .DotSettings XML\nDESCRIPTION: This XML snippet disables Rider's or ReSharper's test runner feature that warns about orphaned child processes left running after tests complete. Add this to the solution's .sln.DotSettings file to prevent disruption, as Verify-based tests may launch diff tools that remain open after test completion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\\\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\\\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a CLI tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced diff comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit V3\nDESCRIPTION: This code sample shows how to create an XUnit V3 test that runs VerifyChecks.Run() to validate that all convention settings are properly configured in your project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an MSTest test method to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Failed Verification Files\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step that captures .received.* files as build artifacts when tests fail. This helps with debugging test failures in CI by making the failed verification files available for download.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with MSTest, including the Microsoft.NET.Test.Sdk, MSTest.TestAdapter, MSTest.TestFramework, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration\nDESCRIPTION: Code snippet for initializing Verify.DiffPlex in the test project. Uses the ModuleInitializer attribute to ensure DiffPlex is initialized when the module loads.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Example of how to run Verify framework checks in a Fixie test to ensure proper configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventions\n{\n    public void CheckVerifyConventions() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit V3\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package using .NET CLI\nDESCRIPTION: Installs the optional Verify.DiffPlex NuGet package using the .NET CLI. This package provides enhanced text comparison capabilities for Verify, showing inline differences instead of just outputting the full received and verified strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in C#\nDESCRIPTION: This snippet shows how to add the Verify.DiffPlex NuGet package to improve diff visualization in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Text Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received text files in editors, specifying UTF-8 with BOM, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison output in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages in C#\nDESCRIPTION: Adds the required NuGet packages for using Fixie with Verify in a C# project. Includes Fixie version 4.1.0 and Verify.Fixie version 29.2.0.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Sample Test in F# with Verify and Expecto\nDESCRIPTION: F# code demonstrating how to write a test using Verify with Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Tests in Azure DevOps Pipeline\nDESCRIPTION: Command line task that sets a flag when tests fail, enabling the publishing of *.received.* files in Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in C# files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in csproj\nDESCRIPTION: Configures the project file (`.csproj`) to enable the ImplicitUsings feature of the .NET SDK. This automatically adds common global using directives, reducing boilerplate code in C# files, which is assumed by Verify documentation examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting to enable implicit usings in the project file to ensure examples compile correctly without having to explicitly import namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify and Expecto NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and Expecto testing to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally, which provides command-line management of snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for configuring Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider\nDESCRIPTION: Configuration to disable orphaned process detection in JetBrains Rider, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the global DiffEngineTray tool for managing snapshot changes through the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration with Verify\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text comparison behavior to show inline differences. This makes it easier to identify changes in large text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest and Verify NuGet Packages\nDESCRIPTION: The required NuGet package references to add to your test project including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Sample test class showing how to inherit from VerifyBase to enable verification functionality in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Directory from Git (Split Mode)\nDESCRIPTION: This `.gitignore` entry instructs Git to ignore directories ending with `.received/`. This is necessary when using the `UseSplitModeForUniqueDirectory` option in VerifyTests, which places received files in a separate subdirectory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Flag for Verify Tests in Azure DevOps\nDESCRIPTION: Creates a pipeline variable when tests fail to trigger the publishing of .received files. Uses a CmdLine task with a failed() condition to set the 'publishverify' variable to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit Test\nDESCRIPTION: Demonstrates how to run Verify checks in a TUnit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required for implementing Verify with Fixie test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Filename in TUnit Tests (Fluent)\nDESCRIPTION: Demonstrates how to ignore parameters when generating the verified filename using IgnoreParametersForVerified() with a fluent interface in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"One\")]\n[Arguments(\"Two\")]\npublic Task IgnoreParametersForVerifiedFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Type Name\nDESCRIPTION: Demonstrates how to override the default type name using VerifySettings instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseTypeName(\"CustomTypeName\");\nawait Verify(\"valueUseTypeName\", settings);\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in DotSettings\nDESCRIPTION: Configuration for the solution's DotSettings file to prevent Rider/ReSharper from prompting about processes spawned by tests that remain running (such as diff tools).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Improved Diff Display\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances the text comparison output by highlighting differences inline rather than showing entire files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows the use of Verify() without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up NUnit with Verify testing framework, including test SDK, NUnit core, Verify.NUnit, and NUnit test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an NUnit test fixture.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files, including UTF-8 with BOM encoding, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Expecto\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Expecto. It includes Verify.Expecto for integration, EmptyFiles for file comparisons, and DiffEngine for diff functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"EmptyFiles\" Version=\"*\" />\n<PackageReference Include=\"DiffEngine\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configure .gitattributes for Verified Text Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing Conventions Check Test with XUnit V3\nDESCRIPTION: A test method that checks if all Verify conventions are correctly followed in the project by using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet defines a task to publish the staged .received files as build artifacts. It only executes if the publishverify flag is set to 'Yes'. This makes the .received files easily accessible for debugging failed Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: Defines EditorConfig settings specifically for VerifyTests' received and verified text files (`.json`, `.txt`, `.xml`). It enforces UTF-8 with BOM (`charset = \"utf-8-bom\"`), Line Feed line endings (`end_of_line = lf`), prevents the insertion of a final newline (`insert_final_newline = false`), and unsets potentially conflicting indentation settings. This helps maintain VerifyTests' required text file format when editing these files manually.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps YAML\nDESCRIPTION: This YAML snippet defines a task to copy all *.received.* files to the artifact staging directory. It only executes if the 'publishverify' flag is set to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .csproj (XML)\nDESCRIPTION: This XML snippet enables implicit global using directives in the project file, reducing the need to manually specify common using statements in each C# source file. It is a recommended setting for examples in this documentation using .NET Core or later SDK-style projects. Set <ImplicitUsings> to 'enable' for proper code compilation; no inputs or outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: Sample code snippet demonstrating how to run Verify checks in an NUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic Verify test structure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Grouped Recording (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file showing values grouped under the same key from the `RecordingSameKey` snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.SameKey.verified.txt\n{\n  Recorded:\n  {\n    theKey: [\n      value1,\n      value2\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check in an XUnit v3 test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for setting up MSTest with Verify framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool via dotnet CLI - Shell\nDESCRIPTION: Demonstrates the dotnet CLI command required to globally install DiffEngineTray. This tool assists in managing snapshot verifications by providing a tray interface for accepting or rejecting snapshot changes. It is optional but recommended for improving the developer workflow. No prerequisites beyond the .NET SDK are required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.Expecto NuGet Packages via .NET CLI\nDESCRIPTION: This command uses the .NET CLI to add the necessary NuGet packages (`YoloDev.Expecto.TestSdk`, `Expecto`, `Verify.Expecto`) to the current test project. These packages provide the core functionality for using Verify with the Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using XUnit v3 attributes and assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Execute Verify checks using Fixie by calling VerifyChecks.Run() in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CheckVerifyTests\n{\n    public Task Check() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Upload for Verify Test Failures\nDESCRIPTION: GitHub Actions workflow configuration to upload .received files when tests fail. Uses the upload-artifact action to capture all *.received.* files generated during failed test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet package references for setting up Verify with MSTest, including test SDK and Verify.MSTest package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files, including UTF-8 BOM encoding, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an MSTest environment. It uses the [TestMethod] attribute and calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task CheckConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit V3\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verified and Received Files (EditorConfig)\nDESCRIPTION: This EditorConfig snippet enforces text file conventions for verified and received files with json, txt, or xml extensions. It specifies UTF-8 with BOM encoding, line-feed endings, disables insertion of final newline, and avoids unwanted indent or whitespace changes. Add to an .editorconfig file to make editors respect these settings, ensuring cross-platform consistency for testing. Additional extensions can be included as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/text-file-settings.include.md#2025-04-22_snippet_1\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified/Received Text Files (EditorConfig)\nDESCRIPTION: Provides EditorConfig configuration to match Verify's conventions for text snapshot files. Sets charset to UTF-8 with BOM, LF newlines, disables auto-inserting final newlines, and prevents whitespace trimming/indentation changes. Input is a file pattern and option block in .editorconfig. Output: Editor auto-configures files for editing according to standard. Must be extended for custom extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with NUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .csproj for Verify Examples - XML\nDESCRIPTION: This snippet enables Implicit Usings in a .NET project file, allowing common namespaces to be included automatically for all code in the project. It must be set to ensure concise code samples (using 'Verify()' instead of 'Verifier.Verify()') compile without manual using directives. Only applies to .NET SDK-style project files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex comparison tool for Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Numeric Entries\nDESCRIPTION: This snippet defines a JSON object with two entries, each having a string key and an integer value. The keys are 'Entry_2' and 'Entry_1', with corresponding values 5678 and 1234.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.SortedDictionaryOrder.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Entry_2: 5678,\n  Entry_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in Expecto\nDESCRIPTION: Example of implementing a test case to run verification checks using Verify.Expecto framework. The test ensures all verification conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Ignore Spawned Processes\nDESCRIPTION: Configuration for ReSharper to disable orphaned process detection, which is necessary when using Verify with diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Boolean Test Result Output\nDESCRIPTION: A simple True boolean value output, likely indicating a test passed successfully.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.Boolean.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Named Value in JavaScript\nDESCRIPTION: A JavaScript object literal that defines a simple configuration with a value property set to 'instanceNamed'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via CLI\nDESCRIPTION: This command uses the dotnet CLI to add the Verify.DiffPlex NuGet package to the current project. This package enhances text comparison results by showing inline differences instead of outputting full received and verified strings on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text comparison output to highlight differences inline for better readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code initializes Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension, which changes the text comparison result to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: GitIgnore configuration to exclude temporary *.received.* files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors snapshot changes and provides a mechanism for accepting or rejecting them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for NUnit with Verify\nDESCRIPTION: NuGet package references to add to the test project, including Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter with specific version numbers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in Fixie\nDESCRIPTION: C# implementation of verification checks for Fixie tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which is a recommended practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps pipeline, including copying and publishing artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Test case that checks if all Verify conventions are being followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Overrides for Verified Files in xUnit (Instance)\nDESCRIPTION: Illustrates how to use custom parameter overrides when ignoring parameters for verified files in xUnit. This approach allows passing modified parameter values to UseParameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParams(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified($\"Number{arg}\");\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the required TUnit and Verify.TUnit NuGet packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal tool globally for managing snapshots via command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: A sample TUnit test using Verify, demonstrating how to write and structure a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files (.editorconfig)\nDESCRIPTION: An EditorConfig snippet to enforce formatting conventions for Verify's received and verified text files ({json,txt,xml}). It sets charset to utf-8-bom, line endings to lf, prevents trailing newlines, and unsets indentation rules to avoid unintended modifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration to ensure consistent handling of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during Verify's testing process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline in Test Projects (C#)\nDESCRIPTION: Initializes Verify.DiffPlex for your test assembly by calling 'VerifyDiffPlex.Initialize()' via a ModuleInitializer. Allows all tests to use enhanced diffing features. Ensure the Verify.DiffPlex NuGet package is installed and that your project targets .NET 5 or higher to use ModuleInitializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and MSTest NuGet Packages via dotnet CLI\nDESCRIPTION: Uses the dotnet CLI to add the required NuGet packages (Microsoft.NET.Test.Sdk, MSTest.TestAdapter, MSTest.TestFramework, Verify.MSTest) to the test project for enabling MSTest execution and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Committing Verified Files with Text Attributes - .gitattributes\nDESCRIPTION: Configures Git to treat '*.verified.*' text files with consistent line endings and UTF-8 BOM encoding for verified outputs. Ensures reproducibility of test baseline files across environments. Apply to .gitattributes file in the repository. Extensible for different text extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Installs the Verify.Terminal global dotnet tool which allows managing snapshots from the command line, providing an alternative interface for working with test verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample F# Expecto Test Using Verify\nDESCRIPTION: Example of an F# Expecto test that uses Verify to snapshot test results. Demonstrates the proper way to use Verifier.Verify in an F# test function.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for handling failed tests in AppVeyor by uploading received files as artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This command adds the Verify.DiffPlex NuGet package to the project for improved text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML snippet copies Verify *.received.* files to the Artifact Staging directory. It uses a CopyFiles task that runs conditionally based on the previously set flag.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core Fixie test runner and Verify.Fixie integration packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool via CLI\nDESCRIPTION: This command uses the .NET CLI to install `verify.tool` (Verify.Terminal) as a global tool. Verify.Terminal provides command-line utilities for managing Verify snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Text Encoding and Line Endings - ini\nDESCRIPTION: Configures .gitattributes rules for all '*.verified.*' text files, enforcing LF line endings and UTF-8 encoding with BOM. Helps guarantee consistent cross-platform text diffs and prevents spurious version control changes due to EOL or encoding differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload\nDESCRIPTION: GitHub Actions workflow configuration to upload received files on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool via CLI\nDESCRIPTION: Command to install Verify.Terminal as a global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages using CLI\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling in .gitattributes for Verify\nDESCRIPTION: Specifies settings in `.gitattributes` for text-based verified files (`*.verified.txt`, `*.verified.xml`, `*.verified.json`). Ensures consistent line endings (`lf`) and encoding (`UTF-8`) across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet publishes the staged .received files as build artifacts. It only executes if the publishverify flag is set to 'Yes', ensuring artifacts are only published when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: This XML snippet enables implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for XUnit v3 and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using XUnit v3 with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with Expecto\nDESCRIPTION: An example test case demonstrating how to use Verify with Expecto for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Sample Test`` () =\n    task {\n        let person = Person(Id = 1, Name = \"John Smith\")\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for enhanced text difference comparison\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files with consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: Create a test method to run Verify checks, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes settings for verified file types\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved text comparison output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Basic NUnit TestCase Usage with Verify\nDESCRIPTION: Shows a simple example of using Verify with NUnit TestCase attribute. The test verifies different input values provided by multiple TestCase attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task TestCaseUsage(string arg) =>\n    Verify(arg);\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes to ensure consistent line endings and encoding for verified files. This helps prevent platform-specific differences in line endings causing test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal as a .NET Global Tool (shell)\nDESCRIPTION: Provides the command for installing Verify.Terminal as a globally available .NET tool, enabling management of Verify snapshots from the command line. The tool is optional and can be used as an alternative interface to DiffEngineTray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Verify.Tests Combination Result with Exceptions\nDESCRIPTION: Displays the output of the BuildAddressExceptionsTest, showing captured exceptions and successful results for various input combinations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n{\n  -1,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  -1,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  -1,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  -1,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  -1, Valid St, null      : ArgumentNullException: Value cannot be null. (Parameter 'city').,\n  -1, Valid St, Valid City: ArgumentOutOfRangeException: number ('-1') must be greater than or equal to '1'. (Parameter 'number'). Actual value was -1.,\n   0,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n   0,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n   0,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n   0,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n   0, Valid St, null      : ArgumentNullException: Value cannot be null. (Parameter 'city').,\n   0, Valid St, Valid City: ArgumentOutOfRangeException: number ('0') must be greater than or equal to '1'. (Parameter 'number'). Actual value was 0.,\n  10,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  10,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  10,         , null      : ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  10,         , Valid City: ArgumentException: The value cannot be an empty string or composed entirely of whitespace. (Parameter 'street').,\n  10, Valid St, null      : ArgumentNullException: Value cannot be null. (Parameter 'city').,\n  10, Valid St, Valid City: 10 Valid St, Valid City\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining Property in JSON Configuration\nDESCRIPTION: This JSON snippet defines a configuration object with a single property named 'Line'. The value for this property is not specified, which could indicate a placeholder or a property that expects a value to be assigned later.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubEmptyLinesStartProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Property: Line\n}\n```\n\n----------------------------------------\n\nTITLE: Gitattributes Settings for Verified Text Files - Shell\nDESCRIPTION: Presents the recommended .gitattributes settings for maintaining cross-platform snapshot consistency. These lines ensure that all '.verified' files of type txt, xml, or json use UTF-8 encoding with a BOM and have LF as the end-of-line marker. The snippet should be added to the .gitattributes file in the repository root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with XUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control Exclusions\nDESCRIPTION: GitIgnore configuration to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit Tests\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in a TUnit test. This ensures that conventions are being followed in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks with Fixie\nDESCRIPTION: A Fixie test that runs VerifyChecks to validate that all conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventions\n{\n    public void Run() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Name Using Fluent API\nDESCRIPTION: Shows how to specify a custom file name using the fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\nawait Verify(\"valueUseFileNameFluent\")\n    .UseFileName(\"CustomFileNameFluent\");\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit Verification with .NET CLI - Shell\nDESCRIPTION: These commands use the .NET CLI to add the essential NuGet packages for running NUnit verification tests: Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit. All commands must be run from the root of the test project directory. Successful execution will configure the project with testing and verification capabilities. No parameters beyond package names are needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with NUnit testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and Fixie integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property for Verify-MSTest Integration in C#\nDESCRIPTION: This code snippet defines a partial class 'Base' with a generated TestContext property. It integrates Verify with MSTest by managing the current test context using VerifyMSTest.Verifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAttributeOnBaseAndDerivedClasses.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//-----------------------------------------------------\n// This code was generated by a tool.\n//\n// Changes to this file may cause incorrect behavior\n// and will be lost when the code is regenerated.\n// <auto-generated />\n//-----------------------------------------------------\n\npartial class Base\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Implementation in F#\nDESCRIPTION: Example of a basic verification test written in F# using Expecto and Verify. Demonstrates how to verify the output of a test method using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Encoding for Verify Snapshots\nDESCRIPTION: Shows how to specify a custom encoding for snapshot files by using the UseEncoding method and providing a System.Text.Encoding instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/encoding.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.UseEncoding(Encoding.Unicode);\n```\n\n----------------------------------------\n\nTITLE: Source Control Configuration for Verified Files - .gitattributes\nDESCRIPTION: This snippet configures .gitattributes so verified text, xml, and json files use line-feed newlines and UTF-8 encoding with BOM. These settings ensure consistency in how snapshot files are stored, especially across different platforms or collaborators. Add these lines to your repository's .gitattributes file for correct behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison by highlighting differences inline rather than outputting complete received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance-level Enumerable Ordering in C#\nDESCRIPTION: Sets up instance-level ordering for IEnumerable items using a specified key selector.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar person1 = new Person(\"b\");\nvar person2 = new Person(\"a\");\nvar settings = new VerifySettings();\nsettings.OrderEnumerableBy<Person>(_ => _.Name);\nawait Verify(new List<Person> {person1, person2}, settings);\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Better Diff Visualization\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package which enhances diff visualization by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package\nDESCRIPTION: Use this command to add the Verify.DiffPlex NuGet package, which allows inline highlighting of text differences during test failures. The Verify.DiffPlex package enhances text comparison results by making differences clearer. Requires .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages\nDESCRIPTION: Add the necessary NuGet packages to the test project for Xunit and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.4.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - xml\nDESCRIPTION: Provides a NuGet PackageReference XML fragment to install the Verify.DiffPlex package, supporting visually enhanced inline diffs during test failures. Place this inside a .csproj to activate the improved text diff plugin.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for Inline DateTime Scrubbing\nDESCRIPTION: Shows how to globally configure scrubbing of inline date strings using ModuleInitializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.ScrubInlineDateTimes(\"yyyy-MM-dd\");\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Directory Files during Verification in xUnit v3 - C#\nDESCRIPTION: This snippet illustrates how to supply a filter predicate when verifying a directory. The filter parameter enables inclusion or exclusion of files based on their paths, allowing selective snapshotting within the directory. Dependencies include the Verify.Xunit v3 library. The filter function should return true for files to include, false for others. Input includes the path to the directory and the filter logic, and the output produces verification files only for files passing the predicate.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-directory.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.VerifyDirectory(\n    \"targetDirectory\",\n    filter: path => path.EndsWith(\".txt\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for MSTest\nDESCRIPTION: The required NuGet packages to add to an MSTest project for using Verify. This includes the core Verify package, MSTest integration, and additional useful packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.8.0\" />\n<PackageReference Include=\"Verify.ImageMagick\" Version=\"3.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in XML\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to the project. This package enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an Xunit test method. It uses the [Fact] attribute and calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Representing Date Time Offset in JSON\nDESCRIPTION: This snippet shows a JSON object structure for representing a date-time offset value. The 'value' property is assigned a variable 'dateTimeOffsetName', which likely contains a date-time offset string or object.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeOffsets_named.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  value: dateTimeOffsetName\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verified File Attributes - Shell\nDESCRIPTION: This shell snippet sets .gitattributes settings for *.verified.* files to enforce text handling. It ensures that text files use LF line endings and UTF-8 encoding, which is required for consistent cross-platform verification. Add these lines to your .gitattributes file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify Artifacts\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to flag, copy, and publish *.received.* files when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings - SDK Style Project - xml\nDESCRIPTION: Enables Implicit Usings feature in .NET SDK-style projects, reducing the need for explicit using statements in source files. Place the <ImplicitUsings>enable</ImplicitUsings> tag within a PropertyGroup of your .csproj to have common namespaces automatically imported, facilitating simpler code in sample tests and Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up Verify with Xunit, including the test SDK, Verify.Xunit, and Xunit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Traditional Assertion-based Test in C# using xUnit\nDESCRIPTION: This code snippet demonstrates a traditional assertion-based test using xUnit. It tests the FindPerson method by asserting each property of the returned Person object individually.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/compared-to-assertion.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void TraditionalTest()\n{\n    var person = ClassBeingTested.FindPerson();\n    Assert.Equal(new(\"ebced679-45d3-4653-8791-3d969c4a986c\"), person.Id);\n    Assert.Equal(Title.Mr, person.Title);\n    Assert.Equal(\"John\", person.GivenNames);\n    Assert.Equal(\"Smith\", person.FamilyName);\n    Assert.Equal(\"Jill\", person.Spouse);\n    Assert.Equal(2, person.Children.Count);\n    Assert.Equal(\"Sam\", person.Children[0]);\n    Assert.Equal(\"Mary\", person.Children[1]);\n    Assert.Equal(\"4 Puddle Lane\", person.Address.Street);\n    Assert.Equal(\"USA\", person.Address.Country);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Named Tuple Return Values in C#\nDESCRIPTION: Shows how to use the Verify framework to test a method that returns a named tuple.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/named-tuples.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task NamedTuple()\n{\n    var target = MethodWithNamedTuple();\n    return Verify(target);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: Code snippet showing how to run the Verify conventions check in an Xunit test. This validates that the project is correctly configured and follows the expected conventions for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: A test that runs verification checks to ensure all Verify conventions are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecks\n{\n    public async Task Run() =>\n        await Verifier.Verify(\"Some value\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Fixie\nDESCRIPTION: Test class implementation for running Verify convention checks using Fixie test framework. Verifies assembly-level conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in NUnit\nDESCRIPTION: Code snippet showing how to run Verify convention checks in an NUnit test using the VerifyChecks.Run() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an MSTest class. It creates a test method that calls VerifyChecks.Run() to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie in C#\nDESCRIPTION: This code demonstrates how to run Verify checks using Fixie. It creates a test method that calls VerifyChecks.Run() to perform the checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTest\n{\n    public void Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Verify.DiffPlex NuGet Package (CLI)\nDESCRIPTION: Installs the optional Verify.DiffPlex NuGet package using the .NET CLI. This package enhances text comparison failures by showing inline differences instead of full file outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Checking Memory Usage in Linux/Unix\nDESCRIPTION: The 'free' command shows the amount of free and used memory in the system. It provides information about physical memory, swap space, and buffers used by the kernel.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.Date.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfree\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in editors, specifying character encoding, line endings, and formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Accessing MyProperty Getter in C# Serialization Tests\nDESCRIPTION: This snippet shows a call to the getter method for a property named `MyProperty` within a class named `SerializationTests`. This is typical in C# testing frameworks (like those used in '/verifytests/verify') to access property values, potentially for assertion or verification during serialization tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.GetProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSerializationTests.get_MyProperty()\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks in XunitV3\nDESCRIPTION: Example showing how to run verification checks in an XunitV3 test to ensure conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void VerifyChecks() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XunitV3\nDESCRIPTION: Create a test method to run Verify checks and ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: Project property to enable implicit usings in a .NET project, which allows direct usage of Verify() without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-like Object Structure\nDESCRIPTION: This snippet defines a simple JSON-like object structure with a single property named 'property' and its corresponding value 'value1'. It demonstrates the basic syntax for defining key-value pairs in a JSON-style format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NullProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  property: value1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal via dotnet Tool - Shell\nDESCRIPTION: This shell command installs the Verify.Terminal tool as a global dotnet CLI utility. Verify.Terminal allows snapshot management directly from the command line, facilitating review and approval processes in CI workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Fixie Packages with dotnet CLI\nDESCRIPTION: Commands to add the required Fixie and Verify.Fixie NuGet packages to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Code snippet demonstrating how to run Verify checks in an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to enable improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Publish Verify received files as artifacts\nDESCRIPTION: Publishes the 'received' files, staged during a build, to Azure DevOps artifacts if tests fail. Ensures visibility of failed snapshots for diagnostic purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for handling text file encodings and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison by highlighting differences inline for better readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Example of how to run Verify checks using Xunit. This snippet demonstrates calling VerifyChecks.Run() in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueFor Settings with MSTest\nDESCRIPTION: Demonstrates using UniqueFor settings in an MSTest class to create environment-specific verification files. Shows both fluent and traditional API approaches for runtime, assembly configuration, architecture, and OS platform settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class UniqueForSample\n{\n    [TestMethod]\n    public Task Runtime()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntime();\n        return Verify(\"value\", settings);\n    }\n\n    [TestMethod]\n    public Task RuntimeFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntime();\n\n    [TestMethod]\n    public Task RuntimeAndVersion()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntimeAndVersion();\n        return Verify(\"value\", settings);\n    }\n\n    [TestMethod]\n    public Task RuntimeAndVersionFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntimeAndVersion();\n\n    [TestMethod]\n    public Task AssemblyConfiguration()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForAssemblyConfiguration();\n        return Verify(\"value\", settings);\n    }\n\n    [TestMethod]\n    public Task AssemblyConfigurationFluent() =>\n        Verify(\"value\")\n            .UniqueForAssemblyConfiguration();\n\n    [TestMethod]\n    public Task Architecture()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForArchitecture();\n        return Verify(\"value\", settings);\n    }\n\n    [TestMethod]\n    public Task ArchitectureFluent() =>\n        Verify(\"value\")\n            .UniqueForArchitecture();\n\n    [TestMethod]\n    public Task OSPlatform()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForOSPlatform();\n        return Verify(\"value\", settings);\n    }\n\n    [TestMethod]\n    public Task OSPlatformFluent() =>\n        Verify(\"value\")\n            .UniqueForOSPlatform();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Verify Files\nDESCRIPTION: Git ignore configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Publishing Artifacts in Azure YAML\nDESCRIPTION: This YAML task publishes files from the artifact staging directory to Azure DevOps as a build artifact under certain conditions. It requires setting the publishverify variable and knowledge of artifact management in DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration\nDESCRIPTION: C# code snippet demonstrating how to enable Verify.DiffPlex integration. It uses a `[ModuleInitializer]` attribute to call `VerifyDiffPlex.Initialize()` automatically when the assembly loads, activating the inline diffing behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex with Module Initializer - C#\nDESCRIPTION: This snippet demonstrates how to enable VerifyDiffPlex by using a C# ModuleInitializer. The method 'Initialize' executes 'VerifyDiffPlex.Initialize()' before any code runs, which configures Verify to use DiffPlex for in-line snapshot text comparison. Prerequisites: C# 9.0 or higher to support module initializers, a reference to Verify.DiffPlex, and .NET 5.0+ project environment. The method takes no parameters and ensures correct configuration for the test project lifecycle.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: ReSharper Configuration for Orphaned Process Detection\nDESCRIPTION: DotSettings configuration to disable orphaned process detection for the current solution to prevent interruptions when diff tools are launched.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances the text comparison output by highlighting differences inline instead of showing the entire content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in MSBuild\nDESCRIPTION: Specifies the `PackageReference` XML element needed in a project file (like `.csproj` or `.fsproj`) to include the `Verify.DiffPlex` library. This library enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example MSTest implementation using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling in Source Control (.gitattributes)\nDESCRIPTION: Defines `.gitattributes` settings for common text-based verified file extensions (`.txt`, `.xml`, `.json`). It ensures consistent line endings (LF) and UTF-8 encoding within the Git repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Optional Verify.Terminal .NET Tool (CLI)\nDESCRIPTION: Installs the Verify.Terminal .NET global tool using the `dotnet tool install` command with the `-g` flag for global installation. This tool provides command-line utilities for managing Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Display\nDESCRIPTION: C# code that initializes Verify.DiffPlex, which enhances text comparison by highlighting differences inline rather than showing full content in exceptions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages\nDESCRIPTION: NuGet package references required for NUnit testing with Verify framework, including test SDK, NUnit core, and test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML snippet showing how to add the optional Verify.DiffPlex package, which enhances the text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Date Validation and Comparison in JavaScript\nDESCRIPTION: This code snippet contains multiple test cases for date-related functions. It includes tests for validating dates, comparing dates, and handling different date formats. The tests use the 'assert' module for making assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDates_trailing.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar assert = require(\"assert\");\nvar date = require(\"../date.js\");\n\nassert(!date.isDate(\"2011-00-00\"));\nassert(!date.isDate(\"2011-01-00\"));\nassert(!date.isDate(\"2011-01-32\"));\nassert(!date.isDate(\"2011-02-29\"));\nassert(!date.isDate(\"2011-04-31\"));\nassert(!date.isDate(\"2011-11-31\"));\nassert(!date.isDate(\"2011-12-32\"));\nassert(!date.isDate(\"2100-02-29\"));\n\nassert(date.isDate(\"2011-01-01\"));\nassert(date.isDate(\"2011-01-31\"));\nassert(date.isDate(\"2011-02-28\"));\nassert(date.isDate(\"2011-12-31\"));\nassert(date.isDate(\"2012-02-29\"));\nassert(date.isDate(\"2000-02-29\"));\n\nassert(!date.compare(\"2011-01-01\", \"2011-01-01\"));\nassert(date.compare(\"2011-01-01\", \"2011-01-02\") < 0);\nassert(date.compare(\"2011-01-02\", \"2011-01-01\") > 0);\n\nassert(date.isDateBefore(\"2011-01-01\", \"2011-01-02\"));\nassert(!date.isDateBefore(\"2011-01-01\", \"2011-01-01\"));\nassert(!date.isDateBefore(\"2011-01-02\", \"2011-01-01\"));\n\nassert(!date.isDateAfter(\"2011-01-01\", \"2011-01-02\"));\nassert(!date.isDateAfter(\"2011-01-01\", \"2011-01-01\"));\nassert(date.isDateAfter(\"2011-01-02\", \"2011-01-01\"));\n\nassert(date.getDaysBetween(\"2011-01-01\", \"2011-01-02\") == 1);\nassert(date.getDaysBetween(\"2011-01-01\", \"2011-01-01\") == 0);\nassert(date.getDaysBetween(\"2011-01-01\", \"2012-01-01\") == 365);\nassert(date.getDaysBetween(\"2012-01-01\", \"2013-01-01\") == 366);\nassert(date.getDaysBetween(\"2012-02-28\", \"2012-02-29\") == 1);\nassert(date.getDaysBetween(\"2012-02-29\", \"2012-03-01\") == 1);\nassert(date.getDaysBetween(\"2013-02-28\", \"2013-03-01\") == 1);\n\nassert(date.addDays(\"2011-01-01\", 1) == \"2011-01-02\");\nassert(date.addDays(\"2011-01-01\", 365) == \"2012-01-01\");\nassert(date.addDays(\"2012-02-28\", 1) == \"2012-02-29\");\nassert(date.addDays(\"2012-02-29\", 1) == \"2012-03-01\");\nassert(date.addDays(\"2013-02-28\", 1) == \"2013-03-01\");\n\nassert(date.getDateFormat(\"2011-01-01\") == \"YYYY-MM-DD\");\nassert(date.getDateFormat(\"01-01-2011\") == \"DD-MM-YYYY\");\nassert(date.getDateFormat(\"01/01/2011\") == \"DD/MM/YYYY\");\nassert(!date.getDateFormat(\"2011-01-32\"));\n\nassert(date.convertDateFormat(\"2011-01-01\", \"YYYY-MM-DD\", \"DD-MM-YYYY\") == \"01-01-2011\");\nassert(date.convertDateFormat(\"2011-01-01\", \"YYYY-MM-DD\", \"DD/MM/YYYY\") == \"01/01/2011\");\nassert(date.convertDateFormat(\"01-01-2011\", \"DD-MM-YYYY\", \"YYYY-MM-DD\") == \"2011-01-01\");\nassert(date.convertDateFormat(\"01/01/2011\", \"DD/MM/YYYY\", \"YYYY-MM-DD\") == \"2011-01-01\");\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: NuGet package references needed for using Verify with Expecto in an F# project. Includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core update, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which provides command-line capabilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package which enhances the text comparison behavior of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File - xml\nDESCRIPTION: Activates the ImplicitUsings feature in the .csproj file, which auto-imports common namespaces in C# 10+. Required for examples in this guide to compile as shown; set to 'enable' to reduce unnecessary using directives. Without this, Verify methods must be referenced with their full namespace or class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool via Command Line\nDESCRIPTION: Command to install the `DiffEngineTray` tool globally using the .NET CLI (`dotnet tool install -g DiffEngineTray`). DiffEngineTray provides a GUI for reviewing and managing VerifyTests snapshot differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required for using Verify with Fixie test framework. Includes core Fixie package and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for XunitV3 and Verify\nDESCRIPTION: Add the required NuGet packages to the test project for XunitV3 and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which provides command-line utilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool (CLI)\nDESCRIPTION: Uses the `dotnet tool install -g` command to install `verify.tool` as a global .NET tool. Verify.Terminal is an optional command-line utility for managing Verify snapshots (e.g., accepting or rejecting changes).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Failure Handling\nDESCRIPTION: PowerShell script for handling test failures in AppVeyor\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plain\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Disable Orphaned Process Detection\nDESCRIPTION: ReSharper settings to disable orphaned process detection checks, which prevents unnecessary prompts when Verify launches external diff tools during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add required NuGet packages to the test project for using Verify with XUnit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore to Exclude Verify Received Files\nDESCRIPTION: Provides patterns (`*.received.*` and optionally `*.received/` for `UseSplitModeForUniqueDirectory`) to add to a `.gitignore` file. This prevents temporary \"received\" files generated by Verify during tests from being committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Converter Condition Check in C#\nDESCRIPTION: Example of a condition check used to ensure only TIFF format images are processed by the converter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\ncanConvert: (target, context) => Equals(target.RawFormat, ImageFormat.Tiff),\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task that publishes the staged *.received.* files as build artifacts when tests fail, making them available for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified files in source control, including line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Demonstrate how to inherit from VerifyBase to enable Verify functionality in a test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: YAML task that sets a flag variable when tests fail, enabling conditional publishing of Verify's .received files. This task uses the failed() condition to execute only when previous tasks have failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in text editors, specifying character encoding, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray tool globally using the .NET CLI. DiffEngineTray monitors pending snapshot changes and allows accepting or rejecting them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in Expecto\nDESCRIPTION: Example of how to implement convention checks using VerifyChecks.Run() in an Expecto test. This ensures that verification conventions are properly enforced.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksExpecto\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify command line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in TUnit\nDESCRIPTION: Test class demonstrating how to run Verify convention checks using TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: NUnit test that runs VerifyChecks.Run() to validate that all Verify conventions are properly set up in the project environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core Fixie test framework and Verify.Fixie integration packages\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file handling for verified and received files in editors. Configures encoding, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to your project. Verify.DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Inline GUID Scrubbing - Global Configuration\nDESCRIPTION: Demonstrates global configuration for inline GUID scrubbing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.ScrubInlineGuids();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration for Inline Diffing - C#\nDESCRIPTION: This snippet demonstrates initializing inline diff support with Verify.DiffPlex by calling VerifyDiffPlex.Initialize() from a ModuleInitializer in C#. This setup allows the test suite to provide improved diff output in exception messages when snapshot testing fails. Requires adding a package reference to Verify.DiffPlex, and the initialization method should be added to a static class in your test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Received Files on Failure in GitHub Actions YAML\nDESCRIPTION: YAML configuration snippet for a GitHub Actions workflow. It uses `actions/upload-artifact@v4` with an `if: failure()` condition to upload all `*.received.*` files as build artifacts, facilitating debugging of failed snapshot tests in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verify Test Files\nDESCRIPTION: EditorConfig rules for verified and received files to maintain consistent formatting and encoding across editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: XUnit test implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up MSTest with Verify testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in csproj/xml\nDESCRIPTION: Adds the `Verify.DiffPlex` NuGet package to the project file. This package integrates DiffPlex with VerifyTests to provide inline text difference highlighting in test failure messages, improving readability compared to displaying full received/verified strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and Fixie testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrubber Levels in MSTest\nDESCRIPTION: Shows how to set up scrubbers at method, class, and global levels in MSTest tests, using both standard and fluent configuration approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class ScrubberLevelsSample\n{\n    VerifySettings classLevelSettings;\n\n    public ScrubberLevelsSample()\n    {\n        classLevelSettings = new();\n        classLevelSettings.AddScrubber(_ => _.Replace(\"Three\", \"C\"));\n    }\n\n    [TestMethod]\n    public Task Simple()\n    {\n        var settings = new VerifySettings(classLevelSettings);\n        settings.AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n        return Verify(\"One Two Three\", settings);\n    }\n\n    [TestMethod]\n    public Task SimpleFluent() =>\n        Verify(\"One Two Three\", classLevelSettings)\n            .AddScrubber(_ => _.Replace(\"Two\", \"B\"));\n\n    [AssemblyInitialize]\n    public static void Setup(TestContext testContext) =>\n        VerifierSettings.AddScrubber(_ => _.Replace(\"One\", \"A\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: Adds an EditorConfig rule to treat unused return values of pure methods as an error. This helps catch cases where the Verify() method call is not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances the text comparison output to show inline differences between verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal via dotnet Tool - Shell\nDESCRIPTION: This command installs the Verify.Terminal tool globally, permitting snapshot management from the command line. Requires the .NET CLI and internet access. No other dependencies are needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: This code demonstrates how to run Verify checks using TUnit in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: This snippet shows the required NuGet package references that need to be added to the test project. It includes Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages with specific versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: This F# code snippet shows a sample test using Verify with Expecto. It demonstrates how to create a test task that finds a person and verifies the result using Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit\nDESCRIPTION: Sample code showing how to run Verify's convention checks in an XUnit test to ensure all required conventions are correctly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyChecks() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit v3 NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify Tests with XUnit v3. It includes Verify.Xunit and Verify.DiffPlex packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline. This is done using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Flag to Publish Verify Files on Azure DevOps Pipeline Failure\nDESCRIPTION: Azure DevOps YAML task that sets a flag when tests fail, enabling the conditional publishing of .received files as artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Enable Verify.DiffPlex for Inline Diff Highlighting\nDESCRIPTION: Code snippet demonstrating initialization of Verify.DiffPlex to enhance text comparison by highlighting differences inline. This module initializer should be added to a static class in the test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Tests with Expecto\nDESCRIPTION: Adds the necessary NuGet packages to the test project for Verify and Expecto integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Verifying Serialization with Inferred Named Date Values in .NET Tests (C#)\nDESCRIPTION: This test demonstrates fluent verification where the named date value is deduced from the variable name, eliminating the need to specify the name explicitly. Using Verify, it serializes an object containing a Date instance and applies AddNamedDate to register this value for scrubbed comparison. Requires the Verify API and Date type, and it outputs a Task asynchronously for use with xUnit ([Fact] attribute).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[Fact]\npublic Task InferredNamedDateFluent()\n{\n    var namedDate = new Date(1935, 10, 1);\n    return Verify(\n            new\n            {\n                value = namedDate\n            })\n        .AddNamedDate(namedDate);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified text files to ensure consistent line endings and encoding. Sets line endings to LF and encoding to UTF-8 for proper file comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verify Text Artifacts (gitattributes)\nDESCRIPTION: Demonstrates how to enforce line endings and encoding for Verify's .verified.* text files via .gitattributes. Ensures artifacts have LF newlines and UTF-8 encoding with BOM, promoting cross-platform consistency and correct diffing. Inputs: pattern-based entries in .gitattributes. Outputs: correct handling of text files in source control. Limitation: must expand to all file types in use.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n```\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n```\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration for enabling implicit usings in the project file, which simplifies Verify usage by allowing direct calls to Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Using TestFixtureSource with Verify in NUnit\nDESCRIPTION: Demonstrates using Verify with NUnit's TestFixtureSource attribute. This approach allows test fixture creation with different parameters, which are then included in the verified filename.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixtureSource(nameof(FixtureArgs))]\npublic class TestFixtureSourceUsage(string arg1, int arg2)\n{\n    [Test]\n    public Task Test() =>\n        Verify(\n            new\n            {\n                arg1,\n                arg2\n            });\n\n    static object[] FixtureArgs =\n    [\n        new object[]\n        {\n            \"Value1\",\n            1\n        },\n        new object[]\n        {\n            \"Value2\",\n            2\n        }\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: This snippet shows how to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for simplified usage of Verify() method without fully qualifying it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify test artifacts in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Tests (Instance Method) - C#\nDESCRIPTION: Demonstrates how to ignore parameters for verified tests using the instance method approach with xUnit. It uses VerifySettings to configure parameter ignoring.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerified(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified(arg);\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Implicit Usings in Project\nDESCRIPTION: Project configuration to enable implicit usings for cleaner code syntax when working with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. Verify.DiffPlex enhances the text comparison behavior of Verify by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Expecto NuGet Packages\nDESCRIPTION: Required NuGet package references for using Verify with Expecto testing framework, including YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline Differences - C#\nDESCRIPTION: Initializes the DiffPlex plug-in for Verify in a .NET test project by calling VerifyDiffPlex.Initialize() inside a static ModuleInitializer. This ensures all snapshot comparisons will utilize DiffPlex's inline text difference highlighting. Place in one of the code files in your test project; requires Verify.DiffPlex as a dependency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit and Verify NuGet Packages in C# Project\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using Xunit with Verify. It includes Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Fixie\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with the Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML setting to enable implicit usings in the project file, which is required for proper functionality of the Verify examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: YAML configuration for Azure DevOps to publish *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify *.received.* Files as Artifacts in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to publish the staged *.received.* files as build artifacts when tests fail, making them accessible for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions YAML for Uploading Test Results\nDESCRIPTION: GitHub Actions workflow step to upload received files as artifacts if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, enabling enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line functionality for managing verification snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: GitHub Actions workflow configuration to upload received files on test failure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit NuGet Packages for Verify Testing\nDESCRIPTION: XML snippet for adding required NuGet packages to the test project for Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"*\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Verify Test Results\nDESCRIPTION: YAML configuration for uploading *.received.* files as artifacts in GitHub Actions when tests fail, allowing for easier debugging of Verify test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Step for Uploading Received Files - YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow step that uploads any *.received.* files as artifacts if the workflow run fails. It uses the actions/upload-artifact@v4 action, assigns a name to the artifact, and specifies recursive pattern matching for received files. Place this snippet within the steps section of your workflow YAML file; no customization is required unless artifacts location or name need changing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\\n  if: failure()\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: verify-test-results\\n    path: |\\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified files in source control, including line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: Example of how to run Verify checks in an Expecto test. This ensures that all conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntestCase \"VerifyChecks\" <| fun () ->\n    VerifyChecks.Run()\n    |> Async.AwaitTask\n    |> Async.RunSynchronously\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example of a basic test using Verify with MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for NUnit\nDESCRIPTION: Demonstrates running VerifyChecks in an NUnit test to validate that snapshot file conventions are correctly configured for source control integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified files with correct encoding and line endings\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages\nDESCRIPTION: Required NuGet package references for using MSTest with Verify framework including test SDK, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is helpful for Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: Git configuration to exclude all *.received.* files from source control. These are the generated output files that will be compared against verified files during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: F# code snippet showing a sample Verify test using Expecto framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: XUnit test implementation for running verification checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example of inheriting from VerifyBase to enable Verify functionality in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest and Verify integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto with Verify\nDESCRIPTION: Required NuGet packages to add to your test project for integrating Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for TUnit Testing\nDESCRIPTION: This snippet shows the NuGet packages required for setting up TUnit testing with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"TUnit\" Version=\"3.0.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages for Verify Testing\nDESCRIPTION: The essential NuGet packages required for setting up Verify with NUnit in a .NET project. Includes the core NUnit framework, Verify.NUnit for integration, and the NUnit test adapter for Visual Studio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify\nDESCRIPTION: Adds necessary NuGet packages to the test project for using Expecto with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with Xunit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Command-line instructions for adding necessary NuGet packages to enable Verify testing with NUnit, including the test SDK, NUnit framework, NUnit test adapter, and Verify.NUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Instance Event Handlers Configuration in C#\nDESCRIPTION: Example of configuring instance-level event handlers for verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task OnCallbacks()\n{\n    var settings = new VerifySettings();\n    settings.OnVerify(\n        before: () => Debug.WriteLine(\"before\"),\n        after: () => Debug.WriteLine(\"after\"));\n    settings.OnFirstVerify(\n        (receivedFile, receivedText, autoVerify) =>\n        {\n            Debug.WriteLine(receivedFile);\n            Debug.WriteLine(receivedText);\n            return Task.CompletedTask;\n        });\n    settings.OnVerifyMismatch(\n        (filePair, message, autoVerify) =>\n        {\n            Debug.WriteLine(filePair.ReceivedPath);\n            Debug.WriteLine(filePair.VerifiedPath);\n            Debug.WriteLine(message);\n            return Task.CompletedTask;\n        });\n\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference in XML\nDESCRIPTION: This XML snippet adds a PackageReference for Verify.DiffPlex to a .NET project file (e.g., .csproj). Verify.DiffPlex enhances VerifyTests by providing inline text difference highlighting in test failure outputs, making it easier to spot changes in large strings. Using Version=\"*\" pulls the latest version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages in .csproj\nDESCRIPTION: Required NuGet package references for using Verify with NUnit, including Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter with their respective versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie Packages with .NET CLI - Shell\nDESCRIPTION: Installs the required NuGet packages Fixie and Verify.Fixie using the .NET CLI. These packages enable advanced testing capabilities with Fixie and snapshot verification with Verify. Required to set up the project for new or existing test projects before using Fixie or Verify features. No parameters needed; run in the test project directory. Outputs package installation logs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Example of a simple Verify test using TUnit. The test gets a person object from a class being tested and verifies its contents against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Checks in MSTest (C#)\nDESCRIPTION: Demonstrates a MSTest test class that validates Verify snapshot file conventions using 'VerifyChecks.Run()'. Use this test to automatically check project adherence to naming and artifact rules. Ensure you reference relevant Verify packages and have a 'VerifyChecks' class in scope. Method returns a Task and uses MSTest's [TestMethod] attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic partial class VerifyChecksTests\\n{\\n    [TestMethod]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Source Control Encoding and Line Endings - .gitattributes\nDESCRIPTION: Specifies standard encoding and line ending settings for snapshot files in Git. Configures extensions such as .txt, .xml, and .json for proper handling across platforms. Entry should be added to .gitattributes in the repository root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading test results as artifacts in GitHub Actions workflow\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Members by Predicate in C# Verify Tests\nDESCRIPTION: Demonstrates how to scrub specific members of an object using predicate functions in Verify tests. It includes examples for scrubbing fields, properties, and dictionary entries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task ScrubMemberByPredicate()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    var settings = new VerifySettings();\n\n    settings.ScrubMembers(_ => _ is \"Field\" or \"Property\");\n    settings.ScrubMembers(_ => _.Name is \"PropertyByName\" or \"PropertyThatThrows\");\n\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task ScrubMemberByPredicateFluent()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    var settings = new VerifySettings();\n\n    return Verify(target, settings)\n        .ScrubMembers(name => name is \"Field\" or \"Property\")\n        .ScrubMembers(member => member.Name is \"PropertyByName\" or \"PropertyThatThrows\");\n}\n\n[Fact]\npublic Task ScrubDictionaryByPredicate()\n{\n    var settings = new VerifySettings();\n\n    settings.ScrubMembers(name => name is \"Ignore\");\n\n    var target = new Dictionary<string, object>\n    {\n        {\n            \"Include\", new Dictionary<string, string>\n            {\n                {\n                    \"Ignore\", \"Value1\"\n                },\n                {\n                    \"Key1\", \"Value2\"\n                }\n            }\n        },\n        {\n            \"Ignore\", \"Value3\"\n        },\n        {\n            \"Key2\", \"Value4\"\n        }\n    };\n    return Verify(target, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Date Time Format Configuration\nDESCRIPTION: Configuration block showing different ways to format date-time values with UTC timezone. Includes examples of date-only format, date with time, date with time excluding seconds, and date with time including milliseconds.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeScrubbingDisabled.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n{\n  noTime: 2000-01-01 Utc,\n  withTime: 2000-01-01 01:01:01 Utc,\n  withTimeZeroSeconds: 2000-01-01 01:01 Utc,\n  withTimeMilliSeconds: 2000-01-01 01:01:01.999 Utc\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify DiffPlex Package for Text Comparison\nDESCRIPTION: This shell command installs the Verify.DiffPlex package, which modifies the default behavior of Verify to highlight text differences inline, particularly useful for large string verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Value Checking\nDESCRIPTION: EditorConfig setting to treat unused return values from pure methods as errors, ensuring that Verify() calls are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows direct usage of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simpler code syntax\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration snippet for a .NET project file (.csproj or .fsproj) to enable the `ImplicitUsings` feature. This simplifies code by automatically including common namespaces, which is assumed by the documentation examples. If not enabled, `Verifier.Verify()` must be used instead of `Verify()`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration setting for enabling implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify(). This is recommended for cleaner test code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Inline Text Comparisons\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig settings to treat unused return values of pure methods as errors, which helps catch cases where the result of Verify() is not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI\nDESCRIPTION: Commands to add the necessary NuGet packages to set up Verify.MSTest in a test project, including Microsoft.NET.Test.Sdk, MSTest adapters, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest testing framework and Verify integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with MSTest\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with MSTest. It includes packages for Verify, Verify.MSTest, and DiffEngine.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.3\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.3.2\" />\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"2.2.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with MSTest, including the test SDK and test adapters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the DiffPlex integration which provides improved diff visualization for text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Enhanced Text Comparison\nDESCRIPTION: This snippet shows how to initialize VerifyDiffPlex, which changes the text compare result to highlight text differences inline. It's recommended for improved readability of test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code snippet showing how to initialize Verify.DiffPlex using a module initializer to enhance the text comparison behavior with inline diff highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Comparison\nDESCRIPTION: C# code that initializes Verify.DiffPlex to enable inline difference highlighting for text comparisons in verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Code snippet showing how to initialize Verify.DiffPlex using a module initializer to enhance text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex - C#\nDESCRIPTION: Initializes the Verify.DiffPlex library in the project to change text comparison behavior. Needs to be called once during module load.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Enhanced Text Comparison - C#\nDESCRIPTION: This C# code uses the [ModuleInitializer] attribute to automatically call VerifyDiffPlex.Initialize() at module load time, configuring Verify to use the DiffPlex engine for improved text diff highlighting on test failures. This should be placed in a class in your test project. The Verify.DiffPlex package must be referenced for this initialization. No input parameters are needed; output is internal behavior change within the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package for Inline Diff Output (XML)\nDESCRIPTION: Shows the XML for including Verify.DiffPlex in a csproj file, which enhances diffing experience by highlighting textual differences inline on verification failures. Use '*' for the version to always get the latest available. Insert into your project test .csproj as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex Integration - C#\nDESCRIPTION: This C# snippet demonstrates how to initialize VerifyDiffPlex by calling the static Initialize() method from a module initializer. This configures Verify to use enhanced inline text diffs. This code must be called before running any tests using snapshot verification. The [ModuleInitializer] attribute requires .NET 5+ and the System.Runtime.CompilerServices namespace.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C# Project\nDESCRIPTION: Code to initialize the Verify.DiffPlex plugin which provides enhanced text comparison in test failure output. Uses ModuleInitializer to ensure it's set up once at the start of testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex in C#\nDESCRIPTION: This C# snippet initializes the Verify.DiffPlex module using a ModuleInitializer attribute, which is required to activate its functionality in the verification process. It ensures the inline text comparison differences are enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Text Comparison\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex to enhance text comparison output with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Failure\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Test Artifacts\nDESCRIPTION: GitHub Actions workflow configuration for uploading received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: XML package reference for installing Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified files in text editors. These settings enforce proper encoding, line endings, and other formatting aspects.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: An example of how to write a test using Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Test>]\nlet Test () =\n    task {\n        let person = {Name = \"John Smith\"; Age = 46}\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom DateTimeOffset Comparer Implementation\nDESCRIPTION: Creating a custom DateTimeOffset comparer to override the default comparison behavior during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nCustomDateTimeOffsetComparer\n```\n\n----------------------------------------\n\nTITLE: Git Configuration to Exclude Received Files\nDESCRIPTION: Git configuration to exclude generated *.received.* files from source control while keeping *.verified.* files. These settings should be added to .gitignore.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configure .gitignore for Verify Files\nDESCRIPTION: Git configuration to exclude temporary received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies the usage of Verify's methods without requiring explicit imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Defines settings for a `.gitattributes` file to ensure consistent handling of text-based `*.verified.*` files in Git. It enforces Unix-style line endings (lf) and UTF-8 encoding for common text file extensions like .txt, .xml, and .json.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Text Files\nDESCRIPTION: Sets Git attributes in `.gitattributes` to ensure consistent handling of text-based verified files (`*.verified.txt`, `*.verified.xml`, `*.verified.json`). It enforces LF line endings (`eol=lf`) and UTF-8 encoding (`working-tree-encoding=UTF-8`) to maintain consistency across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Scrubbing XML Member Values during Verification in C#\nDESCRIPTION: This C# snippet demonstrates using `VerifySettings` with `ScrubMember(\"node\")` to replace the content of the `<node>` element with a standard placeholder (`{Scrubbed}`) before comparison. This is useful for handling dynamic or sensitive data within XML structures during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task XmlScrubMember()\n{\n    var settings = new VerifySettings();\n    settings.ScrubMember(\"node\");\n    var xml = \"<body><node>text</node></body>\";\n    return VerifyXml(xml, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: Sample code demonstrating how to verify that all Verify conventions are properly configured by calling VerifyChecks.Run() in a Fixie test. This helps ensure that your environment is set up correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventionsTests\n{\n    public void CheckVerifyConventions() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Operations in Python\nDESCRIPTION: Shows how to define the operations that will be tested by the framework. This example implements basic arithmetic operations to be verified by test cases.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineGuidsWrappedWithSymbol.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool, which provides command-line utilities for managing verification snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for configuring Fixie to work with Verify, including setting up the target assembly and wrapping test executions in ExecutionState.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration for Verify Artifacts\nDESCRIPTION: YAML configuration for AppVeyor to capture and upload .received files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: This code snippet shows a sample test using Verify with XUnit v3. It demonstrates how to verify the result of a method call using the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML snippet defines a CopyFiles@2 task that copies all .received files to an artifact staging directory. It only runs if the 'publishverify' variable is set to 'Yes', indicating a test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify in F# Project\nDESCRIPTION: Adds required NuGet packages including YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto to an F# project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Verify Artifacts\nDESCRIPTION: AppVeyor build configuration snippet that pushes all *.received.* files as artifacts when tests fail, enabling easier debugging of verification failures in CI builds.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Tool Globally\nDESCRIPTION: This shell snippet demonstrates the installation of the Verify tool CLI globally. This tool is used for managing snapshots from the command line, adding convenience and efficiency to the testing process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a Global .NET Tool - Shell\nDESCRIPTION: This command installs DiffEngineTray globally via the dotnet CLI, placing the tool in the user's global .NET tools directory. It is used for monitoring snapshot test file changes in the Windows tray and facilitates quick acceptance or rejection of differences. The installation requires .NET Core SDK with the dotnet tool feature, network access to nuget.org, and administrative rights may be required depending on the system configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to configure GitHub Actions to upload .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files\nDESCRIPTION: PowerShell script to be used in AppVeyor's on_failure build step to capture and upload *.received.* files as artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to ensure that the return value of pure methods (like Verify()) is used, helping to catch cases where developers forget to await verification calls.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit v3 and Verify NuGet Packages in C# Project\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using Verify with XUnit v3. It includes Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify NuGet Packages\nDESCRIPTION: Required NuGet package references for using Verify with Fixie testing framework, including Fixie core and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Configuration for handling line endings and encoding in verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in a TUnit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable Implicit Usings in the project file, which simplifies using Verify by allowing direct access to Verify() method without fully qualifying it.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Verification Failure Artifacts\nDESCRIPTION: GitHub Actions workflow step to upload .received files as artifacts when verification tests fail, making them accessible for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex Inline Highlighting - C# ModuleInitializer\nDESCRIPTION: Initializes VerifyDiffPlex by registering its diff renderer at module load time using a C# module initializer. Requires the Verify.DiffPlex library and C# 9.0+ with module initializers support. Place in a static class/module; no parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Text Files (.editorconfig)\nDESCRIPTION: Provides recommended `.editorconfig` settings for text-based received and verified files (`.json`, `.txt`, `.xml`). These settings help maintain consistency by defining charset (utf-8-bom), line endings (lf), and preventing unwanted whitespace changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example of using VerifyBase class in MSTest\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Class Being Tested in C#\nDESCRIPTION: The class under test that will be verified with both traditional assertion and snapshot testing approaches.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/compared-to-assertion.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nClassBeingTested\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable Implicit Usings in the project file, which simplifies code by allowing direct use of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required XUnit V3 NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit V3, including test SDK, Verify.XunitV3, and XUnit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: DiffPlex Integration - Adding Verify.DiffPlex NuGet Package - Project XML\nDESCRIPTION: This XML snippet adds the Verify.DiffPlex package to your project to enable inline highlighting of text differences during verification failures. Place the <PackageReference> entry in your .csproj, specifying a version or using '*'. Ensure other Verify and MSTest dependencies are present for full integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for NUnit with Verify\nDESCRIPTION: These NuGet package references need to be added to the test project to enable NUnit testing with Verify. Includes the core NUnit framework, test adapters, and the Verify.NUnit integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit and Verify NuGet Packages in C#\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using NUnit with Verify. It includes Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify command-line tool for managing snapshots from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Artifacts\nDESCRIPTION: Publishes the staged .received files as build artifacts when the publishverify flag is set. This makes the files available for inspection after pipeline completion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex which modifies text comparison output to highlight differences inline rather than showing complete received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: Implement a test method to run Verify checks, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Artifacts in Azure DevOps\nDESCRIPTION: Publishes the staged .received files as build artifacts when tests have failed. This makes the files available for inspection in the build artifacts section of Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved diff output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Xunit and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for Xunit and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the DiffPlex integration for Verify testing framework using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray, which helps manage snapshot differences. Requires .NET tools support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Example of a simple Xunit test using Verify to snapshot test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: GitIgnore configuration to exclude *.received.* files from source control, as these are generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using Expecto and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: Xunit test implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude all received files from source control, which are the temporary output files generated by Verify during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: Create a test method to run Verify checks using TUnit attributes and assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add Fixie and Verify.Fixie packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received files. These settings ensure consistent handling of text files in editors, specifying UTF-8 with BOM encoding, LF line endings, and no final newline, which matches Verify's text file conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies the usage of Verify() methods without requiring explicit imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: NUnit test that runs VerifyChecks.Run() to validate that all verification conventions are properly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie NuGet Packages for Verify Testing\nDESCRIPTION: NuGet package references required for using Verify with Fixie, including the core Fixie package and the Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool\nDESCRIPTION: Shows the command `dotnet tool install -g DiffEngineTray` to install the DiffEngineTray tool globally. This tool provides a system tray utility on Windows for managing pending snapshot changes detected by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Testing\nDESCRIPTION: Git configuration settings for excluding received files and handling verified files with specific encodings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Fixie test configuration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verification Output for Named Tuple Test\nDESCRIPTION: The expected verification output showing the serialized named tuple structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/named-tuples.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n  name: 'John',\n  age: 20\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example implementation of a verification test using MSTest framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Demonstrates how to create a TUnit test that runs Verify's convention checks to ensure proper setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Provides a sample NUnit test that uses Verify to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances the text comparison behavior of Verify by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add necessary NuGet packages for setting up Verify with Xunit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Text Files\nDESCRIPTION: Git attributes configuration for verified text files to ensure consistent line endings and UTF-8 encoding across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Specifying Verify.DiffPlex Dependency - NuGet Entry - xml\nDESCRIPTION: Adds the Verify.DiffPlex package, which enhances text diffing in test failure output by providing inline difference highlighting. Insert this <PackageReference> within your .csproj file to enable enhanced diffing capabilities. The version field accepts any available package version; adjust as required for your environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in Test Project\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension which enhances the text comparison visualization for test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verification Result Example for Line Scrubbers\nDESCRIPTION: Shows the output of the line scrubbing test, demonstrating how lines are filtered and replaced during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nLineA\nLineC\nNoMoreLineE\nLineI\n```\n\n----------------------------------------\n\nTITLE: Running Verification Conventions Check with NUnit\nDESCRIPTION: A test fixture that calls VerifyChecks.Run() to validate that all conventions for Verify are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which changes text comparison results to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Custom TimeOnly Comparer Implementation\nDESCRIPTION: Creating a custom TimeOnly comparer to override the default comparison behavior during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nCustomTimeComparer\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: These YAML snippets show how to set up Azure DevOps to publish Verify's .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (XML)\nDESCRIPTION: Specifies the NuGet package reference for `Verify.DiffPlex` in a project file (e.g., .csproj or packages.config). This package provides enhanced inline text difference highlighting for Verify failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Parsing Verification Test Results in JSON\nDESCRIPTION: This JSON structure represents the output of a verification test. It includes a message detailing the file differences and a result object summarizing the mismatched files.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.SingleNotEqual.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\":\n\"Directory: {ProjectDirectory}\nNotEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n\nFileContent:\n\nNotEqual:\n\nReceived: ExceptionParsingTests.Fake.received.txt\nreceivedText\nVerified: ExceptionParsingTests.Fake.verified.txt\nverifiedText\n\",\n  \"result\": {\n    \"NotEqual\": [\n      {\n        \"Received\": \"{ProjectDirectory}ExceptionParsingTests.Fake.received.txt\",\n        \"Verified\": \"{ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool (.NET Shell)\nDESCRIPTION: This shell command installs the verify.tool globally, providing command line access to snapshot management outside an IDE. It is optional and targets users who prefer terminal workflows. The output is a confirmation message from dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in TUnit\nDESCRIPTION: Sample test class showing how to implement verification checks using TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Command Line Tool\nDESCRIPTION: Command to install the global Verify command line tool for managing snapshots from terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project file. Uses wildcard version to always get the latest version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Task for Copying Received Files\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline task that copies all received files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Expecto NuGet Packages for Verification Testing in F#\nDESCRIPTION: The required NuGet package references to add to an F# test project for using Verify with Expecto. This includes Expecto, YoloDev.Expecto.TestSdk, and Verify.Expecto packages along with an updated FSharp.Core reference.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Directory for Verify Tests\nDESCRIPTION: Demonstrates how to specify a custom directory for verified files using the VerifySettings instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseDirectory(\"CustomDirectory\");\nawait Verify(\"valueUseDirectory\", settings);\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Better Text Comparisons\nDESCRIPTION: Code to initialize VerifyDiffPlex, which enhances text comparison by highlighting differences inline rather than showing entire files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text difference visualization for failures by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: This code demonstrates how to run Verify checks in an NUnit test fixture. It creates a test method that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Verify Test Failures\nDESCRIPTION: AppVeyor build configuration that uploads all .received.* files as artifacts when tests fail, making it easier to inspect test failures in CI/CD pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where the Verify() method is called but not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set the correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test for Fixie\nDESCRIPTION: Test class implementation to run Verify convention checks using Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in TUnit Tests\nDESCRIPTION: C# code to initialize VerifyDiffPlex, which enhances text comparison in Verify tests by highlighting differences inline. This is done using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison output by showing inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for consistent file formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Test Failure\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload *.received.* files as artifacts when tests fail, useful for debugging Verify test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Text Comparison\nDESCRIPTION: Code to initialize Verify.DiffPlex which enhances text comparisons by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: This C# snippet shows an NUnit test that uses Verify's convention checking. The VerifyChecks.Run() method is called to confirm that all project conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is important for Verify's usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Enabling ImplicitUsings in Project File\nDESCRIPTION: Configuration setting to enable implicit usings in the project file. When enabled, this allows using Verify() directly instead of the fully qualified Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: This EditorConfig snippet sets the correct encoding, line endings, and other settings for verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie NuGet Packages\nDESCRIPTION: NuGet package references required for using Verify with the Fixie test framework. This includes the core Verify library and Fixie-specific integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Fixie.TestAdapter\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool for Command-line Snapshot Management - Shell\nDESCRIPTION: This snippet demonstrates how to globally install the Verify.Terminal tool using the .NET CLI, enabling command-line management of Verify snapshots. This is an optional step for users who wish to manage their snapshot files without leaving the terminal. The command must be run with the appropriate system permissions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, MSTest packages, and Verify.MSTest to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Tests with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts\nDESCRIPTION: YAML configuration to publish the staged *.received.* files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration for enabling implicit usings in the project file to simplify code by removing the need for explicit using statements when working with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Verify Checks in Xunit with C#\nDESCRIPTION: Demonstrates using VerifyChecks in an Xunit test setup. This involves creating a VerifyChecksTests class with a single Fact that invokes VerifyChecks.Run(). This setup verifies that certain conventions are consistently applied throughout the testing process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Files to Artifact Staging in Azure DevOps YAML\nDESCRIPTION: Copies Verify *.received.* files to the artifact staging directory in Azure DevOps pipeline when the publishverify flag is set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: Git configuration to exclude all received files (temporary test outputs) from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, enhancing code quality for Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Visualization\nDESCRIPTION: Module initializer to enable Verify.DiffPlex, which provides improved visualization of differences in text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Command Line Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attribute settings to ensure consistent line endings and encoding for verified files across all environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received text files, ensuring UTF-8 BOM encoding and LF line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up Azure DevOps Pipeline for Verify Tests\nDESCRIPTION: YAML configuration for Azure DevOps pipeline that ensures *.received.* files are published as artifacts when tests fail, making it easier to diagnose verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Configuration to Exclude Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control. These files are generated during testing and should not be committed to the repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: A .gitignore configuration entry to ensure that Verify's 'received' files (ending in *.received.*) are not committed to source control. Optionally includes '*.received/' directories if UseSplitModeForUniqueDirectory is enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps Pipeline for Verify Test Artifacts\nDESCRIPTION: YAML configuration for Azure DevOps that enables publishing of .received files as artifacts when tests fail. This helps with debugging failed snapshot tests by making the received files available for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified files with consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal via dotnet tool (Shell)\nDESCRIPTION: This command installs the Verify.Terminal .NET global tool (`verify.tool`), which provides command-line utilities for managing Verify snapshot files. This tool is optional.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Integration for Verify\nDESCRIPTION: NuGet package reference for integrating DiffPlex with Verify. DiffPlex improves the text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with Verify\nDESCRIPTION: NuGet package references to add to your test project for integrating Fixie with Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify Output with Scrubbed Types\nDESCRIPTION: Shows the result of verification with type scrubbing applied. Properties with scrubbed types are replaced with {Scrubbed} placeholder in the output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_13\n\nLANGUAGE: txt\nCODE:\n```\n{\n  ToIgnore: {Scrubbed},\n  ToIgnoreByType: {Scrubbed},\n  ToIgnoreByInterface: {Scrubbed},\n  ToIgnoreByBase: {Scrubbed},\n  ToIgnoreByBaseGeneric: {Scrubbed},\n  ToIgnoreNullable: {Scrubbed},\n  ToIgnoreStruct: {Scrubbed},\n  ToIgnoreStructNullable: {Scrubbed},\n  ToInclude: {\n    Property: Value\n  },\n  ToIncludeNullable: {\n    Property: Value\n  },\n  ToIncludeStruct: {\n    Property: Value\n  },\n  ToIncludeStructNullable: {\n    Property: Value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the Verify.DiffPlex package which changes text compare results to highlight text differences inline. Uses ModuleInitializer to ensure it's set up at the start of the test run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces required to integrate Verify with Fixie, handling test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify NuGet Packages in C# Project\nDESCRIPTION: Adds the necessary NuGet package references for TUnit and Verify.TUnit to a C# project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Verify.DiffPlex\nDESCRIPTION: Code to install and initialize Verify.DiffPlex, which enhances Verify's text comparison by highlighting differences inline. This improves readability of test failures when comparing large text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package Reference\nDESCRIPTION: This snippet shows how to add the Verify.DiffPlex package to a .NET project to enable enhanced text comparison. The reference is added to the project file using a PackageReference tag.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for setting up Verify tests with NUnit. It includes packages for NUnit, NUnit3TestAdapter, Microsoft.NET.Test.Sdk, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.5.0\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"19.11.1\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto Testing with Verify\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto testing framework. These packages provide the core functionality for verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: Commands to add the required NuGet packages for Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Content as File to Test Verification in C#\nDESCRIPTION: This code shows how to append custom string content as a separate file to a verification test. It creates an additional verification file containing the provided content alongside the primary verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/append-file.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task AppendContentAsFile()\n{\n    return Verifier.Verify(\"Foo\")\n        .AppendContentAsFile(\"extra content\", \"txt\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: Code snippet demonstrating how to run Verify conventions check using Xunit. This test method calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - .NET XML\nDESCRIPTION: This XML snippet shows how to include the Verify.DiffPlex package reference in your .csproj for enhanced snapshot diffing. Using 'Version=\"*\"' ensures the latest compatible version is installed. Place this in the test project's .csproj file under the <ItemGroup> containing other PackageReferences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: Test class that runs VerifyChecks to ensure proper conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to handle Verify's received files and artifacts\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex PackageReference for Verify Integration (XML)\nDESCRIPTION: This XML snippet shows how to include the Verify.DiffPlex NuGet package in your test project using a PackageReference entry. Ensure that your project file (e.g., .csproj) includes this reference. Version is denoted as a wildcard ('*'); specify a version as needed for production workloads. No additional parameters are required for this snippet; simply place it inside a <ItemGroup> in your project file. This enables inline text diff highlighting with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Default DateTime Comparer\nDESCRIPTION: The default implementation used to compare DateTime values during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nDateTimeComparer\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Test Results in GitHub Actions Workflow\nDESCRIPTION: YAML configuration for GitHub Actions that uploads *.received.* files as artifacts when a build fails. Uses the actions/upload-artifact@v4 action with a failure() condition to capture test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Method Name Using Fluent API\nDESCRIPTION: Shows how to override the default method name using the fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\nawait Verify(\"valueUseMethodNameFluent\")\n    .UseMethodName(\"CustomMethodNameFluent\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Adding the ImplicitUsings property to the project file enables C# implicit usings, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Scoped Recording\nDESCRIPTION: Displays the verified output for the scoped Recording example, showing that only the recording within the scope is included.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n{\n  name1: value1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files, including UTF-8 with BOM encoding, line feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors. This helps ensure that calls to Verify() are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool for Verify\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool. DiffEngineTray sits in the Windows tray, monitors pending changes in snapshots, and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure text extensions of verified files have consistent line endings (LF) and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Disabling ReSharper Orphaned Process Detection\nDESCRIPTION: Configuration to add to solution settings file to disable ReSharper's orphaned process detection, which would otherwise interfere with diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline rather than showing the full content of both files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Expecto\nDESCRIPTION: Required NuGet packages to be added to the test project for using Verify with Expecto tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code initializes Verify.DiffPlex to change the text compare result to highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies code by allowing direct usage of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Treating Returned Values of Pure Methods as Errors - EditorConfig for ReSharper\nDESCRIPTION: This snippet configures ReSharper and Rider via .editorconfig to treat unused return values of methods marked with [Pure] as errors. This ensures that methods like Verify() are always properly awaited or their values consumed, catching missed awaits or similar mistakes early during editing. Place in your project’s .editorconfig file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Usings in Project File\nDESCRIPTION: Configuration for enabling implicit usings in the project file. This allows the use of Verify() without fully qualifying the method name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enable Implicit Usings in .NET Projects\nDESCRIPTION: This XML snippet shows how to enable Implicit Usings in a .NET project. It ensures that examples compile correctly by automatically bringing commonly used namespaces into scope.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting ImplicitUsings to enable in the project file to allow using Verify() directly instead of Verifier.Verify(). This simplifies the code in test methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Entry for Split Mode - Shell\nDESCRIPTION: Specifies the additional .gitignore entry to be included when using 'UseSplitModeForUniqueDirectory' in Verify setups. This ensures that all directories ending with '.received/' are ignored, preventing accidental commits of pending snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in csproj\nDESCRIPTION: XML snippet for a `.csproj` file showing how to add the `Verify.DiffPlex` package reference. This package enhances VerifyTests by providing inline text difference highlighting on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set correct line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to ignore *.received.* files that are generated during testing but should not be committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced diff visualization in test output\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Verify Tests in Azure DevOps YAML\nDESCRIPTION: This YAML snippet adds a build step to set a flag if the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a recommended practice when using Verify as these are temporary comparison files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Using Verify\nDESCRIPTION: Reference to a sample MSTest implementation that demonstrates how to use Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestMSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Key with GUID in JSON\nDESCRIPTION: This snippet defines a JSON object with a single key-value pair. The key is named 'key' and its value is set to 'Guid_1', which likely represents a placeholder for an actual GUID.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonGuid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  key: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings for Verify Testing\nDESCRIPTION: The configuration needed in the project file to enable implicit usings, which simplifies using Verify by allowing direct calls to Verify() method instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Diff Visualization\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension which enhances the text comparison output by highlighting differences inline rather than showing full content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in NUnit Verify Tests (Fluent)\nDESCRIPTION: Shows how to override the text used for parameters in NUnit Verify tests using the fluent approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task UseTextForParameters(string arg, int number)\n{\n    return Verifier.Verify(\"value\")\n        .UseTextForParameters(new\n        {\n            myArg = arg,\n            myNumber = number\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with xUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: These .gitattributes entries ensure that verified files use the correct line endings and encoding in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: These .gitattributes entries set the correct line endings and encoding for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify Text Files\nDESCRIPTION: Shows .gitattributes configuration to ensure consistent handling of verified text files with line endings set to LF and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks with XUnit V3\nDESCRIPTION: Sample test implementation showing how to run Verify convention checks using XUnit V3 test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: Creates a pipeline variable 'publishverify' when tests fail using a command line task. This flag is used to conditionally execute subsequent artifact publishing steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: This shell command installs the DiffEngineTray tool globally. DiffEngineTray helps manage pending snapshot changes by monitoring them within the Windows tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in text editors, including character encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool via CLI\nDESCRIPTION: Installs the Verify.Terminal dotnet tool globally using the .NET CLI. This tool provides command-line utilities for managing Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Files in Git\nDESCRIPTION: This property file snippet configures .gitignore to exclude all '*.received.*' files from source control, which are temporary files generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files as Artifacts on AppVeyor Build Failure\nDESCRIPTION: This snippet demonstrates how to configure AppVeyor to automatically upload all .received files as artifacts when a build fails. It uses the on_failure build step and the Push-AppveyorArtifact cmdlet to achieve this.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Basic example showing how to write a verification test using XUnit V3 and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameters in TUnit Tests\nDESCRIPTION: Demonstrates how to use UseParameters() to specify custom parameters for test naming when automatic detection is insufficient.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(someValue)\n    .UseParameters(\"Value1\", \"Value2\");\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: These NuGet package references should be added to the test project to enable Fixie testing with Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool for Command Line Snapshot Management\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool which allows managing verification snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Copying Verify *.received.* Files to Artifact Staging in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to copy all *.received.* files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Git ignore settings to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via dotnet CLI - Bash\nDESCRIPTION: Adds the Verify.DiffPlex package, which provides in-line text diff highlighting for Verify, by invoking the dotnet CLI from the terminal. Requires .NET SDK and should be run in the project directory. This step is optional but enhances test result output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages for Verify\nDESCRIPTION: Required NuGet package references to be added to the test project for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.Expecto on MacOS\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are temporary output files generated by Verify during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: C# test class implementing convention checks for Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie Test\nDESCRIPTION: C# code to run Verify checks in a Fixie test, ensuring that all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify NuGet Packages in C#\nDESCRIPTION: Adds the required NuGet packages for TUnit and Verify to the test project's csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verify Text Files\nDESCRIPTION: Defines `.gitattributes` settings to ensure text-based verified files (`*.verified.txt`, `*.verified.xml`, `*.verified.json`) are treated as text, use LF line endings (`eol=lf`), and have UTF-8 encoding (`working-tree-encoding=UTF-8`) in the Git repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the C# project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies usage of Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as an error in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet package references for setting up MSTest with Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Source Control Ignores and Includes\nDESCRIPTION: Configure .gitignore and .gitattributes to exclude or include specific test artifact files; useful for maintaining controlled source repositories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: Configures `.gitignore` to exclude `*.received.*` files and optionally `*.received/` directories (when using UseSplitModeForUniqueDirectory) from source control. These files represent the actual output during a test run and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Object in JavaScript/JSON\nDESCRIPTION: An empty object literal initialization. This represents the most basic form of object creation in JavaScript or a minimal valid JSON structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.CustomExceptionProp.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: C# code to initialize VerifyDiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Pattern to exclude received test files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto in an F# project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Received Files as AppVeyor Artifacts (PowerShell/YAML)\nDESCRIPTION: An AppVeyor configuration snippet (`appveyor.yml`) defining an `on_failure` step. It uses PowerShell (`ps`) to find all `*.received.*` files recursively and uploads them as build artifacts using `Push-AppveyorArtifact` if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add required NuGet packages to the test project for using Verify with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for NUnit with Verify\nDESCRIPTION: Required NuGet package references to be added to the test project's csproj file, including Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter with specific versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of a test class that inherits from VerifyBase to use Verify functionality without needing the UsesVerify attribute, providing a simpler way to integrate with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex package to enhance text comparison visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to ensure DiffPlex is set up when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Expecto NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet packages to add to the test project for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Expecto\" Version=\"10.*\" />\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.*\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Excluding Subdirectory for Verify Received Files (.gitignore, when using Split Mode)\nDESCRIPTION: Shows an additional exclusion entry for users of Split Mode directory layout to ignore all files within any '*.received/' directory, ensuring all transient received files are excluded from source control when using this Verify organizational mode.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package via Dotnet CLI - .NET Shell Command\nDESCRIPTION: This command adds the Verify.DiffPlex NuGet package to the project, enabling enhanced inline diff rendering for text verification failures in snapshot tests. It should be executed with the dotnet CLI in the appropriate project directory. Requires Verify and .NET SDK as prerequisites.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude received files from source control while preserving verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with TUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure that verified and received files are properly formatted with UTF-8 BOM encoding, LF line endings, and no final newline when edited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Ignore: Excluding .received.* Files\nDESCRIPTION: This snippet is an example entry for a .gitignore file to ensure that files Matching *.received.* (intermediate verification results) are excluded from source control in line with Verify conventions. No code execution involved—simply add this pattern to .gitignore. Helps keep version control clean by not uploading transient files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline instead of showing complete contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the .csproj file, which allows omitting namespace imports in C# files, simplifying the Verify syntax from Verifier.Verify() to Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified files to ensure consistency across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff output in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages\nDESCRIPTION: Adds the necessary NuGet packages for Xunit testing with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.1.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Publish Received Files Task\nDESCRIPTION: YAML task to publish the staged .received files as build artifacts, making them accessible for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Verify Tests in Azure DevOps\nDESCRIPTION: This task sets a pipeline variable when tests fail, which is used to conditionally publish the .received files. It uses the Azure DevOps failed() condition to only execute when the previous test task fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XunitV3\nDESCRIPTION: A sample test implementation using Verify with XunitV3. This demonstrates the basic pattern for writing verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Verify Files in Azure DevOps Pipeline\nDESCRIPTION: YAML task for Azure DevOps that sets a flag when tests fail, which will be used to determine whether to publish *.received.* files from Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Configuration for handling line endings and encoding in verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files, setting them to use line-feed endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps build pipeline, including failure conditions and artifact publishing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Shows the .gitignore entry needed to exclude *.received.* files from source control while keeping *.verified.* files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for testing with Verify and XUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify NuGet Packages to Test Project\nDESCRIPTION: The required NuGet package references to add to the test project's csproj file to enable Verify with Fixie. This includes the Fixie test framework and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps to publish the staged *.received.* files as build artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in NUnit\nDESCRIPTION: NUnit test class for running VerifyChecks.Run() to validate that all Verify conventions are being followed in the project, such as proper file handling and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Demonstrates how to run Verify's convention checks using TUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Source Control for Verified Text Files - Git Attributes\nDESCRIPTION: Sets file encoding and end-of-line normalization rules for verified text, XML, and JSON snapshot files using .gitattributes entries. Ensures consistency for snapshot file formats across platforms and editors by forcing UTF-8 with BOM and LF line endings. Place in the .gitattributes file. Applicable to extension patterns for different file types as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure showing the path from home to the current page, followed by a list of available test framework options\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Visual Studio with ReSharper](Windows_VisualStudioWithReSharper.md) > [Prefer GUI](Windows_VisualStudioWithReSharper_Gui.md)\n\n## Select Test Framework\n\nOptions:\n * [Xunit](Windows_VisualStudioWithReSharper_Gui_Xunit.md)\n * [XunitV3](Windows_VisualStudioWithReSharper_Gui_XunitV3.md)\n * [NUnit](Windows_VisualStudioWithReSharper_Gui_NUnit.md)\n * [TUnit](Windows_VisualStudioWithReSharper_Gui_TUnit.md)\n * [Fixie](Windows_VisualStudioWithReSharper_Gui_Fixie.md)\n * [MSTest](Windows_VisualStudioWithReSharper_Gui_MSTest.md)\n * [Expecto](Windows_VisualStudioWithReSharper_Gui_Expecto.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Info for Expecto\nDESCRIPTION: Configures the path derivation logic for Expecto tests, setting snapshot files to be stored in a Snapshots directory under the project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_20\n\nLANGUAGE: cs\nCODE:\n```\nVerifier.DerivePathInfo(\n    (sourceFile, projectDirectory, type, method) => new(\n        directory: Path.Combine(projectDirectory, \"Snapshots\"),\n        typeName: type,\n        methodName: method));\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files in text editors, setting UTF-8 BOM encoding, LF line endings, and disabling final newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch misuse of Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Setting Flag to Publish Verify Received Files in Azure DevOps Pipeline\nDESCRIPTION: Azure DevOps pipeline task to set a flag when tests fail, enabling conditional publishing of *.received.* files for debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files\nDESCRIPTION: PowerShell script to be used in AppVeyor CI on_failure step to capture and upload all *.received.* files as artifacts for debugging failed tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values from pure methods as errors, which helps catch cases where Verify() calls aren't properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: Code to initialize the DiffPlex text comparison plugin for Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie NuGet Packages in C#\nDESCRIPTION: This snippet shows the NuGet packages required for using Fixie with Verify. It includes packages for Fixie, Verify, and Verify.Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"3.*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: Azure DevOps pipeline task to copy Verify's *.received.* files to a staging directory when tests fail, preparing them for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally, which provides a system tray utility for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings\nDESCRIPTION: XML configuration to enable implicit usings in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit V3 with Verify\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit V3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files in .editorconfig\nDESCRIPTION: Provides `.editorconfig` settings for text-based received and verified files (`*.{received,verified}.{json,txt,xml}`). Enforces UTF-8 with BOM encoding, LF line endings, and prevents trailing newlines to maintain consistency with Verify's output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Source control settings for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions Implementation with MSTest\nDESCRIPTION: MSTest class that runs verification checks to ensure all conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: This snippet demonstrates a sample Verify test using Expecto. It verifies a Person object with specific properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Verify Person`` =\n    task {\n        let person = Person(Id = 1, Name = \"John Smith\")\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Verification Convention Checks with XunitV3\nDESCRIPTION: A test class that runs Verify's conventions checking system. This helps ensure that all required configuration and settings are properly applied in the testing environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in text editors, specifying character encoding, line endings, and other formatting rules.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in csproj\nDESCRIPTION: Adds a `<PackageReference>` for `Verify.DiffPlex` to the project file, typically using a wildcard version (`*`) to get the latest. This optional package enhances Verify's text comparison by providing inline difference highlighting upon test failure, leveraging the DiffPlex library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for consistent file formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Global Exception Capture Configuration\nDESCRIPTION: Setting up global exception capture for all combination tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalCaptureExceptions\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package\nDESCRIPTION: This XML snippet includes the Verify.DiffPlex package in the project, which changes the text compare result to inline highlighting of text differences, making it easier to spot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie\nDESCRIPTION: Demonstrates how to run Verify checks within a Fixie test method. This ensures that all conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Auto-Verify with Conditional Delegate in C#\nDESCRIPTION: Shows how to configure auto-verification with a conditional delegate that checks file extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.AutoVerify(\n    verifiedFile =>\n        Path.GetExtension(verifiedFile) == \"png\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings for a .NET Project\nDESCRIPTION: Configuration setting for enabling implicit usings in a .NET project to simplify Verify test syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a Global .NET Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Fluent Event Handlers Configuration in C#\nDESCRIPTION: Shows how to configure event handlers using fluent syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task OnFluentCallbacks() =>\n    Verify(\"value\")\n        .OnVerify(\n            before: () => Debug.WriteLine(\"before\"),\n            after: () => Debug.WriteLine(\"after\"))\n        .OnFirstVerify(\n            (receivedFile, receivedText, autoVerify) =>\n            {\n                Debug.WriteLine(receivedFile);\n                Debug.WriteLine(receivedText);\n                return Task.CompletedTask;\n            })\n        .OnVerifyMismatch(\n            (filePair, message, autoVerify) =>\n            {\n                Debug.WriteLine(filePair.ReceivedPath);\n                Debug.WriteLine(filePair.VerifiedPath);\n                Debug.WriteLine(message);\n                return Task.CompletedTask;\n            });\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit NuGet Packages for Verify Testing\nDESCRIPTION: The required NuGet packages that need to be added to the test project for using Verify with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"NUnit\" Version=\"*\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"*\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Verified and Received Text File Conventions - INI\nDESCRIPTION: Configures an .editorconfig section that applies strictly to received and verified files in json, txt, or xml formats. Sets encoding to UTF-8 with BOM, line endings to LF, disables adding a final newline, and prevents whitespace trimming, thereby matching file handling expectations of Verify. Place within the project's .editorconfig file for proper editor behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Implementation\nDESCRIPTION: Example of implementing a test using Verify with Expecto in F#\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Verify Snapshot Files - EditorConfig\nDESCRIPTION: This snippet defines recommended .editorconfig properties for editing any received or verified snapshot files (json, txt, xml) produced by Verify. Settings ensure UTF-8 BOM encoding, LF newlines, no final newline, and various indentation rules. Add this section to your .editorconfig to help tools and editors maintain consistency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Text Files\nDESCRIPTION: Configuration for .editorconfig to standardize text file formats, ensuring consistent use of UTF-8 encoding with BOM and LF newlines. This helps maintain consistency for verified and received text files across different development environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration that ensures consistent formatting when editing verified and received text files in any editor that supports EditorConfig.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified files to ensure consistent behavior across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verify Text Files\nDESCRIPTION: GitAttributes configuration to ensure all verified text files use consistent line endings (LF) and UTF-8 encoding, which is crucial for reliable verification across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Source Control Settings for Verified Files – Gitattributes\nDESCRIPTION: Configures .gitattributes to enforce line endings (LF) and encoding (UTF-8 with BOM) for verified snapshot text files. These settings help standardize text file handling across machines and editors. Add these rules to your repository's .gitattributes for proper cross-platform consistency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verify\nDESCRIPTION: Git attributes configuration to ensure proper line ending and encoding settings for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Results\nDESCRIPTION: Verified output showing custom serialization results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\nCombinationTests.Combination_CustomSerialization.verified.txt\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files, specifying UTF-8 BOM encoding, line ending format, and other text file characteristics.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with MSTest\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with MSTest. It includes Verify.MSTest for integration and Microsoft.NET.Test.Sdk for running tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray – Shell\nDESCRIPTION: A .NET CLI command to install DiffEngineTray globally. DiffEngineTray is a utility that integrates with Verify to provide snapshot difference review and acceptance/rejection via a system tray interface on Windows. Optional, but enhances user workflow when handling differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which provides command-line utilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Parameters in TUnit (Fluent Approach)\nDESCRIPTION: Shows how to ignore parameters while passing custom parameters for file naming using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(\"Foo\")\n    .IgnoreParametersForVerified(\n        parameters => new[]\n        {\n            parameters[\"arg1\"],\n            parameters[\"arg2\"]\n        });\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for configuring Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex NuGet package to enhance text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Add the required NuGet packages to the test project for using Verify with Expecto. This includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Module\nDESCRIPTION: C# code to initialize the VerifyDiffPlex module for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Package for DiffPlex Extension\nDESCRIPTION: Install Verify.DiffPlex to enhance text comparison by highlighting text differences inline. Requires using the dotnet CLI to add the package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex in Test Project (C# Module Initializer)\nDESCRIPTION: C# module initializer that activates DiffPlex integration for snapshot diffing within Verify. The static method should be placed in a source file within the test project. It relies on the Verify.DiffPlex NuGet package and must be present for inline text diffing to be active during tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex, which enhances text comparison output in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: XUnit V3 Collection Declaration\nDESCRIPTION: Declaration for applying XUnit V3 dangling snapshots collection to tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nXunitV3DanglingCollection\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Test Failure in Azure DevOps\nDESCRIPTION: This YAML snippet sets a flag to publish Verify *.received.* files when the test step fails. It uses a CmdLine task with a failed condition to set a variable.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in NUnit\nDESCRIPTION: Example implementation of Verify checks in NUnit. This test fixture runs verification checks to ensure file conventions are followed correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool via CLI\nDESCRIPTION: This command installs the `verify.tool` .NET tool globally using the .NET CLI. Verify.Terminal provides command-line utilities for managing Verify snapshots, offering an alternative to graphical tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: GitIgnore settings to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Command to install the Verify.DiffPlex package which improves text difference visualization in test failure output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify Terminal tool for managing snapshots via command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verify Verified Text Files\nDESCRIPTION: Sets Git attributes for common verified text file extensions (`.txt`, `.xml`, `.json`). It ensures these files are treated as text (`text`), use Line Feed (LF) line endings (`eol=lf`), and are encoded using UTF-8 (`working-tree-encoding=UTF-8`) in the working directory. This promotes consistency across different development environments and aligns with VerifyTests' text file conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for maintaining consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters in Verified Filenames (Instance Approach)\nDESCRIPTION: Shows how to use IgnoreParametersForVerified() to create a single verified file for multiple test cases with different parameters using the instance approach in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"One\")]\n[TestCase(\"Two\")]\npublic Task IgnoreParametersForVerified(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified();\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of text-based verified files with consistent line endings and encoding across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from version control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused pure method return values as errors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration that enables implicit usings in the project file, which is required for the Verify examples to work properly without explicit namespace imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: This YAML snippet sets a flag to publish Verify's *.received.* files when a test step fails in Azure DevOps. It uses a conditional task to set a variable based on the test outcome.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration setting to enable Implicit Usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with NUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. Verify.DiffPlex changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Pushing .received Files as AppVeyor Artifacts on Build Failure\nDESCRIPTION: This snippet demonstrates how to configure AppVeyor to capture all .received files as artifacts when a build fails. It uses PowerShell to recursively find .received files and push them as artifacts using the Push-AppveyorArtifact cmdlet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Targets in Fixie\nDESCRIPTION: Implementation example of explicit targets in Fixie test framework. Shows Fixie-specific verification patterns.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/explicit-targets.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nExplicitTargetsFixie\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally, which provides a system tray application for managing snapshot test differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling line endings and encoding in verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Build Artifacts\nDESCRIPTION: Publishes the staged .received files as build artifacts when the publishverify flag is set. Configures the artifact name and publishing location in the pipeline container.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: MSBuild property to enable implicit usings, which allows shorter syntax when using Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore patterns for excluding received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: Sets EditorConfig rules for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Creating Verify Checks Tests for Expecto\nDESCRIPTION: Sample implementation for running Verify convention checks with Expecto. This test ensures all Verify conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions with TUnit\nDESCRIPTION: Demonstrates how to run verification checks to ensure all Verify conventions are correctly set up in your TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initialize Verify DiffPlex\nDESCRIPTION: Initialize Verify.DiffPlex to enhance text comparison by highlighting differences. Ensure DiffPlex is installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize the Verify.DiffPlex extension, which improves text comparison visualization by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Files\nDESCRIPTION: GitIgnore configuration for excluding received files and GitAttributes settings for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to set a flag when tests fail, which will be used to conditionally publish .received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: This snippet shows the necessary gitignore entry to exclude all *.received.* files from source control. These files are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Xunit in C#\nDESCRIPTION: Commands to add necessary NuGet packages for using Verify with Xunit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Test Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received test files, including character encoding, line endings, and whitespace handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified files to ensure consistency across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Verify Test Results\nDESCRIPTION: Configures a GitHub Actions step to upload *.received.* files as artifacts if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: Example of a test class inheriting from VerifyBase, which is one way to enable Verify functionality in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Files\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to publish *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received test files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in MSTest\nDESCRIPTION: Test class implementation for running Verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received files in text editors, ensuring consistent encoding, line endings, and no trailing newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify Tests\nDESCRIPTION: GitIgnore pattern to exclude *.received.* files from source control, which are generated by Verify during test runs but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: Adds patterns `*.received.*` and `*.received/` (for `UseSplitModeForUniqueDirectory`) to the `.gitignore` file. This prevents temporary \"received\" snapshot files generated during test runs from being committed to source control, while ensuring \"verified\" files are committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package via CLI (.NET Shell)\nDESCRIPTION: This shell command installs the optional Verify.DiffPlex NuGet package, which changes the default text diff behavior in Verify to provide inline highlighted diffs. This is recommended for easier test output analysis on failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: GitIgnore patterns to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: NuGet package references needed to use Verify with Xunit, including Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received files as artifacts in GitHub Actions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Matching Regular Expression Patterns Against Strings in Swift\nDESCRIPTION: This snippet shows how to use the Swift firstMatch method to match a regular expression pattern against a string, capturing the matching result if found.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.Run_dash.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nlet match = \"a b c\".firstMatch(of: pattern1)\nprint(match as Any) // Optional(\"a b c\")\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex for inline text difference highlighting in Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Implement a test method to run VerifyChecks.Run() using TUnit. This ensures that all Verify conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: GitAttributes Configuration for Verify Files\nDESCRIPTION: GitAttributes configuration to ensure verified files use consistent line endings (LF) and UTF-8 encoding, which is essential for cross-platform compatibility.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair in JSON\nDESCRIPTION: This JSON snippet defines a simple object containing a single key-value pair. The key is `Value` and its associated value is the string `Value2`. This structure is likely used for configuration or data storage within the associated project. Note that keys should ideally be enclosed in double quotes for strict JSON compliance.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableStructDataFluent_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Members in JavaScript Object\nDESCRIPTION: This snippet initializes a JavaScript object literal with two fields: BoolMember, a plain boolean, and NullableBoolMember, likely used to represent an optional or nullable value but currently set to a boolean. No external dependencies are required. Input is inline within the snippet, and output is the constructed object, primarily used for configuration, testing, or as a stub.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.BoolFalse.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  BoolMember: false,\n  NullableBoolMember: false\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: TUnit test implementation for running verification checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DateTime 'After' Comparison in C#\nDESCRIPTION: This unit test method checks if a DateTime object is correctly identified as being after another DateTime object. It creates two DateTime instances with a one-second difference and asserts that the later DateTime is indeed after the earlier one.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineDateTimesEndingLetters.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void Test()\n{\n    var earlier = new DateTime(2000, 1, 1, 12, 0, 0);\n    var later = earlier.AddSeconds(1);\n    Assert.That(later.After(earlier));\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project using dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Using Instance Comparers in Verify Tests\nDESCRIPTION: Examples of applying a custom comparer for a specific test instance. Shows both the traditional approach using VerifySettings and the fluent API for configuring a stream comparer for PNG file verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/comparer.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task InstanceComparer()\n{\n    var settings = new VerifySettings();\n    settings.UseStreamComparer(CompareImages);\n    return VerifyFile(\"sample.png\", settings);\n}\n\n[Fact]\npublic Task InstanceComparerFluent() =>\n    VerifyFile(\"sample.png\")\n        .UseStreamComparer(CompareImages);\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command line instruction to install DiffEngineTray globally using .NET CLI\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the DiffPlex integration with Verify for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider Settings\nDESCRIPTION: Configuration to disable orphaned process detection in Rider, which can interfere with Verify's diff tool functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Required NuGet package references for setting up NUnit with Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Command to add the optional Verify.DiffPlex package which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified text files with specific encoding and line endings\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Directory Using Fluent API\nDESCRIPTION: Shows how to specify a custom directory for verified files using the fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nawait Verify(\"valueUseDirectoryFluent\")\n    .UseDirectory(\"CustomDirectory\");\n```\n\n----------------------------------------\n\nTITLE: ReSharper Solution-Level Configuration for Orphaned Process Detection\nDESCRIPTION: Setting to add to the solution-level .DotSettings file to disable ReSharper's orphaned process detection, which would otherwise interfere with diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: Publishes the staged .received files as build artifacts for easy inspection. This task runs conditionally when tests have failed and makes the files available from the Azure DevOps UI under the 'Verify' artifact name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Configuration for handling line endings and encoding in verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up NUnit with Verify testing framework including test SDK, NUnit, Verify.NUnit and test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: Instructs Git to ignore all files matching the pattern `*.received.*`. This prevents temporary \"received\" files, generated by VerifyTests during a test run when a snapshot mismatch occurs, from being accidentally committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Configuration for excluding received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Extension for Verify - .NET CLI - bash\nDESCRIPTION: Displays the command to add the Verify.DiffPlex NuGet package to a .NET test project. This package provides inline text differential visualization in Verify-based tests. Run this from the test project folder for enhanced failure output when verifying large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in NUnit Tests (Instance Approach)\nDESCRIPTION: Shows how to override the text used for parameters in file naming using UseTextForParameters() with an instance approach in NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task UseTextForParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseTextForParameters(arg);\n    return Verify(arg + \"UseTextForParameters\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Sample test showing how to run Verify's convention checks using Expecto. This validates that all required conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyConventions() =\n    task {\n        return VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet tool\nDESCRIPTION: This command installs DiffEngineTray globally using the dotnet tool, which helps monitor potential changes in snapshots, enabling acceptance or rejection actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in MSBuild Project File\nDESCRIPTION: Shows the MSBuild property `<ImplicitUsings>` set to `enable` within a project file (like `.csproj` or `.fsproj`). Enabling this feature is recommended for the examples to compile correctly, as it automatically includes common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This task publishes the staged Verify received files as build artifacts. It only executes when the 'publishverify' variable is set to 'Yes'. The artifacts are published to a container with the name 'Verify'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/build-server-azuredevops.include.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: XML configuration line to enable implicit usings in a .NET project, which allows direct usage of Verify() methods without explicit namespace imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required to use Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Install Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex NuGet package to the project for enhanced diff functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Tool via CLI\nDESCRIPTION: This command uses the .NET CLI to install DiffEngineTray as a global tool. DiffEngineTray runs in the system tray and helps manage Verify snapshot changes by providing notifications and options to accept or reject differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Expecto and Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify Tests with Expecto. It includes packages for Expecto, Verify, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Expecto\" Version=\"10.*\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in XML\nDESCRIPTION: Configures the project to enable Implicit Usings which simplifies namespace management in .NET projects. Set `<ImplicitUsings>` to `enable` in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitUsings for Verify Tests\nDESCRIPTION: Setting ImplicitUsings to 'enable' in the project file to ensure examples compile correctly without explicit using statements. This allows direct usage of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitUsings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies Verify usage by allowing direct calls to Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Tests\nDESCRIPTION: Pattern to add to .gitignore to exclude received files from source control, which is a required convention for Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with the Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting when editing verified and received files, maintaining UTF-8 BOM encoding and LF line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Fixie NuGet Packages with dotnet CLI\nDESCRIPTION: Commands to add the required NuGet packages for Verify.Fixie to a test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control - .gitignore\nDESCRIPTION: Directs git to ignore all files matching '*.received.*' pattern, ensuring transient files generated during verification are not committed. Add these lines to a .gitignore file at the root of the repository. No parameters or dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for cleaner code syntax when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files, including character encoding, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Digit\nDESCRIPTION: A simple display of the number 1 in plaintext format. This represents a minimal test case or output value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.UInt16.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to properly configure Fixie to work with Verify, including setting ExecutionState for each test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using XUnit v3. It uses the [Fact] attribute and calls VerifyChecks.Run() to perform the checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Verify Received Files - Shell\nDESCRIPTION: Adds patterns to a .gitignore file to prevent all '*.received.*' files generated by Verify from being committed to source control. It also supports directories when using split mode. Paste these patterns into the root .gitignore for proper exclusion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Source Control Configuration\nDESCRIPTION: Gitignore configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration in Verify - C#\nDESCRIPTION: Initializes the VerifyDiffPlex plugin using a C# module initializer. Add this to a source file to automatically activate the DiffPlex inline diff visualizer globally for the test run. Requires Reference to Verify.DiffPlex and knowledge of module initializers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: A test method that executes Verify's convention checks to ensure that all configured conventions are properly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyConventionTests\n{\n    [TestMethod]\n    public Task Run() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using the Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received text files, ensuring UTF-8 BOM encoding, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: Sample code snippet demonstrating how to run Verify checks within an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: A code snippet showing how to run Verify conventions check in an XunitV3 test by calling VerifyChecks.Run() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitUsings in C# Project\nDESCRIPTION: This snippet shows how to enable ImplicitUsings in a C# project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration in Verify - C#\nDESCRIPTION: This C# code configures VerifyTests to use DiffPlex for inline text difference highlighting by calling 'VerifyDiffPlex.Initialize()' inside a static module initializer. Requires the Verify.DiffPlex NuGet package installed. The '[ModuleInitializer]' attribute ensures the initialization runs automatically during module load, so no manual calls are needed in the test setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances the diff output by showing inline differences instead of full content comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Integration Package via NuGet - XML\nDESCRIPTION: Demonstrates how to add the Verify.DiffPlex NuGet package to the test project's dependencies. This package modifies Verify's behavior to provide inline text diffs for improved readability on test failure. This package must be included in the project file (.csproj) using a <PackageReference> node. No parameters beyond 'Include' and 'Version' are needed; 'Version' can be set to '*' for latest available.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance-level Descending Enumerable Ordering in C#\nDESCRIPTION: Sets up instance-level descending ordering for IEnumerable items using a specified key selector.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar person1 = new Person(\"b\");\nvar person2 = new Person(\"a\");\nvar settings = new VerifySettings();\nsettings.OrderEnumerableByDescending<Person>(_ => _.Name);\nawait Verify(new List<Person> {person1, person2}, settings);\n```\n\n----------------------------------------\n\nTITLE: Initialize VerifyDiffPlex Module in C#\nDESCRIPTION: Utilize a module initializer in C# to configure VerifyDiffPlex for your testing environment. Ensure C# is the programming language used for your test files. This snippet sets up the text comparison behavior to highlight differences inline using Verify.DiffPlex.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex with Module Initializer\nDESCRIPTION: This C# snippet demonstrates how to initialize the Verify.DiffPlex module using a ModuleInitializer attribute, ensuring that the DiffPlex text comparison functionality is set up at the start.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Code to initialize Verify.DiffPlex which enhances the text comparison behavior by highlighting differences inline in test failure output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Setting for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors, helping to catch cases where the result of Verify is not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Named Dates and Times with Fluent API\nDESCRIPTION: Using the fluent API to assign names to specific date/time values for consistent replacement during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nNamedDatesAndTimesFluent\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling verify test artifacts in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto\nDESCRIPTION: Install necessary NuGet packages to support enhanced Expecto testing with Verify and Expecto integration. These packages ensure efficient test execution and verification capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\\ndotnet add package Expecto\\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Test Results JSON Structure\nDESCRIPTION: JSON structure containing test verification results including file comparisons across different states (New, NotEqual, Delete, Equal). Shows relationships between received and verified test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.MultipleItem.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\nNew:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n  - Received: ExceptionParsingTests.Fake.received.bin\n    Verified: ExceptionParsingTests.Fake.verified.bin\nNotEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n  - Received: ExceptionParsingTests.Fake.received.bin\n    Verified: ExceptionParsingTests.Fake.verified.bin\nDelete:\n  - ExceptionParsingTests.Fake.received.txt\n  - ExceptionParsingTests.Fake.received.bin\nEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n  - Received: ExceptionParsingTests.Fake.received.bin\n    Verified: ExceptionParsingTests.Fake.verified.bin\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add required NuGet packages for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: MSTest implementation that runs verification checks to ensure all conventions are being followed correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with NUnit\nDESCRIPTION: A code snippet showing how to run verification checks in an NUnit test environment. This verifies that all conventions are properly set up for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in XUnit v3\nDESCRIPTION: Code snippet showing how to run Verify's convention checks in an XUnit v3 test. This ensures that all Verify conventions are properly configured in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Example of a Fixie test class using Verify to test a method that finds a person.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: A sample test using TUnit and Verify. This snippet demonstrates how to write a basic test using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Example of a simple Xunit test that uses Verify to compare the result of a method call with a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verify Test with TUnit\nDESCRIPTION: A complete example of a TUnit test using Verify to snapshot test data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"1 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Fluent Auto-Verify with Delegate in C#\nDESCRIPTION: Demonstrates fluent configuration of auto-verification with a conditional delegate.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task AutoVerifyFluentDelegate() =>\n    Verify(\"Value\")\n        .AutoVerify(\n            verifiedFile =>\n                Path.GetExtension(verifiedFile) == \"png\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() method directly without fully qualifying it with Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Projects\nDESCRIPTION: Ensure `<ImplicitUsings>` is enabled in the project file to leverage implicitly included namespaces, facilitating cleaner and more concise code by removing the need for explicit using statements for commonly used namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Guid Scrubbing Globally in C#\nDESCRIPTION: This snippet shows how to globally enable scrubbing of inline guids for all tests in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.ScrubInlineGuids();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch misuse of Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Claims Structure in JSON\nDESCRIPTION: Defines a nested JSON structure for configuring identity claims. Contains an Identities array with nested Claims objects that specify TheType and TheValue properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ClaimsPrincipal.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Identities: [\n    {\n      Claims: [\n        {\n          TheType: TheValue\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Directory in Source Control (Split Mode) - .gitignore\nDESCRIPTION: Specifies a rule for .gitignore to exclude the '*.received/' directory generated when using 'UseSplitModeForUniqueDirectory' Verify naming. Prevents large numbers of diff output files from polluting the repository. Use as needed based on Verify configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Defining Address Mapping Table - Plaintext\nDESCRIPTION: This code snippet represents a raw, comma-separated mapping of address component fields to their composed, formatted string. Dependencies include a parser that interprets the structure where each line maps (Number, Street, City) to a formatted 'Result'. There are no function definitions; rather, this is a data definition intended to be consumed by tests or address construction utilities. Inputs consist of number, street, and city fields, and the output is the formatted address. The table is limited to four cities and two street names, ensuring clarity and completeness within a small data set.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationSample.BuildAddressWithHeaderOverridesTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\\n  Number, Street    , City   : Result,\\n       1, Smith St  , Sydney : 1 Smith St, Sydney,\\n       1, Smith St  , Chicago: 1 Smith St, Chicago,\\n       1, Wallace St, Sydney : 1 Wallace St, Sydney,\\n       1, Wallace St, Chicago: 1 Wallace St, Chicago,\\n      10, Smith St  , Sydney : 10 Smith St, Sydney,\\n      10, Smith St  , Chicago: 10 Smith St, Chicago,\\n      10, Wallace St, Sydney : 10 Wallace St, Sydney,\\n      10, Wallace St, Chicago: 10 Wallace St, Chicago\\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object with Named GUID Reference\nDESCRIPTION: A JSON object that contains a single property 'value' which references a variable called 'namedGuid'. This appears to be a simple data structure that would be populated with a GUID value at runtime.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.InferredNamedGuidFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: namedGuid\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in CSharp\nDESCRIPTION: This CSharp snippet initializes Verify.DiffPlex in the application. It uses a module initializer to set up the text comparison feature at application start. Ensure your project references the Verify.DiffPlex package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit testing with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test with Verify - C#\nDESCRIPTION: Provides a minimal C# test case using Fixie and Verify. The test obtains a 'person' object, likely from code under test, and calls Verify(person) to assert the object's snapshot. Requires the Verify and Fixie packages, and a suitable 'ClassBeingTested' implementation. Returns a Task for asynchronous use.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class Sample\\n{\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package, which enhances text comparison by highlighting differences inline rather than displaying the full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings – MSBuild Project XML\nDESCRIPTION: Sets the ImplicitUsings property to enable in the .csproj file, ensuring that common .NET namespaces are automatically available in all files. This reduces boilerplate and is required for the verification examples in this guide. Add or edit the property in your project's main property group.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for better text comparison visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray globally using dotnet\nDESCRIPTION: This shell command installs DiffEngineTray as a global tool using the dotnet tool command. It's optional but recommended for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps to set a flag when tests fail, used to publish *.received.* files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global .NET tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit and Verify.TUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: XUnit test implementation for running verification checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the VerifyDiffPlex functionality for enhanced difference visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Setting for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where the Verify() call is not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the VerifyDiffPlex functionality using a module initializer\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Initializer\nDESCRIPTION: Module initializer for registering custom serialization converter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSample_CustomSerializationModuleInitializer\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a recommended practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Source Control Exclusion for Received Files (.gitignore format)\nDESCRIPTION: Provides ignore rules for source control to prevent '*.received.*' files from being committed. These files are generated by tests when results do not match verified snapshots. Copy these patterns into your .gitignore file or equivalent to avoid polluting your repository with transient test artifacts. Also includes a pattern for split directory mode if used.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the Verify.DiffPlex integration to enhance text comparison output in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Naming for Verified Tests (Fluent Method) - C#\nDESCRIPTION: Shows how to use custom parameter naming in verified tests using the fluent method syntax with xUnit. It uses method chaining to configure custom parameter naming.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParamsFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified($\"Number{arg}\");\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to your test project for Verify with XunitV3, including the test SDK, Verify.XunitV3, the prerelease xunit.v3 package, and the Visual Studio runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet CLI tool for managing snapshots. It helps streamline snapshot management tasks via command line, simplifying operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool - Shell\nDESCRIPTION: Globally installs the verify.tool command-line tool, which assists in managing test snapshots outside the normal test runner context. Requires the .NET SDK pre-installed and is executed via shell. Running this tool allows manual review and approval of snapshot files during test development.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool globally\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Files to Artifact Staging in Azure DevOps\nDESCRIPTION: YAML configuration for copying Verify *.received.* files to the artifact staging directory in Azure DevOps pipelines when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified files, ensuring consistent behavior across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with Verify\nDESCRIPTION: NuGet package references required for using Verify with the Fixie test framework, including the core Fixie package and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and text encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: Configuration for enabling implicit usings in the project file, which simplifies code by removing the need for explicit using statements. This is recommended for cleaner Verify test code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Verify.DiffPlex for Improved Diff Visualization\nDESCRIPTION: Commands and code for adding and initializing Verify.DiffPlex to enhance text comparison behavior with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration setting to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of text encoding and line endings for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: Project setting to enable implicit usings in your C# project which simplifies Verify method calls. Required for the example code to work without additional namespace imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Directories in .gitignore for Split Mode\nDESCRIPTION: Instructs Git to ignore all directories matching the pattern `*.received/`. This rule is necessary specifically when using the `UseSplitModeForUniqueDirectory` option in VerifyTests, which places received files within their own dedicated directory instead of alongside the verified file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files when edited in supported text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: Setting the ImplicitUsings property to enable in the project file to allow usage of Verify() without fully qualifying it. If not enabled, users must use Verifier.Verify() instead.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider to Ignore Orphaned Processes\nDESCRIPTION: Solution-specific configuration to disable Rider's orphaned process detection. This prevents Rider from showing prompts about processes spawned by tests, which is necessary as Verify launches external diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the required Fixie and Verify.Fixie NuGet packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Excluding Split-mode Received Snapshot Directories - .gitignore\nDESCRIPTION: When using Verify's split mode, received artifacts may be stored in dedicated directories. This entry should be added to .gitignore to ensure entire received folders are excluded from source control. This prevents clutter and accidental leaks of unapproved data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: This snippet shows the NuGet package references required for using Verify with Xunit, including the test SDK, Verify.Xunit, xunit, and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in TUnit Test\nDESCRIPTION: This code demonstrates how to create a TUnit test that runs VerifyChecks to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the required Verify and Fixie NuGet packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration\nDESCRIPTION: Configuration for excluding received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verifier Files - .editorconfig\nDESCRIPTION: This snippet configures EditorConfig to use UTF-8 with BOM encoding, LF newlines, and specific whitespace handling for files matching '*.received.*' and '*.verified.*' with common text extensions. It prevents unintended changes to newline endings, whitespace, and ensures allegiance to verification file conventions across editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property in C# Test Class\nDESCRIPTION: Auto-generated partial class implementation that provides a TestContext property for MSTest integration. The property getter retrieves the current test context from VerifyMSTest.Verifier, while the setter creates a new TestExecutionContext with the provided value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/GlobalNamespaceTests.HasBothAssemblyAndClassAttributes.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npartial class Foo\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: TUnit test class implementing VerifyChecks to validate conventions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest and Verify testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure editors respect the required conventions for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: Shows the XML configuration element `<ImplicitUsings>enable</ImplicitUsings>` to be added to a `.csproj` file. Enabling this feature simplifies code by automatically including common global using directives, as assumed by the documentation examples. Requires MSBuild project format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: CLI command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Display\nDESCRIPTION: Code to initialize Verify.DiffPlex which changes the text compare result to highlighting text differences inline, making it easier to identify changes in large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor to Treat Pure Method Return Values as Required\nDESCRIPTION: EditorConfig setting to configure Rider/ReSharper to treat unused return values of pure methods (like Verify()) as errors, preventing accidental omission of await.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in TUnit\nDESCRIPTION: Test class implementation for running Verify convention checks using TUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control. Received files are temporary comparison files generated during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Using Verify\nDESCRIPTION: This code snippet demonstrates a sample test using Verify in an MSTest environment. It includes the necessary attributes and shows how to use the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced diff visualization in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: A code snippet showing how to run Verify checks in an NUnit test using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks\nDESCRIPTION: NUnit test fixture for running Verify framework convention checks to ensure proper setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Text Files\nDESCRIPTION: This snippet shows `.gitattributes` entries to enforce consistent line endings (`lf`) and encoding (`UTF-8`) for verified text files (`.txt`, `.xml`, `.json`). This helps maintain consistency across different development environments and prevents unnecessary diffs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via dotnet CLI\nDESCRIPTION: Installs the optional Verify.DiffPlex NuGet package using the dotnet CLI. This package enhances the text comparison output during test failures by highlighting differences inline, which is helpful for large text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet package references for using Verify with Xunit, including the test SDK, Verify.Xunit, xunit core, and the Visual Studio runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify\nDESCRIPTION: This snippet shows the NuGet package references needed for using Expecto with Verify. It includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: VerifyCheckException Error in JSON Format\nDESCRIPTION: A structured JSON error message from the Verify testing framework. The exception indicates that the .gitIgnore file at the specified path is missing required Verify settings to ignore the *.received.* files that are generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/InnerVerifyChecksTests/VerifyChecksTests.GitIgnore.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: VerifyCheckException,\n  Message:\nExpected .gitIgnore to contain settings for Verify.\nPath: file:///{ProjectDirectory}InnerVerifyChecksTests/Invalid/.gitIgnore\nRecommended settings:\n\n# Verify\n*.received.*\n*.received/,\n  StackTrace: \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received files to ensure consistent formatting including UTF-8 with BOM encoding, line-feed line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project for enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control - .gitignore\nDESCRIPTION: This snippet adds a pattern for excluding all '*.received.*' files from source control using .gitignore. These files are generated as part of the snapshot verification process and should not be checked in. Add this line to your .gitignore file in the repository root to avoid accidentally committing transient received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which is required when working with Verify as these are temporary comparison files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Files\nDESCRIPTION: Git configuration to ensure proper line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Override in C# for Verify.MSTest\nDESCRIPTION: Auto-generated partial class implementation that overrides the TestContext property to integrate with Verify.MSTest framework. Sets up the current test context with test execution information when the property is set.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAttributeOnDerivedClassAndVirtualPropertyManuallyDefinedInBase.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npartial class Derived\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public sealed override global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => base.TestContext;\n    set\n    {\n      global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n      base.TestContext = value;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Up ImplicitUsings in Project File\nDESCRIPTION: Configuration to enable Implicit Usings in the project file, which simplifies code by allowing direct calls to Verify() without fully qualifying the namespace.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Properties in JSON\nDESCRIPTION: This snippet defines a configuration object for Verify tests. It includes various properties with their corresponding values, some of which are marked as {Scrubbed} for security or privacy reasons.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubMemberByPredicate.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Include: Value,\n  Field: {Scrubbed},\n  Property: {Scrubbed},\n  PropertyByName: {Scrubbed},\n  GetOnlyProperty: asd,\n  PropertyThatThrows: {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameters with IgnoreParametersForVerified in MSTest\nDESCRIPTION: Demonstrates how to use custom parameters with IgnoreParametersForVerified(). This allows for more control over the parameters used in the file naming while still ignoring them for the verified file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"One\")]\n[DataRow(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParams(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified($\"Number{arg}\");\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: GitAttributes configuration to ensure verified text files have consistent line endings (LF) and character encoding (UTF-8) for proper comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Setting Up .gitignore for Verify Results\nDESCRIPTION: Configure `.gitignore` to exclude files with `*.received.*` extensions from version control to prevent intermediate test results from cluttering the repository. Relevant when using tools like Verify.Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring VerifyChecks Test with TUnit\nDESCRIPTION: A TUnit test implementation that runs VerifyChecks to ensure all the Verify conventions are correctly set up in the project. This helps to validate the testing environment configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verified Text Output\nDESCRIPTION: Example of a verified output file showing a person object serialized to a structured text format. Shows how Verify handles complex objects with nested structures and collections.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Array of Objects with Values in JavaScript/JSON\nDESCRIPTION: This snippet demonstrates how to declare and initialize an array of objects, each containing a Value property with a string in a JSON-style format. It is suitable for use in JavaScript or for serializing/deserializing data in web APIs. The expected input is a static array where each object provides a named field, facilitating mapping or iteration. No external dependencies are required, but the syntax assumes the context accepts JSON-style objects (e.g., Node.js, browsers, or configuration files).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.OrderEnumerableByDescendingGlobal.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    Value: c\n  },\n  {\n    Value: b\n  },\n  {\n    Value: a\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit V3 Testing\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, Verify.XunitV3, and XUnit V3 packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Reference - XML\nDESCRIPTION: This snippet demonstrates how to add the Verify.DiffPlex package as a NuGet dependency in a .NET project. Adding this reference enables inline diff highlighting within Verify's snapshot verification process. The 'Include' attribute specifies the package, and versioning can be managed as appropriate for the project's needs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex Integration\nDESCRIPTION: C# code to initialize and enable DiffPlex integration for improved text comparison visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: Editor configuration to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Source Control Settings\nDESCRIPTION: Gitignore and gitattributes settings for handling verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool via dotnet CLI\nDESCRIPTION: Uses the dotnet CLI to install verify.tool as a global tool. Verify.Terminal provides command-line capabilities for managing snapshots, offering an alternative to GUI tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Clipboard Integration in Verify Tests\nDESCRIPTION: Code to enable clipboard behavior in Verify testing framework. This allows clipboard-based operations for accepting verification changes and cleaning up files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/clipboard.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nEnableClipboard\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitIgnore for Verify Tests\nDESCRIPTION: GitIgnore configuration to exclude all *.received.* files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Sample NUnit Verify Test\nDESCRIPTION: This placeholder indicates the location of a sample NUnit test demonstrating the usage of VerifyTests. The actual test code is defined in the 'SampleTestNUnit' snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsnippet: SampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET Tool\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is a Windows tray application that monitors and manages snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool. This tool provides command-line functionality for managing Verify snapshots outside of an IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Verify\nDESCRIPTION: YAML configuration for uploading received files as artifacts in case of test failures on GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Files\nDESCRIPTION: Git configuration to ensure proper line endings and encoding for verified text files committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text difference comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which improves text comparison output by highlighting differences inline for better readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Excluding Unique Directory Received Files - .gitignore (Advanced)\nDESCRIPTION: Ensures additional received file directories (when split mode is enabled) are ignored from source control. Useful when Verify's unique-directory option is in use. Paste this line into .gitignore if using split mode for unique directories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: MSBuild property setting to enable Implicit Usings in the project, which is required for the Verify examples to compile correctly without additional using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set text file attributes for verified files, ensuring consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File - XML\nDESCRIPTION: Activates implicit namespace imports in the .NET project by setting the <ImplicitUsings> property to 'enable' within the project (.csproj) file. This ensures that common .NET namespaces are available without explicit using directives, which is required for the sample code to compile as written. Prerequisites: .NET SDK and edit access to the project file. Place this tag inside the main PropertyGroup. No output is produced; it modifies the project configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() directly without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Installs the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: Demonstrates how to create an Xunit test that runs Verify checks to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent editing behavior for verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: This command installs DiffEngineTray, a tool for monitoring pending changes in snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps Pipeline\nDESCRIPTION: Utilizes the `CopyFiles@2` task in Azure DevOps YAML. This step runs conditionally (`condition: eq(variables['publishverify'], 'Yes')`) if the test failure flag is set. It copies all `*.received.*` files from the build workspace to the artifact staging directory (`$(Build.ArtifactStagingDirectory)/Verify`), preparing them for publishing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Source control settings for verified files to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling in .gitattributes\nDESCRIPTION: Specifies Git attributes for verified text files (*.verified.txt, *.verified.xml, *.verified.json) to ensure consistent line endings (lf) and encoding (UTF-8) within the source control repository, matching Verify's default text file settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Expecto and Verify NuGet Packages to F# Project\nDESCRIPTION: Required NuGet package references for using Verify with Expecto in an F# project, including versions for YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified files across different operating systems.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Command to add the optional Verify.DiffPlex package which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: An example Fixie test class showing how to use Verify to test the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure DevOps Pipeline for Verify Test Failures\nDESCRIPTION: YAML configuration for capturing and publishing Verify's .received files as build artifacts when tests fail in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration - C# Code Module Initializer\nDESCRIPTION: This C# snippet demonstrates how to enable the Verify.DiffPlex extension by calling its initialization method within a ModuleInitializer. It is intended to be placed in the test assembly, ensuring that diff highlighting is set up automatically when the module loads. The code requires C# 9 or later (for ModuleInitializer support), a reference to Verify.DiffPlex, and will impact all snapshot text comparisons in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit in C#\nDESCRIPTION: Demonstrates how to run Verify checks using NUnit. This code snippet shows the usage of VerifyChecks.Run() in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: Demonstrates how to create a test method that runs the VerifyChecks.Run() method to validate that all conventions for verification testing are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified files across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Creating Verification Checks Test with TUnit\nDESCRIPTION: A TUnit test that runs VerifyChecks.Run() to ensure that all Verify conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Inline Text Comparison - Shell\nDESCRIPTION: This dotnet CLI command installs the Verify.DiffPlex NuGet package, which enables inline text difference highlighting for failed snapshot assertions in Verify. Use this command to add the functionality for improved test failure diagnostics.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a module initializer in C#. This code ensures that DiffPlex is used for text comparisons by VerifyTests as soon as the assembly loads.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for proper handling of verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Expecto\nDESCRIPTION: Commands to add the required NuGet packages for Verify and Expecto to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files in .editorconfig\nDESCRIPTION: Shows suggested `.editorconfig` settings for text-based received and verified files (`*.{received,verified}.{json,txt,xml}`). It enforces UTF-8 with BOM, LF line endings, and prevents trailing newlines to align with Verify's conventions. Users should adapt this for other text file types they verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in TUnit\nDESCRIPTION: A TUnit test that runs VerifyChecks.Run() to validate that all Verify conventions are being followed in the project. This helps maintain consistency in verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Dotnet Tool for Snapshot Management - Shell\nDESCRIPTION: Globally installs the Verify.Terminal command-line tool, which allows viewing and managing Verify snapshot files without a GUI. Optional but useful for developers preferring terminal workflows. Must be installed using the dotnet tool CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Verify\nDESCRIPTION: Adds a rule to .gitignore to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider to Ignore Orphaned Processes\nDESCRIPTION: DotSettings configuration to disable Rider's orphaned process detection, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Defining UniqueForTargetFrameworkAndVersion Directive for Verify Testing Framework\nDESCRIPTION: A single-line directive that configures tests to be unique based on target framework and version when using the Verify testing framework. This helps to handle different behaviors across frameworks and versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/UseSplitModeForUniqueDirectoryTests.UniqueForTargetFrameworkAndVersion.DotNet10_0.verified/target.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUniqueForTargetFrameworkAndVersion\n```\n\n----------------------------------------\n\nTITLE: Source Control Encoding and EOL for Verified Snapshots (.gitattributes)\nDESCRIPTION: Configures Git attributes for verified snapshot files to ensure line-endings (LF) and proper UTF-8 encoding with BOM. This prevents cross-platform issues and maintains consistency in verified text, XML, and JSON test artifacts. Insert these rules into your .gitattributes file at the repository root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with MSTest\nDESCRIPTION: Demonstrates how to create a test method that runs Verify checks using MSTest attributes and the VerifyChecks.Run() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Source Control Configuration for Received Files\nDESCRIPTION: Update .gitignore to exclude received files from source control and include additional directories if using unique directory modes. This keeps received files environmental and specific to local contexts, while verified files should remain committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Treating Unused Return Value of Pure Methods as Error in EditorConfig\nDESCRIPTION: Explains how to force the IDE/ReSharper/Rider to flag cases where a method marked [Pure] has its result ignored by the developer, specifically for Verify(). The EditorConfig code sets the highlighting to error for all .cs files. Input: .editorconfig property. Output: IDE error for misuse. Limitation: Requires ReSharper or Rider for this property to have an effect.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Xunit\nDESCRIPTION: Provides a basic example of how to write a Verify test using Xunit framework in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: Module initialization code to enable DiffPlex integration with Verify for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify NuGet Packages (.csproj)\nDESCRIPTION: This code snippet demonstrates how to add the TUnit and Verify.TUnit NuGet packages to a test project's .csproj file, enabling unit testing and verification capabilities. Requires the project to use these dependencies for compiling and running tests. Ensure the appropriate versions are specified for compatibility. No inputs or outputs—modifies project configuration for package restore.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"TUnit\\\" Version=\\\"0.19.86\\\" />\\n<PackageReference Include=\\\"Verify.TUnit\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Example of a simple NUnit test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages via .NET CLI\nDESCRIPTION: These commands use the .NET CLI to add the TUnit testing framework and the Verify.TUnit integration packages to the current .NET test project. These packages are essential for writing and running Verify snapshot tests with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting ImplicitUsings to enable in the project file to support the Verify syntax used in examples without requiring explicit using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test with Verify\nDESCRIPTION: This C# code snippet provides a sample test using XUnit v3 with Verify. It demonstrates how to create a test method that uses Verify to check the contents of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks using TUnit in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package which changes the text compare result to highlight text differences inline, providing a more readable output when verifying large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Git\nDESCRIPTION: Git configuration to exclude all received files from source control. These are temporary files generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure showing the path and available build server options for Linux MSTest projects with GUI preferences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_MSTest.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Linux](Linux.md) > [Other](Linux_Other.md) > [Prefer GUI](Linux_Other_Gui.md) > [MSTest](Linux_Other_Gui_MSTest.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Linux_Other_Gui_MSTest_AppVeyor.md)\n * [GitHub Actions](Linux_Other_Gui_MSTest_GitHubActions.md)\n * [Azure DevOps](Linux_Other_Gui_MSTest_AzureDevOps.md)\n * [No build server](Linux_Other_Gui_MSTest_None.md)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Files in xUnit (Instance)\nDESCRIPTION: Demonstrates how to ignore parameters when naming verified files using xUnit's Theory and InlineData attributes. This approach uses the IgnoreParametersForVerified method on VerifySettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv2.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[Theory]\n[InlineData(\"One\")]\n[InlineData(\"Two\")]\npublic Task IgnoreParametersForVerified(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified(arg);\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Publish Received Files as Artifacts\nDESCRIPTION: PowerShell script to configure AppVeyor to publish *.received.* files as artifacts on build failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify and Fixie NuGet Packages\nDESCRIPTION: Commands to add the required NuGet packages for Verify and Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via Dotnet Tool - .NET Shell Command\nDESCRIPTION: This shell command installs the DiffEngineTray globally as a .NET tool, providing a tray utility for monitoring and managing snapshot differences. The tool is optional but recommended for facilitating acceptance or rejection of file differences during test execution. Requires the .NET SDK with tool support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks with Fixie\nDESCRIPTION: Test class implementation for running Verify convention checks using Fixie test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings for maintaining consistent formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: Fixie test class implementation for running verification checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - XML Project File\nDESCRIPTION: Adds Verify.DiffPlex for inline diff highlighting during snapshot mismatches. Inserted in the test project csproj, this package alters the way text comparison results are presented. Accepts all .NET-compatible versions with '*', auto-upgrading as possible.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Date Format for Scrubbing\nDESCRIPTION: Specifying additional custom date formats to be identified and scrubbed during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nAddExtraDateTimeFormat\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure showing the path from home to current page and available build server options\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [MacOS](MacOS.md) > [JetBrains Rider](MacOS_Rider.md) > [Prefer CLI](MacOS_Rider_Cli.md) > [XunitV3](MacOS_Rider_Cli_XunitV3.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](MacOS_Rider_Cli_XunitV3_AppVeyor.md)\n * [GitHub Actions](MacOS_Rider_Cli_XunitV3_GitHubActions.md)\n * [Azure DevOps](MacOS_Rider_Cli_XunitV3_AzureDevOps.md)\n * [No build server](MacOS_Rider_Cli_XunitV3_None.md)\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: Code snippet showing how to use the VerifyChecks.Run() method to verify that all conventions are being followed. This is run as a test method to ensure proper configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider/ReSharper\nDESCRIPTION: Configuration setting for disabling orphaned process detection in JetBrains Rider and ReSharper. This prevents dialogs about terminating diff tool processes that are launched during testing with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal as a Dotnet Tool\nDESCRIPTION: This snippet shows how to install the Verify.Terminal dotnet tool globally. This tool helps in managing snapshots directly from the command line, making it convenient for developers working in terminal-based environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files in version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add necessary NuGet packages to the test project for using Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Verified Files Line Endings\nDESCRIPTION: Git configuration to ensure consistent line endings and encoding for verified files, setting them to use line-feed endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies Verify API calls by allowing direct use of Verify() method instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add Fixie and Verify.Fixie NuGet packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for proper text file handling\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies calling the Verify API without fully qualified names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Received Files in Verify (gitignore)\nDESCRIPTION: Shows the recommended pattern for excluding temporary *.received.* snapshot files from source control by updating .gitignore. Ensures that only verified (committed) results are tracked while temporary/output files are ignored. Input: wildcard patterns for .gitignore. Limitation: Adjust pattern as needed if using split mode directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool via Dotnet CLI - Shell\nDESCRIPTION: Installs the DiffEngineTray global tool, which provides a Windows system tray interface for monitoring and managing pending snapshot changes from Verify. This tray tool is recommended for streamlining acceptance of snapshot changes. Dependency: .NET SDK. The command should be run in the command prompt; no direct program output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper formatting of verified and received files when edited, maintaining consistent encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, enabling enhanced text comparison functionality in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attribute settings for *.verified.* text files to ensure consistent line endings (LF) and UTF-8 encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: This command installs the DiffEngineTray tool globally using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Using a Subset of Parameters in TUnit Tests\nDESCRIPTION: Shows how to use a subset of parameters with UseParameters(), resulting in a file name that includes only the specified parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(someValue)\n    .UseParameters(\"Value1\", \"Value2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved text comparison output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test class showing basic usage of Verify with TUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages with NuGet CLI\nDESCRIPTION: Commands to add the TUnit and Verify.TUnit packages to a test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Basic TestCase Usage in Fixie\nDESCRIPTION: Shows a simple implementation of a test case with a single parameter in Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-fixie.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task TestCaseUsage(string arg) =>\n    Verify(arg);\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify received files in Azure DevOps pipeline\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest and Verify testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: Azure DevOps pipeline task to publish staged Verify *.received.* files as build artifacts for review when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitAttributes for Verify Text Files\nDESCRIPTION: GitAttributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks in C# with Expecto\nDESCRIPTION: C# code to run VerifyChecks using Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control for Verify Files\nDESCRIPTION: Git configuration to exclude *.received.* files and include *.verified.* files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray with dotnet CLI\nDESCRIPTION: Install the DiffEngineTray tool globally using the .NET CLI, which facilitates snapshot management by monitoring and handling changes. This is an optional, yet recommended, utility for easing the verification process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify testing with TUnit in your test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files, including UTF-8 with BOM encoding, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify Testing\nDESCRIPTION: Git configuration to exclude received test files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Input-Output Mapping Definitions for Verification\nDESCRIPTION: This block defines mappings where combinations of three inputs (character, integer, boolean) are mapped to specific string outputs (e.g., 'a1True', 'c2False') or an expected exception. Inputs starting with 'B' consistently map to an 'ArgumentException: B is not allowed.', indicating specific validation or error handling logic being tested or configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/CombinationTests.WithException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : ArgumentException: B is not allowed.,\n  b, 1, False: ArgumentException: B is not allowed.,\n  b, 2, True : ArgumentException: B is not allowed.,\n  b, 2, False: ArgumentException: B is not allowed.,\n  b, 3, True : ArgumentException: B is not allowed.,\n  b, 3, False: ArgumentException: B is not allowed.,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Ignore Spawned Processes\nDESCRIPTION: XML configuration to disable ReSharper's orphaned process detection for the solution, preventing unnecessary prompts when using diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verified Text Files\nDESCRIPTION: This configuration snippet ensures that verified text files maintain consistent encoding and line-ending patterns across different environments by setting specific EditorConfig rules.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Text Verified Files (gitattributes)\nDESCRIPTION: Provides .gitattributes configuration for ensuring all text-based verified files use correct line endings and UTF-8 encoding. This setup avoids platform inconsistencies by enforcing 'lf' line endings and UTF-8 BOM, which is a requirement for correct operation when verifying large snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Files - EditorConfig\nDESCRIPTION: This EditorConfig snippet enforces newline, character set, and whitespace settings for files with .received or .verified extensions and common text formats (json, txt, xml). These settings should be placed in a .editorconfig file at the repository root, ensuring consistency in encoding (UTF-8 with BOM), line endings, and formatting across editors. No user parameters are required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \"utf-8-bom\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Example of how to run Verify checks using Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventions\n{\n    public void Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with NUnit\nDESCRIPTION: Demonstrates how to run Verify checks using NUnit. This snippet shows a test method that calls VerifyChecks.Run() to check conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with Expecto testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool for Managing Snapshot Changes\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a UI for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Text Verification\nDESCRIPTION: This configuration ensures that editors respect text verification conventions such as UTF-8 BOM encoding and line feed endings when modifying text verified/received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: Configuration setting to enable implicit usings in the project file, which simplifies using the Verify API. When enabled, you can use Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for MSTest and Verify\nDESCRIPTION: This snippet shows the NuGet package references required for using MSTest with Verify. It includes Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool via CLI\nDESCRIPTION: Command to install the Verify.Terminal global tool. This tool allows managing snapshots from the command line, providing additional flexibility for working with Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: This snippet shows how to add the required NuGet packages for Fixie and Verify.Fixie to the test project's .csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text difference visualization by highlighting changes inline instead of showing full content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A sample NUnit test demonstrating the usage of Verify. The actual code is not provided in the snippet, but it's referenced as 'SampleTestNUnit'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// The actual code for SampleTestNUnit is not provided in the given text.\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adding the Verify.DiffPlex NuGet package reference to the project for improved text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Scrubber Function using Verify .NET in C#\nDESCRIPTION: Illustrates full control over the text scrubbing phase by adding a custom function that transforms the verification content before comparison using AddScrubber in Verify .NET. The function receives and returns the string to be processed, allowing arbitrary modifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Example: Replace all dots with underscores in the output\nsettings.AddScrubber(s => s.Replace('.', '_'));\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline Highlighting – C#\nDESCRIPTION: Demonstrates a C# ModuleInitializer used to call VerifyDiffPlex.Initialize(), which activates the DiffPlex plugin for Verify. This ensures that all snapshot failures use enhanced diff highlighting. This snippet should be placed in a static context within the test project and requires Verify.DiffPlex as a dependency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Fixie\nDESCRIPTION: Demonstrates a sample test using Verify with Fixie, including setting up the test class and a basic verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task BasicTest()\n    {\n        return Verify(\"Some Text\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Source Control Configuration\nDESCRIPTION: Gitignore configuration for excluding received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool command. DiffEngineTray is a utility that monitors snapshot changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Named GUID - Global Configuration\nDESCRIPTION: Shows how to configure named GUIDs globally for all tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Init() => VerifierSettings.AddNamedGuid(new(\"c8eeaf99-d5c4-4341-8543-4597c3fd40c9\"), \"guidName\");\n```\n\n----------------------------------------\n\nTITLE: Using Verify with TUnit\nDESCRIPTION: Example demonstrating how to use Verify with the TUnit testing framework in C#. The test method retrieves a person object and passes it to the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced difference visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: This command uses the .NET CLI to add the `Verify.DiffPlex` NuGet package to the current project. This package integrates DiffPlex with Verify to provide inline text difference highlighting in failure messages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: XML configuration to enable implicit usings in a C# project file. This setting allows for simplified code in the Verify testing framework by eliminating the need for explicit using directives.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/implicit-usings.include.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Upload Received Files on Test Failure\nDESCRIPTION: PowerShell script to be added to AppVeyor configuration as an on_failure step. Finds all *.received.* files and uploads them as build artifacts for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: Creates a pipeline variable 'publishverify' when tests fail using a command line task. This flag is used to conditionally publish test artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify Tests\nDESCRIPTION: Configuration to add to .gitignore file to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Text Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received text files in editors, maintaining UTF-8 with BOM, line feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude generated received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest and Verify to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Fixie and Verify\nDESCRIPTION: Adds the `Fixie` test framework and `Verify.Fixie` integration packages to the test project using the dotnet CLI. This is the first step in setting up Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally as a dotnet tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified file types to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files, specifying UTF-8 with BOM, line endings, and preventing insertion of final newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add the necessary NuGet packages for MSTest testing framework and Verify integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper encoding and line ending handling for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Source Control Text File Configuration\nDESCRIPTION: Git attributes configuration for verified text files to ensure consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via CLI\nDESCRIPTION: Installs the optional Verify.DiffPlex NuGet package using the .NET CLI. This package enhances Verify's text comparison capabilities by highlighting differences inline within the exception message, which is useful for large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and XUnit v3\nDESCRIPTION: Commands to add necessary NuGet packages for Verify and XUnit v3 to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in MSTest\nDESCRIPTION: Illustrates how to override the text used for parameters in the file naming convention using UseTextForParameters(). This allows custom text to be used instead of the default parameter values.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"Value1\")]\npublic Task UseTextForParameters(string arg) =>\n    Verify(arg)\n        .UseTextForParameters(\"TextForParameter\");\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install Verify.Terminal tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Ignoring Received Files in Git - Shell\nDESCRIPTION: Describes the exact .gitignore entry required to exclude all '*.received.*' files created by Verify from version control, ensuring only verified snapshots are committed. These lines should be added to your .gitignore in the repository root and are essential for proper snapshot management. Additional guidance is provided for UseSplitModeForUniqueDirectory scenarios.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Parameter Subset Usage in Fixie Tests\nDESCRIPTION: Shows how to use a subset of parameters when naming verification files, allowing selective parameter inclusion.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-fixie.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\", \"Value2\", \"Value3\")]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3)\n{\n    var somethingToVerify = $\"{arg1} {arg2} {arg3} some text\";\n    return Verify(somethingToVerify)\n        .UseParameters(arg1, arg2);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: This code demonstrates how to run Verify checks in an Xunit test. It uses the [Fact] attribute and calls VerifyChecks.Run() to execute the checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Checks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files in Git\nDESCRIPTION: Git configuration to exclude all *.received.* files from source control, as these are temporary files generated during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline: Copy Received Files to Staging (YAML)\nDESCRIPTION: Demonstrates using CopyFiles@2 in Azure DevOps to copy all Verify 'received' snapshot files to an artifact staging directory, conditional on the publishverify variable being set. Needed since DevOps PublishBuildArtifacts does not support wildcards. Inputs: artifact directories, wildcard glob pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\\n  condition: eq(variables['publishverify'], 'Yes')\\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\\n  inputs:\\n    contents: '**/*.received.*' \\n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\\n    cleanTargetFolder: true\\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify in C#\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension, which enhances the text comparison functionality of Verify with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex NuGet package to the project. Uses a wildcard version to always get the latest version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set proper line endings and encoding for verified files to ensure consistent behavior across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test case to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: A test class that runs the VerifyChecks.Run() method to validate that all conventions for the Verify framework are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VerifyChecks with XUnit V3\nDESCRIPTION: Implementation of a test to verify framework conventions using VerifyChecks.Run()\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Check() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (csproj)\nDESCRIPTION: Specifies the NuGet package reference needed to add the Verify.DiffPlex library to a project. This optional package enhances text comparison by highlighting differences inline within the test failure message.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Fixie Test Project Configuration\nDESCRIPTION: Fixie implementation that hooks Verify into the Fixie test lifecycle and wraps test executions with the necessary ExecutionState for Verify to function properly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for TUnit\nDESCRIPTION: Shows how to run VerifyChecks in a TUnit test to validate that snapshot file conventions are correctly configured for source control integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members Globally by Expression in Verify Tests (C#)\nDESCRIPTION: Shows how to ignore specific members of a type globally using expressions in Verify tests with VerifierSettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreMembers<IgnoreExplicitTarget>(\n    _ => _.Property,\n    _ => _.PropertyWithPropertyName,\n    _ => _.Field,\n    _ => _.GetOnlyProperty,\n    _ => _.PropertyThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Scrubbers in Fixie with Verify .NET (C#)\nDESCRIPTION: Demonstrates integrating multiple scrubbers into a Fixie test using the Verify .NET library. Highlights cross-framework compatibility and configuration patterns for shared test output manipulation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleTestClass\n{\n    public async Task TestWithScrubbers()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesContaining(\"password\", \"token\");\n        settings.ScrubMachineName();\n        await Verifier.Verify(someResult, settings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting that treats unused return values of pure methods as errors, which helps catch cases where Verify() calls are not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending snapshot changes and provides acceptance mechanisms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions using NUnit in C#\nDESCRIPTION: This C# snippet demonstrates how to verify coding conventions within a test suite. It includes a test fixture and a test case that calls VerifyChecks.Run() to ensure project conventions are adhered to. Dependencies include an installed NUnit and Verify.NUnit packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for improved diff visualization in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Viewing\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline rather than showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex using a module initializer, which will modify how Verify displays text differences to show inline highlights rather than full file contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages with .NET CLI\nDESCRIPTION: Commands for adding the required TUnit and Verify.TUnit NuGet packages to a test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required MSTest NuGet Packages\nDESCRIPTION: Core NuGet package references required for MSTest verification testing including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify and Xunit testing in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit on MacOS\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit in a .NET project on MacOS.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.XunitV3 and Dependencies via .NET CLI\nDESCRIPTION: This command uses the .NET CLI to add the necessary NuGet packages (`Microsoft.NET.Test.Sdk`, `Verify.XunitV3`, `xunit.v3`, `xunit.runner.visualstudio`) to the current .NET test project. These packages are required for setting up snapshot testing with Verify and the Xunit v3 testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Fixie\nDESCRIPTION: A simple example showing how to implement a test using Verify with the Fixie test framework. The test finds a person object and verifies it using Verify's assertion system.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received files in text editors, maintaining the required encoding, line endings, and formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure verified and received files maintain consistent formatting, encoding, and line endings in the editor.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistency when editing verified and received files, maintaining proper character encoding, line endings, and whitespace handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure editors respect the text file conventions required by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files across different editors, enforcing UTF-8 with BOM, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: MSTest implementation for running verification checks to ensure proper setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: CLI command to install the DiffEngineTray global tool, which provides a system tray utility for monitoring and accepting/rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex NuGet package to the project. The wildcard version allows for the latest compatible version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Source control exclusion pattern for received files generated by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in Verify Tests (C#)\nDESCRIPTION: This C# class demonstrates how to run Verify convention checks within a Fixie test. By calling VerifyChecks.Run and passing the current assembly, this test ensures file and naming conventions are correctly applied. No input parameters are required. This depends on the Verify.Fixie and VerifyChecks libraries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    public Task Run() =>\\n        VerifyChecks.Run(GetType().Assembly);\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in a Fixie Test - C#\nDESCRIPTION: This C# snippet demonstrates creating a test class with a single test method that invokes VerifyChecks.Run(), passing the test assembly. This ensures that project verification conventions are being checked as part of the test suite. Requires a reference to the VerifyChecks utility and Fixie framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    public Task Run() =>\\n        VerifyChecks.Run(GetType().Assembly);\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Binary Search Tree Property in Java\nDESCRIPTION: A method that checks if a binary tree satisfies the binary search tree property. It ensures that all values in the left subtree are less than the node's value, and all values in the right subtree are greater than the node's value, recursively checking this property for the entire tree.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.DerivePaths.Tests/Relative/Tests.Test.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nstatic boolean isBST(Node tree) {\n    return isBSTBounded(tree, Integer.MIN_VALUE, Integer.MAX_VALUE);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the DiffPlex integration for enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the code examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML setting to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project Lifecycle for Verify Integration (C#)\nDESCRIPTION: Provides a C# class implementing Fixie's `ITestProject` and `IExecution` interfaces. This custom convention is necessary for Verify integration. It configures Verify with the target assembly (`VerifierSettings.AssignTargetAssembly`) and manages Verify's execution context (`ExecutionState.Set`) around each test run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Inheriting from VerifyBase in MSTest\nDESCRIPTION: By inheriting from `VerifyBase`, this MSTest class gains access to simplified verification methods within test cases. Ensure that the Verify library is properly integrated into the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: NuGet package references needed for setting up Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing XunitV3 and Verify NuGet Packages in C# Project\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using XunitV3 and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages for Verify in a .NET Project\nDESCRIPTION: List of NuGet package references to add to a test project to enable Verify with Xunit, including the test SDK, Verify.Xunit, xunit core, and the Visual Studio runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Command line instructions for adding necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueFor Settings with TUnit\nDESCRIPTION: Demonstrates using UniqueFor settings in a TUnit test class to create environment-specific verification files. Shows both fluent and traditional approaches for runtime, assembly configuration, architecture, and OS platform settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\npublic class UniqueForSample\n{\n    [Test]\n    public Task Runtime()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntime();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task RuntimeFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntime();\n\n    [Test]\n    public Task AssemblyConfiguration()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForAssemblyConfiguration();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task AssemblyConfigurationFluent() =>\n        Verify(\"value\")\n            .UniqueForAssemblyConfiguration();\n\n    [Test]\n    public Task RuntimeAndVersion()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntimeAndVersion();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task RuntimeAndVersionFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntimeAndVersion();\n\n    [Test]\n    public Task Architecture()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForArchitecture();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task ArchitectureFluent() =>\n        Verify(\"value\")\n            .UniqueForArchitecture();\n\n    [Test]\n    public Task OSPlatform()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForOSPlatform();\n        return Verify(\"value\", settings);\n    }\n\n    [Test]\n    public Task OSPlatformFluent() =>\n        Verify(\"value\")\n            .UniqueForOSPlatform();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set file encoding and line endings for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: This YAML configuration sets up Azure DevOps to publish .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to enable improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Fluent Strict JSON Configuration\nDESCRIPTION: Shows how to use fluent syntax to configure strict JSON settings for a verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nvar target = new TheTarget\n{\n    Value = \"Foo\"\n};\nawait Verify(target)\n    .UseStrictJson();\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages with Dotnet CLI (YAML/Bash)\nDESCRIPTION: Illustrates the commands for adding core Verify and Fixie packages to a test project using the dotnet CLI. No additional dependencies are needed beyond the dotnet SDK. The user should run these commands in a shell at the root of the test project to enable snapshot testing functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package Fixie\\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property for Verify MSTest Integration in C#\nDESCRIPTION: This code snippet defines a partial class 'Foo' with a generated TestContext property. It integrates Verify with MSTest by managing the current test context and facilitating snapshot testing. The property getter retrieves the current test context, while the setter creates a new TestExecutionContext.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/GlobalNamespaceTests.HasAssemblyAttribute.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Foo\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Git Ignore Patterns for Verify\nDESCRIPTION: Pattern to add to .gitignore to exclude all *.received.* files from source control. These files are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: JsonAppender Output Example with Binary Content\nDESCRIPTION: This shows the separate .verified.txt file that contains only the appended JSON content when verifying binary data. The binary data itself would be in a different file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/jsonappender.source.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Key\": \"Value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required for using Verify with Fixie test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing the Verify.Terminal Tool Globally - Shell\nDESCRIPTION: Installs Verify.Terminal as a global dotnet tool, providing CLI support for managing Verify snapshot files outside the context of a test runner. Requires the .NET SDK and permissions to install tools globally. Enables advanced snapshot workflows from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files, which should be added to the .gitattributes file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex functionality using a module initializer. This enables the enhanced diff comparison features.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Package - Verify.DiffPlex\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex, which provides improved text difference visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Typed File Converter in C#\nDESCRIPTION: Demonstrates how to register a typed file converter for converting TIFF images to PNG format on a per-page basis. Includes type checking and metadata extraction.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.RegisterFileConverter<Image>(\n\n    canConvert: (target, context) => Equals(target.RawFormat, ImageFormat.Tiff),\n\n    conversion: (image, settings) =>\n    {\n        var pages = image.GetFrameCount(FrameDimension.Page);\n\n        var targets = new List<Target>();\n        for (var index = 0; index < pages; index++)\n        {\n            image.SelectActiveFrame(FrameDimension.Page, index);\n\n            var page = new MemoryStream();\n            image.Save(page, ImageFormat.Png);\n            targets.Add(new(\"png\", page));\n        }\n\n        return new(\n            info: new\n            {\n                image.PixelFormat,\n                image.Size\n            },\n            targets);\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider\nDESCRIPTION: This XML snippet disables the orphaned process detection feature in Rider, which is necessary when using Verify as it launches diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command-Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps to copy *.received.* files to the artifact staging directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Setting Pure Method Return Value as Error\nDESCRIPTION: Configure `.editorconfig` to treat un-used return values from pure methods like `Verify()` as errors, ensuring that return values are utilized. Useful for enforcing code correctness.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Disabling DateTime Scrubbing with Fluent API\nDESCRIPTION: Demonstrates how to disable date scrubbing using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nvar target = new\n{\n    Date = new DateTime(2020, 10, 10, 0, 0, 0, DateTimeKind.Utc)\n};\n\nreturn Verify(target)\n    .DontScrubDateTimes();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages with dotnet CLI\nDESCRIPTION: This code snippet shows how to add the required NuGet packages for the test project using the dotnet CLI. The packages 'TUnit' and 'Verify.TUnit' are essential for setting up the testing environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: Enables implicit usings in the project file to simplify code and ensure examples compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex with Module Initializer in C#\nDESCRIPTION: Initializes VerifyDiffPlex to enhance text comparison features for a project. This utilizes a C# module initializer, requiring C# 9.0 or higher. Ensure VerifyDiffPlex is added as a dependency prior to initialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object Structure in JSON\nDESCRIPTION: This code snippet demonstrates the creation of a JSON object with a single property-value pair. It shows the basic structure of a JSON object using curly braces.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/TypeConverterTests.WithInfo.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, enabling inline text difference highlighting for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool for Command Line Management\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which allows managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and Fixie integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while ensuring verified files are committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Performing Line Verification Test in C#\nDESCRIPTION: This C# code snippet demonstrates a basic unit test for verifying a Line object. It creates a Line object with coordinates (1,2) and (3,4), then uses the Verify testing library to compare this against an expected result.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubEmptyLinesStartAndEnd.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLine\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages via .NET CLI\nDESCRIPTION: Installs the required Fixie test runner and Verify.Fixie integration packages into the current .NET test project using the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: Commands to add the necessary NuGet packages to set up Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray dotnet tool globally. DiffEngineTray monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified file encodings and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Conditionally Upload Received Test Results on Failure\nDESCRIPTION: In a GitHub Actions workflow, upload test results for *.received.* files when the tests fail. This action uses the upload-artifact@v4; be sure to configure GitHub Actions to handle artifacts correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality for enhanced diff viewing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for MSTest\nDESCRIPTION: Add the required NuGet packages to the test project for using Verify with MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example of inheriting from VerifyBase to enable Verify functionality in test classes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Lines with Specific String Comparison using Verify .NET in C#\nDESCRIPTION: Illustrates advanced line scrubbing by specifying a particular StringComparison for ScrubLinesContaining in Verify .NET. This enables custom control over case sensitivity and culture rules, here explicitly forcing an ordinal (case sensitive) comparison to match lines for removal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Remove lines using Ordinal (case sensitive) comparison\nsettings.ScrubLinesContaining(StringComparison.Ordinal, \"text1\", \"text2\");\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing verify.tool Command Line Utility - Shell\nDESCRIPTION: This shell command installs the verify.tool as a global .NET tool, which can be used for managing Verify snapshots from the terminal. No input parameters are necessary beyond having .NET SDK installed. The tool allows inspection and manipulation of snapshot files without requiring IDE interaction.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files, setting them to use line-feed line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with Xunit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Adding .gitignore Rules for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while keeping *.verified.* files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values from pure methods (like Verify()) as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool - shell\nDESCRIPTION: Installs the Verify.Terminal CLI tool globally. This tool assists users in managing verification snapshots via the command line. Requires a suitable .NET SDK. Use when command-line workflow is preferred or CI integration is necessary.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Test Results on Failure\nDESCRIPTION: Sets up a GitHub Actions step to upload *.received.* files as artifacts when tests fail, aiding in debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Lines Containing Multiple Texts in C#\nDESCRIPTION: Shows how to use ScrubLinesContaining to remove lines containing any of the specified strings from the verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nverifySettings.ScrubLinesContaining(\"text1\", \"text2\");\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages for Verification Testing\nDESCRIPTION: Specifies the required NuGet package references needed for MSTest verification testing, including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Verified Text Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified text files across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: This C# code snippet demonstrates how to run Verify's conventions check using Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to copy Verify *.received.* files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub Actions Artifact Upload\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/build-server.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema with Internal References\nDESCRIPTION: This JSON object demonstrates the use of $ref for internal references and $id for creating reference targets. It includes nested objects and references to both named locations and absolute paths within the document.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Ref.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  a: {\n    $id: x,\n    b: 1\n  },\n  b: 2,\n  c: {\n    $ref: #x/b\n  },\n  d: {\n    $ref: #/b\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Value Usage\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are temporary test output files that shouldn't be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet - XML\nDESCRIPTION: Adds the Verify.DiffPlex package to the project. It enhances the default text comparison by highlighting inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in a Fixie Test\nDESCRIPTION: A code snippet showing how to verify that all conventions are correctly set up by calling VerifyChecks.Run() in a Fixie test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void EnsureAllChecksPass() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with Xunit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: To use Implicit Usings, set the ImplicitUsings property to enable in your project's configuration file, which simplifies usage for common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify and XUnit testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore patterns to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation with Fixie\nDESCRIPTION: Test class implementation for running Verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input-Output Mappings for Verification\nDESCRIPTION: This data block defines a set of mappings between input tuples (character, integer, boolean) and expected outputs or exceptions. Inputs starting with 'A' or 'C' map to specific string outputs based on the integer and boolean values (e.g., 'a1True', 'c2False'). Inputs starting with 'b' consistently map to an 'ArgumentException' with the message 'B is not allowed.'. This structure is likely used for defining test cases or configuration rules.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.TUnit.Tests/CombinationTests.WithException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : ArgumentException: B is not allowed.,\n  b, 1, False: ArgumentException: B is not allowed.,\n  b, 2, True : ArgumentException: B is not allowed.,\n  b, 2, False: ArgumentException: B is not allowed.,\n  b, 3, True : ArgumentException: B is not allowed.,\n  b, 3, False: ArgumentException: B is not allowed.,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration for verified and received text files ensuring consistent encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with the Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set the correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which provides command-line utilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Consistent Encoding and Line Endings of Verified Text Files - Shell\nDESCRIPTION: Adds rules to a .gitattributes file to enforce that text-verified files have LF line endings and UTF-8 with BOM encoding. Ensures cross-platform consistency and correct diffing for snapshot verification artifacts like .txt, .xml, and .json. Should be placed in the project's root .gitattributes file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is a Windows tray application that monitors and manages snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps\nDESCRIPTION: Creates a command line task that sets a pipeline variable when tests fail, which will be used to determine whether to publish .received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Passing Optional Info to VerifyZip for Contextual Snapshot Testing in Xunit v3 (C#)\nDESCRIPTION: Shows the use of the optional 'info' parameter with VerifyZip in Xunit v3 C#. This parameter accepts an object whose contents are JSON serialized and attached to the snapshot, affording additional context during verification. Depends on Verify for serialization features and Xunit v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-zip.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyZipWithInfoXunitV3\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Counting with Fluent API\nDESCRIPTION: Using the fluent API to disable date counting and use simple scrubbing for dates.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nDisableDateCountingFluent\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool, which enables managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: NuGet package references needed to use Verify with MSTest testing framework. These packages include the core Verify library, MSTest integration, and DiffEngine for handling snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.9.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.2.2\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.2.2\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"23.2.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: This command installs the DiffEngineTray tool globally, which helps monitor pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in XML\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to the project. This package enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Verify Text Artifacts - ini\nDESCRIPTION: Defines an EditorConfig section to standardize editing and saving behaviors for text-based verification snapshots with various extensions, ensuring utf-8-bom encoding, LF end-of-line, and no trailing newlines. Prevents undesired whitespace or line ending changes by editors. Intended for projects using EditorConfig.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\\n\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Value Enforcement\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify) as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex via NuGet Package\nDESCRIPTION: Add Verify.DiffPlex as a NuGet package to customize text comparison behavior by highlighting inline differences instead of verbose exception outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Additional .gitignore Configuration for Split Mode\nDESCRIPTION: When using UseSplitModeForUniqueDirectory, this additional .gitignore entry is required to exclude the *.received/ directories from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/include-exclude.include.md#2025-04-22_snippet_1\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Verification Result for Named Tuple in Text Format\nDESCRIPTION: This snippet shows the output of verifying a named tuple, displaying the values of each member in a JSON-like format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/named-tuples.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Member1: true,\n  Member2: A,\n  Member3: B\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Info for MSTest\nDESCRIPTION: Configures the path derivation logic for MSTest tests, setting snapshot files to be stored in a Snapshots directory under the project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_19\n\nLANGUAGE: cs\nCODE:\n```\nVerifier.DerivePathInfo(\n    (sourceFile, projectDirectory, type, method) => new(\n        directory: Path.Combine(projectDirectory, \"Snapshots\"),\n        typeName: type.Name,\n        methodName: method.Name));\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray dotnet tool globally, which provides a system tray utility for accepting or rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining a Method with Named Tuple in C#\nDESCRIPTION: This snippet shows a method that returns a named tuple with three members: a boolean and two strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/named-tuples.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic (bool Member1, string Member2, string Member3) MethodWithNamedTuple() =>\n    (true, \"A\", \"B\");\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while keeping *.verified.* files. This is essential for the Verify testing workflow.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which is a recommended practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Person Objects in JSON\nDESCRIPTION: This JSON snippet defines two person objects, each with GivenNames and FamilyName properties. It demonstrates a basic structure for storing personal information in a key-value format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/VerifyObjectSamples.Anon.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  person1: {\n    GivenNames: John,\n    FamilyName: Smith\n  },\n  person2: {\n    GivenNames: Marianne,\n    FamilyName: Aguirre\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool for Command Line Management\nDESCRIPTION: Command to install the global Verify.Terminal tool which allows managing snapshots from the command line, providing additional flexibility for verification workflows outside the IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude generated .received files from source control, which should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: Commands to add required NuGet packages for NUnit testing and Verify to the project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property for Verify MSTest Integration\nDESCRIPTION: Generated code that implements a TestContext property for MSTest integration. The property getter returns the current test context from VerifyMSTest.Verifier, while the setter creates a new TestExecutionContext with the provided value and current type.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/GlobalNamespaceTests.HasAssemblyAttributeAndCustomTestClassAttribute.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Foo\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to set a flag when tests fail, used to conditionally publish Verify's received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, and xunit packages with prerelease versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Files\nDESCRIPTION: Git configuration to exclude received files from source control while preserving verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing XunitV3 NuGet Packages for Verify Testing\nDESCRIPTION: NuGet package references needed to use Verify with XunitV3, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Source Control Settings for Verified Text Files - Shell\nDESCRIPTION: This code block contains .gitattributes settings for verified text files, ensuring proper line endings (LF) and encoding (UTF-8 with BOM) for specific file extensions. These settings must be added to the .gitattributes file to ensure consistency across environments. No parameters are required; the patterns target verified text extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: Code snippet demonstrating a sample test using TUnit with Verify. This shows the basic pattern for writing verification-based tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing TUnit;\n\n[TestFixture]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing verification snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps to Publish Verify Received Files\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to publish *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample Verified JSON Output\nDESCRIPTION: Example of a verified JSON output file showing the standardized format used by Verify. The content shows a simple JSON structure with nested objects.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_13\n\nLANGUAGE: txt\nCODE:\n```\n{\n  key: {\n    msg: No action taken\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex PackageReference - .NET XML\nDESCRIPTION: Demonstrates how to add the Verify.DiffPlex NuGet package to a C# test project's .csproj file using XML. This enables enhanced inline text diffing in Verify test results. Requires NuGet infrastructure and a compatible .NET test project. No parameters are needed; inserting this inside the <ItemGroup> node of the .csproj file suffices. The Version can be specified or replaced with a specific version as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Dotnet Tool\nDESCRIPTION: Install the Verify.Terminal tool for managing test snapshots via the command line, facilitating easier testing. This is a global tool installation and must be executed in a shell. It does not require project-level dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while preserving verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: This snippet shows how to enable Implicit Usings in a project file, which allows for simplified syntax when using Verify methods without fully qualifying them with the class name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: Demonstrates how to run Verify checks using TUnit in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyChecks()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package for Inline Text Diffing - Shell\nDESCRIPTION: This shell snippet uses the dotnet CLI to add the Verify.DiffPlex package to the project, enabling improved inline diffing capabilities for snapshot failures in Verify tests. This dependency is optional but recommended for enhanced text comparison during testing. Run this command in your test project directory to install Verify.DiffPlex.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with xUnit\nDESCRIPTION: Code snippet demonstrating how to check that Verify conventions are correctly configured by calling VerifyChecks.Run() in an xUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void CheckVerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Testing a Method That Throws an Exception Using Verify in C#\nDESCRIPTION: This snippet demonstrates how to use Verify.Throws to test a method that throws an exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task TestMethodThatThrows() =>\n    Throws(MethodThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Configuration Object with String and Numeric Values\nDESCRIPTION: A JSON configuration object containing two properties: arg1 with string value 'Value2' and arg2 with numeric value 2. This configuration could be used for application settings or as an input parameter structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/TestFixtureSourceUsage.Test_arg1=Value2_arg2=2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  arg1: Value2,\n  arg2: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit and Verify NuGet Packages\nDESCRIPTION: This snippet shows the NuGet package references required for using Verify with Xunit, including the test SDK, Verify.Xunit, xunit, and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: This code snippet demonstrates how to create an Xunit test that runs Verify checks to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files. This ensures consistent handling across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify's .received Files as Azure DevOps Build Artifacts\nDESCRIPTION: A YAML task that publishes the staged .received files as build artifacts. This task is conditionally executed based on the publishverify variable, making the files available for download and inspection after a build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig to Enforce Pure Method Return Value Usage\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors. This helps catch cases where the Verify() method is called but its result is not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Global Extra Settings Configuration\nDESCRIPTION: Shows how to add additional global serialization settings using TypeNameHandling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings\n    .AddExtraSettings(_ =>\n        _.TypeNameHandling = TypeNameHandling.All);\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text comparison output to show differences inline, making it easier to understand text differences in large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project Files - XML\nDESCRIPTION: Demonstrates how to enable implicit namespace usings in a .NET project file (csproj) by setting the <ImplicitUsings> property to 'enable'. This project configuration ensures that required namespaces are automatically included, allowing sample C# code using Verify() instead of Verifier.Verify() to compile as shown. This setting is usually placed inside a <PropertyGroup> in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Test Failure\nDESCRIPTION: GitHub Actions workflow step that uploads .received files as artifacts when tests fail, helping with debugging verification failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie. Handles test discovery, execution state management, and parameter handling for both parameterized and non-parameterized tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Testing Directory Paths Using verify Library in TypeScript\nDESCRIPTION: This test case demonstrates how to set a directory path using the 'useDirectory' method from the 'verify' library's fluent interface and verifies that the path is correctly set and applied.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/CustomDirectory/NamerTests.UseDirectoryFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('use directory fluent', async t => {\n  const settings = {\n    useDirectory: '',\n  };\n  const result = VerifyBase\n    .useDirectory('./temp')\n    .buildSettings(settings);\n\n  t.is(result.useDirectory, './temp');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes through Windows system tray\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as Global Tool\nDESCRIPTION: Command to install DiffEngineTray as a global .NET tool. DiffEngineTray is a Windows tray application that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET SDK Project (csproj)\nDESCRIPTION: Enables the ImplicitUsings feature by adding the XML element in the project file. Required for using shorthand syntax (e.g., Verify()) in C# code examples, eliminating the need for explicit using statements. Inputs: PropertyGroup in .csproj XML; output: imported namespaces and smooth compilation. Limitation: Only supported in SDK-style .NET projects.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify Verified Text Files\nDESCRIPTION: Specifies settings for `.gitattributes` to ensure consistent handling of text-based `*.verified.*` files (e.g., `.txt`, `.xml`, `.json`). It enforces Unix-style line endings (`eol=lf`) and UTF-8 encoding (`working-tree-encoding=UTF-8`) in the repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: ParseException Error JSON in Verify Testing Framework\nDESCRIPTION: JSON representation of a ParseException error that occurs when the 'Directory' property is empty in the Verify testing framework. The error suggests ensuring that the current stable version of Verify is being used to resolve this issue.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.Error_EmptyDirectory.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ParseException,\n  Message: Empty 'Directory' Ensure the current stable of Verify is being used.\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Diff Launching for Verify in C#\nDESCRIPTION: Shows how to globally disable launching diff tools when using the Verify library in C#. This disables the automatic display of file differences on mismatch, which can be desirable in headless or CI environments. Set this once, typically during test or app initialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.DisableDiff();\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie ITestProject and IExecution for Verify\nDESCRIPTION: C# implementation of Fixie's ITestProject and IExecution interfaces to properly configure Verify for test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Exception Object as JSON in C#\nDESCRIPTION: A JSON representation of a C# exception containing the exception type, message text, and stack trace information. This format is commonly used for logging or serializing exception data for debugging purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsNested.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.Nested.MethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper text file encoding and line endings for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit testing framework, including test SDK and runners\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify with Expecto testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Applying XUnitV3 Collection to Tests\nDESCRIPTION: Demonstrates how to apply the shared fixture collection to test classes in XUnit V3, enabling dangling snapshot verification across all tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dangling-files.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Collection(nameof(SharedFixtureCollection))]\npublic class Tests\n{\n    [Fact]\n    public Task Simple() =>\n        Verify(\"Foo\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex via Module Initializer in C#\nDESCRIPTION: C# code using `[ModuleInitializer]` to call `VerifyDiffPlex.Initialize()`. This activates the DiffPlex integration for improved text comparison results within VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining Address Verification Test Cases in CSV-like Format\nDESCRIPTION: This snippet defines a set of test cases for address verification. It includes input fields (street numbers, streets, cities) and the expected result for each combination. The data covers variations in street numbers (1 and 10), street names (Smith St and Wallace St), and cities (Sydney and Chicago).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.Combination_CustomSerialization.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n{\n  streetNumbers, streets   , cities : Result,\n  1, Smith St, Sydney: 1 Smith St, Sydney,\n  1, Smith St, Chicago: 1 Smith St, Chicago,\n  1, Wallace St, Sydney: 1 Wallace St, Sydney,\n  1, Wallace St, Chicago: 1 Wallace St, Chicago,\n  10, Smith St, Sydney: 10 Smith St, Sydney,\n  10, Smith St, Chicago: 10 Smith St, Chicago,\n  10, Wallace St, Sydney: 10 Wallace St, Sydney,\n  10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Failure Artifacts\nDESCRIPTION: GitHub Actions workflow step that uploads any .received files as artifacts when tests fail, making it easier to diagnose issues.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line utilities for managing verification snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Setting a Flag for Test Failures in Azure YAML\nDESCRIPTION: This YAML task sets a variable flag in Azure DevOps pipelines when a test step fails, enabling conditional execution of subsequent tasks. It requires Azure DevOps and an understanding of pipeline variables.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: Test class implementation for running verification checks using TUnit framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML element to enable implicit usings in the project file to ensure compatibility with the code examples provided.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Setting up Verify Convention Checks for Xunit\nDESCRIPTION: Xunit test to run Verify convention checks, ensuring the project follows all required conventions for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result with Included Obsolete Property\nDESCRIPTION: This snippet displays the verified output of a test where obsolete properties are included. Both the obsolete and non-obsolete properties are present in the serialized result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/obsolete-members.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n{\n  ObsoleteProperty: value1,\n  OtherProperty: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps YAML\nDESCRIPTION: Sets a flag to publish Verify *.received.* files when the test step fails in Azure DevOps pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Named Dates and Times with Fluent API\nDESCRIPTION: Demonstrates how to configure named dates and times using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\nawait Verify(target)\n    .AddNamedDate(new(2020, 10, 11), \"instanceNamedDate\")\n    .AddNamedTime(new(1, 2), \"instanceTime\")\n    .AddNamedDateTime(new(2030, 1, 2), \"instanceNamedDateTime\")\n    .AddNamedDateTimeOffset(new DateTime(2030, 1, 2), \"instanceNamedTimeOffset\");\n```\n\n----------------------------------------\n\nTITLE: Default DateTimeOffset Comparer\nDESCRIPTION: The default implementation used to compare DateTimeOffset values during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nDateTimeOffsetComparer\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify NuGet Packages to csproj\nDESCRIPTION: NuGet package references needed for TUnit and Verify.TUnit in the test project. Includes specific version references to ensure compatibility.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Globally Ignoring Members That Throw Specific Exceptions in C#\nDESCRIPTION: Shows how to globally configure Verify to ignore members that throw specific exception types during serialization. This configuration applies to all members on all types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/members-throw.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreMembersThatThrow<NotImplementedException>();\nVerifierSettings.IgnoreMembersThatThrow<NotSupportedException>();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray dotnet tool globally. DiffEngineTray monitors pending snapshot changes and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Upload Artifacts Configuration\nDESCRIPTION: YAML configuration for uploading test results on GitHub Actions failure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, ensuring that Verify() calls are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Comparing XAML Test Output Files using NotEqual Check\nDESCRIPTION: Configuration block that defines paths for comparing received test output against verified reference files. Uses {CurrentDirectory} placeholder for relative path resolution.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.Nunit.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  NotEqual: [\n    {\n      Received: {CurrentDirectory}XAMLCombinerTests.TestOutput.received.xaml,\n      Verified: {CurrentDirectory}XAMLCombinerTests.TestOutput.verified.xaml\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Source Control Exclude Patterns\nDESCRIPTION: These patterns are added to .gitignore to exclude received files, which are generated during test verification, from source control. It's important to ensure these files aren't accidentally committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Test Case Mapping Configuration in JSON\nDESCRIPTION: Defines a mapping object that associates test parameters with expected results. Each key is a tuple of letter (A/b/C), number (1-3), and boolean flag (True/False), mapped to a corresponding result value in the format of letterNumberBoolean.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.Three.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : b1True,\n  b, 1, False: b1False,\n  b, 2, True : b2True,\n  b, 2, False: b2False,\n  b, 3, True : b3True,\n  b, 3, False: b3False,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore pattern to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring VerifyChecks in C# for Expecto\nDESCRIPTION: Demonstrates how to set up a test case that runs VerifyChecks to ensure conventions are followed in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET Tool\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is a utility that monitors snapshot changes and provides acceptance/rejection mechanisms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with TUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Custom Header Names\nDESCRIPTION: Example of overriding default header names in combination tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSampleWithHeaderOverrides\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: This code snippet demonstrates how to initialize VerifyDiffPlex. It uses a module initializer to ensure VerifyDiffPlex is set up when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal as a Global .NET Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: This snippet demonstrates how to enable implicit usings in the project file to simplify Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for improved text comparison visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool globally\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining Person Object Structure in YAML\nDESCRIPTION: A YAML representation of a Person object with nested Address, Children collection, and various personal information properties. This configuration is likely used in OrderPropertiesTests to verify proper serialization or property ordering.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/OrderPropertiesTests.DoesNotAffectTypeName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  $type: OrderPropertiesTests.Person,\n  Address: {\n    $type: OrderPropertiesTests.Address,\n    Country: USA,\n    Street: 1 Puddle Lane\n  },\n  Children: {\n    $type: List<string>,\n    $values: [\n      Sam,\n      Mary\n    ]\n  },\n  FamilyName: Smith,\n  GivenNames: John,\n  Id: Guid_1,\n  Spouse: Jill\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-line Property in JSON/Pseudocode\nDESCRIPTION: A simple structure defining a property with multi-line content. The definition uses curly braces to encapsulate the content, which spans two lines.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubEmptyLinesMiddleProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property:\nLine1\nLine2\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex NuGet Package Reference - XML\nDESCRIPTION: This snippet demonstrates how to add the Verify.DiffPlex NuGet package to a .NET project's .csproj file. The Verify.DiffPlex package enhances text comparison output when using the Verify library in MSTest projects, optionally highlighting inline text differences in test results. The 'Version' attribute can be pinned to a specific version or set to '*' for the latest; no additional parameters are required, but NuGet must be available in your build environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adds the Verify.DiffPlex package reference to enable enhanced diff highlighting functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Uploading Received Files as Artifacts in GitHub Actions on Failure\nDESCRIPTION: This YAML snippet defines a GitHub Actions step that runs only if a previous step in the job has failed (`if: failure()`). It uses the `actions/upload-artifact` action to upload all files matching `**/*.received.*` as a build artifact named `verify-test-results`, aiding in debugging failed snapshot tests in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Subset in MSTest Verify Tests\nDESCRIPTION: Demonstrates how to use a subset of parameters in MSTest Verify tests, resulting in a specific file naming convention.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task UseParametersSubSet(string arg1, string arg2, string arg3) =>\n    Verify(\"value\")\n        .UseParameters(arg1, arg2);\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool - Shell\nDESCRIPTION: This shell command installs the Verify.Terminal tool globally on the system. Verify.Terminal provides a CLI interface for managing test snapshots, making snapshot review and updates possible outside of the test runner or IDE. Dependency: dotnet CLI. Output: The verify.tool command is made available globally.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files as Artifacts\nDESCRIPTION: AppVeyor build configuration to capture all .received.* files as artifacts on test failure for easier debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Method Name\nDESCRIPTION: Demonstrates how to override the default method name using VerifySettings instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.UseMethodName(\"CustomMethodName\");\nawait Verify(\"valueUseMethodName\", settings);\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Git\nDESCRIPTION: Specifies patterns to add to a `.gitignore` file to prevent `*.received.*` files, which represent the actual output of a test run before verification, from being committed to source control. It also includes `*.received/` for cases using UseSplitModeForUniqueDirectory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Install the Verify.DiffPlex package that integrates text comparison capabilities with inline difference highlighting for better test assertion outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for Verify.DiffPlex, which enhances text comparison output by showing inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the required TUnit and Verify.TUnit packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: These commands install the necessary NuGet packages to use Verify with Xunit testing framework, including the test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Members Globally by Expression in Verify Tests (C#)\nDESCRIPTION: Shows how to scrub specific members of a type globally using expressions in Verify tests with VerifierSettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.ScrubMembers<IgnoreExplicitTarget>(\n    _ => _.Property,\n    _ => _.PropertyWithPropertyName,\n    _ => _.Field,\n    _ => _.GetOnlyProperty,\n    _ => _.PropertyThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Exception Output for Boolean Parsing Error in ClipboardEnabled Class\nDESCRIPTION: JSON-formatted exception that occurs when attempting to parse an invalid string value ('foo') as a boolean from the Verify_DisableClipboard environment variable. The exception originates in the ParseEnvironmentVariable method of the ClipboardEnabled class.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ClipboardAccept.Tests/ClipboardEnabledTests.ParseEnvironmentVariable_failure.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: Could not convert `Verify_DisableClipboard` environment variable to a bool. Value: foo,\n  StackTrace:\nat ClipboardEnabled.ParseEnvironmentVariable(String disabledText)\nat ClipboardEnabledTests.<>c.<ParseEnvironmentVariable_failure>b__2_0()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to enhance text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally as a dotnet tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: XUnit test implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verification Conventions Check with TUnit\nDESCRIPTION: A TUnit test class that runs the VerifyChecks to ensure all verification conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Configuration with Nested Objects and Scrubbed Values\nDESCRIPTION: This JSON snippet defines a configuration object with nested structures and scrubbed values. It includes an 'Include' object with its own key-value pairs and a scrubbed value. The main object also contains additional key-value pairs and another scrubbed value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryKeyByName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Include\": {\n    \"Key1\": \"Value2\",\n    \"Scrub\": {Scrubbed}\n  },\n  \"Key2\": \"Value4\",\n  \"Scrub\": {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Configuration for handling text file encodings and line endings in Git.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Files\nDESCRIPTION: Git configuration to exclude received files and set encoding for verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Configuration for excluding received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: Provides `.gitignore` patterns to prevent committing `*.received.*` files generated by Verify during test runs. It also suggests adding `*.received/` if using the `UseSplitModeForUniqueDirectory` option.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Inline Text Differences\nDESCRIPTION: Enables Verify.DiffPlex to highlight text differences inline for Verify test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with TUnit\nDESCRIPTION: Presents a C# test class `VerifyChecksTests` using the TUnit framework. The `Run` test method calls `VerifyChecks.Run()` to execute checks that ensure project conventions (like `.gitignore` entries) align with Verify's requirements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Case Insensitive Recording\nDESCRIPTION: Shows the verified output for the case-insensitive Recording example, where different cases of the same key are treated as separate entries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n{\n  target: TheValue,\n  name: value1,\n  Name: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: YAML task that publishes the staged .received files as build artifacts when tests fail. Executes conditionally based on the publishverify variable and makes the files available for download in the build results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Inline Dates Globally\nDESCRIPTION: Setting a global configuration to scrub inline dates in all verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nScrubInlineDateTimesGlobal\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Info for NUnit\nDESCRIPTION: Configures the path derivation logic for NUnit tests, setting snapshot files to be stored in a Snapshots directory under the project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_18\n\nLANGUAGE: cs\nCODE:\n```\nVerifier.DerivePathInfo(\n    (sourceFile, projectDirectory, type, method) => new(\n        directory: Path.Combine(projectDirectory, \"Snapshots\"),\n        typeName: type.Name,\n        methodName: method.Name));\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages via CLI\nDESCRIPTION: Commands to add required NuGet packages for Verify and Expecto to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Params in TUnit Tests (Instance)\nDESCRIPTION: Shows how to ignore parameters for verified filename while passing custom parameters using IgnoreParametersForVerified() with an instance of VerifySettings in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"One\")]\n[Arguments(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParams(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified($\"Number{arg}\");\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison by highlighting differences inline instead of showing entire files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check in Expecto\nDESCRIPTION: C# code that demonstrates how to create a test case that checks if all Verify conventions are properly followed in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Header Test Results\nDESCRIPTION: Verified output showing combination results with headers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\nCombinationSample.BuildAddressWithHeaderTest.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for TUnit\nDESCRIPTION: Adds the required NuGet packages for using Verify with TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Date Mappings in JSON-like Format\nDESCRIPTION: This snippet defines a mapping between date components (year, month, day) and their formatted string representations. It covers specific dates in February and March for the years 2020 and 2022.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.WithDontScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  2020, 2, 12: 2020-02-12,\n  2020, 2, 15: 2020-02-15,\n  2020, 3, 12: 2020-03-12,\n  2020, 3, 15: 2020-03-15,\n  2022, 2, 12: 2022-02-12,\n  2022, 2, 15: 2022-02-15,\n  2022, 3, 12: 2022-03-12,\n  2022, 3, 15: 2022-03-15\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in MSTest Verify Tests\nDESCRIPTION: Demonstrates how to override the text used for parameters in MSTest Verify tests using UseTextForParameters method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task UseTextForParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseTextForParameters(arg);\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims Structure\nDESCRIPTION: JSON structure for defining JWT claims configuration. Contains an array of claim objects, where each claim has TheType and TheValue properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ClaimsIdentity.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Claims: [\n    {\n      TheType: TheValue\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore: Excluding *.received/ Directories (Split Directory Mode)\nDESCRIPTION: Add this directory pattern to .gitignore for projects using SplitModeForUniqueDirectory in Verify, ensuring that transient .received/ directories are not committed. No dependencies, intended for source control hygiene. No input/output, modifies version control ignore rules.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Framework Target Configuration Example\nDESCRIPTION: Example of target frameworks configuration in project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/naming.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TargetFrameworks>netcoreapp3.0;net48</TargetFrameworks>\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified text files with specific line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Mappings in JSON\nDESCRIPTION: This JSON object maps combinations of three parameters (identifier, numeric value, and boolean flag) to specific output strings. It covers various scenarios for identifiers 'A', 'bcc', and 'sssssC' with different numeric values and boolean flags.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.MixedLengths.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  A     , 100, True : a100True,\n  A     , 100, False: a100False,\n  A     ,   2, True : a2True,\n  A     ,   2, False: a2False,\n  A     ,  30, True : a30True,\n  A     ,  30, False: a30False,\n  bcc   , 100, True : bcc100True,\n  bcc   , 100, False: bcc100False,\n  bcc   ,   2, True : bcc2True,\n  bcc   ,   2, False: bcc2False,\n  bcc   ,  30, True : bcc30True,\n  bcc   ,  30, False: bcc30False,\n  sssssC, 100, True : sssssc100True,\n  sssssC, 100, False: sssssc100False,\n  sssssC,   2, True : sssssc2True,\n  sssssC,   2, False: sssssc2False,\n  sssssC,  30, True : sssssc30True,\n  sssssC,  30, False: sssssc30False\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced diff visualization in tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Example Info File Format in TXT\nDESCRIPTION: Shows the JSON structure of a verification info file containing metadata about a converted image including pixel format and size.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n{\n  PixelFormat: Format8bppIndexed,\n  Size: 473, 355\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify (CLI)\nDESCRIPTION: Uses the `dotnet add package` command to install `YoloDev.Expecto.TestSdk`, `Expecto`, and `Verify.Expecto` into the test project. These packages are the core dependencies required for using the Verify testing framework with the Expecto test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Exception Test Results\nDESCRIPTION: Verified output showing captured exceptions from combination tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nCombinationSample.BuildAddressExceptionsTest.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: GitHub Actions workflow configuration to upload received files on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Navigation structure showing the hierarchy and build server options for Verify test configuration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Linux_Rider_Cli_TUnit.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Linux](Linux.md) > [JetBrains Rider](Linux_Rider.md) > [Prefer CLI](Linux_Rider_Cli.md) > [TUnit](Linux_Rider_Cli_TUnit.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Linux_Rider_Cli_TUnit_AppVeyor.md)\n * [GitHub Actions](Linux_Rider_Cli_TUnit_GitHubActions.md)\n * [Azure DevOps](Linux_Rider_Cli_TUnit_AzureDevOps.md)\n * [No build server](Linux_Rider_Cli_TUnit_None.md)\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object\nDESCRIPTION: This snippet defines an empty JSON object literal. It represents a data structure with no properties or key-value pairs, which is a valid and fundamental structure in JSON.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.IgnoreMembersNullableNested.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining valueUseDirectory Reference\nDESCRIPTION: A simple reference to a 'valueUseDirectory' component or setting. This appears to be a configuration value or import statement, though with limited context it's difficult to determine its exact purpose.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/CustomDirectory/NamerTests.UseDirectory.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvalueUseDirectory\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Disable Orphaned Process Detection\nDESCRIPTION: Configuration setting to add to the solution settings file to disable ReSharper's detection of orphaned processes, which would otherwise interfere with diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple JSON Array\nDESCRIPTION: Defines a basic JSON array containing two string elements 'one' and 'two'. The array uses standard JSON formatting with square brackets.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.AsyncEnumerable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  one,\n  two\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project File (XML)\nDESCRIPTION: Configures the .NET project file (e.g., `.csproj`) to enable the Implicit Usings feature by setting the `<ImplicitUsings>` property to `enable`. This feature, available in .NET 6 and later, automatically includes common global using directives, simplifying code as shown in the examples. If not enabled, `Verify()` needs to be replaced with `Verifier.Verify()`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify with XunitV3. Includes the test SDK, Verify.XunitV3, xunit.v3 (prerelease), and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Snapshot Naming Strategy\nDESCRIPTION: This configuration value, `UniqueForAssemblyConfigurationAndUniqueForTargetFrameworkAndVersion`, instructs the Verify testing framework to generate unique filenames for verification snapshots based on the specific assembly configuration (e.g., Debug/Release), the target framework (e.g., net6.0, net7.0), and the assembly version. This prevents filename collisions when tests are run under different build configurations or target frameworks.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NamerTests.UniqueForAssemblyConfigurationAndUniqueForTargetFrameworkAndVersion.DotNet8_0.Debug.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUniqueForAssemblyConfigurationAndUniqueForTargetFrameworkAndVersion\n```\n\n----------------------------------------\n\nTITLE: Passing Explicit Targets in TUnit with Verify\nDESCRIPTION: This snippet demonstrates how to pass explicit targets when using Verify with TUnit. It creates an anonymous object and passes a custom Target with a specific extension, data, and name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task WithTargets() =>\n    Verify(\n        new\n        {\n            Property = \"Value\"\n        },\n        [\n            new Target(\n                extension: \"txt\",\n                data: \"Raw target value\",\n                name: \"targetName\")\n        ]);\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto in F#\nDESCRIPTION: Sample F# test using Expecto and Verify to test a FindPerson method and verify its output. Demonstrates the integration of VerifyExpecto with an F# test case.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified and Received Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up EditorConfig for Verify Files\nDESCRIPTION: This EditorConfig configuration ensures that editors respect the required file format conventions for verified and received files, including UTF-8 with BOM, line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Treat Return Value of Pure Method as Error in EditorConfig - ini\nDESCRIPTION: Specifies an .editorconfig rule that sets highlighting of unused pure method return values to error severity in ReSharper. This setting makes missing awaits (or ignored Verify calls) easy to spot in the IDE, preventing subtle test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Provides a sample NUnit test using Verify. This test demonstrates how to use Verify to assert on complex objects or files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\n        id: \"ebced679-45d3-4653-8791-3d969c4a986c\",\n        givenNames: \"John\",\n        familyName: \"Smith\",\n        dateOfBirth: new DateTime(2000, 10, 1),\n        address: new Address(\n            street: \"4 Puddle Lane\",\n            country: \"USA\"));\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool - Command Line\nDESCRIPTION: Installs DiffEngineTray as a global .NET tool to enable tray icon-based management of snapshot diffs. Optional but recommended for quickly accepting or rejecting changes in verification files. Requires .NET CLI tooling; run this command in a terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Parameter Text Override with Fluent API\nDESCRIPTION: Shows how to override parameter text in verification file names using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-fixie.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"Value1\")]\n[TestCase(\"Value2\")]\npublic Task UseTextForParametersFluent(string arg) =>\n    Verify(arg + \"UseTextForParametersFluent\")\n        .UseTextForParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Using a JsonAppender with Stream or Binary Content\nDESCRIPTION: This example demonstrates how to verify a stream or binary file with a JsonAppender. The binary content will be saved in one file while the appended JSON will be in a separate text file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/jsonappender.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(new MemoryStream(new byte[] {1}));\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: Enables implicit usings in a .NET project to simplify code by automatically importing common namespaces. This setting allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Demonstrates how to run Verify checks using Fixie conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventions\n{\n    public void Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A sample NUnit test implementation using Verify. The actual code is referenced but not shown in the snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: YAML configuration for setting a flag to publish Verify *.received.* files when a test step fails in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Adding Required TUnit NuGet Packages\nDESCRIPTION: The required NuGet packages that need to be added to the test project to use Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in NUnit Verify Tests (Instance)\nDESCRIPTION: Demonstrates how to override the text used for parameters in NUnit Verify tests using the instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task UseTextForParameters(string arg, int number)\n{\n    return Verify(\"value\")\n        .UseTextForParameters(new\n        {\n            myArg = arg,\n            myNumber = number\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude all received files from source control while keeping verified files tracked.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced difference comparison in verify tests using the ModuleInitializer attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration at Module Initialization - C#\nDESCRIPTION: This C# snippet demonstrates how to enable Verify.DiffPlex at module initialization using a static method. Add this block to your test assembly (preferably in a static class) to globally enable DiffPlex-based diffing for all tests. Requires C# 9.0+ and Verify.DiffPlex.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool via .NET CLI\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which provides command-line functionality for managing Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. Verify.DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Full F# Test Suite for Argon Integration\nDESCRIPTION: This snippet contains a complete set of F# tests demonstrating various aspects of Argon integration, including value verification, record type handling, and option type serialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/fsharp.source.md#2025-04-22_snippet_3\n\nLANGUAGE: fs\nCODE:\n```\nmodule Tests\n\nopen System\nopen System.IO\nopen Xunit\nopen VerifyXunit\nopen VerifyTests\nopen Argon\n\ntype Address = {\n    Street: string\n    City: string\n    Country: string\n}\n\ntype Person = {\n    Name: string\n    Age: int\n    Address: Address option\n}\n\nVerifierSettings.AddExtraSettings(fun settings ->\n    settings.AddFSharpConverters()\n    settings.DefaultValueHandling <- DefaultValueHandling.Include)\n\n[<Fact>]\nlet ``Verify value`` () =\n    async {\n        do! Verifier.Verify(\"Hello F#\")\n                   .UseDirectory(Path.Combine(__SOURCE_DIRECTORY__, \"__snapshots__\"))\n                   .ToTask()\n                   |> Async.AwaitTask\n    }\n\n[<Fact>]\nlet ``Verify record`` () =\n    async {\n        let person = {\n            Name = \"John\"\n            Age = 30\n            Address = Some {\n                Street = \"123 Main St\"\n                City = \"Anytown\"\n                Country = \"USA\"\n            }\n        }\n        do! Verifier.Verify(person)\n                   .UseDirectory(Path.Combine(__SOURCE_DIRECTORY__, \"__snapshots__\"))\n                   .ToTask()\n                   |> Async.AwaitTask\n    }\n\n[<Fact>]\nlet ``Verify record with None`` () =\n    async {\n        let person = {\n            Name = \"Jane\"\n            Age = 25\n            Address = None\n        }\n        do! Verifier.Verify(person)\n                   .UseDirectory(Path.Combine(__SOURCE_DIRECTORY__, \"__snapshots__\"))\n                   .ToTask()\n                   |> Async.AwaitTask\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Initialization in C#\nDESCRIPTION: This C# code uses a ModuleInitializer attribute to automatically call VerifyDiffPlex.Initialize() when the assembly loads. This enables the inline text difference highlighting provided by the Verify.DiffPlex library for all VerifyTests assertions within the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Instances Globally in Verify Tests (C#)\nDESCRIPTION: Shows how to ignore instances of a type globally in Verify tests using VerifierSettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.IgnoreInstance<Instance>(_ => _.Property == \"Ignore\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Map with Numeric Keys (JSON-like)\nDESCRIPTION: This snippet shows a data structure similar to a JSON object, containing two key-value pairs. It uses numeric keys (`1`, `2`) and numeric values (`1234`, `5678`). Note that standard JSON requires keys to be strings; the use of numeric keys here might lead to compatibility issues with strict JSON parsers, although some parsers might accept it.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.SortedDictionaryInt.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  2: 5678,\n  1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for improved diff output\nDESCRIPTION: Sample code for enabling Verify.DiffPlex, which enhances the text comparison output by highlighting differences inline rather than showing the full received and verified content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code using ModuleInitializer to configure Verify.DiffPlex, which enhances text comparison results with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Sample Xunit test to run Verify checks, ensuring conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Checks with XUnit v3\nDESCRIPTION: Test class for running convention checks in Verify with XUnit v3, which validates that the project follows all the required conventions for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Files for Directory Verification\nDESCRIPTION: Shows how to apply filters when verifying a directory, including file path conditions, file pattern matching, and directory recursion options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-directory.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task WithDirectoryFiltered() =>\n    VerifyDirectory(\n        directoryToVerify,\n        include: filePath => filePath.Contains(\"Doc\"),\n        pattern: \"*.txt\",\n        options: new()\n        {\n            RecurseSubdirectories = false\n        });\n```\n\n----------------------------------------\n\nTITLE: Custom TestProject Implementation for Fixie + Verify (C#)\nDESCRIPTION: Provides a complete implementation of a Fixie test project for running snapshot tests using Verify. This class utilizes ITestProject and IExecution interfaces to assign the test assembly via VerifierSettings.AssignTargetAssembly and manages test execution context with ExecutionState.Set. Required dependencies include Fixie and Verify.Fixie libraries. Handles parameterized and non-parameterized tests within a suite.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class TestProject :\\n    ITestProject,\\n    IExecution\\n{\\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\\n    {\\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\\n    }\\n\\n    public async Task Run(TestSuite testSuite)\\n    {\\n        foreach (var testClass in testSuite.TestClasses)\\n        {\\n            foreach (var test in testClass.Tests)\\n            {\\n                if (test.HasParameters)\\n                {\\n                    foreach (var parameters in test\\n                                 .GetAll<TestCase>()\\n                                 .Select(_ => _.Parameters))\\n                    {\\n                        using (ExecutionState.Set(testClass, test, parameters))\\n                        {\\n                            await test.Run(parameters);\\n                        }\\n                    }\\n                }\\n                else\\n                {\\n                    using (ExecutionState.Set(testClass, test, null))\\n                    {\\n                        await test.Run();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified files with specific text encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test\nDESCRIPTION: Example XUnit test showing basic usage of Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: GitAttributes configuration for handling line endings and encoding in verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set proper line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which provides a system tray utility for accepting or rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Module initializer code to enable Verify.DiffPlex for improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with NUnit\nDESCRIPTION: Test fixture implementation for running Verify framework convention checks using NUnit test attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor On-Failure Script for Capturing Received Files\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step that captures all *.received.* files as build artifacts, making them available for inspection after a failed build.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Defining placeholder GitHub username for verification testing\nDESCRIPTION: A simple text placeholder that specifies a fake GitHub username for testing purposes. This would likely be replaced with actual credentials in a real implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/ApplyScrubbersTests.ScrubUserNameInValidAfter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFakeUserNameA\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration entry to exclude *.received.* files from source control, which are generated during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Scrubbing at Instance Level\nDESCRIPTION: Code to disable date sanitization for a specific verification instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nDontScrubDateTimes\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore pattern to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit v3 Testing\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit v3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet packages that need to be added to the test project to use Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Treating Pure Method Return Values as Errors\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is important for Verify's usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Referencing Expecto Conventions Check Snippet\nDESCRIPTION: References an external code snippet named 'VerifyChecksExpecto'. This snippet likely contains C# code demonstrating how to use `VerifyChecks.Run()` within an Expecto test to enforce configured conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksExpecto\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps build pipeline\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Global Configuration for DateTime Scrubbing\nDESCRIPTION: Shows how to globally disable date scrubbing across all tests using ModuleInitializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void ModuleInitializer() =>\n    VerifierSettings.DontScrubDateTimes();\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Navigation Structure for Getting Started Wizard\nDESCRIPTION: This Markdown snippet defines the navigation hierarchy and build server options for a Getting Started Wizard. It includes links to various pages for Windows development with Visual Studio, GUI preference, XUnit v3, and different build server options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Visual Studio](Windows_VisualStudio.md) > [Prefer GUI](Windows_VisualStudio_Gui.md) > [XunitV3](Windows_VisualStudio_Gui_XunitV3.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Windows_VisualStudio_Gui_XunitV3_AppVeyor.md)\n * [GitHub Actions](Windows_VisualStudio_Gui_XunitV3_GitHubActions.md)\n * [Azure DevOps](Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md)\n * [No build server](Windows_VisualStudio_Gui_XunitV3_None.md)\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: C# code snippet showing a sample MSTest test class using Verify to test a method that finds a person.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Verified File Settings - .gitattributes\nDESCRIPTION: This .gitattributes snippet enforces consistent line endings and encoding for snapshot verification files, ensuring UTF-8 with BOM and LF newlines for '.verified.txt', '.verified.xml', and '.verified.json' files. By specifying these settings, all contributors maintain the required formatting across platforms, preventing unnecessary diffs due to file encoding or line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in XunitV3\nDESCRIPTION: Code snippet showing how to run Verify conventions checks using XunitV3. This ensures that all Verify conventions are properly set up in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Defining Task Outcome Scenarios in JSON-like Format\nDESCRIPTION: This snippet defines a set of key-value pairs representing different possible outcomes of an asynchronous task or operation, structured in a JSON-like format (keys are unquoted). It includes scenarios for successful completion (`finished`, `withResult`), waiting (`running`), failure with exceptions (`withException`, `withExceptionAndResult`), and cancellation (`canceledAndResult`). This data is likely used as expected output definitions in verification tests, possibly within the 'Verify' testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Tasks.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  finished: {\n    Status: RanToCompletion\n  },\n  running: {\n    Status: WaitingForActivation\n  },\n  withResult: {\n    Status: RanToCompletion,\n    Result: Value\n  },\n  withException: {\n    Status: Faulted,\n    Exception: {\n      Type: AggregateException,\n      InnerException: {\n        Type: Exception,\n        Message: the exception\n      }\n    }\n  },\n  withExceptionAndResult: {\n    Status: Faulted,\n    Exception: {\n      Type: AggregateException,\n      InnerException: {\n        Type: Exception,\n        Message: the exception\n      }\n    }\n  },\n  canceledAndResult: {\n    Status: Canceled\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Rider's Orphaned Process Detection\nDESCRIPTION: Configuration to add to the solution settings file to disable Rider's orphaned process detection, which would otherwise interfere with diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Declaring Guid_1 String Variable\nDESCRIPTION: Declaration of a string variable named 'Guid_1' without an assigned value. This appears to be a placeholder for a GUID that will be used for identification purposes in the application.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineGuidsInString.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: Unknown\nCODE:\n```\nThe string Guid_1 \n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-line String Property in Configuration\nDESCRIPTION: This snippet defines a configuration block containing a single property named `Property`. The value assigned to this property is a multi-line string spanning \"value\", \"line2\", \"line3\", and \"line4\". This structure is likely used for testing configuration parsing or handling multi-line string values within a specific system or framework, indicated by the `/verifytests/verify` path.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/NewLineTests.WithNestedNewlineAddedByScrubber.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n  Property:\nvalue\nline2\nline3\nline4\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Values in Recording with C#\nDESCRIPTION: Demonstrates how values are grouped by key when using Recording. Multiple values added with the same key are combined into an array.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task SameKey()\n{\n    Recording.Start();\n    Recording.Add(\"name\", \"value1\");\n    Recording.Add(\"name\", \"value2\");\n    return Verify(\"TheValue\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Verify Tests Configuration in JSON\nDESCRIPTION: This snippet defines a configuration object for verify tests. It contains a 'key' object with a 'msg' property set to 'No action taken', which likely specifies a default message or behavior for certain test scenarios.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonJToken.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  key: {\n    msg: No action taken\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to enable enhanced text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while ensuring verified files are committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool - Shell\nDESCRIPTION: This command installs the DiffEngineTray global tool via the dotnet CLI, which provides a system tray utility for managing Verify snapshot test results. It should be executed in a terminal with appropriate permissions. No parameters are needed beyond a working .NET SDK installation; the tool assists with snapshot file management during verification workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration to ensure consistent formatting of verified and received files across different editors and IDEs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with MSTest, including the test SDK and adapters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files when edited manually.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: Demonstrates how to implement a test that verifies all the Verify framework conventions are being followed. This is done by calling VerifyChecks.Run() in an NUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyConventions() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, allowing simplified syntax for Verify method calls without explicit qualification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project's csproj file for using Fixie with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Artifacts in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to set a flag when tests fail, used to conditionally publish Verify artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages with .NET CLI\nDESCRIPTION: Commands to add required NuGet packages for Verify and Fixie testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for MSTest and Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Defining Person Objects in JSON\nDESCRIPTION: This JSON structure defines two person objects, each with given names and a family name. The structure uses a nested object approach to organize the data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/VerifyObjectSamples.Anon.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  person1: {\n    GivenNames: John,\n    FamilyName: Smith\n  },\n  person2: {\n    GivenNames: Marianne,\n    FamilyName: Aguirre\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig rules to ensure consistent handling of verified and received files in editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie Tests\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Fixie tests. It includes Verify.Fixie for integration and Verify for core functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Settings in JSON\nDESCRIPTION: This JSON configuration specifies settings for Verify tests, including which elements to include, scrub, or handle specially. It defines scrubbing for fields and properties, and specifies behavior for certain property types.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubMemberByName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Include\": \"Value\",\n  \"Field\": {\"Scrubbed\"},\n  \"Property\": {\"Scrubbed\"},\n  \"PropertyByName\": {\"Scrubbed\"},\n  \"GetOnlyProperty\": \"asd\",\n  \"PropertyThatThrows\": {\"Scrubbed\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Default TimeOnly Comparer\nDESCRIPTION: The default implementation used to compare TimeOnly values during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nTimeComparer\n```\n\n----------------------------------------\n\nTITLE: Type Name With Parent Extension Method\nDESCRIPTION: Extension method that handles nested type names by combining the parent and child type names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_22\n\nLANGUAGE: cs\nCODE:\n```\npublic static string NameWithParent(this Type type)\n{\n    if (type.IsNested)\n    {\n        return $\"{type.ReflectedType!.Name}.{type.Name}\";\n    }\n\n    return type.Name;\n}\n```\n\n----------------------------------------\n\nTITLE: URL Shortener API Response Format in JSON\nDESCRIPTION: Demonstrates the structure of a JSON response from a URL shortening service. Contains the original URL, shortened version 'foo', and an error object with code and message fields.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=Argon.JObject.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  short: {\n    original: http://www.foo.com/,\n    short: foo,\n    error: {\n      code: 0,\n      msg: No action taken\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Extension-Based File Converter in C#\nDESCRIPTION: Shows how to register a file converter based on file extension for converting TIFF files to PNG format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/converter.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\nVerifierSettings.RegisterFileConverter(\n    fromExtension: \"tif\",\n    conversion: (stream, settings) =>\n    {\n        using var image = Image.FromStream(stream);\n        var pages = image.GetFrameCount(FrameDimension.Page);\n\n        var targets = new List<Target>();\n        for (var index = 0; index < pages; index++)\n        {\n            image.SelectActiveFrame(FrameDimension.Page, index);\n\n            var page = new MemoryStream();\n            image.Save(page, ImageFormat.Png);\n            targets.Add(new(\"png\", page));\n        }\n\n        return new(\n            info: new\n            {\n                image.PixelFormat,\n                image.Size\n            },\n            targets);\n    });\n```\n\n----------------------------------------\n\nTITLE: VerifyCheckException JSON Error Message for Missing .gitIgnore Settings\nDESCRIPTION: A JSON-formatted error message from the Verify testing framework. The exception is thrown when the .gitIgnore file doesn't contain the necessary settings for Verify's received files handling. It includes the recommended patterns that should be added to .gitIgnore.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/InnerVerifyChecksTests/VerifyChecksTests.Invalid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: VerifyCheckException,\n  Message:\nExpected .gitIgnore to contain settings for Verify.\nPath: file:///{ProjectDirectory}InnerVerifyChecksTests/Invalid/.gitIgnore\nRecommended settings:\n\n# Verify\n*.received.*\n*.received/,\n  StackTrace: \n}\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files on GitHub Actions Failure (YAML)\nDESCRIPTION: YAML configuration for a GitHub Actions workflow step that uploads all 'received' snapshot files as build artifacts if tests fail. This step uses the official upload-artifact action and ensures that all matching files are preserved for debugging purposes on CI failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Upload Test Results\\n  if: failure()\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: verify-test-results\\n    path: |\\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for handling received files in AppVeyor build pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Exception Object Structure\nDESCRIPTION: A JSON object structure for representing an exception with two fields: Type which indicates the exception type, and Message which contains the exception details.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestMethodThatThrowsIgnoreStackTraceSettings.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Item with Auto Type Name Handling (JSON)\nDESCRIPTION: This JSON object defines an 'Item' property containing an array. The '$type' attribute specifies the type of the array items as 'SerializationTests.TypeNameHandlingAutoInArrayItem[]', indicating that type information should be automatically handled during serialization/deserialization, likely by a framework like Newtonsoft.Json. The '$values' array holds the actual items, starting with an empty object in this case. This structure is commonly used in tests to ensure correct type resolution and instantiation when dealing with complex types in collections.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TypeNameHandlingInArray_typeHandling=Arrays.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Item: {\n    $type: SerializationTests.TypeNameHandlingAutoInArrayItem[],\n    $values: [\n      {}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Directories in JSON for Verification Tests\nDESCRIPTION: This JSON configuration sets up two base directory paths for verification tests. Both 'baseDirectory' and 'altBaseDirectory' are set to the current directory, indicated by the {CurrentDirectory} placeholder.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubBaseDirectory.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseDirectory: {CurrentDirectory},\n  altBaseDirectory: {CurrentDirectory}\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Artifact Push on Failure\nDESCRIPTION: PowerShell script for uploading .received files as artifacts on AppVeyor build failures. AppVeyor configuration required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: ps\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Converter\nDESCRIPTION: Example of customizing combination result serialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSample_CustomSerializationConverter\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Value Enforcement\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where Verify() is called but not awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Stopped Recording Without Automatic Verification\nDESCRIPTION: Shows the verified output when Recording is stopped and not automatically included in the verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\nother data\n```\n\n----------------------------------------\n\nTITLE: Customizing File Extensions in Verify with Xunit\nDESCRIPTION: Shows how to override the default file extension for verification files in Xunit tests. The example demonstrates setting the extension to XML for proper handling of XML content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\npublic class ExtensionSample\n{\n    [Fact]\n    public Task AtMethod() =>\n        Verify(\n            target: \"\"\"\n                    <note>\n                      <to>Joe</to>\n                      <from>Kim</from>\n                      <heading>Reminder</heading>\n                    </note>\n                    \"\"\",\n            extension: \"xml\");\n\n    [Fact]\n    public Task AtMethodFluent() =>\n        Verify(\n            target: \"\"\"\n                    <note>\n                      <to>Joe</to>\n                      <from>Kim</from>\n                      <heading>Reminder</heading>\n                    </note>\n                    \"\"\",\n            extension: \"xml\");\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Counting Globally\nDESCRIPTION: Setting a global configuration to disable date counting for all verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nDisableDateCountingGlobal\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for cleaner code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: YAML configuration to set a flag variable when test step fails, enabling conditional publishing of Verify received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration for Verify Test Results\nDESCRIPTION: A GitHub Actions workflow step that uploads *.received.* files as artifacts when tests fail, making it easier to debug failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to the project for enhanced diff viewing capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Array\nDESCRIPTION: This snippet shows a basic JSON array containing a single integer value, 10. It demonstrates the fundamental structure of a JSON array using square brackets `[]` and a numeric literal. No external dependencies are required.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TestEnumerableWithExistingItemConverter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\\n  10\\n]\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Tool\nDESCRIPTION: Installs the `DiffEngineTray` .NET tool globally using the dotnet CLI. DiffEngineTray runs in the Windows system tray, monitors snapshot changes, and provides UI for accepting or rejecting them. This tool is optional but recommended for a better workflow.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages with dotnet CLI\nDESCRIPTION: The following commands add necessary NuGet packages to the MSTest project, providing essential testing functionality and support for the Verify library. Ensure that the project has access to the .NET CLI to execute these commands successfully.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Inferred Named Dates with Fluent API\nDESCRIPTION: Using the variable name to automatically infer the name for date replacement during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nInferredNamedDateFluent\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Configuration Object (JSON-like)\nDESCRIPTION: This snippet defines a simple object structure, likely used for configuration within the '/verifytests/verify' project's tests. It specifies a 'Name' property with the value 'Scrubbed'. Note: While resembling JSON, standard JSON requires keys (like 'Name') to be enclosed in double quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithWriteMemberNullScrubbed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Name: Scrubbed\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks in Expecto Tests\nDESCRIPTION: C# code example showing how to implement VerifyChecks.Run() in an Expecto test to validate that verification conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: XUnit test implementation for running verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified text files to ensure consistent line endings (LF) and UTF-8 encoding, which helps prevent false-positive snapshot mismatches across environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks Test Implementation\nDESCRIPTION: C# implementation of verification checks test case\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify.Xunit\nDESCRIPTION: Git configuration to set correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks in Expecto\nDESCRIPTION: C# code snippet showing how to implement VerifyChecks using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch cases where Verify calls are not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Overriding TestContext Property for Verify Integration in C#\nDESCRIPTION: This code snippet defines a partial class 'Derived' with an auto-generated TestContext property override. It integrates Verify with MSTest by managing the TestContext through VerifyMSTest.Verifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAttributeOnDerivedClassAndAbstractPropertyManuallyDefinedInBase.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Derived\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public sealed override global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified text files to ensure consistent line endings (LF) and UTF-8 encoding across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File (XML)\nDESCRIPTION: XML configuration snippet for a .NET project file (e.g., .csproj) to enable the Implicit Usings feature. This simplifies code by automatically including common namespace usings, which is assumed by the documentation examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with GUID and Scrubbed Value\nDESCRIPTION: This JSON object contains two key-value pairs. The first key is a GUID identifier, and the second is a 'scrubbed' value, possibly for data protection or anonymization purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringDictionary_ScrubDictionaryKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Guid_1: value,\n  scrubbed: value\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received files in text editors, with correct encoding, line endings, and formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages with .NET CLI\nDESCRIPTION: Commands to add the required NuGet packages for Verify and TUnit to the test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify.TUnit NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages to your test project for using Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Test Cases in JSON\nDESCRIPTION: JSON configuration that defines keys for test scenarios and expected exception results. The configuration includes 'beforeKeys' and 'exceptionKeys' arrays containing test values, and an 'exceptionResult' object that specifies the expected exception type and message.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.ExceptionCallbackResults.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  beforeKeys: [\n    10,\n    value2\n  ],\n  exceptionKeys: [\n    10,\n    value2\n  ],\n  exceptionResult: {\n    $type: Exception,\n    Type: Exception,\n    Message: Message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Azure DevOps\nDESCRIPTION: This YAML snippet sets a flag to publish Verify *.received.* files when the test step fails. It uses a failed condition to trigger the flag setting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Serializing Exception Details in JSON-like Format\nDESCRIPTION: This snippet demonstrates a structured representation of an exception, including its type, message, and stack trace. It's likely used for logging or error reporting in a system that can parse this format for analysis or display.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TargetInvocationException.DotNet10_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: the message,\n  StackTrace:\nat SerializationTests.MethodThatThrows()\nat InvokeStub_SerializationTests.MethodThatThrows(Object, Object, IntPtr*)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit Testing\nDESCRIPTION: Commands to add the required NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Referenced code snippet for a sample test that demonstrates how to use Verify with Xunit. The actual implementation is not provided in the content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Reference to SampleTestXunit snippet which is not fully included in the provided content\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object Structure\nDESCRIPTION: This code snippet outlines the structure of a JSON object with three numbered keys. Each key is left without an associated value, indicated by the trailing commas.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_BeforeValue.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  1: ,\n  2: ,\n  3: \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter-to-Test Case Mapping in JSON\nDESCRIPTION: This JSON object maps combinations of a string parameter, a numeric value, and a boolean flag to specific test case identifiers. It covers various scenarios for different parameter values, likely used in a test framework for comprehensive verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.MixedLengths.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"A     , 100, True : a100True,\n  A     , 100, False: a100False,\n  A     ,   2, True : a2True,\n  A     ,   2, False: a2False,\n  A     ,  30, True : a30True,\n  A     ,  30, False: a30False,\n  bcc   , 100, True : bcc100True,\n  bcc   , 100, False: bcc100False,\n  bcc   ,   2, True : bcc2True,\n  bcc   ,   2, False: bcc2False,\n  bcc   ,  30, True : bcc30True,\n  bcc   ,  30, False: bcc30False,\n  sssssC, 100, True : sssssc100True,\n  sssssC, 100, False: sssssc100False,\n  sssssC,   2, True : sssssc2True,\n  sssssC,   2, False: sssssc2False,\n  sssssC,  30, True : sssssc30True,\n  sssssC,  30, False: sssssc30False\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Recorded Items with Recording.Clear (C#)\nDESCRIPTION: Demonstrates using `Recording.Clear()` to remove all items currently held in the recording context. Subsequent `Recording.Add()` calls will start adding to an empty collection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingClear' snippet\nRecording.Start();\nRecording.Add(\"key1\", \"value1\"); // Added\n\nRecording.Clear(); // All recorded items are removed\n\nRecording.Add(\"key2\", \"value2\"); // Added after clear\n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Defining Field/Property Verification Rules (JSON-like)\nDESCRIPTION: This JSON-like configuration snippet specifies handling rules for object properties during verification testing. Properties like 'Field', 'Property', 'PropertyByName', and 'PropertyThatThrows' are marked as '{Scrubbed}', likely indicating their actual values should be replaced or ignored in the verification snapshot by a framework like VerifyTests. 'GetOnlyProperty' is assigned the specific value 'asd', and 'Include' is associated with 'Value'. This configuration dictates the expected state or handling for these members during a test run.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubMemberByPredicateFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Include: Value,\n  Field: {Scrubbed},\n  Property: {Scrubbed},\n  PropertyByName: {Scrubbed},\n  GetOnlyProperty: asd,\n  PropertyThatThrows: {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Parameters in MSTest\nDESCRIPTION: Shows how to ignore parameters while passing custom parameters for filename generation in MSTest Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task IgnoreParametersForVerifiedCustomParams(string toIgnore, string toUse) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(\n            x => x.toIgnore,\n            (\"customParameter\", toUse));\n```\n\n----------------------------------------\n\nTITLE: Test File Name Examples with IgnoreParametersForVerified\nDESCRIPTION: Example output file names showing how IgnoreParametersForVerified affects the naming convention. Demonstrates both received and verified test files for instance and fluent test cases.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ignore-parameters.include.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nNamerTests.IgnoreParametersForVerified_arg=One.received.txt\nNamerTests.IgnoreParametersForVerified_arg=Two.received.txt\nNamerTests.IgnoreParametersForVerified.verified.txt\n```\n\nLANGUAGE: txt\nCODE:\n```\nNamerTests.IgnoreParametersForVerifiedFluent_arg=One.received.txt\nNamerTests.IgnoreParametersForVerifiedFluent_arg=Two.received.txt\nNamerTests.IgnoreParametersForVerifiedFluent.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Personal Information Data Structure (JSON-like)\nDESCRIPTION: This snippet defines a data structure resembling JSON, containing personal information such as names (`GivenNames`, `FamilyName`), spouse, address (nested object with `Street` and `Country`), children (array), and a unique ID (`Id`). It appears to be used as sample or test data within the '/verifytests/verify' project context. Note that keys and some string values lack standard JSON quoting.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/CompareToAssert.SnapshotTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: UTC Date Format Example\nDESCRIPTION: Sample UTC date formatted as YYYY-MM-DDUtc\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateFormatterTests.DateTimeUtcToParameterString.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2000-10-01Utc\n```\n\n----------------------------------------\n\nTITLE: Generating TestContext Property for Multi-Generic Test Class in C#\nDESCRIPTION: Defines a TestContext property for a multi-generic test class TestClass3<T1, T2> within nested namespaces and classes. The property interacts with VerifyMSTest.Verifier for test context management.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NamespaceTests.HasAttributeOnClassWithGenericsInNestedNamespace.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace A.B\n{\npartial class C<T>\n{\npartial class D\n{\npartial class TestClass3<T1, T2>\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude all *.received.* files from source control, as these are generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify.TUnit Packages with .NET CLI\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with TUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This snippet shows how to add the Verify.DiffPlex NuGet package to enhance text comparison behavior in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent file formatting for verified and received files, including character encoding and line ending settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files from Git\nDESCRIPTION: This `.gitignore` entry ensures that files matching the pattern `*.received.*` are ignored by Git. These files represent the actual output received during a test run and should typically not be committed to source control. If using `UseSplitModeForUniqueDirectory`, the `*.received/` pattern should also be added.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration for proper handling of verified text files, ensuring consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool\nDESCRIPTION: Installs the DiffEngineTray tool globally using the .NET command-line interface (CLI). DiffEngineTray is a helper application that runs in the Windows system tray to monitor and manage snapshot verification changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in TUnit\nDESCRIPTION: Test class implementation for running Verify convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Reference in Project File - XML\nDESCRIPTION: This snippet demonstrates how to add the Verify.DiffPlex NuGet package to the project file using an XML <PackageReference> element. It enables in-line text comparison improvements in Verify's snapshot testing by referencing the corresponding package. The Version field is set to a wildcard (\\\"*\\\"), so it should be replaced with the desired version or left as-is for latest available. Dependencies: .NET SDK project file with PackageReference support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool via .NET CLI\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Key-Value Mapping in JSON\nDESCRIPTION: A data structure showing a pattern of paired keys (letter and number) mapping to values with a consistent naming convention. Each value follows the pattern of combining the letter (in original case) with the number.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.Two.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1: a1,\n  A, 2: a2,\n  A, 3: a3,\n  b, 1: b1,\n  b, 2: b2,\n  b, 3: b3,\n  C, 1: c1,\n  C, 2: c2,\n  C, 3: c3\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool globally for managing snapshots from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - Shell\nDESCRIPTION: Installs the Verify.DiffPlex NuGet package into the test project for enhanced diff functionality in string verification results. This is optional but recommended, and it requires the dotnet CLI to be available. After running this command, text differences during verification failures will be more clearly highlighted.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Object in JavaScript\nDESCRIPTION: A minimal JSON object definition with a single property named 'value' that contains 'instanceNamed'. This is a basic key-value pair structure in JavaScript object notation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.NamedGuidInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verify\nDESCRIPTION: Git attributes configuration for handling text file encodings and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Grouping Recordings by Identifier (C#)\nDESCRIPTION: Illustrates starting a recording session with a specific identifier using `Recording.Start(identifier)`. This allows grouping recorded data logically, often useful for separating recordings from different parts of a test or system. The identifier should be unique.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingIdentifier' snippet\n\n// Use a statically unique identifier (e.g., test name, GUID)\nvar identifier = \"MyUniqueTestContext\"; \n\nusing (Recording.Start(identifier))\n{\n    Recording.Add(\"dataKey\", \"dataValue\");\n}\n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Settings in YAML\nDESCRIPTION: This YAML configuration specifies ignored paths and custom rules for verify tests. It excludes certain directories from testing and sets up custom rules for specific file types.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/MyNamespace.TestFixtureSourceUsageWithNamespace(Value1,1).Test.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nignoreArtifacts:\n  - \"**/obj/**/*\"\n  - \"**/bin/**/*\"\n  - \"**/reports/**/*\"\n  - \"**/BenchmarkDotNet.Artifacts/**/*\"\n  - \"**/.vs/**/*\"\n  - \"**/*.received.*\"\n  - \"**/src/main/**/*\"\ncustomRules:\n  - name: \"*.cs\"\n    settings:\n      extensions: \"cs\"\n      includeBin: false\n      includeJson: false\n      includeXml: false\n  - name: \"*.java\"\n    settings:\n      extensions: \"java\"\n      includeBin: false\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Override for Verify MSTest Integration\nDESCRIPTION: Generated partial class implementation that overrides the TestContext property to integrate with Verify MSTest. Sets up the current test context with additional verification capabilities while maintaining base functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAttributeOnDerivedClassAndPropertyManuallyDefinedInBase.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Derived\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public sealed override global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => base.TestContext;\n    set\n    {\n      global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n      base.TestContext = value;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default and Non-Default Configurations (JSON-like)\nDESCRIPTION: This snippet defines two objects using JSON-like syntax: `withDefault` (empty, suggesting default values) and `withNonDefault` (specifying 'Name' as 'Value' and 'DateTimeKind' as 'Local'). This structure is likely used within the '/verifytests/verify' project to test different configuration scenarios. Note the use of unquoted keys and string values, which is not standard JSON.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithConverterIgnoreDefault.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  withDefault: {},\n  withNonDefault: {\n    Name: Value,\n    DateTimeKind: Local\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Inline Dates at Instance Level\nDESCRIPTION: Configuring an instance to scrub dates that appear inline within string values.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nScrubInlineDateTimesInstance\n```\n\n----------------------------------------\n\nTITLE: Representing a Serialized Exception Object\nDESCRIPTION: This snippet shows a serialized exception object structure, likely used in a testing or logging context (e.g., verifytests). It includes the exception type ('Exception'), message ('The Message'), a nested inner exception ('InnerException'), and the stack trace ('StackTrace'). This format captures detailed error information for analysis or verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsWithInner.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  InnerException: {\n    $type: Exception,\n    Type: Exception,\n    Message: Inner\n  },\n  StackTrace: at ThrowsTests.MethodThatThrowsWithInner()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JSON Object\nDESCRIPTION: This snippet shows a simple JSON object with one key ('Property') and one string value ('Value'). It exemplifies the basic syntax of JSON for representing data as key-value pairs.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TestConverterFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  Property: Value\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Key-Value Assignment\nDESCRIPTION: Defines a JSON object with a single key 'Value' set to 'Value2'. Simple key-value pair structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/Snippets/ComplexParametersSample.ComplexTestCaseSource_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value2\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DateTime Handling with Verify in C#\nDESCRIPTION: Demonstrates testing DateTime handling in the Verify framework. It creates a simple DateTime object and verifies its serialization behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.Run_square.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task DateTime()\n{\n    var dateTime = new DateTime(2000, 1, 1, 1, 1, 1, DateTimeKind.Utc);\n    return Verifier.Verify(dateTime);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add Data with Recording.TryAdd (C#)\nDESCRIPTION: Illustrates using `Recording.TryAdd()` to add information only if recording is currently active (`Recording.IsRecording` is true). This avoids exceptions if called when recording hasn't been started.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Conceptual representation of the 'RecordingTryAdd' snippet\n\n// If Recording.IsRecording is false, this does nothing\nRecording.TryAdd(\"key1\", \"value1\"); \n\nRecording.Start();\n\n// If Recording.IsRecording is true, this adds the item\nRecording.TryAdd(\"key2\", \"value2\"); \n\nawait Verify(...);\n```\n\n----------------------------------------\n\nTITLE: Capture .received Files on AppVeyor Failure\nDESCRIPTION: PowerShell script for capturing received files during failed AppVeyor builds. Configures on_failure steps to push artifacts, thereby facilitating diagnostics for build failures through snapshot comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for testing with Verify and XUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Testing\nDESCRIPTION: Adds appropriate entries to .gitignore to exclude received files from source control. Verify's testing approach requires only verified files to be committed, while received files are temporary outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adding the Verify.DiffPlex NuGet package reference to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Value Usage\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Basic Sample Test Using Verify with TUnit\nDESCRIPTION: A sample TUnit test that demonstrates the basic usage of Verify to snapshot test an object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property for Verify MSTest Integration in C#\nDESCRIPTION: This code snippet defines a partial class 'Base' with a generated TestContext property. It facilitates integration between Verify and MSTest by managing the current test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/InheritanceTests.HasAttributeOnBaseClass.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npartial class Base\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project - csproj/xml\nDESCRIPTION: This code sets the ImplicitUsings property to 'enable' in the .csproj or project file, ensuring common .NET namespaces are automatically available without explicit using statements. It is a prerequisite for code samples that use implicit usings; if this is not enabled, usages of functions like Verify() must be replaced with fully qualified Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Include the Verify.DiffPlex NuGet package in the project to enable enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling in .gitattributes\nDESCRIPTION: This `.gitattributes` configuration ensures consistent handling of text-based verified files (`*.verified.txt`, `*.verified.xml`, `*.verified.json`) in Git. It enforces Unix-style line endings (LF) and UTF-8 encoding, aligning with VerifyTests conventions for text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling line endings and encoding in verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Settings for Verified Text Files - Shell\nDESCRIPTION: Configures Git attributes for files with '.verified.txt', '.verified.xml', and '.verified.json' extensions to ensure text files use LF line endings and UTF-8 BOM encoding. This snippet should be placed in a .gitattributes file in the repository root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Verifying File Path in C#\nDESCRIPTION: Demonstrates how to verify a file path using the VerifyFile method. This snippet shows a unit test that verifies the content of a file named 'sample.txt'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyFilePath() =>\n    VerifyFile(\"sample.txt\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex for Better Diff Output\nDESCRIPTION: Code to initialize the VerifyDiffPlex extension, which improves the visualization of differences in test output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: An example NUnit test fixture demonstrating how to use Verify to test a method's output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Properties in JSON\nDESCRIPTION: Basic configuration object defining test properties for Verify. Sets Property to Value and AsyncDisposed to false for test execution settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.FuncOfTaskResultAsyncDisposable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value,\n  AsyncDisposed: false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in .NET Project - XML\nDESCRIPTION: This snippet adds the Verify.DiffPlex package to a .NET project by inserting a PackageReference in the project file (.csproj). Dependency on NuGet package manager is required, and the version can be specified or use '*' for the latest matching version. No specific parameters beyond package name and version are required. When present, the project cannot compile until the specified package is restored.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts in Azure DevOps\nDESCRIPTION: This YAML snippet defines a task to publish the staged .received files as build artifacts. Like the previous task, it only executes if the 'publishverify' flag is set to 'Yes', ensuring artifacts are only published when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring Global AutoVerify in Verify for C#\nDESCRIPTION: Shows how to globally configure AutoVerify with the Verify library, ensuring that all verifications across the project auto-accept received file changes. This is typically placed in test setup or static constructor and applies to all subsequent tests. Global settings may be overridden by local instance options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-options.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.AutoVerify();\n```\n\n----------------------------------------\n\nTITLE: Date/Time Format Length Specifications in JSON\nDESCRIPTION: Defines the maximum character lengths allowed for different date and time formatting components. Includes specifications for AM/PM indicators, month names, day names, date/time separators, and era indicators in both long and short formats.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.GetCultureDates.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AmPmLong\": 2,\n  \"AmPmShort\": 2,\n  \"MonthNameLong\": 9,\n  \"MonthNameShort\": 3,\n  \"AbbreviatedMonthNameLong\": 3,\n  \"AbbreviatedMonthNameShort\": 3,\n  \"DayNameLong\": 9,\n  \"DayNameShort\": 6,\n  \"AbbreviatedDayNameLong\": 3,\n  \"AbbreviatedDayNameShort\": 3,\n  \"DateSeparator\": 1,\n  \"TimeSeparator\": 1,\n  \"EraLong\": 4,\n  \"EraShort\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts in Azure DevOps Pipeline\nDESCRIPTION: This YAML snippet publishes the staged .received files as build artifacts. It only executes if the publishverify flag is set to 'Yes', ensuring artifacts are only published when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Creating a Verify Checks Test with Fixie\nDESCRIPTION: Implements a Fixie test class to run VerifyChecks, which confirms that all Verify conventions are properly followed in the project's assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date and Time Formats in JSON\nDESCRIPTION: This code snippet shows various date and time formats represented as JSON key-value pairs. It includes examples with different levels of precision and time zone offsets.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateFormatterTests.DateTimeOffsetCombinations.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jsonValues\": {\n    \": 2020-01-01 +0,\n    \"_hour\": \"2020-01-01 02:00 +0\",\n    \"_hour_minute\": \"2020-01-01 02:03 +0\",\n    \"_hour_minute_second\": \"2020-01-01 02:03:04 +0\",\n    \"_hour_minute_second_secondFraction\": \"2020-01-01 02:03:04.5 +0\",\n    \"_hour_minute_secondFraction\": \"2020-01-01 02:03:00.5 +0\",\n    \"_hour_second\": \"2020-01-01 02:00:04 +0\",\n    \"_hour_second_secondFraction\": \"2020-01-01 02:00:04.5 +0\",\n    \"_hour_secondFraction\": \"2020-01-01 02:00:00.5 +0\",\n    \"_minute\": \"2020-01-01 00:03 +0\",\n    \"_minute_second\": \"2020-01-01 00:03:04 +0\",\n    \"_minute_second_secondFraction\": \"2020-01-01 00:03:04.5 +0\",\n    \"_minute_secondFraction\": \"2020-01-01 00:03:00.5 +0\",\n    \"_offset\": \"2020-01-01 +7-08\",\n    \"_offset_hour\": \"2020-01-01 02:00 +7-08\",\n    \"_offset_hour_minute\": \"2020-01-01 02:03 +7-08\",\n    \"_offset_hour_minute_second\": \"2020-01-01 02:03:04 +7-08\",\n    \"_offset_hour_minute_second_secondFraction\": \"2020-01-01 02:03:04.5 +7-08\",\n    \"_offset_hour_minute_secondFraction\": \"2020-01-01 02:03:00.5 +7-08\",\n    \"_offset_hour_second\": \"2020-01-01 02:00:04 +7-08\",\n    \"_offset_hour_second_secondFraction\": \"2020-01-01 02:00:04.5 +7-08\",\n    \"_offset_hour_secondFraction\": \"2020-01-01 02:00:00.5 +7-08\",\n    \"_offset_minute\": \"2020-01-01 00:03 +7-08\",\n    \"_offset_minute_second\": \"2020-01-01 00:03:04 +7-08\",\n    \"_offset_minute_second_secondFraction\": \"2020-01-01 00:03:04.5 +7-08\",\n    \"_offset_minute_secondFraction\": \"2020-01-01 00:03:00.5 +7-08\",\n    \"_offset_second\": \"2020-01-01 00:00:04 +7-08\",\n    \"_offset_second_secondFraction\": \"2020-01-01 00:00:04.5 +7-08\",\n    \"_offset_secondFraction\": \"2020-01-01 00:00:00.5 +7-08\",\n    \"_second\": \"2020-01-01 00:00:04 +0\",\n    \"_second_secondFraction\": \"2020-01-01 00:00:04.5 +0\",\n    \"_secondFraction\": \"2020-01-01 00:00:00.5 +0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output for text comparisons in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received text files in editors, maintaining consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object\nDESCRIPTION: A minimal JSON object with no properties. Empty JSON objects can be used as placeholders, templates, or to represent entities with no attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NotSupportedExceptionProp.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper text file handling for verified files, setting line endings to LF and encoding to UTF-8.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object in JSON\nDESCRIPTION: This snippet defines an empty JSON object. It represents a data structure with no key-value pairs. It's often used as a default value, a starting point for building a JSON object dynamically, or to indicate the absence of data in a structured format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.IgnoreEmptyList.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: Editor configuration for consistent handling of verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining Machine Name Value\nDESCRIPTION: A text file containing a single machine name identifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/ApplyScrubbersTests.ScrubMachineNameValidAfter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTheMachineName\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Testing DateTime Equality Comparison in C#\nDESCRIPTION: This snippet demonstrates a unit test for comparing two DateTime objects for equality. It creates two DateTime instances with the same values and asserts that they are equal.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDateTimes_trailing.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void DateTime_Equal()\n{\n    var dt1 = new DateTime(2010, 4, 20, 9, 30, 00);\n    var dt2 = new DateTime(2010, 4, 20, 9, 30, 00);\n    Assert.That(dt1, Is.EqualTo(dt2));\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for maintaining consistent file formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: Git configuration for excluding *.received.* files from source control, which are generated during test execution but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Configuration Structure for Verification or Scrubbing Process\nDESCRIPTION: This JSON structure defines a configuration or response format with a 'short' object containing nested 'key' and 'Scrub' objects. The 'key' object includes a code and message, while the 'Scrub' object has a placeholder value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.ScrubJTokenByName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  short: {\n    key: {\n      code: 0,\n      msg: No action taken\n    },\n    Scrub: {Scrubbed}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Data Structure for Verification\nDESCRIPTION: This JSON object defines a structure with four top-level keys: `ToInclude`, `ToIncludeNullable`, `ToIncludeStruct`, and `ToIncludeStructNullable`. Each key holds a nested object containing a single `Property` with a corresponding `Value`. This structure likely serves as configuration data or represents an expected/actual state for verification tests in the `/verifytests/verify` project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.IgnoreType.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ToInclude: {\n    Property: Value\n  },\n  ToIncludeNullable: {\n    Property: Value\n  },\n  ToIncludeStruct: {\n    Property: Value\n  },\n  ToIncludeStructNullable: {\n    Property: Value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GUID Sanitization - Instance Level\nDESCRIPTION: Shows how to disable GUID sanitization for a specific test instance using VerifySettings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.DontScrubGuids();\nawait Verify(target, settings);\n```\n\n----------------------------------------\n\nTITLE: Implementing a CBOR Router in Elixir\nDESCRIPTION: A code snippet showing the number 10, which appears to be a page number or version number for a document about CBOR routing in Elixir.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.NullCounter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n10\n```\n\n----------------------------------------\n\nTITLE: Executing SerializationTests Method Call\nDESCRIPTION: Shows execution of the get_MyProperty() test method within SerializationTests test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.GetProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSerializationTests.get_MyProperty()\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified/Received Files - INI\nDESCRIPTION: An EditorConfig snippet targeting all received/verified files in json, txt, or xml format, enforcing UTF-8 BOM, LF newlines, disabling trailing newlines, and ignoring indentation. This ensures consistency when editing or viewing snapshot files. Intended for inclusion in an .editorconfig file at the project or repository root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore and Include Settings for Verify Tests in JSON\nDESCRIPTION: This configuration snippet defines which elements should be ignored or included in Verify tests. It specifies various categories like ToIgnore, ToIgnoreByType, ToIgnoreByInterface, and others for exclusion, as well as ToInclude categories for explicit inclusion. Some values are scrubbed for privacy or simplicity.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubType.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ToIgnore\": {\"Scrubbed\"},\n  \"ToIgnoreByType\": {\"Scrubbed\"},\n  \"ToIgnoreByInterface\": {\"Scrubbed\"},\n  \"ToIgnoreByBase\": {\"Scrubbed\"},\n  \"ToIgnoreByBaseGeneric\": {\"Scrubbed\"},\n  \"ToIgnoreNullable\": {\"Scrubbed\"},\n  \"ToIgnoreStruct\": {\"Scrubbed\"},\n  \"ToIgnoreStructNullable\": {\"Scrubbed\"},\n  \"ToInclude\": {\n    \"Property\": \"Value\"\n  },\n  \"ToIncludeNullable\": {\n    \"Property\": \"Value\"\n  },\n  \"ToIncludeStruct\": {\n    \"Property\": \"Value\"\n  },\n  \"ToIncludeStructNullable\": {\n    \"Property\": \"Value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance-Level Descending Enumerable Ordering in Verify Tests\nDESCRIPTION: This code demonstrates how to configure descending enumerable ordering for a specific test instance. It creates a VerifySettings object and uses OrderEnumerableByDescending to specify the ordering criteria.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/ordering.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task OrderEnumerableByDescending()\n{\n    var settings = new VerifySettings();\n    settings.OrderEnumerableByDescending<Target>(_ => _.Value);\n    return Verify(\n        new List<Target>\n        {\n            new(\"a\"),\n            new(\"c\"),\n            new(\"b\")\n        },\n        settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Paths for Verify Tests in JSON\nDESCRIPTION: This JSON configuration sets up multiple path properties for Verify tests. It uses the {SolutionDirectory} placeholder to define paths to a 'Foo' directory, including standard and alternative paths with their trimmed versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubSolutionDirectory.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"{SolutionDirectory}Foo\",\n  \"trimmed\": \"{SolutionDirectory}Foo\",\n  \"altPath1\": \"{SolutionDirectory}Foo\",\n  \"altPath1Trimmed\": \"{SolutionDirectory}Foo\",\n  \"altPath2\": \"{SolutionDirectory}Foo\",\n  \"altPath2Trimmed\": \"{SolutionDirectory}Foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Disk Usage in Linux/Unix\nDESCRIPTION: The 'df' command displays disk space usage for all mounted filesystems. The '-h' option makes the output human-readable, showing sizes in KB, MB, or GB as appropriate.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.Date.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: DateTime Placeholder File\nDESCRIPTION: This appears to be a placeholder or reference file labeled 'DateTime_1'. It contains no actual code, just a reference identifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineDateTimesStartingWithSymbol.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/DateTime_1\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Verified Files\nDESCRIPTION: This shell code configures .gitattributes to ensure consistent end-of-line and encoding for 'verified' files, accommodating UTF-8 with BOM and LF for newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Pattern to add to .gitignore file to exclude all generated *.received.* files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verified Files\nDESCRIPTION: GitIgnore configuration to exclude received files and include verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sequential Line Entries\nDESCRIPTION: A sequence of text lines labeled with Line prefix followed by letters, with one exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/Scrubbers/ScrubbersSample.LinesFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLineA\nLineC\nNoMoreLineE\nLineI\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: NuGet package references required for using Verify with MSTest, including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet showing how to add the Verify.DiffPlex NuGet package reference to enhance diff output with inline text differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Fixie\nDESCRIPTION: Example of how to run Verify's convention checks in a Fixie test. This ensures that all Verify conventions are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConventions\n{\n    public async Task EnsureConventions() =>\n        await VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Empty Result After Ignoring Custom Exceptions\nDESCRIPTION: This snippet shows the verified result after ignoring members that throw custom exceptions, which is an empty object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/members-throw.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify with XUnit testing in a .NET project, including the test SDK, Verify.XUnit, XUnit framework, and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in csproj\nDESCRIPTION: Shows the XML element `<ImplicitUsings>enable</ImplicitUsings>` to be added to a `.csproj` file. Enabling implicit usings simplifies code by automatically including common namespaces, as required by the subsequent examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Verified Output after Scrubbing (Verify .NET, Plain Text)\nDESCRIPTION: An example of verified output after applying scrubbers with the Verify .NET framework. Used for demonstrating the final, cleaned state of the output in snapshot-based verification workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nLine 1\nLine 3 (password scrubbed)\nTheMachineName\nTheUserName\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: An example test using Verify with Expecto to demonstrate the basic structure and usage of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests =\n    open Expecto\n    open Verify.Expecto\n\n    [<Tests>]\n    let someTest = test \"Test\" {\n        let target = \"Foo\"\n        Verifier.Verify(target)\n        |> Async.RunSynchronously\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Mapping Date Tuples to ISO String - JSON\nDESCRIPTION: This snippet defines a JSON object mapping keys structured as tuples—composed of year, month, and day (e.g., 2020, 2, 12)—to ISO 8601 date string values (e.g., 2020-02-12). The purpose is likely for testing, conversion, or lookup utilities that translate discrete date components into standard date formats. No external dependencies are required, inputs are tuple-formatted keys, and outputs are their string representations; limitations include loss of structure since JSON does not natively support tuple keys, which may affect retrieval.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.TUnit.Tests/CombinationTests.WithDontScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  2020, 2, 12: 2020-02-12,\n  2020, 2, 15: 2020-02-15,\n  2020, 3, 12: 2020-03-12,\n  2020, 3, 15: 2020-03-15,\n  2022, 2, 12: 2022-02-12,\n  2022, 2, 15: 2022-02-15,\n  2022, 3, 12: 2022-03-12,\n  2022, 3, 15: 2022-03-15\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Adds the Verify.DiffPlex package which enhances text comparison behavior by highlighting differences inline rather than showing full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Name Verification in JSON\nDESCRIPTION: JSON configuration object that sets the value property to verify instance names. Used to specify instance name verification settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeOffsetFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Date and Time Test Data in JSON\nDESCRIPTION: A JSON structure that maps different date and time properties to predefined test values. The structure includes DateTime, Date, and DateTimeOffset types with both nullable and non-nullable variants, as well as string representations.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ReUseDateTime.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  DateTime: DateTime_1,\n  DateTimeNullable: DateTime_1,\n  Date: Date_1,\n  DateNullable: Date_1,\n  DateTimeOffset: DateTimeOffset_1,\n  DateTimeOffsetNullable: DateTimeOffset_1,\n  DateTimeString: DateTimeOffset_2,\n  DateTimeOffsetString: DateTimeOffset_2,\n  DateString: Date_1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified files in source control, including line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code initializes Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining an Incomplete Property (Text)\nDESCRIPTION: This snippet shows an incomplete or potentially invalid configuration structure, defining a key named 'Property' followed by a single backslash, which is not a valid value in standard formats like JSON. This might be used in a test case to verify error handling or parsing of malformed input within the 'verifytests' project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Escaping.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\\n  Property: \\\\\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Hierarchical Structure with Children in JSON\nDESCRIPTION: This JSON snippet defines an object with a single key 'Children'. The value for 'Children' is an array containing two empty JSON objects. This represents a basic parent-child relationship often used in data representation or configuration files.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CircularTests.Simple.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Children: [\n    {},\n    {}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Pairs in Custom Text Format\nDESCRIPTION: This snippet defines a set of key-value pairs using a custom text format. Each line represents an entry where a composite key (composed of two parts separated by a comma and space) maps to a string value after a colon. The entire structure is enclosed in curly braces.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.TUnit.Tests/CombinationTests.Two.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  A, 1: a1,\n  A, 2: a2,\n  A, 3: a3,\n  b, 1: b1,\n  b, 2: b2,\n  b, 3: b3,\n  C, 1: c1,\n  C, 2: c2,\n  C, 3: c3\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Received Files on GitHub Actions Failure - YAML Workflow Step - yaml\nDESCRIPTION: Demonstrates a GitHub Actions workflow step that uploads all *.received.* files as an artifact when a test run fails. Include these lines in your workflow YAML to collect Verify snapshots for investigation. Utilizes actions/upload-artifact and is conditioned on workflow failure, ensuring only relevant artifacts are published for debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\\n  if: failure()\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: verify-test-results\\n    path: |\\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON-like Object\nDESCRIPTION: This snippet defines an object-like structure containing two key-value pairs. The key 'A' has a floating-point value of 0.0, and the key 'B' has a value represented in scientific notation (1E-26). While resembling JSON, note that keys are not quoted, which might require specific parsing depending on the context (e.g., JavaScript object literal vs. strict JSON).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.AlwaysIncludeType.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A: 0.0,\n  B: 1E-26\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Mapping Object in JavaScript\nDESCRIPTION: Defines a JavaScript object that associates formatted address keys to objects with 'target' and 'key' properties. Designed for scenarios where raw address entries need to be mapped to target formats and recorded identifiers, the structure requires no external dependencies and only vanilla JavaScript. Inputs are property names representing different addresses, and outputs are mappings that facilitate normalization, retrieval, or verification. The snippet assumes the consumer code will consume this object for further data processing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationTests.RecordingTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n   1, Smith St  : {\n    target: 1 Smith St,\n    key: recorded 1 Smith St\n  },\n   1, Wallace St: {\n    target: 1 Wallace St,\n    key: recorded 1 Wallace St\n  },\n  10, Smith St  : {\n    target: 10 Smith St,\n    key: recorded 10 Smith St\n  },\n  10, Wallace St: {\n    target: 10 Wallace St,\n    key: recorded 10 Wallace St\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet displays a fundamental key-value pair structure, often seen in configurations or data files like JSON. It defines 'Property' as the key and 'Value' as its associated value. Note that strictly valid JSON requires keys to be strings enclosed in double quotes (e.g., \\\"Property\\\").\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Tests.WithTargetsAndConverter#00.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with TUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in MSBuild Project File\nDESCRIPTION: This XML snippet shows how to enable the Implicit Usings feature in a .NET project file (`.csproj` or `.fsproj`). Setting `<ImplicitUsings>` to `enable` allows common namespaces to be globally available, simplifying code as shown in the examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Using Different Scrubber Levels in NUnit with Verify .NET (C#)\nDESCRIPTION: Shows how to define and use scrubbers at method, class, and global levels in NUnit when using Verify .NET. This pattern allows for layered and reusable scrubber configuration throughout a test suite.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class ScrubberLevelsSample\n{\n    static VerifySettings classSettings = new VerifySettings().ScrubLinesContaining(\"api-key\");\n\n    [Test]\n    public Task MethodLevelScrubbing()\n    {\n        var settings = new VerifySettings().ScrubLinesContaining(\"token\");\n        return Verifier.Verify(someResult, settings);\n    }\n\n    [Test]\n    public Task ClassLevelScrubbing()\n    {\n        return Verifier.Verify(someResult, classSettings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Text Files\nDESCRIPTION: Git attributes configuration for text files used in Verify testing. This ensures consistent line endings (LF) and UTF-8 encoding with BOM for all verified text files, preventing issues with cross-platform text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add required NuGet packages to the test project including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to enhance text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool via CLI\nDESCRIPTION: Command to install DiffEngineTray as a global tool for monitoring pending changes in snapshots and providing accept/reject mechanisms from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Data Structure\nDESCRIPTION: This snippet defines a data structure, potentially in JSON or YAML format. It includes a 'target' object with a 'foo: bar' key-value pair, and another top-level key 'theData' with the value 'theValue'. This structure is likely used for configuration settings or test data within the associated project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/JsonAppenderTests.Anon.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  target: {\n    foo: bar\n  },\n  theData: theValue\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages in C#\nDESCRIPTION: Required NuGet package references to add to your test project's csproj file to enable Verify with TUnit testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Received Files to Artifact Staging\nDESCRIPTION: Copies all *.received.* files to the build artifact staging directory when the publishverify flag is set. This step is necessary because Azure DevOps PublishBuildArtifacts doesn't support wildcards directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally, which monitors pending changes in snapshots from the Windows tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Configuration for Verify Test\nDESCRIPTION: This JSON snippet defines a configuration object with a single property 'value' set to 'instanceNamed'. It's likely used to specify a named instance or parameter for a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.NamedGuids_instanceNamed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Ordered Enumerable Result in Text\nDESCRIPTION: Shows the resulting verified text file after applying enumerable ordering.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[\n  {\n    Name: a\n  },\n  {\n    Name: b\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Expecto Sample Test Snippet\nDESCRIPTION: References an external code snippet named 'SampleTestExpecto'. This snippet likely contains a complete C# example of an Expecto test using the Verify framework, demonstrating basic usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestExpecto\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Fixie\nDESCRIPTION: Demonstrates how to run Verify checks in a Fixie test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTest\n{\n    public Task VerifyChecks() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Single Digit Value\nDESCRIPTION: Contains only the number 1 as content. No code functionality present.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.Int64.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control - shell\nDESCRIPTION: Recommends excluding all files matching '*.received.*' from source control to prevent accidental commits of temporary or intermediate verification artifacts. To implement, add the given line to your .gitignore file. If using 'UseSplitModeForUniqueDirectory', also exclude '*.received/'. This pattern works with standard git tooling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Git - .gitignore Syntax\nDESCRIPTION: The snippet provides a .gitignore entry to ensure that all files with the pattern '*.received.*' are excluded from source control, aligning with the convention to only check in verified outputs. Optionally, for certain directory modes, '*.received/' should also be ignored.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object\nDESCRIPTION: This snippet defines a valid but empty JSON object. It represents a data structure with no key-value pairs. This is commonly used as a default value, a placeholder, or in test scenarios requiring an empty object, particularly within the context of verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ExceptionMessageProp.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Use Type in Python\nDESCRIPTION: Function that checks if a token's use type name matches a provided name. It appears to be part of a language verification system, possibly for type checking or syntax validation in a compiler or interpreter.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/CustomTypeName.UseTypeNameFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalueUseTypeNameFluent\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Array Structure\nDESCRIPTION: Shows a JSON array containing a single object with Property and Value fields, including a boolean Disposed flag set to false.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.AsyncEnumerableDisposable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    Property: Value,\n    Disposed: false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Specifying .NET Framework 4.8 Target Identifier\nDESCRIPTION: This text snippet likely represents an identifier or Target Framework Moniker (TFM) indicating that the associated project or component targets or utilizes .NET Framework version 4.8. This is common in .NET project configurations or build scripts.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NamerTests.RuntimeAndVersion.Net4_8.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nNet4_8\n```\n\n----------------------------------------\n\nTITLE: Mapping Data Types to Numbers in JSON\nDESCRIPTION: JSON object that maps various data types (GUID, DateTime, DateTimeOffset, Date, Time) to numeric values. Each field is assigned the value 1234.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.BoxedKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Guid_1: 1234,\n  DateTime_1: 1234,\n  DateTimeOffset_1: 1234,\n  Date_1: 1234,\n  Time_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Pairs in Plain Text Configuration\nDESCRIPTION: A simple configuration snippet that defines two values: 'value1' set to 10 and 'value2' set to 11. The values are separated by a comma, following a common pattern for configuration files.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.DictionaryMultiple.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvalue1=10,value2=11\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JSON Object with Numbered Keys\nDESCRIPTION: A JSON object with three numbered keys (1, 2, and 3) that have empty or undefined values. This appears to be a template or placeholder structure that would need to be populated with actual values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_BeforeValueAfter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  1: ,\n  2: ,\n  3: \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling for Verified Snapshots - .gitattributes\nDESCRIPTION: These settings enforce LF line endings and UTF-8 encoding with BOM on text-based verified snapshot files. Adding this to your .gitattributes file standardizes text snapshot handling across platforms and editors, preventing spurious diffs and encoding issues. Each pattern applies to a specific verified file extension.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Defining Simple JSON Object with Numeric Value\nDESCRIPTION: Defines a JSON object containing a single property 'theKey' with numeric value 10. Demonstrates basic JSON key-value pair structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.Collections.Generic.KeyValuePair`2[System.String,System.Int32].verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  theKey: 10\n}\n```\n\n----------------------------------------\n\nTITLE: Test Verification Results JSON Structure\nDESCRIPTION: A complete JSON structure containing verification test results. It shows various test outcomes categorized as New, NotEqual, Delete, and Equal, including file paths and content comparisons between received and verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.SingleItem.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\nNew:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\nNotEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\nDelete:\n  - ExceptionParsingTests.Fake.received.txt\nEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n\nFileContent:\n\nNew:\n\nReceived: ExceptionParsingTests.Fake.received.txt\nthe content\n\nNotEqual:\n\nReceived: ExceptionParsingTests.Fake.received.txt\nreceivedText\nVerified: ExceptionParsingTests.Fake.verified.txt\nverifiedText\n\n,\n  result: {\n    New: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      }\n    ],\n    NotEqual: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      }\n    ],\n    Delete: [\n      {ProjectDirectory}ExceptionParsingTests.Fake.received.txt\n    ],\n    Equal: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying DateTimeOffset ToString Formatting in C#\nDESCRIPTION: This test method checks the string representation of a DateTimeOffset object. It ensures that the ToString() method produces the expected format, including the correct date, time, and offset components.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDateTimeOffsets_trailing.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void ToString_1b()\n{\n    var dto = new DateTimeOffset(2009, 6, 15, 13, 45, 30, 90, TimeSpan.FromHours(-7));\n    var text = dto.ToString(\"yyyy-MM-dd'T'HH:mm:ss.FFFFFFF00K\");\n    Assert.That(text, Is.EqualTo(\"2009-06-15T13:45:30.0900000-07:00\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration Map in JSON\nDESCRIPTION: Maps combinations of three parameters - a letter (A/b/C), a number (1-3), and a boolean flag (True/False) to specific test case identifiers. Each combination points to a unique test case value following the pattern of combining the input parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/CombinationTests.Three.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : b1True,\n  b, 1, False: b1False,\n  b, 2, True : b2True,\n  b, 2, False: b2False,\n  b, 3, True : b3True,\n  b, 3, False: b3False,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Files\nDESCRIPTION: Git configuration patterns for excluding received files and managing verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set the correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet tool - Command Line\nDESCRIPTION: This command installs the DiffEngineTray tool globally using the dotnet CLI. DiffEngineTray helps monitor and manage pending snapshot changes during verification. It is recommended for interactive reviews and is optional but improves developer workflow for snapshot approval.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Demonstrates how to run Verify checks using Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Ignore Spawned Processes\nDESCRIPTION: ReSharper settings to disable orphaned process detection, which is necessary when using Verify with diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced difference comparison in test output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received test files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Complex Parameter Handling with XUnit V3\nDESCRIPTION: Demonstrates handling of complex parameter types including custom naming and initialization settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ComplexParametersSample\n{\n    [ModuleInitializer]\n    public static void Initialize()\n    {\n        VerifierSettings.NameForParameter<ComplexData>(_ => _.Value);\n        VerifierSettings.NameForParameter<ComplexStructData>(_ => _.Value);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberData(ComplexData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberDataFluent(ComplexData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberNullableData(ComplexData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetData))]\n    public Task ComplexMemberNullableDataFluent(ComplexData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    public static IEnumerable<object[]> GetData()\n    {\n        yield return\n        [\n            new ComplexData(\"Value1\")\n        ];\n        yield return\n        [\n            new ComplexData(\"Value2\")\n        ];\n    }\n\n    public record ComplexData(string Value);\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberStructData(ComplexStructData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberStructDataFluent(ComplexStructData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberNullableStructData(ComplexStructData arg)\n    {\n        var settings = new VerifySettings();\n        settings.UseParameters(arg);\n        return Verify(arg, settings);\n    }\n\n    [Theory]\n    [MemberData(nameof(GetStructData))]\n    public Task ComplexMemberNullableStructDataFluent(ComplexStructData arg) =>\n        Verify(arg)\n            .UseParameters(arg);\n\n    public static IEnumerable<object[]> GetStructData()\n    {\n        yield return [new ComplexStructData(\"Value1\")];\n        yield return [new ComplexStructData(\"Value2\")];\n    }\n\n    public record ComplexStructData(string Value);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex module for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Expecto and Verify NuGet Packages (Bash)\nDESCRIPTION: Executes `dotnet add package` commands to install the `YoloDev.Expecto.TestSdk`, `Expecto`, and `Verify.Expecto` NuGet packages into the current .NET test project. These packages are necessary for using the Expecto testing framework with VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Setting Text Target Value\nDESCRIPTION: A simple text string that appears to be used as a target value or identifier in a verification test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.Tests/Tests.withTargets#01.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTextTarget\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify testing with Expecto\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Testing DateTimeOffset Parsing from String in C#\nDESCRIPTION: This test method verifies the parsing of a DateTimeOffset from a string representation. It checks if the parsed value matches the expected date, time, and offset components.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimeOffsets_trailing.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Fact]\npublic void DateTimeOffset_Parse()\n{\n    var dateTimeOffset = DateTimeOffset.Parse(\"2015-12-31T23:59:59.9999999+01:00\");\n    Assert.Equal(2015, dateTimeOffset.Year);\n    Assert.Equal(12, dateTimeOffset.Month);\n    Assert.Equal(31, dateTimeOffset.Day);\n    Assert.Equal(23, dateTimeOffset.Hour);\n    Assert.Equal(59, dateTimeOffset.Minute);\n    Assert.Equal(59, dateTimeOffset.Second);\n    Assert.Equal(9999999, dateTimeOffset.Ticks % TimeSpan.TicksPerSecond);\n    Assert.Equal(TimeSpan.FromHours(1), dateTimeOffset.Offset);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified text files across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Mappings in JSON\nDESCRIPTION: This JSON object maps specific dates to DateTime variables. Each key is a tuple of year, month, and day, while the value is a corresponding DateTime variable name. This structure can be used for date-based lookups or comparisons in a program.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.WithScrubbed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  2020, 2, 12: DateTime_1,\n  2020, 2, 15: DateTime_2,\n  2020, 3, 12: DateTime_3,\n  2020, 3, 15: DateTime_4,\n  2022, 2, 12: DateTime_5,\n  2022, 2, 15: DateTime_6,\n  2022, 3, 12: DateTime_7,\n  2022, 3, 15: DateTime_8\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add necessary NuGet packages for setting up Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Source control configuration to exclude received files from version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation in Expecto\nDESCRIPTION: Example implementation of verification checks using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Data Structure in JSON\nDESCRIPTION: A JSON object representing a person with given names, family name, spouse, address, and date of birth fields. The spouse and address fields are explicitly set to null, and the date of birth is formatted with timezone information.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/VerifyObjectSamples.ScopedSerializer.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: null,\n  Address: null,\n  Dob: 2000-10-01 +0\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Exception Details in JSON Format for Verify Tests\nDESCRIPTION: This JSON structure defines the format used to serialize exception information in Verify tests. It includes the exception type, message, and stack trace from a failed test method named 'ValueTaskMethodThatThrows' in the 'ThrowsTests' class.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestThrowsValueTask.Net.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.ValueTaskMethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for Verification Tests\nDESCRIPTION: A JSON object template with a message field containing directory information and an empty result object. This appears to be used for verification testing or as a result structure for test output.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.Empty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\n,\n  result: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: This EditorConfig entry treats 'return value of pure method is not used' as an error in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Initializing Object with Different Guid Property Types in C#\nDESCRIPTION: The snippet demonstrates creating an anonymous object with three Guid properties in different formats: a nullable Guid (GuidNullable), a string representation of a Guid (GuidString), and a regular Guid (OtherGuid). The values appear to be using predefined constants (Guid_Empty and Guid_1).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.RespectEmptyGuid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  GuidNullable: Guid_Empty,\n  GuidString: Guid_Empty,\n  OtherGuid: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Object with Mixed Case Properties\nDESCRIPTION: A JSON object with three key-value pairs where both keys and values use inconsistent casing. The properties A and C are uppercase while b is lowercase, with corresponding lowercase values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.One.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A: a,\n  b: b,\n  C: c\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing XAML Test Output Files in JSON Format\nDESCRIPTION: JSON structure showing a test verification result that compares two XAML files - a received output and a verified reference file. The NotEqual array indicates the files did not match.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.MSTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  NotEqual: [\n    {\n      Received: {CurrentDirectory}XAMLCombinerTests.TestOutput.received.xaml,\n      Verified: {CurrentDirectory}XAMLCombinerTests.TestOutput.verified.xaml\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Copy Received Files Task\nDESCRIPTION: YAML task to copy all .received files to the artifact staging directory when tests have failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging\nDESCRIPTION: Configures a CopyFiles task that collects all .received files and places them in the artifact staging directory. This task only runs when the publishverify flag is set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify with TUnit in your test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code demonstrates how to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex Initialization\nDESCRIPTION: Code to initialize the DiffPlex integration for improved text comparison output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration\nDESCRIPTION: C# code showing how to enable the `Verify.DiffPlex` integration using a module initializer (`[ModuleInitializer]`). Calling `VerifyDiffPlex.Initialize()` configures Verify to use DiffPlex for displaying text differences during test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown structure showing the navigation hierarchy and build server options for Linux NUnit testing setup\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Linux](Linux.md) > [Other](Linux_Other.md) > [Prefer GUI](Linux_Other_Gui.md) > [NUnit](Linux_Other_Gui_NUnit.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Linux_Other_Gui_NUnit_AppVeyor.md)\n * [GitHub Actions](Linux_Other_Gui_NUnit_GitHubActions.md)\n * [Azure DevOps](Linux_Other_Gui_NUnit_AzureDevOps.md)\n * [No build server](Linux_Other_Gui_NUnit_None.md)\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Module initializer to configure Verify.DiffPlex for improved diff visualization in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the Verify.DiffPlex integration for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for better text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which improves text comparison output by showing inline differences instead of full file contents on verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex PackageReference in XML\nDESCRIPTION: This XML snippet adds the Verify.DiffPlex package as a dependency for the project. It is used to enhance text comparison for Verify tests by highlighting differences inline. No specific version is needed as it's set to '*'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Case-Insensitive Recording (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file demonstrating case-insensitive key grouping from the `RecordingIgnoreCase` snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.Case.verified.txt\n{\n  Recorded:\n  {\n    MixedCaseKey: [\n      value1,\n      value2\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps for Verify Artifacts\nDESCRIPTION: YAML configuration for Azure DevOps to publish *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Capturing Verification Failures\nDESCRIPTION: Azure DevOps pipeline YAML configuration that sets a flag when tests fail, allowing the collection and publishing of *.received.* files as build artifacts for analysis.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Key-Value Object Mapping - JavaScript\nDESCRIPTION: Demonstrates the creation of a JavaScript object literal with explicit keys formatted as tuples and mapped to corresponding string values. No dependencies are required beyond a JavaScript runtime. Keys consist of letter-number combinations (e.g., A, 1) and indicate categories and indices; values are formatted to mirror their keys (e.g., a1). Inputs are static, and the output is a JavaScript object for use in data lookups or test mappings. Limitations: compound keys using commas are not valid JavaScript identifiers unless wrapped in quotes, so actual usage may require adjustment.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/CombinationTests.Two.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  A, 1: a1,\n  A, 2: a2,\n  A, 3: a3,\n  b, 1: b1,\n  b, 2: b2,\n  b, 3: b3,\n  C, 1: c1,\n  C, 2: c2,\n  C, 3: c3\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add required NuGet packages for using Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Adding Context Information to Directory Verification\nDESCRIPTION: Demonstrates how to include additional context information when verifying a directory by using the optional 'info' parameter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-directory.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task VerifyDirectoryWithInfo() =>\n    VerifyDirectory(\n        directoryToVerify,\n        info: \"the info\");\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for maintaining consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Verify Text Files - EditorConfig\nDESCRIPTION: Provides EditorConfig settings to standardize verification text file encoding, line-endings, and formatting for files with 'received' or 'verified' in the name and specific extensions. Ensures text files match test requirements and avoids formatting inconsistencies across editors. Place inside .editorconfig in the repository.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: This `.editorconfig` section provides suggested settings for editors that support EditorConfig. It helps maintain consistency with Verify's text file conventions (UTF-8 with BOM, LF line endings, no trailing newline) when manually editing `*.received.*` or `*.verified.*` files for specific text extensions (json, txt, xml).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in TUnit\nDESCRIPTION: A TUnit test method to run Verify's convention checks, ensuring all settings are correctly applied.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: Example test class showing how to implement convention checks using VerifyChecks.Run() with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test in NUnit\nDESCRIPTION: Test fixture demonstrating how to run Verify convention checks using NUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Text Files - .editorconfig\nDESCRIPTION: This EditorConfig snippet applies Verify-recommended settings for text-based snapshot files, targeting both received and verified files with typical text-based extensions. It enforces UTF-8 BOM charset, LF newlines, disables final newline insertion, and avoids indentation or tab width settings, preserving the exact format required for verification. Place this in your .editorconfig to standardize file formatting in compatible editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Checking Value Existence in Array using JavaScript\nDESCRIPTION: A function that verifies if a specified value exists in a given array. This utility returns true if the value is found and false otherwise, providing a simple way to check for membership in a collection.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.DerivePaths.Tests/Relative/Tests.ProjectRelativeDirectory.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction verify(value, list) {\n  return list.indexOf(value) !== -1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Encoding for Snapshot Files in C#\nDESCRIPTION: This snippet shows how to set a custom encoding for snapshot files using VerifierSettings.UseEncoding(). It creates a UnicodeEncoding instance with specific parameters and applies it to the VerifierSettings. This is useful when you need to use an encoding other than the default UTF-8.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/encoding.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init()\n    {\n        var encoding = new UnicodeEncoding(\n            bigEndian: false,\n            byteOrderMark: true,\n            throwOnInvalidBytes: true);\n        VerifierSettings.UseEncoding(encoding);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: This snippet shows a sample Expecto test that uses Verify to compare the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified/Received Snapshots (.editorconfig)\nDESCRIPTION: Provides an EditorConfig block ensuring editors respect UTF-8 BOM encoding, LF line endings, and omit trailing newlines/whitespace for text-based snapshot files created by Verify. These settings maintain consistency for files like .json, .txt, and .xml when opened and modified by compliant editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Testing DateTime 'after' Comparison in C#\nDESCRIPTION: This code snippet defines a series of unit tests to verify the behavior of DateTime comparisons using the 'after' method. It includes tests for different dates, times, and millisecond precision.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineDateTimesEndingLetters.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[TestMethod]\npublic void TestMethod1()\n{\n    Assert.IsTrue(new DateTime(2016, 1, 1, 13, 0, 0).after(new DateTime(2016, 1, 1, 12, 0, 0)));\n    Assert.IsFalse(new DateTime(2016, 1, 1, 13, 0, 0).after(new DateTime(2016, 1, 1, 13, 0, 0)));\n    Assert.IsFalse(new DateTime(2016, 1, 1, 13, 0, 0).after(new DateTime(2016, 1, 1, 14, 0, 0)));\n}\n\n[TestMethod]\npublic void TestMethod2()\n{\n    Assert.IsTrue(new DateTime(2016, 1, 2, 13, 0, 0).after(new DateTime(2016, 1, 1, 13, 0, 0)));\n    Assert.IsFalse(new DateTime(2016, 1, 1, 13, 0, 0).after(new DateTime(2016, 1, 1, 13, 0, 0)));\n    Assert.IsFalse(new DateTime(2016, 1, 1, 13, 0, 0).after(new DateTime(2016, 1, 2, 13, 0, 0)));\n}\n\n[TestMethod]\npublic void TestMethod3()\n{\n    Assert.IsTrue(new DateTime(2016, 1, 1, 13, 0, 0, 001).after(new DateTime(2016, 1, 1, 13, 0, 0, 000)));\n    Assert.IsFalse(new DateTime(2016, 1, 1, 13, 0, 0, 000).after(new DateTime(2016, 1, 1, 13, 0, 0, 000)));\n    Assert.IsFalse(new DateTime(2016, 1, 1, 13, 0, 0, 000).after(new DateTime(2016, 1, 1, 13, 0, 0, 001)));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex in C#\nDESCRIPTION: Code to initialize the Verify.DiffPlex functionality for enhanced difference highlighting in test output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Text Comparison\nDESCRIPTION: Initialization code for the Verify.DiffPlex library, which enhances text comparison by highlighting differences inline rather than showing entire contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex\nDESCRIPTION: C# code to initialize and configure Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Source Control with GitIgnore\nDESCRIPTION: This example shows how to exclude certain files from source control using .gitignore. Specifically, it instructs to omit files with the 'received' suffix and include 'verified' files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: bash\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail, allowing easier debugging of Verify test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Name for Verify Test in JSON\nDESCRIPTION: This JSON snippet defines a configuration object with a single property 'value' set to 'instanceNamed'. This likely specifies the name or identifier for a particular test instance in a verification framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code snippet showing how to initialize the VerifyDiffPlex functionality using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Packages for Expecto Testing\nDESCRIPTION: These commands add necessary packages for integrating and using Expecto testing framework with Verify in a .NET project, which helps to perform automated testing and verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters in NUnit Verify Tests (Instance)\nDESCRIPTION: Demonstrates how to ignore specific parameters when generating the verified filename in NUnit Verify tests using the instance approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task IgnoreParameters(string arg1, string arg2)\n{\n    return Verify(\"value\")\n        .IgnoreParametersForVerified(\"arg2\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query Fragment with Value Field\nDESCRIPTION: A GraphQL fragment that selects a field named 'value' and maps it to 'instanceNamed'. This fragment can be used in GraphQL queries to specify which fields should be returned from an object type.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.NamedGuidFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Value Placeholder Text\nDESCRIPTION: A simple text value that appears to be a placeholder or constant. This might be used in tests or as initial configuration data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.List.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: JSON Test Verification Output Structure\nDESCRIPTION: Demonstrates the structure of a verification test output containing a property-value pair and AsyncDisposed status flag. The format is an array containing an object with basic test result details.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.AsyncEnumerableAsyncDisposable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    Property: Value,\n    AsyncDisposed: false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running ReadStringBuilderWithFixedLinesBenchmarks in .NET\nDESCRIPTION: This command uses the dotnet CLI to run specific benchmarks in Release configuration. It filters the benchmarks to only include those matching the pattern *ReadStringBuilderWithFixedLinesBenchmarks*.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Benchmarks/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run -c Release --filter *ReadStringBuilderWithFixedLinesBenchmarks*\n```\n\n----------------------------------------\n\nTITLE: Configuring Solution to Ignore Spawned Processes in Resharper\nDESCRIPTION: This XML snippet is added to the solution's DotSettings file to configure Resharper to not prompt for terminating orphaned processes after test execution. This is important for setups requiring certain test-spawned processes to continue running. The snippet should be placed within '[Solution].sln.DotSettings' and does not require additional dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/rider-resharper-orphaned-process.include.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<s:String x:Key=\\\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\\\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: URL Shortener API Response Structure in JSON\nDESCRIPTION: Demonstrates the JSON response structure from a URL shortening service API. Contains error information (code and message), the original URL, and the shortened URL identifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=Argon.Linq.JObject.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  short: {\n    error: {\n      code: 0,\n      msg: No action taken\n    },\n    original: http://www.foo.com/,\n    short: foo\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Expression Patterns in Swift\nDESCRIPTION: This snippet demonstrates how to create regular expression patterns in Swift, showing different initialization options including standard syntax and extended syntax with verbose mode that allows comments and whitespace to be ignored.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.Run_dash.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet pattern1 = try! Regex(\"a b c\")\nlet pattern2 = try! Regex(\"a b c\", as: Regex<AnyRegexOutput>.self)\n\n// Extended syntax - allows whitespace and comments\nlet pattern3 = try! Regex(#\"\n    a  # match letter a\n    b  # match letter b\n    c  # match letter c\n\"#, [.extraNoPatternSpaces])\n```\n\n----------------------------------------\n\nTITLE: Defining Address Mappings in JSON\nDESCRIPTION: This JSON object defines key-value pairs where each key represents a simplified address (number, street name) and the corresponding value is an array containing the full address string. This structure could be used for data lookup, verification, or normalization tasks related to addresses.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationTests.EnumerableTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   1, Smith St  : [\n    1 Smith St\n  ],\n   1, Wallace St: [\n    1 Wallace St\n  ],\n  10, Smith St  : [\n    10 Smith St\n  ],\n  10, Wallace St: [\n    10 Wallace St\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DateTime Addition with TimeSpan in C#\nDESCRIPTION: This test method verifies the addition of a TimeSpan to a DateTime object. It creates a DateTime, adds 2 hours using a TimeSpan, and asserts that the resulting DateTime is correct.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDateTimes_trailing.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void DateTime_Add()\n{\n    var dt1 = new DateTime(2010, 4, 20, 9, 30, 00);\n    var dt2 = dt1.Add(new TimeSpan(2, 0, 0));\n    Assert.That(dt2, Is.EqualTo(new DateTime(2010, 4, 20, 11, 30, 0)));\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: GitAttributes configuration for verified text files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Set ImplicitUsings to enable in the project file to use simplified usings in test files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML snippet showing how to add the Verify.DiffPlex package reference to a project. This package changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: JSON Personal Data Structure\nDESCRIPTION: JSON structure containing personal information including given names, family name, spouse details, address with nested street and country fields, an array of children names, and a unique identifier. The structure demonstrates both object nesting and array usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/Snippets/Sample.Test.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test\nDESCRIPTION: Example implementation of a basic verification test using XUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Tests in Azure DevOps YAML Pipeline\nDESCRIPTION: This YAML snippet adds a build step to set a flag if the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Test with Verify.Expecto\nDESCRIPTION: Sample F# test implementation using Verify.Expecto to verify test results. Demonstrates how to structure a basic verification test with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Data Object in JSON-like Format\nDESCRIPTION: This snippet defines an object with two properties: 'target', assigned the value null, and 'theData', assigned the placeholder 'theValue'. This structure is commonly used for passing data or configuration settings. Note that the keys ('target', 'theData') are not enclosed in double quotes, which deviates from strict JSON standards but is valid in contexts like JavaScript object literals.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/JsonAppenderTests.File#00.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  target: null,\n  theData: theValue\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code usage\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for MSTest testing framework and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Key-Value Object (JSON-like)\nDESCRIPTION: This code snippet defines a simple object structure containing a single key-value pair. The key is `Value`, and the associated value is the string `Value2`. While resembling JSON, note that standard JSON requires keys to be enclosed in double quotes (e.g., `\"Value\"`).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableDataFluent_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value2\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: This example demonstrates how to inherit from VerifyBase to simplify test class setup for using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Guid Properties for Verify Testing in C#\nDESCRIPTION: This code snippet defines an anonymous object with three Guid-related properties: a non-nullable Guid, a nullable Guid, and a Guid represented as a string. This structure is likely used for serialization or comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubGuid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  Guid: Guid_1,\n  GuidNullable: Guid_2,\n  GuidString: Guid_3\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify.Expecto\nDESCRIPTION: Commands to add necessary NuGet packages for using Verify.Expecto in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Names in JSON\nDESCRIPTION: A configuration object that defines an instance naming value property. This appears to be used for verification testing purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeOffsetInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Upload Received Files on Test Failure\nDESCRIPTION: PowerShell script for an AppVeyor build configuration that automatically uploads .received files as artifacts when tests fail. This allows for easier debugging of verification failures in the CI environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: Demonstrates how to run Verify checks using Xunit. This snippet shows a test method that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting to enable implicit usings in the project file, which allows using Verify() method directly without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Mapping Path Separators Using Object Literal Syntax\nDESCRIPTION: This snippet presents an object literal mapping the forward slash ('/') and backslash ('\\\\') characters to themselves. While resembling JSON, the keys and values are unquoted, making it invalid standard JSON but potentially valid in other contexts like JavaScript object literals or specific configuration file formats. It likely serves configuration purposes, potentially related to path normalization.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.TUnit.Tests/CombinationTests.KeysWithInvalidPathChars.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  /: /,\n  \\: \\\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Verify.DiffPlex\nDESCRIPTION: Set up Verify.DiffPlex by creating a module initializer that initializes its functionality, ensuring that text differences are highlighted inline during test failures. This setup requires the installation of the package first.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: These YAML snippets configure Azure DevOps to publish .received files as artifacts when tests fail. It includes steps to set a flag, copy files, and publish artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test Using Verify\nDESCRIPTION: Complete example of a basic test class using Verify with XUnit v3. The test method gets a person object and verifies it against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages via CLI\nDESCRIPTION: This CLI command installs necessary NuGet packages for running NUnit tests with the Verify library. It ensures that the test project is set up correctly with dependencies for testing and verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Package\nDESCRIPTION: Includes the Verify.DiffPlex NuGet package, which enhances text comparison by highlighting differences inline during NUnit tests. This requires modifying the project file to include the package reference.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\"\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to the project for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Globally (C#)\nDESCRIPTION: Initializes the Verify.DiffPlex functionality for the test assembly using a `ModuleInitializer`. This ensures that the enhanced text diffing behavior is applied to all Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex for Verify Testing in C#\nDESCRIPTION: Configuration code to initialize VerifyDiffPlex for enhanced text difference visualization in test results. This initialization should be done using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to copy Verify's received files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude all *.received.* files from source control, as these are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Mappings for Test Data\nDESCRIPTION: This snippet presents a data structure mapping tuples consisting of a character, an integer, and a boolean value to corresponding string identifiers (e.g., 'a1True'). This structure likely serves as input data, expected output, or configuration parameters for verification tests within the associated project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.TUnit.Tests/CombinationTests.Three.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : b1True,\n  b, 1, False: b1False,\n  b, 2, True : b2True,\n  b, 2, False: b2False,\n  b, 3, True : b3True,\n  b, 3, False: b3False,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.Expecto NuGet Packages in F# Project\nDESCRIPTION: Specifies the `PackageReference` entries required in an F# project (`.fsproj`) file to use the Expecto testing framework along with Verify. It includes packages for Expecto's Test SDK, Expecto itself, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which provides enhanced text difference comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install Verify.Terminal as a global .NET tool. This tool provides command-line functionality for managing snapshot files, which can be useful for bulk operations on verify files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are generated during test failures and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received test files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add the necessary NuGet packages for MSTest and Verify to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: This snippet demonstrates how to create a test method that runs the VerifyChecks to ensure all conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in an XunitV3 Test (C#)\nDESCRIPTION: This C# code defines an Xunit v3 test class `VerifyChecksTests` with a single test method `Run`. This test executes `VerifyChecks.Run()`, which performs checks to ensure that project conventions (like `.gitignore` and `.gitattributes` settings) are correctly configured for use with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Converter Info File in JSON\nDESCRIPTION: Shows the structure of the info file generated by a converter, containing metadata of the target serialized as JSON.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/converter.source.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Width\": 1920,\n  \"Height\": 1080,\n  \"HorizontalResolution\": 96.0,\n  \"VerticalResolution\": 96.0,\n  \"PixelFormat\": \"Format24bppRgb\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Profile Path Pattern\nDESCRIPTION: Demonstrates a path resolution pattern that references a user profile directory followed by a subdirectory. The {UserProfile} placeholder represents the user's profile directory location.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubUserProfile.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{UserProfile}/SomePath\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Files\nDESCRIPTION: Git configuration to exclude received files and set encoding for verified files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Test Results Detailed Structure\nDESCRIPTION: Detailed JSON result structure showing file paths and relationships for all test states. Includes full project directory paths for each file comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.MultipleItem.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  result: {\n    New: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      },\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.bin,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.bin\n      }\n    ],\n    NotEqual: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      },\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.bin,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.bin\n      }\n    ],\n    Delete: [\n      {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n      {ProjectDirectory}ExceptionParsingTests.Fake.received.bin\n    ],\n    Equal: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      },\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.bin,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.bin\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Time Value in JSON\nDESCRIPTION: This snippet defines a JSON object with a single key-value pair. The key 'Time_1' is associated with a numeric value 1234, which could represent a timestamp or other time-related data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringTimeKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Time_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Test Verification Result Structure in JSON\nDESCRIPTION: Demonstrates the output format for test verification results, showing a message section with directory information and an Equal array containing file comparison paths. The result section provides structured data about files that matched between received and verified states.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.SingleEqual.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\nEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n,\n  result: {\n    Equal: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Ignoring Parameters for Verified Filename in MSTest\nDESCRIPTION: Shows a fluent approach to ignore parameters when generating the verified filename using IgnoreParametersForVerified(). This achieves the same result as the non-fluent approach but with a more concise syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"One\")]\n[DataRow(\"Two\")]\npublic Task IgnoreParametersForVerifiedFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(arg);\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Object with a 'Children' Array\nDESCRIPTION: This JSON snippet defines an object with a single key named \"Children\". The value associated with this key is an array containing two empty JSON objects. This structure is often used to represent hierarchical data, where the empty objects might later be populated with specific child node information or serve as placeholders.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ListIgnoreLoopReference.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Children: [\n    {},\n    {}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Mapping Data in JSON-like Format\nDESCRIPTION: This snippet defines a mapping between street addresses and associated data objects. Each address key maps to an object with a 'target' property (representing the expected result, either the address string or an Exception object) and a 'key' property (a string prefixed with 'recorded '). This structure is likely used as test data or configuration within the 'verifytests/verify' project. Note that while resembling JSON, it uses unquoted keys and potentially trailing commas, suggesting it might be parsed differently (e.g., as a JavaScript object literal or a specific configuration format).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationTests.RecordingWithExceptionPausedTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   1, Smith St  : {\n    target: {\n      Type: Exception,\n      Message: boom\n    },\n    key: recorded 1 Smith St\n  },\n   1, Wallace St: {\n    target: {\n      Type: Exception,\n      Message: boom\n    },\n    key: recorded 1 Wallace St\n  },\n  10, Smith St  : {\n    target: 10 Smith St,\n    key: recorded 10 Smith St\n  },\n  10, Wallace St: {\n    target: 10 Wallace St,\n    key: recorded 10 Wallace St\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DateTimeOffset Variable/Property Name Reference\nDESCRIPTION: Variable or property name using camelCase to represent a DateTimeOffset type\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimeOffsets_named.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: identifier\nCODE:\n```\ndateTimeOffsetName\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the C# project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: DateTime Format Test Cases in JSON Structure\nDESCRIPTION: JSON object containing two main sections: jsonValues and parameterValues. Each section defines DateTime formats with different timezone specifications (Local, UTC, Unspecified) and varying levels of time precision.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateFormatterTests.DateTimeCombinations.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  jsonValues: {\n    Local: 2020-01-01 Local,\n    Local_hour: 2020-01-01 02:00 Local,\n    Local_hour_minute: 2020-01-01 02:03 Local,\n    Local_hour_minute_second: 2020-01-01 02:03:04 Local,\n    Local_hour_minute_second_secondFraction: 2020-01-01 02:03:04.5 Local,\n    Local_hour_minute_secondFraction: 2020-01-01 02:03:00.5 Local,\n    Local_hour_second: 2020-01-01 02:00:04 Local,\n    Local_hour_second_secondFraction: 2020-01-01 02:00:04.5 Local,\n    Local_hour_secondFraction: 2020-01-01 02:00:00.5 Local,\n    Local_minute: 2020-01-01 00:03 Local,\n    Local_minute_second: 2020-01-01 00:03:04 Local,\n    Local_minute_second_secondFraction: 2020-01-01 00:03:04.5 Local,\n    Local_minute_secondFraction: 2020-01-01 00:03:00.5 Local,\n    Local_second: 2020-01-01 00:00:04 Local,\n    Local_second_secondFraction: 2020-01-01 00:00:04.5 Local,\n    Local_secondFraction: 2020-01-01 00:00:00.5 Local,\n    Unspecified: DateTime_1,\n    Unspecified_hour: 2020-01-01 02:00,\n    Unspecified_hour_minute: 2020-01-01 02:03,\n    Unspecified_hour_minute_second: 2020-01-01 02:03:04,\n    Unspecified_hour_minute_second_secondFraction: 2020-01-01 02:03:04.5,\n    Unspecified_hour_minute_secondFraction: 2020-01-01 02:03:00.5,\n    Unspecified_hour_second: 2020-01-01 02:00:04,\n    Unspecified_hour_second_secondFraction: 2020-01-01 02:00:04.5,\n    Unspecified_hour_secondFraction: 2020-01-01 02:00:00.5,\n    Unspecified_minute: 2020-01-01 00:03,\n    Unspecified_minute_second: 2020-01-01 00:03:04,\n    Unspecified_minute_second_secondFraction: 2020-01-01 00:03:04.5,\n    Unspecified_minute_secondFraction: 2020-01-01 00:03:00.5,\n    Unspecified_second: 2020-01-01 00:00:04,\n    Unspecified_second_secondFraction: 2020-01-01 00:00:04.5,\n    Unspecified_secondFraction: 2020-01-01 00:00:00.5,\n    Utc: 2020-01-01 Utc,\n    Utc_hour: 2020-01-01 02:00 Utc,\n    Utc_hour_minute: 2020-01-01 02:03 Utc,\n    Utc_hour_minute_second: 2020-01-01 02:03:04 Utc,\n    Utc_hour_minute_second_secondFraction: 2020-01-01 02:03:04.5 Utc,\n    Utc_hour_minute_secondFraction: 2020-01-01 02:03:00.5 Utc,\n    Utc_hour_second: 2020-01-01 02:00:04 Utc,\n    Utc_hour_second_secondFraction: 2020-01-01 02:00:04.5 Utc,\n    Utc_hour_secondFraction: 2020-01-01 02:00:00.5 Utc,\n    Utc_minute: 2020-01-01 00:03 Utc,\n    Utc_minute_second: 2020-01-01 00:03:04 Utc,\n    Utc_minute_second_secondFraction: 2020-01-01 00:03:04.5 Utc,\n    Utc_minute_secondFraction: 2020-01-01 00:03:00.5 Utc,\n    Utc_second: 2020-01-01 00:00:04 Utc,\n    Utc_second_secondFraction: 2020-01-01 00:00:04.5 Utc,\n    Utc_secondFraction: 2020-01-01 00:00:00.5 Utc\n  },\n  parameterValues: {\n    Local: 2020-01-01Local,\n    Local_hour: 2020-01-01T02-00Local,\n    Local_hour_minute: 2020-01-01T02-03Local,\n    Local_hour_minute_second: 2020-01-01T02-03-04Local,\n    Local_hour_minute_second_secondFraction: 2020-01-01T02-03-04.5Local,\n    Local_hour_minute_secondFraction: 2020-01-01T02-03-00.5Local,\n    Local_hour_second: 2020-01-01T02-00-04Local,\n    Local_hour_second_secondFraction: 2020-01-01T02-00-04.5Local,\n    Local_hour_secondFraction: 2020-01-01T02-00-00.5Local,\n    Local_minute: 2020-01-01T00-03Local,\n    Local_minute_second: 2020-01-01T00-03-04Local,\n    Local_minute_second_secondFraction: 2020-01-01T00-03-04.5Local,\n    Local_minute_secondFraction: 2020-01-01T00-03-00.5Local,\n    Local_second: 2020-01-01T00-00-04Local,\n    Local_second_secondFraction: 2020-01-01T00-00-04.5Local,\n    Local_secondFraction: 2020-01-01T00-00-00.5Local,\n    Unspecified: DateTime_1,\n    Unspecified_hour: 2020-01-01T02-00,\n    Unspecified_hour_minute: 2020-01-01T02-03,\n    Unspecified_hour_minute_second: 2020-01-01T02-03-04,\n    Unspecified_hour_minute_second_secondFraction: 2020-01-01T02-03-04.5,\n    Unspecified_hour_minute_secondFraction: 2020-01-01T02-03-00.5,\n    Unspecified_hour_second: 2020-01-01T02-00-04,\n    Unspecified_hour_second_secondFraction: 2020-01-01T02-00-04.5,\n    Unspecified_hour_secondFraction: 2020-01-01T02-00-00.5,\n    Unspecified_minute: 2020-01-01T00-03,\n    Unspecified_minute_second: 2020-01-01T00-03-04,\n    Unspecified_minute_second_secondFraction: 2020-01-01T00-03-04.5,\n    Unspecified_minute_secondFraction: 2020-01-01T00-03-00.5,\n    Unspecified_second: 2020-01-01T00-00-04,\n    Unspecified_second_secondFraction: 2020-01-01T00-00-04.5,\n    Unspecified_secondFraction: 2020-01-01T00-00-00.5,\n    Utc: 2020-01-01Utc,\n    Utc_hour: 2020-01-01T02-00Utc,\n    Utc_hour_minute: 2020-01-01T02-03Utc,\n    Utc_hour_minute_second: 2020-01-01T02-03-04Utc,\n    Utc_hour_minute_second_secondFraction: 2020-01-01T02-03-04.5Utc,\n    Utc_hour_minute_secondFraction: 2020-01-01T02-03-00.5Utc,\n    Utc_hour_second: 2020-01-01T02-00-04Utc,\n    Utc_hour_second_secondFraction: 2020-01-01T02-00-04.5Utc,\n    Utc_hour_secondFraction: 2020-01-01T02-00-00.5Utc,\n    Utc_minute: 2020-01-01T00-03Utc,\n    Utc_minute_second: 2020-01-01T00-03-04Utc,\n    Utc_minute_second_secondFraction: 2020-01-01T00-03-04.5Utc,\n    Utc_minute_secondFraction: 2020-01-01T00-03-00.5Utc,\n    Utc_second: 2020-01-01T00-00-04Utc,\n    Utc_second_secondFraction: 2020-01-01T00-00-04.5Utc,\n    Utc_secondFraction: 2020-01-01T00-00-00.5Utc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore patterns for excluding received test files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Override (Fluent Approach)\nDESCRIPTION: Demonstrates using IgnoreParametersForVerified() with custom parameter values in a fluent syntax to control received filenames while using a single verified file in NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-nunit.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\n[TestCase(\"One\")]\n[TestCase(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParamsFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified($\"Number{arg}\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding MSTest and Verify Dependencies via dotnet CLI - Shell\nDESCRIPTION: Demonstrates the shell commands to add core MSTest and Verify packages to a .NET test project. This ensures all test framework and snapshot verification dependencies are installed for MSTest, including adapters and the Verify.MSTest integration. Requires the dotnet CLI to be available on the system. Input: run commands in terminal within the test project folder. Output: NuGet packages are added and restored to the project.\nLimitations: Only applicable for .NET projects using MSTest and Verify; ensure the project has a valid *.csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto Tests\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline, providing a more readable output when verifying large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object\nDESCRIPTION: This code snippet defines an empty JSON object. It represents a structure with no properties or values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NoMatchTests.ClassAttributeFromWrongNamespace.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Object Structure in JSON\nDESCRIPTION: This JSON snippet defines the structure of a Person object. It specifies the object type as 'Person' and includes fields for given names and family name. This structure can be used for data serialization or as a template for creating Person instances.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScopedSerializer.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  $type: Person,\n  GivenNames: John,\n  FamilyName: Smith\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Exception Data in JSON Format\nDESCRIPTION: Defines a JSON structure that captures exception information including the exception type, error message, and stack trace. This format is likely used for serializing exceptions during test verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestThrowsTask.Net.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.TaskMethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Combinations for Verify Test Cases in JSON\nDESCRIPTION: This JSON object maps various combinations of a string identifier, numeric value, and boolean flag to specific test case names. It's used to configure or select test scenarios based on input parameters for verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.MixedLengths.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  A     , 100, True : a100True,\n  A     , 100, False: a100False,\n  A     ,   2, True : a2True,\n  A     ,   2, False: a2False,\n  A     ,  30, True : a30True,\n  A     ,  30, False: a30False,\n  bcc   , 100, True : bcc100True,\n  bcc   , 100, False: bcc100False,\n  bcc   ,   2, True : bcc2True,\n  bcc   ,   2, False: bcc2False,\n  bcc   ,  30, True : bcc30True,\n  bcc   ,  30, False: bcc30False,\n  sssssC, 100, True : sssssc100True,\n  sssssC, 100, False: sssssc100False,\n  sssssC,   2, True : sssssc2True,\n  sssssC,   2, False: sssssc2False,\n  sssssC,  30, True : sssssc30True,\n  sssssC,  30, False: sssssc30False\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Build Artifacts\nDESCRIPTION: Publishes the staged .received files as build artifacts when the publishverify flag is set. This makes the files available for inspection after the pipeline run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Test Data in JSON-like Format\nDESCRIPTION: This snippet defines a set of DateTime objects using a custom JSON-like format. Each entry consists of a date (year, month, day) as the key, mapped to a DateTime variable name. The data spans across different years (2020 and 2022) and months (February and March).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.WithScrubbed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  2020, 2, 12: DateTime_1,\n  2020, 2, 15: DateTime_2,\n  2020, 3, 12: DateTime_3,\n  2020, 3, 15: DateTime_4,\n  2022, 2, 12: DateTime_5,\n  2022, 2, 15: DateTime_6,\n  2022, 3, 12: DateTime_7,\n  2022, 3, 15: DateTime_8\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files within text editors, enforcing UTF-8 BOM encoding, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Named GUID - Fluent API\nDESCRIPTION: Demonstrates how to use named GUIDs with fluent API configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task NamedGuidFluent()\n{\n    var guid = new Guid(\"c8eeaf99-d5c4-4341-8543-4597c3fd40d9\");\n    return Verify(\n            new\n            {\n                value = guid\n            })\n        .AddNamedGuid(guid, \"instanceNamed\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invalid JSON Schema Reference\nDESCRIPTION: This snippet shows a JSON object with an invalid $ref property that points to a non-existent path. The reference '#/no/ref' cannot be resolved as there is no 'no/ref' path in the document, making this an invalid JSON Schema reference.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonRefRespectSerializerSettings.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  $ref: #/no/ref\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Fixie for use with Verify, including target assembly assignment and test execution setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Set Failure Flag Task\nDESCRIPTION: YAML task to set a flag variable when tests fail, which will be used to determine whether to publish received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Up EditorConfig for Verify Files\nDESCRIPTION: Shows EditorConfig settings to ensure editors respect Verify's text file conventions including UTF-8 BOM, line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Received and Verified Files - EditorConfig\nDESCRIPTION: This EditorConfig sample applies settings for text-based \".received\" and \".verified\" files. It enforces UTF-8 BOM charset, LF newlines, and disables automatic trailing newlines and whitespace trimming, matching Verify's conventions. Place this block in your .editorconfig file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure correct handling of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Including Obsolete Properties in C# Verify Tests\nDESCRIPTION: This snippet demonstrates how to include obsolete properties in Verify tests using VerifySettings. It shows two approaches: using a separate VerifySettings object and using a fluent interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/obsolete-members.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task WithObsoletePropIncluded()\n{\n    var target = new WithObsolete\n    {\n        ObsoleteProperty = \"value1\",\n        OtherProperty = \"value2\"\n    };\n    var settings = new VerifySettings();\n    settings.IncludeObsoletes();\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task WithObsoletePropIncludedFluent()\n{\n    var target = new WithObsolete\n    {\n        ObsoleteProperty = \"value1\",\n        OtherProperty = \"value2\"\n    };\n    return Verify(target)\n        .IncludeObsoletes();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit Testing\nDESCRIPTION: Commands to add the required NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances the text comparison behavior of Verify to show differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the DiffPlex comparison tool for Verify tests, providing inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implements ITestProject and IExecution interfaces to configure Verify with Fixie test runner. Handles test discovery and execution while managing verification state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Verify integration with Fixie\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .csproj (XML)\nDESCRIPTION: Sets the <ImplicitUsings> option to 'enable' in the project file to ensure that C# 10+ implicit global usings are available, as used in Verify code samples. This is necessary for sample code to compile without explicit using directives. Prerequisite: Editing the .csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Representing Exception Data in JSON\nDESCRIPTION: This JSON snippet defines an object representing an exception. It includes two key-value pairs: 'Type' specifying the exception class (e.g., 'Exception') and 'Message' containing the error message string ('the message'). This structure is commonly used for serializing error details for logging, testing, or API responses.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NestedTargetInvocationException.DotNet10_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  exception: {\n    Type: Exception,\n    Message: the message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Split Directory Received Files from Git - Shell\nDESCRIPTION: This ginore entry ensures received snapshot directories (created with UseSplitModeForUniqueDirectory option) are also excluded from source control. Prevents accidental inclusion of automatically generated directories. Add this pattern if the advanced split mode is enabled in your project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool in C#\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally. This tool allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: CLI commands to add necessary NuGet packages for Verify and Xunit testing. Includes the core testing SDK, Verify.Xunit, Xunit, and the Visual Studio runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for MSTest testing framework and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and Fixie NuGet Packages via CLI - .NET CLI - bash\nDESCRIPTION: Demonstrates the commands required to add Fixie and Verify.Fixie NuGet packages to a .NET test project using the CLI. No dependencies beyond having the .NET SDK and NuGet configured. These commands should be run from the root of the test project to enable Fixie-based testing and Verify snapshot support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Fixie test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify.TUnit NuGet Packages in a .NET Project\nDESCRIPTION: NuGet package references required to use TUnit with Verify.TUnit for snapshot testing in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool using .NET CLI\nDESCRIPTION: Installs the Verify.Terminal dotnet tool globally using the dotnet CLI (`-g` flag). This optional tool provides command-line capabilities for managing Verify snapshots (e.g., accepting or rejecting changes).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```\ndotnet tool install -g verify.tool\n```\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Git configuration to exclude received test files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude received files from source control while ensuring verified files are committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are temporary files generated during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from version control, which are temporary files generated by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie Testing\nDESCRIPTION: Commands to add the core Fixie testing framework and Verify.Fixie integration packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: XUnit Collection Declaration\nDESCRIPTION: Declaration for applying XUnit dangling snapshots collection to tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nXunitDanglingCollection\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: GitIgnore pattern to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Structure in JSON\nDESCRIPTION: JSON representation of an exception with type, message, and stack trace information. This structure captures the essential details needed for verification testing of exceptions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsValueTaskGeneric.DotNet.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.ValueTaskMethodThatThrowsGeneric()\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in ReSharper Settings\nDESCRIPTION: Configuration to disable orphaned process detection in ReSharper's unit test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Copy Verify received files for publishing\nDESCRIPTION: Stages 'received' files from Verify suite for publication as an artifact in Azure DevOps. It uses a conditional check to execute only when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging\nDESCRIPTION: YAML configuration to copy all *.received.* files to the build artifact staging directory when tests have failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Step for Artifact Upload - YAML\nDESCRIPTION: Configures an AppVeyor 'on_failure' build step to upload all .received.* snapshot files as build artifacts using the Push-AppveyorArtifact PowerShell command. Place inside appveyor.yml to automatically collect test artifacts on failed builds. Requires AppVeyor CI and PowerShell support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\non_failure:\\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Test Results\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Upload Received Files on Failure (YAML)\nDESCRIPTION: Defines an `on_failure` step in an AppVeyor build configuration file (`appveyor.yml`). This step uses a PowerShell script (`ps`) to find all files matching `*.received.*` recursively (`Get-ChildItem ... -recurse`) within the build workspace and uploads each one as a build artifact using the `Push-AppveyorArtifact` command. This allows easy access to the generated received files when tests fail in the CI environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Using a JsonAppender with Text Content\nDESCRIPTION: This example shows how to verify content with the JsonAppender active. The appender will add its key-value pairs to the verification output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/jsonappender.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(\"content\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet defines a data structure with a single key 'Value' and its corresponding string value 'Value1'. It resembles JSON format but uses an unquoted key, which might require specific parsing depending on the environment. This structure is likely used within the '/verifytests/verify' project for testing purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableDataFluent_arg=Value1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify Integration in C#\nDESCRIPTION: Implements ITestProject and IExecution interfaces to configure Fixie for use with Verify. It sets up the target assembly and wraps test executions with ExecutionState.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Text Comparison\nDESCRIPTION: C# code to initialize Verify.DiffPlex, improving text difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Params in NUnit Verify Tests (Fluent)\nDESCRIPTION: Shows how to ignore parameters and use custom parameters in NUnit Verify tests using the fluent approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-nunit.source.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task IgnoreParametersWithCustom(string arg1, string arg2)\n{\n    return Verifier.Verify(\"value\")\n        .IgnoreParametersForVerified(\n            (\"arg2\"),\n            (\"customArg\", \"customValue\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Fluent Ignoring Parameters with Custom Parameters in MSTest\nDESCRIPTION: Demonstrates the fluent syntax for ignoring parameters while passing custom parameters for filename generation in MSTest Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task IgnoreParametersForVerifiedCustomParamsFluent(string toIgnore, string toUse) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(\n            x => x.toIgnore,\n            (\"customParameter\", toUse));\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex for Enhanced Text Comparison\nDESCRIPTION: Command to add the Verify.DiffPlex package which improves text difference display in verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison results by highlighting text differences inline rather than showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: NuGet command to install Verify.DiffPlex, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adding the Verify.DiffPlex NuGet package reference to enable enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable enhanced text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Expecto Testing in F#\nDESCRIPTION: The NuGet package references required for setting up Expecto testing with Verify in an F# project. Includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core update, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions CI/CD pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Example NUnit test that demonstrates how to use Verify for snapshot testing. References the SampleTestNUnit code snippet which would contain a complete test implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git attributes configuration for verified text files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a convention for using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable Implicit Usings in the project file, which is required for the examples to work without explicit namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via dotnet CLI\nDESCRIPTION: Uses the dotnet CLI to add the Verify.DiffPlex NuGet package to the project. This package provides an alternative text comparison mechanism that highlights differences inline within the exception message.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Xunit and Verify\nDESCRIPTION: Add these NuGet package references to the test project to enable Xunit testing with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Configuration for .gitignore to exclude *.received.* files from source control, which are generated during test runs but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .editorconfig for Pure Method Usage\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is relevant for Verify method calls.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package via dotnet CLI - Shell\nDESCRIPTION: Illustrates the shell command to add the Verify.DiffPlex package to your project, enabling inline difference highlighting for large text snapshot verifications. This integration is optional and requires installation only if advanced diff visualization is desired.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (Bash)\nDESCRIPTION: Command for installing the Verify.DiffPlex NuGet package, enabling enhanced inline diff visualization for failed snapshot comparisons within the Verify framework. It should be run in the test project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: File Verification with Custom Extension Placeholder (VerifyTests)\nDESCRIPTION: Placeholder representing code that verifies a file using a custom file extension for the '.verified' and '.received' files, instead of the default extension.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-file.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsnippet: VerifyFileExtension\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files, including charset, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Verify.Expecto Test (F#)\nDESCRIPTION: This F# snippet shows a basic test using the Expecto framework and Verify.Expecto. It defines a test case `findPerson` that retrieves a `person` object from `ClassBeingTested` and uses `Verifier.Verify()` to perform snapshot testing on the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_10\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git attribute configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Date Format Example\nDESCRIPTION: A JSON object with an improperly formatted date value. The 'NotDate' property contains a numeric value '1.2.3' which is not a valid JSON date format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.OnlySpecificDates.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  NotDate: 1.2.3\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Guid Comparison with Verify in C#\nDESCRIPTION: This code snippet demonstrates how to use the Verify framework to compare and verify Guid values in C#. It includes a test method that creates a Guid and uses Verify to assert its correctness.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineGuidsStartingInNewline1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nGuid_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Value Property\nDESCRIPTION: Defines a configuration object with a single property 'value' set to 'instanceNamed'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Settings in JSON\nDESCRIPTION: This JSON configuration specifies settings for a verification test. It includes a numeric Include value of 1, and two properties (Scrub and Memory Info) with placeholder values marked as {Scrubbed}.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.JTokenScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Include: 1,\n  Scrub: {Scrubbed},\n  Memory Info: {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying XUnit Collection to Tests\nDESCRIPTION: Shows how to apply the shared fixture collection to test classes in XUnit, enabling dangling snapshot verification for all tests in the class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dangling-files.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Collection(nameof(SharedFixtureCollection))]\npublic class Tests\n{\n    [Fact]\n    public Task Simple() =>\n        Verify(\"Foo\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for consistent file formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: Reference to a sample NUnit test that demonstrates how to use Verify for snapshot testing. The actual code isn't shown in the snippet but is referenced in the documentation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// The actual code is not provided in the snippet, but would be shown in the full documentation\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified/Received Files (.editorconfig)\nDESCRIPTION: This EditorConfig block specifies coding style and encoding for verified and received text files, setting charset to UTF-8 with BOM, line endings to LF, and disabling final newline insertion and whitespace trimming. Place this snippet in your .editorconfig to ensure editors apply consistent formatting to snapshot files. Adjust extensions as needed for additional file types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Structure with Mixed-Case Properties\nDESCRIPTION: A JSON object that contains a property named 'list' with value 'Result', and three alphabetically-named properties with different casing patterns ('A', 'b', 'C').\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.Defaults.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  list: Result,\n  A: a,\n  b: b,\n  C: c\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Object Structure for Verify Tests in JSON\nDESCRIPTION: This JSON snippet defines the structure of a Person object, including its type and basic properties. It's formatted for use with the Verify testing framework, specifying the object type and key personal information fields.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/VerifyObjectSamples.ScopedSerializer.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  $type: VerifyObjectSamples.Person,\n  GivenNames: John,\n  FamilyName: Smith,\n  Dob: DateTimeOffset_1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object\nDESCRIPTION: This snippet defines a standard, empty JSON object. It contains no key-value pairs and is often used to represent a null state, a default value, or as input for testing edge cases that handle empty data structures. Note the potential presence of a Byte Order Mark (BOM) at the beginning.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithWriteMemberNullIgnored_Include.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\\ufeff{}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors. This helps catch cases where developers forget to await Verify calls, which can lead to misleading test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Adds the Verify.DiffPlex package to the project, enabling inline text differences highlight in the test results. This package helps make verification outputs more readable.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: Demonstrates how to run Verify checks using Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyChecks () =\n    VerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in a JSON-like Structure\nDESCRIPTION: This snippet shows a JSON-like object with two properties, `Property1` and `Property2`. Each property is assigned a multi-line string value containing 'A' and 'B' separated by multiple newlines. Note that this structure might not be strictly valid JSON depending on the parser, due to potential syntax issues like the trailing comma or how multi-line strings are represented.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TestConverterWithBadNewline.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property1: \n\n\nA\n\n\nB\n\n\n,\n  Property2:\n\n\nA\n\n\nB\n\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting and encoding for verified and received files when edited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining a Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet defines a simple data structure containing one key 'Value' mapped to the string 'Value1'. While resembling JSON, note that standard JSON requires keys and string values to be enclosed in double quotes. This structure originates from the /verifytests/verify project context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberStructDataFluent_arg=Value1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  Value: Value1\\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Pushing Received Files as Artifacts\nDESCRIPTION: PowerShell script to push *.received.* files as artifacts in AppVeyor CI on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Uploading Test Results on GitHub Actions\nDESCRIPTION: Use GitHub Actions to upload test results with `*.received.*` files upon build failure, configured with an `if: failure()` condition within a YAML workflow file. This assists in debugging by preserving failed test artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Current Directory in JSON-like format\nDESCRIPTION: This JSON-like snippet defines an object with a single key-value pair: `currentDirectory` is set to the value `Bar`. Note that `Bar` is not enclosed in quotes, making it not strictly valid JSON, but it might be interpreted as a string or variable depending on the parser. It's likely used as a configuration input.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.MoreSpecificScrubberShouldOverride.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  currentDirectory: Bar\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto\nDESCRIPTION: Example of how to run Verify checks in an Expecto test using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntest \"Verify Checks\" {    \n    VerifyChecks.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MSTest and Verify NuGet Packages - .NET Project XML\nDESCRIPTION: This snippet lists the required NuGet packages for enabling MSTest-based snapshot verification with Verify on a .NET test project. The dependencies include the MSTest framework, Microsoft.NET.Test.Sdk, and Verify.MSTest for snapshot assertions. Place these <PackageReference> tags within your test project’s .csproj to ensure all features work as expected. Make sure package versions are compatible with your .NET SDK.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Microsoft.NET.Test.Sdk\\\" Version=\\\"17.13.0\\\" />\\n<PackageReference Include=\\\"MSTest\\\" Version=\\\"3.8.3\\\" />\\n<PackageReference Include=\\\"Verify.MSTest\\\" Version=\\\"29.2.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Test Results File Content\nDESCRIPTION: Shows the actual content differences between received and verified test files. Includes examples of new files and unequal file comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.MultipleItem.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nFileContent:\n\nNew:\n\nReceived: ExceptionParsingTests.Fake.received.txt\nthe content\n\nNotEqual:\n\nReceived: ExceptionParsingTests.Fake.received.txt\nreceivedText\nVerified: ExceptionParsingTests.Fake.verified.txt\nverifiedText\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code initializes Verify.DiffPlex to enable inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: NuGet package references required for using Verify with MSTest, including the core Verify packages and MSTest integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.8.2\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet defines an object-like structure with a single key 'Value' mapped to the string value 'Value2'. While resembling JSON, the key is not enclosed in double quotes, which might be specific to the parsing context within the '/verifytests/verify' project. It likely represents simple configuration data or test parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableDataFluent_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  Value: Value2\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie. Handles test discovery, execution state management, and parameter handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Source Control Exclusion for Received Folders (.gitignore format)\nDESCRIPTION: Adds a rule for excluding entire directories ending with '*.received/' when split mode for unique directories is enabled. Use this in conjunction with other .gitignore entries to fully exclude all transient Verify received test outputs from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result for Ignored Obsolete Property\nDESCRIPTION: This snippet shows the verified output of the test with an ignored obsolete property. Only the non-obsolete property is included in the serialized result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/obsolete-members.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\n  OtherProperty: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool\nDESCRIPTION: Installs the DiffEngineTray tool globally using the .NET CLI. DiffEngineTray runs in the Windows system tray to monitor and manage Verify snapshot changes, providing options to accept or reject them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally using dotnet CLI. DiffEngineTray monitors snapshot changes in the Windows tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining 'Include' and 'GetOnlyProperty' Configuration Values\nDESCRIPTION: This snippet defines two configuration settings using a key-value format within curly braces. 'Include' is assigned the string value 'Value', and 'GetOnlyProperty' is assigned the string value 'asd'. This format resembles JSON but lacks quoted keys, suggesting it might be a specific configuration syntax or pseudo-code.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.IgnoreMemberByPredicateFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\\n  Include: Value,\\n  GetOnlyProperty: asd\\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members That Throw Custom Exceptions in C#\nDESCRIPTION: This snippet demonstrates how to ignore members that throw a custom exception type during serialization. It shows both instance-specific and fluent configurations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/members-throw.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CustomExceptionProp()\n{\n    var target = new WithCustomException();\n    var settings = new VerifySettings();\n    settings.IgnoreMembersThatThrow<CustomException>();\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task CustomExceptionPropFluent()\n{\n    var target = new WithCustomException();\n    return Verify(target)\n        .IgnoreMembersThatThrow<CustomException>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inclusion and Scrubbing in JSON\nDESCRIPTION: This JSON-like configuration specifies inclusion and scrubbing settings for various data elements. It includes a value, scrubs multiple fields and properties, and handles special property types.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubMemberByExpression.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Include: Value,\n  Field: {Scrubbed},\n  Property: {Scrubbed},\n  _Custom: {Scrubbed},\n  GetOnlyProperty: {Scrubbed},\n  PropertyThatThrows: {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for handling verified and received files with specific encoding and formatting rules.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding MSTest and Verify Packages using dotnet CLI - Shell\nDESCRIPTION: These shell commands use the dotnet CLI to add MSTest and Verify related NuGet packages to a test project. Running them installs Microsoft.NET.Test.Sdk, MSTest.TestAdapter, MSTest.TestFramework, and Verify.MSTest as dependencies, all required for running and verifying MSTest-based unit tests with enhanced snapshot verification. Ensure .NET CLI is installed, and run commands from the test project's directory. No special input is required; commands output installation results or errors if packages cannot be found.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package MSTest.TestAdapter\\ndotnet add package MSTest.TestFramework\\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Declaring a value variable in Python\nDESCRIPTION: A simple Python variable declaration without an explicit value assignment. This appears to be a placeholder or template variable that would need to be assigned a value elsewhere in the codebase.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/UseSplitModeForUniqueDirectoryTests.ValueTest.verified/target.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Sample Snapshot Verification Test with Fixie (C#)\nDESCRIPTION: This C# class demonstrates a typical Fixie test using snapshot verification. It creates a 'person' object by calling ClassBeingTested.FindPerson() and verifies it against a stored snapshot using Verify(person). Assumes Verify and ClassBeingTested are available, and returns a Task for async test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\\n{\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps (YAML)\nDESCRIPTION: This Azure DevOps pipeline task (CopyFiles@2) copies all files matching the pattern `**/*.received.*` (Verify received files) to the build artifact staging directory (`$(Build.ArtifactStagingDirectory)/Verify`). It only runs if the `publishverify` variable is set to `Yes` (`condition: eq(variables['publishverify'], 'Yes')`), typically after test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: HTML Navigation Comment Block\nDESCRIPTION: Generated HTML comment block indicating this is an auto-generated file by MarkdownSnippets with source file information and editing instructions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Object\nDESCRIPTION: This snippet shows a basic JSON object containing a single key-value pair. The key is 'name' and the value is 'value'. This illustrates the fundamental structure for representing data in JSON format. Note that standard JSON requires keys and string values to be enclosed in double quotes, which is not strictly followed in this specific example but is often accepted by lenient parsers.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.NoValue.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name: value\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text difference visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This snippet demonstrates how to add the Verify.DiffPlex NuGet package, which is necessary for enhancing text comparison by highlighting differences inline. Include this package reference in your project's XML file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with NUnit\nDESCRIPTION: Example of how to run Verify convention checks in a NUnit test. This ensures that all Verify conventions are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON-like Object\nDESCRIPTION: This snippet defines an object structure with a single key named 'Value' and an associated value 'Value2'. Note that this representation is simplified; standard JSON requires keys and string values to be enclosed in double quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableStructData_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value2\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: An example Fixie test that demonstrates the basic pattern of testing with Verify - getting an object from a system under test and verifying its state with a snapshot test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Example showing how to inherit from VerifyBase class to enable verification functionality in test classes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Value Class in C++ for VERIFY Testing Framework\nDESCRIPTION: Implements a Value class that represents a test value for the VERIFY framework. This class handles value wrapping, equality comparison, and string conversion operations needed for test assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.ParameterCount_TooFew_one=1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass Value {\npublic:\n    Value() : value(\"\") {}\n    Value(const char * value) : value(value) {}\n    Value(const std::string & value) : value(value) {}\n    Value(std::string && value) : value(std::move(value)) {}\n\n    Value & operator = (const char * value) { this->value = value; return *this; }\n    Value & operator = (const std::string & value) { this->value = value; return *this; }\n    Value & operator = (std::string && value) { this->value = std::move(value); return *this; }\n\n    template <typename T>\n    Value(const T & t) {\n        std::stringstream ss;\n        ss << t;\n        value = ss.str();\n    }\n\n    bool operator == (const Value & v) const {\n        return value == v.value;\n    }\n\n    std::string value;\n};\n\nstd::ostream & operator << (std::ostream & os, const Value & v) {\n    return os << v.value;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object with Name and Custom Properties (JSON-like)\nDESCRIPTION: This snippet defines a data object structure with 'Name' set to 'New Value' and 'Custom' set to 'CustomValue'. While resembling JSON, it lacks double quotes around keys and string values, indicating it might be interpreted by a specific parser or used within a context like JavaScript object literals or a simplified configuration format for verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithConverterAndMemberConverter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Name: New Value,\n  Custom: CustomValue\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages in csproj\nDESCRIPTION: XML snippet for a `.csproj` file, demonstrating how to add `Fixie` and `Verify.Fixie` package references using `PackageReference`. These packages are essential for using the Fixie test framework with VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Registering a Static Global Comparer in Verify\nDESCRIPTION: Demonstrates how to register a custom comparer globally for a specific file extension. This allows all PNG files to be compared using the custom CompareImages function throughout the test suite.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/comparer.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.RegisterStreamComparer(\n    extension: \"png\",\n    compare: CompareImages);\nawait VerifyFile(\"TheImage.png\");\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to enhance diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison in verify tests using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Serializing Exception Details in JSON Format\nDESCRIPTION: This snippet shows the structure used to serialize exception details, including the exception type, message, and stack trace. It's likely used for logging or error reporting purposes in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TargetInvocationException.Net4_8.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Type: Exception,\n  Message: the message,\n  StackTrace: at SerializationTests.MethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Configuration Object (JSON-like)\nDESCRIPTION: This snippet defines a simple object-like structure with two key-value pairs: 'Name' mapped to the string 'The name', and 'Custom' mapped to the string 'CustomValue'. It resembles JSON syntax but notably lacks double quotes around the keys, which might indicate a specific configuration format (like HOCON or a relaxed JSON parser) or simply be illustrative pseudo-code.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithConverter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Name: The name,\n  Custom: CustomValue\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor Artifact Upload on Test Failure\nDESCRIPTION: PowerShell script to upload .received files as artifacts when tests fail in AppVeyor CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/build-server.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which provides better text comparison by highlighting differences inline. This improves readability when verifying large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Tests\nDESCRIPTION: Pattern to add to .gitignore to exclude .received files generated by Verify from source control while keeping .verified files committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting a Flag on Test Failure in Azure DevOps Pipeline\nDESCRIPTION: This YAML task sets a pipeline variable to indicate that Verify test files should be published when the test step fails. It uses the Azure DevOps logging command syntax to create a 'publishverify' variable.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: DateTime Identifier\nDESCRIPTION: Text identifier containing a datetime reference with prefix and numeric suffix\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineDateTimesWrappedInNumber.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1DateTime_11\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Initializes Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Snapshot Files from Git - .gitignore\nDESCRIPTION: This snippet lists a pattern that should be added to your .gitignore file to prevent accidental commits of \\'received\\' snapshot files created by Verify. These files often represent unapproved test outputs that should not be source-controlled. Add the pattern near other similar file exclusions in .gitignore to enforce proper test artifact handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueFor Settings with Fixie\nDESCRIPTION: Shows how to use various UniqueFor settings in a Fixie test class to create environment-specific verification files. Both traditional and fluent API approaches are demonstrated for runtime, assembly configuration, architecture, and OS platform settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\npublic class UniqueForSample\n{\n    public Task Runtime()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntime();\n        return Verify(\"value\", settings);\n    }\n\n    public Task RuntimeFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntime();\n\n    public Task AssemblyConfiguration()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForAssemblyConfiguration();\n        return Verify(\"value\", settings);\n    }\n\n    public Task AssemblyConfigurationFluent() =>\n        Verify(\"value\")\n            .UniqueForAssemblyConfiguration();\n\n    public Task RuntimeAndVersion()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForRuntimeAndVersion();\n        return Verify(\"value\", settings);\n    }\n\n    public Task RuntimeAndVersionFluent() =>\n        Verify(\"value\")\n            .UniqueForRuntimeAndVersion();\n\n    public Task Architecture()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForArchitecture();\n        return Verify(\"value\", settings);\n    }\n\n    public Task ArchitectureFluent() =>\n        Verify(\"value\")\n            .UniqueForArchitecture();\n\n    public Task OSPlatform()\n    {\n        var settings = new VerifySettings();\n        settings.UniqueForOSPlatform();\n        return Verify(\"value\", settings);\n    }\n\n    public Task OSPlatformFluent() =>\n        Verify(\"value\")\n            .UniqueForOSPlatform();\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Index in Markdown\nDESCRIPTION: A markdown-formatted documentation index with hierarchical organization of VerifyTests documentation topics and external links.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Documentation\n\n  * [Clipboard](/docs/clipboard.md)\n  * [Compared to assertions](/docs/compared-to-assertion.md)\n  * [Verify options](/docs/verify-options.md)\n  * [VerifyDirectory](/docs/verify-directory.md)\n  * [VerifyZip](/docs/verify-zip.md)\n  * [VerifyFile](/docs/verify-file.md)\n  * [VerifyXml](/docs/verify-xml.md)\n  * [Serializer Settings](/docs/serializer-settings.md)\n    * [Obsolete members](/docs/obsolete-members.md)\n    * [Guids](/docs/guids.md)\n    * [Dates](/docs/dates.md)\n    * [Scrubbing](/docs/scrubbers.md)\n    * [Members that throw](/docs/members-throw.md)\n    * [Ordering](/docs/ordering.md)\n    * [Encoding](/docs/encoding.md)\n    * [JsonAppender](/docs/jsonappender.md)\n    * [Type to string mapping](/docs/type-to-string-mapping.md)\n  * [File naming](/docs/naming.md)\n  * [AppendFile](/docs/append-file.md)\n  * [Parameterised tests](/docs/parameterised.md)\n    * [NUnit](/docs/parameterised-nunit.md)\n    * [Xunit V2](/docs/parameterised-xunitv2.md)\n    * [Xunit V3](/docs/parameterised-xunitv3.md)\n    * [MSTest](/docs/parameterised-mstest.md)\n    * [TUnit](/docs/parameterised-tunit.md)\n    * [Fixie](/docs/parameterised-fixie.md)\n    * [Expecto](/docs/parameterised-expecto.md)\n  * [Combinations](/docs/combinations.md)\n  * [Named Tuples](/docs/named-tuples.md)\n  * [Diff Engine](https://github.com/VerifyTests/DiffEngine)\n  * [Diff Tools](https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.md)\n  * [Diff Tool Order](https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.order.md)\n  * [Custom Diff Tool](https://github.com/VerifyTests/DiffEngine/blob/master/docs/diff-tool.custom.md)\n  * [Using anonymous types](/docs/anonymous-types.md)\n  * [Verifying binary data](/docs/binary.md)\n  * [Build server](/docs/build-server.md)\n  * [Comparers](/docs/comparer.md)\n  * [Converters](/docs/converter.md)\n  * [Recording](/docs/recording.md)\n  * [Explicit Targets](/docs/explicit-targets.md)\n  * [FSharp Usage](/docs/fsharp.md)\n  * [Compared to ApprovalTests](/docs/compared-to-approvaltests.md)\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adding the Verify.DiffPlex NuGet package reference to enable enhanced text difference visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Testing List Operations in Python\nDESCRIPTION: This snippet verifies various list operations in Python, including creation, indexing, slicing, and basic list methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.DerivePaths.Tests/Tests.ThrowOnConflict.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nassert [1, 2, 3] + [4, 5] == [1, 2, 3, 4, 5]\nassert [1, 2, 3] * 2 == [1, 2, 3, 1, 2, 3]\nassert [1, 2, 3][0] == 1\nassert [1, 2, 3][-1] == 3\nassert [1, 2, 3, 4][1:3] == [2, 3]\nassert [1, 2, 3, 4][:2] == [1, 2]\nassert [1, 2, 3, 4][2:] == [3, 4]\nassert len([1, 2, 3]) == 3\n\nmy_list = [1, 2, 3]\nmy_list.append(4)\nassert my_list == [1, 2, 3, 4]\nmy_list.extend([5, 6])\nassert my_list == [1, 2, 3, 4, 5, 6]\nmy_list.insert(0, 0)\nassert my_list == [0, 1, 2, 3, 4, 5, 6]\nmy_list.remove(3)\nassert my_list == [0, 1, 2, 4, 5, 6]\npopped = my_list.pop()\nassert popped == 6\nassert my_list == [0, 1, 2, 4, 5]\nassert my_list.index(4) == 3\nassert my_list.count(1) == 1\nmy_list.sort()\nassert my_list == [0, 1, 2, 4, 5]\nmy_list.reverse()\nassert my_list == [5, 4, 2, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a .NET Tool - Shell\nDESCRIPTION: This shell command installs the DiffEngineTray globally as a .NET tool. DiffEngineTray helps manage snapshot file differences from the system tray, enabling users to easily accept or reject changes. Users must have the .NET Core SDK installed with the environment variable PATH including the dotnet CLI. No arguments are required, but administrative rights might be needed for global (-g) tools. The output is an installed utility accessible from anywhere in the system.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members by Predicate in C# Verify Tests\nDESCRIPTION: This snippet demonstrates how to ignore members using predicate functions in Verify tests. It includes examples for ignoring members based on name and type, as well as ignoring dictionary entries.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task IgnoreMemberByPredicate()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    var settings = new VerifySettings();\n\n    settings.IgnoreMembers(_ => _ is \"Field\" or \"Property\");\n    settings.IgnoreMembers(_ => _.Name is \"PropertyByName\" or \"PropertyThatThrows\");\n\n    return Verify(target, settings);\n}\n\n[Fact]\npublic Task IgnoreMemberByPredicateFluent()\n{\n    var target = new IgnoreExplicitTarget\n    {\n        Include = \"Value\",\n        Field = \"Value\",\n        Property = \"Value\",\n        PropertyByName = \"Value\"\n    };\n    var settings = new VerifySettings();\n\n    return Verify(target, settings)\n        .IgnoreMembers(_ => _ is \"Field\" or \"Property\")\n        .IgnoreMembers(_ => _.Name is \"PropertyByName\" or \"PropertyThatThrows\");\n}\n\n[Fact]\npublic Task IgnoreDictionaryByPredicate()\n{\n    var settings = new VerifySettings();\n\n    settings.IgnoreMembers(name => name is \"Ignore\");\n\n    var target = new Dictionary<string, object>\n    {\n        {\n            \"Include\", new Dictionary<string, string>\n            {\n                {\n                    \"Ignore\", \"Value1\"\n                },\n                {\n                    \"Key1\", \"Value2\"\n                }\n            }\n        },\n        {\n            \"Ignore\", \"Value3\"\n        },\n        {\n            \"Key2\", \"Value4\"\n        }\n    };\n    return Verify(target, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package for Enhanced Diff Display\nDESCRIPTION: Command to add the Verify.DiffPlex package which improves text comparison output by highlighting differences inline rather than showing full content dumps on verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging\nDESCRIPTION: Copies all *.received.* files to the artifact staging directory when the publishverify flag is set. This step is necessary since PublishBuildArtifacts doesn't support wildcards directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package with .NET CLI\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings\nDESCRIPTION: XML configuration to enable implicit usings in the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Mode for Unique Directories\nDESCRIPTION: Module initializer that configures the global setting to use split mode for unique directories, separating received and verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/naming.md#2025-04-22_snippet_24\n\nLANGUAGE: cs\nCODE:\n```\npublic static class ModuleInitializer\n{\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.UseSplitModeForUniqueDirectory();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool using dotnet CLI\nDESCRIPTION: Installs the `DiffEngineTray` .NET tool globally using the `dotnet tool install -g` command. DiffEngineTray is an optional but recommended companion application for VerifyTests that resides in the Windows system tray. It monitors pending snapshot changes and provides a user interface to easily accept or reject them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Array of Objects\nDESCRIPTION: This JSON snippet defines an array containing two objects. The first object has the key 'name' (lowercase) with the string value 'value1', and the second object has the key 'Name' (uppercase) with the string value 'value2'. This structure represents a list of data entries, often used for configuration or test cases. Note the difference in casing for the keys.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.CaseIdentifier.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    name: value1\n  },\n  {\n    Name: value2\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Nested JSON Configuration Structure\nDESCRIPTION: A JSON configuration object with nested properties, including 'Ignore' and 'Include' sections with {Scrubbed} values, plus regular key-value pairs. This structure could be used for defining inclusion/exclusion patterns in a configuration file.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryByPredicate.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Ignore: {Scrubbed},\n  Include: {\n    Ignore: {Scrubbed},\n    Key1: Value2\n  },\n  Key2: Value4\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for handling verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object\nDESCRIPTION: Demonstrates the syntax for defining an empty JSON object using curly braces.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NoMatchTests.NoAttributes.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Setting Up VerifyChecks for Testing Conventions\nDESCRIPTION: Example of how to create a test case that runs VerifyChecks.Run() to verify that all conventions are being followed correctly. This ensures proper setup of Verify in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object\nDESCRIPTION: This code snippet defines an empty JSON object. It represents a structure with no properties or values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NoMatchTests.AssemblyAttributeButNoTestClass.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in Fixie\nDESCRIPTION: Example implementation of Verify checks in Fixie. This test class runs verification checks against the current assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties in JavaScript\nDESCRIPTION: This snippet initializes a JavaScript object with three properties: 'target', 'name', and 'Name'. The 'target' property is assigned from an external variable or constant 'TheValue', while 'name' and 'Name' are each assigned separate values, reflecting JavaScript's case sensitivity with distinct property keys. There are no external dependencies, but the presence of 'TheValue' suggests it should be set prior to object initialization. The resulting object can be used for configuration, data mapping, or as a prototype for further operations. Inputs are external references, and output is the constructed object.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.Case.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  target: TheValue,\\n  name: value1,\\n  Name: value2\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package - Shell\nDESCRIPTION: This command adds the optional Verify.DiffPlex package to the test project, which enhances string comparison output by highlighting inline text differences. Prerequisites: dotnet CLI, NuGet configured. Use in the project directory to enable advanced diff reporting. No parameters; output is enhanced snapshot diff capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Path Derivation for AppVeyor in C#\nDESCRIPTION: This code snippet demonstrates how to implement custom path derivation for .verified files when using AppVeyor as the build server. It uses the DerivePathInfo method to handle scenarios where test assemblies are copied to different directories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/build-server.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nDerivePathInfo(\n    (sourceFile, projectDirectory, type, method) =>\n    {\n        var testDirectory = Path.GetDirectoryName(sourceFile);\n        var testAssemblyDirectory = Path.GetDirectoryName(type.Assembly.Location);\n        var testAssemblyName = Path.GetFileName(testAssemblyDirectory);\n        var projectName = Path.GetFileName(Path.GetDirectoryName(projectDirectory));\n        var ci = Environment.GetEnvironmentVariable(\"CI\");\n        if (ci == \"true\")\n        {\n            var appVeyorProjectDirectory = Environment.GetEnvironmentVariable(\"APPVEYOR_BUILD_FOLDER\");\n            var appVeyorTestDirectory = Path.Combine(\n                appVeyorProjectDirectory,\n                projectName,\n                testAssemblyName);\n            testDirectory = appVeyorTestDirectory;\n        }\n\n        return new(testDirectory, type.Name, method.Name);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Value Checking\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Verify Test Results\nDESCRIPTION: YAML configuration for GitHub Actions to upload .received files as artifacts when tests fail. This helps with debugging by providing access to the actual test outputs that didn't match expectations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Expected Output When Stopped Data is Not Included (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file from the `RecordingStopNotInResult` snippet, showing that the stopped recording data is absent.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.StopNotInResult.verified.txt\n{\n  Target: \"some other data\" // Only the explicit target is verified\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting up a verification test for asynchronous code with Verify.js\nDESCRIPTION: This snippet demonstrates how to create a test that verifies the behavior of a promise-returning function. It uses the verify library to check that the function properly resolves after a timeout.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubEmptyLinesStart.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nverify(function() {\n  var d = $.Deferred();\n  setTimeout(function() {\n    d.resolve(\"done\");\n  }, 100);\n  return d.promise();\n}, function(r) {\n  return r === \"done\";\n});\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit v3 NuGet Packages\nDESCRIPTION: Adds the necessary NuGet packages for using Verify with XUnit v3 in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.9.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"22.8.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.6.6\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.6\" />\n```\n\n----------------------------------------\n\nTITLE: Assigning Named Date Value in JSON\nDESCRIPTION: Demonstrates assigning a named date reference to a value property in JSON format. Uses a simple object structure with a single property.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.InferredNamedDateFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: namedDate\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for XUnit v3 and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using XUnit v3 with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray using .NET CLI\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes, using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Object Structure in JSON\nDESCRIPTION: A JSON object that represents an exception with type and message properties. This structure can be used for error responses in APIs or for logging purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NestedTargetInvocationException.Net4_8.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  exception: {\n    Type: Exception,\n    Message: the message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable implicit usings in the project file. When enabled, this allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with Verify\nDESCRIPTION: NuGet package references needed to use Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Failure\nDESCRIPTION: Add a step to the GitHub Actions workflow to upload *.received.* files as artifacts when tests fail. This helps in diagnosing test failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore for Verify Test Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while committing *.verified.* files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for cleaner code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration to enable implicit usings in the project file, which allows direct usage of Verify() method without full qualification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files on Test Failure\nDESCRIPTION: GitHub Actions workflow step that uploads received files as artifacts when tests fail. Uses the actions/upload-artifact action with a failure() condition.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitUsings for Verify Tests\nDESCRIPTION: This snippet demonstrates how to enable implicit usings in the project file, which is required for the examples to compile correctly. This allows direct use of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Upload Test Results on GitHub Actions\nDESCRIPTION: This YAML code uploads '*.received.*' files on GitHub Actions if a build fails, using 'actions/upload-artifact' to assist in debugging test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Test Arguments (JSON-like)\nDESCRIPTION: This snippet defines a data object, resembling JSON or potentially YAML due to unquoted keys and strings, containing key-value pairs. It specifies values for 'arg1', 'arg2', and 'arg3', likely used as input parameters or configuration for a test case named 'TestCase2' within the '/verifytests/verify' project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/TestFixtureSourceAndTestCaseUsage.Test_arg1=Value2_arg2=2_arg3=FromTestCase2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  arg1: Value2,\n  arg2: 2,\n  arg3: FromTestCase2\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object\nDESCRIPTION: This snippet represents an empty JSON object. It defines a structure containing no key-value pairs. This is often used as a default value, a placeholder, or to indicate the absence of data in a structured format within the '/verifytests/verify' context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ExceptionMessagePropFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeOffset Variable Name\nDESCRIPTION: A simple variable name 'aDateTimeOffset_1' that appears to be used for a DateTimeOffset type variable in a testing context. No implementation or usage details are provided.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDateTimeOffsets_starting.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naDateTimeOffset_1\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Global Tool\nDESCRIPTION: This command uses the .NET CLI to install verify.tool as a global tool. Verify.Terminal provides command-line utilities for managing Verify snapshot files (e.g., accepting or rejecting changes).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object\nDESCRIPTION: This snippet demonstrates the creation of an empty JSON object. It can be used as a starting point for building more complex JSON structures or to represent an empty data set.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NoMatchTests.AssemblyAttributeFromWrongNamespace.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining Verification Data Object (JSON-like)\nDESCRIPTION: This snippet defines a data object with two properties: 'target' set to the value 'info' and 'theData' set to the value 'theValue'. Although resembling JSON, it uses unquoted keys and string values, suggesting it might be parsed by a lenient JSON parser or interpreted as a JavaScript object literal within the '/verifytests/verify' project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/JsonAppenderTests.StringInfoAndStreamTarget.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  target: info,\n  theData: theValue\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the VerifyDiffPlex functionality for enhanced difference comparison in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for TUnit\nDESCRIPTION: This XML snippet shows the NuGet package references required for using Verify with TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"TUnit\" Version=\"5.1.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit NuGet Packages for .NET Test Project\nDESCRIPTION: This snippet provides the XML configuration to include essential NuGet packages for setting up an NUnit test project in a .NET environment. It requires referencing Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter in the .csproj file to enable testing capabilities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Microsoft.NET.Test.Sdk\\\" Version=\\\"17.13.0\\\" />\\n<PackageReference Include=\\\"NUnit\\\" Version=\\\"4.3.2\\\" />\\n<PackageReference Include=\\\"Verify.NUnit\\\" Version=\\\"29.2.0\\\" />\\n<PackageReference Include=\\\"NUnit3TestAdapter\\\" Version=\\\"5.0.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining Size Options Array in JSON\nDESCRIPTION: Defines an array containing three standard size options - Small, Medium, and Large. This basic enumeration can be used for size categorization in applications.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=Argon.Linq.JArray.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  \"Small\",\n  \"Medium\",\n  \"Large\"\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Clipboard Support in Verify (C#)\nDESCRIPTION: This snippet shows how to enable clipboard functionality in the Verify testing framework. It uses the ClipboardAccept.Enable() method to activate clipboard support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/clipboard.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nClipboardAccept.Enable();\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload .received Files on Test Failure\nDESCRIPTION: GitHub Actions workflow configuration to upload *.received.* files as artifacts when tests fail, making it easier to diagnose test failures in CI/CD pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .csproj\nDESCRIPTION: Property setting to enable implicit usings in the project file, which allows for simplified syntax when using Verify without requiring explicit imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension, which improves diff output for failed verifications by showing inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool\nDESCRIPTION: This command uses the .NET CLI to install DiffEngineTray as a global tool. DiffEngineTray runs in the system tray and monitors snapshot files, providing a UI to easily accept or reject changes detected by VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with XUnit v3. This includes the test SDK, Verify.XunitV3, and XUnit v3 packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Snapshot Files from Git - Shell\nDESCRIPTION: Instructs git to ignore all files matching the pattern '*.received.*', ensuring that temporary or intermediate snapshot files created by Verify are not committed. This promotes proper source control hygiene and prevents noise from rejected or pending changes. Should be appended to the project's .gitignore file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration setting to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the optional Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Publishing Received Files\nDESCRIPTION: Azure DevOps pipeline YAML configuration that publishes the staged *.received.* files as build artifacts when tests fail, making them available for review.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with Xunit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal dotnet tool, which enables management of snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control Settings in .gitattributes\nDESCRIPTION: This properties snippet configures source control settings in .gitattributes for verified text files to ensure consistency, setting eol to 'lf' and working-tree-encoding to 'UTF-8'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Fluent Custom Parameters with IgnoreParametersForVerified in MSTest\nDESCRIPTION: Shows a fluent approach to use custom parameters with IgnoreParametersForVerified(). This achieves the same result as the non-fluent approach but with a more concise syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-mstest.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[DataTestMethod]\n[DataRow(\"One\")]\n[DataRow(\"Two\")]\npublic Task IgnoreParametersForVerifiedFluentCustomParams(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified($\"Number{arg}\");\n```\n\n----------------------------------------\n\nTITLE: Default Time Equality Comparison Using EqualityComparer in .NET (C#)\nDESCRIPTION: The snippet illustrates use of the default .NET EqualityComparer for the Time type, meaning comparisons rely on Time's built-in equality behavior. This is often used as the default comparer in the test or counter infrastructure unless overridden. No customization or parameters are defined; dependency is on System.Collections.Generic.EqualityComparer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nEqualityComparer<Time>.Default;\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This YAML snippet adds a build step that sets a flag when the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Scrubbing Numeric Ids in C# Verify Tests\nDESCRIPTION: This snippet demonstrates how to scrub numeric Ids in Verify tests using ScrubMembers. It defines a Target class with an Id and Name property, sets up custom scrubbing logic, and runs a test to verify the scrubbing behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/numeric-ids.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\npublic class NumericIdSample\n{\n    public class Target : IHasId\n    {\n        public required int Id { get; init; }\n        public required string Name { get; init; }\n    }\n\n    [ModuleInitializer]\n    public static void Init() =>\n        VerifierSettings.ScrubMembers(\n            _ => typeof(IHasId).IsAssignableFrom(_.DeclaringType) &&\n                 _.Name == \"Id\");\n\n    [Fact]\n    public Task Test()\n    {\n        var target = new Target\n        {\n            Id = new Random().Next(),\n            Name = \"The Name\"\n        };\n        return Verify(target);\n    }\n\n    public interface IHasId\n    {\n        public int Id { get; init; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair in JSON-like Syntax\nDESCRIPTION: This snippet defines a simple object structure containing a single key-value pair (`name2` associated with `value2`). It uses a JSON-like syntax, notable for the unquoted key, which might be specific to the parser used in the `/verifytests/verify` context. This likely represents configuration data or a simple data record.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.PauseResume.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name2: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit in a test project, including Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Exception Object from C# Test\nDESCRIPTION: A JSON structure representing an exception object with type, message, and stack trace information. The stack trace indicates the exception originated from a method named 'MethodThatThrowsValueTask' in a test class called 'ThrowsTests'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestMethodThatThrowsValueTask.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.MethodThatThrowsValueTask()\n}\n```\n\n----------------------------------------\n\nTITLE: Marking All MSTest Classes in Assembly for Verify (C#)\nDESCRIPTION: C# code snippet showing how to apply the `UsesVerify` attribute at the assembly level. This opts in all MSTest test classes within the assembly for processing by the Verify Source Generator.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code snippet demonstrates how to initialize Verify.DiffPlex for improved text comparison results in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which helps manage snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Serialization Result for Object with Ignored Obsolete Property\nDESCRIPTION: This snippet shows the verified output of the serialization test where the obsolete property is ignored. Only the non-obsolete property is included in the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/obsolete-members.source.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Property: 'Value1'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Object with GivenNames and FamilyName\nDESCRIPTION: This snippet defines a Person object using a JSON-like format. It specifies the object type and includes fields for given names and family name.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScopedSerializerFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  $type: Person,\n  GivenNames: John,\n  FamilyName: Smith\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto in F#\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto in an F# project, including YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: Git configuration to exclude received files from source control while including verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Configuration for .gitignore to exclude *.received.* files from source control, which are the temporary output files generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - XML\nDESCRIPTION: Demonstrates how to include the Verify.DiffPlex NuGet package by adding a <PackageReference> entry to your project file. The Version attribute can be specified or use a wildcard. This is required for enhanced diff highlighting in Verify tests. Add this snippet to your project\\'s .csproj file under the <ItemGroup> containing other package references.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Scrubbers in Fixie Tests\nDESCRIPTION: This snippet shows text scrubbing techniques using the Fixie test framework. It includes methods for line replacement, removal, and handling empty lines. The code demonstrates both settings-based and fluent configurations for scrubbing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScrubbersSample\n{\n    public Task Lines()\n    {\n        var settings = new VerifySettings();\n        settings.ScrubLinesWithReplace(\n            replaceLine: _ =>\n            {\n                if (_.Contains(\"LineE\"))\n                {\n                    return \"NoMoreLineE\";\n                }\n\n                return _;\n            });\n        settings.ScrubLines(removeLine: _ => _.Contains('J'));\n        settings.ScrubLinesContaining(\"b\", \"D\");\n        settings.ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n        return Verify(\n            settings: settings,\n            target: \"\"\"\n                    LineA\n                    LineB\n                    LineC\n                    LineD\n                    LineE\n                    LineH\n                    LineI\n                    LineJ\n                    \"\");\n    }\n\n    public Task LinesFluent() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               LineD\n               LineE\n               LineH\n               LineI\n               LineJ\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: _ =>\n                {\n                    if (_.Contains(\"LineE\"))\n                    {\n                        return \"NoMoreLineE\";\n                    }\n\n                    return _;\n                })\n            .ScrubLines(removeLine: _ => _.Contains('J'))\n            .ScrubLinesContaining(\"b\", \"D\")\n            .ScrubLinesContaining(StringComparison.Ordinal, \"H\");\n\n    public Task RemoveOrReplace() =>\n        Verify(\"\"\"\n               LineA\n               LineB\n               LineC\n               \"\"\")\n            .ScrubLinesWithReplace(\n                replaceLine: line =>\n                {\n                    if (line.Contains(\"LineB\"))\n                    {\n                        return null;\n                    }\n\n                    return line.ToLower();\n                });\n\n    public Task EmptyLines() =>\n        Verify(\"\"\"\n\n               LineA\n\n               LineC\n\n               \"\"\")\n            .ScrubEmptyLines();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VerifyChecks with Expecto\nDESCRIPTION: Implementation of a test class that runs VerifyChecks to ensure proper verification conventions are followed within the assembly. Uses Expecto's test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto - F#\nDESCRIPTION: This F# sample demonstrates writing an Expecto test that verifies the output of ClassBeingTested.FindPerson using snapshot verification. It uses the Verifier.Verify method and defines a testTask within an Expecto test list. Required dependencies: Expecto, VerifyTests, VerifyExpecto. Inputs are the string \\\"findPerson\\\" (the test name) and the value returned from FindPerson. Output is a snapshot assertion or failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_10\n\nLANGUAGE: f#\nCODE:\n```\nopen Expecto\\nopen VerifyTests\\nopen VerifyExpecto\\n\\n[<Tests>]\\nlet tests =\\n    testTask \\\"findPerson\\\" {\\n        let person = ClassBeingTested.FindPerson()\\n        do! Verifier.Verify(\\\"findPerson\\\", person).ToTask()\\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Source Control Include/Exclude Configuration\nDESCRIPTION: This placeholder indicates where configuration related to source control includes/excludes (e.g., for `.gitignore`) should be inserted, likely referencing a standard configuration snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ninclude: include-exclude\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Value Checking\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Test Failure\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to upload any *.received.* files as artifacts when tests fail, which helps in diagnosing verification failures in CI/CD pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Multiline Property in JSON\nDESCRIPTION: This JSON snippet defines a 'Property' with a multiline string value. The value contains three lines: 'a', 'b', and 'c', with 'b' and 'c' separated by a newline character.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NewLineNotEscapedInProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Property:\na\nb\\nc\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters in TUnit Tests (Fluent)\nDESCRIPTION: Demonstrates how to hash parameters for file naming using HashParameters() with a fluent interface in TUnit tests. This is useful for large parameters that could exceed OS filename length limits.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\")]\n[Arguments(\"Value2\")]\npublic Task HashParametersFluent(string arg) =>\n    Verify(arg)\n        .HashParameters();\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Template with Numbered Keys\nDESCRIPTION: A simple JSON object structure with numbered keys (1, 2, 3) that have empty values. This appears to be a template or placeholder structure for later population with actual data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_ValueAfter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  1: ,\n  2: ,\n  3: \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture .received Files on Failure\nDESCRIPTION: AppVeyor configuration to capture and upload .received files as artifacts when a build fails, aiding in debugging verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration with Verify in C# (C#)\nDESCRIPTION: This C# snippet initializes the DiffPlex integration on module load using a ModuleInitializer. The static Initialize method configures Verify to utilize DiffPlex for inline diff output during failed verifications. Place this code in a suitable file (such as an AssemblyInfo.cs or a static initialization area) in your test project. Dependencies: requires both Verify and Verify.DiffPlex NuGet packages. No input parameters; functionality activates at module initialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure that editors respect the required formatting conventions for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure that verified and received files maintain consistent formatting, including UTF-8 with BOM encoding, line feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: UseTextForParameters Fluent Example\nDESCRIPTION: Demonstrates fluent syntax for overriding parameter text in verified filenames.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task UseTextForParametersFluent(string arg) =>\n    Verify(arg + \"UseTextForParametersFluent\")\n        .UseTextForParameters(arg);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic JSON Object Structure\nDESCRIPTION: Demonstrates a simple JSON object with two key-value pairs using Foo and Bar values. Shows basic property definition pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DictionaryOrderNonComparable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Foo1: Bar,\n  Foo2: Bar\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Failed Test Results\nDESCRIPTION: A GitHub Actions workflow step that uploads *.received.* files as artifacts when tests fail, making it easier to diagnose verification test failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded Single Byte Value in JSON\nDESCRIPTION: JSON object containing a single byte value encoded in base64 format. The value 'AQ==' represents the byte value 1 in base64 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/StreamTests.NestedByteArray.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  bytes: AQ==\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with XUnit v3. This includes the test SDK, Verify.XunitV3, XUnit v3 (prerelease), and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for NUnit and Verify Testing\nDESCRIPTION: Commands to add necessary NuGet packages for setting up NUnit and Verify testing in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with XUnit testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is necessary since these are temporary comparison files generated during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Staging Directory in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This YAML snippet defines a CopyFiles task that copies all .received files to a staging directory. It only runs if the 'publishverify' variable is set to 'Yes', indicating that the test runner failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps YAML\nDESCRIPTION: This YAML snippet defines a task to copy *.received.* files to the artifact staging directory. It's conditionally executed based on the publishverify flag set in the previous step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files, including UTF-8 BOM encoding, LF line endings, and no final newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files on Test Failure\nDESCRIPTION: YAML configuration for GitHub Actions that uploads *.received.* files as artifacts when tests fail, making it easier to debug verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: XML configuration to enable implicit usings in the C# project file, which is required for the Verify.Xunit examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Enumerable Ordering in C#\nDESCRIPTION: Sets up global ordering for IEnumerable items using a specified key selector.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.OrderEnumerableBy<Person>(_ => _.Name);\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Setting the ImplicitUsings property to enable in the project file, which allows direct usage of Verify() without fully qualifying it as Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text for Instance-based Verification in Fixie\nDESCRIPTION: Shows how to override the text used for parameters in instance-based verification using Fixie and Verify.Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-fixie.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParametersSample\n{\n    [Fact]\n    public Task UseTextForParameters(string arg)\n    {\n        return Verifier.Verify(\"value\")\n            .UseTextForParameters(arg);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit V3\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an XUnit V3 test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Test Failure\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail. This helps in debugging and reviewing test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the dotnet CLI. DiffEngineTray is a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: ReSharper Unit Test Runner Settings\nDESCRIPTION: Configuration for ReSharper's DotSettings file to disable the orphaned process detection feature, which would otherwise interfere with diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: markup\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties with JSON-like Syntax - JavaScript\nDESCRIPTION: This snippet defines a JavaScript object literal with two properties: 'Property', set to the value 'Value', and 'List', initialized as an empty array. It demonstrates fundamental object and array initialization techniques in JavaScript and is suitable as a template for structured data definition. The object does not specify any specialized dependencies and is not a valid JSON since keys and values are not quoted, which may cause issues outside JavaScript environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.SelfReferencingWithArray.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  Property: Value,\\n  List: []\\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps\nDESCRIPTION: This YAML task publishes the staged .received files as build artifacts when the publishverify flag is set to Yes. This allows for easier debugging of failed verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Copying Received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: Copy task that stages *.received.* files for publishing as artifacts when tests fail in Azure DevOps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: JSON Instance Name Configuration\nDESCRIPTION: A JSON object that assigns an instanceNamed value to the 'value' property. Used for configuring instance name references.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDates_instanceNamed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Snapshot Test Using Verify - C#\nDESCRIPTION: This example demonstrates a basic usage of Verify in an MSTest test class. It finds a person via the tested class and verifies the object's snapshot. Prerequisites include referencing Verify.MSTest, using the appropriate attributes, and ensuring Implicit Usings or correct type names ('Verify' vs. 'Verifier'). The method returns a Task for async execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic partial class Sample\\n{\\n    [TestMethod]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code usage\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This C# code snippet demonstrates a sample Xunit test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration\nDESCRIPTION: YAML configuration for handling Verify test artifacts in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Publishing Verification Artifacts in Azure DevOps\nDESCRIPTION: Publish task that uploads the staged *.received.* files as build artifacts in Azure DevOps when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received test files including encoding and line ending configurations\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie Tests\nDESCRIPTION: Adds the necessary NuGet packages to the test project for using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line utilities for managing verification snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Test Failure\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload *.received.* files as artifacts when tests fail, aiding in debugging Verify test failures in CI/CD pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test using Verify - C#\nDESCRIPTION: This C# class provides a typical Verify-based unit test using TUnit. It defines a test that constructs or retrieves a value (in this case, a person), then submits it to Verify() for snapshot testing. Dependencies include the Verify and TUnit libraries; 'ClassBeingTested.FindPerson()' represents user-defined logic. Returns a Task to allow asynchronous verification. This pattern is the recommended way to write verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\\n{\\n    [Test]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Required NuGet package references to add to the F# test project for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Input-Output Test Matrix Configuration\nDESCRIPTION: Defines a validation matrix mapping input combinations to expected outputs. Tests three parameters: a letter (A/b/C), a number (1-3), and a boolean value (True/False). Invalid inputs with 'b' should throw ArgumentException.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.WithException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : ArgumentException: B is not allowed.,\n  b, 1, False: ArgumentException: B is not allowed.,\n  b, 2, True : ArgumentException: B is not allowed.,\n  b, 2, False: ArgumentException: B is not allowed.,\n  b, 3, True : ArgumentException: B is not allowed.,\n  b, 3, False: ArgumentException: B is not allowed.,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Storing DateTimeOffset Test Data in JSON\nDESCRIPTION: A JSON object containing a single DateTimeOffset value mapped to key 'DateTimeOffset_1'. Used as test verification data with numeric value 1234.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeOffsetKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  DateTimeOffset_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages via .NET CLI (Shell)\nDESCRIPTION: Demonstrates how to add essential NuGet packages to a .NET test project for Verify.xUnitV3, Microsoft.NET.Test.Sdk, xunit.v3 prereleases, and the xunit Visual Studio runner via `dotnet add package`. Required as boilerplate for enabling verification and test runner support. Dependencies: .NET CLI tools; must be executed in the directory of the target test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package Verify.XunitV3\\ndotnet add package xunit.v3 --prerelease\\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex with ModuleInitializer - CSharp\nDESCRIPTION: This snippet demonstrates how to enable Verify.DiffPlex by calling VerifyDiffPlex.Initialize() in a static module initializer. The [ModuleInitializer] attribute ensures the initialization logic runs before any forms of static usage. Dependencies: C# 9.0 or later for ModuleInitializer; references to Verify.DiffPlex. No parameters are needed. This must be included in the test assembly's source code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Object in JavaScript\nDESCRIPTION: This code snippet creates a JavaScript object literal with two properties: 'target', set to null, and 'theData', set to the value of the variable 'theValue'. There are no external dependencies, but the correct functioning relies on 'theValue' being defined in the same or an outer scope. This pattern is commonly used for configuration or preparing values to be exported, with null indicating an absent target. Inputs: the variable 'theValue' is assumed to exist. Outputs: the resulting object structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/JsonAppenderTests.NullText.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  target: null,\n  theData: theValue\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files in .editorconfig\nDESCRIPTION: Specifies EditorConfig settings for text-based received and verified files (`.json`, `.txt`, `.xml`). It enforces `utf-8-bom` charset, `lf` end-of-line, disables final newline insertion, and unsets indentation styles to align editor behavior with Verify's specific text file formatting conventions. Users should add other relevant text extensions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining Inclusion Configuration (JSON-like)\nDESCRIPTION: This snippet defines a configuration object named `ToInclude`. Within this object, a `Property` key is set to the value `Include`, likely instructing a system or test framework (potentially Verify) to include specific items based on this property. This structure is common in configuration files for enabling features or specifying behavior. Note the use of unquoted keys, which is not standard JSON but common in formats like HOCON.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.AddIgnoreInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ToInclude: {\n    Property: Include\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining Date Component to Identifier Mappings in C#\nDESCRIPTION: This code snippet initializes a collection, strongly resembling a C# Dictionary or similar map structure. Keys are formed from comma-separated integers representing year, month, and day, implicitly forming tuples or similar key structures. Values are symbolic identifiers (DateTime_1, DateTime_2, etc.), which likely correspond to variables or constants defined elsewhere, possibly representing DateTime objects. This structure serves as a lookup table associating specific dates with predefined names, probably intended for use in test cases or configuration data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/CombinationTests.WithScrubbed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  2020, 2, 12: DateTime_1,\n  2020, 2, 15: DateTime_2,\n  2020, 3, 12: DateTime_3,\n  2020, 3, 15: DateTime_4,\n  2022, 2, 12: DateTime_5,\n  2022, 2, 15: DateTime_6,\n  2022, 3, 12: DateTime_7,\n  2022, 3, 15: DateTime_8\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Naming Configuration Object\nDESCRIPTION: A JSON configuration object that specifies instance naming through the value property set to instanceNamed.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeOffsets_instanceNamed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify (C#)\nDESCRIPTION: Demonstrates a basic Fixie test method (`Test`) that calls a method (`ClassBeingTested.FindPerson()`) and uses `Verify(person)` to perform snapshot testing on the result. Assumes Implicit Usings are enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example NUnit test implementation using Verify framework to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal dotnet tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally. This tool allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure correct formatting of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which enables managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeOffset Test Data in JSON\nDESCRIPTION: This JSON snippet defines a test case for DateTimeOffset handling. It contains a single key 'DateTimeOffset_1' with a numeric value of 1234, likely representing a timestamp or offset value for testing purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringDateTimeOffsetKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  DateTimeOffset_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received test files as artifacts in GitHub Actions on test failure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps YAML\nDESCRIPTION: This YAML snippet defines a task to copy all .received files to the artifact staging directory. It only executes if the publishverify flag is set to 'Yes', indicating a test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for AppVeyor to capture and upload received files as artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verify\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally. This tool allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to enhance text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Object Array in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define an array containing a single object with a 'name' key and associated value in JavaScript. There are no external dependencies required; this is valid syntax in any JavaScript environment (browser, Node.js, etc.). The object can be extended or used as a basis for further testing, validation, or serialization. The array structure is suitable for situations where multiple objects of this kind may be stored or processed.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.Identifier.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\\n  {\\n    name: value\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages - Shell\nDESCRIPTION: This snippet installs the core packages, Fixie (test framework) and Verify.Fixie (snapshot verification extension), required to set up Verify snapshot testing in a .NET project using Fixie. Dependencies: dotnet CLI, access to NuGet. Run each command from the test project directory. No input parameters except implicit working directory; output is increased project functionality via package restore.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample Snapshot Test with MSTest and Verify - C#\nDESCRIPTION: Provides a sample MSTest class using Verify for snapshot comparison of an object returned from a static method. The [TestClass] and [TestMethod] attributes define this as a test, with the test asynchronously verifying the result of ClassBeingTested.FindPerson(). Requires MSTest, Verify.MSTest, and that ImplicitUsings are enabled for direct Verify() usage. Returns test results based on snapshot match status.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\\npublic partial class Sample\\n{\\n    [TestMethod]\\n    public Task Test()\\n    {\\n        var person = ClassBeingTested.FindPerson();\\n        return Verify(person);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Verification Test Data Mapping in JSON\nDESCRIPTION: Defines a mapping structure for test verification scenarios. Each key consists of three parts - a letter (A/b/C), a number (1-3), and a boolean value - mapped to a corresponding result value following the pattern of the key components concatenated together.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.Three.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : b1True,\n  b, 1, False: b1False,\n  b, 2, True : b2True,\n  b, 2, False: b2False,\n  b, 3, True : b3True,\n  b, 3, False: b3False,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixie Test Project Configuration for Verify\nDESCRIPTION: Creates a custom TestProject class that implements ITestProject and IExecution interfaces to properly configure Verify with Fixie. This setup assigns the target assembly and properly wraps test executions with ExecutionState.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: File Path Format Overview\nDESCRIPTION: Shows the basic format for generated verification file paths\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/naming.source.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{Directory}/{TestClassName}.{TestMethodName}_{Parameters}_{UniqueFor1}_{UniqueFor2}_{UniqueForX}.verified.{extension}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: This XML snippet enables implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: Installs the optional Verify.DiffPlex NuGet package using the .NET CLI. This package enhances text comparison by highlighting differences inline within the test failure output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: An Expecto test that runs Verify's convention checks using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet verifyConventions =\n    test \"Verify conventions\" {\n        Task.Run(Func<Task>(fun () -> VerifyChecks.Run()))\n        |> Async.AwaitTask\n        |> Async.RunSynchronously\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet CLI - Shell\nDESCRIPTION: This command installs the DiffEngineTray global .NET tool using the dotnet command-line interface. DiffEngineTray resides in the Windows system tray and assists with accepting or rejecting snapshot changes detected by Verify. Prerequisites: .NET SDK installed and available on PATH. Usage: execute in a terminal or command prompt; no parameters required. The tool is optional but recommended for developers using snapshot testing workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: GitAttributes Configuration for Verified Text Files\nDESCRIPTION: Configuration to add to .gitattributes file to ensure proper line endings and encoding for verified text files used in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex PackageReference - .NET XML\nDESCRIPTION: This snippet demonstrates how to add the Verify.DiffPlex NuGet package to a .NET test project via a PackageReference in the csproj XML. Verify.DiffPlex is a recommended, pluggable text comparator that enhances how differences are displayed when verification fails, providing inline highlighting. No additional parameters are needed apart from the 'Include' and 'Version'. Ensure your project structure supports PackageReference item groups.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture .received Files on Test Failure\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step that captures all .received files as build artifacts. Uses Get-ChildItem to recursively find .received files and Push-AppveyorArtifact to upload them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting when editing verified and received files in code editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction to install the DiffEngineTray global tool for managing snapshot comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: MSTest implementation for running verify checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally as a dotnet tool. DiffEngineTray is used for monitoring and managing snapshot changes in the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for handling verified and received files with proper encoding and formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining a Template with DateTime Field in JSON\nDESCRIPTION: This JSON snippet defines a template structure for an item with a DateTime field. The template includes a title that references the DateTime value and a variant section that specifies an ID for the DateTime field.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineDateTimes.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Title: item DateTime_1 - (date={DateTime_1}),\n  Variant: {\n    Id: variant date: DateTime_1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verification Test with Fixie\nDESCRIPTION: Sample test that demonstrates how to use Verify with Fixie to test and verify the state of an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration in Verify - C#\nDESCRIPTION: This snippet shows how to enable the Verify.DiffPlex plugin in a .NET project by calling VerifyDiffPlex.Initialize() from a module initializer. Marking the method with [ModuleInitializer] ensures this configuration runs once when the module loads, setting up enhanced diffing for all verification runs. No additional parameters are required beyond a project reference to the Verify.DiffPlex package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Defining a Map of Addresses to Void Placeholders (plaintext)\nDESCRIPTION: This snippet defines a data structure, likely representing a map or dictionary. Keys are street addresses composed of a number and street name (e.g., '1, Smith St'), and all associated values are 'void'. This suggests the structure might be used to represent a set of addresses where only the keys (the addresses themselves) are significant, possibly for testing or verification scenarios.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationTests.VoidValueTaskTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n   1, Smith St  : void,\n   1, Wallace St: void,\n  10, Smith St  : void,\n  10, Wallace St: void\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify NUnit Testing (.NET CLI, shell)\nDESCRIPTION: Demonstrates the .NET CLI commands to install all required NuGet packages for supporting test execution and the Verify snapshot testing framework with NUnit. Dependencies must be installed into the test project using the shell before any Verify tests will compile or run. Packages include Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package NUnit\\ndotnet add package NUnit3TestAdapter\\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Mapping Date Components to Formatted Dates in JSON\nDESCRIPTION: This JSON object maps date components (year, month, day) to their corresponding formatted date strings in YYYY-MM-DD format. It includes dates from February and March of 2020 and 2022.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/CombinationTests.WithDontScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  2020, 2, 12: 2020-02-12,\n  2020, 2, 15: 2020-02-15,\n  2020, 3, 12: 2020-03-12,\n  2020, 3, 15: 2020-03-15,\n  2022, 2, 12: 2022-02-12,\n  2022, 2, 15: 2022-02-15,\n  2022, 3, 12: 2022-03-12,\n  2022, 3, 15: 2022-03-15\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (Bash)\nDESCRIPTION: Executes the `dotnet add package` command to install the `Verify.DiffPlex` NuGet package. This package enhances VerifyTests' text comparison by highlighting differences inline instead of outputting full received/verified strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex ModuleInitializer - C#\nDESCRIPTION: Initializes the VerifyDiffPlex functionality at module startup. The code uses a C# ModuleInitializer attribute to ensure that the call to VerifyDiffPlex.Initialize() runs before any tests, configuring the diff engine globally for the test project. Assumes the VerifyDiffPlex namespace is referenced and appropriate NuGet packages are installed. No explicit parameters; the initializer pattern is vital for generic .NET test project bootstrap.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider/ReSharper to Ignore Orphaned Processes\nDESCRIPTION: XML configuration to disable orphaned process detection in Rider/ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Array of Simple Objects\nDESCRIPTION: This JSON snippet defines an array containing three distinct objects. Each object follows the same structure, possessing a single key-value pair where the key is 'Value' and the corresponding values are 'a', 'b', and 'c'. This structure is commonly used for representing ordered lists of data items.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.OrderEnumerableByGlobal.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    Value: a\n  },\n  {\n    Value: b\n  },\n  {\n    Value: c\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object\nDESCRIPTION: This snippet demonstrates the syntax for an empty JSON object. It can be used as a starting point for building more complex JSON structures or as a placeholder where an object is expected but no data is currently needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NoMatchTests.TestClassButNoAssemblyAttribute.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray in Shell\nDESCRIPTION: Installs DiffEngineTray via the .NET command line tool to provide a tray application for monitoring and managing diffs during verification. Use the provided command in a shell to complete the installation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool\nDESCRIPTION: Command to install Verify.Terminal as a global .NET tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal as Dotnet Tool (Bash)\nDESCRIPTION: Shows how to install the Verify.Terminal dotnet tool globally to manage snapshots from the terminal/command line; this tool is optional but aids in interacting with verification outputs outside the IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool globally for managing snapshots\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Treating Unused Pure Method Return Values as Errors - .editorconfig\nDESCRIPTION: This .editorconfig setting configures ReSharper to treat unused return values from methods marked with the [Pure] attribute (such as Verify()) as errors in any C# file. This enforces best practices by requiring test assertions or awaited tasks not to be ignored. Append this to your .editorconfig to activate stricter static analysis for Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_10\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files\nDESCRIPTION: GitHub Actions workflow configuration to upload *.received.* files as artifacts when tests fail, enabling easier debugging of snapshot test failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: XUnit V3 Dangling Snapshots Implementation\nDESCRIPTION: Implementation of dangling snapshots detection for XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nDanglingSnapshotsXUnitV3Usage/DanglingSnapshots.cs\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally using dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Staging Directory\nDESCRIPTION: Copies all *.received.* files to the artifact staging directory when tests have failed. This step is necessary because PublishBuildArtifacts doesn't support wildcards directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Output for DateTime Objects\nDESCRIPTION: Shows the sanitized output format when verifying DateTime objects, where date values are replaced with counters for repeatable tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\n  DateTime: DateTime_1,\n  DateTimeNullable: DateTime_1,\n  Date: Date_1,\n  DateNullable: Date_1,\n  DateTimeOffset: DateTimeOffset_1,\n  DateTimeOffsetNullable: DateTimeOffset_1,\n  DateTimeString: DateTimeOffset_2,\n  DateTimeOffsetString: DateTimeOffset_2,\n  DateString: Date_1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify Text Files\nDESCRIPTION: Git attributes configuration to ensure verified text files use line-feed endings and UTF-8 encoding for consistent comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Code to initialize the DiffPlex functionality for better diff visualization in Verify tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure correct line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set end-of-line and encoding settings for verified files to ensure consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Capturing Verify Results\nDESCRIPTION: YAML configuration for a GitHub Actions step that uploads received files as artifacts when tests fail, helping with debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Test Scenarios in JSON\nDESCRIPTION: This JSON object defines a set of test scenarios with keys composed of letter, number, and boolean combinations. The values are string representations of these combinations. This structure can be used for parameterized testing or configuration-driven test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.Three.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : b1True,\n  b, 1, False: b1False,\n  b, 2, True : b2True,\n  b, 2, False: b2False,\n  b, 3, True : b3True,\n  b, 3, False: b3False,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Condition Flag in Azure DevOps Pipeline\nDESCRIPTION: YAML task that sets a flag to publish Verify's *.received.* files when test step fails. Uses the Azure DevOps condition system to only run when previous steps have failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to globally install the DiffEngineTray tool, which provides a system tray utility for monitoring and managing snapshot test differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files, ensuring consistent formatting across systems.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task to copy Verify's *.received.* files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Failed Test Artifacts\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step that collects all .received files and uploads them as build artifacts. This allows for inspection of test failures in the AppVeyor environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor for Verify Artifacts\nDESCRIPTION: PowerShell script to push .received files as artifacts in AppVeyor on build failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Staging Directory in Azure DevOps\nDESCRIPTION: Azure DevOps pipeline task that copies all *.received.* files to the artifact staging directory when tests fail. Only runs when the publishverify variable has been set to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool CLI Utility\nDESCRIPTION: CLI command to install the Verify.Tool global tool, which provides command-line utilities for managing Verify snapshots outside of the test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file. This is required for examples to compile correctly without needing to reference Verifier.Verify() explicitly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for NUnit testing with Verify framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit V3\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references needed for using Verify with Fixie test framework. Includes Fixie 4.1.0 and the Verify.Fixie 29.2.0 integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to set up Verify with XunitV3 testing framework, including the test SDK, Verify.XunitV3, and the xunit runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto Testing\nDESCRIPTION: Commands to add necessary NuGet packages to the .NET test project for using Expecto and VerifyTests. These packages include YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto for facilitating test operations. Run these commands inside the test project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify testing with XUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Serialized Exception Object in JSON Format\nDESCRIPTION: JSON representation of an exception object containing the exception type, message, and stack trace. The stack trace shows the error originated in SerializationTests.MethodThatThrows() and includes runtime method handling information.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NestedTargetInvocationException.DotNet7_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  exception: {\n    Type: Exception,\n    Message: the message,\n    StackTrace:\nat SerializationTests.MethodThatThrows()\nat System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\nat System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a JsonAppender in Verify\nDESCRIPTION: This snippet demonstrates how to register a JsonAppender that will append additional JSON content to verification output. The example shows a lambda function that adds a 'Key' with value 'Value' to the output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/jsonappender.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nVerifierSettings.RegisterJsonAppender(_ => new KeyValuePair<string, object>(\"Key\", \"Value\"));\n```\n\n----------------------------------------\n\nTITLE: Enabling Combination Test Headers Globally in C# using Verify\nDESCRIPTION: This C# code snippet defines a static method `EnableIncludeHeaders` decorated with the `ModuleInitializer` attribute. This ensures the method runs once when the module loads, calling `CombinationSettings.IncludeHeaders()` to globally enable the inclusion of headers in the output of all Verify combination tests within the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void EnableIncludeHeaders() =>\n    CombinationSettings.IncludeHeaders();\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: YAML configuration for Azure DevOps to publish *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for handling Verify's received files in Azure DevOps pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Module with ModuleInitializer - C#\nDESCRIPTION: Initializes Verify.DiffPlex for inline text diff visualization by adding a module initializer. This static method, tagged with [ModuleInitializer], automatically configures DiffPlex when the assembly loads. Place this code in a static class within the project. Requires .NET 5+ for module initializers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling DiffPlex Integration in Verify - C#\nDESCRIPTION: Declares a module initializer that calls VerifyDiffPlex.Initialize(), enabling DiffPlex-based diffing when snapshot test differences are encountered. Place in a C# file of the test project. Requires the Verify.DiffPlex package and .NET 5.0 or newer for [ModuleInitializer] support. Initialization is static and done per assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Appending External File in Verify Test\nDESCRIPTION: Demonstrates how to append an external file (sample.png) to a verification test. This creates two verified files - one with the original content and another with the appended file content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/append-file.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task AppendFile() =>\n    Verify(\"Foo\", settings)\n        .AppendFile(\"sample.png\");\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for Short Key Response\nDESCRIPTION: This JSON snippet defines a nested object structure for a short key response. It includes a 'short' object containing a 'key' object, which in turn has a 'code' of 0 and a 'msg' indicating 'No action taken'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.IgnoreJTokenByName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"short\": {\n    \"key\": {\n      \"code\": 0,\n      \"msg\": \"No action taken\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and MSTest in .NET CLI\nDESCRIPTION: Commands to add required NuGet packages for Verify and MSTest to the test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify and Expecto testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with XUnit V3\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with XUnit V3 in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages with dotnet CLI for Fixie\nDESCRIPTION: Commands to add the required NuGet packages for Verify and Fixie to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify.Expecto Integration - Shell\nDESCRIPTION: Installs the necessary NuGet packages via the dotnet CLI to enable snapshot testing using Verify with the Expecto test runner. Requires that you are in the root directory of your test project and have the .NET SDK installed. This step ensures dependencies YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto are made available for your project configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages TUnit and Verify.TUnit to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Expecto\nDESCRIPTION: Command to add necessary NuGet packages (YoloDev.Expecto.TestSdk, Expecto, Verify.Expecto) to the test project using the .NET CLI. This is a prerequisite for using Verify with the Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Initialize Verify.DiffPlex to enable inline text difference highlighting for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified/Received Files\nDESCRIPTION: Specifies recommended EditorConfig rules to enforce encoding, newline, and whitespace conventions for '*.verified.*' and '*.received.*' files. Ensures editors handle encoding as UTF-8 with BOM and line endings as LF, prevents extra trailing newlines. Place in an .editorconfig file at the project or repo root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Uploading Received Files as AppVeyor Artifacts on Failure\nDESCRIPTION: Configures an AppVeyor build (`appveyor.yml`) using the `on_failure` step to execute a PowerShell script. The script (`ps: Get-ChildItem ...`) finds all `*.received.*` files recursively within the build workspace and uploads them as build artifacts using the `Push-AppveyorArtifact` command. This makes the differing received files easily accessible for debugging failed builds in AppVeyor.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Module Initialization - C#\nDESCRIPTION: This snippet shows how to enable Verify.DiffPlex diff engine integration via a module initializer method in C#. This allows Verify to use DiffPlex for inline diff highlighting when comparisons fail. Requires .NET 5+ for [ModuleInitializer] and the Verify.DiffPlex NuGet package. Place this code in a static class accessible by your test suite; no parameters are needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Object Literals in JavaScript\nDESCRIPTION: This snippet shows how to define a JavaScript object with multiple properties, including strings and arrays. No external dependencies are required; it can be used directly in any JavaScript runtime environment. The properties \\'target\\', \\'theData\\', and \\'duplicate\\' are set with example values, where \\'duplicate\\' contains an array of two variables. Useful as a template for configuration or data state representation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/JsonAppenderTests.WithDuplicate.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  target: TheValue,\n  theData: theValue,\n  duplicate: [\n    value1,\n    value2\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verification Test Results JSON Structure\nDESCRIPTION: A complete JSON structure showing test verification results, including file comparison details and paths to received and verified files. The structure contains a message for display and a structured result object tracking files that don't match.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.WithMessage.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\nNotEqual:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n  - Received: ExceptionParsingTests.Fake.received.bin\n    Verified: ExceptionParsingTests.Fake.verified.bin\n\nFileContent:\n\nNotEqual:\n\nReceived: ExceptionParsingTests.Fake.received.txt\nVerified: ExceptionParsingTests.Fake.verified.txt\nCompare Result:\nTheMessage\n\nReceived: ExceptionParsingTests.Fake.received.bin\nVerified: ExceptionParsingTests.Fake.verified.bin\nCompare Result:\nTheMessage\n\n,\n  result: {\n    NotEqual: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      },\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.bin,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.bin\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex for Inline Diff Output - Shell\nDESCRIPTION: Shows the shell command to add the Verify.DiffPlex NuGet package to a .NET project. This package enables inline diff highlighting for string comparison failures in Verify snapshot tests. Requires the dotnet CLI and modifies your project to use the improved DiffPlex-based diff engine. Input: run command in the terminal at the project root. Output: Adds Verify.DiffPlex package and updates NuGet references.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .csproj\nDESCRIPTION: XML configuration to enable implicit usings in the project file. This allows usage of Verify() without explicit importing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Copying Received Files\nDESCRIPTION: Azure DevOps pipeline YAML configuration that copies *.received.* files to the artifact staging directory when tests fail, preparing them for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify - Shell\nDESCRIPTION: Installs all required packages for a test project using the dotnet CLI. The dependencies include the NUnit test framework, an appropriate test SDK, an NUnit adapter for test discovery, and the Verify.NUnit integration. The shell commands assume the .NET SDK is installed and target a compatible test project folder. Executing these commands ensures the project is properly configured for running and verifying NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps (YAML)\nDESCRIPTION: This YAML snippet defines a task to copy *.received.* files to the artifact staging directory. It's conditional on the publishverify flag set in the previous step, ensuring files are only copied when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Filename in TUnit (Fluent Approach)\nDESCRIPTION: Demonstrates how to ignore specific parameters when generating the verified file name using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(\"Foo\")\n    .IgnoreParametersForVerified(_ => new[] {\"param1\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git attributes configuration to ensure verified files have consistent line endings and encoding in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code demonstrates how to run Verify checks in an MSTest class to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Date and Time Property Mappings in JSON\nDESCRIPTION: This JSON object defines mappings for various date and time-related properties, including DateTime, Date, Time, and DateTimeOffset. It includes named, instance-specific, nullable, and string representations of these types.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDateTimeInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DateTime\": \"DateTime_1\",\n  \"NamedDateTime\": \"namedDateTime\",\n  \"InstanceNamedDateTime\": \"instanceNamedDateTime\",\n  \"DateTimeNullable\": \"DateTime_2\",\n  \"Date\": \"Date_1\",\n  \"NamedDate\": \"Date_1\",\n  \"InstanceNamedDate\": \"instanceNamedDate\",\n  \"Time\": \"Time_1\",\n  \"TimeString\": \"Time_1\",\n  \"NamedTime\": \"namedTime\",\n  \"InstanceNamedTime\": \"instanceTime\",\n  \"DateNullable\": \"Date_2\",\n  \"NamedDateTimeOffset\": \"namedDateTimeOffset\",\n  \"InstanceNamedDateTimeOffset\": \"instanceNamedDateTimeOffset\",\n  \"DateTimeOffset\": \"DateTimeOffset_1\",\n  \"DateTimeOffsetNullable\": \"DateTimeOffset_2\",\n  \"DateTimeString\": \"DateTimeOffset_3\",\n  \"DateTimeOffsetString\": \"DateTimeOffset_3\",\n  \"DateString\": \"Date_2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet tool - Shell\nDESCRIPTION: Provides the CLI command to install DiffEngineTray globally using the dotnet command-line interface. DiffEngineTray assists with snapshot file management by running in the Windows tray and letting users easily accept or reject changes. Execute this command in your terminal or shell; it requires .NET Core SDK installed. No code changes are needed in your project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Handling for Verified Files in .gitattributes\nDESCRIPTION: Sets Git attributes for various verified text file extensions (`.txt`, `.xml`, `.json`). It enforces line endings (`eol`) as `lf` (line feed) and the working tree encoding as `UTF-8` to maintain consistency with Verify's output format and prevent cross-platform issues.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Getting Current Filename in Verify.NET Tests\nDESCRIPTION: This code retrieves the current file name in the context of a Verify.NET test. It demonstrates how to access the filename of the test being executed, which can be useful for verification processes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/TheFileName.verified/target.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFileName\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for NUnit - C#\nDESCRIPTION: This code block registers the Verify.DiffPlex text comparison plugin for NUnit-based tests by invoking VerifyDiffPlex.Initialize inside a static ModuleInitializer. Requires the Verify.DiffPlex NuGet package and C# 9 or later for the ModuleInitializer attribute. No parameters required; it globally activates enhanced diff output in all tests within the assembly. Outputs richer inline-diff details on assertion failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a .NET Global Tool - Shell\nDESCRIPTION: Explains how to install the DiffEngineTray application as a global .NET tool via the command line. DiffEngineTray integrates with Windows to monitor verification snapshots and assist with test output file acceptance or rejection. No dependencies aside from having the .NET CLI (dotnet) installed. This is an optional CLI step to enhance the developer workflow for snapshot-based testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Key-Value Pairs in JSON\nDESCRIPTION: This snippet defines a JSON object with three key-value pairs. The keys are A, b, and C, while the values are a, b, and c respectively. Note that the keys are not consistently capitalized.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.One.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  A: a,\n  b: b,\n  C: c\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding across all environments, using LF line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Failure Artifact Configuration\nDESCRIPTION: PowerShell script for AppVeyor to capture and upload received files as artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Gitattributes Configuration for Verified Files\nDESCRIPTION: Git text settings for verified files to ensure consistent line endings (LF) and UTF-8 encoding across different platforms and environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Setting Azure DevOps Variable on Test Failure (YAML)\nDESCRIPTION: This Azure DevOps pipeline task (CmdLine@2) runs only if a previous step (presumably the test runner) has failed (`condition: failed()`). It sets a pipeline variable `publishverify` to `Yes`, which can be used in subsequent steps to conditionally publish verification artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in MSBuild Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies the usage of Verify methods without explicit namespace imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Verifying File with Additional Info in C#\nDESCRIPTION: This example shows how to use VerifyFile with an optional 'info' parameter to add more context to the test. The info parameter is serialized to JSON.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-file.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task VerifyFileWithInfo() =>\n    VerifyFile(\n        \"sample.txt\",\n        info: \"the info\");\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Verify Files Publication on Test Failure in Azure DevOps\nDESCRIPTION: This YAML task creates a flag variable when tests fail, which will trigger the publishing of Verify's .received files. It uses the Azure DevOps condition failed() to execute only when the previous test step has failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages via dotnet CLI - shell\nDESCRIPTION: Installs the required NuGet packages for integrating Xunit and the Verify library into a .NET test project. These commands assume dotnet CLI is available and target the test project. Dependencies installed are Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and the xunit.runner.visualstudio adapter. No files are modified other than project references.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package Verify.Xunit\\ndotnet add package Xunit\\ndotnet add package xunit.runner.visualstudio\\n\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps: Publish Received Files as Build Artifacts (YAML)\nDESCRIPTION: This YAML step publishes the previously staged '.received' files as build artifacts if the 'publishverify' variable is 'Yes'. It uses the PublishBuildArtifacts@1 task to store the snapshots for inspection or download from Azure DevOps build output. Place this after the CopyFiles@2 step.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\\n  displayName: 'Publish Verify *.received.* files as Artifacts'\\n  name: 'verifypublish'\\n  condition: eq(variables['publishverify'], 'Yes')\\n  inputs:\\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\\n    ArtifactName: 'Verify'\\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running VerifyChecks in a Fixie Test - C#\nDESCRIPTION: Defines a C# test class using Fixie, containing a single test that calls VerifyChecks.Run() on the assembly. This ensures snapshot and text file conventions are enforced. Requires the Verify.Fixie library and its dependencies. Designed for direct inclusion in test projects; inputs/outputs depend on project verification conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    public Task Run() =>\\n        VerifyChecks.Run(GetType().Assembly);\\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Dictionary Operations in Python\nDESCRIPTION: This code snippet tests various dictionary operations in Python, including creation, accessing and modifying elements, and using dictionary methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.DerivePaths.Tests/Tests.ThrowOnConflict.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\nassert my_dict[\"a\"] == 1\nassert \"b\" in my_dict\nassert \"d\" not in my_dict\nassert len(my_dict) == 3\n\nmy_dict[\"d\"] = 4\nassert my_dict == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\ndel my_dict[\"a\"]\nassert my_dict == {\"b\": 2, \"c\": 3, \"d\": 4}\nassert list(my_dict.keys()) == [\"b\", \"c\", \"d\"]\nassert list(my_dict.values()) == [2, 3, 4]\nassert list(my_dict.items()) == [(\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\npopped = my_dict.pop(\"b\")\nassert popped == 2\nassert my_dict == {\"c\": 3, \"d\": 4}\n\nmy_dict.update({\"e\": 5, \"f\": 6})\nassert my_dict == {\"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\n\nmy_dict.clear()\nassert my_dict == {}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps YAML for Publishing Verify Received Files\nDESCRIPTION: YAML configuration for Azure DevOps to publish *.received.* files as artifacts when tests fail, aiding in debugging and verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Treating Unused Pure Method Return Values as Errors - .editorconfig\nDESCRIPTION: This snippet adds a rule to the .editorconfig file instructing ReSharper to treat situations where the return value of a pure method (such as Verify()) is not used as an error. This enforces best practices and reduces mistakes in snapshot-based test code. It requires ReSharper or Rider as the editor.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is important for Verify's usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command line instruction for installing the DiffEngineTray tool globally using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting up Verify with XUnit in .NET\nDESCRIPTION: A basic setup example showing how to use Verify with XUnit for snapshot testing. The test demonstrates comparing a simple Person object against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineGuidsEndingInNewline2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"1 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration - Verify Library - csharp\nDESCRIPTION: Shows how to initialize the Verify.DiffPlex extension within a .NET project by declaring a [ModuleInitializer] method. The static method ensures DiffPlex-powered diffing is enabled for all Verify assertions. Requires C# 9+ and the Verify.DiffPlex package. The code should be placed in the test assembly and will execute automatically at module load time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Text Files\nDESCRIPTION: This `.editorconfig` section defines standard settings for text-based received and verified files (JSON, TXT, XML). It enforces UTF-8 with BOM encoding, LF line endings, and prevents trailing newlines or whitespace trimming, ensuring consistency when editing these files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore pattern to exclude received test files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Tests\nDESCRIPTION: Git configuration to exclude received files from version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies usage of Verify by allowing direct calls to Verify() without fully qualifying the method name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.XunitV3 NuGet Packages (csproj)\nDESCRIPTION: Specifies the necessary NuGet package references for a .NET test project using Verify with Xunit v3. This includes the core test SDK, the Verify.XunitV3 integration library, the Visual Studio test runner adapter for Xunit, and the Xunit v3 framework itself.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with Expecto in F#\nDESCRIPTION: An F# sample test that demonstrates how to use Verify with Expecto. The test creates a person object and verifies its content using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings for Verify Files\nDESCRIPTION: Provides EditorConfig settings to ensure consistency when editing text-based `*.received.*` or `*.verified.*` files (specifically .json, .txt, .xml). It enforces UTF-8 with BOM encoding, LF line endings, and prevents adding a final newline or trimming trailing whitespace.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex with NuGet - XML\nDESCRIPTION: This XML snippet adds the Verify.DiffPlex package reference to a .NET project file, enabling inline text diffing capabilities in VerifyTests. The 'Include' attribute specifies the package, and 'Version' may be set to a specific value or left as '*' for the latest. Ensure that your project is compatible with this dependency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie for Verify Integration\nDESCRIPTION: A TestProject class implementing ITestProject and IExecution interfaces to properly configure Fixie for use with Verify, including target assembly assignment and test execution state management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Module Initialization - C#\nDESCRIPTION: Initializes the Verify.DiffPlex extension at assembly load time using the ModuleInitializer attribute. Ensures that the inline difference highlighting customization is automatically applied to all snapshot tests. Requires C# 9.0 or greater and the Verify.DiffPlex package. No parameters; must appear in a C# source file in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Copying Verify's .received Files to Azure DevOps Artifact Staging Directory\nDESCRIPTION: A YAML task that copies all .received files to the artifact staging directory. This step is conditionally executed based on the publishverify variable set in the previous task, ensuring files are only staged when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie TestProject for Verify in C#\nDESCRIPTION: Implements ITestProject and IExecution interfaces to configure Fixie for use with Verify. It sets up the target assembly and wraps test executions with ExecutionState.Set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in TUnit Test - C#\nDESCRIPTION: Implements a TUnit test class with a single test that executes VerifyChecks.Run(). This call ensures all repository and text file conventions recommended by Verify are correctly configured in the current environment. Dependencies: Verify.TUnit and TUnit frameworks. Outputs a Task; test passes if checks succeed, fails otherwise.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Test]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Map in JSON\nDESCRIPTION: This JSON object defines a map with integer keys (2 and 1) associated with integer values (5678 and 1234). This structure is commonly used for storing simple data mappings or configurations.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.SortedDictionaryInt.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  2: 5678,\n  1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Global Member Ignoring in C# Verify Tests\nDESCRIPTION: This snippet shows how to globally ignore members in Verify tests. It demonstrates ignoring for all types, specific types, and using expressions at a global level.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n// For all types\nVerifierSettings.IgnoreMember(\"PropertyByName\");\n\n// For a specific type\nVerifierSettings.IgnoreMember(typeof(IgnoreExplicitTarget), \"Property\");\n\n// For a specific type generic\nVerifierSettings.IgnoreMember<IgnoreExplicitTarget>(\"Field\");\n\n// For a specific type with expression\nVerifierSettings.IgnoreMember<IgnoreExplicitTarget>(_ => _.PropertyThatThrows);\n```\n\n----------------------------------------\n\nTITLE: Installing the DiffEngineTray Tool (.NET Shell)\nDESCRIPTION: This shell command installs the DiffEngineTray tool globally using the dotnet CLI. DiffEngineTray provides a Windows tray interface for reviewing and accepting/rejecting snapshot differences. Run this command once per machine to enable visual diff monitoring. No special parameters required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package, which enhances the text comparison output by highlighting differences inline rather than showing full content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Yaml for Handling Test Failures\nDESCRIPTION: This YAML configuration for Azure DevOps adds a task that sets a flag indicating test failure, which is used later to conditionally copy and publish Verify's received files as build artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML snippet showing how to enable Implicit Usings in the project file, which is required for using the Verify() method directly without qualifying it with Verifier class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: Provides EditorConfig settings (`.editorconfig`) to maintain consistency when editing Verify's text-based received or verified files (e.g., `.json`, `.txt`, `.xml`). It specifies charset (`utf-8-bom`), line endings (`lf`), prevents trailing newline/whitespace, and unsets indentation rules for these specific file types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line interface for more flexible snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool which enables managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining Nested JSON Object Structure\nDESCRIPTION: This snippet shows a JSON object with three main items, each containing nested objects. It demonstrates different value types including null, simple string values, and multiple key-value pairs.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringDictionary.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  item2: {\n    key: null\n  },\n  item4: {\n    key: value\n  },\n  item8: {\n    key1: value1,\n    key2: value2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which provides a Windows tray application for monitoring and managing snapshot changes. This tool helps to streamline the workflow of accepting or rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet tool (Shell)\nDESCRIPTION: This command installs the DiffEngineTray .NET global tool, which provides a Windows tray application for monitoring and managing Verify snapshot changes (accepting/rejecting). Installation is optional but recommended.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Text File Convention for Files Without Extensions\nDESCRIPTION: Demonstrates how to use AddTextFileConvention to treat specific files without extensions as text files during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-directory.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void InitTextFileConvention() =>\n    FileExtensions.AddTextFileConvention(\n        path =>\n        {\n            var name = Path.GetFileName(path);\n            return name.Equals(\"TextDocWithoutExtension\", StringComparison.OrdinalIgnoreCase);\n        });\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie TestProject for Verify\nDESCRIPTION: This code implements the ITestProject and IExecution interfaces to configure Fixie for use with Verify. It sets up the target assembly and wraps test executions with ExecutionState.Set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced difference visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Demonstrates how to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for improved text comparison results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the VerifyDiffPlex functionality using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading .received files as artifacts when tests fail in GitHub Actions\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail, aiding in debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: GitHub Actions workflow configuration for uploading .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - .NET Project File - xml\nDESCRIPTION: This snippet adds the Verify.DiffPlex package with version wildcard to a .NET project, which enables advanced inline diffing for snapshot failures. It should be inserted into the same .csproj as the test framework and Verify integration. DiffPlex enhances the developer experience for snapshot differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Text Files\nDESCRIPTION: This EditorConfig snippet provides settings for text editors to maintain consistency when editing Verify's snapshot files (`*.received.*` and `*.verified.*` with common text extensions). It enforces UTF-8 with BOM encoding, LF line endings, and prevents trailing whitespace or final newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with VerifyChecks - csharp\nDESCRIPTION: Implements a minimal Xunit test class that runs 'VerifyChecks.Run()' to validate project and repository conventions for Verify snapshot testing. Requires Verify.Xunit and its dependencies, as well as Xunit in the test project. The method returns a Task which the Xunit attribute will handle asynchronously.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\\n{\\n    [Fact]\\n    public Task Run() =>\\n        VerifyChecks.Run();\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify \".received\" Files from Source Control (.gitignore)\nDESCRIPTION: This snippet shows the recommended .gitignore pattern for excluding all '*.received.*' snapshot files generated by Verify from being checked into source control. These files represent transient, unverified test outputs and should not be committed. Pattern is to be added to .gitignore at the repository root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Text Files - ini\nDESCRIPTION: An .editorconfig block customizing encoding, EOLs, and whitespace for all received and verified JSON, TXT, and XML files. Ensures consistent file formatting standards during editing and prevents automatic addition of trailing newlines or whitespace trimming.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Checking Project Conventions with VerifyChecks (C#)\nDESCRIPTION: References a C# code snippet (`VerifyChecksExpecto`) demonstrating how to invoke `VerifyChecks.Run()` within an Expecto test method. This function checks if project conventions (like source control includes/excludes and text file settings defined elsewhere) are correctly configured, ensuring consistency.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksExpecto\n// This snippet likely contains C# code similar to:\n// [Tests]\n// public static Test tests = test \"Conventions\" {\n//    VerifyChecks.Run();\n// }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with XUnit v3\nDESCRIPTION: A complete example of a Verify test using XUnit v3. The test demonstrates how to create a simple Person object and verify its serialized form using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n\npublic class Person\n{\n    public string GivenNames { get; set; }\n    public string FamilyName { get; set; }\n    public string Spouse { get; set; }\n    public Address Address { get; set; }\n}\n\npublic class Address\n{\n    public string Street { get; set; }\n    public string Country { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex Module Initialization - CSharp\nDESCRIPTION: Implements a module initializer in C# to programmatically enable the VerifyDiffPlex text diffing extension within your test suite. This static method must be placed in a class inside your test project. Requires Verify.DiffPlex and Verify.Expecto as dependencies. Automatically configures custom diffing behavior for all Verify operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify Integration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to properly configure Fixie for use with Verify, including setting up the target assembly and execution state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Initialization (C#)\nDESCRIPTION: This C# code snippet shows how to globally enable the Verify.DiffPlex integration. It uses the `[ModuleInitializer]` attribute to ensure the `VerifyDiffPlex.Initialize()` method is called automatically when the assembly loads, activating the inline text difference highlighting feature for all Verify tests within the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Test Failure in Azure DevOps\nDESCRIPTION: This YAML snippet adds a build step that sets a flag when the test runner fails. It uses the CmdLine@2 task with a failed() condition to set a variable 'publishverify' to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project - Project XML\nDESCRIPTION: This snippet enables Implicit Usings in a .NET project file to simplify code and ensure all Verify examples compile without explicit using directives. Set the <ImplicitUsings> project property to 'enable' in your .csproj. If not enabled, usages of Verify() may need to be replaced with Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Inline Highlighting - C#\nDESCRIPTION: Initializes Verify.DiffPlex in the test project, enabling inline text difference highlighting for verification failures. The code defines a static initializer method, marked with the [ModuleInitializer] attribute, which calls VerifyDiffPlex.Initialize(). This should be placed in any source file in the test project and depends on Verify.DiffPlex being installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Disabling ReSharper Orphaned Process Detection\nDESCRIPTION: Configuration for ReSharper to disable orphaned process detection, which otherwise interrupts diff tool operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Build Artifacts in Azure DevOps Pipeline\nDESCRIPTION: This YAML task publishes the staged .received files as build artifacts when the 'publishverify' variable is set to 'Yes'. It creates an artifact named 'Verify' containing all the .received files generated during failed tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentNullException Verification Structure in JSON\nDESCRIPTION: A JSON structure that defines the expected properties of an ArgumentNullException for test verification purposes. It includes the exception type, error message, parameter name, and a partial stack trace for validation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsInheritedArgumentException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ArgumentNullException,\n  Message: The Message,\n  ParamName: The parameter,\n  StackTrace: at ThrowsTests.MethodThatThrowsArgumentNullException()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - XML\nDESCRIPTION: A package reference entry for adding Verify.DiffPlex NuGet package for improved diffing output. Should be included in test project .csproj to enable inline text difference highlighting. Specify version as desired.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit and Verify NuGet Packages in C#\nDESCRIPTION: This snippet shows the NuGet package references required for using Verify with Xunit in a C# project. It includes Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which provides improved text comparison output when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which helps monitor and manage snapshot changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Key-Value Structure\nDESCRIPTION: Defines a JSON object with three entries, each having numeric values. The entries are named Entry_1, Entry_2, and Entry_3.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DontOrderDictionaries.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Entry_1: 1234,\n  Entry_3: 1234,\n  Entry_2: 5678\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: Configures the project to use implicit usings, which simplifies code by automatically including common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Verified/Received Text Files (.editorconfig)\nDESCRIPTION: Recommends EditorConfig settings to maintain encoding and newline consistency for verified and received snapshot files. These properties help prevent editors from introducing unwanted changes—such as trailing newlines, altered encoding, or whitespace—to verified snapshots. Adjust the file extension patterns as needed for other supported text file formats.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: EditorConfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Task for Setting Flag on Test Failure\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline task that sets a flag when tests fail, enabling the subsequent tasks to publish received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample VerifyBase Usage in Test Class - C#\nDESCRIPTION: A test class inheriting from VerifyBase, demonstrating an alternative way to opt-in to Verify's MSTest integration. Uses Verify method inherited from base. Requires Verify.MSTest, and optionally the source generator attribute. 'Simple' test verifies a string constant.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\\npublic class VerifyBaseUsage :\\n    VerifyBase\\n{\\n    [TestMethod]\\n    public Task Simple() =>\\n        Verify(\\\"The content\\\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining .NET Project Name and Framework Version (JSON-like Configuration)\nDESCRIPTION: This configuration snippet specifies essential properties for a .NET project. The 'Name' key is assigned the value 'Net', representing the project's identifier. The 'NameAndVersion' key is set to 'Net4_8', indicating that the project targets the .NET Framework version 4.8. Although resembling JSON, the keys lack quotes, suggesting a custom or simplified configuration format possibly used by a build or testing tool.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NamerTests.FrameworkName.Net4_8.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Name: Net,\n  NameAndVersion: Net4_8\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixie Test Project for Verify\nDESCRIPTION: Implements ITestProject and IExecution interfaces to configure Fixie for use with Verify, including target assembly assignment and test execution wrapping.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Pattern for Verify Snapshot Receive Files - Shell\nDESCRIPTION: This snippet is for .gitignore configuration. It ensures that all files matching the pattern *.received.* are excluded from source control, preventing temporary snapshot files from polluting the repository. Add this line to your .gitignore file at the root of your Git repository. There are no dependencies; this is a plain text pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for AppVeyor to capture and upload received files as artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project Configuration\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for simplified syntax when using Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Combination Results Converter\nDESCRIPTION: Implementation of the default combination results converter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationResultsConverter.cs\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex Integration for Inline Diffs (csproj and C#)\nDESCRIPTION: Demonstrates both how to add the Verify.DiffPlex NuGet package and initialize it within test code to get inline text diffing on failure. Requires adding the package reference in .csproj and executing VerifyDiffPlex.Initialize in a C# ModuleInitializer. Input: csproj line and static C# method. Output: enhanced diff reporting during test failures. Limitation: Only altering diff behavior for textual comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture .received Files on Test Failure\nDESCRIPTION: This PowerShell script is added to the AppVeyor configuration as an on_failure build step. It recursively finds all .received.* files and uploads them as AppVeyor artifacts, making test failures easier to diagnose.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Defining Character Mappings (JSON-like)\nDESCRIPTION: This snippet defines a data structure, potentially intended as JSON, mapping the forward slash ('/') and backslash ('\\\\') characters to themselves. It might be used for configuration purposes related to path separators or character escaping/normalization. Note that the values '/' and '\\\\' are not standard JSON types unless enclosed in quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/CombinationTests.KeysWithInvalidPathChars.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  /: /,\n  \\\\: \\\\\n}\n```\n\n----------------------------------------\n\nTITLE: Module Initializer to Enable DiffPlex - csharp\nDESCRIPTION: Defines a C# module initializer method that configures Verify to use DiffPlex for diffs. Place this code in any static class within the test assembly. Requires C# 9\\+ and .NET 5\\+ to support [ModuleInitializer], and the Verify.DiffPlex package must be installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\\npublic static void Initialize() =>\\n    VerifyDiffPlex.Initialize();\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Array with Simple Objects\nDESCRIPTION: This JSON snippet defines an array containing two objects. Each object has a single key-value pair (`name1: value1` and `name2: value2`). This structure is commonly used for representing lists of items or configurations in JSON format. Note: Standard JSON requires keys to be enclosed in double quotes (e.g., \"name1\").\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.MultipleIdentifier.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    name1: value1\n  },\n  {\n    name2: value2\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File (XML)\nDESCRIPTION: This XML snippet shows how to enable the Implicit Usings feature in a .NET project file (e.g., .csproj or .fsproj). Setting `<ImplicitUsings>` to `enable` allows the compiler to automatically include common global using directives, which is required for many VerifyTests examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.MSTest NuGet Packages in csproj\nDESCRIPTION: Adds the necessary NuGet packages (`Microsoft.NET.Test.Sdk`, `MSTest`, `Verify.MSTest`) to an MSTest project file (`.csproj`) to enable testing with the Verify framework. These packages provide the core testing SDK, the MSTest framework, and the Verify integration for MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This task copies all *.received.* files to the artifact staging directory. It only executes when the 'publishverify' variable is set to 'Yes'. The task uses wildcards to select files and cleans the target folder before copying.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/build-server-azuredevops.include.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool using .NET CLI - Shell\nDESCRIPTION: This shell command installs the Verify.Terminal global tool via the .NET CLI. Verify.Terminal allows command-line management of verification snapshots independently of any IDE. The tool is installed globally using the -g flag and can then be invoked in any terminal session. No further parameters are required after installation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Build Artifacts\nDESCRIPTION: Publishes the staged .received files as build artifacts for inspection. This task is conditionally executed only when tests have failed and the publishverify flag is set, making the verification results available in the build artifacts section.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the Verify.DiffPlex NuGet package dependency to a C# project file (.csproj). Including this package enables enhanced text comparison capabilities within Verify, showing inline differences instead of just outputting full received and verified strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging on Azure DevOps\nDESCRIPTION: This YAML snippet copies Verify *.received.* files to the Artifact Staging directory. It runs only if the publishverify flag is set to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: CLI command to install the global DiffEngineTray tool, which monitors pending changes in snapshots and provides mechanisms for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in Xunit\nDESCRIPTION: Example implementation of Verify checks in Xunit. This test class runs verification checks to ensure file conventions are followed correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a Global .NET Tool - Shell\nDESCRIPTION: This shell command installs DiffEngineTray globally via the .NET CLI, allowing it to monitor and manage VerifyTests snapshot diffs from the Windows tray. The '-g' flag ensures the tool is available for all projects on the system. Requires the .NET SDK installed and available on the PATH.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Serialization Structure in JSON\nDESCRIPTION: This snippet outlines the structure for serializing exception information. It includes fields for the exception type, message, and stack trace. The stack trace shows the method call hierarchy leading to the exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TargetInvocationException.DotNet7_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Type: Exception,\n  Message: the message,\n  StackTrace:\nat SerializationTests.MethodThatThrows()\nat InvokeStub_SerializationTests.MethodThatThrows(Object, Object, IntPtr*)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which changes the text compare result to highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Testing Security Commands in PowerShell\nDESCRIPTION: This script executes various security-related commands to verify their functionality. It includes commands for security verification, system scanning, and other security operations. The script appears to be testing whether these commands work properly, possibly before and after installing a security product.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/VerifyDirectoryTests.WithDirectoryWithInfo/target#01.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ninfo from FileConverter\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in xUnit v3\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an xUnit v3 test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: This snippet provides a complete example of a Verify test using TUnit. It demonstrates how to create a test method, use the Verify attribute, and perform assertions on a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class Tests\n{\n    [Test]\n    public Task TestPerson()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            },\n            Children = new List<string>\n            {\n                \"Sam\",\n                \"Mary\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Values in HOCON\nDESCRIPTION: This snippet demonstrates setting configuration parameters using a HOCON (Human-Optimized Config Object Notation) or similar format. It defines a top-level key 'Key2' with the value 'Value4' and a nested structure 'Include' containing 'Key1' with the value 'Value2'. This configuration is likely loaded by an application at runtime.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.IgnoreDictionaryByPredicate.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\n{\n  Include: {\n    Key1: Value2\n  },\n  Key2: Value4\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Pure Method Return Value Usage in Rider/Resharper (.editorconfig)\nDESCRIPTION: Configures Rider/Resharper via `.editorconfig` to treat the non-usage of a return value from methods marked with `[Pure]` (like Verify methods) as an error. This helps catch potential bugs where verification results are ignored.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Setting Azure DevOps Variable on Test Failure\nDESCRIPTION: Defines an Azure DevOps pipeline task (`CmdLine@2`) that runs only if the previous step failed (`condition: failed()`). It executes a script to set a pipeline variable `publishverify` to `Yes`, used later to control artifact publishing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Tool using Shell\nDESCRIPTION: This command installs the `DiffEngineTray` .NET global tool using the dotnet CLI. DiffEngineTray provides a system tray interface on Windows to monitor and manage pending snapshot changes generated by Verify tests, allowing users to easily accept or reject them. Requires the .NET SDK to be installed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a Global .NET Tool (shell)\nDESCRIPTION: Provides the .NET CLI command for installing DiffEngineTray globally. DiffEngineTray runs in the Windows system tray and assists in accepting or rejecting snapshot changes interactively during test runs. It is optional but recommended for developers using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Test Method for Browser Automation in Java\nDESCRIPTION: A TestNG test method that opens a specific browser, navigates to Google.com, verifies the page title, and then searches for a term. The browser type is passed as a parameter and the method handles browser initialization through the selectBrowserDriver method.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/VerifyDirectoryTests.WithDirectory/target#00.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Test\n    public void BrowserTest(String browserName) {\n        // Select and initialize the browser driver\n        selectBrowserDriver(browserName);\n\n        // Navigate to a URL\n        driver.get(\"https://www.google.com\");\n\n        // Verify the page title\n        String pageTitle = driver.getTitle();\n        System.out.println(\"Page Title: \" + pageTitle);\n\n        // Perform a search\n        driver.findElement(By.name(\"q\")).sendKeys(\"Selenium WebDriver\");\n        driver.findElement(By.name(\"q\")).submit();\n\n        // Close the browser\n        driver.quit();\n    }\n```\n\n----------------------------------------\n\nTITLE: Uploading Received Files on Failure in GitHub Actions (YAML)\nDESCRIPTION: Provides a GitHub Actions workflow step configuration (YAML) to upload `*.received.*` files as build artifacts. This step runs only on failure (`if: failure()`) using the `actions/upload-artifact@v4` action, aiding in debugging Verify test failures in CI environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package for Enhanced Diffing - Shell\nDESCRIPTION: Installs the Verify.DiffPlex package to a .NET project, which enhances diffing by providing inline highlighting of changes when snapshot verification fails. Plug-in is optional but improves developer experience for string comparisons. Run in the test project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps Pipeline\nDESCRIPTION: This YAML snippet defines a task to copy all .received files to an artifact staging directory. It only executes if the publishverify flag is set to 'Yes', indicating a test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML snippet configures a step to copy all .received files to an artifact staging directory. It only executes if the publishverify flag is set to 'Yes', indicating a test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML snippet defines a task to copy all *.received.* files to the artifact staging directory. It only executes if the 'publishverify' flag is set to 'Yes', indicating that the test step failed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Defining Date Mappings in JSON\nDESCRIPTION: This JSON object maps date components (year, month, day) to formatted date strings. It provides a quick lookup for specific dates in February and March of 2020 and 2022.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.WithDontScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  2020, 2, 12: 2020-02-12,\n  2020, 2, 15: 2020-02-15,\n  2020, 3, 12: 2020-03-12,\n  2020, 3, 15: 2020-03-15,\n  2022, 2, 12: 2022-02-12,\n  2022, 2, 15: 2022-02-15,\n  2022, 3, 12: 2022-03-12,\n  2022, 3, 15: 2022-03-15\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DateTimeOffset Creation and Comparison in C#\nDESCRIPTION: This code snippet defines a test method that creates DateTimeOffset objects and verifies their equality and comparison behavior. It checks if two DateTimeOffset objects with the same date, time, and offset are considered equal.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimeOffsets_simple.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void DateTimeOffset_1()\n{\n    DateTimeOffset d1 = new DateTimeOffset(2009, 9, 8, 11, 45, 0, new TimeSpan(1, 0, 0));\n    DateTimeOffset d2 = new DateTimeOffset(2009, 9, 8, 11, 45, 0, new TimeSpan(1, 0, 0));\n    Assert.IsTrue(d1 == d2);\n    Assert.IsTrue(d1.Equals(d2));\n    Assert.AreEqual(0, d1.CompareTo(d2));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Offset Variable\nDESCRIPTION: A variable or constant named aDateTimeOffset_1, likely used in datetime validation tests\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimeOffsets_starting.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naDateTimeOffset_1\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with VerifyTests\nDESCRIPTION: A complete example showing how to implement a simple test using VerifyTests with TUnit. The test demonstrates verifying an object with custom settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    // Start with a clean verify settings\n    var settings = new VerifySettings();\n    \n    // Add scrubbers\n    settings.AddScrubber(s => s.Replace(\"John\", \"[Scrubbed]\"));\n    \n    // The type VerifyTUnit provides extension methods for TUnit\n    return Verifier.Verify(person, settings);\n}\n\npublic class Person\n{\n    public Person(string firstName, string lastName)\n    {\n        FirstName = firstName;\n        LastName = lastName;\n    }\n\n    public string FirstName { get; }\n    public string LastName { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for Type Serialization\nDESCRIPTION: This snippet defines a JSON structure for testing automatic type name handling in arrays. It features a parent type with a nested array where each element also contains type information, facilitating the verification of correct type deserialization. Prerequisites include a JSON serialization library that supports type annotations.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TypeNameHandlingInArray_typeHandling=All.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  $type: SerializationTests.TypeNameHandlingAutoInArrayTarget,\n  Item: {\n    $type: SerializationTests.TypeNameHandlingAutoInArrayItem[],\n    $values: [\n      {\n        $type: SerializationTests.TypeNameHandlingAutoInArrayItemChild\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for cleaner code by eliminating the need for explicit using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Text Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified files in source control, including line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified files with specific encoding and line ending settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to globally install the Verify.Terminal CLI tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex for Inline Text Diffing - C#\nDESCRIPTION: Initializes the VerifyDiffPlex integration at module startup using a C# ModuleInitializer method. This hook ensures that DiffPlex inline diffing is enabled automatically before tests run. It requires C# 9.0 or later, MSTest or compatible test runner, and a reference to the Verify.DiffPlex NuGet package. The static Initialize method should be included in a source file within the test project. No parameters are required, and no value is returned. Failure to initialize may result in standard, non-inline text diff behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging Directory\nDESCRIPTION: This YAML task copies all *.received.* files to the artifact staging directory when the publishverify flag is set to 'Yes'. It searches for these files across all directories and prepares them for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text difference highlighting. Uses ModuleInitializer to ensure initialization occurs at startup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Complete Sample XUnit Test Using Verify\nDESCRIPTION: A complete example of an XUnit test that uses the Verify framework to snapshot test a Person object with various properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyXunit;\n\n[UsesVerify]\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"1 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verifier.Verify(person);\n    }\n}\n\npublic class Address\n{\n    public string? Street { get; set; }\n    public string? Country { get; set; }\n}\n\npublic class Person\n{\n    public string? GivenNames { get; set; }\n    public string? FamilyName { get; set; }\n    public string? Spouse { get; set; }\n    public Address? Address { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Core Verify/Expecto NuGet Packages via dotnet CLI\nDESCRIPTION: Installs the required NuGet packages (YoloDev.Expecto.TestSdk, Expecto, Verify.Expecto) into the current .NET test project using the dotnet CLI. These packages are essential for integrating Verify snapshot testing capabilities with the Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify .received Files as Artifacts in Azure DevOps YAML\nDESCRIPTION: This YAML snippet defines a task to publish the staged .received files as build artifacts. It only executes if the publishverify flag is set to 'Yes', ensuring artifacts are only published when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool - .NET CLI - bash\nDESCRIPTION: Presents the command to install the verify.tool global .NET command-line utility. This utility helps manage Verify snapshots from the terminal, making it easier to update or audit snapshots outside the IDE. Requires the .NET SDK installed and available in PATH.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as .NET Tool - Shell Command\nDESCRIPTION: Demonstrates the shell command for installing the DiffEngineTray .NET global tool, which provides a GUI to accept or reject snapshot test diff results. Useful but optional; requires access to the dotnet CLI and may require administrative permission for global tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Source Control Ignore Pattern for Received Files (gitignore)\nDESCRIPTION: Shows the recommended .gitignore rule to exclude all received snapshot files (i.e., '*.received.*') from source control. Essential for keeping intermediate verification files out of version history. The pattern should be added to the project's .gitignore file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Basic String Value\nDESCRIPTION: A simple test string containing the word 'Value'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.Tests/Tests.stringTarget.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nValue\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configures the C# project file (`.csproj`) to enable Implicit Usings by setting the `ImplicitUsings` property to `enable`. This feature simplifies code by automatically including common namespaces, which is assumed by the documentation examples. If not enabled, `Verify()` calls need to be replaced with `Verifier.Verify()`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via dotnet CLI\nDESCRIPTION: This command uses the .NET CLI to add the optional Verify.DiffPlex package. This package enhances the text comparison output during test failures by highlighting differences inline, which is useful for large strings. It requires separate initialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This snippet shows a sample Xunit test using Verify. It demonstrates how to use the [Fact] attribute and the Verify() method to perform snapshot testing on a complex object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        },\n        Children = new List<string> {\"Sam\", \"Mary\"},\n        Guid = Guid.NewGuid(),\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider/ReSharper to Treat Pure Method Return Value as Error\nDESCRIPTION: EditorConfig setting to configure Rider and ReSharper to treat unused return values of pure methods as errors, which is important for Verify's usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider\nDESCRIPTION: Configuration to disable orphaned process detection in Rider, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Text Snapshots – EditorConfig\nDESCRIPTION: Sample EditorConfig section tailored for received and verified snapshot files. It specifies UTF-8 BOM encoding, LF line endings, and disables common whitespace/indent formatting, matching Verify recommendations. Place this in your .editorconfig file to aid consistent editing of snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitattributes for Verified Text Files\nDESCRIPTION: Defines Git attributes in `.gitattributes` to ensure consistent line endings (`lf`) and encoding (`UTF-8`) for verified text files (`*.verified.txt`, `*.verified.xml`, `*.verified.json`). This helps maintain consistency across different environments and collaborators.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initialize DiffPlex Integration for Improved Diff Display\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline rather than showing full content on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable Implicit Usings in the project file, which simplifies usage of the Verify API by allowing direct calls to Verify() without specifying the Verifier class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with Xunit. These include the .NET Test SDK, Verify.Xunit for snapshot testing, Xunit for the testing framework, and xunit.runner.visualstudio for test discovery and execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in XML\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to the project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks Test (C# with XunitV3)\nDESCRIPTION: Demonstrates how to create an Xunit test using `VerifyChecks.Run()` to automatically validate project conventions required by VerifyTests, such as `.gitignore` settings and file encodings. This helps ensure the project setup is correct.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Received Files in Source Control - .gitignore Syntax\nDESCRIPTION: Defines a pattern to exclude all files matching '*.received.*' from source control, helping prevent unintentionally committing intermediate test artifacts. Meant to be placed in the .gitignore file at the repository root. No dependencies or parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex using ModuleInitializer (C#)\nDESCRIPTION: Uses a `[ModuleInitializer]` attribute on a static `Initialize` method to call `VerifyDiffPlex.Initialize()`. This C# code ensures that the DiffPlex integration for VerifyTests is activated automatically when the test assembly loads, enabling inline text diff highlighting for all subsequent text comparisons without needing per-test setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Git Source Control\nDESCRIPTION: This `.gitignore` entry instructs Git to ignore all files ending with `.received.*`. These files are generated by VerifyTests during a test run and represent the actual output, which typically should not be committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via Dotnet Tool - Shell\nDESCRIPTION: Command to globally install DiffEngineTray, a utility that monitors snapshot file changes and eases review and acceptance of Verify diffs in the Windows system tray. Recommended but optional for smoother snapshot management. Must be installed using dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Testing\nDESCRIPTION: Git configuration to exclude .received.* files from source control. These files are generated during test execution when a snapshot test fails and should not be committed, while .verified.* files should be committed as they represent the expected outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Using Different Scrubber Levels in MSTest with Verify .NET (C#)\nDESCRIPTION: Demonstrates method and class-level scrubber configuration for MSTest tests using Verify .NET. Highlights reusable field settings and custom per-test scrubbing for flexible output management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/scrubbers.source.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class ScrubberLevelsSample\n{\n    static VerifySettings classSettings = new VerifySettings().ScrubLinesContaining(\"api-key\");\n\n    [TestMethod]\n    public Task MethodLevelScrubbing()\n    {\n        var settings = new VerifySettings().ScrubLinesContaining(\"token\");\n        return Verifier.Verify(someResult, settings);\n    }\n\n    [TestMethod]\n    public Task ClassLevelScrubbing()\n    {\n        return Verifier.Verify(someResult, classSettings);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair in JSON-like Format\nDESCRIPTION: This snippet defines an object with a single key 'Value' associated with the string value 'Value1'. Although resembling JSON, the lack of quotes around the key and value makes it technically invalid JSON standard but might be used in contexts allowing lenient parsing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableData_arg=Value1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value1\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DateTime Conversion Between Time Zones in C#\nDESCRIPTION: This test method demonstrates converting a DateTime from one time zone to another. It creates a DateTime in the Pacific Standard Time zone and converts it to Eastern Standard Time, asserting the correct conversion.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDateTimes_trailing.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[Test]\npublic void DateTime_ConvertTimeZone()\n{\n    var pacificTime = TimeZoneInfo.FindSystemTimeZoneById(\"Pacific Standard Time\");\n    var easternTime = TimeZoneInfo.FindSystemTimeZoneById(\"Eastern Standard Time\");\n    var dt = new DateTime(2010, 1, 1, 0, 0, 0);\n    var dtPacific = TimeZoneInfo.ConvertTime(dt, pacificTime);\n    var dtEastern = TimeZoneInfo.ConvertTime(dtPacific, pacificTime, easternTime);\n    Assert.That(dtEastern, Is.EqualTo(new DateTime(2010, 1, 1, 3, 0, 0)));\n}\n```\n\n----------------------------------------\n\nTITLE: Date/Time Replacement Structure in JSON\nDESCRIPTION: Defines a JSON object with four date/time related fields where actual values have been replaced with a placeholder value 'replaced'. Used for verification testing to ensure consistent date handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeScrubbingDisabled_ExplicitScrubber.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  dateTimeNoTime: replaced,\n  dateTimeWithTimeTime: replaced,\n  dateTimeOffsetNoTime: replaced,\n  dateTimeOffsetWithTime: replaced\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Data Structure in JSON\nDESCRIPTION: This JSON snippet defines an object with two key-value pairs. The 'Property' key has a string value 'Value', and the 'AsyncDisposed' key has a boolean value 'false'. This structure is commonly used for representing simple configurations or state information, possibly for testing purposes within the /verifytests/verify project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.TaskResultAsyncDisposable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value,\n  AsyncDisposed: false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool via dotnet CLI\nDESCRIPTION: This command uses the .NET CLI to install Verify.Terminal as a global tool. Verify.Terminal provides command-line utilities for managing Verify snapshot files (.received and .verified), which is an optional but helpful addition for CLI-focused workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via dotnet Tool - Shell\nDESCRIPTION: This shell command installs the DiffEngineTray utility using the dotnet CLI as a global tool. DiffEngineTray monitors snapshot comparison results and allows easy accept/reject workflows in Windows. Run this command in your terminal to enable tray integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Staging Directory in Azure DevOps\nDESCRIPTION: This task copies all .received files to the build artifact staging directory when the publishverify flag is set. It's configured to clean the target folder and overwrite existing files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a module initializer in C#. The `[ModuleInitializer]` attribute ensures the `VerifyDiffPlex.Initialize()` method runs automatically when the assembly loads, activating the enhanced diffing behavior for all Verify tests within the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Snapshot Management Tool - Shell\nDESCRIPTION: This shell command installs the Verify.Terminal dotnet tool globally, which provides command line utilities for managing Verify snapshot files. This tool is optional and can be installed on the developer's machine to review, accept, or reject snapshot updates outside of the IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: Adds the optional Verify.DiffPlex NuGet package to the project using the .NET CLI. This package enhances the text comparison output on verification failures by showing inline differences instead of just outputting the full received and verified strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing verify.tool Snapshot Utility (Shell)\nDESCRIPTION: Installs Verify.Terminal (verify.tool) as a global .NET tool, providing command line management of Verify snapshot files. Optional for environments where CLI-based snapshot handling is preferred. Requires .NET SDK.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration in C#\nDESCRIPTION: This C# code snippet demonstrates how to enable the Verify.DiffPlex integration. It uses a `ModuleInitializer` attribute to ensure the `VerifyDiffPlex.Initialize()` method is called automatically when the assembly loads, configuring Verify to use DiffPlex for text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Ignore Spawned Processes\nDESCRIPTION: DotSettings configuration to disable ReSharper's orphaned process detection, which would otherwise prompt to terminate diff tools launched during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Copying Files Based on Conditions in Azure YAML\nDESCRIPTION: This YAML snippet copies specific .received files to an artifact staging directory if the publishverify variable is set to 'Yes'. It requires Azure DevOps and familiarity with build pipeline conditions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration via Module Initializer in C#\nDESCRIPTION: Provides a C# code snippet demonstrating how to enable Verify.DiffPlex integration using a `[ModuleInitializer]`. The `VerifyDiffPlex.Initialize()` method call configures Verify to use DiffPlex for text comparisons globally within the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: C# code to initialize the Verify.DiffPlex extension, which enhances the text comparison behavior to show differences inline rather than showing complete received and verified content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: A sample test that runs VerifyChecks.Run() to validate that all the necessary Verify conventions are properly configured in the project. This helps ensure that the project follows best practices for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for Fixie test configuration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Counting at Instance Level\nDESCRIPTION: Code to disable the incremental date counting behavior and use a simpler scrubbing format for a specific instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nDisableDateCounting\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps (YAML)\nDESCRIPTION: This YAML snippet publishes the staged *.received.* files as build artifacts. Like the previous step, it's conditional on the publishverify flag, ensuring artifacts are only published when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Artifacts in Azure DevOps Pipeline\nDESCRIPTION: YAML task for Azure DevOps that publishes the staged *.received.* files as build artifacts, making them available for inspection when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. Verify.DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET SDK-style Projects - XML\nDESCRIPTION: This XML fragment ensures that Implicit Usings are enabled for SDK-style .NET projects, which is a prerequisite for many of the code examples in the documentation. Add this within your project file to prevent manual import errors and to allow usages of simplified test helper methods. If omitted, explicit namespace imports or usage of Verifier.Verify() in place of Verify() will be required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the C# project file, which is required for the correct compilation of Verify examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Gitignore Entry for Split Mode Directories - Shell\nDESCRIPTION: Suggests ignoring directories named '*.received/' when using the UseSplitModeForUniqueDirectory convention with Verify. This ensures that any per-test received output folders are excluded from source control. To be added to .gitignore alongside standard patterns. Only applies if the split mode feature is enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package for Verify\nDESCRIPTION: XML configuration to add the Verify.DiffPlex NuGet package for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for DiffPlex Integration\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to enable enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Expecto\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Expecto. It includes Verify.Expecto and Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Verified/Received Files - .editorconfig\nDESCRIPTION: Defines EditorConfig rules to preserve BOM, linefeeds (LF), and prevent addition of final newlines or unwanted whitespace in snapshot verification files. Insert into .editorconfig for editors that support EditorConfig standards. Adjust for additional file types as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Files\nDESCRIPTION: EditorConfig settings to ensure consistent behavior when editing verified and received files. Configures encoding, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Snapshots - EditorConfig\nDESCRIPTION: This snippet provides recommended .editorconfig settings for managing verified and received text files created by Verify. The settings enforce utf-8-bom charset, LF newlines, and no trailing newlines, optimizing editing consistency. Place this in your .editorconfig file. This requires only an EditorConfig-enabled IDE for effect.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for shorter syntax in test code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project\nDESCRIPTION: Adds configuration to enable implicit usings in a .NET project, which simplifies the syntax for using Verify by allowing direct calls to Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex for Inline Diff Highlighting (.NET CLI, shell)\nDESCRIPTION: Shows the dotnet add package command to install Verify.DiffPlex, which changes Verify's snapshot comparison output to inline-highlight text differences. It is an optional dependency that enhances the visual feedback in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package Reference\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Global Header Configuration\nDESCRIPTION: Setting up global header configuration for all combination tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalCombinationHeader\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in ReSharper/Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Pure Method Return Values\nDESCRIPTION: Configuration to add to .editorconfig file to treat unused return values of pure methods (like Verify) as errors, helping to catch cases where test assertions are not properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Constants in JSON-like Format\nDESCRIPTION: This snippet defines a set of DateTime constants using a custom JSON-like format. Each entry consists of a date (year, month, day) as the key, and a corresponding DateTime identifier as the value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/CombinationTests.WithScrubbed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON-like\nCODE:\n```\n{\n  2020, 2, 12: DateTime_1,\n  2020, 2, 15: DateTime_2,\n  2020, 3, 12: DateTime_3,\n  2020, 3, 15: DateTime_4,\n  2022, 2, 12: DateTime_5,\n  2022, 2, 15: DateTime_6,\n  2022, 3, 12: DateTime_7,\n  2022, 3, 15: DateTime_8\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Generated File Notice\nDESCRIPTION: HTML comment indicating this is an auto-generated file by MarkdownSnippets tool with instructions not to edit directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex Integration (C#)\nDESCRIPTION: Shows how to enable the Verify.DiffPlex integration using a `ModuleInitializer`. This static method calls `VerifyDiffPlex.Initialize()` at assembly load time to replace Verify's default text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool (dotnet CLI)\nDESCRIPTION: Shows the command to install the DiffEngineTray .NET global tool using the dotnet CLI. DiffEngineTray is an optional but recommended tool that runs in the system tray and helps manage snapshot comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting and encoding of verified and received files across different editors and environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: GitAttributes configuration for handling text file encodings and line endings\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files, ensuring consistent formatting across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files in version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: GitAttributes configuration for handling text file encodings and line endings\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Text Files\nDESCRIPTION: Set `*.verified.*` file attributes in `.gitattributes` to ensure consistent LF newlines and UTF-8 encoding, adhering to Verify conventions for verified files in source control. These settings help maintain project consistency across different environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig configuration to ensure proper handling of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper formatting of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for maintaining consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files, which should be added to the .gitattributes file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for maintaining consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Creating Object with DateTime Property - JavaScript\nDESCRIPTION: Defines a JavaScript object with a single property whose value is assigned from a dateTimeName variable. The object uses shorthand property notation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimes_named.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  value: dateTimeName\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify command-line tool for managing snapshots from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal with dotnet CLI\nDESCRIPTION: Install the Verify.Terminal tool globally with the .NET CLI, providing command-line capabilities for snapshot management. This utility is optional and suits command-line oriented workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Test Failure in Azure DevOps\nDESCRIPTION: A YAML task that sets a pipeline variable when tests fail, which will be used to conditionally publish Verify's .received files. This uses Azure DevOps' failed() condition to execute only when the previous test task fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Publish Flag on Test Failure in Azure DevOps\nDESCRIPTION: YAML configuration to set a flag variable when tests fail, enabling conditional publishing of Verify received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Structuring Verification Test Results in JSON\nDESCRIPTION: A JSON object representing verification test results. It contains a message field with directory information and file comparison details, and a result object listing new files that need verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.SingleNew.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\nNew:\n  - Received: ExceptionParsingTests.Fake.received.txt\n    Verified: ExceptionParsingTests.Fake.verified.txt\n\nFileContent:\n\nNew:\n\nReceived: ExceptionParsingTests.Fake.received.txt\ncontents\n\n,\n  result: {\n    New: [\n      {\n        Received: {ProjectDirectory}ExceptionParsingTests.Fake.received.txt,\n        Verified: {ProjectDirectory}ExceptionParsingTests.Fake.verified.txt\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package using dotnet CLI\nDESCRIPTION: Uses the `dotnet add package Verify.DiffPlex` command to add the optional Verify.DiffPlex NuGet package. This package enhances text comparison failures by showing inline differences instead of outputting the full received and verified content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Date Format Mapping in JSON\nDESCRIPTION: Maps date components (year, month, day) to ISO formatted dates (YYYY-MM-DD). Contains entries for dates in February and March of 2020 and 2022.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.WithDontScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  2020, 2, 12: 2020-02-12,\n  2020, 2, 15: 2020-02-15,\n  2020, 3, 12: 2020-03-12,\n  2020, 3, 15: 2020-03-15,\n  2022, 2, 12: 2022-02-12,\n  2022, 2, 15: 2022-02-15,\n  2022, 3, 12: 2022-03-12,\n  2022, 3, 15: 2022-03-15\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with XunitV3. This includes Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Verify Conventions Check (NUnit)\nDESCRIPTION: This placeholder represents the C# code required to run Verify's convention checks within an NUnit test. Typically involves calling `VerifyChecks.Run()`. The specific implementation is located in the 'VerifyChecksNUnit' snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsnippet: VerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces for configuring Verify with Fixie test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: Code to initialize Verify.DiffPlex which changes the text compare result to highlight text differences inline. This makes it easier to identify discrepancies between received and verified test content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool with .NET CLI - Shell\nDESCRIPTION: Globally installs the Verify.Terminal tool, a .NET CLI tool for managing snapshot files from the terminal. This tool is optional and provides command-line management and review of verification snapshots. Requires dotnet CLI; typically run from a shell with appropriate permissions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with MSTest. It includes Verify.MSTest for integration with MSTest, and Microsoft.NET.Test.Sdk for .NET test infrastructure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex as a NuGet Package\nDESCRIPTION: This snippet provides the XML code to add Verify.DiffPlex as a NuGet package, allowing the customization of text comparison output when using Verify in your test projects. No specific parameters are required, but ensure the Verify.DiffPlex package is compatible with your project's runtime environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for XUnit V3 and Verify\nDESCRIPTION: This snippet shows the NuGet package references required for using Verify with XUnit V3. It includes Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Verify Test with Xunit in C#\nDESCRIPTION: Presents a sample Xunit test class (`Sample`) with a test method (`Test`). It demonstrates the basic usage of `Verify(object)` to perform snapshot testing on the result of `ClassBeingTested.FindPerson()`. Assumes Implicit Usings is enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serialization Test Parameters (JSON-like)\nDESCRIPTION: This snippet defines configuration parameters, setting 'Type' to 'SerializationTests' and 'Dynamic' to 'dynamic'. This configuration is likely used to specify parameters for a serialization test scenario. Note: This is not strictly valid JSON as keys are not quoted and the value 'dynamic' is not a standard JSON type without quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.UseShortTypeName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: SerializationTests,\n  Dynamic: dynamic\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet package - XML\nDESCRIPTION: This XML snippet demonstrates how to add the Verify.DiffPlex package as a dependency within a .NET project file. By adding this dependency, users can enhance text comparison behavior in Verify so that differences are highlighted inline, rather than outputting entire string contents. Replace the version as appropriate for your requirements. No other prerequisites are needed beyond a standard .NET-compatible project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting a Value from a Binary Search Tree in Java\nDESCRIPTION: A recursive method to delete a specific value from a binary search tree. If the node to delete has two children, it finds the minimum value in the right subtree to replace the deleted node, maintaining the BST property. Returns the modified tree after deletion.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.DerivePaths.Tests/Relative/Tests.Test.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstatic Node delete(Node tree, int x) {\n    if (tree == null) return null;\n    if (x < tree.value) {\n        tree.left = delete(tree.left, x);\n        return tree;\n    }\n    if (x > tree.value) {\n        tree.right = delete(tree.right, x);\n        return tree;\n    }\n    // tree.value == x\n    if (tree.left == null) return tree.right;\n    if (tree.right == null) return tree.left;\n    tree.value = minValue(tree.right);\n    tree.right = delete(tree.right, tree.value);\n    return tree;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Verify Test Results\nDESCRIPTION: YAML configuration for GitHub Actions to upload any *.received.* files as artifacts when tests fail, helping with debugging failed snapshot tests in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Test Date Configuration in JSON\nDESCRIPTION: JSON configuration that specifies a UTC date timestamp for test verification purposes. Uses the format YYYY-MM-DD.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DontScrubDateTimes.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Date: 2020-10-10 Utc\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text difference visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig Settings for Verify Test Files\nDESCRIPTION: Editor configuration settings for verification files to ensure consistent file handling. These settings apply to received and verified files with json, txt, and xml extensions, configuring character encoding, line endings, and whitespace handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_15\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie in .NET CLI\nDESCRIPTION: Commands to add the required NuGet packages (Fixie and Verify.Fixie) to the test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XunitV3 and Verify\nDESCRIPTION: Lists the NuGet package references needed for using Verify with XunitV3, including the Microsoft test SDK, Verify.XunitV3, and xunit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload on Test Failure\nDESCRIPTION: This YAML snippet defines a GitHub Actions step that uploads test results artifacts when a build fails. It helps in capturing `.received.*` files for further inspection in case of test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for enhanced diff highlighting functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output for failed verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with XUnit v3, including the test SDK, Verify.XunitV3, xunit.v3 (prerelease), and the Visual Studio test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps Pipeline\nDESCRIPTION: YAML task for Azure DevOps that copies all *.received.* files to the artifact staging directory when tests fail, preparing them for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto with Verify\nDESCRIPTION: The essential NuGet package references to add to an F# test project to use Verify with Expecto. Includes YoloDev.Expecto.TestSdk, Expecto, FSharp.Core, and Verify.Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_None.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Global Tool via CLI\nDESCRIPTION: Installs the Verify.Terminal dotnet tool globally using the .NET CLI. This optional tool provides command-line utilities for managing Verify snapshot files (e.g., accepting received files, cleaning up unused verified files).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: This command uses the .NET CLI to add the Verify.DiffPlex NuGet package to the current project. This package integrates the DiffPlex library to provide inline text difference highlighting in test failure messages, improving readability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Task for Publishing Verification Artifacts\nDESCRIPTION: PublishBuildArtifacts task that publishes the staged *.received.* files as build artifacts when tests fail, making them available for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Writing a Sample Verify Test with Fixie\nDESCRIPTION: Demonstrates a basic Fixie test class `Sample` with a test method `Test`. The method calls a function `ClassBeingTested.FindPerson()` and uses `Verify(person)` to perform snapshot testing on the returned object. Assumes Implicit Usings are enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair in JSON\nDESCRIPTION: This snippet defines a simple object structure, likely representing data or configuration. It contains a single property named \\\"Property\\\" with the string value \\\"Value\\\". While not strictly valid JSON (keys should typically be quoted strings), this format represents a basic key-value data structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.TUnit.Tests/Tests.WithTargets.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as compiler errors. This helps catch cases where the result of Verify() is not awaited, which would cause tests to pass incorrectly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: C# code snippet showing a sample Verify test using Expecto. It demonstrates how to set up a test module, define a test case, and use the Verify.ThrowsTask method to verify an exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests\n\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet Tests =\n    testTask \"Test\" {\n        let exception = Assert.Throws(fun () -> raise (System.Exception(\"Foo\")))\n        do! Verifier.Verify(exception)\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File (MSBuild)\nDESCRIPTION: This XML snippet, intended for a C# project file (.csproj), enables the 'ImplicitUsings' feature. Enabling this is recommended as many Verify examples rely on it to avoid explicit `using` directives for common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in ReSharper Settings\nDESCRIPTION: DotSettings configuration to prevent ReSharper from showing prompts about processes spawned by the test runner, which is necessary when using diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Test Failure in Azure DevOps\nDESCRIPTION: This YAML task sets a flag variable when a test step fails. This flag is used to conditionally publish Verify's .received files as build artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code initializes Verify.DiffPlex, which changes the text compare result to highlight text differences inline. It uses a module initializer to ensure it's set up before any tests run.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Uploading .received Files on GitHub Actions Failure\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload any *.received.* files as artifacts if the build fails. It uses the actions/upload-artifact@v4 action with a failure() condition.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Directories in Split Mode - .gitignore\nDESCRIPTION: When using the UseSplitModeForUniqueDirectory convention, this line ensures that directories ending with '.received/' are excluded from source control. Place this line in your .gitignore to avoid tracking such directories if split mode is enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with Verify\nDESCRIPTION: Package references that need to be added to the test project's .csproj file to use Verify with Fixie. This includes the Fixie testing framework and the Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping Date Components to DateTime Variables in JSON\nDESCRIPTION: This snippet defines a JSON object that maps date components (year, month, day) to DateTime variables. It covers dates in February and March of 2020 and 2022.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.WithScrubbed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  2020, 2, 12: DateTime_1,\n  2020, 2, 15: DateTime_2,\n  2020, 3, 12: DateTime_3,\n  2020, 3, 15: DateTime_4,\n  2022, 2, 12: DateTime_5,\n  2022, 2, 15: DateTime_6,\n  2022, 3, 12: DateTime_7,\n  2022, 3, 15: DateTime_8\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DotNet Runtime and Version Configuration\nDESCRIPTION: This configuration snippet defines the execution environment for the project. It specifies that the project requires the .NET runtime (`runtime: DotNet`) and targets version 9.0 (`Version: 9.0`). This type of configuration is often used in build or project settings files.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NamerTests.GetRuntimeAndVersion.DotNet9_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  runtime: DotNet,\n  Version: 9.0\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Item with UUID and Variant\nDESCRIPTION: A JSON object that defines an item with UUID ebced679-45d3-4653-8791-3d969c4a986c. The structure contains a title field that includes the ID and a nested variant object that references the same identifier.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NotScrubInlineGuidsByDefault.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Title: item ebced679-45d3-4653-8791-3d969c4a986c - (ID={ebced679-45d3-4653-8791-3d969c4a986c}),\n  Variant: {\n    Id: variant id: ebced679-45d3-4653-8791-3d969c4a986c\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: This snippet shows a sample test using Verify with MSTest. It demonstrates how to use the [TestMethod] attribute, async Task return type, and the Verify() method to perform a verification test on a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic async Task TestPerson()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    await Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase Class with MSTest\nDESCRIPTION: This example shows how to use the VerifyBase class as a base class for test classes, which is one way to opt into Verify's source generator functionality without explicitly adding the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration at module load time using a C# ModuleInitializer. This ensures that DiffPlex is used for comparing text results in VerifyTests throughout the test assembly. The `[ModuleInitializer]` attribute requires C# 9 or later.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Core MSTest and Verify NuGet Packages using .NET CLI\nDESCRIPTION: This command adds the necessary NuGet packages to a .NET test project for using MSTest and Verify.MSTest. It includes the test SDK, MSTest adapter and framework, and the core Verify integration package for MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet defines a simple object-like structure with a single key 'Value' assigned the value 'Value1'. It represents a basic data structure, potentially used for configuration or testing, although it lacks proper JSON string quoting around the key and value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberNullableDataFluent_arg=Value1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value1\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Class Being Tested Example\nDESCRIPTION: Shows a modified version of the ClassBeingTested with a changed Age property value, which would cause verification tests to fail due to the difference from the stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ClassBeingTested\n{\n    public string? Title { get; set; }\n    public string? Name { get; set; }\n    public int Age { get; set; }\n    public DateTimeOffset DateOfBirth { get; set; } = new(2001, 1, 1, 0, 0, 0, TimeSpan.Zero);\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended .gitattributes Settings for Verify Testing Framework\nDESCRIPTION: The recommended .gitattributes configuration for the Verify testing framework. These settings ensure that verified output files are handled with consistent line endings (LF) and UTF-8 encoding, which is critical for cross-platform test verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/InnerVerifyChecksTests/VerifyChecksTests.GitAttributes.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: gitattributes\nCODE:\n```\n# Verify\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Setting Up EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings for verified and received files to ensure consistent formatting with UTF-8 BOM encoding, LF line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: This gitattributes configuration ensures that text-based verified files use consistent line endings (LF) and UTF-8 encoding, which is required for reliable verification across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing verify.tool for Command-Line Snapshot Management - Shell\nDESCRIPTION: Provides the dotnet CLI command to globally install verify.tool, which adds command-line management for snapshot verifications. This tool is optional and assists with snapshot file oversight without requiring direct IDE interaction.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_None.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Placeholder for NUnit NuGet Packages\nDESCRIPTION: This placeholder indicates where the necessary NuGet packages for using VerifyTests with NUnit should be added to the test project file (.csproj). The actual package references are defined in the 'nunit-nugets' snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsnippet: nunit-nugets\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex NuGet package, which enhances text comparison behavior by highlighting differences inline rather than outputting full content on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: ReSharper Configuration for Orphaned Process Detection\nDESCRIPTION: Configuration for the solution-wide settings file to disable ReSharper's orphaned process detection, which would otherwise interrupt the diff tool processes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Data Structure in JavaScript\nDESCRIPTION: This code snippet demonstrates creating a JavaScript array containing a single object with one key (name2) mapped to a variable or value (value).\nNo external dependencies are required. This structure is typically used for mock data, configuration, or as test seed data. The array can be expanded to include multiple objects, and values can be static or reference existing variables, but in its current state, it serves as a simple data illustration.\nOutputs the array as an in-memory object; there is no I/O or transformation logic included.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.ClearIdentifier.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    name2: value\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Key-Value Structure with Nested Object\nDESCRIPTION: A minimal JSON configuration with a nested object structure. It contains a single top-level key with a nested message indicating 'No action taken'. This pattern is commonly used in configuration files or API responses.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonString.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  key: {\n    msg: No action taken\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff output in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal globally as a dotnet tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool - Shell\nDESCRIPTION: Shows the shell command to globally install the Verify.Terminal utility as a .NET global tool. This tool can be used to manage and review Verify snapshot files directly from the terminal. Prerequisites: dotnet CLI must be installed and in the PATH. Key parameter: '-g' for global installation. Input: run in terminal. Output: Installs verify.tool for command line usage, available in user\\'s PATH.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: Defines how editors should handle verified or received files with specific characteristics, ensuring consistent text file formatting across development environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Solution to Disable Orphaned Process Detection\nDESCRIPTION: DotSettings configuration to prevent Rider/ReSharper from showing prompts about processes spawned by tests, which is necessary when using Verify with diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify convention checks in an MSTest test class. It uses the TestClass and TestMethod attributes to create a test that runs the VerifyChecks.Run() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task VerifyChecks() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in MSTest\nDESCRIPTION: This snippet shows a complete example of a Verify test using MSTest. It demonstrates how to use the Verify() method to compare a target object against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Text Comparison\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which changes the text compare result to highlight text differences inline. This is done using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: This code snippet shows how to create a test method that verifies if all Verify conventions are being followed correctly in the project, which is useful for ensuring consistent configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper for Orphaned Process Detection\nDESCRIPTION: Settings to add to solution DotSettings file to disable ReSharper's orphaned process detection, preventing unwanted prompts when Verify launches diff tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Install Verify.Terminal Tool\nDESCRIPTION: Install Verify.Terminal, a command line tool for managing snapshots. It's optional but allows interaction with snapshots directly from the terminal. Make sure .NET SDK is installed to use the dotnet tool command.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML snippet to be added to the .csproj file to enable the Implicit Usings feature in .NET. This feature automatically includes common global using directives, reducing boilerplate code. Enabling this is recommended for the provided examples.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration\nDESCRIPTION: Uses a C# Module Initializer (`[ModuleInitializer]`) to automatically call `VerifyDiffPlex.Initialize()` when the assembly loads. This step is necessary to activate the inline text diffing functionality provided by the `Verify.DiffPlex` package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files in .gitignore\nDESCRIPTION: Provides `.gitignore` patterns to prevent VerifyTests received files (`*.received.*`) from being committed to Git source control. An additional pattern (`*.received/`) is included for projects using the `UseSplitModeForUniqueDirectory` naming convention.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool which helps monitor pending changes in snapshots and provides a mechanism for accepting or rejecting those changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI. DiffEngineTray is a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Provides an example of an Xunit test method that uses Verify. This test demonstrates how to use Verify to compare actual results with expected results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify testing with Fixie. These packages are the core dependencies needed to get started with snapshot testing using the Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: A complete example of an Expecto test using Verify. The test creates a simple Person object and verifies its serialized form against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet Test() =\n    task {\n        let person = Person(\"John\", \"Smith\")\n        do! Verifier.Verify(person)\n    }\n\ntype Person(firstName, lastName) =\n    member _.FirstName = firstName\n    member _.LastName = lastName\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Adds the Verify.DiffPlex package to a project file, enabling enhanced diff capabilities for text comparisons. Requires NuGet package management setup. The package reference does not specify a version number, allowing flexibility in versioning.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Adds the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3 (prerelease), and xunit.runner.visualstudio (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure showing the path from home to current page and available build server options\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_TUnit.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Linux](Linux.md) > [Other](Linux_Other.md) > [Prefer GUI](Linux_Other_Gui.md) > [TUnit](Linux_Other_Gui_TUnit.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Linux_Other_Gui_TUnit_AppVeyor.md)\n * [GitHub Actions](Linux_Other_Gui_TUnit_GitHubActions.md)\n * [Azure DevOps](Linux_Other_Gui_TUnit_AzureDevOps.md)\n * [No build server](Linux_Other_Gui_TUnit_None.md)\n```\n\n----------------------------------------\n\nTITLE: Set Azure DevOps flag for Verify received files\nDESCRIPTION: Configures Azure DevOps to publish 'received' files as build artifacts when a test step fails. This involves setting a variable flag checked in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Test Results\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload *.received.* files as artifacts when tests fail. It uses the actions/upload-artifact action with a condition to run only on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This snippet sets a flag variable when the test runner step fails. It uses a CmdLine task with a failed() condition to set the 'publishverify' variable to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/build-server-azuredevops.include.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Better Diff Visualization\nDESCRIPTION: C# code to initialize Verify.DiffPlex in a project, which changes the text comparison behavior to highlight differences inline, making it easier to spot changes in large text snippets.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Defining Test Arguments in JSON\nDESCRIPTION: This JSON-like structure defines two key-value pairs: 'arg1' is assigned the string 'Value1', and 'arg2' is assigned the number 1. This configuration is likely used as input parameters or expected data for a test case within the '/verifytests/verify' project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/TestFixtureSourceUsageWithNamespace.Test_arg1=Value1_arg2=1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  arg1: Value1,\n  arg2: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool for Snapshot Management\nDESCRIPTION: Command to install DiffEngineTray, a global dotnet tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes through the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps Pipeline (YAML)\nDESCRIPTION: This YAML snippet adds a command line task to the pipeline that sets a flag variable when the test runner fails. It uses the Azure DevOps task.setvariable command to set a 'publishverify' variable to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received text files in editors, maintaining consistent encoding and line ending behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package for Improved Diff Output\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline rather than showing full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verified Files\nDESCRIPTION: EditorConfig settings to ensure that verified and received text files are properly formatted with UTF-8 BOM, line feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify.Tool globally, which provides command-line utilities for managing snapshot files and verification workflows.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify Testing with NUnit\nDESCRIPTION: Commands to add required NuGet packages for setting up Verify testing with NUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which helps manage snapshot changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: This code snippet initializes the VerifyDiffPlex module, enabling inline text difference highlighting during verification in Xunit tests. This setup requires including the VerifyDiffPlex library in your project and should be called once at application startup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Git - Shell\nDESCRIPTION: This gitignore snippet ensures that all files matching '*.received.*' are excluded from source control. It prevents accidental addition of intermediate or transient files generated during verification tests. Add this to your repository's .gitignore.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files on Test Failure in Azure DevOps YAML\nDESCRIPTION: This YAML snippet adds a command line task to set a flag when the test runner fails. It uses the Azure DevOps condition 'failed()' to trigger the flag setting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with Expecto\nDESCRIPTION: Example of a complete Verify test using Expecto. This demonstrates how to write a test that verifies an object's serialized form against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyTest () =\n    task {\n        let person = Person(GivenNames = \"John\", FamilyName = \"Smith\", Spouse = \"Jill\", Address = Address(Street = \"1 Puddle Lane\", Country = \"USA\"))\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure editors respect the conventions required for verified and received files, including encoding, line endings, and whitespace handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Process for Linux Applications\nDESCRIPTION: This code snippet shows the typical process for manually installing applications from source in Linux/Unix. It involves downloading the source archive, extracting it, configuring the build, compiling, and installing the software.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.Date.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget http://example.com/app-1.0.tar.gz\ntar -xzf app-1.0.tar.gz\ncd app-1.0\n./configure\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Fixie Test Project Configuration\nDESCRIPTION: Implementation of ITestProject and IExecution interfaces to configure Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class TestProject :\n    ITestProject,\n    IExecution\n{\n    public void Configure(TestConfiguration configuration, TestEnvironment environment)\n    {\n        VerifierSettings.AssignTargetAssembly(environment.Assembly);\n        configuration.Conventions.Add<DefaultDiscovery, TestProject>();\n    }\n\n    public async Task Run(TestSuite testSuite)\n    {\n        foreach (var testClass in testSuite.TestClasses)\n        {\n            foreach (var test in testClass.Tests)\n            {\n                if (test.HasParameters)\n                {\n                    foreach (var parameters in test\n                                 .GetAll<TestCase>()\n                                 .Select(_ => _.Parameters))\n                    {\n                        using (ExecutionState.Set(testClass, test, parameters))\n                        {\n                            await test.Run(parameters);\n                        }\n                    }\n                }\n                else\n                {\n                    using (ExecutionState.Set(testClass, test, null))\n                    {\n                        await test.Run();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Members That Throw Exceptions with Expression in C#\nDESCRIPTION: Demonstrates how to configure Verify to ignore members that throw exceptions based on both the exception type and a specific expression. This allows for more granular control over which exceptions are ignored.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/members-throw.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIgnoreMembersThatThrow<Exception>(\n    x => x.Message.Contains(\"Ignore me\"));\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Verified Files\nDESCRIPTION: Git attribute settings to ensure verified files use the correct line endings (LF) and UTF-8 encoding regardless of platform, maintaining consistency across environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: Example test method using Verify with Fixie to demonstrate how to write a snapshot test. This sample shows the basic pattern of creating a value and verifying it against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VerifyChecks for Expecto\nDESCRIPTION: Set up a test case to run VerifyChecks, which checks conventions for the Verify framework. This ensures that all necessary conventions are followed in the test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest with Verify Implementation\nDESCRIPTION: A complete example of an MSTest class that uses Verify for snapshot testing. The sample shows how to structure a test class and implement a verification test with optional settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyTests;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n[TestClass]\npublic class Tests\n{\n    [TestMethod]\n    public Task Test()\n    {\n        return Verify(\"Some Text\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify Test Artifacts\nDESCRIPTION: YAML configuration that sets up Azure DevOps to capture and publish *.received.* files when tests fail, making it easier to diagnose verification failures in the pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: A complete example of an Expecto test using Verify for snapshot testing. Shows how to structure tests, use the Verify extension methods, and organize tests in the Expecto framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmodule Tests\n\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testList \"Tests\" [\n        testTask \"Test\" {\n            let person = new Person(\"John\", \"Smith\")\n            do! Verifier.Verify(person)\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool via CLI\nDESCRIPTION: Command to install the DiffEngineTray global tool. DiffEngineTray is a Windows tray application that monitors pending snapshot changes and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Step for Copying Received Files\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline step that copies received files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify with MSTest in your test project. These packages include the test SDK, MSTest adapters and framework, and the Verify MSTest integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Defining a Key-Value Object in JSON-like Format\nDESCRIPTION: This code snippet defines a JSON-like structure with four key-value pairs. It demonstrates different value types including a variable named 'Result', a reference to another variable 'a', an exception message, and a simple string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.WithCaptureExceptions.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  a: Result,\n  A: a,\n  b: ArgumentException: B is not allowed.,\n  C: c\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Initialization in C#\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a C# ModuleInitializer. This ensures that DiffPlex is enabled for all Verify tests within the assembly, replacing the default text comparison behavior with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider Settings\nDESCRIPTION: Solution configuration to prevent Rider from showing dialogs about processes spawned by tests that remain running (such as diff tools).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files on Test Failure\nDESCRIPTION: PowerShell script for the AppVeyor on_failure event that finds all *.received.* files and uploads them as build artifacts for easier debugging of test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Unique Identifier String for Configuration/Framework/Version\nDESCRIPTION: This string represents a configuration setting or naming convention ensuring uniqueness based on assembly configuration, target framework, and version. It is likely used within the context of the '/verifytests/verify' project, possibly for naming build artifacts or test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NamerTests.UniqueForAssemblyConfigurationAndUniqueForTargetFrameworkAndVersion.DotNet10_0.Release.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUniqueForAssemblyConfigurationAndUniqueForTargetFrameworkAndVersion\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex using ModuleInitializer in C#\nDESCRIPTION: Demonstrates how to enable Verify.DiffPlex integration using a `ModuleInitializer`. The `Initialize` method calls `VerifyDiffPlex.Initialize()` to configure Verify to use DiffPlex for text comparisons globally within the test assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code that initializes the Verify.DiffPlex plugin using a module initializer, which configures Verify to use DiffPlex for highlighting text differences inline in test failure messages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages for setting up Verify with XunitV3 in a test project, including the test SDK, Verify.XunitV3, and xunit runner packages with prerelease versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages for Verify\nDESCRIPTION: Required NuGet packages for using Verify with MSTest. This includes Microsoft.NET.Test.Sdk, MSTest.TestAdapter, MSTest.TestFramework, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"22.1.1\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie NuGet Packages to Test Project\nDESCRIPTION: A list of NuGet package references needed for Verify with Fixie testing framework. Includes the core Verify package, Fixie integration, and MSTest settings to work with the test runner.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the .NET CLI. DiffEngineTray monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Text Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files. Sets text files to use line-feed endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent handling of verified and received files in text editors, including character encoding and line ending specifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up Verify Checks for Expecto Tests\nDESCRIPTION: A code example showing how to implement convention checks for Verify in an Expecto test project. The test runs VerifyChecks.Run to ensure all Verify conventions are being followed correctly in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings that ensure verified and received files maintain consistent formatting with utf-8 encoding with BOM, line feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XunitV3\nDESCRIPTION: Code snippet demonstrating how to run the Verify conventions check in a test using XunitV3. The test calls VerifyChecks.Run() which validates that all necessary conventions are correctly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent editing behavior for verified and received files, including charset, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: This C# code snippet provides a sample Xunit test that uses Verify to compare a Person object. It demonstrates the basic structure of a Verify test in Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"4 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for MSTest Projects\nDESCRIPTION: NuGet package references required for using Verify with MSTest. These packages provide the core functionality for snapshot testing with the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"22.1.4\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified Files\nDESCRIPTION: This shell code configures EditorConfig to ensure consistency in text file settings, such as charset and end-of-line conventions, for 'received' and 'verified' files in various formats.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize the DiffPlex integration with Verify. This provides a more readable diff output when verification fails by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[<ModuleInitializer>]\nlet Initialize() =\n    VerifyDiffPlex.Initialize()\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Testing\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Xunit. It includes Xunit, Verify.Xunit, and Microsoft.NET.Test.Sdk packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.1.0\" />\n<PackageReference Include=\"Xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit NuGet Packages for Verify Testing in C#\nDESCRIPTION: Required NuGet package references to add to the test project to enable Verify functionality with NUnit. These packages provide the core Verify functionality and NUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"19.14.1\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: This C# code snippet demonstrates how to run Verify conventions check using Expecto. It creates a test case that calls VerifyChecks.Run() on the assembly containing the test class.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit v3 NuGet Packages for Verify\nDESCRIPTION: This snippet shows the NuGet package references required for using Verify with XUnit v3. It includes packages for XUnit, Verify, and Verify.Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.8.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a global dotnet tool that sits in the Windows tray and monitors pending changes in snapshots, providing a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, ensuring that calls to Verify() are properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verify Test with Expecto in F#\nDESCRIPTION: Sample F# test that demonstrates how to verify the output of a test using Verify with Expecto. This shows the basic pattern for writing verification tests in Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package. This package enhances Verify's text comparison by highlighting text differences inline, making it easier to understand verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: This C# snippet registers the VerifyDiffPlex module initializer to set up Verify.DiffPlex, which enhances text difference visualization for Verify tests. Requires the Verify.DiffPlex package and is executed once when the application domain is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, Verify.XunitV3, and XUnit V3 packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package with .NET CLI - Shell\nDESCRIPTION: Adds the Verify.DiffPlex package to the test project using the .NET CLI. This package customizes text comparison for snapshot verification, highlighting inline differences and reducing output verbosity for large strings. Should be installed after the main Verify package. No parameters needed; run in the project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore patterns for excluding received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper Solution Settings for Verify\nDESCRIPTION: DotSettings configuration to prevent ReSharper from prompting to terminate child processes spawned by tests, which is necessary for diff tools to function.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: A complete example of a NUnit test using Verify to perform snapshot testing. This demonstrates how to define a test, prepare test data, and verify the results against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verifier.Verify(person);\n}\n\npublic record Person(string FirstName, string LastName);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Object\nDESCRIPTION: A basic JSON object with a single key-value pair. The object contains a property named 'Property' with an associated value 'Value'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/Tests.WithTargets.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET Tool\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is a Windows tray application that monitors and manages snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: This code snippet demonstrates how to run a Verify conventions check using Xunit. It creates a fact test that calls VerifyChecks.Run() to ensure all conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for TUnit and Verify\nDESCRIPTION: NuGet package references that need to be added to the test project to enable Verify with TUnit testing. Includes both the TUnit test framework and the Verify.TUnit integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with MSTest. It includes packages for Verify, Verify.MSTest, and Microsoft.NET.Test.Sdk.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"MSTest.TestAdapter\" Version=\"3.0.4\" />\n<PackageReference Include=\"MSTest.TestFramework\" Version=\"3.0.4\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize the Verify.DiffPlex plugin which enhances text comparison outputs by highlighting differences inline, making test failures easier to understand.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for XUnit v3 with Verify\nDESCRIPTION: Required NuGet packages for integrating Verify testing framework with XUnit v3. This includes the core Verify packages along with XUnit integration packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Xunit\" Version=\"2.6.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.4\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool (Bash)\nDESCRIPTION: Executes the `dotnet tool install` command with the `-g` flag to install `verify.tool` as a global .NET tool. This tool allows managing VerifyTests snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure using markdown links to guide users through different setup options for Verify testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Visual Studio](Windows_VisualStudio.md) > [Prefer CLI](Windows_VisualStudio_Cli.md) > [Fixie](Windows_VisualStudio_Cli_Fixie.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Windows_VisualStudio_Cli_Fixie_AppVeyor.md)\n * [GitHub Actions](Windows_VisualStudio_Cli_Fixie_GitHubActions.md)\n * [Azure DevOps](Windows_VisualStudio_Cli_Fixie_AzureDevOps.md)\n * [No build server](Windows_VisualStudio_Cli_Fixie_None.md)\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an MSTest environment. It uses the [TestMethod] attribute to define a test method and calls VerifyChecks.Run() to execute the verification process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit v3 NuGet Packages for Verify Tests in C#\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with XUnit v3. It includes Verify.Xunit and Microsoft.NET.Test.Sdk packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.3.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Step for Publishing Received Files\nDESCRIPTION: YAML configuration for an Azure DevOps pipeline step that publishes received files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files\nDESCRIPTION: GitHub Actions workflow step to upload *.received.* files as artifacts when tests fail, which is crucial for debugging verification failures in CI environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts on Azure DevOps\nDESCRIPTION: This YAML snippet publishes the staged Verify *.received.* files as build artifacts. It runs only if the publishverify flag is set to 'Yes'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for simplified code by using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Store Received Files as Artifacts\nDESCRIPTION: AppVeyor build configuration step that automatically uploads any *.received.* files as artifacts when a build fails, making it easier to diagnose test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Defining Person Data Structure in JSON-like Format\nDESCRIPTION: This snippet defines a data structure for a person, including their name, spouse status, address, and date of birth. The structure uses a JSON-like format with some non-standard syntax for date representation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/VerifyObjectSamples.ScopedSerializer.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: null,\n  Address: null,\n  Dob: 2000-10-01 +0\n}\n```\n\n----------------------------------------\n\nTITLE: Setup and Initialization of DiffPlex with Verify\nDESCRIPTION: A .NET module initializer that configures Verify to use Verify.DiffPlex for more intuitive diff outputs. This setup is crucial for enhanced visual understanding of differences in test verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks for XUnit\nDESCRIPTION: Code snippet showing how to implement verification checks in XUnit by calling VerifyChecks.Run() method, which ensures that all verification conventions are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksXunit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: Adds the Verify.DiffPlex NuGet package to the project using an XML PackageReference element in the .csproj file. This package enhances text comparison by showing inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: A sample C# test class demonstrating how to use Verify with Xunit. The test gets a person object from a class being tested and verifies it against a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values from Pure methods as errors, which helps catch cases where Verify() calls aren't properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with MSTest\nDESCRIPTION: Sample code showing how to implement a convention check using Verify with MSTest. This test ensures that all Verify conventions are properly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() => \n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure showing the path and build server options for Fixie test configuration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Other](Windows_Other.md) > [Prefer CLI](Windows_Other_Cli.md) > [Fixie](Windows_Other_Cli_Fixie.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Windows_Other_Cli_Fixie_AppVeyor.md)\n * [GitHub Actions](Windows_Other_Cli_Fixie_GitHubActions.md)\n * [Azure DevOps](Windows_Other_Cli_Fixie_AzureDevOps.md)\n * [No build server](Windows_Other_Cli_Fixie_None.md)\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Test Using Verify\nDESCRIPTION: A sample test class demonstrating how to use Verify with XUnit V3. It includes a test method that verifies an object using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Test Results in GitHub Actions\nDESCRIPTION: Configures a GitHub Actions step to upload *.received.* files as artifacts when tests fail. This helps in debugging failed Verify tests in CI/CD pipelines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool\nDESCRIPTION: Installs the `verify.tool` .NET tool globally using the dotnet CLI. Verify.Terminal provides command-line utilities for managing Verify snapshot files (e.g., accepting or rejecting changes). This tool is optional.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentException Data Structure in JSON\nDESCRIPTION: A JSON-like structure that represents an ArgumentException with its key properties. It captures the exception type, error message, parameter name that caused the exception, and the stack trace pointing to the method that threw the exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsArgumentException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ArgumentException,\n  Message: The Message,\n  ParamName: The parameter,\n  StackTrace: at ThrowsTests.MethodThatThrowsArgumentException()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig rule to treat unused return values of pure methods as errors, which helps catch cases where Verify() calls aren't properly awaited.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Enable Implicit Usings in .NET Project\nDESCRIPTION: MSBuild property to enable Implicit Usings for simplifying the syntax of .NET projects. This setting ensures proper compilation of examples that utilize implicit usings. This should be included in the project's .csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Generated File Notice\nDESCRIPTION: HTML comment block indicating this is an auto-generated file by MarkdownSnippets, warning against manual edits and providing source file information.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Enabling VerifyDiffPlex for Inline Text Comparisons\nDESCRIPTION: This C# code snippet sets up the VerifyDiffPlex library to modify how text differences are visualized in test verifications, enabling inline text highlighting to enhance readability of diffs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: Creates a pipeline variable 'publishverify' when tests fail using a CmdLine task. This flag is used to conditionally trigger subsequent artifact publishing steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: GitIgnore pattern to exclude all *.received.* files from source control as these are dynamically generated during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Global Tool\nDESCRIPTION: Installs the Verify.Terminal tool globally using the .NET CLI. This optional tool provides command-line capabilities for managing Verify snapshot files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: ISO-like Date Format in UTC Timezone\nDESCRIPTION: A date string formatted as YYYY-MM-DDUtc representing October 1, 2000 in UTC timezone. This format appears to be a custom ISO-like format with explicit UTC timezone designation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.DateTimeUtc.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2000-10-01Utc\n```\n\n----------------------------------------\n\nTITLE: Defining a Property Block (plaintext)\nDESCRIPTION: This block defines a property named 'property'. It includes the values 'line1' and 'line3' on separate lines within its definition. The specific syntax might be relevant to a particular configuration system or a domain-specific language used within the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.OnlyScrubInlineProperties.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n  property:\nline1\nline3\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Required NuGet packages for using the Verify testing framework with NUnit. This includes the core Verify package, NUnit integration, and other dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.3.1\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"19.7.1\" />\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: An example of an NUnit test method using Verify to perform snapshot testing. This demonstrates the basic structure and usage of Verify in a test scenario.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verifier.Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Example of a basic Verify test using TUnit. This test demonstrates how to verify the state of a Person object with specific property values.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person\n    {\n        GivenNames = \"John\",\n        FamilyName = \"Smith\",\n        Spouse = \"Jill\",\n        Address = new Address\n        {\n            Street = \"1 Puddle Lane\",\n            Country = \"USA\"\n        }\n    };\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test to Verify Conventions\nDESCRIPTION: XunitV3 test that runs VerifyChecks.Run() to validate that project conventions like gitignore and file settings are correctly configured for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Expecto\nDESCRIPTION: NuGet package references required to use Verify with Expecto testing framework. Includes the core Verify package, Verify.Expecto for integration with Expecto, and VerifyTests.SourceGenerators.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"VerifyTests.SourceGenerators\" Version=\"*\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet showing how to add the Verify.DiffPlex NuGet package, which improves text comparison by highlighting differences inline instead of showing full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package to the project. Verify.DiffPlex enhances text comparison by highlighting differences inline rather than outputting complete received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters for Verified Tests (Instance Method) - C#\nDESCRIPTION: Demonstrates how to hash parameters for verified tests using the instance method approach with xUnit. This is useful for large parameters that might exceed OS filename limitations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-xunitv3.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"Value1\")]\n[InlineData(\"Value2\")]\npublic Task HashParametersUsage(string arg)\n{\n    var settings = new VerifySettings();\n    settings.HashParameters();\n    return Verify(arg, settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Line Endings and Encoding - Shell\nDESCRIPTION: This code snippet is meant for a .gitattributes file. It configures all *.verified.txt, *.verified.xml, and *.verified.json files to use LF newlines and UTF-8 with BOM encoding on the working tree. Place this text in your .gitattributes at the repository root. No external dependencies are required.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Defining Expected AggregateException in Verify Tests\nDESCRIPTION: JSON structure that defines an expected AggregateException in Verify tests. It specifies the exception type and includes the stack trace pointing to the MethodThatThrowsEmptyAggregate method in the ThrowsTests class.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsEmptyAggregate.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: AggregateException,\n  StackTrace: at ThrowsTests.MethodThatThrowsEmptyAggregate()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Test Results\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are the generated test results that should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize the Verify.DiffPlex integration, which enhances the text comparison output by highlighting differences inline rather than showing full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using Expecto. It shows the setup of a test module and a test case that executes VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyChecks () =\n    test \"Check\" {\n        VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for Verify.Xunit testing setup including test SDK, Verify.Xunit, and xunit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Project configuration to enable implicit usings, which simplifies code by removing the need for explicit using statements and allows direct access to the Verify() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to properly format verified and received files, ensuring consistent charset, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex, which improves the text comparison behavior by highlighting differences inline rather than showing complete contents on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: A simple NUnit test example showing how to use Verify with NUnit to snapshot test a person object returned from a method. The test retrieves the object and passes it to Verify() for snapshot comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_None.md#2025-04-22_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify Test NuGet Packages\nDESCRIPTION: Required NuGet packages for setting up Verify with NUnit tests, including the core Verify packages, NUnit integration, and tooling.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.4.0\" />\n```\n\n----------------------------------------\n\nTITLE: Enable Implicit Usings in .NET Project\nDESCRIPTION: This XML snippet demonstrates how to enable implicit usings in a .NET Core project. Implicit usings help reduce the need to specify common namespaces in every file, ensuring that examples compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Xunit and Verify\nDESCRIPTION: Specifies the NuGet packages required for using Verify with Xunit tests. These packages should be added to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"22.8.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.6.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.4\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Add the Verify.DiffPlex package to enhance text difference comparison during test failures. This package is optional but recommended. The command does not have inputs or outputs but should be run in the test project directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Installs the DiffEngineTray .NET tool globally. DiffEngineTray runs in the system tray and helps manage Verify snapshot approval by monitoring pending changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with NUnit\nDESCRIPTION: NUnit test fixture that runs Verify's convention checks to ensure all configuration and setup is correct. This verifies that the project follows the recommended conventions for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project File\nDESCRIPTION: XML configuration for enabling implicit usings in a .NET project. This setting allows for shorter syntax when using Verify methods by eliminating the need for explicit namespace references.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Complete F# Test Module Implementation\nDESCRIPTION: Shows a complete F# test module with various verification scenarios including settings configuration and fluent API usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/fsharp.md#2025-04-22_snippet_3\n\nLANGUAGE: fsharp\nCODE:\n```\nmodule Tests\n\nopen Xunit\nopen VerifyTests\nopen VerifyXunit\nopen Argon\n\nVerifierSettings.AddExtraSettings(fun settings -> settings.DefaultValueHandling <- DefaultValueHandling.Include)\n\n[<Fact>]\nlet MyTest () =\n     Verifier.Verify(15).ToTask() |> Async.AwaitTask\n\n[<Fact>]\nlet WithFluentSetting () =\n    Verifier\n        .Verify(15)\n        .UseMethodName(\"customName\")\n        .ToTask()\n    |> Async.AwaitTask\ndo ()\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test Implementation\nDESCRIPTION: A basic example of writing a verification test with MSTest. The test retrieves a person object from a system under test and uses Verify to snapshot test the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Visualization\nDESCRIPTION: C# code to initialize Verify.DiffPlex using a module initializer. This changes the text compare behavior to highlight differences inline when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Xunit tests. It includes Verify.Xunit for integration and AutoFixture for test data generation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"AutoFixture\" Version=\"*\" />\n<PackageReference Include=\"AutoFixture.Xunit2\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding and Enabling Verify.DiffPlex for Inline Text Comparison\nDESCRIPTION: Commands to add the Verify.DiffPlex NuGet package and code to initialize it, which provides enhanced text difference highlighting in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for XUnit v3 with Verify\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit v3, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for TUnit Testing\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with TUnit. It includes Verify.TUnit for core functionality and Verify.Xaml for XAML support.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n<PackageReference Include=\"Verify.Xaml\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.NUnit via CLI\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring File Deletion in Verify Testing Framework\nDESCRIPTION: JSON configuration that specifies which files should be deleted in the Verify testing framework. It targets the 'ExceptionParsingTests.Fake.received.txt' file in the project directory, which is likely a temporary test result file.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.SingleDelete.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  message:\nDirectory: {ProjectDirectory}\nDelete:\n  - ExceptionParsingTests.Fake.received.txt\n,\n  result: {\n    Delete: [\n      {ProjectDirectory}ExceptionParsingTests.Fake.received.txt\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Verification Failures\nDESCRIPTION: AppVeyor build configuration that captures and uploads all .received.* files as artifacts when tests fail, making it easier to diagnose verification failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Code to initialize the Verify.DiffPlex integration, which improves text comparison output by highlighting differences inline rather than showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in a Binary Search Tree in Java\nDESCRIPTION: A helper method that finds the minimum value in a binary search tree. It traverses the leftmost path of the tree since the minimum value in a BST is always at the leftmost node. This function is used in the deletion operation to find a replacement node.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.DerivePaths.Tests/Relative/Tests.Test.verified.txt#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nstatic int minValue(Node tree) {\n    while (tree.left != null)\n        tree = tree.left;\n    return tree.value;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Snapshot Test with Expecto and Verify\nDESCRIPTION: Complete example of a snapshot test using Expecto with Verify. Demonstrates how to create a test that verifies the content of a Person object against a snapshot file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\n\n[<Tests>]\nlet Sample() =\n    task {\n        let person = Person(\"John\", \"Smith\")\n        do! Verifier.Verify(person)\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors snapshot changes and provides a mechanism for accepting or rejecting changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with MSTest, including the test SDK, MSTest adapters, and Verify.MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Treating Pure Method Return Values as Required in EditorConfig\nDESCRIPTION: EditorConfig setting to make the IDE treat unused return values of pure methods (like Verify()) as errors, helping prevent common mistakes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with XunitV3\nDESCRIPTION: Code snippet demonstrating how to run verification checks in a test by calling VerifyChecks.Run() method with XunitV3. This helps to ensure that all conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Tool using .NET CLI\nDESCRIPTION: Installs the Verify.Terminal .NET tool globally using the .NET CLI. This command-line tool allows developers to manage Verify snapshot files (e.g., approve, reject) directly from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure text-based verified files use the correct encoding and line endings settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Defining Character Mapping in JSON\nDESCRIPTION: This JSON object defines a mapping where the forward slash (/) and backslash (\\) characters are mapped to themselves. This could be useful in scenarios where these characters need to be preserved or escaped in string processing or data serialization.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/CombinationTests.KeysWithInvalidPathChars.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"/\": \"/\",\n  \"\\\\\": \"\\\\\"\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Received Files\nDESCRIPTION: This shell snippet shows how to ignore all '*.received.*' files in a Git repository by adding them to the .gitignore file. Ensuring that only necessary files are committed to the source control system.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Template with Directory Path Placeholders\nDESCRIPTION: A JSON configuration template that uses {CurrentDirectory} as a placeholder for the actual directory path. The template includes multiple variations of the same path reference, likely for different formatting needs or use cases.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubCurrentDirectory.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  currentDirectory: {CurrentDirectory},\n  altCurrentDirectory: {CurrentDirectory},\n  currentDirectoryTrailing: {CurrentDirectory},\n  altCurrentDirectoryTrailing: {CurrentDirectory}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with TUnit in a .NET project. This adds the core TUnit testing framework and the Verify integration for TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Fixie and Verify in XML\nDESCRIPTION: Specifies the NuGet packages Fixie and Verify.Fixie in the project file for testing with specific versions. Ensure these packages are added to the project to enable related testing functionalities.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool for Snapshot Management\nDESCRIPTION: Command to install the global DiffEngineTray tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes from the Windows tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Text File Settings for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified files across all environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and XUnit V3\nDESCRIPTION: Commands to add required NuGet packages for using Verify with XUnit V3. These packages include the test SDK, Verify.XunitV3, and XUnit V3 components.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files on Test Failure\nDESCRIPTION: PowerShell script to be used in AppVeyor's on_failure build step to capture and upload *.received.* files as artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Expected Verified Output with Scrubbed Member\nDESCRIPTION: This XML represents the content of the `.verified.xml` file when the value of the `<node>` element is scrubbed using `ScrubMember`. The original value 'text' is replaced with the `{Scrubbed}` placeholder in the snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<body>\n  <node>{Scrubbed}</node>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Text Comparison\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension, which enhances text comparison by highlighting differences inline rather than showing full content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Functionality with Module Initializer\nDESCRIPTION: This C# code snippet includes a ModuleInitializer attribute which automatically initializes Verify.DiffPlex, enabling detailed inline text difference highlighting for Verify's output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex Integration (C#)\nDESCRIPTION: Initializes the Verify.DiffPlex integration using a C# ModuleInitializer. This ensures that DiffPlex is used for text comparisons performed by VerifyTests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: This code demonstrates how to run Verify checks using Fixie. It creates a test method that calls VerifyChecks.Run() to perform the verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTest\n{\n    public void Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Command Line Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool which provides a tray utility to monitor and manage snapshot changes in the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code snippet demonstrates how to initialize Verify.DiffPlex. It uses the ModuleInitializer attribute to ensure the initialization occurs when the module is loaded.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses a module initializer to set up DiffPlex for improved diff visualization in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal .NET Global Tool\nDESCRIPTION: Provides the command `dotnet tool install -g verify.tool` to install the Verify.Terminal global tool. This tool allows managing Verify snapshots directly from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using Xunit. It creates a fact test method that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for MSTest and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using MSTest with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging\nDESCRIPTION: Copies all *.received.* files to the artifact staging directory when tests have failed. This step only runs when the publishverify flag was set in the previous step, and prepares the files for publication.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit v3 with Verify\nDESCRIPTION: Package references that need to be added to the project file for using Verify with XUnit v3. Includes Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure proper handling of verified and received files in text editors, specifying UTF-8 with BOM, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files on Failure\nDESCRIPTION: PowerShell script to be added to AppVeyor configuration for capturing and uploading *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package via .NET CLI\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline instead of showing full received and verified contents.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding .received Files to .gitignore\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are dynamically generated during tests and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining Method with Named Tuple Return Type in C#\nDESCRIPTION: Demonstrates implementation of a method that returns a named tuple with name and age properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/named-tuples.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic (string name, int age) MethodWithNamedTuple()\n{\n    return (\"John\", 20);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File for Verify\nDESCRIPTION: XML configuration for enabling implicit usings in a project file, which simplifies usage of Verify by allowing direct calls to Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Uploading Received Files on Build Failure in AppVeyor\nDESCRIPTION: PowerShell script that runs on build failure to upload all *.received.* files as artifacts. Uses Get-ChildItem to recursively find files and Push-AppveyorArtifact to upload them while preserving original filenames.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/build-server-appveyor.include.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. Verify.DiffPlex enhances the text comparison behavior of Verify by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using XUnit v3\nDESCRIPTION: This snippet shows a sample test method using Verify with XUnit v3. It demonstrates how to create a simple test that verifies the output of a method call using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray provides a system tray utility for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Exclude Received Files\nDESCRIPTION: Git configuration to exclude all *.received.* files from source control. These files are dynamically generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET Tool\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is a utility that monitors snapshot changes and provides acceptance/rejection mechanisms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Setting up .gitattributes file to ensure proper line endings and encoding for verified text files to maintain consistency across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File for C#\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() without fully qualifying the method name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in NUnit\nDESCRIPTION: Code snippet demonstrating how to create a test that checks if all Verify conventions are properly configured. This helps ensure the test environment is correctly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksNUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Disable Orphaned Process Detection\nDESCRIPTION: DotSettings configuration to disable ReSharper's orphaned process detection which would otherwise prompt to terminate diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: A test that runs VerifyChecks to ensure Verify conventions are properly configured. This helps confirm that the environment is correctly set up for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task VerifyChecksTest() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool that sits in the Windows tray to monitor pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: A complete sample test using Verify with Fixie. The test creates a Person object and verifies its serialized representation against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public async Task Sample()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        await Verifier.Verify(person);\n    }\n}\n\npublic record Person(string FirstName, string LastName);\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git attributes configuration to ensure verified text files use consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI for Fixie and Verify\nDESCRIPTION: Commands to add the Fixie test framework and Verify.Fixie packages to the test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Verification Test with NUnit\nDESCRIPTION: Sample NUnit test that demonstrates how to use Verify for snapshot testing. It shows the basic pattern for verifying an object or string.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    return Verify(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies using Verify by allowing direct calls to Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control since these are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison behavior by highlighting differences inline instead of showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Test with Verify and Expecto\nDESCRIPTION: Demonstrates how to write a sample test using Verify with Expecto. The test finds a person using a ClassBeingTested and verifies the result using Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: Code to initialize VerifyDiffPlex, which changes the text compare result to highlight text differences inline. This improves readability when verifying large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XUnit v3\nDESCRIPTION: A sample test demonstrating how to use Verify with XUnit v3. This test verifies the contents of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code snippet demonstrates how to initialize Verify.DiffPlex. It uses the ModuleInitializer attribute to ensure the initialization occurs at the appropriate time during application startup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit NuGet Packages for Verify Testing\nDESCRIPTION: Required NuGet packages that need to be added to the test project for using Verify with XUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.8.2\" />\n<PackageReference Include=\"xunit\" Version=\"2.5.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initialize DiffPlex for Inline Text Differences\nDESCRIPTION: Setup DiffPlex initialization in .NET to change the default text comparison behavior by highlighting differences inline. Ensure the VerifyDiffPlex library is initialized via a ModuleInitializer attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison by highlighting differences inline, providing clearer error messages when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: This snippet shows a sample Verify test using Xunit. It demonstrates how to create a fact test method that verifies a string value using the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var value = \"Hello Xunit\";\n    return Verify(value);\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: Code snippet showing how to check Verify conventions by calling VerifyChecks.Run() in a test. This verifies that the project is set up correctly according to the recommended conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksXunitV3\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with MSTest\nDESCRIPTION: A simple MSTest test that runs Verify's conventions check to ensure all configuration and settings are correctly applied to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Object with Quote Characters\nDESCRIPTION: This code snippet creates a JavaScript object literal with properties containing different types of quotes as values. It demonstrates how to use single quotes, double quotes, and a mix of both within an object.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.QuoteEscaping.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  singleQuote: ',\n  doubleQuote: \"\\\"\",\n  mixed: \"'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances failure output by highlighting text differences inline instead of showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Fixie\nDESCRIPTION: A complete example of a Fixie test that uses Verify to snapshot test a simple object with properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleTest\n{\n    public async Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\", 20.05m);\n\n        await Verifier.Verify(person);\n    }\n\n    class Person\n    {\n        public Person(string firstName, string lastName, decimal height)\n        {\n            FirstName = firstName;\n            LastName = lastName;\n            Height = height;\n        }\n\n        public string FirstName { get; }\n        public string LastName { get; }\n        public decimal Height { get; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray monitors snapshot changes and provides a mechanism for accepting/rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and UTF-8 encoding across different platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Testing Framework\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during test runs when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider to Ignore Orphaned Processes\nDESCRIPTION: Configuration to disable Rider's orphaned process detection, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex plugin which enhances text comparison by highlighting differences inline rather than showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is a utility that monitors snapshot changes from the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Installs the Verify.Terminal dotnet tool globally using the dotnet CLI. This tool aids in managing test snapshots directly from the command line, providing more flexibility.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring GitAttributes for Verified Files\nDESCRIPTION: Configuration for .gitattributes to ensure consistent line endings and encoding for verified files. Sets text files to use LF line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: A test method that runs Verify's convention checks to validate the setup is correct. This helps ensure all configuration is properly set up.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task VerifyChecks() => await VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with Fixie\nDESCRIPTION: A Fixie test that runs Verify's convention checks to ensure proper configuration. This test validates that all necessary conventions for Verify are correctly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void VerifyConventions()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex. This is typically placed in a module initializer to ensure it's run before any tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Creating a Verify Checks Test in Fixie\nDESCRIPTION: Test that runs verification checks to ensure all conventions are properly followed. This helps validate that Verify is correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Literal in TypeScript/JavaScript\nDESCRIPTION: This snippet exemplifies the declaration of an object with three properties, each assigned a numeric variable. It demonstrates basic object construction in TypeScript or JavaScript, which requires prior definition of the referenced variables (e.g., \"number1\" and \"number2\"). The object is intended as a static data structure; all properties are numerics. There are no methods or advanced features, and the snippet assumes the external existence of the variables being assigned.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/CustomCounterTests.CounterUsage.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  Property1: number1,\n  Property2: number2,\n  Property3: number1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Verify Test with Fixie\nDESCRIPTION: A simple test class showing how to use Verify with Fixie framework. Demonstrates verifying a person object returned from a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: This code demonstrates how to run Verify checks in an NUnit test method. It uses the VerifyChecks.Run() method to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunChecks()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up NUnit with Verify framework, including test SDK, NUnit core, Verify.NUnit, and NUnit test adapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Via PackageReference - XML\nDESCRIPTION: Demonstrates how to integrate the Verify.DiffPlex package into a .NET project by adding a PackageReference in the project file. This inclusion makes the diffing behavior of VerifyTests pluggable and highlights text differences inline. The 'Include' attribute specifies the package name, while 'Version' may be a specific version or a wildcard (*). The snippet should be included within the <ItemGroup> of a .csproj or .vbproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Verify Test with TUnit\nDESCRIPTION: Demonstrates a simple test class that verifies the output of a method using Verify. This shows the basic pattern for snapshot testing with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings via EditorConfig\nDESCRIPTION: This EditorConfig snippet provides suggested settings for editors to handle VerifyTests' text-based received and verified files (`.json`, `.txt`, `.xml`). It enforces UTF-8 with BOM encoding, LF line endings, and prevents trailing newlines or whitespace trimming, aligning with Verify's conventions. Users should add other text extensions as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture Received Files on Test Failure\nDESCRIPTION: PowerShell script for AppVeyor's on_failure build step to capture and upload all .received files as artifacts for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from version control, which are generated during the verification process.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: JSON Object with Escaped Forward and Backward Slashes\nDESCRIPTION: A JSON object containing two properties where both keys and values are slash characters. The first key-value pair uses forward slashes, and the second uses backslashes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.KeysWithInvalidPathChars.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  /: /,\n  \\: \\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Text Comparisons\nDESCRIPTION: Code to initialize the Verify.DiffPlex extension, which improves text comparison results by highlighting differences inline instead of showing the entire content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Fixie in C#\nDESCRIPTION: A C# code snippet demonstrating a sample test using Verify with the Fixie testing framework. It shows how to set up and run a simple verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally, a tool that monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git configuration to ensure verified files have consistent line endings and encoding settings when committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure correct formatting of verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider/ReSharper\nDESCRIPTION: Configuration to disable orphaned process detection in Rider/ReSharper, which can interfere with Verify's diff tool functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to the project. This package changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks with Verify in Expecto\nDESCRIPTION: Code showing how to run Verify convention checks in an Expecto test. This ensures all snapshot conventions are properly followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet VerifyChecks () =\n    task {\n        do! VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git configuration to ensure verified text files use consistent line endings and encoding when committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Verify.DiffPlex\nDESCRIPTION: Commands and code to add and initialize Verify.DiffPlex, which enhances text comparison by highlighting differences inline rather than showing the full content on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Artifacts in Azure DevOps YAML\nDESCRIPTION: Publishes the staged Verify *.received.* files as build artifacts in Azure DevOps pipeline when the publishverify flag is set.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: Example of a TUnit test using Verify to compare the result of a method call with a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: C# code snippet demonstrating how to run Verify conventions check using TUnit. This ensures that all conventions are properly followed in the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool for Command Line Snapshot Management\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Person Data Structure in JSON\nDESCRIPTION: JSON structure defining a person record with nested address object and children array. Contains basic personal information like names, family details and location data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/Snippets/Sample.Test.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project file. This package enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings for ensuring consistent formatting of verified and received files. Configures charset, line endings, and other formatting options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: This code demonstrates how to run Verify checks using Fixie. It creates a test method that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public void CheckVerifyConventions() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install DiffEngineTray global tool which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit V3\nDESCRIPTION: Demonstrates how to run Verify checks using XUnit V3. This snippet shows a test method that calls VerifyChecks.Run() to perform convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Test Results\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally as a .NET tool. DiffEngineTray monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and XunitV3\nDESCRIPTION: Commands to add required NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, and xunit.v3 (prerelease).\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Testing DateTimeOffset Creation and Comparison in C#\nDESCRIPTION: This snippet defines a test method to create DateTimeOffset objects and compare them. It verifies that DateTimeOffset.Now creates a non-UTC value and compares it with a UTC-converted version.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimeOffsets_trailing.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Fact]\npublic void DateTimeOffset_Now_IsNotUtc()\n{\n    var now = DateTimeOffset.Now;\n    Assert.NotEqual(TimeSpan.Zero, now.Offset);\n    Assert.NotEqual(now, now.ToUniversalTime());\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET\nDESCRIPTION: This XML snippet enables Implicit Usings in a .NET project file, simplifying the inclusion of common namespaces. Ensure `<ImplicitUsings>` is set to `enable` to compile the examples correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including the Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally using the dotnet CLI. This tool is used for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to the project. DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison functionality. Uses ModuleInitializer attribute to ensure initialization occurs at module startup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto\nDESCRIPTION: This code demonstrates how to run Verify checks using Expecto. It uses the 'testCase' function to create a test that calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntestCase \"VerifyChecks\" <| fun _ ->\n    VerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify Setup\nDESCRIPTION: Instructions to add necessary NuGet packages for using Verify with TUnit. Dependencies include TUnit and Verify.TUnit, which can be installed using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool via .NET CLI\nDESCRIPTION: Command to install the Verify.Terminal global tool using the .NET CLI. This tool is used for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Xunit\nDESCRIPTION: Commands to add the necessary NuGet packages to your test project for working with Verify and Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an MSTest setup. It uses the VerifyChecks.Run() method within a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic void VerifyChecks()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie test using Verify\nDESCRIPTION: A sample test demonstrating how to use Verify with Fixie. This test verifies the contents of a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which provides system tray integration for monitoring and accepting/rejecting snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: JSON Exception Representation from ValueTaskMethodThatThrows\nDESCRIPTION: A structured JSON representation of an exception. It includes the exception type, message content, and stack trace showing that the exception occurred in the ValueTaskMethodThatThrows method of the ThrowsTests class.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestThrowsValueTask.DotNet.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.ValueTaskMethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages to Project\nDESCRIPTION: Required NuGet package references to add to a test project for enabling Verify with TUnit. Includes TUnit and Verify.TUnit packages with their respective versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig configuration to treat unused return values of pure methods (like Verify) as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks with VerifyChecks in TUnit\nDESCRIPTION: A TUnit test that runs VerifyChecks.Run() to ensure all Verify conventions are being followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks with NUnit\nDESCRIPTION: Code snippet for running verification convention checks in NUnit. This ensures that project conventions for verification are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunChecks() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in XML\nDESCRIPTION: This XML block demonstrates adding the Verify.DiffPlex package to a project. Verify.DiffPlex enhances text comparison by highlighting differences inline. Make sure to replace the version wildcard as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control while keeping *.verified.* files. This is a crucial convention for working with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Structure in JSON\nDESCRIPTION: A JSON structure representing an exception with its type, message, and stack trace information. This format is likely used for test verification or logging purposes in the verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsTaskGeneric.DotNet.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.TaskMethodThatThrowsGeneric()\n}\n```\n\n----------------------------------------\n\nTITLE: Comma-Separated Value Format with Key-Value Group\nDESCRIPTION: A data format example showing comma-separated values with a special syntax for key-value pairs. The format includes regular values (value1, value4) and a group of key-value pairs enclosed in square brackets ([value2=10,value3=20]).\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.Nested.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvalue1,[value2=10,value3=20],value4\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: F# code demonstrating a sample Expecto test that uses Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: These EditorConfig settings ensure that verified and received files are handled correctly in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages including MSTest SDK, TestAdapter, TestFramework, and Verify.MSTest to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: Demonstrates how to run Verify checks using XUnit v3 in a test method. This snippet shows the setup for verifying conventions in a test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in MSTest\nDESCRIPTION: This snippet shows a basic example of how to write a test using Verify with MSTest. It demonstrates finding a person and verifying the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convention Checks in MSTest with Verify\nDESCRIPTION: Code snippet demonstrating how to run Verify convention checks in a MSTest test. This ensures that all Verify conventions are being followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksMSTest\n```\n\n----------------------------------------\n\nTITLE: Verification Result Output\nDESCRIPTION: Shows the expected output format when verifying the anonymous type containing two Person objects. Demonstrates the JSON-like structure of the verification result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/anonymous-types.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{\n  person1: {\n    GivenNames: John,\n    FamilyName: Smith\n  },\n  person2: {\n    GivenNames: Marianne,\n    FamilyName: Aguirre\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with NUnit\nDESCRIPTION: NUnit test fixture for running VerifyChecks.Run() to validate that all Verify conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: This shell command installs Verify.Terminal, a .NET tool for managing snapshots via the command line, providing an alternative mechanism to GUI-based management tools.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Verifying Test Conventions with VerifyChecks\nDESCRIPTION: Sample code showing how to run verification checks to ensure conventions are being followed correctly in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Excluding Received Files\nDESCRIPTION: The .gitignore pattern needed to exclude generated *.received.* files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Xunit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Snapshot Test Using Expecto with Verify\nDESCRIPTION: A sample test demonstrating how to use Verify with the Expecto testing framework. The test creates an object to verify and uses the VerifyValue extension method to create and validate a snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestExpecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison output by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[<System.Runtime.CompilerServices.ModuleInitializer>]\nlet initialize() =\n    VerifyDiffPlex.Initialize()\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, as these are temporary comparison files generated during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Received Files\nDESCRIPTION: AppVeyor build configuration that pushes all received files as artifacts on test failure, making it easier to debug failed snapshot tests in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files across different editors and environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set the correct line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitignore\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Diff Display\nDESCRIPTION: Module initializer code to enable Verify.DiffPlex, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Test Results in GitHub Actions\nDESCRIPTION: This YAML snippet configures a GitHub Actions step to upload *.received.* files as artifacts if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest Verify Testing\nDESCRIPTION: Commands to add essential NuGet packages for setting up MSTest with Verify testing framework. Includes test SDK, MSTest adapters and frameworks, and Verify.MSTest package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Adding Fixie and Verify.Fixie NuGet Packages using .NET CLI\nDESCRIPTION: Installs the core Fixie testing framework and the Verify integration package (Verify.Fixie) into the current .NET test project using the dotnet CLI. These are the essential packages for using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Applying EditorConfig for Verified Files\nDESCRIPTION: Set up EditorConfig to match project standards for handling UTF-8 BOM encoding and LF line endings in verified/received files. This ensures editors respect the desired formatting when modifying files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Output Files\nDESCRIPTION: Gitignore configuration to exclude received files from source control while preserving verified files, with additional configuration for split mode directories.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package with .NET CLI - Shell\nDESCRIPTION: This command installs the optional Verify.DiffPlex NuGet package using the .NET CLI to enhance verification output by highlighting text differences inline. It should be executed within the root folder of the test project after core packages have been installed. The only required parameter is the package name: Verify.DiffPlex.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify.Xunit Files\nDESCRIPTION: EditorConfig settings to ensure correct formatting and encoding for verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Global Tool\nDESCRIPTION: Shows the command `dotnet tool install -g DiffEngineTray` used to install the DiffEngineTray tool globally using the .NET CLI. DiffEngineTray is a recommended companion tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: This snippet shows a sample test using Fixie and Verify. It demonstrates how to create a simple test that verifies the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parameter Text in TUnit Tests (Instance)\nDESCRIPTION: Shows how to override the text used for parameters in file naming using UseTextForParameters() with an instance of VerifySettings in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"Value1\")]\n[Arguments(\"Value2\")]\npublic Task UseTextForParameters(string arg)\n{\n    var settings = new VerifySettings();\n    settings.UseTextForParameters(arg);\n    return Verify(arg + \"UseTextForParameters\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and XUnit v3\nDESCRIPTION: Commands to add required NuGet packages for Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3, and xunit.runner.visualstudio to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Including Text File Settings Configuration\nDESCRIPTION: This placeholder indicates where specific settings for handling text files within the Verify framework should be included, referencing a common configuration section.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\ninclude: text-file-settings\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Demonstrates how to run Verify checks using Fixie conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyConvention : Discovery, Execution\n{\n    public VerifyConvention()\n    {\n        // Discover tests\n        Methods.Where(method => method.IsPublic && !method.IsStatic);\n    }\n\n    public async Task Run(TestClass testClass, MethodInfo method)\n    {\n        await VerifierSettings.RunChecks(testClass.Type);\n        // Run the test\n        await method.Invoke(testClass.Instance, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file. This is required for the examples to compile correctly without fully qualified names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Expecto Testing with Verify\nDESCRIPTION: NuGet package references required for using Verify with Expecto. These packages provide the core functionality for snapshot testing with the Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing VerifyResult from Verification\nDESCRIPTION: Shows how to access the VerifyResult object returned by verification operations. This can be used to perform additional checks on the generated files.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task UseVerifyResult()\n{\n    var result = await Verify(\"value\");\n    Debug.WriteLine(result.VerifiedFile);\n    Debug.WriteLine(result.ReceivedFile);\n    File.WriteAllText(result.VerifiedFile!, \"value\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using Fixie test framework. It creates a test class that calls VerifyChecks.Run() on the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Convention Checks in Xunit\nDESCRIPTION: A sample Xunit test class that runs VerifyChecks.Run() to ensure that all Verify conventions are being followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with Fixie\nDESCRIPTION: A Fixie test class that runs the VerifyChecks.Run() method to verify that the project follows the recommended conventions for Verify. This helps ensure proper setup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions with VerifyChecks in XunitV3\nDESCRIPTION: Sample code showing how to verify that all Verify conventions are properly set up by calling VerifyChecks.Run() in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[PFact]\npublic Task CheckVerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with Xunit\nDESCRIPTION: A simple test class demonstrating how to use Verify with Xunit to test and verify the state of an object returned by a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package via .NET CLI\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to the project using the .NET CLI. This package enhances text comparison in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Configuration with Single Key-Value Pair\nDESCRIPTION: This JSON snippet defines a simple configuration object with a single key 'Value' and its corresponding value 'Value1'. It can be used for storing basic configuration settings or data in a JSON format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Snippets/ComplexParametersSample.ComplexMemberStructData_arg=Value1.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Value: Value1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to improve text comparison visualization. This package enhances the diff output by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with Xunit\nDESCRIPTION: Sample test class that runs verification checks to ensure all conventions are followed correctly in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XunitV3\nDESCRIPTION: Example of how to run Verify checks in an XunitV3 test method. This snippet demonstrates the basic structure of a test using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: A sample TUnit test that demonstrates how to use Verify for snapshot testing. This example shows the basic structure and implementation of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for TUnit and Verify.TUnit\nDESCRIPTION: Commands to add the required NuGet packages TUnit and Verify.TUnit to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Xunit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto in C#\nDESCRIPTION: Code snippet demonstrating how to run Verify checks in an Expecto test framework. This shows the proper way to initialize and execute convention checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[<Test>]\nlet VerifyChecks () =\n    VerifyChecks.Run()\n    |> Async.AwaitTask\n    |> Async.RunSynchronously\n```\n\n----------------------------------------\n\nTITLE: Git Attributes for Verified Text Files\nDESCRIPTION: Git attributes configuration to ensure proper handling of verified text files with consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which provides a system tray utility for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Module initializer code to set up Verify.DiffPlex, which provides improved difference highlighting for text comparisons in verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending snapshot changes and provides a mechanism for accepting or rejecting them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: A TUnit test that runs VerifyChecks.Run() to ensure all Verify conventions are properly set up in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Specifies the NuGet package reference for Verify.DiffPlex, which enhances text comparison behavior by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex in C#\nDESCRIPTION: C# code snippet showing how to initialize VerifyDiffPlex using a module initializer. This sets up DiffPlex for use with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files when edited in supported IDEs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for XUnit v3 and Verify\nDESCRIPTION: XML snippet showing the required NuGet package references for setting up XUnit v3 with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"22.1.4\" />\n<PackageReference Include=\"xunit\" Version=\"2.5.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.5.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initialize VerifyDiffPlex for Text Comparison\nDESCRIPTION: Code to initialize VerifyDiffPlex for enhanced text difference highlighting in test results. This is an optional but recommended configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project. DiffPlex provides inline text difference highlighting for verify operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase Class with MSTest\nDESCRIPTION: Demonstrates how to inherit from the VerifyBase class in MSTest to simplify verification test creation, which automatically adds the UsesVerify attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_None.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit test with Verify\nDESCRIPTION: Demonstrates a basic Xunit test using Verify to assert the correctness of a retrieved 'Person' object. Requires Verify.Xunit and Xunit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration for enabling implicit usings in the project file, which allows using Verify() method without fully qualifying it with Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git configuration to ensure consistent line endings and encoding for verified text files across platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This command adds the Verify.DiffPlex package to the project, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex which changes the text compare result to highlight text differences inline when verification fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows for simplified syntax when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure editors respect the required formatting conventions for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable Implicit Usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool which allows managing snapshots from the command line, providing additional flexibility outside the IDE.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages (TUnit and Verify.TUnit) to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps: Copying Received Files\nDESCRIPTION: YAML configuration for Azure DevOps to copy .received files to the artifact staging directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: Example of a basic NUnit test that uses the Verify framework to snapshot test a Person object returned from a method under test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for TUnit\nDESCRIPTION: Adds the TUnit and Verify.TUnit packages to the test project using the dotnet CLI. These packages are essential for writing and verifying tests using TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Creating Verification Checks Test with NUnit\nDESCRIPTION: Sample NUnit test that runs verification checks to ensure all Verify conventions are correctly applied to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Configuration for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which helps catch missing awaits on Verify() calls.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet global tool, which allows managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test with Verify\nDESCRIPTION: Example test class using Fixie and Verify to snapshot test a Person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleTest\n{\n    public async Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"1 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        await Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which improves text comparison output by highlighting differences inline instead of showing full content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring Verified File Handling in .gitattributes\nDESCRIPTION: Specifies `.gitattributes` settings to enforce consistent line endings (LF) and file encoding (UTF-8) for common text-based verified files (`*.verified.txt`, `*.verified.xml`, `*.verified.json`). This ensures consistency across different developer environments and platforms.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Demonstrates how to initialize Verify.DiffPlex in the project. This changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Shows how to add the Verify.DiffPlex NuGet package to enhance text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Applying UsesVerify Attribute Assembly-Wide in C#\nDESCRIPTION: This snippet demonstrates how to apply the UsesVerify attribute to all test classes in an assembly. This allows the Source Generator to process all test classes in the assembly for use with Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/mstest-marker.include.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test with Verify\nDESCRIPTION: A sample test that demonstrates how to use Verify with Fixie. It shows the basic pattern for creating a snapshot test with the Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with Custom Params in TUnit Tests (Fluent)\nDESCRIPTION: Demonstrates how to ignore parameters for verified filename while passing custom parameters using IgnoreParametersForVerified() with a fluent interface in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"One\")]\n[Arguments(\"Two\")]\npublic Task IgnoreParametersForVerifiedCustomParamsFluent(string arg) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified($\"Number{arg}\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Initializes Verify.DiffPlex to enhance text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify.Xunit\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify.Xunit during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Verifying Async Method Results\nDESCRIPTION: Example demonstrating using Verify with an async lambda expression that combines the results of multiple async operations into a single object for verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nawait Verify(\n    async () => new\n    {\n        Foo = await repo.GetFoo(id),\n        Bars = await repo.GetBars(id)\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with XUnit v3\nDESCRIPTION: Commands to add required NuGet packages for using Verify with XUnit v3 in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify Framework\nDESCRIPTION: Example NUnit test implementation showing how to use the Verify framework to create and verify snapshots in a test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test in C#\nDESCRIPTION: This code snippet demonstrates how to implement a test case that runs VerifyChecks to ensure conventions are followed in the assembly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple JSON-like Data Structure\nDESCRIPTION: This snippet demonstrates a minimalistic JSON-like structure with a single property-value pair. It uses curly braces to enclose the data and a colon to separate the property from its value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/Tests.WithTargets.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML snippet to enable implicit usings in a project file, which allows using Verify() directly without explicit imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: Code snippet demonstrating how to run VerifyChecks to validate that all verification conventions are properly configured in an MSTest project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksMSTest\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Test Results\nDESCRIPTION: YAML configuration for a GitHub Actions step to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally, which monitors pending snapshot changes and provides a mechanism for accepting or rejecting them.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with NUnit\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with NUnit in a Visual Studio project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and UTF-8 encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex which modifies the text comparison behavior to highlight differences inline for better readability in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit and Verify NuGet Packages - MSBuild Project File - csproj\nDESCRIPTION: Specifies required NuGet dependencies for a testing project using NUnit and Verify in a .NET environment. Ensure these <PackageReference> entries are within an ItemGroup of your .csproj file to enable test execution and snapshot verification. Packages included are Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter, all of which are needed for test running and integration with Verify's snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\\\"Microsoft.NET.Test.Sdk\\\" Version=\\\"17.13.0\\\" />\\n<PackageReference Include=\\\"NUnit\\\" Version=\\\"4.3.2\\\" />\\n<PackageReference Include=\\\"Verify.NUnit\\\" Version=\\\"29.2.0\\\" />\\n<PackageReference Include=\\\"NUnit3TestAdapter\\\" Version=\\\"5.0.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Expecto Testing with Verify\nDESCRIPTION: The required NuGet packages to add to an Expecto test project to use Verify. These packages provide the core functionality for snapshot testing with the Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nexpecto-nugets\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core TUnit and Verify.TUnit packages to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Capturing Verify Output\nDESCRIPTION: PowerShell script to include in AppVeyor configuration to capture and upload .received files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with XUnit v3 in C#\nDESCRIPTION: This snippet shows a sample Verify test using XUnit v3. It demonstrates how to create a simple test that verifies a string value.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyXunit;\n\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing MSTest NuGet Packages\nDESCRIPTION: Required NuGet package references for MSTest testing with Verify, including Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Convention Checks with VerifyChecks in XunitV3\nDESCRIPTION: Example showing how to implement convention checks in a test by calling VerifyChecks.Run() using the XunitV3 framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task ChecksPass() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Comment Header\nDESCRIPTION: Auto-generated header comment indicating this is a generated file created by MarkdownSnippets tool with instructions not to edit directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_Rider_Cli_XunitV3.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: A code snippet showing how to run Verify checks in an XUnit v3 test. This ensures that all conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML property setting to enable implicit usings in the project file, which simplifies code by automatically including common namespaces.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which are temporary files generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex functionality using a module initializer. This enables enhanced diff visualization for text comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code that initializes Verify.DiffPlex using a module initializer. This enables inline text difference highlighting when comparing verification results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: Example test code showing how to implement a basic test using Verify with MSTest. This demonstrates the pattern to follow for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestMSTest\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Shows how to add the Verify.DiffPlex NuGet package to the project. This package enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Testing\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.3.2\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: This shell command installs the Verify.Terminal tool globally, providing command line management for Verify snapshots. This is optional but can streamline snapshot operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify.XunitV3\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project for using Verify with XunitV3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding DiffPlex NuGet Package with XML\nDESCRIPTION: XML snippet showing how to add the Verify.DiffPlex NuGet package to the project. This package enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex for Verify in C#\nDESCRIPTION: Code showing how to initialize Verify.DiffPlex using a module initializer. This changes the text comparison behavior to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances the diff output for failed verifications.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool, which allows for managing verification snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which enables management of snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: A test that runs VerifyChecks.Run() to verify that all conventions are being followed in the project. This helps ensure consistent snapshot testing configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksExpecto\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks Test with Fixie\nDESCRIPTION: C# code for setting up a Fixie test to run VerifyChecks, which validates that all Verify conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Generated File Warning\nDESCRIPTION: HTML comment indicating this is an auto-generated file by MarkdownSnippets with instructions not to edit directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/MacOS_Rider_Cli_Expecto.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies the code by removing the need for explicit namespace imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Methods\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors, helping to catch missed await statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test Using Verify\nDESCRIPTION: An example of a TUnit test using Verify to compare the actual output with the expected snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item and Variant Structure in JSON\nDESCRIPTION: This JSON structure defines an item with a title and a nested variant object. The item's title includes a GUID, and both the item and variant have GUID identifiers.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineGuids.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Title\": \"item Guid_1 - (ID={Guid_1})\",\n  \"Variant\": {\n    \"Id\": \"variant id: Guid_1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core Fixie test runner and Verify.Fixie integration packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Tool as a .NET Global Tool\nDESCRIPTION: Installs Verify.Terminal, a command-line tool for managing Verify snapshots, using the .NET CLI, which enhances snapshot management from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is useful for Verify's PureAttribute usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration for enabling implicit usings in a .NET project, which simplifies code by removing the need for explicit using statements.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify checks with Fixie\nDESCRIPTION: Example of how to run Verify checks using Fixie. This code should be placed in a test method to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task CheckVerifyConventions() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with MSTest\nDESCRIPTION: MSTest example for implementing a test that checks if all Verify conventions are correctly configured in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is used for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider/ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages for VerifyTests\nDESCRIPTION: NuGet package references required for setting up VerifyTests with TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.9.0\" />\n<PackageReference Include=\"TUnit\" Version=\"1.0.1\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"23.0.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, MSTest packages, and Verify.MSTest for test implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray globally using the .NET CLI tool. DiffEngineTray is used for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: YAML configuration for uploading received files as artifacts when tests fail in GitHub Actions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in MSTest\nDESCRIPTION: C# code snippet demonstrating how to run Verify's conventions check in an MSTest test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with Xunit\nDESCRIPTION: These commands add the necessary NuGet packages to the test project for using Verify with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using VerifyTests\nDESCRIPTION: A complete example of a Fixie test that uses VerifyTests to verify a test target. It shows proper structure and usage of the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Sample\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package to the project. This package enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool with .NET CLI\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Expecto\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Expecto. It includes Verify.Expecto for integration with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude all received files from source control, as they represent test outputs that should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify conventions check using VerifyChecks.Run() in a TUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: Example of a Verify test using Xunit. This snippet demonstrates how to write a simple test method using Verify with Xunit attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This snippet demonstrates how to initialize Verify.DiffPlex. It uses the ModuleInitializer attribute to ensure the initialization occurs at the appropriate time.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: This snippet demonstrates how to run Verify checks in an MSTest setup. It uses the TestInitialize attribute to ensure checks are run before each test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TestInitialize]\npublic void Setup()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Serialized Exception Object Format\nDESCRIPTION: Shows the structure of a serialized exception object containing type, error message and stack trace information. The stack trace indicates the error occurred in SerializationTests.MethodThatThrows().\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TargetInvocationException.DotNet8_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: the message,\n  StackTrace:\nat SerializationTests.MethodThatThrows()\nat InvokeStub_SerializationTests.MethodThatThrows(Object, Object, IntPtr*)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This C# code snippet demonstrates how to initialize Verify.DiffPlex using a module initializer. It enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Verification Test with XunitV3\nDESCRIPTION: Sample test showing how to use Verify with XunitV3 to snapshot test the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package to TUnit Project\nDESCRIPTION: XML snippet for adding the Verify.DiffPlex NuGet package to the project file. This package enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received files across different editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Add these NuGet package references to the test project to set up NUnit and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit NuGet Packages for Verify\nDESCRIPTION: Add the required NuGet packages to the test project for using Verify with Xunit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.4.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Test with Fixie in C#\nDESCRIPTION: Demonstrates a sample test class using Verify with Fixie. The test finds a person and verifies the result using the Verify method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with XunitV3\nDESCRIPTION: A sample C# test class demonstrating how to use Verify with XunitV3 to snapshot test a person object returned from a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: This snippet shows a basic Xunit test using Verify. It demonstrates how to use the Verify method to snapshot test the result of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for proper handling of verified text files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Verify Test Files\nDESCRIPTION: Git configuration to exclude received files and set encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Exception Data Structure in JSON\nDESCRIPTION: A JSON structure that defines the format for exception verification in tests. It captures the exception type, the error message, and the stack trace pointing to the method that threw the exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ExceptionResult.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.MethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooAssemblyConfigurationFluent Class in C#\nDESCRIPTION: This snippet declares a class named FooAssemblyConfigurationFluent. The class is likely intended to provide a fluent interface for configuring Foo assembly settings, but no implementation details are provided in this snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NamerTests.AssemblyConfigurationFluent.Release.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nFooAssemblyConfigurationFluent\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package reference to the project. This package enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to handle Verify's received files when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit Test\nDESCRIPTION: NUnit test fixture to run Verify checks, ensuring conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Tool for Command Line Snapshot Management\nDESCRIPTION: Command to globally install the Verify.Terminal tool (verify.tool), which enables managing verification snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors in Rider and ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: Configures a command line task that sets a pipeline variable when tests fail. Uses the failed() condition to trigger the flag setting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Adding Verify and Expecto NuGet Packages to .NET Project\nDESCRIPTION: Install required NuGet packages for Verify and Expecto in a .NET test project to enable testing functionalities. No additional dependencies are required. The commands must be executed in the terminal within the project directory. These commands do not provide output but ensure package availability.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Expecto\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances diff output by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify in .NET\nDESCRIPTION: Specifies the required `PackageReference` elements to include `Microsoft.NET.Test.Sdk`, `Verify.Xunit`, `xunit`, and `xunit.runner.visualstudio` in a `.csproj` file. This is necessary for setting up Verify testing with the Xunit framework in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for handling verified and received files consistently.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: This command installs DiffEngineTray, a .NET global tool that aids in managing snapshot diffs during testing, facilitating the acceptance or rejection of changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a Global .NET Tool\nDESCRIPTION: Provides the command-line instruction for installing DiffEngineTray globally using dotnet tools. This tray application monitors and assists in resolving Verify snapshot diffs. Requires .NET SDK installed; run in a shell/terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from version control, which are temporary files generated during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a best practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control. These files are generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which improves text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Expected Output After Clearing Recording (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file from the `RecordingClear` snippet, showing only items added after the `Clear()` call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.Clear.verified.txt\n{\n  Recorded:\n  {\n    key2: value2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which is used for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as Global .NET Tool - Shell\nDESCRIPTION: This shell command installs the DiffEngineTray, a tray-based utility for monitoring and reviewing Verify snapshots, as a globally available .NET tool. Requires .NET SDK and permission to install global tools. No arguments are needed. This tool provides a system tray interface supporting snapshot acceptance/rejection, but installation is optional.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Configuration Structure\nDESCRIPTION: This JSON snippet defines a configuration object with a nested structure. It contains a 'key' property which has a 'msg' subproperty set to 'No action taken'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonStream.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  key: {\n    msg: No action taken\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Text Files\nDESCRIPTION: EditorConfig configuration for verified and received text files to ensure consistent handling across editors, setting encoding, line endings, and preventing final newlines.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure correct file formatting for verified and received files, including UTF-8 with BOM, line endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verified and Received Files - INI\nDESCRIPTION: Provides EditorConfig rules to enforce line endings, encoding (UTF-8 with BOM), and whitespace settings for JSON, TXT, and XML received/verified snapshot files. Ensures editors handle files in accordance with Verify's repository conventions. Place in a .editorconfig file; rules apply to specified file globs and can be extended for additional file types.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Data Object in JSON\nDESCRIPTION: This snippet shows a simple object structure resembling JSON, containing two key-value pairs. 'Property' is assigned the string 'Value', and 'Disposed' is assigned the boolean 'false'. Note that strictly valid JSON requires keys and string values to be enclosed in double quotes (e.g., \"Property\": \"Value\").\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.TaskResultDisposable.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  Property: Value,\\n  Disposed: false\\n}\n```\n\n----------------------------------------\n\nTITLE: Input XML for Verification\nDESCRIPTION: This XML snippet provides the sample data used as input for the XML verification examples. It represents a simple XML structure with a root `<body>` element containing a `<node>` element.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-xml.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n```\n<body><node>text</node></body>\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering Verified Files in a Zip Archive in Xunit v3 (C#)\nDESCRIPTION: Illustrates how to filter which files are verified from a zip archive when using VerifyZip in Xunit v3 C#. This enables targeting a subset of files by specifying file matching criteria as a parameter. Requires the Verify library and Xunit v3, and supports scenarios where only specific files in the archive should be tested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-zip.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyZipFilterXunitV3\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Testing in C#\nDESCRIPTION: This snippet shows the NuGet packages required for using Verify with Xunit testing framework. It includes Verify.Xunit for integration with Xunit, and Microsoft.NET.Test.Sdk for .NET test infrastructure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"20.8.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" />\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit V3 NuGet Packages for Verify Tests\nDESCRIPTION: This snippet shows the required NuGet package references to add to a test project for using Verify with XUnit V3, including the Microsoft.NET.Test.Sdk, Verify.XunitV3, and XUnit V3 runner packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify testing with XUnit V3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing XUnit V3 NuGet Dependencies\nDESCRIPTION: Required NuGet package references for setting up Verify with XUnit V3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Verification Test Parameters in JSON\nDESCRIPTION: This JSON object defines configuration settings or expected output for a verification test. It includes properties like 'Include', 'Field', 'Property', 'PropertyByName', 'GetOnlyProperty', and 'PropertyThatThrows'. Values marked as '{Scrubbed}' likely indicate that the actual value should be ignored or replaced during the verification process, often used for sensitive or dynamically generated data. The 'PropertyThatThrows' key suggests a test case involving expected exceptions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubMemberByNameFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Include: Value,\n  Field: {Scrubbed},\n  Property: {Scrubbed},\n  PropertyByName: {Scrubbed},\n  GetOnlyProperty: asd,\n  PropertyThatThrows: {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Objects with Diverse Key-Value Variants in JavaScript\nDESCRIPTION: This JavaScript snippet defines an object with nested property combinations, including cases with null as a key or value, single and multiple key-value pairs, and properties with values as plain strings, comma-separated lists, or null. It requires standard JavaScript and does not import or depend on any outside library. The object showcases differences in possible property assignment scenarios and can be used to test how JavaScript structures and interprets object definitions with unconventional keys or values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NameValueCollection.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  item1: {\n    null: null\n  },\n  item2: {\n    key: null\n  },\n  item3: {\n    null: value\n  },\n  item4: {\n    key: value\n  },\n  item5: {\n    key: value1,value2\n  },\n  item6: {\n    key: value2\n  },\n  item7: {\n    key: value1\n  },\n  item8: {\n    key1: value1,\n    key2: value2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET CLI\nDESCRIPTION: Command to install DiffEngineTray tool globally, which helps monitor and manage snapshot changes in the Windows system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool which provides a Windows tray utility for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Enhanced Text Comparison\nDESCRIPTION: Code to initialize Verify.DiffPlex, which improves text difference highlighting in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add required NuGet packages for using Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex for Verify\nDESCRIPTION: Code to initialize the Verify.DiffPlex plugin which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with XUnit v3\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using XUnit v3. It creates a test method that calls VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with XUnit V3, including test SDK and runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line utilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML snippet to enable implicit usings in the project file, which allows direct use of Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Sample xUnit Test with Verify\nDESCRIPTION: An example test using Verify with xUnit, demonstrating the typical structure of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing VerifyXunit;\n\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray via .NET Tool\nDESCRIPTION: Command to install DiffEngineTray globally as a .NET tool. DiffEngineTray is used for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Test class that runs VerifyChecks.Run() to ensure all Verify conventions are properly configured in your project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add required NuGet packages for Microsoft.NET.Test.Sdk, Verify.Xunit, Xunit, and xunit.runner.visualstudio to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to a .NET test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Xunit\nDESCRIPTION: A Xunit test method to run Verify's convention checks, ensuring that all necessary configurations are in place.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally. This tool allows for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for improved text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code initializes Verify.DiffPlex to change the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: Module initialization code to enable Verify.DiffPlex for improved diff visualization in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Class with Equality Comparison in C#\nDESCRIPTION: A C# class that demonstrates how to implement value comparison semantics. The class includes equality operators, GetHashCode and Equals method overrides, and a static Equals method for comparing objects for equivalence.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.DerivePaths.Tests/Tests.ReturnNulls.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n﻿Value\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which modifies the text comparison behavior of Verify to highlight differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Fixie\nDESCRIPTION: A Fixie test class that runs the Verify conventions check against the current assembly to ensure all Verify conventions are being followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and MSTest\nDESCRIPTION: These commands add the necessary NuGet packages to set up Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: This .gitignore entry excludes all *.received.* files from source control, which is a recommended practice when using Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: An example of a Verify test using TUnit, demonstrating the basic structure and usage of Verify in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DateTime Object (Unknown Language)\nDESCRIPTION: This appears to be a reference to DateTime functionality, possibly labeled as 'DateTime_1'. Without additional context, the specific implementation details and purpose cannot be determined.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubInlineDateTimesStartingInNewline2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\nDateTime_1\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to enable enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit v3 Test with Verify\nDESCRIPTION: A sample test using XUnit v3 with Verify. This shows the basic pattern for writing verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunitV3\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances the text comparison capabilities of Verify with inline difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify convention checks with MSTest\nDESCRIPTION: Example of running Verify convention checks in an MSTest test to ensure all Verify settings are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() => VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex for Improved Diff Output\nDESCRIPTION: Code to initialize Verify.DiffPlex for better text comparison results in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for more concise code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to enable inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample XunitV3 Test Using Verify\nDESCRIPTION: A complete sample XunitV3 test class demonstrating how to use Verify to snapshot test a person object returned from ClassBeingTested.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Treat Unused Pure Method Returns as Error\nDESCRIPTION: EditorConfig setting to make ReSharper treat unused return values of pure methods (like Verify()) as errors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for setting up MSTest with Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add necessary NuGet packages for setting up MSTest with Verify framework including test SDK and adapters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Accessing Exception from Verifier.Throws\nDESCRIPTION: Demonstrates how to access the Exception object from Verifier.Throws to perform additional validation on thrown exceptions during verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task UseThrowsResult()\n{\n    var result = await Verifier.Throws(\n        () => throw new(\"The Message\", new Exception(\"Inner\")));\n    Debug.WriteLine(result.Exception.Message);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: This command installs the Verify.Terminal tool globally, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: Example test using Verify with MSTest. This is a sample implementation to show the basic structure and syntax of a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestMSTest\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks in C# with Expecto\nDESCRIPTION: C# code to run VerifyChecks using Expecto test framework to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in a Test Project\nDESCRIPTION: Code to initialize Verify.DiffPlex which changes the text compare result to highlight differences inline when verifications fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Ignoring XML Member in C#\nDESCRIPTION: Demonstrates how to ignore a specific XML member during verification. This snippet shows a unit test that ignores the 'node' element in the XML structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task XmlIgnoreMember() =>\n    VerifyXml(xml)\n        .IgnoreMember(\"node\");\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally, which provides a system tray utility for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison behavior by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Expecto Test\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an Expecto test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simpler code syntax\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: GitAttributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified text files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test Using Fixie\nDESCRIPTION: Example test that demonstrates how to use Verify with Fixie to create a snapshot test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task Sample()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    await Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison functionality using the ModuleInitializer attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit and Verify Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with NUnit including test SDK and adapters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in .NET Project - MSBuild XML\nDESCRIPTION: Shows the required property to enable Implicit Usings in .NET project files so that sample code compiles without explicit using directives. This ensures automatic inclusion of common namespaces. Key parameter is setting the value to 'enable'.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and XUnit v3\nDESCRIPTION: Commands to add required NuGet packages for using Verify with XUnit v3 in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Locations in JSON\nDESCRIPTION: Defines the primary and alternative code base locations for Verify tests. Both locations are set to the current directory, represented by the {CurrentDirectory} placeholder.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubCodeBaseLocation.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  codeBaseLocation: {CurrentDirectory},\n  altCodeBaseLocation: {CurrentDirectory}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for handling verified files with correct encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Adding F# Converters to Verifier Settings\nDESCRIPTION: Configures the verifier settings to properly handle F# types by adding F#-specific converters.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/fsharp.md#2025-04-22_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\nVerifierSettings.AddExtraSettings(fun settings -> settings.AddFSharpConverters())\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Verification Test with MSTest\nDESCRIPTION: Sample test class demonstrating how to write a basic verification test using MSTest and Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Forward and Backslash Characters\nDESCRIPTION: A JSON object that maps forward slash and backslash characters to themselves. This demonstrates how special characters like backslashes need to be escaped in JSON syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/CombinationTests.KeysWithInvalidPathChars.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  /: /,\n  \\: \\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for maintaining consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Expecto_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for handling received files in AppVeyor CI pipeline\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Sample XUnit V3 Verify Test\nDESCRIPTION: Example test implementation using the Verify framework with XUnit V3\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Children = new() {\"Sam\", \"Mary\"},\n            Address = new()\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adding the Verify.DiffPlex NuGet package reference to enable enhanced text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with Expecto\nDESCRIPTION: Code example for running VerifyChecks.Run() in an Expecto test to ensure all Verify conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Test Using Verify\nDESCRIPTION: This snippet shows a sample MSTest test class using Verify to test a method that finds a person.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration\nDESCRIPTION: Git attributes configuration for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: Example of a basic snapshot test using Verify with the Expecto test framework in F#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Return Values\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is useful for Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Basic example showing how to implement a test using Verify with Xunit, demonstrating the verification of a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: Commands to add the required NuGet packages for Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Sets Git attributes for verified files to ensure consistent line endings and encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Test Results\nDESCRIPTION: YAML configuration for GitHub Actions to upload received files on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files generated by Verify from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison functionality using module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration for handling line endings and encoding of verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions to Upload Received Files on Failure\nDESCRIPTION: Adds a step to the GitHub Actions workflow to upload *.received.* files if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: VerifyChecks for Expecto\nDESCRIPTION: Demonstrates running VerifyChecks in an Expecto test to validate that snapshot file conventions are correctly configured, ensuring proper source control integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/readme.source.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[<Test>]\nlet VerifyChecks() =\n    Verifier.VerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: A sample test using Verify with Fixie, demonstrating how to verify an object's properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person\n        {\n            GivenNames = \"John\",\n            FamilyName = \"Smith\",\n            Spouse = \"Jill\",\n            Address = new Address\n            {\n                Street = \"4 Puddle Lane\",\n                Country = \"USA\"\n            }\n        };\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Verify Conventions in NUnit\nDESCRIPTION: A code snippet demonstrating how to check Verify conventions in an NUnit test using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring AppVeyor to Capture .received Files\nDESCRIPTION: PowerShell script to be added to AppVeyor configuration for capturing and pushing .received files as artifacts on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Implementing Verification Checks with TUnit\nDESCRIPTION: Sample code demonstrating how to run verification checks using TUnit to ensure conventions are properly followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyTest\n{\n    [TestCase]\n    public void VerifyChecks()\n    {\n        VerifyChecks.Run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: XUnit v3 test method to run Verify checks, ensuring all conventions are followed in the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable Implicit Usings in the project file, which is required for the Verify examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: This command installs the Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Methods\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods (like Verify()) as errors in ReSharper and Rider.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to a test project for using Verify with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verification Checks with Expecto\nDESCRIPTION: Example of how to run verification checks in an Expecto test to validate conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet Convention_test () =\n    task {\n        do! VerifyChecks.Run()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool, which allows managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Referencing a Date Field in SQL\nDESCRIPTION: A simple SQL fragment referencing a date field or variable named 'aDate_1b'. This would typically be used as part of a larger SQL query or database operation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.VariableLengthDates_wrapped.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\naDate_1b\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example NUnit test class showing basic usage of Verify for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyChecks in Expecto\nDESCRIPTION: Example of running convention checks in an Expecto test to verify that project follows the recommended Verify practices.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Tests]\n    public static Test verifyChecksTest = Runner.TestCase(\n        nameof(verifyChecksTest),\n        () => VerifyChecks.Run(typeof(VerifyChecksTests).Assembly));\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Received Files on GitHub Actions Failure\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Required NuGet packages for setting up Verify with Expecto testing framework. These packages need to be added to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nexpecto-nugets\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: This command adds the Verify.DiffPlex package to enhance text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit in .NET CLI\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Xunit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: An example test using Verify with Expecto testing framework. Shows the basic structure and pattern for implementing snapshot testing in an Expecto project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestExpecto\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: Initializes the VerifyDiffPlex functionality using a module initializer to enable enhanced diff comparison features.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie\nDESCRIPTION: A sample test demonstrating how to use Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n\npublic class Person\n{\n    public Person(string firstName, string lastName)\n    {\n        FirstName = firstName;\n        LastName = lastName;\n    }\n\n    public string FirstName { get; }\n    public string LastName { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in a TUnit test by calling VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package reference to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit NuGet Packages in C#\nDESCRIPTION: A list of NuGet packages required for using NUnit with Verify. These packages should be added to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsnippet: nunit-nugets\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: This snippet demonstrates how to use the VerifyBase class in MSTest to simplify the usage of Verify in test classes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Expecto in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Setting Up ImplicitUsings for Verify\nDESCRIPTION: XML configuration to enable implicit usings in the project file, allowing for shorter syntax when using Verify methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Verify Result - Main Object\nDESCRIPTION: This snippet shows the verified output of the main object passed to Verify. It contains a JSON representation of the anonymous object with a 'Property' field.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/explicit-targets.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in F#\nDESCRIPTION: Example of how to write a test using Verify with Expecto testing framework in F#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package, which changes the text compare result to highlight text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Code showing how to initialize Verify.DiffPlex for enhanced text comparison functionality during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex Integration\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced diff viewing in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify convention checks using XUnit v3 testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Code snippet demonstrating how to run Verify conventions check using VerifyChecks.Run() in a TUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for handling verified and received files with correct encoding and line endings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package to the project for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation with XUnit V3\nDESCRIPTION: Example test implementation showing how to use Verify with XUnit V3 for testing a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Value Expression in Plaintext\nDESCRIPTION: A basic plaintext expression consisting of only the word 'value'. This could be a placeholder, a test value, or a simple string literal depending on the context in which it's used.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/Snippets/UniqueForSample.AssemblyConfigurationFluent.Debug.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages\nDESCRIPTION: Commands to add the required NuGet packages for Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for TUnit and Verify\nDESCRIPTION: Specifies the NuGet packages required for using Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"*\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Xunit in .NET CLI\nDESCRIPTION: Commands to add required NuGet packages for Verify and Xunit to the test project using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NUnit NuGet Packages for Verify\nDESCRIPTION: The necessary NuGet package references to add to a test project for using Verify with NUnit. Includes the core NUnit packages, Verify.NUnit, and the NUnit3TestAdapter for test discovery.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison functionality. Uses ModuleInitializer to ensure initialization at startup.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Expecto and Verify\nDESCRIPTION: Add the necessary NuGet packages to the test project for using Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: This command installs the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: This code initializes Verify.DiffPlex to enhance text comparison behavior in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: A sample TUnit test method demonstrating how to use Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using Expecto\nDESCRIPTION: Demonstrates a sample Verify test using the Expecto test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Sample test`` () =\n    task {\n        let! result = Verify.Text(\"Hello World!\")\n        Expect.isEmpty result \"Should be empty\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code compilation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Executing Verify Conventions Check with TUnit\nDESCRIPTION: Example of how to run Verify's convention checks using TUnit's test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task RunChecks() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages via CLI\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify with Expecto to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex, which enhances text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Property for Verify Tests in JSON\nDESCRIPTION: This snippet defines a configuration object with a single property 'Line'. It's likely used to set up parameters for verification tests in a project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubEmptyLinesStartAndEndProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Property: Line\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Add the Verify.DiffPlex NuGet package to enhance diff output for large strings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the DiffPlex integration for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Verification Test\nDESCRIPTION: Example test class showing how to implement a basic verification test using MSTest and Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex functionality using a module initializer. This enables enhanced text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: F# code demonstrating a sample Expecto test using Verify to snapshot test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify and Xunit testing to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Test with Verify\nDESCRIPTION: An example test implementation using TUnit with Verify to demonstrate the proper setup and usage pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: Complete example of a verification test using Expecto and Verify together.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Tests\n\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"Test\" {\n        let settings = VerifySettings()\n        // Change settings here\n\n        let target = \"Some text\"\n\n        do! Verifier.Verify(target, settings)\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Fixie\nDESCRIPTION: Add the necessary NuGet packages to the test project for using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting Fake Machine Name\nDESCRIPTION: A placeholder machine name value, likely used for testing or verification purposes. The 'Fake' prefix suggests this is a mock or test value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/ApplyScrubbersTests.ScrubMachineNameInValidAfter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFakeMachineNameA\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control while preserving verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Key-Value Configuration\nDESCRIPTION: Simple JSON structure defining a configuration with a single key-value pair. Uses basic object notation with TheType as the key and TheValue as its corresponding value.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Claim.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  TheType: TheValue\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Test Framework with Include Setting\nDESCRIPTION: This JSON configuration specifies an Include setting with a value of 1, which likely enables or configures some inclusion behavior in the Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.JTokenIgnore.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Include: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package reference to the project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring DotSettings for Orphaned Process Detection\nDESCRIPTION: Configuration to disable orphaned process detection in Rider/ReSharper.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie with VerifyTests\nDESCRIPTION: The NuGet package references needed to set up VerifyTests with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved diff output in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for Fixie\nDESCRIPTION: Commands to add the required NuGet packages for using Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample Verification Test with MSTest\nDESCRIPTION: Example MSTest class showing how to write a simple verification test with Verify in MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in Xunit\nDESCRIPTION: Xunit test method to run Verify's convention checks, ensuring proper setup and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Provides a sample test using Verify with TUnit, demonstrating basic usage and assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing parameter 'x' in SerializationTests.MyMethodWithParameters method in C#\nDESCRIPTION: A reference to the 'x' parameter of the MyMethodWithParameters method in the SerializationTests class. This likely represents a test method signature used in serialization verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.Parameter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n'x' of SerializationTests.MyMethodWithParameters(int x, string y)\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray globally as a dotnet tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for enhanced diff visualization in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks using TUnit in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: GitIgnore patterns to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Better Diff Visualization\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances the visualization of differences in verification failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the VerifyDiffPlex configuration using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for improved text comparison output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot diffs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude generated *.received.* files from source control while keeping verified snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages\nDESCRIPTION: Required NuGet package references for TUnit and Verify.TUnit integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check in NUnit\nDESCRIPTION: Code snippet demonstrating how to run Verify convention checks in an NUnit test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task VerifyChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Conventions Check with Expecto\nDESCRIPTION: Example of implementing a conventions check test using Verify with Expecto. This ensures all Verify conventions are properly configured.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Tests>]\nlet ``Verify conventions`` () = task {\n    do! VerifyChecks.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Hashing Parameters in TUnit Tests (Fluent Approach)\nDESCRIPTION: Shows how to hash parameters for use in the verified file name using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-tunit.source.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verifier.Verify(\"Foo\")\n    .UseParametersHash();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify testing with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test with Verify\nDESCRIPTION: F# example showing how to write a test using Verify with Expecto\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: fsharp\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the essential NuGet packages for Fixie and Verify.Fixie to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: UUID Identifier\nDESCRIPTION: A UUID/GUID formatted string identifier following standard UUID v4 format\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.Guid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nebced679-45d3-4653-8791-3d969c4a986c\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: A sample NUnit test using Verify. This snippet is referenced but not provided in the text.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestNUnit code snippet is not provided in the given text\n```\n\n----------------------------------------\n\nTITLE: JSON Date Format Examples\nDESCRIPTION: Sample JSON object containing various date format patterns for testing. Includes cases for date-only values, dates with time components, timezone offsets, and millisecond precision timestamps.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeOffsetScrubbingDisabled.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  noTime: 2000-01-01 +1-30,\n  withTime: 2000-01-01 01:01:01 +1,\n  withTimeZeroSeconds: 2000-01-01 01:01 +1,\n  withTimeMilliSeconds: 2000-01-01 01:01:01.999 +1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Expecto with Verify\nDESCRIPTION: NuGet package references required for setting up Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control Exclusions\nDESCRIPTION: Git configuration to exclude received test files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Filename in TUnit Tests (Instance)\nDESCRIPTION: Shows how to ignore parameters when generating the verified filename using IgnoreParametersForVerified() with an instance of VerifySettings in TUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/parameterised-tunit.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[Test]\n[Arguments(\"One\")]\n[Arguments(\"Two\")]\npublic Task IgnoreParametersForVerified(string arg)\n{\n    var settings = new VerifySettings();\n    settings.IgnoreParametersForVerified();\n    return Verify(\"value\", settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Fixie and Verify.Fixie to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Result of Inferred Guid Naming\nDESCRIPTION: This snippet shows the result of using inferred guid naming in the verified output file. The guid has been replaced with the inferred name.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\nsomeGuid\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Managing Git Ignore for Received Files\nDESCRIPTION: Add the following patterns to `.gitignore` to exclude all `*.received.*` files from source control. This helps maintain a clean repository by excluding auto-generated or temporary files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters for Verified Filename in MSTest\nDESCRIPTION: Shows how to ignore specific parameters when generating the verified filename in MSTest Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/parameterised-mstest.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task IgnoreParametersForVerified(string toIgnore, string toInclude) =>\n    Verify(\"value\")\n        .IgnoreParametersForVerified(x => x.toIgnore);\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages with .NET CLI\nDESCRIPTION: Commands to add the essential NuGet packages for Verify with NUnit testing, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks in an XUnit v3 test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_None.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Verify Test Results on Failure in GitHub Actions\nDESCRIPTION: This YAML configuration defines a GitHub Actions step that uploads all *.received.* files as artifacts when a build fails. This is particularly useful for debugging verification tests that fail during CI, as it provides access to the actual outputs that didn't match expectations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with NUnit\nDESCRIPTION: Code snippet demonstrating how to run verification convention checks in an NUnit test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_NUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyConventions() => \n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Verify.DiffPlex for Inline Text Comparison\nDESCRIPTION: Initialize Verify.DiffPlex to enhance text comparison results by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Required NuGet Packages for Verify.NUnit on MacOS\nDESCRIPTION: CLI commands to add the necessary NuGet packages for running Verify.NUnit tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for inline text comparison in Verify tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Inline GUID Scrubbing - Instance Configuration\nDESCRIPTION: Demonstrates how to enable inline GUID scrubbing for a specific test instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/guids.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\n[Fact]\npublic Task ScrubInlineGuidsInstance()\n{\n    var settings = new VerifySettings();\n    settings.ScrubInlineGuids();\n    return Verify(\n        \"content 651ad409-fc30-4b12-a47e-616d3f953e4c content\",\n        settings);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XUnit v3 Package References for Verify in csproj\nDESCRIPTION: NuGet package references required for Verify with XUnit v3, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.runner.visualstudio, and xunit.v3.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test implementation showing basic usage of Verify with TUnit test framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Artifact Upload Configuration\nDESCRIPTION: GitHub Actions workflow configuration to upload received files on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: This code snippet shows how to run Verify checks in an Xunit test to ensure conventions are followed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Object with a Single Property\nDESCRIPTION: This code snippet demonstrates the creation of a basic JSON object with one property. The property 'Property' is assigned the string value 'Line'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubEmptyLinesStartAndEndAndWhiteSpaceProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Property: Line\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Command Line Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots via command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: This code snippet demonstrates how to run Verify checks in an Xunit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// VerifyChecksXunit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package to the project for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify and Expecto in C#\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with MSTest in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for handling received files in AppVeyor CI pipeline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with XUnit v3\nDESCRIPTION: Test class demonstrating how to run Verify convention checks using XUnit v3 Fact attribute.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex, which enhances text comparison behavior by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks with XUnit V3\nDESCRIPTION: Test class implementation for running Verify convention checks using XUnit V3 test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DiffPlex Integration\nDESCRIPTION: C# code to initialize and enable DiffPlex integration for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify and TUnit NuGet Packages\nDESCRIPTION: Commands to add the required NuGet packages for Verify and TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Verify with Expecto\nDESCRIPTION: Adds the required NuGet packages to the test project for using Verify with Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Expecto_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Running Verify Convention Checks in NUnit\nDESCRIPTION: Sample test fixture demonstrating how to run Verify convention checks using NUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring and managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Fixie and Verify.Fixie to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Example of a Fixie test using Verify to compare a string against a stored snapshot.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        return Verify(\"Hello World!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for improved text difference visualization in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie\nDESCRIPTION: NuGet package references required for using Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"3.*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Expecto\nDESCRIPTION: Commands to add the necessary NuGet packages for implementing Verify with Expecto tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Inferring Guid Names in C#\nDESCRIPTION: This snippet demonstrates how to infer the name of a guid from the variable name by omitting the name argument in C#.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/guids.source.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar someGuid = Guid.NewGuid();\nawait Verify(someGuid)\n    .UseGuidName(someGuid);\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks Test\nDESCRIPTION: MSTest implementation of VerifyChecks runner\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global dotnet tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test Using Verify\nDESCRIPTION: Example of a sample Xunit test method using Verify to perform snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Conventions with Expecto\nDESCRIPTION: Example of how to check Verify conventions by calling VerifyChecks.Run() in an Expecto test.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[<Test>]\nlet VerifyConventions () =\n    task {\n        let result = VerifyChecks.run ()\n        if result.HasError then\n            return! task { raise (Exception(result.ToString())) }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Command Line Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for enhanced diff viewing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with Fixie\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Configuring VerifyChecks with NUnit\nDESCRIPTION: Example showing how to run verification checks using the Verify framework with NUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void Run()\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the core TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to enable Verify with TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: This C# code demonstrates how to run Verify conventions check in a TUnit test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void RunChecks() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex integration for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example showing basic structure of a Verify test using Xunit, demonstrating how to verify an object state\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Value Class in C#\nDESCRIPTION: A basic class declaration for 'Value' with no implementation details. This appears to be a placeholder or an enumeration type without any defined properties or methods.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.MisMatchCase.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nValue\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test Using Verify\nDESCRIPTION: C# code snippet demonstrating a sample NUnit test using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n    return Verifier.Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary Verify and Fixie NuGet packages to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration for Verify\nDESCRIPTION: Pattern to add to .gitignore file to exclude generated .received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration in C#\nDESCRIPTION: Module initializer to configure DiffPlex for enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex integration with Verify for better diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for better diff visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: VerifyBase Usage Example\nDESCRIPTION: Demonstration of using VerifyBase class inheritance for MSTest verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Grouped Recording\nDESCRIPTION: Shows the verified output for the grouped Recording example, where multiple values for the same key are combined into an array.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n{\n  target: TheValue,\n  name: [\n    value1,\n    value2\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Enhanced Text Comparison\nDESCRIPTION: Command to install the Verify.DiffPlex package which provides improved text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Xunit\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using Xunit attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic Task Run() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Exclusion pattern for .gitignore to prevent received files from being committed to source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for managing snapshots from terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample MSTest Using Verify\nDESCRIPTION: Code example showing a basic test implementation using MSTest with Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestMSTest\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Object Structure in JSON\nDESCRIPTION: A JSON object representing an exception with Type and Message properties. The Type is set to 'Exception' and the Message contains the error text 'The Message'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestMethodThatThrowsIgnoreStackTraceFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Code snippet showing how to run Verify checks in a Fixie test to validate conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyConventions\n{\n    public void Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: TUnit test implementation for running verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: Code to initialize Verify.DiffPlex for enhanced text comparison results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: C# test class for running verification checks using TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex integration at module initialization time, enabling enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring GitIgnore for Verify Files\nDESCRIPTION: GitIgnore configuration to exclude received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal globally as a dotnet tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie in C#\nDESCRIPTION: Specifies the required NuGet packages to add to the test project for using Verify with Fixie.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nfixie-nugets\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package reference to the project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for enhanced text comparison in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with TUnit\nDESCRIPTION: Example of a Verify test using TUnit, demonstrating basic usage and assertions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task TestVerify()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verification Result for Scrubber Levels\nDESCRIPTION: Shows the output of multiple scrubbers applied at different levels, demonstrating how they combine to transform the verification data.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/scrubbers.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nA B C\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize the DiffPlex integration for enhanced difference highlighting in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: A code snippet demonstrating how to run Verify checks using Fixie conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fixie.Test]\npublic void CheckVerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison in tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Verify Test with MSTest\nDESCRIPTION: Create a sample test using Verify with MSTest to verify the output of a method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Add the Verify.DiffPlex NuGet package to enhance text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Verify and NUnit testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: PowerShell script for handling received files in AppVeyor build process\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, as these are generated during test execution and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: NuGet package references needed to use Verify with TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n<PackageReference Include=\"Verify.Playwright\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal as Global Tool - .NET Shell Command\nDESCRIPTION: This shell command installs Verify.Terminal globally as a .NET tool, offering a command-line interface for managing verification snapshots. It is optional and intended for users who prefer CLI snapshot management. The tool requires .NET SDK installed on the system.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool with .NET CLI\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors snapshot changes and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for XUnit V3\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit V3, including test SDK, Verify.XunitV3, and XUnit runners.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.XunitV3\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n<PackageReference Include=\"xunit.v3\" Version=\"2.0.1\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for TUnit with Verify\nDESCRIPTION: NuGet package references required to use Verify with TUnit testing framework. These packages provide the core verification functionality and integration with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nsnippet: tunit-nugets\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex package to the project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Gui_NUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Rider to Ignore Orphaned Processes\nDESCRIPTION: Settings to add to the solution's .DotSettings file to prevent Rider from showing dialogs about orphaned processes spawned by tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for setting up Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Verify Error Message JSON\nDESCRIPTION: Exception message in JSON format indicating a case sensitivity issue with tracked snapshot files in the Verify testing framework. Specifically highlights that 'Tracked.verified.txt' has been tracked with incorrect casing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DanglingSnapshotsCheckTests.IncorrectCase.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message:\nVerify has detected the following issues with snapshot files:\n\nThe following files have been tracked with incorrect case:\n\n * Tracked.verified.txt\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input-Output Mapping Table with Tuples - Plaintext\nDESCRIPTION: This snippet creates a mapping object where each key is a tuple of three values (a string, an integer, and a boolean) and each corresponding value is a unique identifier string. There are no external dependencies, and the structure relies on a JSON-like format. Inputs are the tuple keys; outputs are the mapped identifier values. Keys are not quoted per strict JSON, so this representation may not be valid JSON, and parsing may require customization. Make sure tuple parsing logic handles the mix of types correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/CombinationTests.Three.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\\n  A, 1, True : a1True,\\n  A, 1, False: a1False,\\n  A, 2, True : a2True,\\n  A, 2, False: a2False,\\n  A, 3, True : a3True,\\n  A, 3, False: a3False,\\n  b, 1, True : b1True,\\n  b, 1, False: b1False,\\n  b, 2, True : b2True,\\n  b, 2, False: b2False,\\n  b, 3, True : b3True,\\n  b, 3, False: b3False,\\n  C, 1, True : c1True,\\n  C, 1, False: c1False,\\n  C, 2, True : c2True,\\n  C, 2, False: c2False,\\n  C, 3, True : c3True,\\n  C, 3, False: c3False\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which enables managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool. This tool allows managing snapshots from the command line, providing additional functionality for working with verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool via dotnet CLI\nDESCRIPTION: Installs the Verify.Terminal .NET global tool using the dotnet CLI. This optional tool provides command-line utilities for managing Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: Module initialization code to enable DiffPlex integration with Verify for improved diff highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced difference comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for MSTest testing framework and Verify integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Fixie and Verify\nDESCRIPTION: NuGet package references required to use Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable Verify.DiffPlex for enhanced text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Using VerifyBase in MSTest\nDESCRIPTION: Example showing how to inherit from VerifyBase class to enable Verify functionality in MSTest tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_None.md#2025-04-22_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic class VerifyBaseUsage :\n    VerifyBase\n{\n    [TestMethod]\n    public Task Simple() =>\n        Verify(\"The content\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Shows the XML snippet for adding the Verify.DiffPlex NuGet package to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in NUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in an NUnit test using the VerifyChecks.Run() method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Initializes the DiffPlex functionality for Verify tests using a module initializer\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced difference highlighting in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Example implementation of a Fixie test using Verify framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test in MSTest\nDESCRIPTION: A sample C# test method using Verify with MSTest to verify the output of a method call.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TestClass]\npublic partial class Sample\n{\n    [TestMethod]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal globally as a dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the DiffPlex functionality for Verify tests using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_XunitV3_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Verifying FileStream in C#\nDESCRIPTION: Shows how to verify a FileStream without needing to specify the extension, as it can be automatically determined from the file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/binary.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verify(fileStream);\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for setting up Verify with NUnit testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_NUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in MSTest\nDESCRIPTION: Test class implementation showing how to run Verify convention checks using MSTest.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved diff output in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the global Verify.Terminal tool for managing snapshots via command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit and Verify.TUnit integration.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: Example of a sample Xunit test using Verify. The actual code is not provided in the snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestXunit code would be here\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in TUnit\nDESCRIPTION: A code snippet demonstrating how to run Verify checks in a TUnit test using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// snippet: VerifyChecksTUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Adds the Verify.DiffPlex NuGet package for enhanced text comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: Module initializer code to enable Verify.DiffPlex functionality for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for managing snapshots from command line\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages\nDESCRIPTION: Commands to add required NuGet packages for NUnit testing with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for consistent handling of verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: XML configuration for adding the Verify.DiffPlex NuGet package to the project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in XUnit v3\nDESCRIPTION: A code snippet showing how to run Verify checks in an XUnit v3 test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    [Fact]\n    public Task VerifyConventions() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Integration\nDESCRIPTION: C# code to initialize the DiffPlex integration with Verify for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check\nDESCRIPTION: Shows how to execute convention checks using VerifyChecks.Run() in a test context.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nVerifyChecks.Run()\n```\n\n----------------------------------------\n\nTITLE: Declaring a Simple Value in Plain Text\nDESCRIPTION: This snippet contains a basic value declaration without any specific programming language syntax. It serves as a minimal example or placeholder.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/Snippets/UniqueForSample.RuntimeFluent.DotNet.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: Demonstrates how to initialize Verify.DiffPlex to enable enhanced text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Example test implementation showing basic usage of Verify with NUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray tool globally using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Verifying Stream with Extension in C#\nDESCRIPTION: Demonstrates how to verify a binary stream by explicitly specifying the file extension to determine how the stream should be processed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/binary.source.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait Verify(stream, \"jpg\");\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto\nDESCRIPTION: F# example showing how to implement a verification test using Expecto\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality in Verify tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in MSTest\nDESCRIPTION: Test class implementation for running Verify convention checks in MSTest environment.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced diff visualization in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray\nDESCRIPTION: Command to install DiffEngineTray, a tool for monitoring and managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved diff output in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for enhanced text comparison in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize the Verify.DiffPlex functionality using a module initializer.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add essential NuGet packages for using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Formatting UTC Date in Plaintext\nDESCRIPTION: This snippet shows a date formatted in UTC (Coordinated Universal Time) with the year, month, and day separated by hyphens. The date is specified as October 1, 2000.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateFormatterTests.DateTimeUtcToJsonString.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2000-10-01 Utc\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Xunit\nDESCRIPTION: A sample C# test using Verify with Xunit attributes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\npublic class Tests\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invalid Verification Test Result in JSON\nDESCRIPTION: This JSON object represents an invalid result for a verification test. It contains a single key-value pair where the 'Value' is set to 'Invalid'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/TypeConverterTests.ConvertWithCanConvert_Invalid.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Value: Invalid\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code snippet for initializing Verify.DiffPlex to enhance text comparison behavior.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_XunitV3_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for Expecto testing with Verify\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Configuring User Object with Custom Type in JSON\nDESCRIPTION: This JSON snippet defines a User object configuration using a custom $type property. It specifies the full type name 'MyNamespace.User' and the assembly 'MyAssembly' where the type is defined.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonTypeRespectSerializerSettings.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"MyNamespace.User, MyAssembly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit\nDESCRIPTION: NuGet package references required for using Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.TUnit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex Configuration\nDESCRIPTION: C# code to initialize VerifyDiffPlex for inline text difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex in C#\nDESCRIPTION: Code snippet to initialize Verify.DiffPlex for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Excluding Verify Received Files in .gitignore\nDESCRIPTION: Specifies the pattern `*.received.*` to be added to a `.gitignore` file. This prevents temporary 'received' files generated by Verify during test runs from being committed to source control. An additional pattern `*.received/` is needed if using `UseSplitModeForUniqueDirectory`.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and file encoding for verified files, which helps prevent false test failures due to platform-specific differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Code to initialize and configure Verify.DiffPlex for inline text differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit and Verify.Xunit NuGet Packages in C#\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project's .csproj file. It includes Microsoft.NET.Test.Sdk, Verify.Xunit, xunit, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Publishing Verify Files in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps to set a flag when tests fail, used to determine whether to publish Verify's received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex in Test Project\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced difference visualization in test results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages for Fixie\nDESCRIPTION: NuGet package references required for using Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Fixie_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"*\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: UTC DateTime Format Display\nDESCRIPTION: Shows a date time value in UTC format with year, month, day, hours, minutes, and seconds.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeTopLevelInstance.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1935-10-01 10:15:30 Utc\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: GitIgnore configuration to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Conventions Check with TUnit\nDESCRIPTION: Code snippet demonstrating how to run Verify conventions check using TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void VerifyConventions() =>\n    VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for more concise code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify.Expecto\nDESCRIPTION: Commands to add required NuGet packages for using Verify.Expecto in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Displaying Descending Ordered Enumerable Result in Text\nDESCRIPTION: Shows the resulting verified text file after applying descending enumerable ordering.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/ordering.source.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[\n  {\n    Name: b\n  },\n  {\n    Name: a\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing VerifyDiffPlex\nDESCRIPTION: C# code to initialize VerifyDiffPlex for enhanced text comparison functionality in tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_TUnit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Using Verify\nDESCRIPTION: Demonstrates a sample test using Verify with Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Tests\n{\n    public Task Test()\n    {\n        var person = new Person(\"John\", \"Smith\");\n\n        return Verifier.Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal, a command-line tool for managing Verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for testing with Verify and XUnit\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Sample TUnit Verification Test\nDESCRIPTION: Example test demonstrating how to use Verify with TUnit to test a person object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Code to initialize the DiffPlex functionality for inline text difference highlighting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie in C#\nDESCRIPTION: Demonstrates how to run Verify checks using Fixie conventions in a test method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecksFixie\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Verification Test with dateName\nDESCRIPTION: A JSON configuration object that assigns a dateName value to the value property. Used for data verification testing scenarios.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDates_named.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  value: dateName\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for managing snapshots\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: Module initialization code to enable DiffPlex functionality for verify tests\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Initializing DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced difference highlighting\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Counting with Fluent API\nDESCRIPTION: Demonstrates how to disable date counting using a fluent API approach.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/dates.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\nvar target = new\n{\n    Date = new DateTime(2020, 10, 10, 0, 0, 0, DateTimeKind.Utc)\n};\n\nreturn Verify(target)\n    .DisableDateCounting();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example XUnit test using Verify for snapshot testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    [Fact]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with Expecto\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for enhanced text comparison functionality.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Value Element\nDESCRIPTION: A simple HTML value element without any attributes or content. This might be used as a placeholder in form elements or as part of a template system.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Expecto.Tests/Tests.myTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Source Control Exclusion Pattern\nDESCRIPTION: Gitignore pattern for excluding received files from source control while keeping verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Fixie_None.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Single Value Declaration in Plain Text\nDESCRIPTION: A basic text file containing just the word 'value' without any formatting or structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.DanglingFilesIgnoreParameters_param2=P2.DotNet8_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Expecto_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example NUnit test showing basic usage of Verify for testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Xunit Test Implementation\nDESCRIPTION: A sample Xunit test implementation using the Verify framework to create and verify snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in MSTest\nDESCRIPTION: Test class implementation for running Verify convention checks using MSTest framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Expecto in C#\nDESCRIPTION: Code snippet demonstrating how to run Verify checks using Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Scrubbing with Fluent API\nDESCRIPTION: Using the fluent API to disable date sanitization for a verification instance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nDontScrubDateTimesFluent\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation with Fixie\nDESCRIPTION: Test class implementation for running verification checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    public Task Run() =>\n        VerifyChecks.Run(GetType().Assembly);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add TUnit and Verify.TUnit NuGet packages to the test project\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: Commands to add necessary NuGet packages for NUnit and Verify to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add necessary NuGet packages including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Sample NUnit Test with Verify\nDESCRIPTION: Example of an NUnit test method using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestNUnit\n```\n\n----------------------------------------\n\nTITLE: Adding NUnit and Verify NuGet Packages\nDESCRIPTION: Specifies the required NuGet packages for using NUnit with Verify, including versions for Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for managing snapshot differences\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Initializing Verify.DiffPlex\nDESCRIPTION: C# code to initialize Verify.DiffPlex for improved text comparison results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize() =>\n    VerifyDiffPlex.Initialize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for cleaner code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify\nDESCRIPTION: EditorConfig settings for verified and received files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Inferred Named Date Output Example\nDESCRIPTION: Sample output showing how inferred named dates appear in verification results.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_16\n\nLANGUAGE: txt\nCODE:\n```\nDateScrubberTests.InferredNamedDateFluent.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: NUnit test implementation for running Verify convention checks\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_NUnit_None.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\n[TestFixture]\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Fixie Test Implementation\nDESCRIPTION: Example test implementation using Verify with Fixie test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Sample\n{\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for managing snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Sample Test Using Verify with TUnit\nDESCRIPTION: A sample test demonstrating the usage of Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_TUnit_AzureDevOps.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// SampleTestTUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Verified XML Output\nDESCRIPTION: Displays the expected output of the XML verification process. This snippet shows the pretty-printed and verified XML structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <node>text</node>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Verify Settings in C#\nDESCRIPTION: Demonstrates how to enable auto-verification of test results using instance settings.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-options.md#2025-04-22_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\nvar settings = new VerifySettings();\nsettings.AutoVerify();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Using TUnit\nDESCRIPTION: C# code demonstrating a sample Verify test using the TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic Task Test()\n{\n    return Verify(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Configuration Object\nDESCRIPTION: A JavaScript object literal that contains a single property 'value' set to 'instanceNamed'. This appears to be a configuration or settings object.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  value: instanceNamed\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_MSTest_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the global Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Checks in xUnit\nDESCRIPTION: Implementation of a test class to run Verify convention checks using xUnit test framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Xunit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify command-line tool for snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Xunit Test with Verify\nDESCRIPTION: A sample Xunit test method using Verify for snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestXunit\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with MSTest\nDESCRIPTION: A sample MSTest test method using Verify to perform snapshot testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TestMethod]\npublic Task Test()\n{\n    var person = new Person(\"John\", \"Smith\");\n\n    return Verify(person);\n}\n```\n\n----------------------------------------\n\nTITLE: Token Pattern with Scrubbed Content\nDESCRIPTION: Demonstrates a basic text pattern containing a scrubbed token surrounded by text delimiters 'a' and 'b'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DisableDateCountingInline.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\na {Scrubbed} b\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Checks in MSTest\nDESCRIPTION: Test class implementation for running verification checks in MSTest using VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\n[TestClass]\npublic partial class VerifyChecksTests\n{\n    [TestMethod]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: ISO 8601 Date Value with UTC Offset\nDESCRIPTION: This snippet demonstrates a date value in ISO 8601 format (2000-10-01) with a UTC offset of +0 hours. This format is commonly used in applications requiring unambiguous date representation with timezone information.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.DateTimeOffsetUtc.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2000-10-01+0\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks in Xunit\nDESCRIPTION: Example of how to run Verify checks in an Xunit test by calling VerifyChecks.Run().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Fixie in C#\nDESCRIPTION: Provides an example of a Verify test using Fixie testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Fixie_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestFixie\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Gitattributes Configuration for Verified Files\nDESCRIPTION: Git attributes configuration to ensure text-based verified files use line-feed endings and UTF-8 encoding, maintaining consistency across environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_None.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with Fixie\nDESCRIPTION: Test method that runs VerifyChecks to ensure proper configuration of Verify conventions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Checks() => VerifyChecks.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Test Output\nDESCRIPTION: Git configuration to exclude *.received.* files from source control. These are the temporary output files generated by Verify during testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Tool via Shell\nDESCRIPTION: This command installs the DiffEngineTray .NET global tool. DiffEngineTray monitors snapshot changes and provides a GUI for accepting or rejecting them. This tool is optional but recommended for a better visual diffing experience.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test Implementation\nDESCRIPTION: Example test implementation showing basic usage of Verify with TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class Sample\n{\n    [Test]\n    public Task Test()\n    {\n        var person = ClassBeingTested.FindPerson();\n        return Verify(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify\nDESCRIPTION: Git ignore patterns for excluding received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: GitIgnore configuration to exclude received files from source control\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: XUnit Dangling Snapshots Implementation\nDESCRIPTION: Implementation of dangling snapshots detection using XUnit collection definition.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dangling-files.source.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nDanglingSnapshotsXUnitUsage/DanglingSnapshots.cs\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and XUnit v3\nDESCRIPTION: Commands to add required NuGet packages to the test project, including Microsoft.NET.Test.Sdk, Verify.XunitV3, xunit.v3, and xunit.runner.visualstudio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.XunitV3\ndotnet add package xunit.v3 --prerelease\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Packages for Fixie Tests\nDESCRIPTION: Commands to add required NuGet packages for using Verify with Fixie tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify.Xunit in C#\nDESCRIPTION: Commands to add required NuGet packages for Verify.Xunit testing framework to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngine Tray as a .NET Global Tool\nDESCRIPTION: The command installs DiffEngineTray using the .NET command-line interface, enabling monitoring and management of test snapshot differences directly from the system tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration for Verify\nDESCRIPTION: GitHub Actions workflow configuration to upload received files as artifacts when tests fail, making it easier to diagnose verification failures in CI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Displaying Value Output\nDESCRIPTION: Basic test case that outputs a single value. Used for verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/Snippets/UniqueForSample.OSPlatform.Linux.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object\nDESCRIPTION: This code snippet shows an empty JSON object. It represents a data structure with no properties or values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonEmpty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Reading Machine Name Definition\nDESCRIPTION: A plain text entry containing what appears to be a machine name or identifier 'TheMachineName'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/ApplyScrubbersTests.ScrubMachineNameValidWrapped.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTheMachineName\n```\n\n----------------------------------------\n\nTITLE: Gitignore Configuration for Verify\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_None.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Windows User Directory Path\nDESCRIPTION: A basic Windows file system path pointing to a user directory named 'simon'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/DisableScrubUserProfileTests.Simple.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Users\\simon\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Capture\nDESCRIPTION: Example of disabling exception capture for specific tests when globally enabled.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nCombinationSample_CaptureExceptionsFalse\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: XUnit test implementation for running verify checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: GitIgnore Configuration\nDESCRIPTION: Git ignore pattern for excluding received test files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Implementation\nDESCRIPTION: Example test class implementing VerifyChecks.Run()\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Fact]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: EditorConfig for Text File Settings\nDESCRIPTION: The following EditorConfig settings ensure that verified and received text files adhere to specific conventions, such as UTF-8 BOM encoding and LF for line endings. Adjust other parameters as necessary.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Xunit and Verify NuGet Packages in C# Project\nDESCRIPTION: Adds necessary NuGet package references for Xunit testing framework and Verify to a C# project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_Xunit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Path Derivation for AppVeyor\nDESCRIPTION: C# implementation for custom path derivation when test assemblies are copied to different directories in AppVeyor builds.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/build-server.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nif (BuildServerDetector.Detected)\n{\n    var buildDirectory = Environment.GetEnvironmentVariable(\"APPVEYOR_BUILD_FOLDER\")!;\n    DerivePathInfo(\n        (sourceFile, projectDirectory, typeName, methodName) =>\n        {\n            var testDirectory = Path.GetDirectoryName(sourceFile)!;\n            var testDirectorySuffix = testDirectory.Replace(projectDirectory, string.Empty);\n            return new(directory: Path.Combine(buildDirectory, testDirectorySuffix));\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical navigation structure showing the path from home to specific test framework selection, implemented in Markdown format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Visual Studio with ReSharper](Windows_VisualStudioWithReSharper.md) > [Prefer CLI](Windows_VisualStudioWithReSharper_Cli.md)\n\n## Select Test Framework\n\nOptions:\n * [Xunit](Windows_VisualStudioWithReSharper_Cli_Xunit.md)\n * [XunitV3](Windows_VisualStudioWithReSharper_Cli_XunitV3.md)\n * [NUnit](Windows_VisualStudioWithReSharper_Cli_NUnit.md)\n * [TUnit](Windows_VisualStudioWithReSharper_Cli_TUnit.md)\n * [Fixie](Windows_VisualStudioWithReSharper_Cli_Fixie.md)\n * [MSTest](Windows_VisualStudioWithReSharper_Cli_MSTest.md)\n * [Expecto](Windows_VisualStudioWithReSharper_Cli_Expecto.md)\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which simplifies the usage of Verify by allowing direct calls to Verify() instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps Pipeline\nDESCRIPTION: This YAML task sets a pipeline variable 'publishverify' to 'Yes' when the test step fails. It uses the Azure DevOps condition feature to only run on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex via dotnet CLI - Shell\nDESCRIPTION: This shell command adds the Verify.DiffPlex NuGet package, which enhances text comparison by highlighting inline differences. Must be run in the root of the .NET-compatible test project. External dependency: .NET CLI and access to NuGet.org.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration\nDESCRIPTION: AppVeyor configuration to capture received files as artifacts on build failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Verify Checks Test Implementation\nDESCRIPTION: TUnit test implementation for running verification checks.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: cs\nCODE:\n```\npublic class VerifyChecksTests\n{\n    [Test]\n    public Task Run() =>\n        VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Verify Test with Expecto in C#\nDESCRIPTION: A sample test using Verify with Expecto testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSampleTestExpecto\n```\n\n----------------------------------------\n\nTITLE: Defining NestedFoo Class\nDESCRIPTION: Class name declaration for a nested/hierarchical class structure named NestedFoo.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/NestedTypeTests.Nested.ShouldPass.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nNestedFoo\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Git configuration to exclude received files from source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty JSON Object\nDESCRIPTION: This snippet defines an empty JSON object, represented by curly braces `{}`. It signifies an object with no key-value pairs and might be used as a placeholder or default empty state within the `/verifytests/verify` testing context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.IgnoreOnInterfaceNamed.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Fixie and Verify\nDESCRIPTION: Commands to add the required NuGet packages for Fixie and Verify.Fixie to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Fixie\ndotnet add package Verify.Fixie\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in Rider\nDESCRIPTION: Configuration to disable orphaned process detection in Rider, which can interfere with Verify's diff tool launching.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples in this guide to compile correctly without explicit namespace references.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to maintain consistent file formatting for verified and received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Fixie_None.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding TUnit and Verify.TUnit NuGet Packages in C#\nDESCRIPTION: This snippet shows how to add the required NuGet packages for TUnit and Verify.TUnit to a C# project file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for TUnit Verification\nDESCRIPTION: NuGet package references required for setting up Verify with TUnit. Includes the TUnit core package and the Verify integration package for TUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and Xunit\nDESCRIPTION: Commands to add required NuGet packages for Verify and Xunit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Xunit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package Verify.Xunit\ndotnet add package Xunit\ndotnet add package xunit.runner.visualstudio\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for setting up MSTest with Verify testing framework\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest and Verify\nDESCRIPTION: Commands to add essential NuGet packages for MSTest testing framework and Verify integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with TUnit\nDESCRIPTION: Commands to add the necessary NuGet packages for using Verify with TUnit testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Verify NuGet Packages via CLI\nDESCRIPTION: Commands to add TUnit and Verify.TUnit NuGet packages to the test project using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: XML snippet showing the required NuGet packages for using Verify with NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_NUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n<PackageReference Include=\"NUnit\" Version=\"3.13.3\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.4.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"20.3.2\" />\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit and Verify NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit testing with Verify framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool via .NET CLI\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which enables managing snapshots from the command line interface.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: Configuration setting to enable implicit usings in the project file, which simplifies calling Verify methods without fully qualified names.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Disabling Resharper/Rider Orphaned Process Detection - DotSettings XML\nDESCRIPTION: Add this XML setting to your [Solution].sln.DotSettings file to prevent Rider or ReSharper from prompting about lingering child processes spawned by tests. This is particularly useful for Verify, as it may launch diff tools that persist after test completion. Adjust for solution-wide or per-machine settings as needed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\\\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\\\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Initializing SerializationTests Constructor in C#\nDESCRIPTION: Defines the constructor for the SerializationTests class. This appears to be a test class initialization method that would set up the testing environment for serialization tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.Constructor.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSerializationTests.ctor()\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline Configuration for Verify\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to handle Verify's received files when tests fail. Includes steps for flagging test failures, copying received files, and publishing artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool - Shell\nDESCRIPTION: Installs 'verify.tool' as a global .NET CLI tool, enabling command-line management of Verify snapshot files. This tool is optional and recommended for advanced snapshot reviewing or bulk approval scenarios. Requirement: .NET SDK. The operation affects only global tool installations.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_None.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the essential NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which provides command-line utilities for managing snapshots without requiring an IDE or GUI application.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool using dotnet CLI\nDESCRIPTION: Installs the `verify.tool` .NET tool globally using the `dotnet tool install -g` command. Verify.Terminal is an optional command-line interface (CLI) tool for managing VerifyTests snapshots, allowing developers to inspect, accept, or reject snapshot changes directly from the terminal.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_10\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline: Set Variable if Test Step Fails - yaml\nDESCRIPTION: Azure DevOps YAML task that sets a variable 'publishverify' to 'Yes' if the previous test step failed. This variable is used to conditionally trigger subsequent steps for publishing Verify '*.received.*' artifacts. Intended for inclusion right after the test-run step in a pipeline definition.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\\n  condition: failed()\\n  inputs:\\n    script: 'echo \\\"##vso[task.setvariable variable=publishverify]Yes\\\"'\\n\n```\n\n----------------------------------------\n\nTITLE: UTC Date Format String\nDESCRIPTION: A UTC timestamp in YYYY-MM-DD HH:mm:ss format representing October 1st, 1935 at 10:15:30 AM UTC\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeTopLevelFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1935-10-01 10:15:30 Utc\n```\n\n----------------------------------------\n\nTITLE: Source Control Ignore for UseSplitModeForUniqueDirectory - Shell\nDESCRIPTION: When using the UseSplitModeForUniqueDirectory convention, this snippet specifies the exclusion of all *.received/ directories from version control. It complements the prior ignore rule for individual received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n*.received/\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile Data Structure (JSON-like)\nDESCRIPTION: This snippet defines a data structure representing a user profile with nested objects (Address) and arrays (Children). It includes fields like GivenNames, FamilyName, Spouse, Address (with Street and Country), Children (list of names), and a unique Id (Guid_1). This structure, while resembling JSON, uses unquoted keys and some unquoted string values, and is likely used as input data for verification tests within the '/verifytests/verify' project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/Snippets/Sample.Test.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  GivenNames: John,\n  FamilyName: Smith,\n  Spouse: Jill,\n  Address: {\n    Street: 4 Puddle Lane,\n    Country: USA\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  Id: Guid_1\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project\nDESCRIPTION: XML configuration to enable implicit usings in the project file for cleaner code syntax.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration for Verify\nDESCRIPTION: AppVeyor configuration for handling failed tests and artifact collection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install Verify command-line tool for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal global tool for command-line snapshot management.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_MSTest_AzureDevOps.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal tool globally, which provides command-line capabilities for managing snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_None.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Value String Declaration\nDESCRIPTION: A simple string literal containing the word 'value'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.DanglingFilesIgnoreParametersForVerified.DotNet8_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Object in JSON\nDESCRIPTION: This JSON snippet defines a basic object structure containing a single key named \"Name\" whose value is explicitly set to `null`. This could be used as a template, placeholder, or to represent an entity where the name is currently unknown or not applicable within the context of the '/verifytests/verify' project.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithWriteMemberNull_Include.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Name: null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray as a Global Dotnet Tool (Bash)\nDESCRIPTION: Demonstrates the dotnet CLI command for globally installing DiffEngineTray, a Windows tray utility that monitors pending snapshot changes. Users can optionally add this tool to automate the acceptance/rejection of snapshot changes as part of their workflow.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal CLI Tool\nDESCRIPTION: Command to install the Verify.Terminal CLI tool globally, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring ReSharper to Disable Orphaned Process Detection\nDESCRIPTION: Configuration to add to the solution settings file to disable ReSharper's orphaned process detection, which would otherwise interfere with diff tools launched by Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Serialized Exception Structure in JSON\nDESCRIPTION: Shows a JSON-formatted exception output containing the exception type, message and stack trace details. The stack trace indicates the error occurred in SerializationTests.MethodThatThrows().\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TargetInvocationException.DotNet9_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: the message,\n  StackTrace:\nat SerializationTests.MethodThatThrows()\nat InvokeStub_SerializationTests.MethodThatThrows(Object, Object, IntPtr*)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EditorConfig for Verified and Received Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files including UTF-8 with BOM encoding, line feed endings, and no final newline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file for simplified code.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AzureDevOps.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty JSON Object\nDESCRIPTION: Defines an empty JSON object using curly braces with no properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.EmptyLookupProperty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Machine Name Definition\nDESCRIPTION: Simple text string representing a machine name in a configuration context\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/ApplyScrubbersTests.ScrubMachineNameValidBefore.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTheMachineName\n```\n\n----------------------------------------\n\nTITLE: DateTime Variable Reference\nDESCRIPTION: A variable or reference named dateTimeName, likely used for datetime handling\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.DateTimes_named.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndateTimeName\n```\n\n----------------------------------------\n\nTITLE: Defining a Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet defines a simple key-value pair where 'name2' is the key and 'value2' is the value. It resembles a fragment of a JSON object or a JavaScript object literal, although the key lacks the required double quotes for strict JSON validity. It's likely intended for data representation or configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.Clear.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  name2: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting of verified and received text files in editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved text comparison in Verify tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_MSTest_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with GUID Key and Numeric Value\nDESCRIPTION: This snippet demonstrates a JSON object structure with a GUID key and a corresponding numeric value. It's a simple key-value pair that could be used for mapping or identification purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringGuidKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Guid_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Generated File Warning\nDESCRIPTION: A comment block indicating this is an automatically generated file by MarkdownSnippets, warning users not to edit it directly and providing information about the source file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nGENERATED FILE - DO NOT EDIT\nThis file was generated by [MarkdownSnippets](https://github.com/SimonCropp/MarkdownSnippets).\nSource File: /docs/mdsource/wiz/Windows_VisualStudio_Cli_MSTest.source.md\nTo change this file edit the source file and then run MarkdownSnippets.\n-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in C# Project\nDESCRIPTION: Property setting to enable implicit usings in the C# project file, which simplifies the usage of Verify methods without explicit namespace imports.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON-like Object\nDESCRIPTION: This code snippet presents a JSON-like object structure with three members: 'Member1' mapped to the boolean value `true`, 'Member2' mapped to the unquoted literal `A`, and 'Member3' mapped to the unquoted literal `B`. Note that standard JSON requires keys and string values to be enclosed in double quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NamedTuple.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Member1: true,\n  Member2: A,\n  Member3: B\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Rule for Received Files - ini\nDESCRIPTION: Excludes all generated '*.received.*' files from source control by adding this pattern to the .gitignore file. Ensures temporary verification outputs aren't committed by accident. Should be used in all repositories using the Verify library.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Copying Verify .received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: This YAML snippet defines a task to copy all .received files to an artifact staging directory. It only executes if the publishverify flag is set to 'Yes'. This step is necessary because the PublishBuildArtifacts task in Azure DevOps doesn't support wildcards.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: NuGet package reference for adding Verify.DiffPlex to enable improved diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_TUnit_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Mapping Date Tuples to ISO Strings - JavaScript\nDESCRIPTION: Defines a JavaScript object mapping keys as comma-separated year, month, and day to their respective date strings in ISO format (YYYY-MM-DD). This is commonly used as a lookup table for tests, date normalization, or data verification scenarios. The object is static and does not depend on runtime libraries, but expects keys to be accessed with the exact tuple format as shown in the code.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/CombinationTests.WithDontScrub.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  2020, 2, 12: 2020-02-12,\\n  2020, 2, 15: 2020-02-15,\\n  2020, 3, 12: 2020-03-12,\\n  2020, 3, 15: 2020-03-15,\\n  2022, 2, 12: 2022-02-12,\\n  2022, 2, 15: 2022-02-15,\\n  2022, 3, 12: 2022-03-12,\\n  2022, 3, 15: 2022-03-15\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add necessary NuGet packages for MSTest and Verify testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitattributes for Verify\nDESCRIPTION: Git configuration to set line endings and encoding for verified text files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() directly without namespace qualification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_None.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Date Values Test Configuration in JSON\nDESCRIPTION: JSON configuration object that assigns maximum date values to different date field types including DateTime, DateTimeOffset and their nullable/string variants. Used for testing date field handling and validation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeMax.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  DateTime: Date_MaxValue,\n  DateTimeNullable: Date_MaxValue,\n  Date: Date_MaxValue,\n  DateNullable: Date_MaxValue,\n  DateTimeOffset: Date_MaxValue,\n  DateTimeOffsetNullable: Date_MaxValue,\n  DateTimeString: Date_MaxValue,\n  DateTimeOffsetString: Date_MaxValue,\n  DateString: Date_MaxValue\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Comparer in Verify Tests\nDESCRIPTION: Demonstrates how to register a static comparer method for specific file extensions. This approach is simpler when no state needs to be maintained between comparisons.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/comparer.source.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleInitializer]\npublic static void Initialize()\n{\n    VerifierSettings.RegisterComparer(\n        \"bmp\",\n        (received, verified, context) =>\n        {\n            using var verifiedImage = Image.FromStream(verified);\n            using var receivedImage = Image.FromStream(received);\n            if (verifiedImage.Size == receivedImage.Size)\n            {\n                return Task.FromResult(CompareResult.Equal);\n            }\n\n            return Task.FromResult(\n                CompareResult.NotEqual(\n                    $\"Image sizes differ. Expected: {verifiedImage.Size}, but was: {receivedImage.Size}\"));\n        });\n    VerifierSettings.RegisterComparer(\"png\", Compare);\n    VerifierSettings.RegisterComparer(\"jpg\", Compare);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NUnit and Verify NuGet Packages in .csproj\nDESCRIPTION: Required NuGet package references for setting up Verify with NUnit, including Microsoft.NET.Test.Sdk, NUnit, Verify.NUnit, and NUnit3TestAdapter.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_NUnit_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"NUnit\" Version=\"4.3.2\" />\n<PackageReference Include=\"Verify.NUnit\" Version=\"29.2.0\" />\n<PackageReference Include=\"NUnit3TestAdapter\" Version=\"5.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction for installing the DiffEngineTray global tool for managing snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting File Naming Configuration Value\nDESCRIPTION: Defines the 'valueUseFileNameWithUnique' configuration value which indicates that filenames should include a unique component. This is likely used as a flag or setting in a file handling system.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/CustomFileNameWithUnique.Core.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nvalueUseFileNameWithUnique\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated by Verify during test runs.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: Adds a package reference for Verify.DiffPlex to a C# project file (.csproj). This package integrates DiffPlex with VerifyTests to provide inline text difference highlighting in test failure messages, which is often clearer than the default side-by-side output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the `Verify.DiffPlex` NuGet package to the project using the .NET CLI. This optional package enhances Verify's text comparison on failure by showing inline differences.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining a Key-Value Pair (JSON-like)\nDESCRIPTION: This snippet defines a simple data structure containing a single key `Value` with the corresponding value `Value2`. While resembling JSON, standard JSON requires keys and string values to be enclosed in double quotes. This specific format might be interpreted by a particular tool or system within the '/verifytests/verify' context, representing a basic configuration or data point.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/Snippets/ComplexParametersSample.ComplexMemberData_arg=Value2.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Value: Value2\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for Expecto and Verify\nDESCRIPTION: This snippet shows the NuGet package references to add to the test project for using Expecto and Verify together.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_0\n\nLANGUAGE: fsproj\nCODE:\n```\n<PackageReference Include=\"YoloDev.Expecto.TestSdk\" Version=\"0.15.3\" />\n<PackageReference Include=\"Expecto\" Version=\"10.2.3\" />\n<PackageReference Update=\"FSharp.Core\" Version=\"9.0.202\" />\n<PackageReference Include=\"Verify.Expecto\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Expecto and Verify\nDESCRIPTION: XML snippet showing the NuGet package references required for using Verify with Expecto. This includes packages for Verify, Verify.Expecto, and Expecto.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Expecto\" Version=\"*\" />\n<PackageReference Include=\"Expecto\" Version=\"*\" />\n<PackageReference Include=\"Verify\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: This XML snippet shows how to add the Verify.DiffPlex NuGet package to a project. Verify.DiffPlex enhances the text comparison behavior of Verify by highlighting text differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool globally for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_MSTest_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify with MSTest\nDESCRIPTION: Commands to add the necessary NuGet packages to set up Verify with MSTest in a testing project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package MSTest.TestAdapter\ndotnet add package MSTest.TestFramework\ndotnet add package Verify.MSTest\n```\n\n----------------------------------------\n\nTITLE: Excluding Received Files from Source Control - .gitignore Entry\nDESCRIPTION: This snippet instructs Git to ignore all files ending with .received.* in your repository. This prevents snapshot output artifacts generated during test runs from being committed to source control, ensuring only verified results are tracked. Place this line in your .gitignore file at the project root.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Gui_MSTest_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from version control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object Entries - JavaScript\nDESCRIPTION: Demonstrates the creation of a simple object containing two properties: Entry_1 and Entry_2, each with integer values. No external dependencies are required. This structure can serve as static data for configuration, test stubs, or API input, with both inputs and outputs expected in standard JSON format.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.DictionaryOrderString.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  Entry_1: 1234,\\n  Entry_2: 5678\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple JSON-like Object Structure\nDESCRIPTION: Shows a basic object structure with three key-value pairs where keys use mixed case conventions and values are single-letter identifiers. The structure follows a simple key:value pattern.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.One.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A: a,\n  b: b,\n  C: c\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON-like Object in JavaScript\nDESCRIPTION: This snippet creates a JavaScript object with a single property named Guid_1 set to the numeric value 1234. No dependencies are required as this uses the basic JavaScript object literal syntax. The input is the object definition, and the output is a JavaScript object with the specified property. Suitable for testing or simple configuration files, but does not include methods or nested objects.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.GuidKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Guid_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global dotnet tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_NUnit_AppVeyor.source.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the optional Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install DiffEngineTray global tool for managing snapshot changes through Windows tray.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Verification Structure in JSON\nDESCRIPTION: A JSON template that specifies the structure for verifying exceptions in tests. It includes fields for the exception type, message content, and stack trace showing the origin of the exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestMethodThatThrows.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.MethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration for Verify Framework\nDESCRIPTION: GitIgnore pattern to exclude all *.received.* files from source control, which are the temporary output files generated by the Verify framework during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Gui_NUnit_AppVeyor.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending changes in snapshots and provides a mechanism for accepting or rejecting those changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_Xunit_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify and TUnit\nDESCRIPTION: Commands to add the required NuGet packages TUnit and Verify.TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_TUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Required Test Packages via dotnet CLI - Shell\nDESCRIPTION: This snippet demonstrates installing the essential NuGet packages for a .NET test project using the dotnet CLI. It adds Microsoft.NET.Test.Sdk for test discovery, Verify.XunitV3 for snapshot testing, xunit.v3 for unit testing, and xunit.runner.visualstudio. The \"--prerelease\" flag ensures pre-release versions are retrieved if necessary. No input is required, and it must be run in the terminal within the project's directory.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\\ndotnet add package Verify.XunitV3\\ndotnet add package xunit.v3 --prerelease\\ndotnet add package xunit.runner.visualstudio --prerelease\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved text comparison.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package - XML\nDESCRIPTION: This XML snippet adds the Verify.DiffPlex NuGet package to a project. It enables inline, visually-enhanced text comparison for Verify snapshot failures. Add this to your test project file within an <ItemGroup>. The Version=\\\"*\\\" allows using the latest available version.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Property-Value Structure\nDESCRIPTION: Defines a simple JSON object containing a single property with a corresponding value to be checked during verification testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.Result.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value To Check\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Received Files to .gitignore\nDESCRIPTION: Git configuration to exclude received files from source control. All *.received.* files should be excluded while *.verified.* files should be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which monitors pending snapshot changes and provides a mechanism for accepting or rejecting changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Disabling Orphaned Process Detection in ReSharper/Rider\nDESCRIPTION: XML configuration to disable orphaned process detection in ReSharper/Rider, which should be added to the solution's .DotSettings file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<s:String x:Key=\"/Default/Housekeeping/UnitTestingMru/UnitTestRunner/SpawnedProcessesResponse/@EntryValue\">DoNothing</s:String>\n```\n\n----------------------------------------\n\nTITLE: Custom Header Results\nDESCRIPTION: Verified output showing combination results with custom headers.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/combinations.source.md#2025-04-22_snippet_14\n\nLANGUAGE: txt\nCODE:\n```\nCombinationSample.BuildAddressWithHeaderOverridesTest.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Date Serialization Output Example\nDESCRIPTION: Sample output showing how dates are serialized and sanitized in verification tests.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/dates.source.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nSerializationTests.ReUseDatetime.verified.txt\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for handling verified and received text files\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex for Enhanced Diff Output\nDESCRIPTION: Command to install the Verify.DiffPlex package, which enhances text comparison by highlighting differences inline rather than showing the full content on failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_MSTest_None.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining a Name Property as Scrubbed in JSON-like Object\nDESCRIPTION: This snippet defines a simple object with a single key-value pair. The key is 'Name' and the value is 'Scrubbed'. This likely represents a piece of data or configuration, possibly indicating that a name field has been scrubbed or anonymized. Note: Standard JSON requires keys and string values to be enclosed in double quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithWriteMemberNullScrubbed_Include.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Name: Scrubbed\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffPlex NuGet Package\nDESCRIPTION: Adds the Verify.DiffPlex NuGet package to enable improved text difference visualization in test results\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Gui_MSTest_AppVeyor.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Uploading Received Files\nDESCRIPTION: YAML configuration for a GitHub Actions workflow step to upload *.received.* files as artifacts if the build fails.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Identifier-Grouped Recording (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file showing data grouped under the specified identifier from the `RecordingIdentifier` snippet.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.Identifier.verified.txt\n{\n  Recorded:\n  {\n    MyUniqueTestContext:\n    {\n       dataKey: dataValue\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Verified Output for Anonymous Type Verification\nDESCRIPTION: This text snippet shows the expected verified output file generated by the Verify library when validating an anonymous type containing two 'Target' objects named 'target1' and 'target2'. It represents the serialized state of the anonymous type.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/anonymous-types.source.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{\n  target1: {\n    Property: Value1\n  },\n  target2: {\n    Property: Value2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flag on Test Failure in Azure DevOps\nDESCRIPTION: Sets a pipeline variable when the test runner fails, which will be used to conditionally publish Verify's .received files. This task uses the Azure DevOps pipeline's condition system to execute only on test failure.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_MSTest_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Test Failure Flag in Azure DevOps Pipeline\nDESCRIPTION: Creates a pipeline variable 'publishverify' when test step fails. Uses CmdLine task with failed() condition to set the flag that will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Verify Tests in Azure DevOps Pipeline\nDESCRIPTION: This YAML snippet adds a build step to set a flag if the test runner fails. It uses a failed condition to trigger the flag setting, which will be used in subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Flag for Failed Verify Tests in Azure DevOps Pipeline\nDESCRIPTION: This YAML snippet adds a command line task to the Azure DevOps pipeline. It sets a flag variable 'publishverify' to 'Yes' when the test runner step fails, allowing conditional execution of subsequent steps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Cli_Expecto_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CmdLine@2\n  displayName: 'Set flag to publish Verify *.received.* files when test step fails'\n  condition: failed()\n  inputs:\n    script: 'echo \"##vso[task.setvariable variable=publishverify]Yes\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal for Snapshot Management\nDESCRIPTION: Install the Verify.Terminal tool for managing snapshots from the command line. This optional tool can be globally installed using the dotnet CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_TUnit_AppVeyor.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_Fixie_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in csproj - XML\nDESCRIPTION: This snippet shows the XML required to enable Implicit Usings in a .NET project, which allows the use of common namespaces without explicit using directives. This is necessary for the provided code examples to compile as written when using .NET 6 or later. Add the property group containing <ImplicitUsings>enable</ImplicitUsings> to your .csproj file. No external dependencies are needed besides an SDK-style .csproj file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_None.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which allows using Verify() directly instead of Verifier.Verify().\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Pure Method Warnings\nDESCRIPTION: EditorConfig setting to treat unused return values of pure methods as errors, which is important for Verify usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_AppVeyor.md#2025-04-22_snippet_6\n\nLANGUAGE: editorconfig\nCODE:\n```\n[*.cs]\nresharper_return_value_of_pure_method_is_not_used_highlighting = error\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Cleared Recording\nDESCRIPTION: Displays the verified output after clearing the Recording and adding new data. Only the data added after Clear is included in the verification.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_17\n\nLANGUAGE: txt\nCODE:\n```\n{\n  name2: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Example Verified File Path (VerifyTests)\nDESCRIPTION: Illustrates the typical file path and naming convention for a '.verified.txt' file generated by VerifyTests. '{targetDirectory}' represents the output directory, and 'sample' is the base name of the test or verified item.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-file.source.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n{targetDirectory}/sample.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result for Ignoring Instances (Text)\nDESCRIPTION: Shows the expected output of a Verify test when ignoring specific instances.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_22\n\nLANGUAGE: txt\nCODE:\n```\n{\n  ToInclude: {\n    Property: Include\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Date/Time Fields to Minimum Value in JSON\nDESCRIPTION: This JSON object defines mappings for several date and time related fields (`DateTimeNullable`, `DateNullable`, `DateTimeOffsetNullable`, `DateTimeString`, `DateTimeOffsetString`, `DateString`). Each field is assigned the value `Date_MinValue`, likely representing the earliest representable date/time value within the specific context of the '/verifytests/verify' project. This structure might be used for setting default values, configuration, or as test data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeMin.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  DateTimeNullable: Date_MinValue,\n  DateNullable: Date_MinValue,\n  DateTimeOffsetNullable: Date_MinValue,\n  DateTimeString: Date_MinValue,\n  DateTimeOffsetString: Date_MinValue,\n  DateString: Date_MinValue\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package (XML)\nDESCRIPTION: This XML snippet demonstrates how to include the Verify.DiffPlex package in a project's .csproj to enhance inline text diffing in test output. The Version is set to a placeholder (*) and should be replaced with the desired version. No code execution directly; affects test library capabilities. No input or output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_None.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Verify.DiffPlex\\\" Version=\\\"*\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex as a NuGet package\nDESCRIPTION: The XML snippet shows how to add Verify.DiffPlex to a project using a PackageReference in a .csproj file. Verify.DiffPlex enhances text comparison by highlighting differences inline.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_XunitV3_AppVeyor.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for improved visualization of text differences in test failures.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_AzureDevOps.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add Verify.DiffPlex package for enhanced text difference visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_XunitV3_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex Package\nDESCRIPTION: Command to add the Verify.DiffPlex package for enhanced diff visualization\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Running Verify Checks with TUnit\nDESCRIPTION: C# code snippet demonstrating how to run Verify checks using TUnit framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Gui_TUnit_None.source.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic void Run()\n{\n    VerifyChecks.Run();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Name Constant in C#\nDESCRIPTION: Static field name definition used for serialization testing purposes\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.Field.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSerializationTests.MyField\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple JSON Object\nDESCRIPTION: Demonstrates a basic JSON object structure with three key-value pairs where both keys and values use mixed casing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/CombinationTests.One.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A: a,\n  b: b,\n  C: c\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Expecto Test Using Verify\nDESCRIPTION: This snippet shows a sample Expecto test that uses Verify to compare the output of a method against a verified file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: fs\nCODE:\n```\nopen Expecto\nopen VerifyTests\nopen VerifyExpecto\n\n[<Tests>]\nlet tests =\n    testTask \"findPerson\" {\n        let person = ClassBeingTested.FindPerson()\n        do! Verifier.Verify(\"findPerson\", person).ToTask()\n    }\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings to ensure consistent formatting for verified and received files in text editors.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Verify Results\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_MSTest_GitHubActions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Installing Verify Terminal Tool\nDESCRIPTION: Command to install Verify.Terminal tool for command-line snapshot management\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for Verify Testing with NUnit\nDESCRIPTION: Commands to add the necessary NuGet packages to the test project, including Microsoft.NET.Test.Sdk, NUnit, NUnit3TestAdapter, and Verify.NUnit.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Rider_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude received files from source control, as these are generated during test runs and should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Expecto_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Querying Current Date and Time in Windows Command Line\nDESCRIPTION: Shows the basic syntax for querying the current date and time using the Windows command line 'date' and 'time' commands.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineDateTimesEndingWithSymbol.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ndate /t\ntime /t\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal global tool, which allows managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings for Verify Files\nDESCRIPTION: EditorConfig settings for handling verified and received test files with specific encoding and formatting rules.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Uploading Received Files\nDESCRIPTION: YAML configuration for GitHub Actions to upload *.received.* files as artifacts when tests fail, aiding in debugging.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Verify.Tests Combination Result Output\nDESCRIPTION: Shows the output of the BuildAddressTest, displaying all combinations of inputs and their corresponding results in a formatted text file.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/combinations.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n{\n   1, Smith St  , Sydney : 1 Smith St, Sydney,\n   1, Smith St  , Chicago: 1 Smith St, Chicago,\n   1, Wallace St, Sydney : 1 Wallace St, Sydney,\n   1, Wallace St, Chicago: 1 Wallace St, Chicago,\n  10, Smith St  , Sydney : 10 Smith St, Sydney,\n  10, Smith St  , Chicago: 10 Smith St, Chicago,\n  10, Wallace St, Sydney : 10 Wallace St, Sydney,\n  10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package, which enhances text comparison behavior in Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_GitHubActions.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_NUnit_AzureDevOps.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command to install the DiffEngineTray global tool for monitoring snapshot changes\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_MSTest_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Files as Build Artifacts\nDESCRIPTION: Publishes the staged .received files as build artifacts when publishverify flag is set. Uses PublishBuildArtifacts task to make files available in pipeline artifacts.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are generated during testing but should not be committed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Generating TestContext Property for Non-Generic Test Class in C#\nDESCRIPTION: Defines a TestContext property for a non-generic test class TestClass2 within nested namespaces and classes. The property interacts with VerifyMSTest.Verifier for test context management.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NamespaceTests.HasAttributeOnClassWithGenericsInNestedNamespace.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace A.B\n{\npartial class C<T>\n{\npartial class D\n{\npartial class TestClass2\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Verify Received Files as Artifacts in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps pipeline to publish Verify *.received.* files as build artifacts when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Verify *.received.* files as Artifacts'\n  name: 'verifypublish'\n  condition: eq(variables['publishverify'], 'Yes')\n  inputs:\n    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Verify'\n    ArtifactName: 'Verify'\n    publishLocation: 'Container'\n```\n\n----------------------------------------\n\nTITLE: Defining Single Character in JSON\nDESCRIPTION: A simple JSON object that defines a character property with value 'a'\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Char.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Char: a\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Specific MSTest Class for Verify (C#)\nDESCRIPTION: C# code snippet demonstrating how to apply the `UsesVerify` attribute directly to a specific test class. This opts in only that class for processing by the Verify Source Generator.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Other_Cli_MSTest_AppVeyor.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[UsesVerify]\n```\n\n----------------------------------------\n\nTITLE: Defining Exception JSON Format for Verification Tests\nDESCRIPTION: This JSON structure defines an exception object with type, message, and stack trace properties. It represents a specific exception thrown by a method called 'MethodThatThrowsTask' in the 'ThrowsTests' class.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestMethodThatThrowsTask.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.MethodThatThrowsTask()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages via Dotnet CLI - .NET Shell Commands\nDESCRIPTION: This set of shell commands adds the required NuGet packages (YoloDev.Expecto.TestSdk, Expecto, and Verify.Expecto) to the test project, establishing the core dependencies for running snapshot-based tests with Expecto and Verify. These commands should be executed in the root directory of the target test project using the dotnet CLI. Ensure that .NET SDK is installed and the correct project is targeted.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Expecto_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\\ndotnet add package Expecto\\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages\nDESCRIPTION: Commands to add the necessary NuGet packages for Verify with Expecto testing\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Rider_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package YoloDev.Expecto.TestSdk\ndotnet add package Expecto\ndotnet add package Verify.Expecto\n```\n\n----------------------------------------\n\nTITLE: Installing Verify NuGet Packages for TUnit\nDESCRIPTION: Commands to add the required NuGet packages for Verify and TUnit to the test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package TUnit\ndotnet add package Verify.TUnit\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Verify with NUnit\nDESCRIPTION: Commands to add required NuGet packages for using Verify with NUnit in a test project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Settings\nDESCRIPTION: EditorConfig settings for verified and received files to maintain consistent formatting.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Cli_Xunit_AppVeyor.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# Verify settings\n[*.{received,verified}.{json,txt,xml}]\ncharset = \"utf-8-bom\"\nend_of_line = lf\nindent_size = unset\nindent_style = unset\ninsert_final_newline = false\ntab_width = unset\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Configuring EditorConfig for Verify's Snapshot Files - EditorConfig\nDESCRIPTION: This snippet provides EditorConfig rules to ensure that editors handle received and verified snapshot files with correct encoding, line endings, and whitespace behavior. Paste it into your .editorconfig file to match repository standards and facilitate smooth collaboration. Adjust patterns or add file types as needed for your project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_Expecto_None.md#2025-04-22_snippet_5\n\nLANGUAGE: editorconfig\nCODE:\n```\n# Verify settings\\n[*.{received,verified}.{json,txt,xml}]\\ncharset = \\\"utf-8-bom\\\"\\nend_of_line = lf\\nindent_size = unset\\nindent_style = unset\\ninsert_final_newline = false\\ntab_width = unset\\ntrim_trailing_whitespace = false\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Scoped Recording (Text)\nDESCRIPTION: Represents the expected content of the `.verified.txt` file resulting from the `RecordingScoped` snippet usage.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/recording.source.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n// Content of RecordingTests.RecordingScoped.verified.txt\n{\n  Recorded:\n  {\n    key1: value1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray Global Tool - Shell\nDESCRIPTION: This command installs DiffEngineTray as a global .NET tool, providing a Windows tray interface for monitoring and managing Verify snapshot changes. DiffEngineTray enhances UX for acceptance or rejection of snapshot updates and is optional but recommended. Prerequisite: .NET SDK must be installed and accessible via the 'dotnet' CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Gui_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray .NET Tool via CLI\nDESCRIPTION: This command installs the DiffEngineTray .NET tool globally using the .NET CLI. DiffEngineTray is a recommended companion tool for Verify that runs in the Windows system tray, monitors snapshot changes, and allows easy acceptance or rejection of received files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_XunitV3_GitHubActions.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Setting Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure consistent line endings and encoding for verified files in source control.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Rider_Cli_Fixie_AppVeyor.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Verified Files\nDESCRIPTION: Git attributes configuration to ensure proper line endings and encoding for verified files.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_3\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.xml text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging in Azure DevOps\nDESCRIPTION: Azure DevOps YAML task that copies all *.received.* files to the artifact staging directory when tests fail, preparing them for publishing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Gui_NUnit_AzureDevOps.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Structure in JSON\nDESCRIPTION: A JSON structure that specifies an exception object with Type and Message properties. This structure is likely used in verification testing to validate exception handling.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NestedTargetInvocationException.DotNet9_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  exception: {\n    Type: Exception,\n    Message: the message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required XUnit NuGet Packages\nDESCRIPTION: NuGet package references required for setting up Verify with XUnit testing framework including test SDK, Verify.XUnit, XUnit core, and Visual Studio test runner\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"Verify.Xunit\" Version=\"29.2.0\" />\n<PackageReference Include=\"xunit\" Version=\"2.9.3\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"3.0.2\" PrivateAssets=\"all\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package Reference\nDESCRIPTION: XML configuration to add the Verify.DiffPlex package to the project for enhanced diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_Expecto_AzureDevOps.source.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.DiffPlex\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Array with Placeholders for Verification Data\nDESCRIPTION: This JSON snippet defines an array containing two identifiers, `level1Info` and `level2Info`. It's likely used within the '/verifytests/verify' project to structure or reference data needed for test verification, potentially representing different levels of detail or configuration settings. The actual values or structures referenced by these identifiers depend on the surrounding application context.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/ExtensionConverterTests.Nested#00.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\\n  level1Info,\\n  level2Info\\n]\n```\n\n----------------------------------------\n\nTITLE: Generated Verification Files Example\nDESCRIPTION: Example of generated verification file names based on different runtime configurations\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/naming.source.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUniqueForSample.Runtime.Core.verified.txt\nUniqueForSample.Runtime.Net.verified.txt\nUniqueForSample.RuntimeAndVersion.Core3_0.verified.txt\nUniqueForSample.RuntimeAndVersion.Net4_8.verified.txt\nUniqueForSample.Architecture.X86.verified.txt\nUniqueForSample.Architecture.X64.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray tool\nDESCRIPTION: Command to install the DiffEngineTray global tool, which provides a Windows tray application for monitoring and managing pending snapshot changes.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Cli_Xunit_AppVeyor.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Object with Numeric Properties\nDESCRIPTION: A simple JSON object containing two numeric properties: 'a' with value 2 and 'b' with value 1. The object uses a non-standard JSON format with unquoted property names.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/OrderJsonTests.Alphabetically.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  a: 2,\n  b: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Inclusion and Exclusion in JSON\nDESCRIPTION: This JSON object defines multiple categories for ignoring or including properties in a verification process. It includes options for ignoring by type, interface, base class, and struct, as well as their nullable variants. The 'ToInclude' sections specify properties that should be explicitly included.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubTypeFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ToIgnore\": {\"Scrubbed\"},\n  \"ToIgnoreByType\": {\"Scrubbed\"},\n  \"ToIgnoreByInterface\": {\"Scrubbed\"},\n  \"ToIgnoreByBase\": {\"Scrubbed\"},\n  \"ToIgnoreByBaseGeneric\": {\"Scrubbed\"},\n  \"ToIgnoreNullable\": {\"Scrubbed\"},\n  \"ToIgnoreStruct\": {\"Scrubbed\"},\n  \"ToIgnoreStructNullable\": {\"Scrubbed\"},\n  \"ToInclude\": {\n    \"Property\": \"Value\"\n  },\n  \"ToIncludeNullable\": {\n    \"Property\": \"Value\"\n  },\n  \"ToIncludeStruct\": {\n    \"Property\": \"Value\"\n  },\n  \"ToIncludeStructNullable\": {\n    \"Property\": \"Value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Build Configuration for Capturing Failed Verify Results\nDESCRIPTION: AppVeyor on_failure build step that collects and uploads all *.received.* files as build artifacts when tests fail, making them available for inspection.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Gui_TUnit_AppVeyor.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\non_failure:\n  - ps: Get-ChildItem *.received.* -recurse | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }\n```\n\n----------------------------------------\n\nTITLE: Defining Date and Time Formats as URL Parameters\nDESCRIPTION: This code snippet demonstrates various date and time formats represented as URL parameter values. It includes examples with different levels of precision and time zone offsets, using a more compact notation suitable for URL encoding.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateFormatterTests.DateTimeOffsetCombinations.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"parameterValues\": {\n    \": 2020-01-01+0,\n    \"_hour\": \"2020-01-01T02-00+0\",\n    \"_hour_minute\": \"2020-01-01T02-03+0\",\n    \"_hour_minute_second\": \"2020-01-01T02-03-04+0\",\n    \"_hour_minute_second_secondFraction\": \"2020-01-01T02-03-04.5+0\",\n    \"_hour_minute_secondFraction\": \"2020-01-01T02-03-00.5+0\",\n    \"_hour_second\": \"2020-01-01T02-00-04+0\",\n    \"_hour_second_secondFraction\": \"2020-01-01T02-00-04.5+0\",\n    \"_hour_secondFraction\": \"2020-01-01T02-00-00.5+0\",\n    \"_minute\": \"2020-01-01T00-03+0\",\n    \"_minute_second\": \"2020-01-01T00-03-04+0\",\n    \"_minute_second_secondFraction\": \"2020-01-01T00-03-04.5+0\",\n    \"_minute_secondFraction\": \"2020-01-01T00-03-00.5+0\",\n    \"_offset\": \"2020-01-01+7-08\",\n    \"_offset_hour\": \"2020-01-01T02-00+7-08\",\n    \"_offset_hour_minute\": \"2020-01-01T02-03+7-08\",\n    \"_offset_hour_minute_second\": \"2020-01-01T02-03-04+7-08\",\n    \"_offset_hour_minute_second_secondFraction\": \"2020-01-01T02-03-04.5+7-08\",\n    \"_offset_hour_minute_secondFraction\": \"2020-01-01T02-03-00.5+7-08\",\n    \"_offset_hour_second\": \"2020-01-01T02-00-04+7-08\",\n    \"_offset_hour_second_secondFraction\": \"2020-01-01T02-00-04.5+7-08\",\n    \"_offset_hour_secondFraction\": \"2020-01-01T02-00-00.5+7-08\",\n    \"_offset_minute\": \"2020-01-01T00-03+7-08\",\n    \"_offset_minute_second\": \"2020-01-01T00-03-04+7-08\",\n    \"_offset_minute_second_secondFraction\": \"2020-01-01T00-03-04.5+7-08\",\n    \"_offset_minute_secondFraction\": \"2020-01-01T00-03-00.5+7-08\",\n    \"_offset_second\": \"2020-01-01T00-00-04+7-08\",\n    \"_offset_second_secondFraction\": \"2020-01-01T00-00-04.5+7-08\",\n    \"_offset_secondFraction\": \"2020-01-01T00-00-00.5+7-08\",\n    \"_second\": \"2020-01-01T00-00-04+0\",\n    \"_second_secondFraction\": \"2020-01-01T00-00-04.5+0\",\n    \"_secondFraction\": \"2020-01-01T00-00-00.5+0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Xunit NuGet Packages for Verify\nDESCRIPTION: NuGet package references required for setting up Verify with Xunit testing framework. These packages include Verify.Xunit for snapshot testing functionality and other necessary dependencies.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Gui_Xunit_AzureDevOps.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n<PackageReference Include=\"Xunit\" Version=\"*\" />\n<PackageReference Include=\"xunit.runner.visualstudio\" Version=\"*\">\n  <PrivateAssets>all</PrivateAssets>\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n</PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages for MSTest with Verify\nDESCRIPTION: These NuGet package references should be added to the test project to enable MSTest with Verify. They include the Microsoft.NET.Test.Sdk, MSTest, and Verify.MSTest packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Gui_MSTest_AppVeyor.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.13.0\" />\n<PackageReference Include=\"MSTest\" Version=\"3.8.3\" />\n<PackageReference Include=\"Verify.MSTest\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages\nDESCRIPTION: NuGet package references required for TUnit and Verify.TUnit integration\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_None.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing TUnit NuGet Packages in .csproj\nDESCRIPTION: Required NuGet package references for using Verify with TUnit. Includes the core TUnit package and Verify.TUnit integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_TUnit_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"TUnit\" Version=\"0.19.86\" />\n<PackageReference Include=\"Verify.TUnit\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Packages for NUnit and Verify\nDESCRIPTION: Commands to add required NuGet packages for using NUnit with Verify in a .NET project.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Other_Cli_NUnit_None.source.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.NET.Test.Sdk\ndotnet add package NUnit\ndotnet add package NUnit3TestAdapter\ndotnet add package Verify.NUnit\n```\n\n----------------------------------------\n\nTITLE: Adding Xunit NuGet Packages for Verify Tests\nDESCRIPTION: This XML snippet shows the NuGet package references required for running Verify tests with Xunit. It includes Verify.Xunit and Microsoft.NET.Test.Sdk packages.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Gui_Xunit_GitHubActions.source.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Verify.Xunit\" Version=\"*\" />\n<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fixie and Verify.Fixie NuGet Packages in .NET Project\nDESCRIPTION: Adds the required NuGet packages for using Fixie with Verify. This includes the Fixie test framework and Verify.Fixie integration package.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Rider_Gui_Fixie_AzureDevOps.md#2025-04-22_snippet_0\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Fixie\" Version=\"4.1.0\" />\n<PackageReference Include=\"Verify.Fixie\" Version=\"29.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Exception Output in JSON for Verify Testing Framework\nDESCRIPTION: This JSON structure represents how exceptions are formatted in the Verify testing framework. It includes the exception type, the error message, and the stack trace showing where the exception occurred.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.TestThrowsTask.DotNet.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.TaskMethodThatThrows()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying String Operations in Python\nDESCRIPTION: This code snippet tests various string operations in Python, including concatenation, repetition, indexing, and slicing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.DerivePaths.Tests/Tests.ThrowOnConflict.verified.txt#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nassert \"hello\" + \" \" + \"world\" == \"hello world\"\nassert \"echo\" * 3 == \"echoechoecho\"\nassert \"hello\"[0] == \"h\"\nassert \"hello\"[-1] == \"o\"\nassert \"hello\"[1:4] == \"ell\"\nassert \"hello\"[:3] == \"hel\"\nassert \"hello\"[2:] == \"llo\"\nassert len(\"hello\") == 5\n```\n\n----------------------------------------\n\nTITLE: Defining Value struct for web3 operations in C#\nDESCRIPTION: Defines a Value struct that validates and converts different number formats for web3 operations. The struct ensures proper validation of numerical values used in blockchain transactions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.DerivePaths.Tests/CustomDir/CustomTypeName.CustomMethodName.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n﻿Value\n```\n\n----------------------------------------\n\nTITLE: Verify Output with Ignored Types\nDESCRIPTION: Shows the result of verification with type ignoring applied. Only properties with non-ignored types are included in the output.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_10\n\nLANGUAGE: txt\nCODE:\n```\n{\n  ToInclude: {\n    Property: Value\n  },\n  ToIncludeNullable: {\n    Property: Value\n  },\n  ToIncludeStruct: {\n    Property: Value\n  },\n  ToIncludeStructNullable: {\n    Property: Value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignored XML Member Output\nDESCRIPTION: Shows the result of ignoring an XML member during verification. This snippet displays the verified XML with the 'node' element removed.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/verify-xml.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<body />\n```\n\n----------------------------------------\n\nTITLE: Installing DiffEngineTray CLI Tool\nDESCRIPTION: Command line instruction to install DiffEngineTray globally using the .NET CLI.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_Fixie_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g DiffEngineTray\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit Usings in Project File\nDESCRIPTION: XML configuration to enable implicit usings in the project file, which is required for the examples to compile correctly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_XunitV3_AppVeyor.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ImplicitUsings>enable</ImplicitUsings>\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Global Tool\nDESCRIPTION: Installs the Verify.Terminal .NET global tool using the command line. This tool provides command-line utilities for managing VerifyTests snapshots.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: VerifyCheckException JSON Output for Missing .gitattributes Settings\nDESCRIPTION: A JSON representation of a VerifyCheckException that occurs when the .gitattributes file doesn't contain the required settings for the Verify testing framework. The exception message includes the path to the missing or invalid file and the recommended settings to fix the issue.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/InnerVerifyChecksTests/VerifyChecksTests.GitAttributes.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: VerifyCheckException,\n  Message:\nExpected .gitattributes to contain settings for Verify.\nPath: file:///{ProjectDirectory}InnerVerifyChecksTests/Invalid/.gitattributes\nRecommended settings:\n\n# Verify\n*.verified.txt text eol=lf working-tree-encoding=UTF-8\n*.verified.json text eol=lf working-tree-encoding=UTF-8\n,\n  StackTrace: \n}\n```\n\n----------------------------------------\n\nTITLE: Installing verify.tool as a Global .NET Tool - Bash\nDESCRIPTION: Installs the optional Verify.Terminal dotnet tool globally, allowing snapshot management from the command line. Requires .NET SDK and appropriate system permissions; must be executed in a terminal. After installation, 'verify' commands become available globally for snapshot maintenance.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Fixie_AzureDevOps.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result for Pause and Resume (TXT)\nDESCRIPTION: This snippet shows the verified output of the PauseResume test. It demonstrates that only the recording made during the resumed state (name2: value2) is included in the final result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_19\n\nLANGUAGE: txt\nCODE:\n```\n{\n  name2: value2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Input-Output Mapping in JSON Format\nDESCRIPTION: A JSON object that maps address components (number, street, city) to their expected formatted results. The structure defines column headers and multiple test cases with corresponding expected outputs.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/CombinationTests.BuildAddressExceptionsDisabledTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  number, street    , city   : Result,\n  1, Smith St, Sydney: 1 Smith St, Sydney,\n  1, Smith St, Chicago: 1 Smith St, Chicago,\n  1, Wallace St, Sydney: 1 Wallace St, Sydney,\n  1, Wallace St, Chicago: 1 Wallace St, Chicago,\n  10, Smith St, Sydney: 10 Smith St, Sydney,\n  10, Smith St, Chicago: 10 Smith St, Chicago,\n  10, Wallace St, Sydney: 10 Wallace St, Sydney,\n  10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Test Artifacts\nDESCRIPTION: GitHub Actions workflow configuration to upload received files on test failure\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload Test Results\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: verify-test-results\n    path: |\n      **/*.received.*\n```\n\n----------------------------------------\n\nTITLE: Serialization Result with Included Obsolete Property\nDESCRIPTION: This snippet shows the verified output of the serialization test where the obsolete property is included. Both the regular and obsolete properties are present in the result.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/obsolete-members.source.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Property: 'Value1',\n  ObsoleteProperty: 'Value2'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with Null Property in JSON\nDESCRIPTION: This snippet defines a JSON object with a single property 'nullProperty' set to null. It demonstrates how to explicitly represent a null value in JSON.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NullPropertyInclude.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  nullProperty: null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Test Case Structure\nDESCRIPTION: Defines a simple structure for test cases with inputs and expected outputs. This example shows how to organize test data for regression testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineGuidsWrappedWithSymbol.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest_case = {\n    \"name\": \"test_addition\",\n    \"inputs\": [5, 3],\n    \"expected_output\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a convention for Verify testing.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_Rider_Cli_NUnit_GitHubActions.md#2025-04-22_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Verify Test Output\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which are the test result files that Verify generates during test execution.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/MacOS_Other_Cli_Xunit_AzureDevOps.md#2025-04-22_snippet_2\n\nLANGUAGE: gitattributes\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Ignore Received Files\nDESCRIPTION: Git configuration to exclude *.received.* files from source control, which is a convention for Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_NUnit_None.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n*.received.*\n```\n\n----------------------------------------\n\nTITLE: Defining Person Data in JSON-like Format\nDESCRIPTION: This snippet defines two person objects, `person1` and `person2`, using a JSON-like syntax. Each object contains `GivenNames` and `FamilyName`. This data might be used for testing or configuration within the `/verifytests/verify` project. Note that it's not strictly valid JSON due to missing quotes around keys and string values.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.XunitV3.Tests/VerifyObjectSamples.Anon.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  person1: {\n    GivenNames: John,\n    FamilyName: Smith\n  },\n  person2: {\n    GivenNames: Marianne,\n    FamilyName: Aguirre\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files to Artifact Staging\nDESCRIPTION: Copies all *.received.* files to the artifact staging directory when the publishverify flag is set. This step is necessary because PublishBuildArtifacts doesn't support wildcards directly.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudioWithReSharper_Gui_Expecto_AzureDevOps.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Copying Verify Received Files in Azure DevOps\nDESCRIPTION: YAML configuration for Azure DevOps to copy Verify's received files to the artifact staging directory when tests fail.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_XunitV3_AzureDevOps.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- task: CopyFiles@2\n  condition: eq(variables['publishverify'], 'Yes')\n  displayName: 'Copy Verify *.received.* files to Artifact Staging'\n  inputs:\n    contents: '**/*.received.*' \n    targetFolder: '$(Build.ArtifactStagingDirectory)/Verify'\n    cleanTargetFolder: true\n    overWrite: true\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Structure in JSON\nDESCRIPTION: This JSON structure represents an exception object with two properties: Type and Message. It provides a standardized format for capturing and transmitting exception information.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NestedTargetInvocationException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  exception: {\n    Type: Exception,\n    Message: the message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Referencing Property in JavaScript Object\nDESCRIPTION: This snippet defines a JavaScript object where the property 'SelfProperty' is assigned the value of '$parentValue'. It is a typical pattern for referencing scoped or inherited values in configurations or frameworks supporting variable interpolation. There are no explicit dependencies, but the surrounding environment is expected to resolve the $parentValue (e.g., in frameworks like Knockout.js or similar MVVM systems). Inputs: properties or variables available in the parent scope. Output: an object with a property referencing a scoped value. Limitations: $parentValue must be defined in the containing context; otherwise, it will be undefined.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.WithRecursiveConverter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  SelfProperty: $parentValue\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Command to add the Verify.DiffPlex package which enhances text comparison by highlighting differences inline rather than showing full content dumps.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Cli_XunitV3_None.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package\nDESCRIPTION: Installs the Verify.DiffPlex NuGet package using the .NET CLI. This package enhances the text comparison output by showing inline differences instead of just outputting the full received and verified content.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Windows_VisualStudio_Cli_MSTest_None.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Adding Verify.DiffPlex NuGet Package in C#\nDESCRIPTION: Command to add the Verify.DiffPlex NuGet package for improved diff visualization.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Verify.DiffPlex\n```\n\n----------------------------------------\n\nTITLE: Defining Commitment Structure in JSON\nDESCRIPTION: This JSON snippet defines an object with a 'commitments' array. Each commitment in the array has an 'id' field (likely a GUID) and a 'title' field.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonWithArray.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"commitments\": [\n    {\n      \"id\": \"Guid_1\",\n      \"title\": \"Commitment1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting and Initializing Browser Driver in Java\nDESCRIPTION: This snippet demonstrates how to select and initialize different browser drivers (Chrome, Firefox, or Edge) based on the provided browser string. It includes the setup for each browser including WebDriver initialization and configuration.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/VerifyDirectoryTests.WithDirectory/target#00.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic void selectBrowserDriver(String browser) {\n        if (browser.trim().equalsIgnoreCase(\"chrome\")) {\n            WebDriverManager.chromedriver().setup();\n            driver = new ChromeDriver();\n        } else if (browser.trim().equalsIgnoreCase(\"firefox\")) {\n            WebDriverManager.firefoxdriver().setup();\n            driver = new FirefoxDriver();\n        } else if (browser.trim().equalsIgnoreCase(\"edge\")) {\n            WebDriverManager.edgedriver().setup();\n            driver = new EdgeDriver();\n        } else {\n            // If no browser is specified or an invalid browser is specified,\n            // default to Chrome\n            WebDriverManager.chromedriver().setup();\n            driver = new ChromeDriver();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Array with Commitment Object\nDESCRIPTION: This snippet defines a JSON array containing a single object. The object represents a commitment with a GUID identifier and a title. The structure could be used for data storage or transmission in a system dealing with commitments.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonWithArrayAtRoot.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    id: Guid_1,\n    title: Commitment1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Simple Key-Value Configuration\nDESCRIPTION: Demonstrates a basic JSON/object structure with a single key-value pair. Shows minimal valid configuration format with curly brace delimiters.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.Tests/Tests.WithTargets.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Addresses to Keyed Objects in JavaScript Object Literal - JavaScript\nDESCRIPTION: This JavaScript snippet defines an object with string address keys, each mapped to an object with 'target' and 'key' properties. Used for address-to-key lookups, typically in the context of address verification or testing utilities. The snippet requires no external dependencies and its input/output is limited to the in-memory JavaScript object, with each key-value pair representing an address and its validation record.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationTests.RecordingPausedTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   1, Smith St  : {\n    target: 1 Smith St,\n    key: recorded 1 Smith St\n  },\n   1, Wallace St: {\n    target: 1 Wallace St,\n    key: recorded 1 Wallace St\n  },\n  10, Smith St  : {\n    target: 10 Smith St,\n    key: recorded 10 Smith St\n  },\n  10, Wallace St: {\n    target: 10 Wallace St,\n    key: recorded 10 Wallace St\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Case Mapping in JSON Format\nDESCRIPTION: A JSON structure that maps input combinations to expected test outcomes. Each entry consists of letter, number, and boolean inputs mapped to expected string results or exceptions. The file is used for verification testing with systematic test cases.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/CombinationTests.WithException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  A, 1, True : a1True,\n  A, 1, False: a1False,\n  A, 2, True : a2True,\n  A, 2, False: a2False,\n  A, 3, True : a3True,\n  A, 3, False: a3False,\n  b, 1, True : ArgumentException: B is not allowed.,\n  b, 1, False: ArgumentException: B is not allowed.,\n  b, 2, True : ArgumentException: B is not allowed.,\n  b, 2, False: ArgumentException: B is not allowed.,\n  b, 3, True : ArgumentException: B is not allowed.,\n  b, 3, False: ArgumentException: B is not allowed.,\n  C, 1, True : c1True,\n  C, 1, False: c1False,\n  C, 2, True : c2True,\n  C, 2, False: c2False,\n  C, 3, True : c3True,\n  C, 3, False: c3False\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Literal - JavaScript\nDESCRIPTION: This snippet declares a JavaScript object with two properties: 'target', set to null, and 'theData', assigned from the external variable 'theValue'. There are no explicit dependencies, but the variable 'theValue' must be defined in the enclosing scope for the code to operate successfully. The object can serve as a configuration, data transfer object, or as input to a function that expects these property names.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/JsonAppenderTests.Stream#00.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  target: null,\\n  theData: theValue\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install the Verify command-line tool for managing snapshots from terminal\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Fixie_GitHubActions.source.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify.Terminal Tool\nDESCRIPTION: Command to install the Verify.Terminal dotnet tool for managing snapshots from the command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/wiz/Linux_Other_Cli_TUnit_GitHubActions.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Installing Verify CLI Tool\nDESCRIPTION: Command to install Verify.Terminal tool for managing snapshots from command line.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudioWithReSharper_Cli_Xunit_None.source.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g verify.tool\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Object with Numeric Keys\nDESCRIPTION: A basic JSON object declaration with three numeric keys (1, 2, 3), each mapped to the string value 'After'. This structure could be used for simple configuration or test data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubDictionaryValue_ValueAfterWithNewLine.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  1: After,\n  2: After,\n  3: After\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic JSON Array Structure\nDESCRIPTION: This JSON snippet defines an array containing a single object. The object has one key-value pair: `\"name2\": \"value2\"`. This structure is commonly used for representing simple data collections or configurations.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/RecordingTests.Stop.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    name2: value2\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test Output File\nDESCRIPTION: The resulting verified snapshot file produced by the snapshot test, showing the format of the captured state.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/compared-to-assertion.source.md#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nCompareToAssert.SnapshotTest.verified.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Target Configuration in JSON\nDESCRIPTION: A basic JSON configuration object that specifies the target property with a value of 'content'. This likely configures where tests or verification should be directed.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Tests.NestedTextWriter.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  target: content\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Paths in JSON\nDESCRIPTION: This JSON object defines four temporary path configurations using placeholders. It includes standard and alternative temporary paths, with both trailing and non-trailing versions.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubTempPath.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  tempPath: {TempPath},\n  altTempPath: {TempPath},\n  tempPathTrailing: {TempPath},\n  altTempPathTrailing: {TempPath}\n}\n```\n\n----------------------------------------\n\nTITLE: Verified Output for Recording Usage\nDESCRIPTION: Shows the resulting verified output from the Recording usage example, including the target value and the recorded name-value pair.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/recording.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\n  target: TheValue,\n  name: value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify Tests in YAML\nDESCRIPTION: This YAML configuration specifies test directories, file patterns to include/exclude, and custom test commands for running verify tests. It defines settings for both the 'verify' and 'verify-changed' commands.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Xunit.Tests/Scrubbers/ScrubberLevelsSample.AfterJson.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nverify:\n  testDirs:\n    - src/test/verify\n  include:\n    - \"**/*.{js,ts,json}\"\n  exclude:\n    - \"**/node_modules/**\"\n  update:\n    - yarn test:verify-update\n\nverify-changed:\n  testDirs:\n    - src/test/verify\n  include:\n    - \"**/*.{js,ts,json}\"\n  exclude:\n    - \"**/node_modules/**\"\n  update:\n    - yarn test:verify-update\n```\n\n----------------------------------------\n\nTITLE: Defining Personal Information Structure in JSON-like Format\nDESCRIPTION: This snippet outlines a data structure for personal information including address, family details, and identification. It uses a JSON-like format with nested objects and arrays.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StaticSettingsTests/OrderPropertiesTests.Alphabetically.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Address: {\n    Country: USA,\n    Street: 1 Puddle Lane\n  },\n  Children: [\n    Sam,\n    Mary\n  ],\n  FamilyName: Smith,\n  GivenNames: John,\n  Id: Guid_1,\n  Spouse: Jill\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Structure in JSON\nDESCRIPTION: This JSON structure defines an exception object with a Type and a Message. The Type is set to 'Exception', and the Message contains the details of the exception.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.TargetInvocationException.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  Type: Exception,\n  Message: the message\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Key-Value Pair in JSON-like format\nDESCRIPTION: This snippet defines a basic object-like structure with a single key 'Property' mapped to the string 'Value'. It represents a simple data structure, potentially used for configuration or as sample data within the '/verifytests/verify' project. Note that standard JSON requires keys to be enclosed in double quotes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/ExtensionConverterTests.WithInfoAndBinary.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Property: Value\n}\n```\n\n----------------------------------------\n\nTITLE: DateTimeOffset Comparison Object Structure in JSON\nDESCRIPTION: Defines a JSON object structure containing two DateTimeOffset fields: dateTime1 and dateTime2. Used for comparing or processing two different date/time values in an application.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DateTimeOffsetDifferOffset.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  dateTime1: DateTimeOffset_1,\n  dateTime2: DateTimeOffset_2\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Empty Result After Ignoring Exceptions with Specific Messages\nDESCRIPTION: This snippet shows the verified result after ignoring members that throw exceptions with specific messages, which is an empty object.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/members-throw.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: JSON Exception Object Structure in verifytests/verify Project\nDESCRIPTION: A JSON structure that represents an exception, including its type, message, and stack trace information. The data shows an exception that occurred in the 'ThrowsTests.TaskMethodThatThrowsGeneric()' method, with a message of 'The Message' and type of 'Exception'.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/ThrowsTests.ThrowsTaskGeneric.Net.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message,\n  StackTrace: at ThrowsTests.TaskMethodThatThrowsGeneric()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Object with GUID Value in JSON\nDESCRIPTION: This snippet defines a JSON object with a single property 'value' that is assigned a variable 'guidName'. The 'guidName' is likely a placeholder for a GUID value to be inserted dynamically.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/GuidScrubberTests.NamedGuids_named.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  value: guidName\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Structure in JSON\nDESCRIPTION: This JSON structure represents an exception object with Type and Message properties. It can be used to serialize exception details for logging or error reporting purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NestedTargetInvocationException.DotNet8_0.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  exception: {\n    Type: Exception,\n    Message: the message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestContext Property in Generated C# Code\nDESCRIPTION: Auto-generated partial class implementation that provides TestContext property getter and setter for MSTest integration. The code is part of the Verify.MSTest framework's source generation process and handles test context management.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.SourceGenerator.Tests/NamespaceTests.HasAttributeOnClass.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Foo\n{\npartial class Bar\n{\n  [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Verify.MSTest.SourceGenerator\", \"1.0.0.0\")]\n  public global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext\n  {\n    get => global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;\n    set => global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Log Entry\nDESCRIPTION: Basic timestamp entry showing date and time with timezone offset. Format is YYYY-MM-DD HH:MM:SS +0\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/DateScrubberTests.NamedDateTimeOffsetTopLevelGlobal.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2020-10-01 10:15:30 +0\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple JSON Configuration with DateTimeOffset Reference\nDESCRIPTION: A basic JSON configuration object that contains a single key named 'DateTimeOffset_1'. This appears to be a reference or identifier for a DateTimeOffset value used in a verification test.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/JsonTests.VerifyJsonDateTime.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  key: DateTimeOffset_1\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Set Operations in Python\nDESCRIPTION: This snippet verifies various set operations in Python, including creation, adding and removing elements, and set methods like union, intersection, and difference.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.DerivePaths.Tests/Tests.ThrowOnConflict.verified.txt#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nmy_set = {1, 2, 3}\nassert len(my_set) == 3\nassert 1 in my_set\nassert 4 not in my_set\n\nmy_set.add(4)\nassert my_set == {1, 2, 3, 4}\nmy_set.remove(2)\nassert my_set == {1, 3, 4}\npopped = my_set.pop()\nassert popped in {1, 3, 4}\nassert len(my_set) == 2\n\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nassert set1.union(set2) == {1, 2, 3, 4, 5}\nassert set1.intersection(set2) == {3}\nassert set1.difference(set2) == {1, 2}\nassert set1.symmetric_difference(set2) == {1, 2, 4, 5}\n\nset1.update({4, 5, 6})\nassert set1 == {1, 2, 3, 4, 5, 6}\nset1.intersection_update({3, 4, 5, 6})\nassert set1 == {3, 4, 5, 6}\nset1.difference_update({4, 5})\nassert set1 == {3, 6}\n\nset1.clear()\nassert set1 == set()\n```\n\n----------------------------------------\n\nTITLE: Verify Test Result for Scrubbing Members (Text)\nDESCRIPTION: Shows the expected output of a Verify test when scrubbing specific members using expressions.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/serializer-settings.md#2025-04-22_snippet_25\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Include: Value,\n  Field: {Scrubbed},\n  Property: {Scrubbed},\n  _Custom: {Scrubbed},\n  GetOnlyProperty: {Scrubbed},\n  PropertyThatThrows: {Scrubbed}\n}\n```\n\n----------------------------------------\n\nTITLE: Verify.Throws Result Output with Ignored Stack Trace in TXT Format\nDESCRIPTION: This snippet shows the expected output of the Verify.Throws test with ignored stack trace in a text file format.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/throws.md#2025-04-22_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n{\n  Type: Exception,\n  Message: The Message\n}\n```\n\n----------------------------------------\n\nTITLE: File Verification Outside Unit Test Placeholder (VerifyTests)\nDESCRIPTION: Placeholder representing the use of VerifyTests file verification functionality outside the context of a typical unit testing framework method.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/verify-file.source.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsnippet: VerifyFileWithoutUnitTest\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Message in Verify Testing Framework\nDESCRIPTION: A JSON object representing a ParseException that occurs when the content being verified doesn't contain the expected directory format. The message indicates users should ensure they're using the current stable version of Verify.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.ExceptionParsing.Tests/ExceptionParsingTests.Error_EmptyList.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ParseException,\n  Message: Expected content to contain `Directory:`, or `VerifyException : Directory:`, or `VerifyException: Directory:` at the start. Ensure the current stable of Verify is being used.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Object Structure\nDESCRIPTION: Defines an object with two properties: a null target and a key-value pair. The structure follows JSON-like syntax but uses simplified notation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/StreamTests.VerifyFileWithAppend#00.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  target: null,\n  key: value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeOffset Test Data in JSON\nDESCRIPTION: This JSON object defines a test case with a DateTimeOffset value. It sets the 'DateTimeOffset_1' property to the integer value 1234, which likely represents a specific point in time for testing purposes.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.StringDateTimeKeys.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  DateTimeOffset_1: 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Timespan Value in JSON\nDESCRIPTION: This JSON snippet defines an object with a single key 'timespan'. The value '1.00:00:00' represents a duration, likely interpreted as one full day (1 day, 0 hours, 0 minutes, 0 seconds). This format is specific to the context where it's used, potentially within a testing framework or configuration file.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.Timespan.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  timespan: 1.00:00:00\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON Arrays in JavaScript - JSON\nDESCRIPTION: This JSON snippet defines an array of objects, each with a single property Value. It is suitable for use as mock data or for initializing data structures in JavaScript-based applications. The expected input and output formats are standard JSON, and there are no dependencies beyond a compatible JSON parser. All string values must be properly quoted, and the data must be parsed from JSON before use in actual code.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/OrderTests.EnumerableOrderFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    Value: a\n  },\n  {\n    Value: b\n  },\n  {\n    Value: c\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON Object - JavaScript\nDESCRIPTION: This snippet presents a basic example of a JSON object in JavaScript, where two entries (Entry_1 and Entry_2) are defined with integer values. No external dependencies are required. The object can be used for configuration, data transfer, or as an in-memory structure for further processing. Key parameters are Entry_1 and Entry_2, each holding numeric values; expected use is for static data representation. The structure does not include methods, nested objects, or validation.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.DictionaryOrderStringAndIgnore.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  Entry_1: 1234,\\n  Entry_2: 5678\\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Address Components to Formatted Strings (Data)\nDESCRIPTION: This data structure maps comma-separated address components (street number, street name, city) with varying spacing to a combined, formatted address string. It likely serves as test data or a lookup table for address processing or verification tasks, potentially testing robustness against inconsistent input spacing. Each entry provides an example of input components and the expected formatted output.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/CombinationSample.BuildAddressTest.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n   1, Smith St  , Sydney : 1 Smith St, Sydney,\n   1, Smith St  , Chicago: 1 Smith St, Chicago,\n   1, Wallace St, Sydney : 1 Wallace St, Sydney,\n   1, Wallace St, Chicago: 1 Wallace St, Chicago,\n  10, Smith St  , Sydney : 10 Smith St, Sydney,\n  10, Smith St  , Chicago: 10 Smith St, Chicago,\n  10, Wallace St, Sydney : 10 Wallace St, Sydney,\n  10, Wallace St, Chicago: 10 Wallace St, Chicago\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Tests with the Testing Framework\nDESCRIPTION: Demonstrates how to execute multiple test cases using the testing framework. This code creates a collection of tests and runs them against their respective operations.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.ScrubInlineGuidsWrappedWithSymbol.verified.txt#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define more test cases\ntests = [\n    {\"name\": \"addition_test\", \"inputs\": [10, 5], \"expected_output\": 15},\n    {\"name\": \"subtraction_test\", \"inputs\": [10, 5], \"expected_output\": 5}\n]\n\n# Run the tests\nfor test in tests:\n    if \"addition\" in test[\"name\"]:\n        run_test(test, add)\n    elif \"subtraction\" in test[\"name\"]:\n        run_test(test, subtract)\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Python Operations\nDESCRIPTION: This snippet includes a series of assert statements to test basic Python operations such as arithmetic, comparisons, and boolean logic.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.MSTest.DerivePaths.Tests/Tests.ThrowOnConflict.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nassert 1 + 1 == 2\nassert 2 * 3 == 6\nassert 10 / 2 == 5\nassert 3 - 1 == 2\nassert 2 ** 3 == 8\nassert 10 % 3 == 1\nassert 5 > 3\nassert 3 < 5\nassert 5 >= 5\nassert 5 <= 5\nassert 5 == 5\nassert 5 != 6\nassert True and True\nassert not False\nassert True or False\n```\n\n----------------------------------------\n\nTITLE: UTC Datetime String Output\nDESCRIPTION: Displays a UTC formatted datetime string using yyyy-MM-dd HH:mm:ss Utc format. The date shown is January 1st, 2000 at 1:01:01 AM UTC.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.Run_arg=System.DateTime.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2000-01-01 01:01:01 Utc\n```\n\n----------------------------------------\n\nTITLE: UUID Identifier for Verify Test Project\nDESCRIPTION: A UUID formatted as a GUID that uniquely identifies a component, test, or project within the verification testing framework.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/StrictJsonTests/SerializationTests.GuidScrubbingDisabledFluent.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nb6993f86-c1b9-44db-bfc5-33ed9e5c048e\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Object Definition\nDESCRIPTION: Defines an empty JSON object with no properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/StreamTests.StreamMember.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty JSON Object\nDESCRIPTION: This snippet shows an empty JSON object. It can serve as a starting point for adding key-value pairs or as a minimal valid JSON structure.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Converters/TypeConverterTests.WithInfoShouldRespectSettings.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Including GitHub Actions Build Server Configuration\nDESCRIPTION: This placeholder indicates where configuration specific to getting `.received` files in the output on GitHub Actions should be included, referencing a standard setup guide for CI environments.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Linux_Other_Cli_Expecto_GitHubActions.source.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\ninclude: build-server-githubactions\n```\n\n----------------------------------------\n\nTITLE: Plaintext Value Entry\nDESCRIPTION: A single text value entry stored in a file.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.NUnit.Tests/Snippets/ClassLevelParams.WithMethodLevel_arg1=1_arg2=3.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nValue\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable in C#\nDESCRIPTION: A simple declaration of a string variable named 'value'. This is a basic variable declaration without initialization, which would need to be assigned a value before use in actual code.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Fixie.Tests/Snippets/UniqueForSample.RuntimeFluent.Net.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvalue\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for Test Framework Selection\nDESCRIPTION: Hierarchical markdown navigation structure showing the path from home to specific test framework selections for MacOS CLI implementation.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/MacOS_Other_Cli.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [MacOS](MacOS.md) > [Other](MacOS_Other.md) > [Prefer CLI](MacOS_Other_Cli.md)\n\n## Select Test Framework\n\nOptions:\n * [Xunit](MacOS_Other_Cli_Xunit.md)\n * [XunitV3](MacOS_Other_Cli_XunitV3.md)\n * [NUnit](MacOS_Other_Cli_NUnit.md)\n * [TUnit](MacOS_Other_Cli_TUnit.md)\n * [Fixie](MacOS_Other_Cli_Fixie.md)\n * [MSTest](MacOS_Other_Cli_MSTest.md)\n * [Expecto](MacOS_Other_Cli_Expecto.md)\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Object Declaration\nDESCRIPTION: An empty JSON object declaration represented by a pair of curly braces. This notation defines a valid but empty JSON object with no properties.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.NotImplementedExceptionProp.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure\nDESCRIPTION: Hierarchical markdown navigation structure showing the path from home to build server selection, with links to different build server setup options.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_Rider_Gui_NUnit.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [JetBrains Rider](Windows_Rider.md) > [Prefer GUI](Windows_Rider_Gui.md) > [NUnit](Windows_Rider_Gui_NUnit.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Windows_Rider_Gui_NUnit_AppVeyor.md)\n * [GitHub Actions](Windows_Rider_Gui_NUnit_GitHubActions.md)\n * [Azure DevOps](Windows_Rider_Gui_NUnit_AzureDevOps.md)\n * [No build server](Windows_Rider_Gui_NUnit_None.md)\n```\n\n----------------------------------------\n\nTITLE: Displaying System Status in Linux/Unix\nDESCRIPTION: The 'top' command displays the status of the system, showing CPU and memory usage along with a list of running processes. It refreshes automatically and can be used to monitor system performance in real-time.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.Date.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntop\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Array in JSON\nDESCRIPTION: Defines an empty array using square brackets. This can be used as a starting point for adding elements or as a representation of no data.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Naming/NameForParameterTests.ArrayEmpty.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: String Reference in Plain Text\nDESCRIPTION: A plain text string reference 'theString' that may be used as an identifier or test input.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/SimpleTypeTests.StringWrappedInTask.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntheString\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown navigation structure showing the hierarchical path and build server options for MSTest setup in Visual Studio.\nSOURCE: https://github.com/verifytests/verify/blob/main/docs/mdsource/wiz/Windows_VisualStudio_Gui_MSTest.source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started Wizard\n\n[Home](/docs/wiz/readme.md) > [Windows](Windows.md) > [Visual Studio](Windows_VisualStudio.md) > [Prefer GUI](Windows_VisualStudio_Gui.md) > [MSTest](Windows_VisualStudio_Gui_MSTest.md)\n\n## Select Build Server\n\nOptions:\n * [AppVeyor](Windows_VisualStudio_Gui_MSTest_AppVeyor.md)\n * [GitHub Actions](Windows_VisualStudio_Gui_MSTest_GitHubActions.md)\n * [Azure DevOps](Windows_VisualStudio_Gui_MSTest_AzureDevOps.md)\n * [No build server](Windows_VisualStudio_Gui_MSTest_None.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Line Class with perpendicular line calculation in C++\nDESCRIPTION: This code snippet defines a Line class with methods to manipulate and analyze geometric lines. It includes a method to find a perpendicular line passing through a given point, as well as properties for calculating slope, y-intercept, and line equation parameters.\nSOURCE: https://github.com/verifytests/verify/blob/main/src/Verify.Tests/Serialization/SerializationTests.ScrubEmptyLineEnd.verified.txt#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass Line {\npublic:\n\tLine();\n\tLine(Point start, Point end);\n\tLine(double a, double b, double c);\n\n\tdouble DistanceFromPoint(Point p);\n\tPoint ProjectOn(Point point);\n\n\tPoint IntersectWith(Line line);\n\tLine GetPerpendicularLineFrom(Point p);\n\n\tPoint GetStart() { return start; }\n\tPoint GetEnd() { return end; }\n\n\tdouble GetA() { return a; }\n\tdouble GetB() { return b; }\n\tdouble GetC() { return c; }\n\n\tdouble GetSlope();\n\tdouble GetYIntercept();\n\n\tbool IsVertical() { return isVertical; }\n\n\tvoid SetStart(Point p) { start = p; }\n\tvoid SetEnd(Point p) { end = p; }\n\n\tvoid SetA(double _a) { a = _a; }\n\tvoid SetB(double _b) { b = _b; }\n\tvoid SetC(double _c) { c = _c; }\n\nprivate:\n\tPoint start;\n\tPoint end;\n\n\tdouble a;\n\tdouble b;\n\tdouble c;\n\n\tbool isVertical;\n};\n```"
  }
]