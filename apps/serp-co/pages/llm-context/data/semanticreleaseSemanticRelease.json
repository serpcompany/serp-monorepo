[
  {
    "owner": "semantic-release",
    "repo": "semantic-release",
    "content": "TITLE: Configuring semantic-release via CLI arguments\nDESCRIPTION: Example of configuring semantic-release using command line arguments. This example demonstrates setting the release branch to 'next' using the --branches flag.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ semantic-release --branches next\n```\n\n----------------------------------------\n\nTITLE: Installing semantic-release locally in Node modules projects using npm\nDESCRIPTION: Command to install semantic-release as a development dependency in Node modules projects. This approach is recommended for Node-based projects where you want semantic-release as part of your project's dependencies.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev semantic-release\n```\n\n----------------------------------------\n\nTITLE: Basic Plugins Configuration in Semantic Release\nDESCRIPTION: Simple JSON configuration that defines which plugins semantic-release should use. This example uses the commit analyzer, release notes generator, and npm plugins.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/plugins.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@semantic-release/commit-analyzer\", \"@semantic-release/release-notes-generator\", \"@semantic-release/npm\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Plugins List for Semantic Release\nDESCRIPTION: Lists the four default plugins that are built into semantic-release and don't require separate installation. These plugins handle commit analysis, release notes generation, npm publishing, and GitHub integration.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"@semantic-release/commit-analyzer\"\n\"@semantic-release/release-notes-generator\"\n\"@semantic-release/npm\"\n\"@semantic-release/github\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Channels in JavaScript\nDESCRIPTION: Example showing how to configure release channels for different branches in semantic-release. It illustrates the use of default channels and custom channel naming.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/workflow-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  branches: [\n    { name: \"master\" }, // `channel` is undefined so the default distribution channel will be used\n    { name: \"next\", channel: \"channel-next\" }, // `channel` is built with the template `channel-${name}`\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring semantic-release via package.json\nDESCRIPTION: Example of configuring semantic-release through the 'release' key in the project's package.json file. This example demonstrates setting release branches to 'master' and 'next'.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"release\": {\n    \"branches\": [\"master\", \"next\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Semantic Release Plugins with npm\nDESCRIPTION: Command to install additional plugins for semantic-release via npm. This example installs the git and changelog plugins as development dependencies.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @semantic-release/git @semantic-release/changelog -D\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for semantic-release in Node.js Projects\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run semantic-release on push to the master branch. It includes steps for checkout, Node.js setup, dependency installation, and release execution. The workflow also configures necessary permissions and environment variables.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/github-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Release\non:\n  push:\n    branches:\n      - master # or main\n\npermissions:\n  contents: read # for checkout\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write # to be able to publish a GitHub release\n      issues: write # to be able to comment on released issues\n      pull-requests: write # to be able to comment on released pull requests\n      id-token: write # to enable use of OIDC for npm provenance\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: \"lts/*\"\n      - name: Install dependencies\n        run: npm clean-install\n      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies\n        run: npm audit signatures\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npx semantic-release\n```\n\n----------------------------------------\n\nTITLE: Executing semantic-release programmatically with JavaScript\nDESCRIPTION: A complete example showing how to use the semantic-release JavaScript API with custom configuration, environment variables, and output capture. This example demonstrates importing the package, configuring release options, capturing stdout/stderr, and handling the result.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/js-api.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst semanticRelease = require(\"semantic-release\");\nconst { WritableStreamBuffer } = require(\"stream-buffers\");\n\nconst stdoutBuffer = new WritableStreamBuffer();\nconst stderrBuffer = new WritableStreamBuffer();\n\ntry {\n  const result = await semanticRelease(\n    {\n      // Core options\n      branches: [\n        \"+([0-9])?(.{+([0-9]),x}).x\",\n        \"master\",\n        \"main\",\n        \"next\",\n        \"next-major\",\n        { name: \"beta\", prerelease: true },\n        { name: \"alpha\", prerelease: true },\n      ],\n      repositoryUrl: \"https://github.com/me/my-package.git\",\n      // Shareable config\n      extends: \"my-shareable-config\",\n      // Plugin options\n      githubUrl: \"https://my-ghe.com\",\n      githubApiPathPrefix: \"/api-prefix\",\n    },\n    {\n      // Run semantic-release from `/path/to/git/repo/root` without having to change local process `cwd` with `process.chdir()`\n      cwd: \"/path/to/git/repo/root\",\n      // Pass the variable `MY_ENV_VAR` to semantic-release without having to modify the local `process.env`\n      env: { ...process.env, MY_ENV_VAR: \"MY_ENV_VAR_VALUE\" },\n      // Store stdout and stderr to use later instead of writing to `process.stdout` and `process.stderr`\n      stdout: stdoutBuffer,\n      stderr: stderrBuffer,\n    }\n  );\n\n  if (result) {\n    const { lastRelease, commits, nextRelease, releases } = result;\n\n    console.log(\n      `Published ${nextRelease.type} release version ${nextRelease.version} containing ${commits.length} commits.`\n    );\n\n    if (lastRelease.version) {\n      console.log(`The last release was \"${lastRelease.version}\".`);\n    }\n\n    for (const release of releases) {\n      console.log(`The release was published with plugin \"${release.pluginName}\".`);\n    }\n  } else {\n    console.log(\"No release published.\");\n  }\n\n  // Get stdout and stderr content\n  const logs = stdoutBuffer.getContentsAsString(\"utf8\");\n  const errors = stderrBuffer.getContentsAsString(\"utf8\");\n} catch (err) {\n  console.error(\"The automated release failed with %O\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Commit Message for Semantic Release\nDESCRIPTION: Examples of properly formatted commit messages following the semantic release guidelines. Includes examples for fix, feature, and breaking change commits.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: commit\nCODE:\n```\nfix(pencil): stop graphite breaking when too much pressure applied\n```\n\nLANGUAGE: commit\nCODE:\n```\nfeat(pencil): add 'graphiteWidth' option\n\nFix #42\n```\n\nLANGUAGE: commit\nCODE:\n```\nperf(pencil): remove graphiteWidth option\n\nBREAKING CHANGE: The graphiteWidth option has been removed.\n\nThe default graphite width of 10mm is always used for performance reasons.\n```\n\n----------------------------------------\n\nTITLE: Plugin Functionality Overview\nDESCRIPTION: List of available semantic-release plugins and their implemented hooks for managing releases across different platforms and services. Includes detailed descriptions of verifyConditions, prepare, publish, success, and fail hooks for each plugin.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/extending/plugins-list.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- semantic-release-mattermost\\n  - verifyConditions: Verify webhook setup and release-notes-generator\\n  - success: Send release messages to mattermost webhook\\n- semantic-release-github-milestones\\n  - verifyConditions: Verify github tokens\\n  - verifyRelease: Display github milestone info\\n[...additional plugins...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-release Branches in JavaScript\nDESCRIPTION: Example demonstrating the configuration of pre-release branches in semantic-release. It shows how to set up different pre-release types and customize their naming.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/workflow-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  branches: [\n    { name: \"master\" },\n    { name: \"pre/rc\", channel: \"pre/rc\", prerelease: \"rc\" }, // `prerelease` is built with the template `${name.replace(/^pre\\//g, \"\")}`\n    { name: \"beta\", channel: \"beta\", prerelease: true }, // `prerelease` is set to `beta` as it is the value of `name`\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI 2.0 for semantic-release with Multiple Node Jobs\nDESCRIPTION: This YAML configuration sets up a CircleCI 2.0 workflow that runs tests on Node 16 and 14, followed by a release job using semantic-release. It uses the circleci/node orb and matrix jobs for efficient testing across Node versions.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/circleci-workflows.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  node: circleci/node@5.0.0\njobs:\n  release:\n    executor: node/default\n    steps:\n      - checkout\n      - node/install-packages # Install and automatically cache packages\n      # Run optional required steps before releasing\n      # - run: npm run build-script\n      - run: npx semantic-release\n\nworkflows:\n  test_and_release:\n    # Run the test jobs first, then the release only when all the test jobs are successful\n    jobs:\n      - node/test:\n          matrix:\n            parameters:\n              version:\n                - 16.1.0\n                - 14.17.0\n      - release:\n          requires:\n            - node/test\n```\n\n----------------------------------------\n\nTITLE: Expanding Branch Configuration in JavaScript\nDESCRIPTION: Example of how semantic-release expands a branch configuration using globs and specific branch names. It demonstrates how different branch types are configured with their respective properties.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/workflow-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  branches: [\n    { name: \"1.x\", range: \"1.x\", channel: \"1.x\" }, // Only after the `1.x` is created in the repo\n    { name: \"2.x\", range: \"2.x\", channel: \"2.x\" }, // Only after the `2.x` is created in the repo\n    { name: \"master\" },\n    { name: \"next\", channel: \"next\" }, // Only after the `next` is created in the repo\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Release for Non-JavaScript Projects\nDESCRIPTION: JSON configuration example for using semantic-release with non-JavaScript projects. It disables the default npm plugin and uses exec plugin with custom commands for version setting and package publishing.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    \"@semantic-release/github\",\n    [\n      \"@semantic-release/exec\",\n      {\n        \"prepareCmd\": \"set-version ${nextRelease.version}\",\n        \"publishCmd\": \"publish-package\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running locally installed semantic-release in CI with npx\nDESCRIPTION: Command to run a locally installed semantic-release in a CI environment using npx. This ensures the correct version of semantic-release is executed without requiring global installation.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/installation.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx semantic-release\n```\n\n----------------------------------------\n\nTITLE: Plugin-specific and Global Options Configuration\nDESCRIPTION: Advanced JSON configuration showing how to provide both plugin-specific options (for GitHub plugin) and global options (preset) that apply to all plugins in semantic-release.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/plugins.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\n      \"@semantic-release/github\",\n      {\n        \"assets\": [\"dist/**\"]\n      }\n    ],\n    \"@semantic-release/git\"\n  ],\n  \"preset\": \"angular\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using npx to Execute semantic-release with Latest LTS Node Version\nDESCRIPTION: This command uses npx to download and execute the latest Node LTS version and run semantic-release within that context. Recommended for CI environments where directly installing a newer Node version is not possible.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/node-version.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx -p node@v18-lts -c \"npx semantic-release\"\n```\n\n----------------------------------------\n\nTITLE: Extended Plugins Configuration with Execution Order\nDESCRIPTION: JSON configuration demonstrating how multiple plugins are executed in order for each release step. This example adds the git plugin to the standard set of plugins.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/plugins.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    \"@semantic-release/npm\",\n    \"@semantic-release/git\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Plugin Structure in JavaScript\nDESCRIPTION: Demonstrates the basic structure of a semantic-release plugin with a verifyConditions method that references a separate verification module.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/plugin.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst verify = require(\"./src/verify\");\n\nlet verified;\n\n/**\n * Called by semantic-release during the verification step\n * @param {*} pluginConfig The semantic-release plugin config\n * @param {*} context The context provided by semantic-release\n */\nasync function verifyConditions(pluginConfig, context) {\n  await verify(pluginConfig, context);\n  verified = true;\n}\n\nmodule.exports = { verifyConditions };\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Declarative Pipeline for Semantic Release\nDESCRIPTION: Jenkins pipeline configuration that sets up a two-stage process for testing and releasing with semantic-release. Includes environment variable setup for GitHub token and uses Node LTS version for the release stage.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/jenkins-ci.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n// The release stage in the pipeline will run only if the test stage in the pipeline is successful\npipeline {\n    agent any\n    environment {\n        GH_TOKEN  = credentials('some-id')\n    }\n    stages {\n        stage('Test') {\n            steps {\n                sh '''\n                # Configure your test steps here (checkout, npm install, tests etc)\n                npm install\n                npm test\n                '''\n            }\n        }\n        stage('Release') {\n            tools {\n                nodejs \"node LTS\"\n            }\n            steps {\n                sh '''\n                # Run optional required steps before releasing\n                npx semantic-release\n                '''\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI Pipeline for Node Multi-version Testing and Release\nDESCRIPTION: This YAML configuration sets up a pipeline with test and release stages. Tests run on Node 10 and 12, while the release job runs only if all tests pass. Before each job, npm dependencies are installed.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/gitlab-ci.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# The release pipeline will run only if all jobs in the test pipeline are successful\nstages:\n  - test\n  - release\n\nbefore_script:\n  - npm install\n\nnode:10:\n  image: node:10\n  stage: test\n  script:\n    - npm test\n\nnode:12:\n  image: node:12\n  stage: test\n  script:\n    - npm test\n\npublish:\n  image: node:12\n  stage: release\n  script:\n    - npx semantic-release\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI Pipeline for Branch-specific Releases\nDESCRIPTION: This YAML configuration creates a release pipeline that only runs on the master/main branch when a commit is triggered. It includes two jobs that install semantic-release globally and execute it on different Node versions.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/gitlab-ci.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# The release pipeline will run only on the master/main branch a commit is triggered\nstages:\n  - release\n\nrelease:\n  image: node:10-buster-slim\n  stage: release\n  before_script:\n    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates\n    - npm install -g semantic-release @semantic-release/gitlab\n  script:\n    - semantic-release\n  rules:\n    - if: $CI_COMMIT_BRANCH == \"master\" # or main\n\nrelease:\n  image: node:12-buster-slim\n  stage: release\n  before_script:\n    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates\n    - npm install -g semantic-release @semantic-release/gitlab\n  script:\n    - semantic-release\n  rules:\n    - if: $CI_COMMIT_BRANCH == \"master\" # or main\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Node.js Projects\nDESCRIPTION: Travis CI configuration for running semantic-release with multiple Node.js versions (14 and 16). Sets up a release stage that runs after all tests pass, using the deploy step for semantic-release execution.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/travis.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\n\nnode_js:\n  - 14\n  - 16\n\njobs:\n  include:\n    # Define the release stage that runs semantic-release\n    - stage: release\n      node_js: lts/*\n      # Advanced: optionally overwrite your default `script` step to skip the tests\n      # script: skip\n      deploy:\n        provider: script\n        skip_cleanup: true\n        script:\n          - npx semantic-release\n```\n\n----------------------------------------\n\nTITLE: Example Releases Array Structure in JavaScript\nDESCRIPTION: An example of the releases array structure returned by semantic-release. Each object represents a release published through different plugins, containing metadata such as version, git information, release notes, and distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/js-api.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    name: 'GitHub release',\n    url: 'https://github.com/me/my-package/releases/tag/v1.1.0',\n    type: 'minor',\n    gitHead: '68eb2c4d778050b0701136ca129f837d7ed494d2',\n    version: '1.1.0',\n    gitTag: 'v1.1.0',\n    notes: 'Release notes for version 1.1.0...',\n    pluginName: '@semantic-release/github'\n    channel: 'next'\n  },\n  {\n    name: 'npm package (@latest dist-tag)',\n    url: 'https://www.npmjs.com/package/my-package',\n    type: 'minor',\n    gitHead: '68eb2c4d778050b0701136ca129f837d7ed494d2',\n    version: '1.1.0',\n    gitTag: 'v1.1.0',\n    notes: 'Release notes for version 1.1.0...',\n    pluginName: '@semantic-release/npm'\n    channel: 'next'\n   }\n ]\n```\n\n----------------------------------------\n\nTITLE: Travis CI Configuration for Non-Node.js Projects\nDESCRIPTION: Travis CI configuration for Go projects (versions 1.6 and 1.7) with semantic-release integration. Includes Node.js installation for running semantic-release in the deploy phase.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/travis.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: go\n\ngo:\n  - 1.6\n  - 1.7\n\njobs:\n  include:\n    # Define the release stage that runs semantic-release\n    - stage: release\n      # Advanced: optionally overwrite your default `script` step to skip the tests\n      # script:\n      #   - make\n      deploy:\n        provider: script\n        skip_cleanup: true\n        script:\n          # Use nvm to install and use the Node LTS version (nvm is installed on all Travis images)\n          - nvm install lts/*\n          - npx semantic-release\n        on:\n          all_branches: true\n```\n\n----------------------------------------\n\nTITLE: Running semantic-release globally with npx\nDESCRIPTION: Command to install and run semantic-release directly in a CI environment using npx. This is recommended for non-Node projects where you don't want to manage semantic-release as a project dependency.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/installation.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx semantic-release\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Release with Exec Plugin for Custom Build Scripts\nDESCRIPTION: JSON configuration for semantic-release that uses the exec plugin to run a custom build script during release preparation. The script receives the next version as a parameter.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    \"@semantic-release/npm\",\n    [\n      \"@semantic-release/exec\",\n      {\n        \"prepareCmd\": \"./my-build-script.sh ${nextRelease.version}\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring semantic-release via .releaserc file\nDESCRIPTION: Example of configuring semantic-release using a .releaserc file in JSON format. This example sets the release branches to 'master' and 'next'.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"branches\": [\"master\", \"next\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Configuration in Semantic Release Config\nDESCRIPTION: Shows how a user would configure a custom plugin in their semantic-release configuration file with specific options.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/plugin.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  prepare: {\n    path: \"@semantic-release/my-special-plugin\";\n    message: \"My cool release message\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring semantic-release via release.config.cjs file\nDESCRIPTION: Example of configuring semantic-release using a CommonJS module (release.config.cjs). This sets release branches to 'master' and 'next' with TypeScript type annotations.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @type {import('semantic-release').GlobalConfig}\n */\nmodule.exports = {\n  branches: [\"master\", \"next\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Semantic Release Locally with Authentication Environment Variables\nDESCRIPTION: Shell command demonstrating how to run semantic-release locally by providing necessary authentication tokens as environment variables and using the --no-ci flag.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ NPM_TOKEN=<your_npm_token> GH_TOKEN=<your_github_token> npx semantic-release --no-ci\n```\n\n----------------------------------------\n\nTITLE: Configuring semantic-release via release.config.mjs file\nDESCRIPTION: Example of configuring semantic-release using an ES module (release.config.mjs). This sets release branches to 'master' and 'next' with TypeScript type annotations.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * @type {import('semantic-release').GlobalConfig}\n */\nexport default {\n  branches: [\"master\", \"next\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting npm Package Access Level via npmrc\nDESCRIPTION: Configuration example showing how to set the access level for published npm packages using .npmrc file\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#2025-04-20_snippet_4\n\nLANGUAGE: rc\nCODE:\n```\naccess=public\n```\n\n----------------------------------------\n\nTITLE: Creating a Verification Module in JavaScript\nDESCRIPTION: Shows how to implement a verification module that checks plugin configuration and throws aggregated errors if validation fails.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/plugin.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst AggregateError = require(\"aggregate-error\");\n\n/**\n * A method to verify that the user has given us a slack webhook url to post to\n */\nmodule.exports = async (pluginConfig, context) => {\n  const { logger } = context;\n  const errors = [];\n\n  // Throw any errors we accumulated during the validation\n  if (errors.length > 0) {\n    throw new AggregateError(errors);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting npm Package Access Level via package.json\nDESCRIPTION: Configuration example showing how to set the access level for published npm packages using package.json publishConfig\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Branches in JavaScript\nDESCRIPTION: Example of configuring maintenance branches in semantic-release. It shows how to set up multiple maintenance branches with different version ranges.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/workflow-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  branches: [\n    { name: \"1.1.x\", range: \"1.1.x\", channel: \"1.1.x\" },\n    { name: \"1.2.x\", range: \"1.2.x\", channel: \"1.2.x\" },\n    { name: \"master\" },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying and Deleting Conflicting Git Tags\nDESCRIPTION: Commands to verify if a git tag exists, find branches containing it, and delete the tag from both local and remote repositories when encountering 'reference already exists' errors.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/troubleshooting.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Verify if the commit exists in the repository\n$ git rev-list -1 <tag name>\n# If a commit sha is returned, then the tag exists\n\n# Verify the branches having the tagged commit in their history\n$ git branch --contains <tag name>\n\n# Delete the tag\n$ git tag -d <tag name>\n$ git push origin :refs/tags/<tag name>\n```\n\n----------------------------------------\n\nTITLE: Verifying Plugin Configuration Options in JavaScript\nDESCRIPTION: Shows how to access and verify the existence of configuration options passed to the plugin by the user.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/plugin.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst { message } = pluginConfig;\n\nif (message.length) {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Semantic Release Plugin\nDESCRIPTION: Shows how to use the built-in logger from the context object to provide debug information during plugin execution.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/plugin.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { logger } = context;\n\nlogger.log('Some message from plugin.').\n```\n\n----------------------------------------\n\nTITLE: Using nvm to Switch to Latest LTS Node Version for semantic-release\nDESCRIPTION: This command uses nvm to install and switch to the latest LTS version of Node.js before running semantic-release. Useful in CI environments that have nvm pre-installed.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/node-version.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nvm install 'lts/*' && npx semantic-release\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Semantic Release Plugin\nDESCRIPTION: Demonstrates how to access environment variables from the context object to handle authentication tokens.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/developer-guide/plugin.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { env } = context;\n\nif (env.GITHUB_TOKEN) {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Renovate configuration for automatic semantic-release updates\nDESCRIPTION: A Renovate configuration snippet that automatically detects and updates semantic-release versions in GitHub workflow files. This helps keep semantic-release updated without manual intervention.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/installation.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"regexManagers\": [\n    {\n      \"description\": \"Update semantic-release version used by npx\",\n      \"fileMatch\": [\"^\\\\.github/workflows/[^/]+\\\\.ya?ml$\"],\n      \"matchStrings\": [\"\\\\srun: npx semantic-release@(?<currentValue>.*?)\\\\s\"],\n      \"datasourceTemplate\": \"npm\",\n      \"depNameTemplate\": \"semantic-release\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Keys for Git Authentication\nDESCRIPTION: Command to generate a new SSH key pair for Git deployment with specified email and passphrase.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/git-hosted-services/git-auth-ssh-keys.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh-keygen -t rsa -b 4096 -C \"<your_email>\" -f git_deploy_key -N \"<ssh_passphrase>\"\n```\n\n----------------------------------------\n\nTITLE: Querying npm Registry for Package Version Information\nDESCRIPTION: A shell command to check the available distribution tags for a package in the npm registry. This is recommended as the source of truth for version information rather than relying on repository files.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm dist-tags ls <package-name>\n```\n\n----------------------------------------\n\nTITLE: Travis CI SSH Key Configuration\nDESCRIPTION: YAML configuration for Travis CI to decrypt and set up SSH authentication, including key decryption and ssh-agent setup.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/git-hosted-services/git-auth-ssh-keys.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbefore_install:\n  # Decrypt the git_deploy_key.enc key into /tmp/git_deploy_key\n  - openssl aes-256-cbc -K $encrypted_KKKKKKKKKKKK_key -iv $encrypted_VVVVVVVVVVVV_iv -in git_deploy_key.enc -out /tmp/git_deploy_key -d\n  # Make sure only the current user can read the private key\n  - chmod 600 /tmp/git_deploy_key\n  # Create a script to return the passphrase environment variable to ssh-add\n  - echo 'echo ${SSH_PASSPHRASE}' > /tmp/askpass && chmod +x /tmp/askpass\n  # Start the authentication agent\n  - eval \"$(ssh-agent -s)\"\n  # Add the key to the authentication agent\n  - DISPLAY=\":0.0\" SSH_ASKPASS=\"/tmp/askpass\" setsid ssh-add /tmp/git_deploy_key </dev/null\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Links for semantic-release Extensions\nDESCRIPTION: This snippet contains markdown links to two important resources for extending semantic-release: a list of plugins and a list of shareable configurations.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/extending/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Extending semantic-release\n\n- [Plugins list](plugins-list.md)\n- [Shareable configuration list](shareable-configurations-list.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Semantic Release Project Workspace\nDESCRIPTION: Bash commands for forking, cloning, configuring remotes, and installing dependencies for a semantic-release project. Includes steps for switching to the correct Node.js version and installing dependencies.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork of the repo into the current directory\n$ git clone https://github.com/semantic-release/<repo-name>\n# Navigate to the newly cloned directory\n$ cd <repo-name>\n# Assign the original repo to a remote called \"upstream\"\n$ git remote add upstream https://github.com/semantic-release/<repo-name>\n# Switch your node version to the version defined by the project as the development version\n# This step assumes you have already installed and configured https://github.com/nvm-sh/nvm\n# You may need to run `nvm install` if you have not already installed the development node version\n$ nvm use\n# Install the dependencies\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository for semantic-release\nDESCRIPTION: Commands to update your local repository with the latest changes from upstream and refresh dependencies before creating a new branch. This ensures you're working with the latest codebase.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout master\n$ git pull upstream master\n$ rm -rf node_modules\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Checking NPM Package Name Availability\nDESCRIPTION: Commands to verify if a package name is available on NPM registry using npm-name-cli. This is useful when encountering permission errors during publishing.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/troubleshooting.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global npm-name-cli\n$ npm-name <package-name>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for semantic-release Contribution\nDESCRIPTION: Command to create a new topic branch off the main development branch to contain your feature, change, or fix. This isolates your changes from the main codebase.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Semantic Release Project\nDESCRIPTION: Bash command for running integration tests in a semantic-release project. Requires Docker to be installed on the machine.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test:integration\n```\n\n----------------------------------------\n\nTITLE: Adding and Pushing a Missing Tag to a Specific Commit\nDESCRIPTION: Commands to manually add a tag (v1.1.0) to a specific commit (1234567) and push it to the remote repository. Used when a release tag is missing from a commit's history.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v1.1.0 1234567\ngit push origin v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding Semantic Release Badge in Markdown\nDESCRIPTION: Code snippet for adding a semantic-release badge to your README.md file to indicate that your project follows the Angular commit convention and uses semantic-release for publishing.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)\n```\n\n----------------------------------------\n\nTITLE: Verifying commit existence in release branch\nDESCRIPTION: Command to check if a specific commit (by SHA) is present in the release branch history. This is used when working with existing version tags during semantic-release setup.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure the commit 1234567 is in the release branch history\n$ git branch --contains 1234567\n```\n\n----------------------------------------\n\nTITLE: Listing Tags for a Specific Commit in Git\nDESCRIPTION: Command to list all tags that contain a specific commit hash (1234567). This helps verify if a release tag is associated with a particular commit.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit tag --contains 1234567\n```\n\n----------------------------------------\n\nTITLE: Circle CI Configuration for SSH Authentication\nDESCRIPTION: YAML configuration for Circle CI version 2.0 to handle SSH key decryption and authentication setup.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/git-hosted-services/git-auth-ssh-keys.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2\njobs:\n  coverage_test_publish:\n    # docker, working_dir, etc\n    steps:\n      - run:\n          # Decrypt the git_deploy_key.enc key into /tmp/git_deploy_key\n          - openssl aes-256-cbc -d -K $REPO_ENC_KEY -iv $REPO_ENC_IV -in git_deploy_key.enc -out /tmp/git_deploy_key\n          # Make sure only the current user can read the private key\n          - chmod 600 /tmp/git_deploy_key\n          # Create a script to return the passphrase environment variable to ssh-add\n          - echo 'echo ${SSL_PASSPHRASE}' > /tmp/askpass && chmod +x /tmp/askpass\n          # Start the authentication agent\n          - eval \"$(ssh-agent -s)\"\n          # Add the key to the authentication agent\n          - DISPLAY=\":0.0\" SSH_ASKPASS=\"/tmp/askpass\" setsid ssh-add /tmp/git_deploy_key </dev/null\n      # checkout, restore_cache, run: yarn install, save_cache, etc.\n      # Run semantic-release after all the above is set.\n```\n\n----------------------------------------\n\nTITLE: Installing Travis CLI\nDESCRIPTION: Command to install Travis CLI using Ruby gems package manager.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/git-hosted-services/git-auth-ssh-keys.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install travis\n```\n\n----------------------------------------\n\nTITLE: Complete Git History After Final Release\nDESCRIPTION: Shows the complete Git commit history after merging the beta branch (containing alpha changes) to the main branch that triggers version 3.0.0 release on the @latest distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n|  | \\\n|  |  * feat: first feature of other release \\n\\n BREAKING CHANGE: it breaks something # => v3.0.0-alpha.1 on @alpha\n|  |  * feat: second feature of other release # => v3.0.0-alpha.2 on @alpha\n| /|  |\n*  |  | Merge branch beta into master/main # => v2.0.0 on @latest\n|  | /|\n|  *  | Merge branch alpha into beta # => v3.0.0-beta.1 on @beta\n| /|  |\n*  |  | Merge branch beta into master/main # => v3.0.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Git History After Promoting Next to Latest Channel\nDESCRIPTION: Shows the final Git repository history after merging the next branch back into master/main, which results in version 2.1.0 being released on the @latest dist-tag, making all features available to all users.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* fix: a fix # => v1.0.1 on @latest\n| \\\n|  * feat: a big feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0 on @next\n|  * fix: fix something on the big feature # => v2.0.1 on @next\n*  | feat: a small feature # => v1.1.0 on @latest\n|  * Merge branch master/main into next # => v2.1.0 on @next\n| /|\n*  | Merge branch next into master/main # => v2.1.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Semantic Release\nDESCRIPTION: Basic package.json configuration showing the required semantic-release dependency for local installation.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/travis.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"semantic-release\": \"^18.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git History After Porting Feature to Next Channel\nDESCRIPTION: Shows the Git repository history after merging the small feature from master/main into the next branch, which results in version 2.1.0 being released on the @next dist-tag.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* fix: a fix # => v1.0.1 on @latest\n| \\\n|  * feat: a big feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0 on @next\n|  * fix: fix something on the big feature # => v2.0.1 on @next\n*  | feat: a small feature # => v1.1.0 on @latest\n|  * Merge branch master/main into next # => v2.1.0 on @next\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Semantic Release\nDESCRIPTION: Minimal package.json configuration showing the required semantic-release dependency for local installation.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/jenkins-ci.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"semantic-release\": \"^18.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git History After Bug Fix on Next Channel\nDESCRIPTION: Shows the Git repository history after fixing a bug in the feature on the next branch, which results in version 2.0.1 being released on the @next dist-tag.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* fix: a fix # => v1.0.1 on @latest\n| \\\n|  * feat: a big feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0 on @next\n|  * fix: fix something on the big feature # => v2.0.1 on @next\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration for Local semantic-release Installation\nDESCRIPTION: This JSON configuration shows the necessary devDependency entry for a local installation of semantic-release. This is only required when using semantic-release as a local dependency rather than globally.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/gitlab-ci.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"semantic-release\": \"^15.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git History After Feature Release on Next Channel\nDESCRIPTION: Shows the Git repository history after adding a breaking change feature on the next branch, which results in version 2.0.0 being released on the @next dist-tag while maintaining the previous release on @latest.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* fix: a fix # => v1.0.1 on @latest\n| \\\n|  * feat: a big feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0 on @next\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork for semantic-release Pull Request\nDESCRIPTION: Command to push your local topic branch to your fork on GitHub, preparing it for a pull request. This makes your changes available for review.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Git History After Initial Commit\nDESCRIPTION: Shows the Git repository history after making the initial commit with a feature, which results in version 1.0.0 being released on the @latest dist-tag.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Semantic Release Project\nDESCRIPTION: Bash command for running unit tests in a semantic-release project.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Git History After Merging Alpha to Beta\nDESCRIPTION: Shows the Git commit history after merging the alpha branch to the beta branch that triggers version 3.0.0-beta.1 release on the @beta distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n|  | \\\n|  |  * feat: first feature of other release \\n\\n BREAKING CHANGE: it breaks something # => v3.0.0-alpha.1 on @alpha\n|  |  * feat: second feature of other release # => v3.0.0-alpha.2 on @alpha\n| /|  |\n*  |  | Merge branch beta into master/main # => v2.0.0 on @latest\n|  | /|\n|  *  | Merge branch alpha into beta # => v3.0.0-beta.1 on @beta\n```\n\n----------------------------------------\n\nTITLE: NPM Permission Error Example\nDESCRIPTION: Example error message when encountering npm publishing permission issues, which can occur due to authentication misconfiguration or insufficient user permissions.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/support/troubleshooting.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm ERR! publish Failed PUT 403\nnpm ERR! code E403\nnpm ERR! You do not have permission to publish \"<package-name>\". Are you logged in as the correct user? : <package-name>\n```\n\n----------------------------------------\n\nTITLE: Git History After Merging Beta to Main\nDESCRIPTION: Shows the Git commit history after merging the beta branch to the main branch that triggers version 2.0.0 release on the @latest distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n|  | \\\n|  |  * feat: first feature of other release \\n\\n BREAKING CHANGE: it breaks something # => v3.0.0-alpha.1 on @alpha\n|  |  * feat: second feature of other release # => v3.0.0-alpha.2 on @alpha\n| /|  |\n*  |  | Merge branch beta into master/main # => v2.0.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Git History After Second Alpha Feature\nDESCRIPTION: Shows the Git commit history after adding a second feature to the alpha branch that triggers version 3.0.0-alpha.2 release on the @alpha distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n|  | \\\n|  |  * feat: first feature of other release \\n\\n BREAKING CHANGE: it breaks something # => v3.0.0-alpha.1 on @alpha\n|  |  * feat: second feature of other release # => v3.0.0-alpha.2 on @alpha\n```\n\n----------------------------------------\n\nTITLE: Git History After First Alpha Feature\nDESCRIPTION: Shows the Git commit history after adding the first feature to the alpha branch that triggers version 3.0.0-alpha.1 release on the @alpha distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n|  | \\\n|  |  * feat: first feature of other release \\n\\n BREAKING CHANGE: it breaks something # => v3.0.0-alpha.1 on @alpha\n```\n\n----------------------------------------\n\nTITLE: Git History After First Beta Feature\nDESCRIPTION: Shows the Git commit history after adding the first feature to the beta branch that triggers version 2.0.0-beta.1 release on the @beta distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n```\n\n----------------------------------------\n\nTITLE: Git History After Initial Commit\nDESCRIPTION: Shows the Git commit history after the initial commit that triggers version 1.0.0 release on the @latest distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Final Branch History\nDESCRIPTION: Complete Git history showing all branches, merges, and version releases after porting fixes between branches.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n*  | feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n|  | \\\n|  *  | feat: a feature # => v1.1.0 on @1.x\n|  |  * fix: a fix # => v1.0.1 on @1.0.x\n|  | /|\n|  *  | Merge branch 1.0.x into 1.x # => v1.1.1 on @1.x\n| /|  |\n*  |  | Merge branch 1.x into master/main # => v2.1.0 on @latest\n*  |  | fix: another fix # => v2.1.1 on @latest\n|  |  |\n|  *  | fix: another fix # => v1.1.2 on @1.x\n```\n\n----------------------------------------\n\nTITLE: Additional Bug Fix History\nDESCRIPTION: Git history after adding another bug fix to master/main branch.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n*  | feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n|  | \\\n|  *  | feat: a feature # => v1.1.0 on @1.x\n|  |  * fix: a fix # => v1.0.1 on @1.0.x\n|  | /|\n|  *  | Merge branch 1.0.x into 1.x # => v1.1.1 on @1.x\n| /|  |\n*  |  | Merge branch 1.x into master/main # => v2.1.0 on @latest\n*  |  | fix: another fix # => v2.1.1 on @latest\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Branch History\nDESCRIPTION: Git history showing the addition of a bug fix to the 1.0.x branch.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n*  | feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n|  | \\\n|  *  | feat: a feature # => v1.1.0 on @1.x\n|  |  * fix: a fix # => v1.0.1 on @1.0.x\n```\n\n----------------------------------------\n\nTITLE: Feature Release Branch History\nDESCRIPTION: Git history showing branching structure after adding a new feature to the 1.x branch.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n*  | feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n|  * feat: a feature # => v1.1.0 on @1.x\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Release History\nDESCRIPTION: Git history showing the initial commit and a breaking change commit that bumps the version to 2.0.0.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Git History for Multi-Channel Release Management\nDESCRIPTION: Shows the Git commit history demonstrating the workflow of managing multiple release channels (latest, beta, alpha) with semantic-release. Includes version bumps, feature additions, and branch merges with their corresponding version numbers and distribution tags.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_9\n\nLANGUAGE: git\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n|  | \\\n|  |  * feat: first feature of other release \\n\\n BREAKING CHANGE: it breaks something # => v3.0.0-alpha.1 on @alpha\n|  |  * feat: second feature of other release # => v3.0.0-alpha.2 on @alpha\n| /|  |\n*  |  | Merge branch beta into master/main # => v2.0.0 on @latest\n|  | /|\n|  *  | Merge branch alpha into beta # => v3.0.0-beta.1 on @beta\n| /|  |\n*  |  | Merge branch beta into master/main # => v3.0.0 on @latest\n| \\|  |\n|  *  | Merge branch master/main into beta\n|  *  | feat: new feature # => v3.1.0-beta.1 on @beta\n```\n\n----------------------------------------\n\nTITLE: Initial Release Git History\nDESCRIPTION: Shows the Git commit history after the initial release resulting in version 1.0.0.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Git History After Feature Release on Latest Channel\nDESCRIPTION: Shows the Git repository history after adding a non-breaking feature on the master/main branch, which results in version 1.1.0 being released on the @latest dist-tag, separate from the next channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* fix: a fix # => v1.0.1 on @latest\n| \\\n|  * feat: a big feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0 on @next\n|  * fix: fix something on the big feature # => v2.0.1 on @next\n*  | feat: a small feature # => v1.1.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Master Branch Merge History\nDESCRIPTION: Git history after merging changes into master/main branch.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n*  | feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n|  | \\\n|  *  | feat: a feature # => v1.1.0 on @1.x\n|  |  * fix: a fix # => v1.0.1 on @1.0.x\n|  | /|\n|  *  | Merge branch 1.0.x into 1.x # => v1.1.1 on @1.x\n| /|  |\n*  |  | Merge branch 1.x into master/main # => v2.1.0 on @latest\n```\n\n----------------------------------------\n\nTITLE: Merged Bug Fix History\nDESCRIPTION: Git history after merging the bug fix from 1.0.x into the 1.x branch.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/maintenance-releases.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n*  | feat: drop Node.js 6 support \\n\\n BREAKING CHANGE: Node.js >= 8 required # => v2.0.0 on @latest\n|  | \\\n|  *  | feat: a feature # => v1.1.0 on @1.x\n|  |  * fix: a fix # => v1.0.1 on @1.0.x\n|  | /|\n|  *  | Merge branch 1.0.x into 1.x # => v1.1.1 on @1.x\n```\n\n----------------------------------------\n\nTITLE: Git History After Bug Fix on Main Branch\nDESCRIPTION: Shows the Git commit history after adding a bug fix to the main branch that triggers version 1.0.1 release on the @latest distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n*  | fix: a fix # => v1.0.1 on @latest\n```\n\n----------------------------------------\n\nTITLE: Git History After Second Beta Feature\nDESCRIPTION: Shows the Git commit history after adding a second feature to the beta branch that triggers version 2.0.0-beta.2 release on the @beta distribution channel.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/pre-releases.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n| \\\n|  * feat: first feature \\n\\n BREAKING CHANGE: it breaks something # => v2.0.0-beta.1 on @beta\n|  * feat: second feature # => v2.0.0-beta.2 on @beta\n```\n\n----------------------------------------\n\nTITLE: Git History After Bug Fix Release\nDESCRIPTION: Shows the Git repository history after adding a bug fix commit, which results in version 1.0.1 being released on the @latest dist-tag.\nSOURCE: https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/release-workflow/distribution-channels.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* feat: initial commit # => v1.0.0 on @latest\n* fix: a fix # => v1.0.1 on @latest\n```"
  }
]