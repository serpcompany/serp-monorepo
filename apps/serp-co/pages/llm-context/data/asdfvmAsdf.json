[
  {
    "owner": "asdf-vm",
    "repo": "asdf",
    "content": "TITLE: Setting Custom Data Directory in Shell Profile\nDESCRIPTION: This snippet modifies the shell profile (e.g., `~/.profile`) to set a custom data directory path for asdf by exporting the `ASDF_DATA_DIR` environment variable. It allows users to customize where asdf stores its data.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nexport ASDF_DATA_DIR=\"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Tool Versions in .tool-versions Plaintext\nDESCRIPTION: Defines desired versions of tools in a directory using the .tool-versions file. Supports comments and multiple versions separated by spaces. Versions can be specified as exact versions, git refs, local paths, or system default. This file controls which tool versions asdf activates within a directory and subdirectories. Typical usage involves plain text files with each tool and version on a line.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/configuration.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nruby 2.5.3\nnodejs 10.15.0\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nruby 2.5.3 # This is a comment\n# This is another comment\nnodejs 10.15.0\n```\n\nLANGUAGE: plaintext\nCODE:\n```\npython 3.7.2 2.7.15 system\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version with ASDF\nDESCRIPTION: Installs a specific version of a tool using ASDF. You can specify a version number or use a git reference (branch, tag, or commit) for source-based installations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> <version>\n# asdf install erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Setting Tool Version with asdf set Command in Shell\nDESCRIPTION: This shell command sets a specific version of a tool (e.g., nodejs 16.5.0) to be used globally or for the current directory. It updates the appropriate `.tool-versions` file (either in home directory or working directory) to specify the desired version, enabling consistent environment setup.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nasdf set -u nodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Install asdf using Homebrew Shell\nDESCRIPTION: Installs the asdf version manager using the Homebrew package manager on macOS or Linux. This is the recommended installation method. Requires Homebrew to be installed and configured.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install asdf\n```\n\n----------------------------------------\n\nTITLE: Installing ASDF Version Shell\nDESCRIPTION: Install the specific version of a single tool as it is defined in the `.tool-versions` file.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install <name>\n```\n\n----------------------------------------\n\nTITLE: Configure asdf completions source for Nushell Nushell\nDESCRIPTION: Sources the generated asdf completion script in Nushell to enable command completions. It dynamically determines the location of the completion file based on the `ASDF_DATA_DIR` variable. This block should be added to `~/.config/nushell/config.nu`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_24\n\nLANGUAGE: Nushell\nCODE:\n```\nlet asdf_data_dir = (\n  if ( $env | get --ignore-errors ASDF_DATA_DIR | is-empty ) {\n    $env.HOME | path join '.asdf'\n  } else {\n    $env.ASDF_DATA_DIR\n  }\n)\n. \"$asdf_data_dir/completions/nushell.nu\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific ASDF Plugin\nDESCRIPTION: This command updates a specified ASDF plugin to its latest version. It fetches the newest commits from the plugin's repository. Requires the plugin's name as an argument.  The `<name>` parameter identifies the plugin to be updated. This updates only the specified plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update <name>\n# asdf plugin update erlang\n```\n\n----------------------------------------\n\nTITLE: Configure asdf custom data directory for Bash Shell\nDESCRIPTION: Specifies a custom directory for asdf to store its data, plugins, installs, and shims in Bash. This overrides the default `$HOME/.asdf` location. This line should be added to `~/.bash_profile` before the PATH configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nexport ASDF_DATA_DIR=\"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Setting current version globally, locally, or in shell\nDESCRIPTION: Configures the active version of a tool by setting it globally, locally within a project directory, or temporarily in the shell session. Supports latest version references.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nasdf global <name> <version> [<version>...]\n# Example: asdf global elixir 1.2.4\n\nasdf shell <name> <version> [<version>...]\n# asdf shell elixir 1.2.4\n\nasdf local <name> <version> [<version>...]\n# asdf local elixir 1.2.4\n\n# Using latest: \nasdf global <name> latest[:<version>]\n# Example: asdf global elixir latest\n```\n\n----------------------------------------\n\nTITLE: Setting Global asdf Package Version (Bash)\nDESCRIPTION: Sets the default global version for a package in `$HOME/.tool-versions`. Accepts a specific version or 'latest' (optionally with a version prefix like 'latest:16').\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nasdf global <name> <version>\nasdf global <name> latest[:<version>]\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for Elvish Shell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in Elvish shell. It checks for the `ASDF_DATA_DIR` variable to determine the correct directory. This block should be added to `~/.config/elvish/rc.elv`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_11\n\nLANGUAGE: Elvish\nCODE:\n```\nvar asdf_data_dir = ~'/.asdf'\nif (and (has-env ASDF_DATA_DIR) (!=s $E:ASDF_DATA_DIR '')) {\n  set asdf_data_dir = $E:ASDF_DATA_DIR\n}\n\nif (not (has-value $paths $asdf_data_dir'/shims')) {\n  set paths = [$path $@paths]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Stable Version with ASDF\nDESCRIPTION: Installs the latest stable version of a tool using ASDF. Can be used without any version prefix or with a prefix to install the latest within a specific version range.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest\n# asdf install erlang latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest:<version>\n# asdf install erlang latest:17\n```\n\n----------------------------------------\n\nTITLE: Install asdf with Go\nDESCRIPTION: Installs asdf using `go install`.  Requires Go to be installed.  This is a quick method to get asdf set up.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/asdf-vm/asdf/cmd/asdf@v0.16.0\n```\n\n----------------------------------------\n\nTITLE: Installing Latest ASDF Version Shell\nDESCRIPTION: Install the latest stable version of a package. An optional version string prefix can be provided to install the latest stable version that matches the prefix.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install <name> latest[:<version>]\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of Node.js Using asdf\nDESCRIPTION: This command installs the latest available version of Node.js using asdf. The `latest` keyword resolves dynamically to the most recent version at execution time, facilitating easy upgrades.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nasdf install nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Install asdf using Zypper Shell\nDESCRIPTION: Installs the asdf version manager using the Zypper package manager, commonly found on openSUSE and SUSE Linux Enterprise. This method simplifies installation via a system package manager. Requires Zypper to be installed and configured.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nzypper install asdf\n```\n\n----------------------------------------\n\nTITLE: Using the system version of a tool instead of asdf-managed versions - Shell\nDESCRIPTION: Shows how to configure asdf to use the system-installed version of a tool by setting the version to 'system' via global, local, or shell commands. This lets users override asdf management to use the underlying system default.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf local <name> system\n# asdf local python system\n```\n\n----------------------------------------\n\nTITLE: Retrieving Debugging and System Info with asdf (Shell)\nDESCRIPTION: Provides system, shell, and asdf debugging information output via 'asdf info', useful for troubleshooting and system reports.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf info\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Bash profile (Git)\nDESCRIPTION: This command adds the asdf initialization script to the ~/.bashrc file so asdf is available in new terminal sessions. It assumes asdf was installed via git.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Showing Latest Stable Version with ASDF\nDESCRIPTION: Displays the latest stable version of a tool. Can optionally show the latest version that begins with a specific version string.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name>\n# asdf latest erlang\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name> <version>\n# asdf latest erlang 17\n```\n\n----------------------------------------\n\nTITLE: Uninstalling an asdf Package Version (Bash)\nDESCRIPTION: Removes a specific installed version of a package. Requires the package name and the exact version string to uninstall.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nasdf uninstall <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Tool Version with asdf (Shell)\nDESCRIPTION: These commands demonstrate how to install the latest stable version of a tool using asdf. The first command installs the latest Python version, while the second installs the latest Python 3.7 version. It relies on the 'asdf install' command and the 'latest' keyword.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install python latest\nasdf install python latest:3.7 # installs latest Python 3.7 version\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Bash profile (Homebrew macOS)\nDESCRIPTION: Adds asdf initialization script to the ~/.bash_profile using the path provided by `brew --prefix asdf`. This ensures asdf is available in new terminal sessions when installed via Homebrew.  macOS Catalina or newer if not using ZSH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"\\n. \\\"$(brew --prefix asdf)/libexec/asdf.sh\\\"\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Install asdf completions for Elvish Shell\nDESCRIPTION: Generates the asdf shell completion script for Elvish and appends it to the Elvish RC file. This command needs to be run manually once after installing asdf. Requires the `asdf` executable to be in the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nasdf completion elvish >> ~/.config/elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Stable Tool Version with asdf (Shell)\nDESCRIPTION: Installs the latest available stable version of a specified tool using `asdf install <name> latest`. Replace `<name>` with the tool name (e.g., `erlang`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest\n# asdf install erlang latest\n```\n\n----------------------------------------\n\nTITLE: Specifying Tool Versions in .tool-versions\nDESCRIPTION: This snippet demonstrates the format of the `.tool-versions` file, which specifies the versions of tools to be used in a directory and its subdirectories. It includes examples for specifying exact versions, tags, commits, and custom paths. It also shows how to specify a fallback versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nruby 2.5.3\nnodejs 10.15.0\n```\n\n----------------------------------------\n\nTITLE: Setting Global Tool Version with asdf\nDESCRIPTION: This command sets the global version of a tool (e.g., nodejs) using asdf. It modifies the `$HOME/.tool-versions` file.  The `latest` keyword instructs asdf to use the latest version available.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/guide/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf global nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Clone asdf Repository via Git\nDESCRIPTION: This command clones the asdf repository from GitHub to the ~/.asdf directory using git. It specifies the v0.15.0 branch. This is the recommended method for downloading asdf.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0\n```\n\n----------------------------------------\n\nTITLE: Setting Local asdf Package Version (Bash)\nDESCRIPTION: Sets the package version in the nearest `.tool-versions` file (searching upwards from the current directory). Creates the file if it doesn't exist. Accepts a specific version or 'latest' (optionally with a version prefix).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nasdf local <name> <version>\nasdf local <name> latest[:<version>]\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Node.js Version for all Directories\nDESCRIPTION: This snippet sets a global default Node.js version (`16.5.0`) by updating the `.tool-versions` associated with the user. The `-u` flag applies the version across all directories unless overridden locally.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nasdf set -u nodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Stable Version Matching Prefix with asdf (Shell)\nDESCRIPTION: Installs the latest stable version of a tool that starts with a specific prefix using `asdf install <name> latest:<version>`. Replace `<name>` with the tool name (e.g., `erlang`) and `<version>` with the prefix (e.g., `17`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest:<version>\n# asdf install erlang latest:17\n```\n\n----------------------------------------\n\nTITLE: Defining User Configuration in .asdfrc Plaintext\nDESCRIPTION: The .asdfrc file sets user-specific settings for asdf behavior such as legacy version file support, keeping downloads, plugin sync frequency, disabling plugin repo sync, and compilation concurrency. It is a key=value formatted plaintext file typically located at ${HOME}/.asdfrc or a path set by ASDF_CONFIG_FILE. This file enables customization of plugin synchronization, caching, and performance.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/configuration.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlegacy_version_file = no\nuse_release_candidates = no\nalways_keep_download = no\nplugin_repository_last_check_duration = 60\ndisable_plugin_short_name_repository = no\nconcurrency = auto\n```\n\n----------------------------------------\n\nTITLE: Viewing ASDF Environment Variables Shell\nDESCRIPTION: Displays environment variables related to asdf for a given command or utility via `asdf env <command> [util]`. This helps users understand the environment context used by asdf shims and tools. Requires an asdf installation with configured plugins and tools. Inputs are the target command and optional utility name, outputs environment-related information useful for debugging or configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf env <command> [util]\n```\n\n----------------------------------------\n\nTITLE: Configure asdf custom data directory for Nushell Nushell\nDESCRIPTION: Specifies a custom directory for asdf data in Nushell. This overrides the default `$HOME/.asdf` location. This line should be added to `~/.config/nushell/config.nu` before the shims path configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_22\n\nLANGUAGE: Nushell\nCODE:\n```\n$env.ASDF_DATA_DIR = \"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Listing installed versions of a tool\nDESCRIPTION: Shows versions of a tool currently installed via asdf, optionally filtered by a specific version pattern. Depend on asdf and plugin configurations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name>\n# Example: asdf list erlang\n```\n\n----------------------------------------\n\nTITLE: Setting asdf tool versions globally, locally, or for shell sessions - Shell\nDESCRIPTION: Illustrates how to set the active version of a tool using asdf globally (writes to $HOME/.tool-versions), locally (writes to .tool-versions in current directory), or for the current shell session only (environment variables). Accepts multiple versions or the special 'latest[:version]' syntax. This allows flexible version control per context.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf global <name> <version> [<version>...]\nasdf shell <name> <version> [<version>...]\nasdf local <name> <version> [<version>...]\n# asdf global elixir 1.2.4\n\nasdf global <name> latest[:<version>]\nasdf local <name> latest[:<version>]\n# asdf global elixir latest\n```\n\n----------------------------------------\n\nTITLE: Listing All Plugin Shortnames in asdf\nDESCRIPTION: This command retrieves all shortnames for plugins supported by the plugin repository, which helps in identifying available plugins for installation or update.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list all\n```\n\n----------------------------------------\n\nTITLE: Configuring POSIX Shell with Homebrew\nDESCRIPTION: This snippet adds commands to ~/.profile to set ASDF_DIR from Homebrew prefix and source asdf.sh for POSIX shells on systems using Homebrew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\necho -e \"\\nexport ASDF_DIR=\\\"$(brew --prefix asdf)/libexec/asdf.sh\\\"\" >> ~/.profile\\necho -e \"\\n. \\\"$(brew --prefix asdf)/libexec/asdf.sh\\\"\" >> ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Filtering all available versions by pattern\nDESCRIPTION: Displays all remote versions that start with the given pattern, assisting in version discovery and updates, after querying plugin version data.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name> <version>\n# Example: asdf list all erlang 17\n```\n\n----------------------------------------\n\nTITLE: Basic .tool-versions File Example\nDESCRIPTION: Example of a .tool-versions file specifying versions for Ruby and Node.js. This file controls which tool versions are used in the directory where it's placed and its subdirectories.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruby 2.5.3\nnodejs 10.15.0\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Versions with ASDF\nDESCRIPTION: Shows all versions available for installation for a specific tool. Can optionally filter results to show only versions starting with a given string.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name>\n# asdf list all erlang\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name> <version>\n# asdf list all erlang 17\n```\n\n----------------------------------------\n\nTITLE: Setting Local Tool Version with asdf\nDESCRIPTION: This command sets the local version of a tool (e.g., nodejs) using asdf. It modifies the `$PWD/.tool-versions` file (current working directory). The `latest` keyword instructs asdf to use the latest available version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/guide/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf local nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of .tool-versions File\nDESCRIPTION: This snippet shows the format of the `.tool-versions` file, which contains the tool name and version, used by asdf to determine which version of a tool to use. The command or configuration writes the specified tool version into this file for environment management.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$HOME/.tool-versions\nnodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Installing asdf Packages (Bash)\nDESCRIPTION: Installs package versions. Can install all versions from the `.tool-versions` file, a single tool's version from `.tool-versions`, a specific version number, or the latest stable version (optionally matching a prefix like 'latest:16').\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nasdf install\nasdf install <name>\nasdf install <name> <version>\nasdf install <name> latest[:<version>]\n```\n\n----------------------------------------\n\nTITLE: Installing asdf Plugin for Node.js via Shell\nDESCRIPTION: This command installs the `nodejs` plugin for asdf from its GitHub repository. It requires that the asdf tool is already installed and configured. The plugin enables managing Node.js versions through asdf.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Node.js Version\nDESCRIPTION: This command installs the latest available version of Node.js using asdf. It requires the asdf-nodejs plugin to be installed. The command downloads and installs the newest Node.js release. The expected output is the installation of the latest Node.js version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nasdf install nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Listing all available versions of a tool with asdf - Shell\nDESCRIPTION: Shows how to list all remotely available versions of a given tool supported by asdf, optionally filtered by a version prefix. This helps users identify which versions can be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name>\n# asdf list all erlang\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name> <version>\n# asdf list all erlang 17\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (ZSH)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in .zshrc. This is a necessary step for asdf to manage tool versions. The shims directory is located under the ASDF_DATA_DIR, which defaults to $HOME/.asdf, if not set explicitly.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed ASDF Plugins\nDESCRIPTION: This command lists all currently installed ASDF plugins. It provides an overview of the tools managed by ASDF.  No parameters are required.  The output displays the names of the installed plugins.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list\n# asdf plugin list\n# java\n# nodejs\n```\n\n----------------------------------------\n\nTITLE: Listing Installed asdf Plugins\nDESCRIPTION: Displays a list of all plugins currently installed in the asdf environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list\n# asdf plugin list\n# java\n# nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing latest stable version of a tool with asdf\nDESCRIPTION: Uses 'latest' keyword in asdf install to fetch and install the most recent stable version of a tool. Needs the tool's plugin and internet connectivity to retrieve available versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest\n# Example: asdf install erlang latest\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage Layout for asdf in Korean\nDESCRIPTION: YAML configuration for the asdf-vm homepage using VitePress. It defines the hero section with Korean text and multiple action buttons, along with six feature sections highlighting asdf's capabilities as a runtime version manager.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: asdf\n  text: 다중 런타임 버전 매니저\n  tagline: 한가지 툴로 모든 런타임 버전들을 관리하세요!\n  actions:\n    - theme: brand\n      text: 시작하기\n      link: /ko-kr/guide/getting-started\n    - theme: alt\n      text: asdf이란?\n      link: /ko-kr/guide/introduction\n    - theme: alt\n      text: GitHub에서 보기\n      link: https://github.com/asdf-vm/asdf\n\nfeatures:\n  - title: \"단 한가지 도구\"\n    details: \"각 프로젝트 런타임들을 단 한가지 CLI 툴과 커맨드 인터페이스로 관리.\"\n    icon: 🎉\n  - title: \"플러그인\"\n    details: \"런타임과 툴들의 거대한 생태계. 당신이 필요한 새로운 툴들을 더해주는 간단한 API!\"\n    icon: 🔌\n  - title: \"구버전 호환\"\n    details: \"원활한 마이그레이션을 위해 이미 존재하던 .nvmrc, .node-version, .ruby-version 등의 설정 파일들 지원!\"\n    icon: ⏮\n  - title: \"단 하나의 설정 파일\"\n    details: \"단 하나의 공유된 .tool-versions 파일로 모든 툴, 런타임, 그리고 버전들을 관리.\"\n    icon: 📄\n  - title: \"셸\"\n    details: \"Bash, ZSH, Fish & Elvish 자동완성 기능 지원.\"\n    icon: 🐚\n  - title: \"GitHub Actions\"\n    details: \"GitHub Action 설치 제공과 .tool-versions 파일을 CI/CD 워크플로우에서 활용.\"\n    icon: 🤖\n```\n\n----------------------------------------\n\nTITLE: Adding ASDF Plugin with Git URL\nDESCRIPTION: This command adds a new ASDF plugin using its Git URL. It enables ASDF to manage versions of a specific tool.  Requires the tool's Git repository URL. The `<name>` parameter specifies the plugin's identifier, and `<git-url>` is the Git repository URL of the plugin. The command adds the plugin, allowing you to install and manage versions of the associated tool. This is the recommended approach.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name> <git-url>\n# asdf plugin add elm https://github.com/vic/asdf-elm\n```\n\n----------------------------------------\n\nTITLE: Add asdf to ZSH config (Git)\nDESCRIPTION: Adds the asdf initialization script to the ~/.zshrc file, ensuring asdf is available in new ZSH shell sessions when installed via git.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Removing an asdf Plugin\nDESCRIPTION: Removes a specified plugin along with all tool versions installed by that plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nasdf plugin remove <name>\n# asdf plugin remove erlang\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for ZSH Shell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in ZSH. This allows the shell to find executables managed by asdf. This line should be added to the user's `~/.zshrc`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nexport PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Removing an ASDF Plugin\nDESCRIPTION: This command removes a specified ASDF plugin.  This will remove the plugin and all tools installed by that plugin. Requires the plugin's name as input.  The `<name>` parameter indicates the plugin to be removed. This also cleans up any associated tool versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin remove <name>\n# asdf plugin remove erlang\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Tool Version with asdf (Shell)\nDESCRIPTION: Installs a specific version of a tool using `asdf install`. Replace `<name>` with the tool name (e.g., `erlang`) and `<version>` with the desired version number (e.g., `17.3`). Also supports installing from source using `ref:` for branches, tags, or commits.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> <version>\n# asdf install erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Selecting the Current Tool Version with asdf (Shell)\nDESCRIPTION: Sets the current version(s) for a tool using `asdf global`, `asdf shell`, or `asdf local`. `global` writes to `$HOME/.tool-versions`, `shell` sets `ASDF_${LANG}_VERSION` for the current session, and `local` writes to `$PWD/.tool-versions`. Supports specific versions, multiple versions space-separated, or `latest[:<prefix>]`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nasdf global <name> <version> [<version>...]\nasdf shell <name> <version> [<version>...]\nasdf local <name> <version> [<version>...]\n# asdf global elixir 1.2.4\n\nasdf global <name> latest[:<version>]\nasdf local <name> latest[:<version>]\n# asdf global elixir latest\n```\n\n----------------------------------------\n\nTITLE: Listing Available Versions Matching Prefix with asdf (Shell)\nDESCRIPTION: Lists available versions of a tool that start with a specific prefix using `asdf list all <name> <version>`. Replace `<name>` with the tool name (e.g., `erlang`) and `<version>` with the prefix (e.g., `17`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name> <version>\n# asdf list all erlang 17\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (POSIX)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in .profile. This is a necessary step for asdf to manage tool versions. The shims directory is located under the ASDF_DATA_DIR, which defaults to $HOME/.asdf, if not set explicitly.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF_DIR Environment Variable\nDESCRIPTION: This snippet illustrates how to configure the ASDF_DIR environment variable. This variable specifies the location of the asdf core scripts. The path must be absolute.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nexport ASDF_DIR=/home/john_doe/.config/asdf\n```\n\n----------------------------------------\n\nTITLE: Listing Shim Versions with asdf\nDESCRIPTION: The `asdf shimversions` command lists the plugins and versions providing shims for a given command.  This helps in understanding which tool versions are available for a particular command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf shimversions <command>\n```\n\n----------------------------------------\n\nTITLE: Finding ASDF Command Path Shell\nDESCRIPTION: Display the absolute path to the executable file for a given command, as resolved by ASDF's shims for the current environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nasdf which <command>\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for Bash Shell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in Bash. This allows the shell to find executables managed by asdf. This line should be added to the user's `~/.bash_profile`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nexport PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Core to source asdf\nDESCRIPTION: This snippet demonstrates how to source the asdf PowerShell script in your PowerShell profile to enable asdf command-line integration and version management within PowerShell Core.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins - asdf\nDESCRIPTION: Lists all the plugins currently installed in asdf.  The output shows the name of each plugin installed. Using the `--urls` flag also displays the Git URL of each plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list\n# asdf plugin list\n# java\n# nodejs\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF Tool Version Shell\nDESCRIPTION: Set a tool version in a `.tool-versions` file in the current directory or a parent. Use `-u` to unset a version or `-p` to specify the path to the file.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nasdf set [-u] [-p] <name> <versions...>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Version with ASDF\nDESCRIPTION: Removes a specific version of a tool that was previously installed with ASDF.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nasdf uninstall <name> <version>\n# asdf uninstall erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Setting Tool Version via Environment Variable\nDESCRIPTION: Sets a tool version using an environment variable, which overrides .tool-versions settings. This approach only affects the current shell session or command execution.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport ASDF_ELIXIR_VERSION=1.18.1\n```\n\nLANGUAGE: shell\nCODE:\n```\nASDF_ELIXIR_VERSION=1.4.0 mix test\n```\n\n----------------------------------------\n\nTITLE: Configure asdf completions source for ZSH Shell\nDESCRIPTION: Configures ZSH to load the asdf completion script by adding its directory to `fpath` and initializing completions. This block should be added to the user's `~/.zshrc` after any framework sourcing. Requires the completion files to have been generated.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_18\n\nLANGUAGE: ZSH\nCODE:\n```\n# append completions to fpath\nfpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)\n# initialise completions with ZSH's compinit\nautoload -Uz compinit && compinit\n```\n\n----------------------------------------\n\nTITLE: Configure asdf Bash Completions (Git macOS)\nDESCRIPTION: This command adds the asdf completion script to the ~/.bash_profile file to enable tab completion for asdf commands. It depends on asdf being installed via git. Used in macOS Catalina or newer if not using ZSH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/completions/asdf.bash\"\n```\n\n----------------------------------------\n\nTITLE: Showing All Latest ASDF Versions Shell\nDESCRIPTION: Show the latest stable version for all packages that are currently configured or installed. Indicates whether each package is installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nasdf latest --all\n```\n\n----------------------------------------\n\nTITLE: Viewing current active versions\nDESCRIPTION: Displays the current active versions for all tools or a specific tool, indicating which versions are in use in the current context and their configuration files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nasdf current\n# Example output showing active versions\n\nasdf current <name>\n# Example: asdf current erlang\n```\n\n----------------------------------------\n\nTITLE: Install asdf plugin\nDESCRIPTION: Adds a plugin to asdf. This example adds the nodejs plugin. Requires a valid URL for the plugin repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Using asdf exec to run commands with shims\nDESCRIPTION: Runs executables via asdf's shim system, which delegates to the appropriate version based on current configuration, ensuring environment consistency.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n# returns path to main executable in current version\nsource $(asdf which ${PLUGIN})/../script.sh\n\n# returns path to the package installation directory\nsource $(asdf where ${PLUGIN})/bin/script.sh\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Bash profile (Homebrew)\nDESCRIPTION: Adds asdf initialization script to the ~/.bashrc using the path provided by `brew --prefix asdf`.  This ensures asdf is available in new terminal sessions when installed via Homebrew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"\\n. \\\"$(brew --prefix asdf)/libexec/asdf.sh\\\"\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Listing ASDF Plugins Shell\nDESCRIPTION: List all currently installed plugins. Optional flags can be used to also display the Git URLs (`--urls`) and Git references (`--refs`) for the installed plugins.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin list [--urls] [--refs]\n```\n\n----------------------------------------\n\nTITLE: Checking Current Tool Versions with asdf (Shell)\nDESCRIPTION: Displays the currently active versions for all tools managed by `asdf` using `asdf current`, or for a specific tool using `asdf current <name>`. The output includes the version number and the configuration file (`.tool-versions`) that defines it.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nasdf current\n# asdf current\n# erlang 17.3 (set by /Users/kim/.tool-versions)\n# nodejs 6.11.5 (set by /Users/kim/cool-node-project/.tool-versions)\n\nasdf current <name>\n# asdf current erlang\n# 17.3 (set by /Users/kim/.tool-versions)\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for PowerShell Core PowerShell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in PowerShell Core. It dynamically determines the shims path based on the `ASDF_DATA_DIR` variable. This block should be added to `~/.config/powershell/profile.ps1`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Determine the location of the shims directory\nif ($null -eq $ASDF_DATA_DIR -or $ASDF_DATA_DIR -eq '') {\n  $_asdf_shims = \"${env:HOME}/.asdf/shims\"\n}\nelse {\n  $_asdf_shims = \"$ASDF_DATA_DIR/shims\"\n}\n\n# Then add it to path\n$env:PATH = \"${_asdf_shims}:${env:PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Nushell completion setup\nDESCRIPTION: Configures command completion for Nushell. This involves creating completions directory, generating completion script and adding a line to the config.nu file. This is an optional setup for easier asdf usage.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n# If you've not customized the asdf data directory:\n$ mkdir $\"($env.HOME)/.asdf/completions\"\n$ asdf completion nushell | save $\"($env.HOME)/.asdf/completions/nushell.nu\"\n\n# If you have customized the data directory by setting ASDF_DATA_DIR:\n$ mkdir $\"($env.ASDF_DATA_DIR)/completions\"\n$ asdf completion nushell | save $\"($env.ASDF_DATA_DIR)/completions/nushell.nu\"\n\n# add the completion file\nlet asdf_data_dir = (\n  if ( $env | get --ignore-errors ASDF_DATA_DIR | is-empty ) {\n    $env.HOME | path join '.asdf'\n  } else {\n    $env.ASDF_DATA_DIR\n  }\n)\n. \"$asdf_data_dir/completions/nushell.nu\"\n```\n\n----------------------------------------\n\nTITLE: Showing the Latest Stable Tool Version with asdf (Shell)\nDESCRIPTION: Displays the latest available stable version for a specific tool using `asdf latest <name>`. Replace `<name>` with the tool name (e.g., `erlang`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name>\n# asdf latest erlang\n```\n\n----------------------------------------\n\nTITLE: Configure asdf Bash Completions (Homebrew macOS)\nDESCRIPTION: Adds asdf completion script to the ~/.bash_profile using the path provided by `brew --prefix asdf`. This enables tab completion for asdf commands when installed via Homebrew. macOS Catalina or newer if not using ZSH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"\\n. \\\"$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\\\"\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Versions with ASDF\nDESCRIPTION: Displays the currently active versions of all tools or a specific tool, along with the .tool-versions file location that defines each version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nasdf current\n# asdf current\n# erlang          17.3          /Users/kim/.tool-versions\n# nodejs          6.11.5        /Users/kim/cool-node-project/.tool-versions\n\nasdf current <name>\n# asdf current erlang\n# erlang          17.3          /Users/kim/.tool-versions\n```\n\n----------------------------------------\n\nTITLE: Displaying currently active asdf tool versions - Shell\nDESCRIPTION: Commands to show the versions currently active for tools managed by asdf, including the source files defining those versions. Can target all tools or a specific tool. Useful for verifying which versions are effectively in use.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nasdf current\n# asdf current\n# erlang 17.3 (set by /Users/kim/.tool-versions)\n# nodejs 6.11.5 (set by /Users/kim/cool-node-project/.tool-versions)\n\nasdf current <name>\n# asdf current erlang\n# 17.3 (set by /Users/kim/.tool-versions)\n```\n\n----------------------------------------\n\nTITLE: Adding plugin with asdf CLI\nDESCRIPTION: The snippet illustrates the recommended method for adding a plugin in asdf by using the plugin's git URL. If no `git_url` is specified, asdf will utilize the Shortname index repository to determine the correct URL.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# asdf plugin add <name> <git_url>\n  asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Cloning asdf Repository (Shell)\nDESCRIPTION: Provides two commands to clone the asdf repository for development: one for cloning a personal fork and one for cloning the main asdf repository directly. This is the initial step to obtain the source code. Requires Git to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Using asdf to Set Version in Current Directory\nDESCRIPTION: This command sets a tool version specifically for the current working directory by updating the `.tool-versions` file located there. It ensures that the specified version of the tool is used only within that directory and its subdirectories.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nasdf set nodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Installing latest version matching a pattern\nDESCRIPTION: Installs the latest version that starts with the specified pattern using 'latest:<version>'. Useful for approximate versioning and updates, relying on available version data from the plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest:<version>\n# Example: asdf install erlang latest:17\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Elvish config (Git)\nDESCRIPTION: Configures asdf for Elvish shell by creating the lib directory, creating symlink for asdf.elv, and adding the necessary lines to rc.elv. Assumes git installation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/elvish/lib; ln -s ~/.asdf/asdf.elv ~/.config/elvish/lib/asdf.elv\necho \"\\n\"'use asdf _asdf; var asdf~ = $_asdf:asdf~' >> ~/.config/elvish/rc.elv\necho \"\\n\"'set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~' >> ~/.config/elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Bash profile (Pacman)\nDESCRIPTION: Adds the asdf initialization script to ~/.bashrc when installed via Pacman. This makes `asdf` available in new terminal sessions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n. /opt/asdf-vm/asdf.sh\n```\n\n----------------------------------------\n\nTITLE: Install asdf using Homebrew\nDESCRIPTION: Installs asdf-vm using the Homebrew package manager. This is a recommended installation method for macOS users.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install asdf\n```\n\n----------------------------------------\n\nTITLE: Installing asdf via Homebrew (macOS/Linux)\nDESCRIPTION: Installs asdf using Homebrew package manager, setting up the necessary plugin files to enable shell configurations. Ensures ease of installation through a popular package manager.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -e \"\\n. \\\"$(brew --prefix asdf)/libexec/asdf.sh\\\"\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Versions Matching Prefix with asdf (Shell)\nDESCRIPTION: Lists installed versions of a tool that start with a specific prefix using `asdf list <name> <version>`. Replace `<name>` with the tool name (e.g., `erlang`) and `<version>` with the prefix (e.g., `17`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name> <version>\n# asdf list erlang 17\n```\n\n----------------------------------------\n\nTITLE: Configure asdf Fish Completions (Git)\nDESCRIPTION: Creates the completions directory and symlinks the asdf completions file to the Fish completions directory, enabling tab completion. Requires asdf to be installed via git.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/fish/completions; and ln -s ~/.asdf/completions/asdf.fish ~/.config/fish/completions\n```\n\n----------------------------------------\n\nTITLE: Locating Tool Executable/Installation Paths with asdf (Shell)\nDESCRIPTION: Demonstrates using `asdf which ${PLUGIN}` to find the path to the currently active tool executable managed by shims, and `asdf where ${PLUGIN} $(asdf current ${PLUGIN})` to find the installation directory of the current version. This is useful for sourcing scripts directly from the installation, bypassing shims. Replace `${PLUGIN}` with the tool name.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# retorna o 'path' da versão atual em execução\nsource $(asdf which ${PLUGIN})/../script.sh\n\n# retorna o 'path' do pacote instalado no diretório\nsource $(asdf where ${PLUGIN} $(asdf current ${PLUGIN}))/bin/script.sh\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Plugin - asdf\nDESCRIPTION: Updates a specific installed plugin to the latest commit on the default branch of its origin repository.  `<name>` specifies the plugin to update, such as erlang in the example.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update <name>\n# asdf plugin update erlang\n```\n\n----------------------------------------\n\nTITLE: Recreating Tool Shims with asdf\nDESCRIPTION: The `asdf reshim` command recreates the shims for the current version of a package. It's useful when executables are installed outside the plugin lifecycle, such as globally installed npm packages like yarn, making them available within the asdf environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf reshim <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Listing asdf Package Versions (Bash)\nDESCRIPTION: Lists installed versions of a package, optionally filtering by a version string. Can also list all installable versions known to the plugin, optionally filtered.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nasdf list <name> [version]\nasdf list all <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Version File Support for Plugins\nDESCRIPTION: This configuration adds support for legacy version files (e.g., `.node-version`, `.ruby-version`) used by other version managers, enabling asdf to recognize and migrate these files. It involves editing the `$HOME/.asdfrc` configuration file to enable support by setting 'legacy_version_file = yes'.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nlegacy_version_file = yes\n```\n\n----------------------------------------\n\nTITLE: Adding ASDF Plugin Shell\nDESCRIPTION: Add a plugin from the official asdf-plugins repository by name, or add a custom plugin by specifying a Git repository URL along with the name.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin add <name> [<git-url>]\n```\n\n----------------------------------------\n\nTITLE: Listing dependencies for a tool in asdf (bin/help.deps)\nDESCRIPTION: This script outputs a list of dependencies required by the tool for the current environment, one per line. It depends on 'bin/help.overview' being available, and its output helps in preparing the environment or providing setup instructions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.deps\n```\n\n----------------------------------------\n\nTITLE: Listing Installed asdf Plugins with URLs\nDESCRIPTION: Displays a list of all installed plugins along with their source repository URLs.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list --urls\n# asdf plugin list\n# java            https://github.com/halcyon/asdf-java.git\n# nodejs          https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Initializing asdf-vm in ZSH with compinit\nDESCRIPTION: This snippet demonstrates how to initialize completions for asdf-vm in ZSH by autoloading and running compinit. It emphasizes placing compinit below sourcing of asdf.sh to ensure proper setup.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nautoload -Uz compinit && compinit\n```\n\n----------------------------------------\n\nTITLE: Listing All Plugins in Short-name Repository - asdf\nDESCRIPTION: Lists all plugins available in the short-name repository. Requires the short-name repository to be synchronized.  This command provides a comprehensive list of plugins that can be added using their short names.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list all\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (PowerShell)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in PowerShell's profile.ps1 file.  This is a necessary step for asdf to manage tool versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# Determine the location of the shims directory\nif ($null -eq $ASDF_DATA_DIR -or $ASDF_DATA_DIR -eq '') {\n  $_asdf_shims = \"${env:HOME}/.asdf/shims\"\n}\nelse {\n  $_asdf_shims = \"$ASDF_DATA_DIR/shims\"\n}\n\n# Then add it to path\n$env:PATH = \"${_asdf_shims}:${env:PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Printing Installed asdf Version (Bash)\nDESCRIPTION: Displays the version number of the currently installed asdf core application.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\nasdf version\n```\n\n----------------------------------------\n\nTITLE: Displaying plugin and tool configuration requirements (bin/help.config)\nDESCRIPTION: Outputs necessary configuration details, such as environment variables or flags needed for installation or compilation of the tool. It depends on 'bin/help.overview' and adapts its output based on environment variables.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.config\n```\n\n----------------------------------------\n\nTITLE: Sample .asdfrc Configuration\nDESCRIPTION: Example of an .asdfrc file that enables legacy version file support. This file should be placed in the home directory to customize asdf's behavior.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/configuration.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlegacy_version_file = yes\n```\n\n----------------------------------------\n\nTITLE: Listing All Plugins from Abbreviation Repo\nDESCRIPTION: This command lists all available plugins within the abbreviation repository.  This allows you to see available plugins.  No parameters are necessary. This will provide a list of all plugins available via abbreviation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list all\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Versions with ASDF\nDESCRIPTION: Displays all installed versions of a specific tool. Can optionally filter results to show only versions starting with a given string.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name>\n# asdf list erlang\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name> <version>\n# asdf list erlang 17\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF_DEFAULT_TOOL_VERSIONS_FILENAME Environment Variable\nDESCRIPTION: This snippet shows how to set the ASDF_DEFAULT_TOOL_VERSIONS_FILENAME environment variable. This allows you to change the file name that stores the tool name and version information. This variable is typically only changed to ignore the default .tool-versions file.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nexport ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=tool_versions\n```\n\n----------------------------------------\n\nTITLE: Adding ASDF Plugin with Abbreviation\nDESCRIPTION: This command adds an ASDF plugin using a short name from a plugin repository. It retrieves the plugin details from a remote repository. Requires a valid plugin name recognized by the ASDF system. The `<name>` parameter specifies the name or abbreviation of the plugin.  The command then downloads the plugin information.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name>\n# asdf plugin add erlang\n```\n\n----------------------------------------\n\nTITLE: Adding an asdf Plugin with Repository Shortname\nDESCRIPTION: Adds a plugin to asdf using only the plugin's shortname, which will resolve to the official repository URL.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name>\n# asdf plugin add erlang\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin with Short Name - asdf\nDESCRIPTION: Adds a plugin to asdf using its short name from the plugins repository.  The `<name>` argument refers to the short name listed in the asdf-plugins repository. Requires the short-name repository to be synchronized.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name>\n# asdf plugin add erlang\n```\n\n----------------------------------------\n\nTITLE: Listing all available versions for a tool\nDESCRIPTION: Retrieves all known versions of a tool from the plugin, optionally filtered by a pattern. Utilizes remote data and requires network connection.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name>\n# Example: asdf list all erlang\n```\n\n----------------------------------------\n\nTITLE: Installing Git with Zypper (Bash)\nDESCRIPTION: This snippet demonstrates the installation of git using the Zypper package manager, predominantly used on openSUSE.  It necessitates administrative rights for execution, possibly requiring `sudo`. This command is responsible for installing the `git` package. The output confirms `git` and related components are successfully installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/parts/install-dependencies.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nzypper install git\n```\n\n----------------------------------------\n\nTITLE: Executing pre-plugin-remove Hook\nDESCRIPTION: This snippet demonstrates the execution of the `pre-plugin-remove` hook. This hook is called before a plugin is removed using the `asdf plugin remove <tool>` command. It receives no parameters and the `ASDF_PLUGIN_PATH` environment variable is available within the script to identify the plugin's install location.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/pre-plugin-remove\"\n```\n\n----------------------------------------\n\nTITLE: Displaying ASDF Info Shell\nDESCRIPTION: Print detailed debug information about the user's operating system, shell environment, and the ASDF installation itself, useful for troubleshooting.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\nasdf info\n```\n\n----------------------------------------\n\nTITLE: Showing latest stable version of a tool with asdf - Shell\nDESCRIPTION: Commands to display the latest stable version available for a given tool, optionally filtered by a version prefix. Useful to identify the most recent supported stable release for installation or upgrading.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name>\n# asdf latest erlang\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name> <version>\n# asdf latest erlang 17\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (ZSH & Homebrew)\nDESCRIPTION: This section covers the uninstalling of asdf using the ZSH shell and Homebrew, encompassing removing configurations from `~/.zshrc` and uninstalling using brew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n. $(brew --prefix asdf)/libexec/asdf.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force && brew autoremove\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Executing ASDF Command Shell\nDESCRIPTION: Execute a specified command using the ASDF shims, which ensures the command runs with the tool versions configured for the current environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nasdf exec <command> [args...]\n```\n\n----------------------------------------\n\nTITLE: Configure asdf completions source for Elvish Shell\nDESCRIPTION: Adds the necessary Elvish configuration to activate the asdf command completer after the completion script has been generated and sourced. This line should be added to `~/.config/elvish/rc.elv` after sourcing the completion script.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\necho \"\\n\"'set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~' >> ~/.config/elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Adding an asdf Plugin (Bash)\nDESCRIPTION: Adds a plugin either from the official asdf plugin repository by name or from a specified Git URL. Requires the plugin name and optionally the Git repository URL if not using the central repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nasdf plugin add <name> [<git-url>]\n```\n\n----------------------------------------\n\nTITLE: Setting Shell-Specific asdf Package Version (Bash)\nDESCRIPTION: Sets an environment variable (`ASDF_${LANG}_VERSION`, where LANG is the uppercased tool name) to activate a specific package version only for the current shell session. This overrides local and global settings.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nasdf shell <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a tool version managed by asdf - Shell\nDESCRIPTION: Command to remove a specific installed version of a tool managed by asdf. Requires specifying both the tool name and version to uninstall, cleaning up unused versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nasdf uninstall <name> <version>\n# asdf uninstall erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server - Shell\nDESCRIPTION: This command starts the local development server for the Vuepress documentation website using npm. It allows developers to preview changes locally.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Debugging Bats Tests with Custom Output Streams - Shell\nDESCRIPTION: Provides example shell code inside a Bats .bats test file to show one output line sent to standard output and another printed only when executing Bats with the -t flag. This technique leverages Bats' file descriptor 3 for diagnostics. Requires bats-core; outputs diagnostics during test runs with enhanced verbosity.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# test/some_tests.bats\n\nprintf \"%s\\n\" \"Will not be printed during bats test/some_tests.bats\"\nprintf \"%s\\n\" \"Will be printed during bats -t test/some_tests.bats\" >&3\n\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variables with asdf\nDESCRIPTION: The `asdf env` command likely is used to set up the environment or retrieve environment variables for a specific tool or package. The exact behavior requires further expansion and examples, as the description is currently limited.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf env <command> [util]\n```\n\n----------------------------------------\n\nTITLE: Adding an asdf Plugin with Git URL\nDESCRIPTION: Adds a plugin to asdf by specifying both the plugin name and its Git repository URL.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name> <git-url>\n# asdf plugin add elm https://github.com/vic/asdf-elm\n```\n\n----------------------------------------\n\nTITLE: Listing installed asdf tool versions - Shell\nDESCRIPTION: Commands to list versions of a given tool installed on the system with asdf, optionally filtered to versions starting with a version prefix. Useful for checking what versions are currently installed and managed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name>\n# asdf list erlang\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name> <version>\n# asdf list erlang 17\n```\n\n----------------------------------------\n\nTITLE: Setting Tool Versions with ASDF\nDESCRIPTION: Sets the version of a tool in a .tool-versions file. Can target the current directory, home directory, or existing parent directory file. Also supports setting to the latest stable version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf set [flags] <name> <version> [<version>...]\n# asdf set elixir 1.2.4 # set in current dir\n# asdf set -u elixir 1.2.4 # set in .tool-versions file in home directory\n# asdf set -p elixir 1.2.4 # set in existing .tool-versions file in a parent dir\n\nasdf set <name> latest[:<version>]\n# asdf set elixir latest\n```\n\n----------------------------------------\n\nTITLE: Filtering Versions with asdf list-all (Shell)\nDESCRIPTION: This command demonstrates how to filter versions returned by `asdf list-all` to list only available Python 3.7 versions. It relies on the `asdf list-all` command and a version specifier.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nasdf list-all python 3.7 # lists available Python 3.7 versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Shell for asdf\nDESCRIPTION: Adds sourcing commands to the user's Bash configuration files (.bashrc or .bash_profile) depending on the OS, enabling asdf in Bash shells. Also configures command completion if needed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Tool Versions with asdf (Shell)\nDESCRIPTION: Lists all installed versions for a specific tool using `asdf list <name>`. Replace `<name>` with the tool name (e.g., `erlang`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name>\n# asdf list erlang\n```\n\n----------------------------------------\n\nTITLE: Listing All ASDF Plugins Shell\nDESCRIPTION: List all available plugins that are registered in the official asdf-plugins repository. This command also displays the URLs for each plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin list all\n```\n\n----------------------------------------\n\nTITLE: Configure asdf Bash Completions (Git)\nDESCRIPTION: This command adds the asdf completion script to the ~/.bashrc file to enable tab completion for asdf commands. It depends on asdf being installed via git.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/completions/asdf.bash\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Latest Tool Version with asdf (Shell)\nDESCRIPTION: These commands demonstrate how to display the latest stable version of a tool using the `asdf latest` command. The first command shows the latest Python version, while the second shows the latest Python 3.7 version. The tool must be managed by asdf.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nasdf latest python\nasdf latest python 3.7 # displays latest Python 3.7 version\n```\n\n----------------------------------------\n\nTITLE: Elvish shell completion setup\nDESCRIPTION: Configures command completion for Elvish shell.  This involves running commands to generate completion scripts and configure the shell to use them. This is an optional, but recommended, setup to make using asdf easier.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ asdf completion elvish >> ~/.config/elvish/rc.elv\n$ echo \"\\n\"'set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~' >> ~/.config/elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: .asdfrc Configuration Example\nDESCRIPTION: This snippet presents the default configuration options available within the `.asdfrc` file.  It defines several configurable values related to legacy version files, download behavior, plugin repository synchronization, plugin short name repositories, and concurrency.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlegacy_version_file = no\nuse_release_candidates = no\nalways_keep_download = no\nplugin_repository_last_check_duration = 60\ndisable_plugin_short_name_repository = no\nconcurrency = auto\n```\n\n----------------------------------------\n\nTITLE: Updating All ASDF Plugins\nDESCRIPTION: This command updates all installed ASDF plugins to their latest versions. It fetches the newest commits from plugin repositories. Requires no parameters.  It updates all installed plugins to their latest versions from the remote git repositories, assuming the default branch.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update --all\n```\n\n----------------------------------------\n\nTITLE: Updating All ASDF Plugins Shell\nDESCRIPTION: Update all installed plugins to the latest commit available on their respective default branches.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin update --all\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Tool Versions with asdf (Shell)\nDESCRIPTION: Lists all available (installable) versions for a specific tool using `asdf list all <name>`. Replace `<name>` with the tool name (e.g., `erlang`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf list all <name>\n# asdf list all erlang\n```\n\n----------------------------------------\n\nTITLE: Executing All Bats Tests (Shell)\nDESCRIPTION: Runs the main test script `./scripts/test.bash`, which is responsible for executing all Bats tests within the project's test suite. This is the primary command used to verify the correctness of the asdf core functionality. Requires Bats and necessary test dependencies to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/test.bash\n```\n\n----------------------------------------\n\nTITLE: Updating All asdf Plugins\nDESCRIPTION: Updates all installed plugins to their latest versions from their respective Git repositories.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update --all\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Dependencies via asdf Plugins - Shell\nDESCRIPTION: Provides shell commands to add plugins for development tools (bats, shellcheck, shfmt) using asdf. Requires that asdf is installed and available in the user's PATH. Adding these plugins allows asdf to manage the required versions specified in .tool-versions for development and testing.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add bats https://github.com/timgluz/asdf-bats.git\nasdf plugin add shellcheck https://github.com/luizm/asdf-shellcheck.git\nasdf plugin add shfmt https://github.com/luizm/asdf-shfmt.git\n\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Bash profile (Git macOS)\nDESCRIPTION: This command adds the asdf initialization script to the ~/.bash_profile file so asdf is available in new terminal sessions. This is for macOS systems using the git install method and Bash. Used in macOS Catalina or newer if not using ZSH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing git/coreutils via Linux/macOS Package Managers (Shell)\nDESCRIPTION: Provides shell commands to install `git` (and `coreutils` on macOS), a prerequisite for asdf, using common package managers like `apt`, `dnf`, `pacman`, `zypper`, `brew`, and `spack` on Linux and macOS. Execution may require `sudo` depending on system configuration and user permissions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/parts/install-dependencies.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\napt install git\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndnf install git\n```\n\nLANGUAGE: Shell\nCODE:\n```\npacman -S git\n```\n\nLANGUAGE: Shell\nCODE:\n```\nzypper install git\n```\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install coreutils git\n```\n\nLANGUAGE: Shell\nCODE:\n```\nspack install coreutils git\n```\n\n----------------------------------------\n\nTITLE: Showing Current ASDF Version Shell\nDESCRIPTION: Display the currently active version for a specific package (tool) in the current environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nasdf current <name>\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific asdf Plugin\nDESCRIPTION: Updates a single specified plugin to its latest version from its Git repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update <name>\n# asdf plugin update erlang\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (Elvish)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in Elvish shell's rc.elv file.  This is a necessary step for asdf to manage tool versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nvar asdf_data_dir = ~'/.asdf'\nif (and (has-env ASDF_DATA_DIR) (!=s $E:ASDF_DATA_DIR '')) {\n  set asdf_data_dir = $E:ASDF_DATA_DIR\n}\n\nif (not (has-value $paths $asdf_data_dir'/shims')) {\n  set paths = [$path $@paths]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing legacy files for version info (bin/parse-legacy-file)\nDESCRIPTION: Extracts version numbers from given legacy files such as 'package.json' or 'go.mod'. It guarantees repeatability and correctness of version detection across identical files, regardless of their validity or completeness.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/parse-legacy-file\" \"$file_path\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins with URLs - asdf\nDESCRIPTION: Lists all the plugins currently installed in asdf, along with their Git URLs. This allows you to verify the source of each plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list --urls\n# asdf plugin list\n# java            https://github.com/halcyon/asdf-java.git\n# nodejs          https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Getting asdf Debug Info\nDESCRIPTION: The `asdf info` command is a helper command to provide information about the OS, Shell, and asdf debug information.  This is primarily used when filing a bug report to help diagnose issues.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf info\n```\n\n----------------------------------------\n\nTITLE: Install nodejs latest version\nDESCRIPTION: Installs the latest available version of Node.js using asdf. This requires the nodejs plugin to be installed beforehand.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nasdf install nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Plugin Hook Example for Custom Execution in Shell Syntax\nDESCRIPTION: This snippet shows an example of defining a plugin hook command in the .asdfrc or environment configuration that executes custom user code before a plugin command execution. In this case, the pre_foo_bar hook echoes the command arguments before running the foo plugin's bar command. It supports variables and patterns for precise execution timing based on plugin lifecycle events or specific commands.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/configuration.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre_foo_bar = echo Executing with args: $@\n```\n\n----------------------------------------\n\nTITLE: Filtering installed versions by pattern\nDESCRIPTION: Displays installed versions matching the provided pattern, enabling selective overview of specific version groups. Requires prior installation of relevant versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf list <name> <version>\n# Example: asdf list erlang 17\n```\n\n----------------------------------------\n\nTITLE: Listing asdf Plugins (Bash)\nDESCRIPTION: Lists installed plugins, optionally showing their Git URLs and refs using flags. Can also list all plugins available in the central asdf-plugins repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nasdf plugin list [--urls] [--refs]\nasdf plugin list all\n```\n\n----------------------------------------\n\nTITLE: Listing relevant links for a plugin in asdf (bin/help.links)\nDESCRIPTION: Outputs links related to the plugin or tool, such as repository URLs or documentation. The format is either '<title>: <link>' or just '<link>' per line, aiding users in navigation or referencing.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.links\n```\n\n----------------------------------------\n\nTITLE: Removing an asdf Plugin (Bash)\nDESCRIPTION: Removes a specified plugin and all of its installed package versions. Requires the name of the plugin to be removed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nasdf plugin remove <name>\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin - asdf\nDESCRIPTION: Removes a plugin from asdf and uninstalls all versions of the tool managed by that plugin. `<name>` specifies the plugin to remove, such as erlang in the example. This also removes any tool versions installed via that plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nasdf plugin remove <name>\n# asdf plugin remove erlang\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a specific version of a tool\nDESCRIPTION: Removes an installed version of a tool from asdf, cleaning up associated files. Requires prior installation of the version to be uninstalled.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nasdf uninstall <name> <version>\n# Example: asdf uninstall erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Adding asdf Node.js Plugin\nDESCRIPTION: This command adds the asdf-nodejs plugin to asdf, enabling the management of Node.js versions. It downloads the plugin from the specified GitHub repository. Prerequisites include having asdf installed and configured. The output is the plugin being added to the asdf environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Configure asdf ZSH Completions (Git)\nDESCRIPTION: Configures completions by adding the asdf completion directory to the fpath variable in .zshrc.  This enables tab completion for asdf commands.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# append completions to fpath\nfpath=(${ASDF_DIR}/completions $fpath)\n```\n\n----------------------------------------\n\nTITLE: インストール npm 依存関係 (shell)\nDESCRIPTION: プロジェクトのNode.js依存関係をインストールします。`package.json`ファイルが存在し、npmがインストールされている必要があります。依存関係は、`package.json`に定義されている必要があります。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: API Rate Limiting Example\nDESCRIPTION: This snippet demonstrates how to implement API rate limiting when querying an external API. It checks for the presence of the `GITHUB_API_TOKEN` environment variable. If present, it uses the token in the `Authorization` header for the `curl` request. This is a technique to avoid rate limiting when making API requests during the automated test.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncmd=\"curl --silent\"\n  if [ -n \"$GITHUB_API_TOKEN\" ]; then\n   cmd=\"$cmd -H 'Authorization: token $GITHUB_API_TOKEN'\"\n  fi\n\n  cmd=\"$cmd $releases_path\"\n```\n\n----------------------------------------\n\nTITLE: Excerpt from package.json - JSON\nDESCRIPTION: Shows a partial JSON snippet from the `package.json` file in the `docs/` directory. It highlights lines 3-5 but the full code is not provided.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n@[code json{3-5}](../../package.json)\n```\n\n----------------------------------------\n\nTITLE: Invoking bin/download Script in asdf Core\nDESCRIPTION: This snippet shows how the asdf core executes the `bin/download` script. It calls the script located at the path specified by the `${plugin_path}` environment variable, without providing any command-line parameters. The script is expected to download files to the path specified by `ASDF_DOWNLOAD_PATH`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/download\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Hooks in .asdfrc Plaintext\nDESCRIPTION: Defines hook commands to run custom code before or after plugin lifecycle events or commands. Hook variables in .asdfrc use naming conventions such as pre_<plugin>_<command> and pre/post_asdf_{install,reshim}_<plugin>. This allows extending plugin behaviors via shell commands. Commands and arguments are accessible through shell variables like $@ and $1 within hook definitions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/configuration.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npre_foo_bar = echo Executing with args: $@\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ASDF Version Shell\nDESCRIPTION: Remove a specific installed version of a package (tool) from the system.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nasdf uninstall <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Running All Local Tests Using Shell Command\nDESCRIPTION: This shell command executes the asdf project's custom test script to run all defined tests locally, facilitating validation of code correctness before committing or pushing changes. It assumes the presence of ./scripts/test.bash and proper bats setup.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test.bash\n```\n\n----------------------------------------\n\nTITLE: Example asdf Plugin Command Directory Structure - Shell\nDESCRIPTION: Demonstrates how an asdf plugin named 'foo' can define custom CLI commands by placing Bash scripts under the lib/commands directory. These scripts, such as command.bash and command-help.bash, are mapped to subcommands or command arguments when invoked through asdf, enabling plugin developers to extend the asdf command interface.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfoo/\n  lib/commands/\n    command.bash\n    command-bat.bash\n    command-bat-man.bash\n    command-help.bash\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for POSIX Shell Shell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in a POSIX-compliant shell (like sh). This allows the shell to find executables managed by asdf. This line should be added to the user's `~/.profile`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\nexport PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Example of Outputting Space-separated Version List in bash\nDESCRIPTION: An example showing the expected output format for the bin/list-all script, which should return a space-separated list of available versions with the most recent version last.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n1.0.1 1.0.2 1.3.0 1.4\n```\n\n----------------------------------------\n\nTITLE: Updating All Plugins - asdf\nDESCRIPTION: Updates all installed plugins to the latest commit on the default branch of their origin repository. This command fetches the latest changes from the plugin's Git repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update --all\n```\n\n----------------------------------------\n\nTITLE: Invoking asdf pre-plugin-remove Hook Script - Bash\nDESCRIPTION: This snippet shows the invocation of the pre-plugin-remove hook script used by asdf before a plugin is removed. It is executed without command-line arguments, with the plugin installation path provided via the ASDF_PLUGIN_PATH environment variable.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/pre-plugin-remove\"\n```\n\n----------------------------------------\n\nTITLE: Example of Printing to Terminal in bats Tests Using Shell\nDESCRIPTION: This shell snippet shows how to print output during bats test runs selectively: normal printf statements do not print during tests, but output redirected to file descriptor 3 (>&3) is printed, aiding in debugging. This requires bats with TAP output enabled (using the -t flag).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# test/some_tests.bats\n\nprintf \"%s\\n\" \"Will not be printed during bats test/some_tests.bats\"\nprintf \"%s\\n\" \"Will be printed during bats -t test/some_tests.bats\" >&3\n```\n\n----------------------------------------\n\nTITLE: Install asdf completions for Fish Shell\nDESCRIPTION: Generates the asdf shell completion script for Fish and saves it to the appropriate Fish completions directory. This command needs to be run manually once after installing asdf. Requires the `asdf` executable to be in the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nasdf completion fish > ~/.config/fish/completions/asdf.fish\n```\n\n----------------------------------------\n\nTITLE: Clone asdf repository\nDESCRIPTION: Clones the asdf repository for manual build and installation. This is one step in the process of installing asdf from source.  It specifies the branch to clone.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/asdf-vm/asdf.git --branch v0.16.0\n```\n\n----------------------------------------\n\nTITLE: Removing ASDF Plugin Shell\nDESCRIPTION: Remove a specified plugin from ASDF. This action will also uninstall all package versions that were installed by this plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin remove <name>\n```\n\n----------------------------------------\n\nTITLE: Updating ASDF Plugin Shell\nDESCRIPTION: Update a specific plugin. By default, it updates to the latest commit on its default branch. Optionally, you can specify a particular Git reference (`<git-ref>`) to update to.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin update <name> [<git-ref>]\n```\n\n----------------------------------------\n\nTITLE: Cloning the asdf repository - Shell\nDESCRIPTION: Clones either a forked or the main asdf repository from GitHub. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (Bash)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in .bash_profile.  This is a necessary step for asdf to manage tool versions. The shims directory is located under the ASDF_DATA_DIR, which defaults to $HOME/.asdf, if not set explicitly.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=\"${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Installing Git with DNF (Bash)\nDESCRIPTION: This snippet shows the installation of git via the DNF package manager, typically found on Fedora and related Linux distributions.  The execution requires appropriate user permissions, potentially involving `sudo`. The command installs the `git` package, crucial for asdf's operation.  The output confirms the successful installation of `git` and its dependencies.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/parts/install-dependencies.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndnf install git\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Plugin in asdf\nDESCRIPTION: This allows updating a single plugin to its latest version, useful for maintaining only selected tools and reducing unnecessary updates.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update <name>\n# asdf plugin update erlang\n```\n\n----------------------------------------\n\nTITLE: Executing Command with asdf\nDESCRIPTION: The `asdf exec` command executes a command using the shim for the currently active tool version. This ensures the correct tool version is used within the context of the shell.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf exec <command> [args...]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Specific Tool Version with asdf (Shell)\nDESCRIPTION: Uninstalls a specific version of a tool previously installed via `asdf` using `asdf uninstall <name> <version>`. Replace `<name>` with the tool name (e.g., `erlang`) and `<version>` with the version number (e.g., `17.3`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nasdf uninstall <name> <version>\n# asdf uninstall erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Cloning asdf GitHub Repository - Shell\nDESCRIPTION: This snippet shows how to clone the asdf repository from GitHub either by forking and cloning your own fork or directly cloning the main asdf repo. The commands use git clone with URLs and provide comments to distinguish between forking and cloning. Prerequisites include having git installed and GitHub credentials if cloning a fork.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Displaying asdf Package Install Path (Bash)\nDESCRIPTION: Shows the filesystem path where a specific version of a package is installed. If no version is specified, it shows the path for the currently active version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nasdf where <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Determining Executable Path for a Specific Tool Version (`bin/exec-path`)\nDESCRIPTION: Fetches the relative executable path for a specified version of a tool, allowing override of default shim paths. It supports commands like `asdf which` and `asdf exec` by providing the correct executable location based on install path and command name.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Output the relative path to the executable for a given tool version\n# Usage: plugin/bin/exec-path <install-path> <command> <executable-path>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins in asdf\nDESCRIPTION: This snippet includes commands to list all installed plugins and their respective repository URLs, aiding in plugin management and verification of current setups.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list\n# asdf plugin list\n# java\n# nodejs\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list --urls\n# asdf plugin list\n# java            https://github.com/halcyon/asdf-java.git\n# nodejs          https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Install asdf using Pacman AUR Shell\nDESCRIPTION: Installs the asdf version manager from the Arch User Repository (AUR) using Git and makepkg, or via an AUR helper. This method is specific to Arch Linux and its derivatives. Requires Git, makepkg, and potentially an AUR helper to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://aur.archlinux.org/asdf-vm.git && cd asdf-vm && makepkg -si\n```\n\n----------------------------------------\n\nTITLE: Setting Global Node.js Version\nDESCRIPTION: This command sets the globally active Node.js version within the asdf environment. It writes the version to the `$HOME/.tool-versions` file. The command assumes a Node.js version is already installed via asdf. The expected output is modification of the `.tool-versions` file setting the specified Node.js version globally.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nasdf global nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies - npm Shell\nDESCRIPTION: This command installs the necessary Node.js packages and dependencies required for the documentation site development, as specified in the `docs/package.json` file. It must be run after installing Node.js via asdf.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Getting the latest stable version\nDESCRIPTION: Shows the most recent stable version of a tool that starts with the specified pattern, based on remote data, aiding in update checks.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name>\n# Example: asdf latest erlang\n```\n\n----------------------------------------\n\nTITLE: Adding asdf.sh to ZSH configuration via Homebrew\nDESCRIPTION: This code appends the command to source asdf.sh from the Homebrew prefix into your ~/.zshrc file, enabling asdf functionality and completions in ZSH when using Homebrew installation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\necho -e \"\\n. $(brew --prefix asdf)/libexec/asdf.sh\" >> ${ZDOTDIR:-~}/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell to load asdf in config.nu using Git\nDESCRIPTION: This code sets environment variable ASDF_DIR and sources asdf.nu in Nushell's config.nu when using Git, enabling asdf commands and completions within Nushell.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\n\"\\n$env.ASDF_DIR = ($env.HOME | path join '.asdf')\\n source \" + ($env.HOME | path join '.asdf/asdf.nu') | save --append $nu.config-path\n```\n\n----------------------------------------\n\nTITLE: Cloning the asdf Core Repository Using Git - Shell\nDESCRIPTION: Demonstrates how to clone either a personal fork or the upstream asdf repository via git. Requires installed git and appropriate access for forking or cloning. Expects the user to replace <GITHUB_USER> with their GitHub username if cloning a fork. Outputs a local directory containing the asdf source code.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n\n```\n\n----------------------------------------\n\nTITLE: Configurable Command Hooks with asdf (Shell)\nDESCRIPTION: This snippet showcases how to configure command hooks within the `.asdfrc` file. These hooks allow users to execute custom commands before and after specific asdf actions, such as installing, reshimming, or uninstalling tools, as well as before and after executing commands from a plugin. The arguments passed to these commands are specified by `${@}`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npre_asdf_install_foo = echo will install foo version ${1}\npost_asdf_install_foo = echo installed foo version ${1}\n\npre_asdf_reshim_foo = echo will reshim foo version ${1}\npost_asdf_reshim_foo = echo reshimmed foo version ${1}\n\npre_foo_bar = echo about to execute command bar from foo with args: ${@}\npost_foo_bar = echo just executed command bar from foo with args: ${@}\n\npre_asdf_uninstall_foo = echo will remove foo version ${1}\npost_asdf_uninstall_foo = echo removed foo version ${1}\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Fish config (Pacman)\nDESCRIPTION: Adds the asdf initialization script to ~/.config/fish/config.fish, ensuring asdf is available in new Fish shell sessions when installed via Pacman.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/asdf-vm/asdf.fish\n```\n\n----------------------------------------\n\nTITLE: VitePress Homepage Configuration in YAML\nDESCRIPTION: This YAML configuration defines the structure of the asdf project homepage using VitePress. It includes the layout type, hero section with title and call-to-action buttons, and six feature highlights that describe the key benefits of the asdf version manager.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: asdf\n  text: 多运行时版本管理器\n  tagline: 使用一个工具管理所有运行时版本！\n  actions:\n    - theme: brand\n      text: 快速上手\n      link: /zh-hans/guide/getting-started\n    - theme: alt\n      text: 什么是asdf？\n      link: /zh-hans/guide/introduction\n    - theme: alt\n      text: 在 Github 上查看\n      link: https://github.com/asdf-vm/asdf\n\nfeatures:\n  - title: 一个工具\n    details: \"使用单个命令行工具和命令界面管理你的每个项目运行环境。\"\n    icon: 🎉\n  - title: 插件\n    details: \"现有运行环境和工具的大型生态系统。简单 API 用于根据需要添加对新工具的支持！\"\n    icon: 🔌\n  - title: 向后兼容\n    details: \"支持从现有配置文件 .nvmrc、.node-version、.ruby-version 平滑迁移！\"\n    icon: ⏮\n  - title: \"一个配置文件\"\n    details: \"一个可共享的 .tool-versions 配置文件管理所有工具、运行环境及其版本。\"\n    icon: 📄\n  - title: \"Shells\"\n    details: \"支持 Bash、ZSH、Fish 和 Elvish，并提供补全功能。\"\n    icon: 🐚\n  - title: \"GitHub Actions\"\n    details: \"提供 Github Action 在 CI/CD 工作流中安装和使用 .tool-versions。\"\n    icon: 🤖\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins Providing a Command Shim (Bash)\nDESCRIPTION: Lists all installed plugins and their respective versions that provide an executable shim for the specified command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\nasdf shim-versions <command>\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Versions with .tool-versions File in Plaintext\nDESCRIPTION: This snippet illustrates the syntax and format of the .tool-versions file used by asdf to specify versions of different tools in a directory and its subdirectories. It demonstrates how to define versions by tool name, include comments, and specify multiple versions separated by spaces as fallbacks. The expected input is a plaintext file with each line specifying a tool followed by its versions or version references, with optional inline or full line comments.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/configuration.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nruby 2.5.3\nnodejs 10.15.0\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nruby 2.5.3 # This is a comment\n# This is another comment\nnodejs 10.15.0\n```\n\nLANGUAGE: plaintext\nCODE:\n```\npython 3.7.2 2.7.15 system\n```\n\n----------------------------------------\n\nTITLE: Debugging Bats Tests with TAP Output (Shell)\nDESCRIPTION: Illustrates a technique for printing debugging output within a Bats test script using the TAP format. Output directed to file descriptor `>&3` is visible when running Bats with the `-t` flag, aiding in troubleshooting test failures. Requires Bats to be installed and the test file to be executed with the `-t` flag.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n# test/some_tests.bats\n\nprintf \"%s\\n\" \"Will not be printed during bats test/some_tests.bats\"\nprintf \"%s\\n\" \"Will be printed during bats -t test/some_tests.bats\" >&3\n```\n\n----------------------------------------\n\nTITLE: Falling back to system version of a tool\nDESCRIPTION: Configures asdf to use the system-installed version of a tool by setting the version to 'system' for local, global, or shell contexts, bypassing asdf-managed versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nasdf local <name> system\n# Example: asdf local python system\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (PowerShell)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in PowerShell's profile.ps1 file, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf). This line should be added before the shims directory is added to the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$env:ASDF_DATA_DIR = \"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Configuring POSIX Shell with Pacman\nDESCRIPTION: This code sets ASDF_DIR and sources asdf.sh from /opt/asdf-vm for POSIX login shells, suitable for Arch Linux setups with Pacman.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\nexport ASDF_DIR=\"/opt/asdf-vm\"\\n. /opt/asdf-vm/asdf.sh\n```\n\n----------------------------------------\n\nTITLE: Configure asdf custom data directory for PowerShell Core PowerShell\nDESCRIPTION: Specifies a custom directory for asdf data in PowerShell Core. This overrides the default `$HOME/.asdf` location. This line should be added to `~/.config/powershell/profile.ps1` before the shims path configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n$env:ASDF_DATA_DIR = \"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Using git blame with .git-blame-ignore-revs File in Shell\nDESCRIPTION: This command runs git blame while ignoring revisions specified in the .git-blame-ignore-revs file to reduce noise and improve blame accuracy during code review and history analysis. It requires the .git-blame-ignore-revs file to exist in the project root and proper git configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs ./test/install_command.bats\n```\n\n----------------------------------------\n\nTITLE: Listing All Available asdf Plugin Shortnames\nDESCRIPTION: Shows all available plugin shortnames that can be installed from the official repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/plugins.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list all\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Bash & Git macOS)\nDESCRIPTION: These steps outline how to uninstall asdf using Bash and Git on macOS, similar to the previous example, but targeting the `.bash_profile` file.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-\\$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Sourcing asdf in PowerShell with Pacman\nDESCRIPTION: This snippet sources the asdf PowerShell script directly from /opt/asdf-vm directory in the PowerShell profile, suitable for Arch Linux users using Pacman.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\n. /opt/asdf-vm/asdf.ps1\n```\n\n----------------------------------------\n\nTITLE: Listing ASDF Plugins with URLs\nDESCRIPTION: This command lists installed ASDF plugins along with their corresponding Git repository URLs. Provides the URLs for plugin sources. No parameters needed. The output will include plugin names and their Git URLs.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/plugins.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin list --urls\n# asdf plugin list\n# java            https://github.com/halcyon/asdf-java.git\n# nodejs          https://github.com/asdf-vm/asdf-nodejs.git\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Bash & Homebrew macOS)\nDESCRIPTION: This outlines the process of uninstalling asdf on macOS using Bash and Homebrew, with the crucial note that it also accounts for ZSH setups if the user is running Catalina or newer.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n. $(brew --prefix asdf)/libexec/asdf.sh\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Python Versions in .tool-versions\nDESCRIPTION: Example showing how to specify multiple Python versions in a .tool-versions file, allowing the use of different Python versions in the same environment, including system Python.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython 3.7.2 2.7.15 system\n```\n\n----------------------------------------\n\nTITLE: Setting asdf Environment Variables in Bash\nDESCRIPTION: Environment variables allow overriding asdf's default configuration and data file locations, concurrency for compilation, and PATH handling. Variables like ASDF_CONFIG_FILE, ASDF_DEFAULT_TOOL_VERSIONS_FILENAME, ASDF_DIR, ASDF_DATA_DIR, ASDF_CONCURRENCY, and ASDF_FORCE_PREPEND control file locations, naming, parallelism, and shim path precedence respectively. Properly exporting these variables prior to sourcing asdf shell scripts is required for effect.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/configuration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ASDF_CONFIG_FILE=/home/john_doe/.config/asdf/.asdfrc\nexport ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=tool_versions\nexport ASDF_DIR=/home/john_doe/.config/asdf\nexport ASDF_DATA_DIR=/home/john_doe/.asdf\nexport ASDF_CONCURRENCY=32\nASDF_FORCE_PREPEND=no . \"<path-to-asdf-directory>/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin via Git URL in asdf\nDESCRIPTION: This snippet demonstrates how to add a new plugin to asdf using a specific Git URL, which is recommended for independence from plugin repository names. It shows commands for both full URL and short name methods.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name> <git-url>\n# asdf plugin add elm https://github.com/vic/asdf-elm\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name>\n# asdf plugin add erlang\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Elvish & Git)\nDESCRIPTION: This details how to uninstall asdf using the Elvish shell and Git, involving removal from the `rc.elv` file and removing the asdf module.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nuse asdf _asdf; var asdf~ = $_asdf:asdf~\nset edit:completion:arg-completer[asdf] = $_asdf:arg-completer~\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -f ~/.config/elvish/lib/asdf.elv\n```\n\nLANGUAGE: shell\nCODE:\n```\nif (!=s \\$E:ASDF_DATA_DIR \\\"\") { rm -rf \\$E:ASDF_DATA_DIR } else { rm -rf ~/.asdf }\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Selecting the System-Provided Tool Version with asdf (Shell)\nDESCRIPTION: Configures `asdf` to use the version of the tool installed outside of `asdf` (the 'system' version) using `asdf local <name> system` (or `global`/`shell`). Replace `<name>` with the tool name (e.g., `python`). This bypasses asdf-managed versions for the specified tool.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nasdf local <name> system\n# asdf local python system\n```\n\n----------------------------------------\n\nTITLE: Preparing environment for a tool's shim execution (bin/exec-env)\nDESCRIPTION: Sets up the environment before executing a tool's binary through shim. It considers installation type, version, and path via environment variables, ensuring the correct context for execution.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/exec-env\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Elvish & Pacman)\nDESCRIPTION: This covers the uninstallation of asdf with the Elvish shell and Pacman, detailing the steps needed to remove the asdf configuration and related packages.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nuse asdf _asdf; var asdf~ = $_asdf:asdf~\nset edit:completion:arg-completer[asdf] = $_asdf:arg-completer~\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -f ~/.config/elvish/lib/asdf.elv\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\nLANGUAGE: shell\nCODE:\n```\nif (!=s \\$E:ASDF_DATA_DIR \\\"\") { rm -rf \\$E:ASDF_DATA_DIR } else { rm -rf ~/.asdf }\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (Nushell)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in Nushell's config.nu file.  This is a necessary step for asdf to manage tool versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nlet shims_dir = (\n  if ( $env | get --ignore-errors ASDF_DATA_DIR | is-empty ) {\n    $env.HOME | path join '.asdf'\n  } else {\n    $env.ASDF_DATA_DIR\n  } | path join 'shims'\n)\n$env.PATH = ( $env.PATH | split row (char esep) | where { |p| $p != $shims_dir } | prepend $shims_dir )\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for Nushell Nushell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in Nushell. It handles both default and custom `ASDF_DATA_DIR` locations. This block should be added to `~/.config/nushell/config.nu`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_21\n\nLANGUAGE: Nushell\nCODE:\n```\nlet shims_dir = (\n  if ( $env | get --ignore-errors ASDF_DATA_DIR | is-empty ) {\n    $env.HOME | path join '.asdf'\n  } else {\n    $env.ASDF_DATA_DIR\n  } | path join 'shims'\n)\n$env.PATH = ( $env.PATH | split row (char esep) | where { |p| $p != $shims_dir } | prepend $shims_dir )\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ASDF in Fish Shell Environment Shell\nDESCRIPTION: Removes asdf from Fish shell environments installed via various methods (Git, Homebrew, Pacman). Instructions include deleting the `source ~/.asdf/asdf.fish` line from `~/.config/fish/config.fish`, removing command completion files, deleting the `~/.asdf` directory, and removing the `.tool-versions` and `.asdfrc` files. Uninstallation with package managers like Homebrew or Pacman is also included.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.asdf/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.config/fish/completions/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf (string join : -- $ASDF_DATA_DIR $HOME/.asdf)\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nsource \"(brew --prefix asdf)\"/libexec/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/asdf-vm/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\n----------------------------------------\n\nTITLE: Sourcing asdf in POSIX Shell via profile\nDESCRIPTION: This code adds environment variable and sources asdf.sh in ~/.profile for POSIX-compliant shells, enabling asdf tool management in login shells.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\nexport ASDF_DIR=\"$HOME/.asdf\"\\n. \"$HOME/.asdf/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ASDF in Elvish Shell Environment Shell\nDESCRIPTION: Procedures for removing asdf from Elvish shell setups across Git, Homebrew, and Pacman installations. Involves deleting lines invoking the `asdf` module from `~/.config/elvish/rc.elv`, removing the `asdf.elv` module file, deleting the asdf directory, uninstalling via package managers where applicable, and removing asdf configuration files `.tool-versions` and `.asdfrc`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuse asdf _asdf; var asdf~ = $_asdf:asdf~\nset edit:completion:arg-completer[asdf] = $_asdf:arg-completer~\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -f ~/.config/elvish/lib/asdf.elv\n```\n\nLANGUAGE: shell\nCODE:\n```\nif (!=s $E:ASDF_DATA_DIR \"\") { rm -rf $E:ASDF_DATA_DIR } else { rm -rf ~/.asdf }\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with asdf (Shell)\nDESCRIPTION: Allows running commands within the current asdf environment, executing the specified command using the shim for the current tool version. Requires the 'asdf exec' command and accepts command arguments.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf exec <command> [args...]\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin with Git URL - asdf\nDESCRIPTION: Adds a plugin to asdf using its Git URL. This method is recommended as it's independent of the short-name repository. The `<name>` is the name you want to give to the plugin locally, and `<git-url>` is the URL of the plugin's Git repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/plugins.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add <name> <git-url>\n# asdf plugin add elm https://github.com/vic/asdf-elm\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Bash & Git)\nDESCRIPTION: These steps outline how to uninstall asdf using Bash and Git.  It involves removing configuration from `.bashrc` and deleting the asdf directory.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-\\$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Linting, Formatting, and Testing Workflow Scripts - Shell\nDESCRIPTION: Series of shell commands to lint, format, and run tests for the asdf project. Relies on scripts located in ./scripts/ (lint.bash and test.bash) and assumes presence of relevant dependencies. The --check and --fix flags for lint.bash determine linting mode. Also includes running a specific Bats test for targeted coverage.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Lint\n./scripts/lint.bash --check\n\n# Fix & Format\n./scripts/lint.bash --fix\n\n# Test: all tests\n./scripts/test.bash\n\n# Test: for specific command\nbats test/list_commands.bash\n\n```\n\n----------------------------------------\n\nTITLE: Showing Latest ASDF Version Shell\nDESCRIPTION: Show the latest stable version of a package (tool). An optional version string prefix can be provided to show the latest stable version that begins with the given string.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nasdf latest <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Recreating Shims for Installed Tools (Shell)\nDESCRIPTION: Recreates shims for a specific tool and version, particularly useful when new executables are added outside plugin management. Ensures that shim links are updated for the specified version of the tool.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf reshim <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Bash & Homebrew)\nDESCRIPTION: These steps describe how to uninstall asdf when installed using Homebrew, removing lines from `.bashrc`, uninstalling with brew, and removing config files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n. $(brew --prefix asdf)/libexec/asdf.sh\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (POSIX)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in .profile, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf).  This line should be added before the shims directory is added to the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nexport ASDF_DATA_DIR=\"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: 追加 nodejs プラグイン (shell)\nDESCRIPTION: asdfプラグインを追加するコマンドです。Node.jsプラグインを追加します。asdfコマンドラインツールがインストールされている必要があります。プラグインのURLを指定します。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Plugin - Shell\nDESCRIPTION: This command demonstrates how to add the Node.js plugin to asdf, which is required for managing Node.js versions used in documentation website development.  It uses asdf plugin add command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Sourcing asdf.sh in ZSH with Pacman\nDESCRIPTION: This snippet shows how to add the asdf.sh script path to ~/.zshrc for Arch Linux's Pacman package manager, enabling asdf in ZSH with proper completion support.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\n. /opt/asdf-vm/asdf.sh\n```\n\n----------------------------------------\n\nTITLE: Executing ASDF Shim Commands Shell\nDESCRIPTION: Runs commands through the currently active asdf shim version. The snippet shows the basic usage syntax `asdf exec <command> [args...]` which ensures that the command is run within the version controlled by asdf's shim system. Dependencies include having asdf installed and configured with shims. Inputs are the command and optional arguments, and output is the invoked command's result.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf exec <command> [args...]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Fish & Homebrew)\nDESCRIPTION: These steps show how to uninstall asdf using Fish and Homebrew, including removing lines from `config.fish`, uninstalling with brew, and deleting configuration files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsource \"(brew --prefix asdf)\"/libexec/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Using environment variables to set tool version in shell sessions - Shell\nDESCRIPTION: Demonstrates how to manually set environment variables like ASDF_${TOOL}_VERSION to control the tool version for the current shell session, facilitating running commands under a specific tool version without changing global or local config files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nASDF_ELIXIR_VERSION=1.4.0 mix test\n```\n\n----------------------------------------\n\nTITLE: Example .asdfrc Configuration File in INI Format\nDESCRIPTION: This snippet shows a basic .asdfrc configuration file specifying key user-level settings for asdf. It defines flags and numeric parameters such as legacy_version_file, use_release_candidates, always_keep_download, plugin repository sync interval, plugin short name repository disabling, and concurrency behavior. Each parameter influences asdf's runtime behavior including version file support, plugin synchronization, download caching, and parallel build job counts.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/configuration.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nlegacy_version_file = no\nuse_release_candidates = no\nalways_keep_download = no\nplugin_repository_last_check_duration = 60\ndisable_plugin_short_name_repository = no\nconcurrency = auto\n```\n\n----------------------------------------\n\nTITLE: Configure asdf custom data directory for ZSH Shell\nDESCRIPTION: Specifies a custom directory for asdf to store its data, plugins, installs, and shims in ZSH. This overrides the default `$HOME/.asdf` location. This line should be added to `~/.zshrc` before the PATH configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nexport ASDF_DATA_DIR=\"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ASDF in Bash Shell Environment Shell\nDESCRIPTION: Instructions and commands to uninstall asdf on systems using the Bash shell, with variants depending on installation methods (Git, Homebrew, Pacman). Steps include removing lines sourcing `asdf.sh` and completions from `~/.bashrc` or `~/.bash_profile`, deleting the `~/.asdf` directory, and removing configuration files `.tool-versions` and `.asdfrc`. For Homebrew, uninstall via `brew uninstall asdf --force`. For Pacman, uninstall with `pacman -Rs asdf-vm`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n. \"$HOME/.asdf/completions/asdf.bash\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n. $(brew --prefix asdf)/libexec/asdf.sh\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n. /opt/asdf-vm/asdf.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\n----------------------------------------\n\nTITLE: Formatting Code - Shell\nDESCRIPTION: This command formats the code according to the project's code style guidelines using npm.  This is required before submitting pull requests.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies using npm (Shell)\nDESCRIPTION: Installs the necessary Node.js package dependencies listed in the `docs/package.json` file using `npm install`. These dependencies are required for the Vuepress site generator and development tools.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF_FORCE_PREPEND Environment Variable\nDESCRIPTION: This snippet explains how to configure the ASDF_FORCE_PREPEND environment variable to control whether asdf's shims and directories are prepended to the PATH. It describes the behavior and default settings on different systems. The path should be absolute.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nASDF_FORCE_PREPEND=no . \"<path-to-asdf-directory>/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Setting Tool Version via Environment Variable for a Command (Shell)\nDESCRIPTION: Executes a command with a specific tool version by setting the `ASDF_<TOOL>_VERSION` environment variable inline. This overrides other `asdf` settings for the duration of that single command. Replace `<TOOL>` with the uppercase tool name (e.g., `ELIXIR`) and `<version>` with the desired version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nASDF_ELIXIR_VERSION=1.4.0 mix test\n```\n\n----------------------------------------\n\nTITLE: Understanding asdf shims and execution flow - Shell\nDESCRIPTION: Explains the shim system asdf uses to manage executable wrapping, where shims in the $ASDF_DATA_DIR/shims directory transparently invoke the correct tool version executable via 'asdf exec'. It highlights how shims forward execution, determine the right environment and executable path, and the implications for accessing scripts that must be sourced rather than executed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# 返回当前版本中主要可执行程序的路径\nsource $(asdf which ${PLUGIN})/../script.sh\n\n# 返回软件包安装目录的路径\nsource $(asdf where ${PLUGIN} $(asdf current ${PLUGIN}))/bin/script.sh\n```\n\n----------------------------------------\n\nTITLE: Starting the Vuepress Development Server (Shell)\nDESCRIPTION: Executes the `dev` script defined in `package.json` using `npm run dev`. This command starts the local Vuepress development server, allowing developers to preview changes to the documentation site in real-time.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Fish shell completion setup\nDESCRIPTION: Configures command completion for Fish shell.  This involves running a command to generate the completion file and then configuring fish to load it. This is an optional, but recommended, setup to make using asdf easier.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ asdf completion fish > ~/.config/fish/completions/asdf.fish\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (Elvish)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in Elvish shell's rc.elv file, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf). This modifies the asdf_data_dir variable.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nvar asdf_data_dir = '/your/custom/data/dir'\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (ZSH)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in .zshrc, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf). This line should be added before the shims directory is added to the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport ASDF_DATA_DIR=\"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Invoking asdf post-plugin-update Hook Script - Bash\nDESCRIPTION: This snippet shows the invocation of the post-plugin-update hook script used by asdf after a plugin update command completes. The script path is determined by the plugin's installation directory and requires no command-line arguments. It utilizes environment variables like ASDF_PLUGIN_PATH, ASDF_PLUGIN_PREV_REF, and ASDF_PLUGIN_POST_REF to provide context about the plugin's location and git references pre- and post-update.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/post-plugin-update\"\n```\n\n----------------------------------------\n\nTITLE: Listing Shim Versions by Tool and Version (Shell)\nDESCRIPTION: Displays all installed versions of a tool that provide shims for commands, aiding in managing multiple versions and verifying shim availability.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf shimversions <command>\n```\n\n----------------------------------------\n\nTITLE: Listing ASDF Shim Versions for a Command Shell\nDESCRIPTION: Lists all available plugin versions that provide a shim for a specified command via `asdf shimversions <command>`. This helps users identify which versions and plugins are responsible for the shimmed command. Inputs: the command name; outputs: a list of plugin-version pairs representing installed versions that supply that shim.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nasdf shimversions <command>\n```\n\nLANGUAGE: shell\nCODE:\n```\n➜ asdf shimversions node\nnodejs 14.8.0\nnodejs 14.17.3\nnodejs 16.5.0\n```\n\nLANGUAGE: shell\nCODE:\n```\n➜ asdf shimversions npm\nnodejs 14.8.0\nnodejs 14.17.3\nnodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Getting ASDF Help Shell\nDESCRIPTION: Output the documentation or help information provided by a specific plugin. Optionally, you can specify a version to get help related to that version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nasdf help <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Getting Help for an asdf Plugin/Tool (Bash)\nDESCRIPTION: Outputs documentation provided by the specified plugin for a tool, optionally for a specific version if the plugin supports it.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nasdf help <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ASDF in ZSH Shell Environment Shell\nDESCRIPTION: Instructions for uninstalling asdf in ZSH environments with various installation paths: Git, Homebrew, and Pacman. Users must remove asdf sourcing lines from `~/.zshrc`, delete the asdf directory, and remove configuration files. For Homebrew, additionally use `brew uninstall asdf --force && brew autoremove`. These steps help cleanly remove asdf and its shell integration for ZSH users.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n# ...\nfpath=(${ASDF_DIR}/completions $fpath)\nautoload -Uz compinit\ncompinit\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n. $(brew --prefix asdf)/libexec/asdf.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force && brew autoremove\n```\n\nLANGUAGE: shell\nCODE:\n```\n. /opt/asdf-vm/asdf.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to asdf Version Manager - Shell\nDESCRIPTION: This snippet demonstrates how to add necessary development plugins to asdf using the 'asdf plugin add' command with plugin names and their respective GitHub repository URLs. These plugins (bats, shellcheck, shfmt) are tools required for testing, linting, and formatting shell scripts. The snippet assumes asdf is installed and configured properly.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add bats https://github.com/timgluz/asdf-bats.git\nasdf plugin add shellcheck https://github.com/luizm/asdf-shellcheck.git\nasdf plugin add shfmt https://github.com/luizm/asdf-shfmt.git\n```\n\n----------------------------------------\n\nTITLE: Defining npm Scripts - JSON\nDESCRIPTION: This JSON snippet represents a part of the `package.json` file, specifically showing how common development tasks like running the dev server (`dev`) and formatting code (`format`) are defined within the `scripts` object. These scripts are executed using `npm run <script_name>`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"vitepress dev\",\n  \"format\": \"prettier --write .\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Elvish & Homebrew)\nDESCRIPTION: This section gives instructions for uninstalling asdf with Elvish shell and Homebrew, involving the removal of module use statements and uninstalling asdf.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nuse asdf _asdf; var asdf~ = $_asdf:asdf~\nset edit:completion:arg-completer[asdf] = $_asdf:arg-completer~\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -f ~/.config/elvish/lib/asdf.elv\n```\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall asdf --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Showing Latest Stable Version Matching Prefix with asdf (Shell)\nDESCRIPTION: Displays the latest stable version of a tool that starts with a specific prefix using `asdf latest <name> <version>`. Replace `<name>` with the tool name (e.g., `erlang`) and `<version>` with the prefix (e.g., `17`).\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/versions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name> <version>\n# asdf latest erlang 17\n```\n\n----------------------------------------\n\nTITLE: Adding asdf Node.js Plugin - asdf Shell\nDESCRIPTION: This command adds the Node.js plugin to asdf, allowing asdf to manage Node.js versions. This is necessary because the documentation site development relies on Node.js.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Finding ASDF Install Path Shell\nDESCRIPTION: Display the file system path where a specific installed version of a package is located, or the path for the current version if no version is specified.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nasdf where <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Versions with asdf (Shell)\nDESCRIPTION: Installs the specific tool versions (like Node.js) defined in the `docs/.tool-versions` file using the `asdf install` command. This ensures the correct versions required for the project are used.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Installing tools with asdf - Shell\nDESCRIPTION: Installs the tools specified in the `.tool-versions` file. This ensures the correct versions of Node.js and other dependencies are installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Removing asdf Configuration Files\nDESCRIPTION: This command removes all asdf configuration files from the user's home directory. It's used as part of the uninstallation process to clean up asdf related configurations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Elvish config (Homebrew)\nDESCRIPTION: Configures asdf for Elvish shell by creating the lib directory, creating symlink for asdf.elv, and adding the necessary lines to rc.elv. Uses paths provided by Homebrew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/elvish/lib; ln -s (brew --prefix asdf)/libexec/asdf.elv ~/.config/elvish/lib/asdf.elv\necho \"\\n\"'use asdf _asdf; var asdf~ = $_asdf:asdf~' >> ~/.config/elvish/rc.elv\necho \"\\n\"'set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~' >> ~/.config/elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Displaying ASDF Debugging Information Shell\nDESCRIPTION: The command `asdf info` prints detailed debug information about the operating system, current shell, and asdf itself, which is useful when filing bug reports or diagnosing issues. No parameters are required. Outputs text information on system environment and asdf state to aid troubleshooting.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf info\n```\n\n----------------------------------------\n\nTITLE: Printing asdf Debug Information (Bash)\nDESCRIPTION: Outputs useful debugging information including OS details, Shell information, and specifics about the asdf installation and configuration. Helpful for reporting issues.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\nasdf info\n```\n\n----------------------------------------\n\nTITLE: Reshimming ASDF Shim for Specific Package and Version Shell\nDESCRIPTION: Recreates shim files for a specified package name and version using `asdf reshim <name> <version>`. Useful when executables installed globally (e.g. via npm global installs) are not automatically linked by asdf shims. Dependencies include the asdf package plugin and the installed version. Inputs are the package name and version; output is regenerated shim links for those executables.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf reshim <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Formatting Code using npm (Shell)\nDESCRIPTION: Executes the `format` script defined in `package.json` using `npm run format`. This command typically runs a code formatter (like Prettier) to ensure code style consistency before committing changes.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Running asdf Development Scripts (Lint, Test) (Shell)\nDESCRIPTION: Provides commands to execute local development scripts for linting and testing the asdf core code. This allows contributors to check formatting, identify potential issues, and run unit tests before committing changes. Requires the development tools (shellcheck, shfmt, bats) to be installed and the scripts to be executable.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Lint\n./scripts/lint.bash --check\n\n# Fix & Format\n./scripts/lint.bash --fix\n\n# Test: all tests\n./scripts/test.bash\n\n# Test: for specific command\nbats test/list_commands.bash\n```\n\n----------------------------------------\n\nTITLE: Install asdf completions files for Nushell Shell\nDESCRIPTION: Creates the directory for Nushell completion files and generates the asdf completion script within it. The commands differ slightly based on whether a custom `ASDF_DATA_DIR` is set. These commands need to be run manually once after installing asdf.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\n# If you've not customized the asdf data directory:\nmkdir $\"($env.HOME)/.asdf/completions\"\nasdf completion nushell | save $\"($env.HOME)/.asdf/completions/nushell.nu\"\n\n# If you have customized the data directory by setting ASDF_DATA_DIR:\nmkdir $\"($env.ASDF_DATA_DIR)/completions\"\nasdf completion nushell | save $\"($env.ASDF_DATA_DIR)/completions/nushell.nu\"\n```\n\n----------------------------------------\n\nTITLE: Installing Git with Aptitude (Bash)\nDESCRIPTION: This snippet demonstrates how to install git using the Aptitude package manager on a Linux system. It requires root privileges in some systems which implies using sudo before the command to install git. The command installs the `git` package, a core dependency for `asdf`.  Expected output is the successful installation of `git` and its related utilities.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/parts/install-dependencies.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\napt install git\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell to load asdf with Pacman\nDESCRIPTION: This snippet adds sourcing of asdf.nu from /opt/asdf-vm directory in Nushell's config.nu file for Arch Linux users with Pacman.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\n\"\\n$env.ASDF_DIR = '/opt/asdf-vm/'\\n source /opt/asdf-vm/asdf.nu\" | save --append $nu.config-path\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Plugin Shortname Repository in asdf\nDESCRIPTION: This process synchronizes the plugin repository's shortnames with the local machine periodically, based on activity or elapsed time, configurable via '.asdfrc'.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n- Commands 'asdf plugin add <name>' or 'asdf plugin list all' trigger synchronization\n- Synchronization occurs if last check exceeds specified duration (default 60 minutes)\n- Duration can be modified in '.asdfrc' using 'plugin_repository_last_check_duration' option\n```\n\n----------------------------------------\n\nTITLE: Displaying Path to an asdf Shimmed Executable (Bash)\nDESCRIPTION: Shows the full path to the asdf shim that executes the specified command, reflecting the currently configured version for the tool providing that command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nasdf which <command>\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (Fish)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in fish shell's config.fish, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf). This line should be added before the shims directory is added to the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nset -gx --prepend ASDF_DATA_DIR \"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (Nushell)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in Nushell's config.nu file, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf). This line should be added before the shims directory is added to the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$env.ASDF_DATA_DIR = \"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Shell for asdf\nDESCRIPTION: Sources asdf scripts in ZSH configuration (.zshrc) and sets up completion functions, considering different environments such as oh-my-zsh or custom setups. Ensures shell integration with ZSH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n. \"$(brew --prefix asdf)/libexec/asdf.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Tool Versions with asdf - Shell\nDESCRIPTION: Shows the command to install all tool versions specified in the .tool-versions file using asdf. Requires that the plugins are already added and asdf is correctly configured. Installs versions of dependencies needed for development, ensuring the environment matches project requirements.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF_CONFIG_FILE Environment Variable\nDESCRIPTION: This snippet demonstrates how to configure the ASDF_CONFIG_FILE environment variable to specify the path to the .asdfrc configuration file. This enables users to store their configuration files in custom locations. The path must be absolute.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nexport ASDF_CONFIG_FILE=/home/john_doe/.config/asdf/.asdfrc\n```\n\n----------------------------------------\n\nTITLE: Listing Bin Paths Bash\nDESCRIPTION: This script lists the directories containing executables for the specified version of the tool. It outputs a space-separated list of paths, which are relative to `ASDF_INSTALL_PATH`.  If this script is not present, asdf will create shims for the bin directory. It uses environment variables. The script exits with 0 on success, and non-zero on failure.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/list-bin-paths\"\n```\n\n----------------------------------------\n\nTITLE: Determining Latest Stable Version Bash\nDESCRIPTION: This script determines and outputs the latest stable version of a tool.  It accepts a filter query as an argument to narrow down the version selection. It filters out non-stable versions and outputs the latest stable version to stdout.  Success results in exit code 0 and failure results in a non-zero exit code. The script relies on environment variables to determine installation details.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/latest-stable \"$query\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the asdf Repository using Git (Shell)\nDESCRIPTION: Clones the asdf project repository from GitHub. Users can either clone their own fork or the main asdf repository directly using the `git clone` command. This is the first step in setting up the development environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Listing ASDF Shim Versions Shell\nDESCRIPTION: List which plugins and their corresponding versions provide the executable shim for a particular command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\nasdf shimversions <command>\n```\n\n----------------------------------------\n\nTITLE: Set custom data directory (Bash)\nDESCRIPTION: Sets the ASDF_DATA_DIR environment variable in .bash_profile, which specifies the location where asdf stores its data (plugins, installations, etc.). This allows users to relocate asdf's data directory from the default ($HOME/.asdf). This line should be added before the shims directory is added to the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport ASDF_DATA_DIR=\"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Version Bash\nDESCRIPTION: This script installs a specific version of a tool to a specified location. It is responsible for downloading and installing the tool, creating shims for executables, and handling potential TOCTOU issues.  It utilizes environment variables to determine the install type, version, and install path. It exits with a zero status on success and a non-zero status on failure.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/install\n```\n\n----------------------------------------\n\nTITLE: Setting Local Node.js Version\nDESCRIPTION: This command sets the locally active Node.js version for the current directory. It writes the version to the `$PWD/.tool-versions` file. Prerequisites include having a Node.js version installed via asdf. The command will generate a `.tool-versions` file in the current directory. The expected output is modification of the `.tool-versions` file setting the specified Node.js version locally.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nasdf local nodejs latest\n```\n\n----------------------------------------\n\nTITLE: Configure asdf shims path for Fish Shell\nDESCRIPTION: Adds the asdf shims directory to the system's PATH environment variable in Fish shell. It checks for the `ASDF_DATA_DIR` variable and ensures the shims path is added correctly. This block should be added to `~/.config/fish/config.fish`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_8\n\nLANGUAGE: Fish\nCODE:\n```\n# ASDF configuration code\nif test -z $ASDF_DATA_DIR\n    set _asdf_shims \"$HOME/.asdf/shims\"\nelse\n    set _asdf_shims \"$ASDF_DATA_DIR/shims\"\nend\n\n# Do not use fish_add_path (added in Fish 3.2) because it\n# potentially changes the order of items in PATH\nif not contains $_asdf_shims $PATH\n    set -gx --prepend PATH $_asdf_shims\nend\nset --erase _asdf_shims\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Version File Support in asdf\nDESCRIPTION: This configuration option enables support for legacy version files (e.g., `.nvmrc`, `.node-version`) in asdf for specific plugins like `asdf-nodejs`. It needs to be added to the `asdf` configuration file `$HOME/.asdfrc`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/guide/getting-started.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlegacy_version_file = yes\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for asdf Plugin Test\nDESCRIPTION: This is a sample GitHub Actions workflow file (`.github/workflows/test.yaml`) for testing asdf plugins. It defines a job that runs on both Ubuntu and macOS, using the `asdf-vm/actions/plugin-test` action to test the plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  plugin_test:\n    name: asdf plugin test\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: asdf_plugin_test\n        uses: asdf-vm/actions/plugin-test@v2\n        with:\n          command: \"<MY_TOOL> --version\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (ZSH & Pacman)\nDESCRIPTION: This details the process of uninstalling asdf using ZSH and Pacman package manager. It involves removing the source from `~/.zshrc` and using pacman to uninstall the package.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n. /opt/asdf-vm/asdf.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-\\$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Updating the asdf Core (Bash)\nDESCRIPTION: Updates the asdf version manager installation itself. By default, it updates to the latest stable release. Using the `--head` flag updates to the latest commit on the main development branch.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_21\n\nLANGUAGE: Bash\nCODE:\n```\nasdf update\nasdf update --head\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF_DATA_DIR Environment Variable\nDESCRIPTION: This snippet demonstrates how to configure the ASDF_DATA_DIR environment variable. This variable is used to specify the directory where asdf installs plugins, shims, and tool versions. The path must be absolute.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nexport ASDF_DATA_DIR=/home/john_doe/.asdf\n```\n\n----------------------------------------\n\nTITLE: Configure asdf Bash Completions (Homebrew)\nDESCRIPTION: Adds asdf completion script to the ~/.bashrc using the path provided by `brew --prefix asdf`.  This enables tab completion for asdf commands when installed via Homebrew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"\\n. \\\"$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\\\"\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Understanding asdf shims and their role\nDESCRIPTION: Explains that asdf creates shim wrappers for each executable of the installed tools directory, which are placed into the shims directory and added to PATH. These shims route commands to the correct version’s executable based on configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# No code snippet; this section is descriptive.\n```\n\n----------------------------------------\n\nTITLE: Configure asdf custom data directory for Elvish Shell (Modification)\nDESCRIPTION: Instructs on how to set a custom data directory for asdf in Elvish shell. It requires modifying the `asdf_data_dir` variable declaration within the shims path configuration block in `~/.config/elvish/rc.elv`. Change the default path `~'/.asdf'` to the desired custom path.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_12\n\nLANGUAGE: Elvish\nCODE:\n```\nvar asdf_data_dir = '/your/custom/data/dir'\n```\n\n----------------------------------------\n\nTITLE: Handling API Rate Limiting with Token\nDESCRIPTION: This code snippet shows how to handle API rate limiting by using an environment variable to provide an authentication token for external API access.  If the GITHUB_API_TOKEN is set, it will add an Authorization header to the curl command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncmd=\"curl --silent\"\nif [ -n \"$GITHUB_API_TOKEN\" ]; then\n cmd=\"$cmd -H 'Authorization: token $GITHUB_API_TOKEN'\"\nfi\n\ncmd=\"$cmd $releases_path\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for asdf Plugin Testing - YAML\nDESCRIPTION: Defines a GitHub Actions workflow configuring CI to test asdf plugins on both Ubuntu and macOS environments. It uses the asdf-vm/actions/plugin-test action to run a specified command on plugin installation, facilitating automated plugin verification on GitHub.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  plugin_test:\n    name: asdf plugin test\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: asdf_plugin_test\n        uses: asdf-vm/actions/plugin-test@v2\n        with:\n          command: \"<MY_TOOL> --version\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting the asdf Shim Execution Environment (Bash)\nDESCRIPTION: Runs a specified utility command (like `env` or `printenv`, defaulting to `env`) within the environment context that asdf sets up before executing a shimmed command. Useful for inspecting PATH and other variables.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\nasdf env <command> [util]\n```\n\n----------------------------------------\n\nTITLE: Install asdf completions files for ZSH Shell\nDESCRIPTION: Creates the directory for ZSH completion files and generates the asdf completion script within it. These commands need to be run manually once after installing asdf. Requires the `asdf` executable to be in the PATH.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p \"${ASDF_DATA_DIR:-$HOME/.asdf}/completions\"\nasdf completion zsh > \"${ASDF_DATA_DIR:-$HOME/.asdf}/completions/_asdf\"\n```\n\n----------------------------------------\n\nTITLE: Executing a Command via asdf Shim (Bash)\nDESCRIPTION: Executes a command using the tool version currently configured by asdf, bypassing the shell's PATH lookup for the shim itself. Useful for debugging or specific scripting scenarios.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\nasdf exec <command> [args...]\n```\n\n----------------------------------------\n\nTITLE: Running ASDF Environment Util Shell\nDESCRIPTION: Run a utility command (default is `env`) within the exact environment context that ASDF uses for executing command shims.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\nasdf env <command> [util]\n```\n\n----------------------------------------\n\nTITLE: Install asdf using Pacman\nDESCRIPTION: Installs asdf-vm using Pacman, the package manager for Arch Linux and its derivatives. It uses `git clone` and `makepkg` or a custom AUR helper. This method requires git, and makepkg or an AUR helper to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://aur.archlinux.org/asdf-vm.git && cd asdf-vm && makepkg -si\n```\n\n----------------------------------------\n\nTITLE: Installing tool versions with asdf - Shell\nDESCRIPTION: Demonstrates how to install a specific tool version or the latest stable version using asdf shell commands. Supports specifying exact versions, branches, tags, or commits via the 'ref:' syntax. Installing latest versions can also be done by matching version prefixes.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/manage/versions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> <version>\n# asdf install erlang 17.3\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest\n# asdf install erlang latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> latest:<version>\n# asdf install erlang latest:17\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Help Bash\nDESCRIPTION: This script lists the dependencies of the tool, tailored to the operating system.  Each dependency is output on a new line. It relies on the `bin/help.overview` script for it's output to be considered. It uses environment variables and exits with 0 on success, and non-zero on failure.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.deps\n```\n\n----------------------------------------\n\nTITLE: TravisCI Configuration for asdf Plugin Test\nDESCRIPTION: This is a sample TravisCI configuration file (`.travis.yml`) for testing asdf plugins. It clones the `asdf` repository, sources the `asdf.sh` script, and then runs the `asdf plugin test` command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: c\nscript: asdf plugin test <MY_TOOL> $TRAVIS_BUILD_DIR '<MY_TOOL> --version'\nbefore_script:\n  - git clone https://github.com/asdf-vm/asdf.git asdf\n  - . asdf/asdf.sh\nos:\n  - linux\n  - osx\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Versions in .tool-versions\nDESCRIPTION: This snippet illustrates how to specify multiple tool versions in a .tool-versions file to allow for fallback mechanisms. This allows users to define a primary version with fallbacks to other versions or the system version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npython 3.7.2 2.7.15 system\n```\n\n----------------------------------------\n\nTITLE: Configuring Vuepress Locales for i18n (JavaScript)\nDESCRIPTION: Example JavaScript object structure used within `docs/.vuepress/config.js` to configure internationalization (i18n) in Vuepress. It defines supported locales (e.g., English '/', Brazilian Portuguese '/pt-BR/'), their display names, and references separate configuration objects (`navbar`, `sidebar`) for each locale.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  ...\n  themeConfig: {\n    locales: {\n      \"/\": {\n        selectLanguageName: \"English (US)\",\n        sidebar: sidebar.en,\n        navbar: navbar.en\n      },\n      \"/pt-BR/\": {\n        selectLanguageName: \"Brazilian Portuguese\",\n        sidebar: sidebar.pt_br,\n        navbar: navbar.pt_br\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git and coreutils with Spack (Bash)\nDESCRIPTION: This snippet describes the installation of `git` and `coreutils` using Spack, another package manager for macOS, and can be used on Linux systems too.  Execution may depend on system configuration and user permissions, `sudo` might be needed.  This command installs the required tools and the anticipated result is confirmation of their successful installation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/parts/install-dependencies.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nspack install coreutils git\n```\n\n----------------------------------------\n\nTITLE: Post-Update Callback after Updating Plugin (`bin/post-plugin-update`)\nDESCRIPTION: Runs custom scripts after a plugin has been updated. Useful for tasks like cleanup or post-processing after fetching new plugin code, with environment variables indicating previous and current git references.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Callback to run after plugin update\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example Output Format for bin/list-all Script\nDESCRIPTION: This snippet shows the expected space-separated output format for the `bin/list-all` script. The script must print a single string containing versions separated by spaces, with the newest version appearing last.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n1.0.1 1.0.2 1.3.0 1.4\n```\n\n----------------------------------------\n\nTITLE: Cloning asdf Repository - Git Shell\nDESCRIPTION: These commands clone the asdf repository from GitHub. You can either clone your own fork or the main asdf repository directly. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Add shims to PATH (Fish)\nDESCRIPTION: Adds the asdf shims directory to the PATH environment variable in fish shell's config.fish.  This is a necessary step for asdf to manage tool versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# ASDF configuration code\nif test -z $ASDF_DATA_DIR\n    set _asdf_shims \"$HOME/.asdf/shims\"\nelse\n    set _asdf_shims \"$ASDF_DATA_DIR/shims\"\nend\n\n# Do not use fish_add_path (added in Fish 3.2) because it\n# potentially changes the order of items in PATH\nif not contains $_asdf_shims $PATH\n    set -gx --prepend PATH $_asdf_shims\nend\nset --erase _asdf_shims\n```\n\n----------------------------------------\n\nTITLE: Configuring Nushell to load asdf in config.nu with Homebrew\nDESCRIPTION: This code configures Nushell by setting ASDF_DIR from Homebrew's prefix and sourcing asdf.nu accordingly, enabling asdf within Nushell environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\n\"\\n$env.ASDF_DIR = (brew --prefix asdf | str trim | into string | path join 'libexec')\\n source \" +  (brew --prefix asdf | str trim | into string | path join 'libexec/asdf.nu') | save --append $nu.config-path\n```\n\n----------------------------------------\n\nTITLE: Testing asdf Plugin with Command\nDESCRIPTION: This command tests an asdf plugin by installing it and running a command to validate its functionality. It requires the plugin name and URL.  Optionally it takes a specific tool version or plugin git ref and a test command.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin test <plugin_name> <plugin_url> [--asdf-tool-version <version>] [--asdf-plugin-gitref <git_ref>] [test_command...]\n```\n\n----------------------------------------\n\nTITLE: Linting, Formatting, and Running Tests in asdf Development - Shell\nDESCRIPTION: This snippet provides commands for maintaining code quality and running tests on asdf development code. It includes running shellcheck for static analysis of shell scripts, shfmt for formatting checks, and bats for executing unit tests. Tests can be run on the entire test suite or specific test files. The scripts referenced must be executable and present in the scripts directory.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Shellcheck\n./scripts/shellcheck.bash\n\n# Format\n./scripts/shfmt.bash\n\n# Test: all tests\nbats test/\n# Test: for specific command\nbats test/list_commands.bash\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts - JSON\nDESCRIPTION: This JSON snippet, extracted from `package.json`, represents scripts used for development tasks like starting the local development server and formatting code. Vuepress is used to generate asdf documentation website.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"3\": \"npm run dev\",\n  \"4\": \"npm run format\",\n  \"5\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the latest version matching a pattern\nDESCRIPTION: Displays the latest available version starting with the pattern, useful for version management and candidate selection from remote sources.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nasdf latest <name> <version>\n# Example: asdf latest erlang 17\n```\n\n----------------------------------------\n\nTITLE: Adding asdf.ps1 to PowerShell profile via Homebrew\nDESCRIPTION: This code appends sourcing of asdf.ps1 located in Homebrew's prefix into PowerShell profile, enabling asdf in PowerShell when installed with Homebrew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\necho -e \"\\n. \\\"$(brew --prefix asdf)/libexec/asdf.ps1\\\"\" >> ~/.config/powershell/profile.ps1\n```\n\n----------------------------------------\n\nTITLE: VitePress I18n directory structure - Shell\nDESCRIPTION: Illustrates the directory structure required for internationalized Markdown content in VitePress. Each locale has its own directory containing the translated Markdown files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocs\n├─ README.md\n├─ foo.md\n├─ nested\n│  └─ README.md\n└─ pt-BR\n   ├─ README.md\n   ├─ foo.md\n   └─ nested\n      └─ README.md\n```\n\n----------------------------------------\n\nTITLE: Configure asdf custom data directory for Fish Shell\nDESCRIPTION: Specifies a custom directory for asdf data in Fish shell. This overrides the default `$HOME/.asdf` location. This line should be added to `~/.config/fish/config.fish` before the shims path configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_9\n\nLANGUAGE: Fish\nCODE:\n```\nset -gx --prepend ASDF_DATA_DIR \"/your/custom/data/dir\"\n```\n\n----------------------------------------\n\nTITLE: Updating asdf Plugins (Bash)\nDESCRIPTION: Updates a specific plugin to the latest commit on its default branch or to a particular git-ref. Can also update all installed plugins to their latest versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nasdf plugin update <name> [<git-ref>]\nasdf plugin update --all\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Node.js Version in Current Directory\nDESCRIPTION: This command sets a specific Node.js version (`16.5.0`) for the current directory, which updates (or creates) the `.tool-versions` file there. This allows per-project version management.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nasdf set nodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Showing Latest Available asdf Package Versions (Bash)\nDESCRIPTION: Displays the latest stable version available for a specific package (optionally filtered by a prefix). Can also show the latest stable version for all installed plugins.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nasdf latest <name> [<version>]\nasdf latest --all\n```\n\n----------------------------------------\n\nTITLE: Installing asdf Tool Versions - asdf Shell\nDESCRIPTION: This command instructs asdf to install the specific tool versions listed in the `.tool-versions` file located in the `docs/` directory. This ensures you use the correct versions of tools like Node.js for development.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Example asdf Plugin Test\nDESCRIPTION: This is an example command to test the `nodejs` plugin. It specifies the plugin name, URL, and a command to check the installed version. It confirms that the tool has been installed correctly.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# asdf plugin test <plugin_name>  <plugin_url>                               [test_command]\n  asdf plugin test nodejs         https://github.com/asdf-vm/asdf-nodejs.git node --version\n```\n\n----------------------------------------\n\nTITLE: Invoking bin/list-all Script in asdf Core\nDESCRIPTION: This snippet illustrates how the asdf core executes the `bin/list-all` script. It calls the script located at the path specified by the `${plugin_path}` environment variable, without providing any command-line parameters.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/list-all\"\n```\n\n----------------------------------------\n\nTITLE: Recreating asdf Shims (Bash)\nDESCRIPTION: Manually regenerates the executable shims for a specific version of a given package. This is sometimes needed after manual changes or if shims become outdated.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\nasdf reshim <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Displaying Current asdf Package Versions (Bash)\nDESCRIPTION: Shows the currently active version(s) for a specific package or for all packages, determined by `.tool-versions` files, environment variables, or global settings.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/help.txt#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nasdf current\nasdf current <name>\n```\n\n----------------------------------------\n\nTITLE: ZSH completion setup\nDESCRIPTION: Configures command completion for ZSH. This involves creating the completions directory, generating a completion script, and adding it to the fpath and initializing completion.  This is an optional setup for easier asdf usage.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p \"${ASDF_DATA_DIR:-$HOME/.asdf}/completions\"\n$ asdf completion zsh > \"${ASDF_DATA_DIR:-$HOME/.asdf}/completions/_asdf\"\n# append completions to fpath\nfpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)\n# initialise completions with ZSH's compinit\nautoload -Uz compinit && compinit\n```\n\n----------------------------------------\n\nTITLE: Adding the asdf Node.js Plugin (Shell)\nDESCRIPTION: Adds the official asdf Node.js plugin to the local asdf installation using the `asdf plugin add` command. This plugin is required to manage Node.js versions for the documentation site development.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Pre-Removal Callback before Removing Plugin (`bin/pre-plugin-remove`)\nDESCRIPTION: Allows execution of scripts before a plugin is removed via `asdf plugin remove`, providing an opportunity to handle cleanup or notify users, with the plugin path available via environment variables.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Callback to run before plugin removal\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Fish & Pacman)\nDESCRIPTION: This provides instructions to uninstall asdf when using the Fish shell and Pacman, by removing asdf configurations and then running pacman to remove the packages.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsource /opt/asdf-vm/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf (string join : -- \\$ASDF_DATA_DIR \\$HOME/.asdf)\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring nushell for asdf\nDESCRIPTION: Appends sourcing commands for asdf into Nushell's configuration, allowing command completion and tool management within Nushell environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\n\"\\n$env.ASDF_DIR = ($env.HOME | path join '.asdf')\\n source \" + ($env.HOME | path join '.asdf/asdf.nu') | save --append $nu.config-path\n```\n\n----------------------------------------\n\nTITLE: Install asdf using Go install Shell\nDESCRIPTION: Installs the asdf binary directly from the source repository using the Go toolchain. This is an easy method if Go is already installed. Requires Go version 1.16 or later to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo install github.com/asdf-vm/asdf/cmd/asdf@v0.16.0\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with asdf (Shell)\nDESCRIPTION: Enables setting environment variables related to asdf and commands, facilitating environment-aware execution or scripting. Uses 'asdf env' command syntax, with optional utility parameters.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf env <command> [util]\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Fish & Git)\nDESCRIPTION: This shows how to uninstall asdf using Fish and Git by removing lines from the `config.fish` file, removing completion files, and deleting the asdf directory.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.asdf/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.config/fish/completions/asdf.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf (string join : -- \\$ASDF_DATA_DIR \\$HOME/.asdf)\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Configure asdf completions for Bash Shell\nDESCRIPTION: Enables shell command completions for asdf in Bash. This command sources the completion script generated by `asdf completion bash`. This line should be added to the user's `~/.bashrc`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n. <(asdf completion bash)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies - Shell\nDESCRIPTION: This command installs Node.js dependencies defined in the `docs/package.json` file using npm.  It's necessary for setting up the development environment for the Vuepress documentation website.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Bash completion setup\nDESCRIPTION: Configures command completion for Bash.  This uses a shell command to generate and load completion scripts into .bashrc.  This is an optional, but recommended, setup to make using asdf easier.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n. <(asdf completion bash)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (ZSH & Git)\nDESCRIPTION: This describes how to uninstall asdf using the ZSH shell and Git, including steps for removing the sourcing of `asdf.sh` and removing the completions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n. \"$HOME/.asdf/asdf.sh\"\n# ...\nfpath=(${ASDF_DIR}/completions $fpath)\nautoload -Uz compinit\ncompinit\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-\\$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin with URL\nDESCRIPTION: This command installs an asdf plugin by providing its Git URL. It is the recommended way to install plugins. It uses the plugin name and the repository URL\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# asdf plugin add <name> <git_url>\n  asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing Git and coreutils with Homebrew (Bash)\nDESCRIPTION: This snippet outlines the installation of both `git` and `coreutils` using Homebrew, a package manager for macOS.  No specific user permissions are required typically, however, if the install directory isn't the default then sudo may be required. The command is designed to install necessary prerequisites.  The expected output confirms successful installations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/parts/install-dependencies.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nbrew install coreutils git\n```\n\n----------------------------------------\n\nTITLE: Plugin Script Invocation: bin/list-all\nDESCRIPTION: Shows how asdf invokes the list-all script from a plugin. This script is required and lists all installable versions of a tool.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/list-all\"\n```\n\n----------------------------------------\n\nTITLE: Clone asdf repository for source build Shell\nDESCRIPTION: Clones the asdf repository from GitHub to prepare for building from source. Specifies a particular release version using the `--branch` flag. Requires Git to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/asdf-vm/asdf.git --branch v0.16.0\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin in asdf\nDESCRIPTION: This snippet removes a plugin and all associated tool versions from the system, which helps in cleaning up unused tools and managing storage.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin remove <name>\n# asdf plugin remove erlang\n```\n\n----------------------------------------\n\nTITLE: Example .tool-versions file content\nDESCRIPTION: This example shows the content of a `.tool-versions` file, which specifies the version of a tool (e.g., nodejs). The file is used by asdf to determine the tool version to use in a given context.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/guide/getting-started.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnodejs 16.5.0\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Fish config (Homebrew)\nDESCRIPTION: Adds the asdf initialization script to ~/.config/fish/config.fish, ensuring asdf is available in new Fish shell sessions when installed via Homebrew.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\necho -e \"\\nsource \"(brew --prefix asdf)\"/libexec/asdf.fish\" >> ~/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Updating All Plugins in asdf\nDESCRIPTION: This command updates all installed plugins to their latest commits in the default branch, keeping the environment current with plugin developments.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/manage/plugins.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin update --all\n```\n\n----------------------------------------\n\nTITLE: Listing Installed ASDF Versions Shell\nDESCRIPTION: List all versions of a specific package (tool) that are currently installed on the system. Optionally, filter the listed versions by providing a version string.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nasdf list <name> [version]\n```\n\n----------------------------------------\n\nTITLE: Listing All ASDF Versions Shell\nDESCRIPTION: List all available versions of a specific package (tool), including those not currently installed. Optionally, filter the list by providing a version string.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nasdf list all <name> [<version>]\n```\n\n----------------------------------------\n\nTITLE: Formatting code - Shell\nDESCRIPTION: Formats the code using the `format` script defined in `package.json`. This ensures code consistency before committing changes.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Setting up PowerShell Profile for asdf\nDESCRIPTION: Sources asdf scripts in PowerShell profile scripts to enable usage of asdf commands within PowerShell shells, ensuring cross-shell compatibility.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n. \"$HOME/.asdf/asdf.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Reshimming ASDF Version Shell\nDESCRIPTION: Recreate the executable shims for a specific version of a package (tool). This is often necessary after installing a tool or a plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\nasdf reshim <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Fish config (Git)\nDESCRIPTION: Adds the asdf initialization script to ~/.config/fish/config.fish, ensuring asdf is available in new Fish shell sessions when installed via git.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.asdf/asdf.fish\n```\n\n----------------------------------------\n\nTITLE: Installing ASDF Versions Shell\nDESCRIPTION: Install all package versions that are listed in the `.tool-versions` file located in the current directory or any parent directory.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: TravisCI Configuration for asdf Plugin Testing - YAML\nDESCRIPTION: Provides an example TravisCI configuration file to automate asdf plugin testing across Linux and macOS environments. It includes steps to clone the asdf repository and source its script before running the plugin test command with tool version validation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: c\nscript: asdf plugin test <MY_TOOL> $TRAVIS_BUILD_DIR '<MY_TOOL> --version'\nbefore_script:\n  - git clone https://github.com/asdf-vm/asdf.git asdf\n  - . asdf/asdf.sh\nos:\n  - linux\n  - osx\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Always Ignore Specific Revisions in Blame\nDESCRIPTION: This shell command configures git locally to always use the specified .git-blame-ignore-revs file for git blame operations, streamlining developer workflow by automatically reducing noise without manually specifying the ignore file each time.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Showing Current ASDF Versions Shell\nDESCRIPTION: Display the currently active version for all packages (tools) that have a version set in the current environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nasdf current\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of a tool with asdf\nDESCRIPTION: Executes the asdf install command to install a specified version of a tool. Supports installing latest versions, specific versions, or sources via references. Requires asdf installed and configured with relevant plugins.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nasdf install <name> <version>\n# Example: asdf install erlang 17.3\n```\n\n----------------------------------------\n\nTITLE: Using System Version Instead of ASDF-managed Version\nDESCRIPTION: Configures ASDF to use the system-installed version of a tool instead of an ASDF-managed version by setting the version to 'system'.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nasdf set <name> system\n# asdf set python system\n```\n\n----------------------------------------\n\nTITLE: インストールツールバージョン (shell)\nDESCRIPTION: asdfを使用して、プロジェクトに必要なツールバージョンをインストールします。事前にasdfと関連プラグインがインストールされている必要があります。`docs/.tool-versions`ファイルでバージョンが定義されている必要があります。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Plugin Script Invocation: bin/download\nDESCRIPTION: Shows how asdf invokes the download script from a plugin. This required script downloads source code or binaries for a specific version to the ASDF_DOWNLOAD_PATH directory.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/download\n```\n\n----------------------------------------\n\nTITLE: Installing Specific ASDF Version Shell\nDESCRIPTION: Install a explicitly specified version of a particular package (tool), regardless of what is listed in `.tool-versions`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install <name> <version>\n```\n\n----------------------------------------\n\nTITLE: Displaying ASDF Version Shell\nDESCRIPTION: Print the version number of the ASDF core itself that is currently installed and being used.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/internal/help/help.txt#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\nasdf version\n```\n\n----------------------------------------\n\nTITLE: Installing Git with Pacman (Bash)\nDESCRIPTION: This snippet illustrates the installation of git using the Pacman package manager, mainly used on Arch Linux. The command requires root privileges. It installs `git`, a fundamental dependency. The expected outcome is the successful installation of git and its related tools.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/parts/install-dependencies.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npacman -S git\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Versions - Shell\nDESCRIPTION: This command installs the specified versions of tools managed by asdf, as defined in the `.tool-versions` file.  This ensures the correct versions of Node.js and other dependencies are installed for documentation development.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Plugin Script Invocation: bin/install\nDESCRIPTION: Shows how asdf invokes the install script from a plugin. This required script installs the specified version to the ASDF_INSTALL_PATH directory.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/install\n```\n\n----------------------------------------\n\nTITLE: Invoking asdf Plugin Custom Commands - Shell\nDESCRIPTION: This snippet illustrates examples of how users can execute plugin-defined subcommands through asdf. The commands correspond to the plugin's custom command scripts, facilitating extended tool functionalities accessible from the asdf CLI.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ asdf foo         # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command.bash`\n$ asdf foo bar     # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command.bash bar`\n$ asdf foo help    # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-help.bash`\n$ asdf foo bat man # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bat-man.bash`\n$ asdf foo bat baz # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bat.bash baz`\n```\n\n----------------------------------------\n\nTITLE: Adding asdf.sh to ZSH configuration with Framework plugins\nDESCRIPTION: This note recommends using a ZSH Framework plugin like oh-my-zsh for managing asdf, noting that the plugin should source asdf.sh and be placed appropriately in fpath for proper completion configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Directory Structure for Vuepress i18n Content (Shell)\nDESCRIPTION: Illustrates the required directory structure for organizing localized Markdown content in a Vuepress project using i18n. Each locale defined in the configuration (e.g., `/pt-BR/`) must have a corresponding sub-directory within `docs/` containing translated versions of the Markdown files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocs\n├─ README.md\n├─ foo.md\n├─ nested\n│  └─ README.md\n└─ pt-BR\n   ├─ README.md\n   ├─ foo.md\n   └─ nested\n      └─ README.md\n```\n\n----------------------------------------\n\nTITLE: Cloning asdf Repository from GitHub (Linux/macOS)\nDESCRIPTION: Clones the specific version v0.14.0 of asdf from GitHub to the home directory, setting up the core files for asdf usage. This method is recommended over community-supported alternatives.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/guide/getting-started-legacy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Uninstalling asdf (Bash & Pacman)\nDESCRIPTION: This outlines the uninstallation procedure for asdf when using Pacman as the package manager, detailing steps to remove configurations and the package.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/core.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n. /opt/asdf-vm/asdf.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\npacman -Rs asdf-vm\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"${ASDF_DATA_DIR:-\\$HOME/.asdf}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf \"$HOME/.tool-versions\" \"$HOME/.asdfrc\"\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js plugin with asdf - Shell\nDESCRIPTION: Adds the Node.js plugin to asdf, allowing management of Node.js versions. This is necessary for developing the documentation site.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tool Versions with asdf (Shell)\nDESCRIPTION: Installs the specific versions of development tools (bats, shellcheck, shfmt) listed in the repository's `.tool-versions` file using asdf. This ensures a consistent development environment. Requires the corresponding asdf plugins to be added first.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Add asdf to Elvish config (Pacman)\nDESCRIPTION: Configures asdf for Elvish shell by creating the lib directory, creating symlink for asdf.elv, and adding the necessary lines to rc.elv. Assumes Pacman installation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/guide/getting-started-legacy.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.config/elvish/lib; ln -s /opt/asdf-vm/asdf.elv ~/.config/elvish/lib/asdf.elv\necho \"\\n\"'use asdf _asdf; var asdf~ = $_asdf:asdf~' >> ~/.config/elvish/rc.elv\necho \"\\n\"'set edit:completion:arg-completer[asdf] = $_asdf:arg-completer~' >> ~/.config/elvish/rc.elv\n```\n\n----------------------------------------\n\nTITLE: Using environment variable to set tool version temporarily\nDESCRIPTION: Sets environment variable to specify the version of a tool in the current shell session, useful for temporary or testing purposes without modifying configuration files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nASDF_ELIXIR_VERSION=1.4.0 mix test\n```\n\n----------------------------------------\n\nTITLE: Setting ASDF_CONCURRENCY Environment Variable\nDESCRIPTION: This snippet shows how to configure the ASDF_CONCURRENCY environment variable. This sets the number of cores used during source code compilation, overriding the setting in the asdf configuration file.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nexport ASDF_CONCURRENCY=32\n```\n\n----------------------------------------\n\nTITLE: Running Linting, Formatting, and Testing Scripts for asdf\nDESCRIPTION: Illustrates the shell commands to execute the provided scripts for checking code quality before committing. `./scripts/shellcheck.bash` runs static analysis, `./scripts/shfmt.bash` formats the code, and `bats test/` (or `bats test/specific_file.bash`) runs the test suite.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# 脚本检查\n./scripts/shellcheck.bash\n\n# 格式化\n./scripts/shfmt.bash\n\n# 测试：所有案例\nbats test/\n# 测试：特定命令\nbats test/list_commands.bash\n```\n\n----------------------------------------\n\nTITLE: Linting, Formatting, and Testing Scripts in asdf Core Development with Shell\nDESCRIPTION: These shell commands help contributors maintain code quality by checking linting rules, fixing formatting issues, running all tests, or running specific tests using bats, a Bash automated testing system. They assume the existence of scripts in ./scripts directory and bats installed as a plugin or globally.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Lint\n./scripts/lint.bash --check\n\n# Fix & Format\n./scripts/lint.bash --fix\n\n# Test: all tests\n./scripts/test.bash\n\n# Test: for specific command\nbats test/list_commands.bash\n```\n\n----------------------------------------\n\nTITLE: Accessing Scripts that Need to be Sourced\nDESCRIPTION: Shows how to access scripts that need to be sourced rather than executed directly through ASDF shims.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/manage/versions.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# returns path to main executable in current version\nsource $(asdf which ${PLUGIN})/../script.sh\n\n# returns path to the package installation directory\nsource $(asdf where ${PLUGIN})/bin/script.sh\n```\n\n----------------------------------------\n\nTITLE: Bypassing asdf shims with asdf-direnv plugin\nDESCRIPTION: Mentions the asdf-direnv plugin that can automatically set environment variables to bypass shims in project directories, facilitating seamless environment management.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/manage/versions.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# No code snippet; this section is descriptive.\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Auto-Ignore Revisions for Blame (Shell)\nDESCRIPTION: Configures a Git repository or global settings to automatically use the `.git-blame-ignore-revs` file for all subsequent `git blame` commands. This avoids the need to manually specify the `--ignore-revs-file` option repeatedly. Requires Git to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Using Git Blame with Ignore Revisions File (Shell)\nDESCRIPTION: Demonstrates how to use the `git blame` command while explicitly referencing the `.git-blame-ignore-revs` file. This helps in analyzing code history by excluding commits listed in the file, typically large-scale formatting changes. Requires Git to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs ./test/install_command.bats\n```\n\n----------------------------------------\n\nTITLE: asdf Plugin Test Command Usage Example - Shell\nDESCRIPTION: Shows how the asdf plugin test command is used to test plugin installations and tool functionality, including specifying plugin name, repository URL, tool version, and git reference. Also demonstrates passing test commands to verify the installed tool, with an example testing NodeJS.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin test <plugin_name> <plugin_url> [--asdf-tool-version <version>] [--asdf-plugin-gitref <git_ref>] [test_command...]\n\n# Example:\nasdf plugin test nodejs https://github.com/asdf-vm/asdf-nodejs.git node --version\n```\n\n----------------------------------------\n\nTITLE: Cloning asdf Repository Using Git in Shell\nDESCRIPTION: These shell commands demonstrate how to clone the asdf repository from GitHub, either by cloning a personal fork or the official repository. This is an essential initial step in setting up the local development environment for asdf core contributions. It assumes git is installed and configured on the user's machine.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Testing asdf Plugin with Relative Path\nDESCRIPTION: This command shows how to test an asdf plugin by passing a relative path to the plugin location. This is useful when using certain CI environments where absolute paths may not be appropriate.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin test <tool_name> <path> '<tool_command> --version'\n```\n\n----------------------------------------\n\nTITLE: Uninstall a Specific Tool Version (`bin/uninstall`)\nDESCRIPTION: Removes the specified version of a tool from the system, cleaning up associated shims. It is invoked during `asdf uninstall` commands and outputs status messages to stdout or stderr.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Uninstall the specified version of a tool\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding asdf Development Plugins via Shell Commands\nDESCRIPTION: These shell commands add necessary plugins for bats, shellcheck, and shfmt to the asdf environment, which are essential for testing, linting, and formatting scripts within the asdf core development. Dependencies include internet access and existing asdf installation to manage plugins.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add bats https://github.com/timgluz/asdf-bats.git\nasdf plugin add shellcheck https://github.com/luizm/asdf-shellcheck.git\nasdf plugin add shfmt https://github.com/luizm/asdf-shfmt.git\n```\n\n----------------------------------------\n\nTITLE: Preparing Environment for ASDF Command Execution (`bin/exec-env`)\nDESCRIPTION: Sets up the environment before executing the tool's shims, allowing scripts to configure dependencies based on ASDF environment variables such as install type, version, and path. It supports commands like `asdf which`, `asdf exec`, and `asdf env`, which rely on this script to prepare execution contexts.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Prepare environment for tool shim execution\n# Sets environment variables and configurations before running the actual command\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Post-update callback after plugin is updated (bin/post-plugin-update)\nDESCRIPTION: Runs after a plugin is updated, allowing for cleanup or additional setup based on previous and new git refs. It can be used to manage dependencies or trigger build processes post-update.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/post-plugin-update\"\n```\n\n----------------------------------------\n\nTITLE: Post-addition callback after plugin installed (bin/post-plugin-add)\nDESCRIPTION: Executes after a plugin is added via 'asdf plugin add'. It can perform setup tasks such as initializing configurations or dependencies. Uses environment variables to determine plugin path and source URL.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/post-plugin-add\"\n```\n\n----------------------------------------\n\nTITLE: Installing asdf Tool Versions via Shell Command\nDESCRIPTION: This shell command installs all required versions of development tools specified in the local .tool-versions file, setting up the correct toolchain needed for asdf core development. It depends on asdf's installation and proper configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tool Versions with asdf - Shell\nDESCRIPTION: This snippet uses the 'asdf install' command to install all tool versions specified in the .tool-versions file within the repository. It simplifies installing multiple dependencies to match the development environment required for asdf core development. asdf must be installed and configured on the system beforehand.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tool Versions with asdf\nDESCRIPTION: Shows the `asdf install` command used to install the specific versions of the development tools (bats, shellcheck, shfmt) listed in the project's `.tool-versions` file. This ensures a consistent development environment.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/core.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Testing asdf Plugins CLI\nDESCRIPTION: This command tests an asdf plugin by executing a test command against a specific plugin and its URL.  It allows for the optional specification of a tool version, a git reference for the plugin, and an optional test command. The output of the command specified is then used as the indicator of success.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin test <plugin_name> <plugin_url> [--asdf-tool-version <version>] [--asdf-plugin-gitref <git_ref>] [test_command...]\n```\n\n----------------------------------------\n\nTITLE: Post-Addition Callback after Adding Plugin (`bin/post-plugin-add`)\nDESCRIPTION: Executes custom scripts after a plugin has been added via `asdf plugin add`. Allows plugin authors to perform setup or initialization tasks post plugin installation, with environment variables exposing plugin path and source URL.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Callback to run after plugin is added\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing legacy filenames used for version detection (bin/list-legacy-filenames)\nDESCRIPTION: Outputs a space-separated list of filenames that are traditionally used to determine the version of a tool. Applies only if the user has enabled legacy support via configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/list-legacy-filenames\"\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin Overview Help Bash\nDESCRIPTION: This script provides a general description of the plugin and the tool it manages. It is required for the help output to be displayed for the plugin. It should output a short paragraph describing the tool, avoiding any information already present in asdf-vm documentation. It uses environment variables for context and exits with 0 on success, and non-zero on failure.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.overview\n```\n\n----------------------------------------\n\nTITLE: Adding asdf Development Tool Plugins (Shell)\nDESCRIPTION: Adds the necessary asdf plugins (bats, shellcheck, shfmt) required to manage the versions of development tools used for working on the asdf core. This step assumes asdf is already installed and configured. Requires network access to fetch plugin repositories.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nasdf plugin add bats https://github.com/timgluz/asdf-bats.git\nasdf plugin add shellcheck https://github.com/luizm/asdf-shellcheck.git\nasdf plugin add shfmt https://github.com/luizm/asdf-shfmt.git\n```\n\n----------------------------------------\n\nTITLE: Providing Configuration Help Bash\nDESCRIPTION: This script provides any required or optional configuration information for the plugin and the tool. It can include environment variables or other flags needed to install or compile the tool. This script relies on `bin/help.overview` for output to be considered. It uses environment variables and exits with 0 on success, and non-zero on failure.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.config\n```\n\n----------------------------------------\n\nTITLE: Providing plugin and tool overview information (bin/help.overview)\nDESCRIPTION: Outputs a brief description about a plugin or managed tool, excluding asdf's core documentation. It is meant for user or script assistance, leveraging environment variables to tailor the output according to OS or installed versions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.overview\n```\n\n----------------------------------------\n\nTITLE: Fetching the executable path for a tool command (bin/exec-path)\nDESCRIPTION: Returns the relative path to the executable within the specified installation path, allowing overrides. It is used by shims to locate binaries and can modify the path based on plugin logic or configurations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/exec-path\" \"$install_path\" \"$cmd\" \"$relative_path\"\n```\n\n----------------------------------------\n\nTITLE: Listing Links for Help Bash\nDESCRIPTION: This script lists links relevant to the plugin and tool. Links are formatted as either `<title>: <link>` or just `<link>`. It relies on the `bin/help.overview` script for it's output to be considered. The script uses environment variables and exits with 0 on success, and non-zero on failure.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/help.links\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode GitLens for Blame Ignore Revisions (JSON)\nDESCRIPTION: Provides a JSON configuration snippet for the `.vscode/settings.json` file to integrate the `.git-blame-ignore-revs` functionality with the GitLens extension in VSCode. This automatically applies the ignore file when using GitLens blame features. Requires VSCode and the GitLens extension to be installed.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/core.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"gitlens.advanced.blame.customArguments\": [\n    \"--ignore-revs-file\",\n    \".git-blame-ignore-revs\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode GitLens Configuration to Use .git-blame-ignore-revs File in JSON\nDESCRIPTION: This JSON snippet configures the VSCode GitLens extension to pass the --ignore-revs-file argument to git blame, integrating the .git-blame-ignore-revs file into the IDE blame views. It requires VSCode with GitLens installed and the .git-blame-ignore-revs file present.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/core.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitlens.advanced.blame.customArguments\": [\n    \"--ignore-revs-file\",\n    \".git-blame-ignore-revs\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Legacy Version Files (`bin/parse-legacy-file`)\nDESCRIPTION: Extracts a version number from legacy files like `package.json` or `go.mod`. Ensures deterministic output of the version string regardless of file validity or installed state, used to identify tool versions from legacy configuration files.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# Parse legacy version files to determine the tool's version number\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Development Plugins to asdf\nDESCRIPTION: Demonstrates how to add the required asdf plugins for core development: `bats` for testing, `shellcheck` for static analysis, and `shfmt` for formatting. These plugins manage the specific versions of the tools needed, as defined in the `.tool-versions` file.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/core.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nasdf plugin add bats https://github.com/timgluz/asdf-bats.git\nasdf plugin add shellcheck https://github.com/luizm/asdf-shellcheck.git\nasdf plugin add shfmt https://github.com/luizm/asdf-shfmt.git\n```\n\n----------------------------------------\n\nTITLE: Running the VitePress development server - Shell\nDESCRIPTION: Starts the local development server using the `dev` script defined in `package.json`. This allows previewing changes to the documentation in real-time.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Listing Legacy Version Filenames (`bin/list-legacy-filenames`)\nDESCRIPTION: Outputs a space-separated list of legacy configuration filenames, such as `.ruby-version` and `.rvmrc`, for backwards compatibility. Used when the legacy version file support is enabled in the user's `.asdfrc`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/plugins/create.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"\"\"#!/bin/bash\n\n# List legacy filenames used for version detection\"\"\"\n```\n\n----------------------------------------\n\nTITLE: I18n Locale Configuration - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure locales for internationalization (i18n) in Vuepress.  It defines the supported languages, their URL prefixes, language names in the dropdown menu, and the corresponding navigation bar and sidebar configurations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  ...\n  themeConfig: {\n    locales: {\n      \"/\": {\n        selectLanguageName: \"English (US)\",\n        sidebar: sidebar.en,\n        navbar: navbar.en\n      },\n      \"/pt-BR/\": {\n        selectLanguageName: \"Brazilian Portuguese\",\n        sidebar: sidebar.pt_br,\n        navbar: navbar.pt_br\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: i18n 多言語ファイル配置 (shell)\nDESCRIPTION: VitePress で多言語対応するためのファイル配置の例です。各言語の Markdown コンテンツをルート構成ファイル内の locales のキーと同じ名前のディレクトリ配下に配置する必要があります。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocs\n├─ README.md\n├─ foo.md\n├─ nested\n│  └─ README.md\n└─ pt-BR\n   ├─ README.md\n   ├─ foo.md\n   └─ nested\n      └─ README.md\n```\n\n----------------------------------------\n\nTITLE: Cloning the asdf Repository using Git\nDESCRIPTION: Provides Git commands to clone the asdf version manager repository. Users can either clone their own fork from GitHub (replacing `<GITHUB_USER>`) or directly clone the main `asdf-vm/asdf` repository.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/core.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 克隆你 fork 的 asdf\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# 或者直接克隆 asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: クローン asdf リポジトリ (shell)\nDESCRIPTION: asdfリポジトリをGitからクローンするためのコマンドです。github_userのforkからクローンするか、デフォルトのasdfリポジトリからクローンするか選択できます。Gitがインストールされている必要があります。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# clone your fork\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# or clone asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Authenticated curl Command for API Rate Limiting Mitigation - Shell\nDESCRIPTION: This snippet provides a shell script pattern to make authenticated API calls to GitHub by conditionally adding an Authorization header containing a GITHUB_API_TOKEN environment variable, helping mitigate API rate limits in CI or automation workflows.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/plugins/create.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncmd=\"curl --silent\"\nif [ -n \"$GITHUB_API_TOKEN\" ]; then\n cmd=\"$cmd -H 'Authorization: token $GITHUB_API_TOKEN'\"\nfi\n\ncmd=\"$cmd $releases_path\"\n```\n\n----------------------------------------\n\nTITLE: TravisCI configuration for asdf plugin test\nDESCRIPTION: This YAML snippet configures a TravisCI build to test an asdf plugin.  It specifies the language (c), the command to run the plugin test (using the `asdf plugin test` command), the build directory as a path, and the OS to test on. It also includes a `before_script` section to clone asdf and source `asdf.sh`.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: c\n  script: asdf plugin test <MY_TOOL> $TRAVIS_BUILD_DIR '<MY_TOOL> --version'\n  before_script:\n    - git clone https://github.com/asdf-vm/asdf.git asdf\n    - . asdf/asdf.sh\n  os:\n    - linux\n    - osx\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in .tool-versions\nDESCRIPTION: This snippet shows how to add comments in the `.tool-versions` file to provide context and improve readability.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/manage/configuration.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nruby 2.5.3 # This is a comment\n# This is another comment\nnodejs 10.15.0\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js dependencies - Shell\nDESCRIPTION: Installs the Node.js dependencies required for the documentation site from `docs/package.json`.  This is required to run the development server and build the documentation.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting VitePress Development Server - npm Shell\nDESCRIPTION: This command executes the `dev` script defined in `package.json`, which typically starts the local VitePress development server. This allows developers to preview changes to the documentation in real-time.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for asdf plugin test\nDESCRIPTION: This YAML snippet configures a GitHub Action workflow to test an asdf plugin. It specifies the workflow name, trigger events (push and pull request), the operating systems to test on, and uses the `asdf-vm/actions/plugin-test@v2` action to run the plugin tests. The `command` parameter specifies the command to run to verify the plugin.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n\n  jobs:\n    plugin_test:\n      name: asdf plugin test\n      strategy:\n        matrix:\n          os:\n            - ubuntu-latest\n            - macos-latest\n      runs-on: ${{ matrix.os }}\n      steps:\n        - name: asdf_plugin_test\n          uses: asdf-vm/actions/plugin-test@v2\n          with:\n            command: \"<MY_TOOL> --version\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Bats Tests using File Descriptor 3\nDESCRIPTION: Example demonstrating how to print debug messages within a Bats test script that will only be visible when running Bats with the TAP output format (`-t` flag). Output redirected to file descriptor 3 (`>&3`) is used for this purpose.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# test/some_tests.bats\n\nprintf \"%s\\n\" \"Will not be printed during bats test/some_tests.bats\"\nprintf \"%s\\n\" \"Will be printed during bats -t test/some_tests.bats\" >&3\n```\n\n----------------------------------------\n\nTITLE: VitePress I18n configuration - JavaScript\nDESCRIPTION: Defines the locale configuration for internationalization (i18n) in VitePress. It specifies the supported languages, their labels, language codes, and references to navigation and sidebar configurations.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/contribute/documentation.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// docs/.vitepress/config.js\nexport default defineConfig({\n  ...\n  locales: {\n    root: {\n      label: \"English\",\n        lang: \"en-US\",\n        themeConfig: {\n        nav: navbars.en,\n          sidebar: sidebars.en,\n      },\n    },\n    \"pt-br\": {\n      label: \"Brazilian Portuguese\",\n        lang: \"pr-br\",\n        themeConfig: {\n        nav: navbars.pt_br,\n          sidebar: sidebars.pt_br,\n      },\n    },\n    \"zh-hans\": {\n      label: \"简体中文\",\n        lang: \"zh-hans\",\n        themeConfig: {\n        nav: navbars.zh_hans,\n          sidebar: sidebars.zh_hans,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Referencing Development Scripts in package.json (JSON)\nDESCRIPTION: Highlights lines 3-5 within the project's `package.json` file, indicating where development-related npm scripts (like `dev` and `format`) are defined. These scripts are used to run the development server and format code.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/documentation.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n@[code json{3-5}](../package.json)\n```\n\n----------------------------------------\n\nTITLE: ローカル開発サーバー起動 (npm)\nDESCRIPTION: ローカル開発サーバーを起動するためのnpmコマンドです。`package.json`に`dev`スクリプトが定義されている必要があります。VitePressを用いてドキュメントサイトを開発できます。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Code - npm Shell\nDESCRIPTION: This command executes the `format` script defined in `package.json`, which is used to automatically format the code files in the project. Running this before committing ensures consistent code style.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: コードフォーマット (npm)\nDESCRIPTION: コードをフォーマットするためのnpmコマンドです。`package.json`に`format`スクリプトが定義されている必要があります。コミット前にコードのフォーマットを適用します。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Cloning asdf Repository - Shell\nDESCRIPTION: These commands demonstrate how to clone the asdf repository, either from your fork or directly from the official asdf repository. It sets up the development environment for contributing to the documentation and website.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# 克隆你 fork 的 asdf\ngit clone https://github.com/<GITHUB_USER>/asdf.git\n# 或者直接克隆 asdf\ngit clone https://github.com/asdf-vm/asdf.git\n```\n\n----------------------------------------\n\nTITLE: Specifying ASDF Version\nDESCRIPTION: A simple version specification that indicates version 0.15.0 of asdf-vm or an asdf plugin. This file is typically used by asdf to determine which version of a tool to install or use.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/version.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.15.0\n```\n\n----------------------------------------\n\nTITLE: Determining the latest stable version of a tool in asdf (bin/latest-stable)\nDESCRIPTION: This script outputs the latest stable (non-pre-release) version of a specified tool, filtered by the first argument. It is used internally by asdf to identify the current stable release, considering environment variables for version control. It supports commands like 'asdf latest <tool>' and is crucial for automating version updates.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}\"/bin/latest-stable \"$query\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Internationalization (i18n) - JavaScript\nDESCRIPTION: This JavaScript snippet from `docs/.vitepress/config.js` shows how internationalization (i18n) is configured in VitePress. It defines different locales, their labels, languages, and references specific navbar and sidebar configurations for each locale.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/contribute/documentation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// docs/.vitepress/config.js\nexport default defineConfig({\n  ...\n  locales: {\n    root: {\n      label: \"English\",\n        lang: \"en-US\",\n        themeConfig: {\n        nav: navbars.en,\n          sidebar: sidebars.en,\n      },\n    },\n    \"pt-br\": {\n      label: \"Brazilian Portuguese\",\n        lang: \"pr-br\",\n        themeConfig: {\n        nav: navbars.pt_br,\n          sidebar: sidebars.pt_br,\n      },\n    },\n    \"zh-hans\": {\n      label: \"简体中文\",\n        lang: \"zh-hans\",\n        themeConfig: {\n        nav: navbars.zh_hans,\n          sidebar: sidebars.zh_hans,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a specific version of a tool (bin/uninstall)\nDESCRIPTION: Removes the specified version of a tool, outputting any messages to stdout or stderr. It is invoked during 'asdf uninstall' commands and cleans up installed files and shims related to that version.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/uninstall\"\n```\n\n----------------------------------------\n\nTITLE: Listing bin directories for a tool version (bin/list-bin-paths)\nDESCRIPTION: Outputs directories containing executable files for a specific tool version, used by asdf to generate shims. If the script does not exist, asdf defaults to certain standard directories within the installation path.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ko-kr/plugins/create.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"${plugin_path}/bin/list-bin-paths\"\n```\n\n----------------------------------------\n\nTITLE: VitePress 設定ファイル (javascript)\nDESCRIPTION: VitePress サイトのルート構成ファイル。サイトの設定を定義します。 サイトの仕様については、VitePressのドキュメントを参照してください。このファイルは、サイトのタイトル、テーマ、ナビゲーションバー、サイドバーなどを設定するために使用されます。\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/documentation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// docs/.vitepress/config.js\nexport default defineConfig({\n  ...\n  locales: {\n    root: {\n      label: \"English\",\n        lang: \"en-US\",\n        themeConfig: {\n        nav: navbars.en,\n          sidebar: sidebars.en,\n      },\n    },\n    \"pt-br\": {\n      label: \"Brazilian Portuguese\",\n        lang: \"pr-br\",\n        themeConfig: {\n        nav: navbars.pt_br,\n          sidebar: sidebars.pt_br,\n      },\n    },\n    \"zh-hans\": {\n      label: \"简体中文\",\n        lang: \"zh-hans\",\n        themeConfig: {\n        nav: navbars.zh_hans,\n          sidebar: sidebars.zh_hans,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging BATS Tests with TAP Output - Shell\nDESCRIPTION: This snippet illustrates how to write BATS test scripts to facilitate debugging by printing output selectively. Using the special file descriptor '&>3' within the test allows output to be shown only when running bats with the '-t' flag, avoiding clutter during normal test runs. This technique helps in diagnosing test failures while following bats-core documentation conventions.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/pt-br/contribute/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# test/some_tests.bats\n\nprintf \"%s\\n\" \"Will not be printed during bats test/some_tests.bats\"\nprintf \"%s\\n\" \"Will be printed during bats -t test/some_tests.bats\" >&3\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for I18n - Shell\nDESCRIPTION: This Shell code represents the directory structure required for internationalized content in Vuepress.  Each language has its own directory containing translated versions of the markdown files.  The directory name should match the locale defined in the Vuepress configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/zh-hans/contribute/documentation.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocs\n├─ README.md\n├─ foo.md\n├─ nested\n│  └─ README.md\n└─ pt-BR\n   ├─ README.md\n   ├─ foo.md\n   └─ nested\n      └─ README.md\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLens in VSCode for Blame Ignore Revisions - JSON\nDESCRIPTION: Shows a JSON settings block for Visual Studio Code, which configures the GitLens extension to always pass the --ignore-revs-file and .git-blame-ignore-revs file to git blame. Requires GitLens and an existing .git-blame-ignore-revs file. Should be placed inside .vscode/settings.json for per-project configuration.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitlens.advanced.blame.customArguments\": [\n    \"--ignore-revs-file\",\n    \".git-blame-ignore-revs\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring git blame to Ignore Specific Revisions - Shell\nDESCRIPTION: Demonstrates invoking git blame with the --ignore-revs-file flag and configuring git globally to always use .git-blame-ignore-revs. Used to reduce noise in blame results for bulk changes or formatting commits. Requires git and the .git-blame-ignore-revs file to exist in the repository root; can also be adopted into development IDEs for improved review clarity.\nSOURCE: https://github.com/asdf-vm/asdf/blob/master/docs/ja-jp/contribute/core.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs ./test/install_command.bats\n\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n\n```"
  }
]