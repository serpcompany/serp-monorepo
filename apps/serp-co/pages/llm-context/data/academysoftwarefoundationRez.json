[
  {
    "owner": "academysoftwarefoundation",
    "repo": "rez",
    "content": "TITLE: Defining a Package using package.py in Rez\nDESCRIPTION: This code snippet shows a typical package.py file defining a Rez package. It specifies the package name, version, author, dependencies (requires), and commands to configure the environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nname = \"requests\"\n\nversion = \"2.8.1\"\n\nauthors = [\"Kenneth Reitz\"]\n\nrequires = [\n    \"python-2.7+\"\n]\n\ndef commands():\n    env.PYTHONPATH.append(\"{root}/python\")\n```\n\n----------------------------------------\n\nTITLE: Example Package Definition File - Python\nDESCRIPTION: This snippet demonstrates a basic package definition file in Rez, showing how to define package name, version, description, authors, tools, and requirements. It also includes a `commands` function to modify the environment when the package is used, and a UUID for package identification.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname = 'sequence'\n\nversion = '2.1.2'\n\ndescription = 'Sequence detection library.'\n\nauthors = ['ajohns']\n\ntools = [\n   'lsq',\n   'cpq'\n]\n\nrequires = [\n   'python-2.6+<3',\n   'argparse'\n]\n\ndef commands():\n   env.PATH.append(\"{root}/bin\")\n   env.PYTHONPATH.append(\"{root}/python\")\n\nuuid = '6c43d533-92bb-4f8b-b812-7020bf54d3f1'\n```\n\n----------------------------------------\n\nTITLE: Defining Config Attribute with Scope in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `config` attribute in a Rez package definition file using the `scope` function.  The `config` attribute allows packages to override Rez configuration settings. The `scope` function ensures that the configuration changes are applied within a specific context.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwith scope(\"config\"):\n   release_packages_path = \"/software/packages/apps\"\n```\n\n----------------------------------------\n\nTITLE: Appending to Environment Variables\nDESCRIPTION: This code shows how to append a value to an existing environment variable using the `env.append()` function. This is commonly used to add paths to variables like `PATH` and `PYTHONPATH`. The example appends a path to the `PATH` variable.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nenv.PATH.append(\"{root}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Example Package Definition with Commands\nDESCRIPTION: This code demonstrates a comprehensive package definition with a 'commands' section, illustrating how to set environment variables, define dependencies, and handle conditional logic based on the resolved environment. It shows how to add Python modules, executables to the environment, setting include paths during builds, configuring files, and handling specific dependencies like Maya.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname = \"foo\"\n\nversion = \"1.0.0\"\n\nrequires = [\n   \"python-2.7\",\n   \"~maya-2015\"\n]\n\ndef commands():\n   import os.path  # imports MUST be inline to the function\n\n   # add python module, executables\n   env.PYTHONPATH.append(\"{this.root}/python\")\n   env.PATH.append(\"{this.root}/bin\")\n\n   # show include path if a build is occurring\n   if building:\n      env.FOO_INCLUDE_PATH = \"{this.root}/include\"\n\n   # debug support to point at local config\n   if defined(\"DEBUG_FOO\"):\n      conf_file = os.path.expanduser(\"~/.foo/config\")\n   else:\n      conf_file = \"{this.root}/config\"\n   env.FOO_CONFIG_FILE = conf_file\n\n   # if maya is in use then include the maya plugin part of this package\n   if \"maya\" in resolve:\n      env.MAYA_PLUG_IN_PATH.append(\"{this.root}/maya/plugins\")\n\n      if resolve.maya.version.minor == \"sp3\":\n            error(\"known issue with GL renderer in service pack 3, beware\")\n\n   # license file per major version\n   env.FOO_LIC = \"/lic/foo_{this.version.major}.lic\"\n```\n\n----------------------------------------\n\nTITLE: Defining Commands Function in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `commands` function in a Rez package definition file. The `commands` function contains Python code that defines how to update the environment when the package is used. It allows setting, unsetting, prepending, and appending environment variables, creating aliases, sourcing scripts, and printing messages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef commands():\n   env.PYTHONPATH.append(\"{root}/python\")\n   env.PATH.append(\"{root}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Prepending to Environment Variables\nDESCRIPTION: This code snippet illustrates how to prepend a value to an environment variable using the `env.prepend()` function. This is similar to `env.append()` but adds the value to the beginning of the variable. The example prepends a path to the `PYTHONPATH` variable.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nenv.PYTHONPATH.prepend(\"{root}/python\")\n```\n\n----------------------------------------\n\nTITLE: Custom Build Command in package.py (Python)\nDESCRIPTION: Demonstrates how to define a custom build command in the `package.py` file using the `build_command` attribute. This specifies the command to execute during the build process, using `bash` to run a script located in the package root, and passing an `install` argument if an installation is occurring.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nname = \"nuke_utils\"\n\nversion = \"1.2.3\"\n\nbuild_command = \"bash {root}/build.sh {install}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Python Environment with rez-env (Text)\nDESCRIPTION: This snippet showcases how to use the `rez-env` command to create a Rez environment containing Python. It then executes the `which python` command within the created environment to verify that the correct Python interpreter is being used. This demonstrates how Rez isolates and configures environments.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n]$\\ rez-env python -- which python\n/home/ajohns/packages/python-2.7.8/platform-linux/arch-x86_64/os-Ubuntu-12.04/bin/python\n```\n\n----------------------------------------\n\nTITLE: Rez Implicit Packages Configuration (Python)\nDESCRIPTION: This Python code snippet shows the default configuration for implicit packages in Rez. It defines weak requirements on the platform, architecture, and operating system. This ensures that if a platform-dependent package is requested, its dependencies match the current system.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/basic_concepts.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimplicit_packages = [\n   \"~platform=={system.platform}\",\n   \"~arch=={system.arch}\",\n   \"~os=={system.os}\",\n]\n```\n\n----------------------------------------\n\nTITLE: Appending to PATH and CMAKE_MODULE_PATH in Rez environment\nDESCRIPTION: This code snippet shows how to append paths to environment variables PATH and CMAKE_MODULE_PATH within a Rez package definition. The `env` object provides methods for modifying environment variables, and `{this._bin_path}` and `{root}` are string expansion placeholders that will be replaced with the actual paths at runtime. This is used to extend the environment to include the current package.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nenv.PATH.append(\"{this._bin_path}\")\n\nif building:\n   env.CMAKE_MODULE_PATH.append(\"{root}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Defining Pre Commands Function in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `pre_commands` function in a Rez package definition file. Similar to the `commands` function, this function contains Python code to modify the environment, but it is executed in a first pass, ensuring it runs before all other packages' `commands` functions. `this.root` resolves to the current package install path.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef pre_commands():\n   import os.path\n   env.FOO_PLUGIN_PATH = os.path.join(this.root, \"plugins\")\n```\n\n----------------------------------------\n\nTITLE: Defining Post Commands Function in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `post_commands` function in a Rez package definition file. Similar to the `commands` function, the `post_commands` function contains Python code to modify the environment, but it is executed in a final phase after all other packages' `commands` functions have been run. `@` expands to the current package's root directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef post_commands():\n   env.FOO_PLUGIN_PATH.append(\"@\")\n```\n\n----------------------------------------\n\nTITLE: Executing a Command within Rez Environment (Text)\nDESCRIPTION: This snippet executes the `hello` command inside a rez environment configured with the `hello_world` package. It assumes the `hello` command is provided by that package. The snippet demonstrates that the rez environment has been correctly set up so the `hello` command is accessible.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> ]$ hello\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Defining Requires Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `requires` attribute in a Rez package definition file. The `requires` attribute is a list of strings representing the package's dependencies. Each string is a package request, specifying the required package and version constraints.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nrequires = [\n   \"python-2\",\n   \"maya-2016\",\n   \"maya_utils-3.4+<4\"\n]\n```\n\n----------------------------------------\n\nTITLE: File Manipulation Using Python\nDESCRIPTION: This code provides an alternative to using the `command()` function for file manipulation. It uses the `shutil` and `os.path` modules to remove a directory if it exists.  This approach is preferred over using shell commands for cross-platform compatibility and immediate execution.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef commands():\n   import shutil\n   import os.path\n   path = os.path.expanduser(\"~/.foo_plugin\")\n   if os.path.exists(path):\n         shutil.rmtree(path)\n```\n\n----------------------------------------\n\nTITLE: Defining Variants in Rez Package Python\nDESCRIPTION: This code snippet demonstrates how to define variants in a Rez package using the `variants` attribute in the `package.py` file. Each variant is a list of dependencies that are appended to the `requires` list for that variant. In this case, the package `my_maya_plugin` has two variants, one for `maya-2016.sp2` and another for `maya-2017`, and both require `openexr-2.2`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname = \"my_maya_plugin\"\n\nversion = \"1.0.0\"\n\nrequires = [\n   \"openexr-2.2\"\n]\n\nvariants = [\n   [\"maya-2016.sp2\"],\n   [\"maya-2017\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Alias\nDESCRIPTION: This code snippet shows how to create a command alias using the `alias()` function within a Rez package definition. This allows you to define a short name for a longer command, simplifying its usage in the resolved environment. The example aliases the 'nukex' command to 'Nuke -x'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalias(\"nukex\", \"Nuke -x\")\n```\n\n----------------------------------------\n\nTITLE: Creating Rez Environment via API\nDESCRIPTION: This snippet creates a resolved environment using the Rez API. It demonstrates how to import the `ResolvedContext` class, create an environment with specific package requests (including version constraints and exclusion), and execute a command within that environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> import subprocess\n>>> from rez.resolved_context import ResolvedContext\n>>>\n>>> r = ResolvedContext([\"houdini-12.5+\", \"houdini-0+<13\", \"java\", \"!java-1.8+\"])\n>>> p = r.execute_shell(command='which hescape', stdout=subprocess.PIPE)\n>>> out, err = p.communicate()\n>>>\n>>> print(out)\n'/software/ext/houdini/12.5.562/bin/hescape'\n```\n\n----------------------------------------\n\nTITLE: Rez Environment Creation Example (Text)\nDESCRIPTION: This example demonstrates the use of the rez-env command to create a resolved environment. It requests the 'foo' and 'bah' packages, and the output shows the resolved packages, including their versions and locations.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/basic_concepts.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env foo bah\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@14jun01.methodstudios.com, on Wed Oct 22 12:44:00 2014,\nusing Rez v2.0.rc1.10\n\nrequested packages:\nfoo\nbah\n\nresolved packages:\neek-2.6   /packages/inhouse/eek/2.6\nfoo-1.2   /packages/inhouse/foo/1.2\nbah-4     /packages/inhouse/bah/4\n\n> ]$ █\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: This snippet shows how to set an environment variable using the `setenv` function. It provides an example of setting a plugin path.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsetenv(\"FOO_PLUGIN_PATH\", \"{root}/plugins\")\n```\n\n----------------------------------------\n\nTITLE: Defining Early Bound Attributes in Rez\nDESCRIPTION: This code shows how to define early-bound attributes `_bin_path` and `_version` in a Rez package definition using the `@early()` decorator. These attributes are evaluated during package build time, and their values are cached for later use. The `_bin_path` determines the directory of the python executable and the `_version` fetches the python version.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@early()\ndef _bin_path():\n   return this._exec_python(\n      \"_bin_path\",\n      \"import sys, os.path; print(os.path.dirname(sys.executable))\")\n\ndef _version():\n   return _exec_python(\n      \"version\",\n      \"import sys; print(sys.version.split()[0])\")\n```\n\n----------------------------------------\n\nTITLE: Baking Resolves to a File with rez-env\nDESCRIPTION: This snippet demonstrates how to save a resolved context to a file using the `--output` flag with `rez-env`. Instead of invoking a subshell, the resolved context is written directly to the specified file (test.rxt). This allows for later reconstruction of the same environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env foo bah --output test.rxt\n```\n\n----------------------------------------\n\nTITLE: Installing Package via Pip\nDESCRIPTION: This command demonstrates how to install a package using pip, ensuring it's installed within the correct Python interpreter context. The `-E` flag prevents environment variables from interfering, and `-s` removes the user site from consideration.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/pip.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ /path/to/python -E -s -m pip install <package>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: This code demonstrates setting environment variables using the `env` object.  Environment variables can be accessed as attributes or dictionary keys. The example sets `FOO_DEBUG` and `BAH_LICENSE` environment variables.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nenv.FOO_DEBUG = 1\nenv[\"BAH_LICENSE\"] = \"/lic/bah.lic\"\n```\n\n----------------------------------------\n\nTITLE: Custom Build Command with Make (Python)\nDESCRIPTION: Illustrates how to define a custom build command in `package.py` using `make`. The command executes the `Makefile` located in the package's root directory and includes the `install` target if an installation is occurring.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in package.py\nbuild_command = \"make -f {root}/Makefile {install}\"\n```\n\n----------------------------------------\n\nTITLE: Requires based on `building` - Python\nDESCRIPTION: This example shows how to modify the `requires` attribute based on whether the package is being built or not. The `building` attribute is True during the build process and False otherwise. This allows to define different requirements for build time and runtime.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@early()\ndef requires():\n   if building:\n      return [\"python-2\"]\n   else:\n      return [\"runtimeonly-1.2\", \"python-2\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Resolved Packages\nDESCRIPTION: This snippet demonstrates how to access resolved packages using the `resolve` object. It shows how to check for the presence of a resolved package and access its attributes like version.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nif \"maya\" in resolve:\n   info(\"Maya version is %s\", resolve.maya.version)\n   # ..or resolve[\"maya\"].version\n```\n\n----------------------------------------\n\nTITLE: Late Binding Function - Tools - Python\nDESCRIPTION: This snippet demonstrates a late binding function for the `tools` attribute in Rez. It lists executables in the 'bin' directory, filtering out administrative tools based on the `_USER_ROLE` environment variable. Imports must occur inside the function.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@late()\ndef tools():\n   import os\n\n   # get everything in bin dir\n   binpath = os.path.join(this.root, \"bin\")\n   result = os.listdir(binpath)\n\n   # we don't want artists to see the admin tools\n   if os.getenv(\"_USER_ROLE\") != \"superuser\":\n      result = set(result) - set([\"delete-all\", \"mod-things\"])\n\n   return list(result)\n```\n\n----------------------------------------\n\nTITLE: Boost Package Commands (Python)\nDESCRIPTION: Shows an example of a `commands` function within a Rez package (boost). When `building` is True (during a build), it appends the package's CMake module path to the environment variable `CMAKE_MODULE_PATH`, allowing other packages to find the boost library during their builds.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef commands():\n   if building:\n      # there is a 'FindBoost.cmake' file in this dir..\n      env.CMAKE_MODULE_PATH.append(\"{root}/cmake\")\n```\n\n----------------------------------------\n\nTITLE: Platform as Variant Example Python\nDESCRIPTION: This code snippet demonstrates how to define variants based on platform, architecture, and operating system. This is a common pattern to provide different builds for different environments. The snippet shows two variants, one for Ubuntu 12.04 and another for Ubuntu 16.04, both on Linux x86_64.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in package.py\nvariants = [\n   [\"platform-linux\", \"arch-x86_64\", \"os-Ubuntu-12.04\"],\n   [\"platform-linux\", \"arch-x86_64\", \"os-Ubuntu-16.04\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Rez Plugin Folder Structure\nDESCRIPTION: This demonstrates the required folder structure for a Rez plugin.  It shows that each plugin type needs an '__init__.py' file, and can optionally contain a 'rezconfig.py' to define configuration settings, along with one or more Python files that implement the plugin's functionality.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/plugins.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/plugin_type\n    /__init__.py (adds plugin path to rez)\n    /rezconfig.py (defines configuration settings for your plugin)\n    /plugin_file1.py (your plugin file)\n    /plugin_file2.py (your plugin file)\n    etc.\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variable Value\nDESCRIPTION: This code demonstrates how to get the value of an environment variable using the `getenv()` function.  An exception is raised if the variable is not set. The example checks if the `REZ_MAYA_VERSION` is '2016.sp1'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nif getenv(\"REZ_MAYA_VERSION\") == \"2016.sp1\":\n   pass\n```\n\n----------------------------------------\n\nTITLE: Package Definition Using Ephemerals as Global Options (Python)\nDESCRIPTION: This Python code snippet shows how to use a `.cli` ephemeral as a global whitelist to control which packages have their command-line tools enabled. If `.cli` is specified, only whitelisted packages will have their `bin` directory added to the `PATH`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nname = 'bah'\n\ndef commands():\n   if intersects(ephemerals.get_range('cli', ''), 'bah'):\n      env.PATH.append('{root}/bin')\n```\n\n----------------------------------------\n\nTITLE: Binding Essential Packages with rez-bind (Text)\nDESCRIPTION: This snippet demonstrates using the `rez-bind` command with the `--quickstart` option to automatically create Rez packages for commonly used system software like platform, arch, os, python, rez, rezgui, setuptools, and pip. It maps existing system installations to Rez packages in the specified package directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n]$\\ rez-bind --quickstart\nBinding platform into /home/ajohns/packages...\nBinding arch into /home/ajohns/packages...\nBinding os into /home/ajohns/packages...\nBinding python into /home/ajohns/packages...\nBinding rez into /home/ajohns/packages...\nBinding rezgui into /home/ajohns/packages...\nBinding setuptools into /home/ajohns/packages...\nBinding pip into /home/ajohns/packages...\n\nSuccessfully converted the following software found on the current system into Rez packages:\n\nPACKAGE     URI\n-------\\     ---\narch        /home/ajohns/packages/arch/x86_64/package.py\nos          /home/ajohns/packages/os/osx-10.11.5/package.py\npip         /home/ajohns/packages/pip/8.0.2/package.py\nplatform    /home/ajohns/packages/platform/osx/package.py\npython      /home/ajohns/packages/python/2.7.11/package.py\nrez         /home/ajohns/packages/rez/2.0.rc1.44/package.py\nrezgui      /home/ajohns/packages/rezgui/2.0.rc1.44/package.py\nsetuptools  /home/ajohns/packages/setuptools/19.4/package.py\n```\n\n----------------------------------------\n\nTITLE: Running Command in Environment with rez-env (Text)\nDESCRIPTION: This snippet demonstrates running a command directly within a rez environment using `rez-env`. It specifies the `hello_world` package and then executes the `hello` command within that environment, which prints 'Hello world!'. The rez environment is automatically exited after the command finishes.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n]$\\ rez-env hello_world -- hello\nHello world!\n]$ █\n```\n\n----------------------------------------\n\nTITLE: Overriding Rez Settings using a Configuration File\nDESCRIPTION: These commands demonstrate how to override Rez settings using a custom configuration file. First, a Python file containing the desired settings is created. Then, the `REZ_CONFIG_FILE` environment variable is set to point to this file.  Finally, `rez-config` is used to verify the new setting.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/configuring_rez.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n]\\$ echo 'packages_path = [\"~/packages\", \"/packages\"]' > myrezconfig.py\n]\\$ export REZ_CONFIG_FILE=\\${PWD}/myrezconfig.py\n]\\$ rez-config packages_path\n```\n\n----------------------------------------\n\nTITLE: Package Variants with Ephemeral GPU Requirement (Python)\nDESCRIPTION: This Python code snippet illustrates using ephemeral packages to specify variants based on the presence of a GPU. One variant requires `.gpu-0` (CPU rendering), while the other requires `.gpu-1` (GPU rendering).\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nname = 'pixxelator'\n\nvariants = [\n   ['.gpu-0'],  # renders via CPU\n   ['.gpu-1']  # renders via GPU\n]\n```\n\n----------------------------------------\n\nTITLE: Activating a Rez Suite (Console)\nDESCRIPTION: This command adds the `bin` directory of the `mysuite` Rez suite to the `$PATH` environment variable, allowing the tools within the suite to be executed directly from the command line.  `pwd` is used to get the absolute path to the suite.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ export PATH=$(pwd)/mysuite/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Defining Build Requires Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `build_requires` attribute in a Rez package definition file. The `build_requires` attribute is a list of strings, where each string represents a package dependency required only during the build process. These dependencies are typically tools like CMake or Doxygen.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbuild_requires = [\n   \"cmake-2.8\",\n   \"doxygen\"\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Caching in Rez (Console)\nDESCRIPTION: This code snippet demonstrates how to verify if package caching is working by using `rez-env` to resolve an environment and then observing the `(cached)` label in the output for each resolved package. The output shows the resolved packages along with their cache paths if they have been cached.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/caching.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env Flask\n\nYou are now in a rez-configured environment.\n\nrequested packages:\nFlask\n~platform==linux   (implicit)\n~arch==x86_64      (implicit)\n~os==Ubuntu-16.04  (implicit)\n\nresolved packages:\nFlask-1.1.2         /home/ajohns/package_cache/Flask/1.1.2/d998/a                                     (cached)\nJinja2-2.11.2       /home/ajohns/package_cache/Jinja2/2.11.2/6087/a                                   (cached)\nMarkupSafe-1.1.1    /svr/packages/MarkupSafe/1.1.1/d9e9d80193dcd9578844ec4c2c22c9366ef0b88a\nWerkzeug-1.0.1      /home/ajohns/package_cache/Werkzeug/1.0.1/fe76/a                                  (cached)\narch-x86_64         /home/ajohns/package_cache/arch/x86_64/6450/a                                     (cached)\nclick-7.1.2         /home/ajohns/package_cache/click/7.1.2/0da2/a                                     (cached)\nitsdangerous-1.1.0  /home/ajohns/package_cache/itsdangerous/1.1.0/b23f/a                              (cached)\nplatform-linux      /home/ajohns/package_cache/platform/linux/9d4d/a                                  (cached)\npython-3.7.4        /home/ajohns/package_cache/python/3.7.4/ce1c/a                                    (cached)\n```\n\n----------------------------------------\n\nTITLE: Running Maya with rez-env (Console)\nDESCRIPTION: This command demonstrates how to run the `maya` application using `rez-env` with a specific context file `maya.rxt`. The `--` separates the `rez-env` arguments from the application arguments.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env --input maya.rxt -- maya\n```\n\n----------------------------------------\n\nTITLE: Package Tests Definition (Python)\nDESCRIPTION: Defines package tests with options for commands, requirements, and execution conditions. Includes running tests during different stages, such as pre-install or explicitly.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ntests = {\n   \"unit\": \"python -m unittest discover -s {root}/python/tests\",\n   \"unit-as-list\": [\"python\", \"-m\", \"unittest\", \"discover\", \"-s\", \"{root}/python/tests\"],\n   \"lint\": {\n         \"command\": \"pylint mymodule\",\n         \"requires\": [\"pylint\"],\n         \"run_on\": [\"default\", \"pre_release\"]\n   },\n   \"maya_CI\": {\n         \"command\": [\"python\", \"{root}/ci_tests/maya.py\"],\n         \"on_variants\": {\n            \"type\": \"requires\",\n            \"value\": [\"maya\"]\n         },\n         \"run_on\": \"explicit\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Hashed Variants in Rez Package Python\nDESCRIPTION: This code snippet shows how to enable hashed variants for a Rez package by setting the `hashed_variants` attribute to `True` in the `package.py` file. When enabled, Rez will use a hash of the variant requirements as the subdirectory name for the variant.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhashed_variants = True\n```\n\n----------------------------------------\n\nTITLE: Rez Build with Custom Variable (Console)\nDESCRIPTION: Shows how to pass arguments directly to the build system using `rez-build`.  In this example, it defines a variable `MYVAR` with the value `YES` in a CMake build using the `--` separator.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rez-build -- -DMYVAR=YES\n```\n\n----------------------------------------\n\nTITLE: Non-Mutually Exclusive Variants Python\nDESCRIPTION: This code snippet demonstrates how to define variants that are not mutually exclusive, such as supporting different DCCs (Digital Content Creation applications) like Maya and Houdini. In this case, the `geocache` package has variants for `maya-2016` and `houdini-14`. The selection of a variant is undefined if neither `maya` nor `houdini` are explicitly requested.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nname = \"geocache\"\n\nvariants = [\n   [\"maya-2016\"],\n   [\"houdini-14\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorted Package Orderer in Rez\nDESCRIPTION: This snippet demonstrates how to configure the 'sorted' package orderer in the rezconfig.py file.  It sorts packages by their version attribute in descending order. The `packages` key is optional; if not supplied, the orderer applies to all packages. Descending is required.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_orderers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npackage_orderers = [\n    {\n        \"type\": \"sorted\", # Required\n        \"descending\": True, # Required\n        \"packages\": [\"python\"] # Optional, if not supplied, orderer applies to all packages\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Building a Package with rez-build (Text)\nDESCRIPTION: This snippet illustrates the use of the `rez-build` command with the `--install` option to build and install a Rez package from a package definition directory. It highlights the build process, including dependency resolution, CMake invocation, and installation of package contents to the local package path.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n]$\\ cd example_packages/hello_world\n]$ rez-build --install\n\n--------------------------------------------------------------------------------\nBuilding hello_world-1.0.0...\n--------------------------------------------------------------------------------\nResolving build environment: python\nresolved by ajohns@workstation.local, on Sun Jul 31 14:39:33 2016, using Rez v2.0.rc1.44\n\nrequested packages:\npython\n~platform==osx    (implicit)\n~arch==x86_64     (implicit)\n~os==osx-10.11.5  (implicit)\n\nresolved packages:\narch-x86_64     /home/ajohns/packages/arch/x86_64                                            (local)\nos-osx-10.11.5  /home/ajohns/packages/os/osx-10.11.5                                         (local)\nplatform-osx    /home/ajohns/packages/platform/osx                                           (local)\npython-2.7.11   /home/ajohns/packages/python/2.7.11/platform-osx/arch-x86_64/os-osx-10.11.5  (local)\n\nInvoking cmake build system...\nExecuting: /usr/local/bin/cmake -d /home/ajohns/workspace/rez/example_packages/hello_world -Wno-dev -DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT=TRUE -D_ECLIPSE_VERSION=4.3 --no-warn-unused-cli -DCMAKE_INSTALL_PREFIX=/home/ajohns/packages/hello_world/1.0.0 -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH} -DCMAKE_BUILD_TYPE=Release -DREZ_BUILD_TYPE=local -DREZ_BUILD_INSTALL=1 -G Unix Makefiles\nNot searching for unused variables given on the command line.\n-- Could NOT find PkgConfig (missing:  PKG_CONFIG_EXECUTABLE)\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/ajohns/workspace/rez/example_packages/hello_world/build\n\nExecuting: make -j4\n[100%] Built target py\n\nExecuting: make -j4 install\n[100%] Built target py\nInstall the project...\n-- Install configuration: \"Release\"\n-- Installing: /home/ajohns/packages/hello_world/1.0.0/./python/hello_world.py\n-- Installing: /home/ajohns/packages/hello_world/1.0.0/./python/hello_world.pyc\n-- Installing: /home/ajohns/packages/hello_world/1.0.0/./bin/hello\n\nAll 1 build(s) were successful.\n```\n\n----------------------------------------\n\nTITLE: Using intersects Function\nDESCRIPTION: This code demonstrates how to use the `intersects` function to enable or disable certain features based on the range of an ephemeral package.  In this example, command line tools are enabled unless explicitly disabled by requesting `.foo.cli-0`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nif intersects(ephemerals.get_range(\"foo.cli\", \"1\"), \"1\"):\n   info(\"Enabling foo cli tools\")\n   env.PATH.append(\"{root}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Rez Weak Reference in Package Definition (Python)\nDESCRIPTION: This Python code snippet shows how a weak reference can be defined within a package's package.py file. In this case, it specifies a weak requirement on python version 2.7.3. This ensures that any package depending on python will use a version compatible with maya, when maya is in the environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/basic_concepts.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in maya's package.py\nrequires = [\n   \"~python-2.7.3\"\n]\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Package via API (Rez, Python)\nDESCRIPTION: This snippet demonstrates how to ignore a package programmatically using the Rez API. It retrieves a package repository, then calls the `ignore_package` method. It returns 1 if successful, 0 if already ignored and -1 if the package is not found.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from rez.package_repository import package_repository_manager\n>>>\n>>> repo_path = \"filesystem@/home/ajohns/packages\"\n>>> repo = package_repository_manager.get_repository(repo_path)\n>>> repo.ignore_package(\"foo\", \"1.2.3\")\n1  # -1: pkg not found; 0: pkg already ignored; 1: pkg ignored\n```\n\n----------------------------------------\n\nTITLE: Adding Contexts to a Rez Suite (Console)\nDESCRIPTION: These commands add the previously created context files (`maya.rxt` and `nuke.rxt`) to the `mysuite` Rez suite. The `--context` option assigns a label to each context within the suite.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rez-suite --add maya.rxt --context maya mysuite\n$ rez-suite --add nuke.rxt --context nuke mysuite\n```\n\n----------------------------------------\n\nTITLE: Executing Python Code in Rez Package Definition\nDESCRIPTION: This code defines a function `_exec_python` that executes arbitrary Python code using subprocess. It captures the output and error streams, and raises an exception if the Python code returns a non-zero exit code. This allows package attributes to be determined by running Python code during package building.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef _exec_python(attr, src):\n   import subprocess\n\n   p = subprocess.Popen(\n      [\"python\", \"-c\", src],\n      stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n   out, err = p.communicate()\n\n   if p.returncode:\n      from rez.exceptions import InvalidPackageError\n      raise InvalidPackageError(\n            \"Error determining package attribute '%s':\\n%s\" % (attr, err))\n\n   return out.strip()\n```\n\n----------------------------------------\n\nTITLE: Verifying Rez Local Package Installation with rez-env (Console)\nDESCRIPTION: This snippet demonstrates how to use the `rez-env` command to verify that a locally installed package is being used in a Rez environment. The output shows the resolved packages, and locally installed packages are indicated with the `(local)` label.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env sequence\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@turtle, on Thu Mar 09 11:41:06 2017, using Rez v2.7.0\n\nrequested packages:\nsequence\n~platform==linux   (implicit)\n~arch==x86_64      (implicit)\n~os==Ubuntu-16.04  (implicit)\n\nresolved packages:\narch-x86_64      /sw/packages/arch/x86_64\nos-Ubuntu-16.04  /sw/packages/os/Ubuntu-16.04\nplatform-linux   /sw/packages/platform/linux\npython-2.7.12    /sw/packages/python/2.7.12\nsequence-2.1.2   /home/ajohns/packages/sequence/2.1.2  (local)\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variable Definition\nDESCRIPTION: This code demonstrates how to check if an environment variable is defined using the `defined()` function.  This allows conditional execution of code based on the presence of an environment variable.  The example checks if the `REZ_MAYA_VERSION` variable is defined.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif defined(\"REZ_MAYA_VERSION\"):\n   env.FOO_MAYA = 1\n```\n\n----------------------------------------\n\nTITLE: Creating a context bundle via command line in Rez\nDESCRIPTION: Demonstrates how to create a Rez context bundle from a resolved context file using the `rez-bundle` command. First, a context file (`foo.rxt`) is created using `rez-env`. Then, `rez-bundle` is used to bundle the context and its packages into the `./mybundle` directory. Finally, it shows how to run a command using the bundled context via `rez-env -i`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context_bundles.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env foo -o foo.rxt\n$ rez-bundle foo.rxt ./mybundle\n\n$ # example of running a command from the bundled context\n$ rez-env -i ./mybundle/context.rxt -- foo-tool\n```\n\n----------------------------------------\n\nTITLE: Early Binding Function with `this` - Python\nDESCRIPTION: This snippet shows how to access package attributes within an early binding function using the `this` object in Rez. `this` allows access to other package attributes, but not environment variables or other early/late bound attributes.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@early()\ndef description():\n   # a not very useful description\n   return \"%s version %s\" % (this.name, this.version)\n```\n\n----------------------------------------\n\nTITLE: Copying a Package via API (Rez, Python)\nDESCRIPTION: This snippet shows how to copy a package from one repository to another using the `copy_package` function in the Rez API. It retrieves a package, then copies it to a new repository.  The function returns a dictionary containing lists of copied and skipped variants. It depends on `rez.package_copy` and `rez.packages`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rez.package_copy import copy_package\n>>> from rez.packages import get_latest_package\n>>>\n>>> p = get_latest_package(\"python\")\n>>> p\nPackage(FileSystemPackageResource({'location': '/home/ajohns/packages', 'name': 'python', 'repository_type': 'filesystem', 'version': '3.7.4'}))\n>>>\n>>> r = copy_package(p, \"./repo2\")\n>>>\n>>> print(pprint.pformat(r))\n{\n   'copied': [\n      (\n            Variant(FileSystemVariantResource({'location': '/home/ajohns/packages', 'name': 'python', 'repository_type': 'filesystem', 'index': 0, 'version': '3.7.4'})),\n            Variant(FileSystemVariantResource({'location': '/home/ajohns/repo2', 'name': 'python', 'repository_type': 'filesystem', 'index': 0, 'version': '3.7.4'}))\n      )\n   ],\n   'skipped': []\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ephemerals in Package Definition (Python)\nDESCRIPTION: This Python code snippet shows how to access the `ephemerals` object within a package's `commands` function to check for the presence of a specific ephemeral and set an environment variable accordingly. It uses the `intersects` function to determine if a range intersects.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in package.py\ndef commands()\n   if intersects(ephemerals.get_range('enable_tracking', '0'), '1'):\n      env.TRACKING_ENABLED = 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Resolved Environment with rez-env\nDESCRIPTION: This snippet demonstrates how to create a resolved environment using `rez-env` with specified package requests. The environment configuration is temporary and removed upon shell exit. The command resolves the dependencies and sets up the environment based on the specified packages, creating a temporary context file.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env foo bah\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@14jun01.methodstudios.com, on Wed Oct 22 12:44:00 2014,\nusing Rez v2.0.rc1.10\n\nrequested packages:\nfoo\nbah\n\nresolved packages:\neek-2.6   /packages/inhouse/eek/2.6\nfoo-1.2   /packages/inhouse/foo/1.2\nbah-4     /packages/inhouse/bah/4\n\n> $ echo $REZ_RXT_FILE\n/tmp/rez_context_0tMS4U/context.rxt\n```\n\n----------------------------------------\n\nTITLE: Package Variants Definition (Python)\nDESCRIPTION: Defines different variants of the package, each with potentially different dependencies. Allows for flexibility in satisfying requirements.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nvariants = [\n   [\"maya-2015.3\"],\n   [\"maya-2016.1\"],\n   [\"maya-2016.7\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Makefile Example (Makefile)\nDESCRIPTION: Provides a simple `Makefile` example for building a C++ program.  It defines a `hai` target that compiles `main.cpp` and an `install` target that creates an install directory and copies the compiled executable.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_9\n\nLANGUAGE: makefile\nCODE:\n```\n# in Makefile\nhai: ${REZ_BUILD_SOURCE_PATH}/lib/main.cpp\n   g++ -o hai ${REZ_BUILD_SOURCE_PATH}/lib/main.cpp\n\n.PHONY: install\ninstall: hai\n   mkdir -p ${REZ_BUILD_INSTALL_PATH}/bin\n   cp $< ${REZ_BUILD_INSTALL_PATH}/bin/hai\n```\n\n----------------------------------------\n\nTITLE: Rez Environment with Ephemeral Package Request (text)\nDESCRIPTION: Demonstrates requesting an ephemeral package '.foo-1' using `rez-env`. This shows how an ephemeral package is included in the resolved environment alongside implicit packages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env .foo-1\nYou are now in a rez-configured environment.\n\nresolved by ajohns@turtle, on Tue Dec 22 08:17:00 2020, using Rez v2.70.0\n\nrequested packages:\n.foo-1             (ephemeral)\n~platform==linux   (implicit)\n~arch==x86_64      (implicit)\n~os==Ubuntu-16.04  (implicit)\n\nresolved packages:\n.foo-1    (ephemeral)\n```\n\n----------------------------------------\n\nTITLE: Creating a context bundle via API in Rez (Python)\nDESCRIPTION: Shows how to create a Rez context bundle using the Python API. It imports `bundle_context` and `ResolvedContext` from the `rez` library. A resolved context `c` is created with package requirements, and then `bundle_context` is called to bundle the context and its packages into the `./mybundle` directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context_bundles.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rez.bundle_context import bundle_context\nfrom rez.resolved_context import ResolvedContext\n\nc = ResolvedContext([\"python-3+\", \"foo-1.2+<2\"])\nbundle_context(c, \"./mybundle\")\n```\n\n----------------------------------------\n\nTITLE: maya_utils CMakeLists.txt Example (CMake)\nDESCRIPTION: Illustrates how a `CMakeLists.txt` file in a Rez package (maya_utils) uses the `find_package` command to locate the Boost library, include its header directories, link its library directories, and link the boost-python library to the maya_utils target.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Boost)\ninclude_directories(${Boost_INCLUDE_DIRS})\nlink_directories(${Boost_LIBRARY_DIRS})\ntarget_link_libraries(maya_utils ${Boost_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Defining Has Plugins Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `has_plugins` attribute in a Rez package definition file. The `has_plugins` attribute is a boolean value indicating whether the package is an application that may have plugins. This attribute is used in conjunction with the `rez-plugins` command.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nhas_plugins = True\n```\n\n----------------------------------------\n\nTITLE: Removing a Package via Command Line (Rez)\nDESCRIPTION: This command removes a package and its payload from storage using the `rez-rm` command. The command requires the package name, version and repository path.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ rez-rm --package python-3.7.4 /packages\n```\n\n----------------------------------------\n\nTITLE: Package Build Command Definition (Python)\nDESCRIPTION: Defines the command used to build the package. Includes variables for referencing paths and package attributes during the build process.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nbuild_command = \"bash {root}/build.sh {install}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying List-Based Settings in Rez Config\nDESCRIPTION: This code snippet demonstrates how to append to a list-based setting in a Rez configuration file using the `ModifyList` class. This allows you to add to existing settings defined in previous configuration sources without overwriting them.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/configuring_rez.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrelease_hooks = ModifyList(append=[\"custom_release_notify\"])\n```\n\n----------------------------------------\n\nTITLE: Checking for Installation Status\nDESCRIPTION: This code demonstrates how to check if an installation is taking place using the `build.install` attribute within the `pre_build_commands` function. This allows you to perform specific actions only during the installation process. An info message is printed to indicate an installation.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif build.install:\n   info(\"An installation is taking place\")\n```\n\n----------------------------------------\n\nTITLE: Rez Environment Creation via Command Line\nDESCRIPTION: This example shows how to create a resolved shell environment using the `rez-env` command-line tool. It requests specific versions of 'requests', 'python', and 'pymongo' packages and shows the output of the resolved environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n]$ rez-env requests-2.2+ python-2.6 'pymongo-0+<2.7'\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@nn188.somewhere.com, on Wed Feb 26 15:56:20 2014, using Rez v2.0.0\n\nrequested packages:\nrequests-2.2+\npython-2.6\npymongo-0+<2.7\n\nresolved packages:\npython-2.6.8    /software/ext/python/2.6.8\nplatform-linux  /software/ext/platform/linux\nrequests-2.2.1  /software/ext/requests/2.2.1/python-2.6\npymongo-2.6.3   /software/ext/pymongo/2.6.3\narch-x86_64     /software/ext/arch/x86_64\n\n> ]$ _\n```\n\n----------------------------------------\n\nTITLE: Printing Information Messages\nDESCRIPTION: This code snippet illustrates how to print an information message to standard output using the `info()` function. The example prints the version of the 'floob' package.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ninfo(\"floob version is %s\" % resolve.floob.version)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Package Cache with rez-pkg-cache (Console)\nDESCRIPTION: This code snippet demonstrates using the `rez-pkg-cache` tool to inspect the state of the package cache. The output provides information about each cached variant, including its status (cached, copying, stalled), package name, variant URI, and the cache path.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/caching.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rez-pkg-cache\nPackage cache at /home/ajohns/package_cache:\n\nstatus   package             variant uri                                             cache path\n------   -------             -----------                                             ----------\ncached   Flask-1.1.2         /svr/packages/Flask/1.1.2/package.py[0]         /home/ajohns/package_cache/Flask/1.1.2/d998/a\ncached   Jinja2-2.11.2       /svr/packages/Jinja2/2.11.2/package.py[0]       /home/ajohns/package_cache/Jinja2/2.11.2/6087/a\ncached   Werkzeug-1.0.1      /svr/packages/Werkzeug/1.0.1/package.py[0]      /home/ajohns/package_cache/Werkzeug/1.0.1/fe76/a\ncached   arch-x86_64         /svr/packages/arch/x86_64/package.py[]          /home/ajohns/package_cache/arch/x86_64/6450/a\ncached   click-7.1.2         /svr/packages/click/7.1.2/package.py[0]         /home/ajohns/package_cache/click/7.1.2/0da2/a\ncached   itsdangerous-1.1.0  /svr/packages/itsdangerous/1.1.0/package.py[0]  /home/ajohns/package_cache/itsdangerous/1.1.0/b23f/a\ncached   platform-linux      /svr/packages/platform/linux/package.py[]       /home/ajohns/package_cache/platform/linux/9d4d/a\ncopying  python-3.7.4        /svr/packages/python/3.7.4/package.py[0]        /home/ajohns/package_cache/python/3.7.4/ce1c/a\nstalled  MarkupSafe-1.1.1    /svr/packages/MarkupSafe/1.1.1/package.py[1]    /home/ajohns/package_cache/MarkupSafe/1.1.1/724c/a\n```\n\n----------------------------------------\n\nTITLE: Adding Build Arguments with parse_build_args.py (Python)\nDESCRIPTION: Shows an example `parse_build_args.py` file that adds a custom argument `--foo` to the `rez-build` command. This argument will be available as an environment variable prefixed with `__PARSE_ARG_` during the build process.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in parse_build_args.py\nparser.add_argument(\"--foo\", action=\"store_true\", help=\"do some foo\")\n```\n\n----------------------------------------\n\nTITLE: Building and Installing a Rez Package\nDESCRIPTION: This example shows how to build and install a Rez package using the `rez-build` tool. It assumes the user is in the package directory (e.g., `example_packages/hello_world`) and then calls `rez-build --install`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n]$ cd example_packages/hello_world\n]$ rez-build --install\n...\n]$ rez-env hello_world -- hello\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Rez Build Help Output (Console)\nDESCRIPTION: Displays the output of `rez-build -h` after adding a custom argument `--foo` using `parse_build_args.py`. The output shows that the new argument is now listed as an option for the `rez-build` command.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ rez-build -h\nusage: rez build [-h] [-c] [-i] [-p PATH] [--fail-graph] [-s] [--view-pre]\n                 [--process {remote,local}] [--foo]\n                 [--variants INDEX [INDEX ...]] [--ba ARGS] [--cba ARGS] [-v]\n\n Build a package from source.\n\n optional arguments:\n   ...\n   --foo                 do some foo\n```\n\n----------------------------------------\n\nTITLE: Private Build Requirements Definition (Python)\nDESCRIPTION: Defines dependencies that are only included when the package itself is being built.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nprivate_build_requires = [\n   \"cmake-2.8\",\n   \"doxygen\"\n]\n```\n\n----------------------------------------\n\nTITLE: Rez Pip Usage\nDESCRIPTION: This shows the usage of the `rez pip` command and its various options. It allows for installing or searching for pip packages as rez packages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/pip.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: rez pip [-h] [--python-version VERSION] [--pip-version VERSION] [-i]\n                  [-s] [-r] [-v]\n                  PACKAGE\n\nInstall a pip-compatible python package, and its dependencies, as rez\npackages.\n\npositional arguments:\nPACKAGE               package to install or archive/url to install from\n\noptional arguments:\n-h, --help            show this help message and exit\n--python-version VERSION\n                           python version (rez package) to use, default is\n                           latest. Note that the pip package(s) will be installed\n                           with a dependency on python-MAJOR.MINOR.\n--pip-version VERSION\n                           pip version (rez package) to use, default is latest.\n                           This option is deprecated and will be removed in the\n                           future.\n-i, --install         install the package\n-s, --search          search for the package on PyPi\n-r, --release         install as released package; if not set, package is\n                           installed locally only\n-p PATH, --prefix PATH\n                           install to a custom package repository path.\n-v, --verbose         verbose mode, repeat for more verbosity\n```\n\n----------------------------------------\n\nTITLE: Executing a Command in Rez Environment\nDESCRIPTION: This example demonstrates how to run a command within a Rez environment. It creates an environment containing 'houdini' version 12.5 or greater and then executes the 'hescape -h' command within that environment using `rez-env` tool.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n]$ rez-env houdini-12.5+ -- hescape -h\nUsage: hescape [-foreground] [-s editor] [filename ...]\n-h: output this usage message\n-s: specify starting desktop by name\n-foreground: starts process in foreground\n```\n\n----------------------------------------\n\nTITLE: Installing Rez via Pip (Python)\nDESCRIPTION: This snippet shows how to install Rez using pip, the Python package installer.  However, it also warns that Rez command-line tools might not function correctly inside a Rez environment if installed this way.  It is adequate for installing the Rez API, but not the command-line tools for production.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/installation.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n]$ pip install rez\n```\n\n----------------------------------------\n\nTITLE: Extending Plugin Path in __init__.py (Python)\nDESCRIPTION: This code snippet demonstrates the content of the '__init__.py' file required in each plugin type directory. It uses the 'extend_path' function from 'rez.plugin_managers' to ensure that Rez can find the plugins within that directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/plugins.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rez.plugin_managers import extend_path\n__path__ = extend_path(__path__, __name__)\n```\n\n----------------------------------------\n\nTITLE: Registering Rez Subcommand (Python)\nDESCRIPTION: This snippet shows how to register a new subcommand within a Rez plugin. It defines a `setup_parser` function to add command-line arguments, a `command` function to execute the subcommand's logic, a `CommandFoo` class inheriting from `rez.command.Command` to declare settings, and a `register_plugin` function to return the class. Also demonstrates how to define `command_behavior` module attribute.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/plugins.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"The docstring for command help, this is required.\"\"\"\nfrom rez.command import Command\n\ncommand_behavior = {\n    \"hidden\": False,   # optional: bool\n    \"arg_mode\": None,  # optional: None, \"passthrough\", \"grouped\"\n}\n\ndef setup_parser(parser, completions=False):\n    parser.add_argument(\"--hello\", ...)\n\ndef command(opts, parser=None, extra_arg_groups=None):\n    if opts.hello:\n        print(\"world\")\n\nclass CommandFoo(Command):\n    # This is where you declare the settings the plugin accepts.\n    schema_dict = {\n        \"str_option\": str,\n        \"int_option\": int,\n        ...\n    }\n    @classmethod\n    def name(cls):\n        return \"foo\"\n\ndef register_plugin():\n    return CommandFoo\n```\n\n----------------------------------------\n\nTITLE: Displaying Tool Information with ++about (Console)\nDESCRIPTION: This command uses the `++about` control argument to display information about a suite tool (`maya`), including its path, the suite it belongs to, and the context it uses.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ maya ++about\nTool:     maya\nPath:     ./mysuite/bin/maya\nSuite:    ./mysuite\nContext:  ./mysuite/contexts/maya2016.rxt ('maya2016')\n```\n\n----------------------------------------\n\nTITLE: Package Definition Using Ephemerals as Options (Python)\nDESCRIPTION: This Python code snippet demonstrates using an ephemeral as a package option to control whether command-line tools are enabled. If the `.bah.cli-1` ephemeral is present, the package's `bin` directory is added to the `PATH`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nname = 'bah'\n\ndef commands():\n   if intersects(ephemerals.get_range('bah.cli', '1'), '1'):\n      env.PATH.append('{root}/bin')\n```\n\n----------------------------------------\n\nTITLE: Moving a Package via API (Rez, Python)\nDESCRIPTION: This snippet moves a package using the Rez API's `move_package` function. It retrieves the package from its current repository and moves it to a new location. The original package is ignored. It depends on `rez.package_move` and `rez.packages`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from rez.package_move import move_package\n>>> from rez.packages import get_package_from_repository\n>>>\n>>> p = get_package_from_repository(\"python\", \"3.7.4\", \"/packages\")\n>>> p\nPackage(FileSystemPackageResource({'location': '/packages', 'name': 'python', 'repository_type': 'filesystem', 'version': '3.7.4'}))\n>>>\n>>> new_p = move_package(p, \"/packages2\")\n>>> new_p\nPackage(FileSystemPackageResource({'location': '/packages2', 'name': 'python', 'repository_type': 'filesystem', 'version': '3.7.4'}))\n>>>\n>>> p = get_package_from_repository(\"python\", \"3.7.4\", \"/packages\")\n>>> p\nNone\n```\n\n----------------------------------------\n\nTITLE: Removing a Package via API (Rez, Python)\nDESCRIPTION: This snippet removes a package using the Rez API's `remove_package` function. This deletes the package's files from the repository. It depends on `rez.package_remove`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from rez.package_remove import remove_package\n>>>\n>>> remove_package(\"python\", \"3.7.4\", \"/packages\")\n```\n\n----------------------------------------\n\nTITLE: Defining Authors Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `authors` attribute in a Rez package definition file. The `authors` attribute is a list of strings, where each string represents an author of the package. The authors should be listed in order of contribution, with the major contributor first.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nauthors = [\"jchrist\", \"sclaus\"]\n```\n\n----------------------------------------\n\nTITLE: Running Arbitrary Shell Commands\nDESCRIPTION: This code snippet illustrates how to run an arbitrary shell command using the `command()` function within a Rez package definition. Although discouraged for complex operations, this can be used for simple tasks. The example removes a directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncommand(\"rm -rf ~/.foo_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Example Pip-based Rez Installation Warning\nDESCRIPTION: This code block displays a warning message that is printed when running Rez command-line tools installed via pip. The warning indicates that the tools are not guaranteed to function correctly in certain environments and refers to the 'why-not-pip-for-production' section for more details.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/installation.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPip-based rez installation detected. Please be aware that rez command line tools\nare not guaranteed to function correctly in this case. See :ref:`why-not-pip-for-production`\nfor further details.\n```\n\n----------------------------------------\n\nTITLE: Early Binding Function Example - Python\nDESCRIPTION: This example demonstrates an early binding function using the `@early` decorator in Rez. It retrieves authors from the git logs at build time. Note that the current working directory is the root directory of the package during evaluation of this function.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@early()\ndef authors():\n   import subprocess\n   p = subprocess.Popen(\"git shortlog -sn | cut -f2\",\n                        shell=True, stdout=subprocess.PIPE)\n   out, _ = p.communicate()\n   return out.strip().split('\\n')\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Package via Command Line (Rez)\nDESCRIPTION: This code snippet shows how to ignore a package using the `rez-pkg-ignore` command-line tool. The user must specify the repository the package resides in. The package becomes invisible to the Rez API and new resolves, but existing runtimes using the package are unaffected.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ # you need to specify the repo, but you'll be shown a list if you don't\n$ rez-pkg-ignore foo-1.2.3\nNo action taken. Run again, and set PATH to one of:\nfilesystem@/home/ajohns/packages\n\n$ rez-pkg-ignore foo-1.2.3 filesystem@/home/ajohns/packages\nPackage is now ignored and will not be visible to resolves\n```\n\n----------------------------------------\n\nTITLE: Defining Pre Test Commands Function in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `pre_test_commands` function in a Rez package definition file. This function is similar to `commands`, but is run prior to each test defined in the tests attribute. It allows setting up the environment specifically for each test.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef pre_test_commands():\n   if test.name == \"unit\":\n      env.IS_UNIT_TEST = 1\n```\n\n----------------------------------------\n\nTITLE: Finding Packages with Rez\nDESCRIPTION: This command uses the custom function 'rez_find_packages' to locate required packages. It searches for packages under the prefix 'pkgs' and automatically detects dependencies.  The AUTO parameter indicates automatic dependency resolution.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nrez_find_packages(PREFIX pkgs AUTO)\n```\n\n----------------------------------------\n\nTITLE: Package Disk Structure with Variants Text\nDESCRIPTION: This code snippet illustrates the directory structure of a Rez package with variants.  Each variant is stored in a subdirectory named after the variant's requirements.  The example shows how `my_maya_plugin` version `1.0.0` has variants for `maya-2016.sp2` and `maya-2017`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/rez/packages/my_maya_plugin/1.0.0/maya-2016.sp2/<PAYLOAD>\n                                     /maya-2017/<PAYLOAD>\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Package Orderer in Rez\nDESCRIPTION: This code demonstrates how to create and register a custom package orderer in Rez.  It involves subclassing `rez.package_order.PackageOrder`, implementing mandatory methods, registering the orderer using `rez.package_order.register_orderer`, and configuring it in the `rezconfig.py` file. The custom orderer is named 'my_orderer' and takes a custom argument.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_orderers.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rez.version import Version\nfrom rez.package_order import PackageOrder, register_orderer\n\n\nclass MyOrderer(PackageOrder):\n    name = \"my_orderer\"\n\n    def __init__(self, custom_arg: str, **kwargs):\n        super().__init__(self, **kwargs)\n        self.custom_arg = custom_arg\n\n    def sort_key_implementation(self, package_name: str, version: Version):\n        pass\n\n    def __str__(self):\n        pass\n\n    def __eq__(self, other):\n        pass\n\n    def to_pod(self, other):\n        pass\n\n    @classmethod\n    def from_pod(cls, data):\n        pass\n\n\nregister_orderer(MyOrderer)\n\npackage_orderers = [\n    {\n        \"type\": \"my_orderer\",\n        \"custom_arg\": \"value here\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Copying a Package via Command Line (Rez)\nDESCRIPTION: This command demonstrates copying a package to a new destination using the `rez-cp` command. The `--dest-path` argument specifies the path to the destination repository.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rez-cp --dest-path /svr/packages2 my_pkg-1.2.3\n```\n\n----------------------------------------\n\nTITLE: FindBoost.cmake Example (CMake)\nDESCRIPTION: Demonstrates a simple `FindBoost.cmake` file that sets environment variables for include directories, library directories, and libraries when the Boost package is used as a dependency during another package's build process. This allows the dependent package to locate Boost's header and library files.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(Boost_INCLUDE_DIRS $ENV{REZ_BOOST_ROOT}/include)\nset(Boost_LIBRARY_DIRS $ENV{REZ_BOOST_ROOT}/lib)\nset(Boost_LIBRARIES boost-python)\n```\n\n----------------------------------------\n\nTITLE: Defining Tools in a Package (Python)\nDESCRIPTION: This Python code snippet shows how to define the `tools` attribute within a Rez package's `package.py` file.  This attribute lists the names of the tools that should be exposed by the suite when the package is included in a context. Only packages listed in the context *requests* that are not weak or conflict requests have their tools exposed.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in maya package.py\ntools = [\n   \"maya\",\n   \"mayapy\",\n   \"fcheck\"\n]\n```\n\n----------------------------------------\n\nTITLE: Wrapper Script for Maya (Bash)\nDESCRIPTION: This bash script acts as a wrapper for running `maya` within a Rez environment defined by `maya.rxt`. It uses `rez-env` to set up the environment and then executes `maya` with any provided arguments.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nrez-env --input maya.rxt -- maya $*\n```\n\n----------------------------------------\n\nTITLE: Hashed Variant Shortlink Example Text\nDESCRIPTION: This code snippet shows the path to a shortlink for a hashed variant.  Shortlinks provide a shorter, more readable path to the variant.  The shortlink points to the actual hashed variant directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n/rez/packages/my_maya_plugin/1.0.0/_v/a\n```\n\n----------------------------------------\n\nTITLE: Checking Version Range Intersection\nDESCRIPTION: This snippet demonstrates how to check if a resolved package version intersects with a given version range using the intersects function. It shows how to verify if Maya 2019 or greater is present.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nif intersects(resolve.maya, \"2019+\"): \n   info(\"Maya 2019 or greater is present\")\n```\n\n----------------------------------------\n\nTITLE: Running Rez Installation Script (Python)\nDESCRIPTION: This snippet demonstrates how to execute the Rez installation script using Python.  It assumes you are in the root directory of the Rez source code. It installs Rez to /opt/rez by default. Use install.py -h to see the different install options.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/installation.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n]$ python ./install.py\n```\n\n----------------------------------------\n\nTITLE: Hashed Variant Path Example Text\nDESCRIPTION: This code snippet shows the path to a variant when using hashed variants. Instead of the variant requirements being the subdirectory name, a hash of those requirements is used.  This avoids issues with long paths or special characters in the variant requirements.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/rez/packages/my_maya_plugin/1.0.0/83e0c415db1b602f9d59cee028da6ac785e9bacc\n```\n\n----------------------------------------\n\nTITLE: Building the C++ Library\nDESCRIPTION: This section builds the 'supworld' static library. It first gathers all '.cpp' files, then creates the library, and links it against the libraries found by 'rez_find_packages'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/lib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB_RECURSE cpp_files \"*.cpp\")\nadd_library ( supworld STATIC ${cpp_files} )\nTARGET_LINK_LIBRARIES(supworld ${pkgs_LIBRARIES})\nINSTALL ( TARGETS supworld DESTINATION lib )\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached URI in Rez (Python)\nDESCRIPTION: This code snippet demonstrates how to configure the `memcached_uri` config variable in Rez to enable memcached caching. The variable accepts a list of URIs to your memcached servers. In this example, memcached is running on localhost on its default port.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/caching.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmemcached_uri = [\"127.0.0.1:11211\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Help Attribute (List) in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `help` attribute in a Rez package definition file as a list of lists. This represents multiple help entries, each with a title and URL.  This help information can be accessed using the `rez-help` command line tool.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nhelp = [\n   ['Documentation', 'https://example.com/docs'],\n   ['API docs', 'https://example.com/docs/api']\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing System Information\nDESCRIPTION: This snippet demonstrates how to access system information like platform using the `system` object.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nif system.platform == \"windows\":\n   ...\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Settings within a Rez Package\nDESCRIPTION: This snippet shows how a Rez package can override global configuration settings using the `scope` function.  The `config` scope ensures these overrides are only active during the build and release process of the package. This is useful for tailoring the build environment or release paths for specific packages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/configuring_rez.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith scope(\"config\") as c:\n    c.release_packages_path = \"/svr/packages/internal\"\n```\n\n----------------------------------------\n\nTITLE: Defining Name Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `name` attribute in a Rez package definition file. The `name` attribute is a mandatory string that specifies the name of the package.  It must be alphanumeric or underscores.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nname = \"maya_utils\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Rez Release using release-rez.py (Python)\nDESCRIPTION: This snippet demonstrates how to use the `release-rez.py` script to create a new release of Rez. This script automates several steps, including creating a tag on the latest version, pushing the tag to the `main` branch, and generating a new GitHub release.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/RELEASE.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n]$\\n]$ python ./release-rez.py\n```\n\n----------------------------------------\n\nTITLE: Rez Environment with Range Intersection (text)\nDESCRIPTION: Illustrates range intersection with ephemeral packages. The command `rez-env .foo-1 '.foo-1.5+'` shows how Rez resolves the common range between the two requests.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env .foo-1 '.foo-1.5+'\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@turtle, on Tue Dec 22 08:21:04 2020, using Rez v2.70.0\n\nrequested packages:\n.foo-1             (ephemeral)\n.foo-1.5+          (ephemeral)\n~platform==linux   (implicit)\n~arch==x86_64      (implicit)\n~os==Ubuntu-16.04  (implicit)\n\nresolved packages:\n.foo-1.5+<1_    (ephemeral)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Enum in Python\nDESCRIPTION: This code demonstrates how to create a simple enumeration called `Color` using the `Enum` class.  It defines three members: `red`, `green`, and `blue`, with corresponding integer values.  The `enum` module must be imported before use.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from enum import Enum\n>>> class Color(Enum):\n...     red = 1\n...     green = 2\n...     blue = 3\n```\n\n----------------------------------------\n\nTITLE: Defining Cachable Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `cachable` attribute in a Rez package definition file. The `cachable` attribute is a boolean value that determines whether the package can be cached when package caching is enabled. If not explicitly defined, the global configuration settings determine the default value.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncachable = True\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment with Python After Binding\nDESCRIPTION: This example shows how to create an environment containing Python after binding the python package. It uses `rez-env` command to verify the python executable path within the rez environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n]$ rez-env python -- which python\n/home/ajohns/packages/python-2.7.8/platform-linux/arch-x86_64/os-Ubuntu-12.04/bin/python\n```\n\n----------------------------------------\n\nTITLE: Using the `unique` Decorator to Prevent Aliases (Python)\nDESCRIPTION: This code illustrates how to use the `unique` decorator to prevent enum members from having the same value. If the decorator finds any duplicate values, it raises a `ValueError`. It relies on the `enum` module being imported before use.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from enum import unique\n>>> @unique\n... class Mistake(Enum):\n...   __order__ = 'one two three four'  # only needed in 2.x\n...   one = 1\n...   two = 2\n...   three = 3\n...   four = 3\nTraceback (most recent call last):\n...\nValueError: duplicate names found in <enum 'Mistake'>: four -> three\n```\n\n----------------------------------------\n\nTITLE: Variant Selection Priority Example Python\nDESCRIPTION: This code snippet illustrates how Rez prioritizes variants based on the order of packages within the variant and whether packages are specified in the request. Here, the `python` package is prioritized because it appears first in the variants. If `maya` is explicitly requested, it will then be prioritized.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nname = \"foo\"\n\nvariants = [\n   [\"python-2.6\", \"maya-2017\"],\n   [\"python-2.7\", \"maya-2016\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Solve Algorithm Pseudocode in Python\nDESCRIPTION: This pseudocode provides a high-level overview of the Rez solver algorithm. It outlines the main steps involved in solving package requests, including creating phases, managing a phase stack, splitting phases, and handling conflicts. It shows how the solver iterates through potential solutions until a compatible set of packages is found.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef solve(requests):\n    phase = create_initial_phase(requests)\n    phase_stack = stack()\n    phase_stack.push(phase)\n\n    while not solved():\n        phase = phase_stack.pop()\n\n        if phase.failed:\n            phase = phase_stack.pop()  # discard previous failed phase\n\n        if phase.exhausted:\n            phase, next_phase = phase.split()\n            phase_stack.push(next_phase)\n\n        new_phase = solve_phase(phase)\n\n        if new_phase.failed:\n            phase_stack.push(new_phase)  # we keep last fail on the stack\n        elif new_phase.solved:\n            # some housekeeping here, like checking for cycles\n            final_phase = finalise_phase(new_phase)\n            phase_stack.push(final_phase)\n        else:\n            phase_stack.push(new_phase)  # phase is exhausted\n\ndef solve_phase(phase):\n    while True:\n        changed_scopes = []\n        added_scopes = []\n        widened_scopes = []\n\n        while True:\n            extractions = []\n\n            foreach phase.scope as scope:\n                extractions |= collect_extractions(scope)\n\n            if not extractions:\n                break\n\n            merge(extractions)\n            if in_conflict(extractions):\n                set_fail()\n                return\n\n            foreach phase.scope as scope:\n                intersect(scope, extractions)\n\n                if failed(scope):\n                    set_fail()\n                    return\n\n                if was_intersected(scope):\n                    changed_scopes.add(scope)\n\n                    if was_widened(scope):\n                        widened_scopes.add(scope)\n\n            # get those extractions involving new packages\n            new_extractions = get_new_extractions(extractions)\n\n            # add them as new scopes\n            foreach request in new_extractions:\n                scope = new_scope(request)\n                added_scopes.add(scope)\n                phase.add(scope)\n\n        if not (changed_scopes or added_scopes or widened_scopes):\n            break\n\n        pending_reductions = convert_to_reduction_set(\n            changed_scopes, added_scopes, widened_scopes)\n\n        while pending_reductions:\n            scope_a, scope_b = pending_reductions.pop()\n            scope_a.reduce_by(scope_b)\n\n            if totally_reduced(scope_a):\n                set_fail()\n                return\n\n            # scope_a changed so other scopes need to reduce against it again\n            if was_reduced(scope_a):\n                foreach phase.scope as scope:\n                    if scope is not scope_a:\n                        pending_reductions.add(scope, scope_a)\n```\n\n----------------------------------------\n\nTITLE: Rez Environment with Conflicting Ephemeral Request (text)\nDESCRIPTION: Shows an example of conflicting ephemeral package requests.  Requesting both '.foo-1' and '.foo-2' results in a resolve failure due to the conflict between the two.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env .foo-1 .foo-2\nThe context failed to resolve:\nThe following package conflicts occurred: (.foo-1 <--!--> .foo-2)\n```\n\n----------------------------------------\n\nTITLE: Viewing Rez Package Cache Logs\nDESCRIPTION: This command displays the logs of the rez package cache, showing caching operations and their statuses. It provides information about when variants are cached and any errors that may occur during the process.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/caching.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ rez-pkg-cache --logs\nrez-pkg-cache 2020-05-23 16:17:45,194 PID-29827 INFO Started daemon\nrez-pkg-cache 2020-05-23 16:17:45,201 PID-29827 INFO Started caching of variant /home/ajohns/packages/Werkzeug/1.0.1/package.py[0]...\nrez-pkg-cache 2020-05-23 16:17:45,404 PID-29827 INFO Cached variant to /home/ajohns/package_cache/Werkzeug/1.0.1/fe76/a in 0.202576 seconds\nrez-pkg-cache 2020-05-23 16:17:45,404 PID-29827 INFO Started caching of variant /home/ajohns/packages/python/3.7.4/package.py[0]...\nrez-pkg-cache 2020-05-23 16:17:46,006 PID-29827 INFO Cached variant to /home/ajohns/package_cache/python/3.7.4/ce1c/a in 0.602037 seconds\n```\n\n----------------------------------------\n\nTITLE: Checking if an Environment Variable is Undefined\nDESCRIPTION: This snippet demonstrates the usage of the undefined function which is used to verify an environment variable isn't set.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nif undefined(\"REZ_MAYA_VERSION\"):\n   info(\"maya is not present\")\n```\n\n----------------------------------------\n\nTITLE: Planet Enum with Custom Initialization Python\nDESCRIPTION: This example demonstrates creating an Enum `Planet` where each member has a tuple as its value (mass and radius), and a custom `__init__` method is used to initialize instance attributes based on these values.  It also includes a property (`surface_gravity`) to calculate a derived value.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> class Planet(Enum):\n...     MERCURY = (3.303e+23, 2.4397e6)\n...     VENUS   = (4.869e+24, 6.0518e6)\n...     EARTH   = (5.976e+24, 6.37814e6)\n...     MARS    = (6.421e+23, 3.3972e6)\n...     JUPITER = (1.9e+27,   7.1492e7)\n...     SATURN  = (5.688e+26, 6.0268e7)\n...     URANUS  = (8.686e+25, 2.5559e7)\n...     NEPTUNE = (1.024e+26, 2.4746e7)\n...     def __init__(self, mass, radius):\n...         self.mass = mass       # in kilograms\n...         self.radius = radius   # in meters\n...     @property\n...     def surface_gravity(self):\n...         # universal gravitational constant  (m3 kg-1 s-2)\n...         G = 6.67300E-11\n...         return G * self.mass / (self.radius * self.radius)\n... \n>>> Planet.EARTH.value\n(5.976e+24, 6378140.0)\n>>> Planet.EARTH.surface_gravity\n9.802652743337129\n```\n\n----------------------------------------\n\nTITLE: Using the literal function\nDESCRIPTION: This snippet shows how to use the `literal` function to inhibit expansion of object and environment variable references within a string. It also shows how to chain it with the `expandable` function.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nenv.FOO = literal(\"this {root} will not expand\")\n```\n\nLANGUAGE: python\nCODE:\n```\nenv.FOO = literal(\"the value of {root} is\").expandable(\"{root}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin For Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `plugin_for` attribute in a Rez package definition file. The `plugin_for` attribute is a string that specifies the name of the package for which this package is a plugin.  This attribute is useful when using the `rez-plugins` command.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nplugin_for = \"maya\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Timestamp Attribute in Rez Package\nDESCRIPTION: This snippet demonstrates how to access the 'timestamp' attribute, which represents the epoch time when the Rez package was released. The attribute is an integer representing seconds since the epoch.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ntimestamp = 1463350552\n```\n\n----------------------------------------\n\nTITLE: Package Definition Example (Python)\nDESCRIPTION: This Python code snippet shows an example of a package definition file for the 'bah' package. It specifies the package's name, version, and a required dependency on 'eek-2.6'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/basic_concepts.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nname = \"bah\"\n\nversion = \"4\"\n\nrequires = [\n   \"eek-2.6\"\n]\n```\n\n----------------------------------------\n\nTITLE: Pre-Build Commands Definition (Python)\nDESCRIPTION: Defines commands to be executed before the package is built. Can be used to set environment variables or perform other pre-build tasks.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef pre_build_commands():\n   env.FOO_BUILT_BY_REZ = 1\n```\n\n----------------------------------------\n\nTITLE: Entering Package Environment with rez-env (Text)\nDESCRIPTION: This snippet illustrates the use of `rez-env` to enter a configured environment containing the `hello_world` package. It shows the output indicating the resolved packages and their locations, confirming that the environment is correctly configured with the requested dependencies.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n]$\\ rez-env hello_world\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@workstation.local, on Sun Jul 31 14:43:54 2016, using Rez v2.0.rc1.44\n\nrequested packages:\nhello_world\n~platform==osx    (implicit)\n~arch==x86_64     (implicit)\n~os==osx-10.11.5  (implicit)\n\nresolved packages:\narch-x86_64        /home/ajohns/packages/arch/x86_64                                            (local)\nhello_world-1.0.0  /home/ajohns/packages/hello_world/1.0.0                                      (local)\nos-osx-10.11.5     /home/ajohns/packages/os/osx-10.11.5                                         (local)\nplatform-osx       /home/ajohns/packages/platform/osx                                           (local)\npython-2.7.11      /home/ajohns/packages/python/2.7.11/platform-osx/arch-x86_64/os-osx-10.11.5  (local)\n\n> ]$ █\n```\n\n----------------------------------------\n\nTITLE: Accessing VCS Attribute in Rez Package\nDESCRIPTION: This snippet shows how to access the 'vcs' attribute, indicating the version control system used for the Rez package release.  The attribute is a string representing the name of the VCS, such as 'git'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nvcs = \"git\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Environment with rez-context (Text)\nDESCRIPTION: This snippet shows how to use `rez-context` to display information about the currently active rez environment, including the resolved packages and their locations. It's useful for verifying the environment configuration.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/getting_started.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> ]$ rez-context\nresolved by ajohns@workstation.local, on Sun Jul 31 14:43:54 2016, using Rez v2.0.rc1.44\n\nrequested packages:\nhello_world\n~platform==osx    (implicit)\n~arch==x86_64     (implicit)\n~os==osx-10.11.5  (implicit)\n\nresolved packages:\narch-x86_64        /home/ajohns/packages/arch/x86_64                                            (local)\nhello_world-1.0.0  /home/ajohns/packages/hello_world/1.0.0                                      (local)\nos-osx-10.11.5     /home/ajohns/packages/os/osx-10.11.5                                         (local)\nplatform-osx       /home/ajohns/packages/platform/osx                                           (local)\npython-2.7.11      /home/ajohns/packages/python/2.7.11/platform-osx/arch-x86_64/os-osx-10.11.5  (local)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Initialization\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and including necessary modules to build the Rez project.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\ninclude(RezBuild)\n\nsubdirs(lib)\nsubdirs(util)\n```\n\n----------------------------------------\n\nTITLE: Package Tools Definition (Python)\nDESCRIPTION: Defines a list of tools provided by the package. This information is used for managing suite tools within Rez.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ntools = [\n   \"houdini\",\n   \"hescape\",\n   \"hython\"\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial Request List in Rez\nDESCRIPTION: This snippet demonstrates the output of the initial request list at the start of the Rez solve process. It prints the requested packages and their versions, providing a starting point for dependency resolution.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrequest: foo-1.2 bah-3 ~foo-1\n```\n\n----------------------------------------\n\nTITLE: Defining Description Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `description` attribute in a Rez package definition file. The `description` attribute is a string that provides a general description of the package, independent of any particular version.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndescription = \"Library for communicating with the dead.\"\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Configuration File\nDESCRIPTION: This snippet uses `rez_install_cmake` to generate and install a CMake configuration file for the 'translate' library. This allows other CMake projects to easily find and use the library. It specifies include directories, library directories, libraries, and definitions to be used when linking against 'translate'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/translate_lib/2.2.0/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nrez_install_cmake(\n\tDESTINATION \tcmake\n\tINCLUDE_DIRS\tinclude \t${pkgs_INCLUDE_DIRS}\n\tLIBRARY_DIRS \tlib \t\t${pkgs_LIBRARY_DIRS}\n\tLIBRARIES\t\ttranslate\t${pkgs_LIBRARIES}\n\tDEFINITIONS\t\t\t\t${pkgs_DEFINITIONS}\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Alias Behavior in Enums (Python)\nDESCRIPTION: This code shows how enum members can have the same value, creating aliases.  `alias_for_square` is an alias of `square` because it has the same value. Accessing the enum by value returns the first defined member with that value.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> class Shape(Enum):\n...   __order__ = 'square diamond circle alias_for_square'  # only needed in 2.x\n...   square = 2\n...   diamond = 1\n...   circle = 3\n...   alias_for_square = 2\n...\n>>> Shape.square\n<Shape.square: 2>\n>>> Shape.alias_for_square\n<Shape.square: 2>\n>>> Shape(2)\n<Shape.square: 2>\n```\n\n----------------------------------------\n\nTITLE: Verifying Suite Activation (Console)\nDESCRIPTION: These commands verify that the Rez suite has been activated correctly. `which maya` confirms that the `maya` command is now found within the suite's `bin` directory, and `ls` lists the contents of the `bin` directory, showing the available tools.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ which maya\n./mysuite/bin/maya\n\n$ ls ./mysuite/bin\nmaya\nnuke\n```\n\n----------------------------------------\n\nTITLE: Inspecting Context Files with rez-context\nDESCRIPTION: This snippet demonstrates how to inspect a context file using the `rez-context` tool. It allows viewing the resolved packages, requested packages, and other metadata stored within the context file. This can be done without activating the environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rez-context test.rxt\n\nresolved by ajohns@14jun01.methodstudios.com, on Wed Oct 22 12:44:00 2014,\nusing Rez v2.0.rc1.10\n\nrequested packages:\nfoo\nbah\n\nresolved packages:\neek-2.6   /packages/inhouse/eek/2.6\nfoo-1.2   /packages/inhouse/foo/1.2\nbah-4     /packages/inhouse/bah/4\n```\n\n----------------------------------------\n\nTITLE: Finding Rez Packages\nDESCRIPTION: This snippet uses the `rez_find_packages` function to locate Rez packages and store their information with the prefix 'pkgs'. The AUTO option indicates automatic detection of package dependencies.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/translate_lib/2.2.0/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nrez_find_packages(PREFIX pkgs AUTO)\n```\n\n----------------------------------------\n\nTITLE: Rez Environment Whitelisting Packages (text)\nDESCRIPTION: Demonstrates using the `.cli` ephemeral as a whitelist.  The command turns on cli for foo and bah only.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# turn on cli for foo and bah only\n]$ rez-env foo-1 bah==2.3.1 eek-2.4 '.cli-foo|bah'\n```\n\n----------------------------------------\n\nTITLE: Printing Error Messages\nDESCRIPTION: This code shows how to print an error message to standard error using the `error()` function.  Note that this does not prevent the environment from being constructed. The example displays an error message when 'PyQt' is in the resolved environment.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif \"PyQt\" in resolve:\n   error(\"The floob package has problems running in combo with PyQt\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Including RezBuild Module\nDESCRIPTION: This snippet sets the minimum required CMake version and includes the RezBuild module, which provides Rez-specific build functions.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/translate_lib/2.2.0/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\ninclude(RezBuild)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet configures the CMake project, requiring a minimum CMake version of 2.8. It also locates rez packages using `rez_find_packages`, and sets up include and link directories.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/util/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\nrez_find_packages(PREFIX pkgs AUTO)\n\n# expose local lib\nINCLUDE_DIRECTORIES ( ../lib )\nLINK_DIRECTORIES( lib )\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Automodule Directive for Rez Module\nDESCRIPTION: This snippet uses the `automodule` directive to automatically generate documentation for the Rez module specified by `fullname`. The `:members:` option ensures that all module members (functions, classes, etc.) are included in the documentation.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/_templates/autosummary/module.rst#_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n.. automodule:: {{ fullname }}\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Moving a Package via Command Line (Rez)\nDESCRIPTION: This command moves a package from one location to another using the `rez-mv` command. It also ignores the package at the source location. The command requires the destination path and package identification.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rez-mv --dest-path /packages2 python-3.7.4 /packages\n```\n\n----------------------------------------\n\nTITLE: Installing Rez from Source\nDESCRIPTION: This snippet shows how to install Rez from the source directory using Python 3.7+. It illustrates the command to run the `install.py` script with the destination directory specified.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n]$ python3 ./install.py -v DEST_DIR\n```\n\n----------------------------------------\n\nTITLE: Checking for Ephemeral Package\nDESCRIPTION: This code demonstrates how to check if an ephemeral package is present in the resolved environment using the `ephemerals` object. The example checks for the presence of 'foo.cli'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif \"foo.cli\" in ephemerals:\n   info(\"Foo cli option is being specified!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Hashed Variants Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `hashed_variants` attribute in a Rez package definition file. The `hashed_variants` attribute is a boolean value that instructs the package to install variants into a subdirectory based on a hash of the variant's contents (its requirements).\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nhashed_variants = True\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Rez Plugins\nDESCRIPTION: This command lists all currently installed Rez plugins along with their type, name, description, and status. It's useful for quickly checking which plugins are available and whether they are loaded correctly.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/plugins.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rez -i\n```\n\n----------------------------------------\n\nTITLE: Displaying Memcached Stats with rez-memcache (Console)\nDESCRIPTION: This code snippet shows how to use the `rez-memcache` command-line tool to display statistics about the memcached server, including uptime, hits, misses, hit ratio, memory usage, and more. It provides an overview of the cache's performance and health.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/caching.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rez-memcache\n\nCACHE SERVER               UPTIME      HITS      MISSES  HIT RATIO  MEMORY  USED\n------------               ------      ----      ------  ---------  ------  ----\n127.0.0.1:11211            20 hours    27690     5205    84%        119 Gb  10 Mb (0%)\ncentral.example.com:11211  6.2 months  19145089  456     99%        64 Mb   1.9 Mb (2%)\n```\n\n----------------------------------------\n\nTITLE: Reconstructing Environment from a Baked Context\nDESCRIPTION: This snippet demonstrates how to reconstruct a resolved environment from a previously saved context file using the `--input` flag with `rez-env`. The command reads the resolved context from 'test.rxt' and configures the environment based on the stored package information, avoiding re-resolution.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env --input test.rxt\n\nYou are now in a rez-configured environment.\n\nresolved by ajohns@14jun01.methodstudios.com, on Wed Oct 22 12:44:00 2014,\nusing Rez v2.0.rc1.10\n\nrequested packages:\nfoo\nbah\n\nresolved packages:\neek-2.6   /packages/inhouse/eek/2.6\nfoo-1.2   /packages/inhouse/foo/1.2\nbah-4     /packages/inhouse/bah/4\n\n> $\n```\n\n----------------------------------------\n\nTITLE: Rez Conflict Operator Example (Text)\nDESCRIPTION: This example demonstrates the use of the conflict operator (!) in a rez-env command. It specifies that any version of maya_utils is acceptable, except for versions within the 2015.6 range of the maya package.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/basic_concepts.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env maya_utils '!maya-2015.6'\n```\n\n----------------------------------------\n\nTITLE: Enumeration Methods and Attributes (Python)\nDESCRIPTION: This snippet shows how to define methods and special methods within an enumeration.  `describe` is a normal method, `__str__` is a special method that defines the string representation of the enum member, and `favorite_mood` is a class method that operates on the enum class itself.  These methods can access `self` for members and `cls` for the enumeration.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> class Mood(Enum):\n...   funky = 1\n...   happy = 3\n...\n...   def describe(self):\n...     # self is the member here\n...     return self.name, self.value\n...\n...   def __str__(self):\n...     return 'my custom str! {0}'.format(self.value)\n...\n...   @classmethod\n...   def favorite_mood(cls):\n...     # cls here is the enumeration\n...     return cls.happy\n```\n\n----------------------------------------\n\nTITLE: Python API Usage: RexExecutor execute_code replacement\nDESCRIPTION: This code snippet demonstrates the recommended replacement for the `isolate` keyword argument in the `rez.rex.RexExecutor.execute_code` method. The `isolate` argument is now removed, and this snippet shows how to achieve the same isolation using a context manager.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith executor.reset_globals():\n    executor.execute_code(...)\n```\n\n----------------------------------------\n\nTITLE: Enum Iteration with Order (Python 2.x)\nDESCRIPTION: This code snippet shows how to iterate over the members of an enumeration, ensuring a specific order in Python 2.x. The `__order__` attribute defines the desired order of members. Note that this attribute is only needed for Python 2.x and is ignored in Python 3.x.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> class Shake(Enum):\n...   __order__ = 'vanilla chocolate cookies mint'  # only needed in 2.x\n...   vanilla = 7\n...   chocolate = 4\n...   cookies = 9\n...   mint = 3\n...\n>>> for shake in Shake:\n...   print(shake)\n...\nShake.vanilla\nShake.chocolate\nShake.cookies\nShake.mint\n```\n\n----------------------------------------\n\nTITLE: Delay Loading a Config Setting in Rez\nDESCRIPTION: This example demonstrates how to delay loading a configuration setting from a separate file using the `DelayLoad` class.  The setting will only be loaded when it is actually referenced, which can improve performance, especially with large configurations.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/configuring_rez.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# in rezconfig\ndefault_relocatable_per_package = DelayLoad('/svr/configs/rez_relocs.yaml')\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Split Package Orderer in Rez\nDESCRIPTION: This snippet demonstrates how to configure the 'version_split' package orderer in the rezconfig.py file. It orders all package versions less than or equal to a specified version first, followed by the remaining versions sorted in the default order. `first_version` must be specified.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_orderers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npackage_orderers = [\n    {\n       \"type\": \"version_split\",\n       \"first_version\": \"2.7.16\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Rez Plugins (Python)\nDESCRIPTION: This code snippet demonstrates how to configure Rez plugins by adding a 'plugins' key to the 'rezconfig.py' file.  In this example, the 'filesystem' plugin is being configured. The empty dictionary indicates that default settings are used for that particular plugin.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/plugins.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nplugins = {\n    \"filesystem\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rez Suite (Console)\nDESCRIPTION: This command creates a new Rez suite directory named `mysuite` in the current working directory using the `rez-suite` tool.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rez-suite --create mysuite\n```\n\n----------------------------------------\n\nTITLE: OrderedEnum Implementation Example Python\nDESCRIPTION: This snippet demonstrates how to create an `OrderedEnum` that supports comparison operators (<, >, <=, >=) between members of the same Enum class. It overrides the comparison methods to compare the `_value_` attribute.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> class OrderedEnum(Enum):\n...     def __ge__(self, other):\n...         if self.__class__ is other.__class__:\n...             return self._value_ >= other._value_\n...         return NotImplemented\n...     def __gt__(self, other):\n...         if self.__class__ is other.__class__:\n...             return self._value_ > other._value_\n...         return NotImplemented\n...     def __le__(self, other):\n...         if self.__class__ is other.__class__:\n...             return self._value_ <= other._value_\n...         return NotImplemented\n...     def __lt__(self, other):\n...         if self.__class__ is other.__class__:\n...             return self._value_ < other._value_\n...         return NotImplemented\n...\n>>> class Grade(OrderedEnum):\n...     __ordered__ = 'A B C D F'\n...     A = 5\n...     B = 4\n...     C = 3\n...     D = 2\n...     F = 1\n...\n>>> Grade.C < Grade.A\nTrue\n```\n\n----------------------------------------\n\nTITLE: Rez Environment Variant Selection Text\nDESCRIPTION: These code snippets demonstrate how Rez selects the appropriate variant based on the environment being resolved using the `rez-env` command. The first example shows that when `maya-2017` is specified, the `maya-2017` variant is selected, and similarly for `maya-2016`. The third example shows that when no maya version is specified, the highest versioned maya variant is chosen by default.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/variants.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env my_maya_plugin maya-2017 -- echo '$REZ_MY_MAYA_PLUGIN_ROOT'\n/rez/packages/my_maya_plugin/1.0.0/maya-2017\n]$ rez-env my_maya_plugin maya-2016 -- echo '$REZ_MY_MAYA_PLUGIN_ROOT'\n/rez/packages/my_maya_plugin/1.0.0/maya-2016.sp2\n```\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env my_maya_plugin -- echo '$REZ_MY_MAYA_PLUGIN_ROOT'\n/rez/packages/my_maya_plugin/1.0.0/maya-2017\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Timestamp Package Orderer in Rez\nDESCRIPTION: This snippet demonstrates configuring the 'soft_timestamp' package orderer. It prioritizes packages released before a given timestamp, followed by those released after. The `rank` parameter allows version changes at that rank and above to override the timestamp. Timestamp is in epoch seconds.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_orderers.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npackage_orderers = [\n    {\n        \"type\": \"soft_timestamp\",\n        \"timestamp\": 1568001600,  # 2019-09-09\n        \"rank\": 3\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Members and Attributes\nDESCRIPTION: Illustrates that Enum members are accessed via the class (e.g., `Color.red`) and that attributes of the class are not directly available through the member. The example shows an attempt to access `Color.red.blue`, which results in an AttributeError because `blue` is not an attribute of the `Color` member `red`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> Color.red\n<Color.red: 1>\n>>> Color.red.blue\nTraceback (most recent call last):\n...\nAttributeError: 'Color' object has no attribute 'blue'\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Rez Documentation\nDESCRIPTION: This snippet demonstrates how to create a Python virtual environment for building Rez documentation. It involves creating a virtual environment, activating it, installing dependencies from the `docs/requirements.txt` file, navigating to the `docs` directory, and then building the HTML documentation using the `make html` command.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install -r docs/requirements.txt\n\ncd docs\nmake html # .\\make html on Windows\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for a Rez Extension\nDESCRIPTION: This snippet demonstrates how to display help information for a Rez extension named \"world\" using the `rez` command. This allows users to understand the available commands and options provided by the extension.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/example_extensions/hello_cmd/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrez world -h\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files\nDESCRIPTION: This snippet uses `rez_install_files` to install header files from the 'src/' directory to the 'include/translate' directory. The RELATIVE option specifies that the installation path should be relative to the source directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/translate_lib/2.2.0/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB_RECURSE h_files \"src/*.h\")\nrez_install_files(\n\t${h_files}\n\tRELATIVE src\n\tDESTINATION include/translate\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Context with Tool Suffixing (Console)\nDESCRIPTION: These commands demonstrate how to add a context (`maya2017.rxt`) to a Rez suite (`mysuite`) and apply a suffix (`_beta`) to all tools exposed by that context. This allows for running multiple versions of the same tool in different contexts.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env maya-2017 --output maya2017.rxt\n$ rez-suite --add maya2017.rxt --context maya2017 mysuite\n$ rez-suite --suffix _beta --context maya2017 mysuite\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Members Programmatically in Python\nDESCRIPTION: This snippet demonstrates how to access enum members programmatically, using both the value and the name. `Color(1)` retrieves the member with the value 1, and `Color['red']` retrieves the member with the name 'red'. This is useful when the member to access is not known at compile time.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Color(1)\n<Color.red: 1>\n>>> Color(3)\n<Color.blue: 3>\n>>> Color['red']\n<Color.red: 1>\n>>> Color['green']\n<Color.green: 2>\n```\n\n----------------------------------------\n\nTITLE: Removing Packages Ignored Since (Rez, Python)\nDESCRIPTION: This snippet removes packages that have been ignored for a certain number of days using the Rez API's `remove_packages_ignored_since` function. In this case, the ignored packages are removed after being ignored for 30 days.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from rez.package_remove import remove_packages_ignored_since\n>>>\n>>> remove_packages_ignored_since(days=30)\n1\n```\n\n----------------------------------------\n\nTITLE: Checking Build Type\nDESCRIPTION: This code snippet shows how to check the build type using the `build['build_type']` attribute within the `pre_build_commands` function. This allows you to differentiate between local and central builds and perform actions accordingly. The example checks if the build type is 'local'.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif build['build_type'] == 'local':\n   pass\n```\n\n----------------------------------------\n\nTITLE: Unique Enum Decorator Example Python\nDESCRIPTION: This example demonstrates the use of the `@unique` decorator to ensure that an Enum does not have any aliases (duplicate values with different names). If aliases are found, a `ValueError` is raised.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> @unique\n... class NoDupes(Enum):\n...    first = 'one'\n...    second = 'two'\n...    third = 'two'\nTraceback (most recent call last):\n...\nValueError: duplicate names found in <enum 'NoDupes'>: third -> second\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the 'translate' Shared Library\nDESCRIPTION: This snippet defines the 'translate' shared library, compiles C++ source files from the 'src/' directory, links the library against the libraries found by `rez_find_packages`, and installs the library to the 'lib' directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/translate_lib/2.2.0/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB_RECURSE cpp_files \"src/*.cpp\")\nadd_library ( translate SHARED ${cpp_files} )\nTARGET_LINK_LIBRARIES(translate ${pkgs_LIBRARIES})\nINSTALL ( TARGETS translate DESTINATION lib )\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Suite Tools (Console)\nDESCRIPTION: This command shows how to use the `++help` control argument to display help information about a suite tool (`maya`).  Control arguments are prefixed with `+` or `++` and are passed directly to `rez` rather than the underlying tool.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ maya ++help\nusage: maya [+h] [+a] [+i] [+p [PKG [PKG ...]]] [++versions]\n            [++command COMMAND [ARG ...]] [++stdin] [++strict] [++nl]\n            [++peek] [++verbose] [++quiet] [++no-rez-args]\n\noptional arguments:\n+h, ++help            show this help message and exit\n+a, ++about           print information about the tool\n+i, ++interactive     launch an interactive shell within the tool's\n                          configured environment\n+p [PKG [PKG ...]], ++patch [PKG [PKG ...]]\n                          run the tool in a patched environment\n++versions            list versions of package providing this tool\n++command COMMAND [ARG ...]\n                          read commands from string, rather than executing the\n                          tool\n++stdin               read commands from standard input, rather than\n                          executing the tool\n++strict              strict patching. Ignored if ++patch is not present\n++nl, ++no-local      don't load local packages when patching\n++peek                diff against the tool's context and a re-resolved copy\n                          - this shows how 'stale' the context is\n++verbose             verbose mode, repeat for more verbosity\n++quiet               hide welcome message when entering interactive mode\n++no-rez-args         pass all args to the tool, even if they start with '+'\n```\n\n----------------------------------------\n\nTITLE: Creating Rez Contexts (Console)\nDESCRIPTION: These commands create Rez context files (`maya.rxt` and `nuke.rxt`) by resolving the `maya-2016.2` and `nuke` packages using the `rez-env` command. The `--output` option specifies the output file for the context.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/suites.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rez-env maya-2016.2 --output maya.rxt\n$ rez-env nuke --output nuke.rxt\n```\n\n----------------------------------------\n\nTITLE: UniqueEnum Implementation Example Python\nDESCRIPTION: This example shows how to create a `UniqueEnum` that raises a ValueError if a duplicate value is assigned. This is achieved by overriding the `__init__` method and checking for existing members with the same value.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> class UniqueEnum(Enum):\n...     def __init__(self, *args):\n...         cls = self.__class__\n...         if any(self.value == e.value for e in cls):\n...             a = self.name\n...             e = cls(self.value).name\n...             raise ValueError(\n...                     \"aliases not allowed in UniqueEnum:  %r --> %r\"\n...                     % (a, e))\n... \n>>> class Color(UniqueEnum):\n...     red = 1\n...     green = 2\n...     blue = 3\n...     grene = 2\nTraceback (most recent call last):\n...\nValueError: aliases not allowed in UniqueEnum:  'grene' --> 'green'\n```\n\n----------------------------------------\n\nTITLE: Conditional Environment Variable Setting During Build\nDESCRIPTION: This code demonstrates how to conditionally set an environment variable based on whether a build is occurring. The `building` boolean variable is used to determine if the package is currently being built. If true, the `FOO_INCLUDE_PATH` environment variable is set.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif building:\n   env.FOO_INCLUDE_PATH = \"{root}/include\"\n```\n\n----------------------------------------\n\nTITLE: Setting Git Commit Template\nDESCRIPTION: Sets a git commit template to automatically add a sign-off line to every commit, ensuring compliance with the Developer Certificate of Origin (DCO) requirement. This simplifies the signing process for contributions to the Rez project.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n]\\$ echo \"Signed-off-by: $(git config user.name) <$(git config user.email)>\" > .git-commit-template\n]\\$ git config commit.template .git-commit-template\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Files\nDESCRIPTION: This snippet installs documentation files from the 'docs/' directory to the 'docs' directory using `rez_install_files`.  `LOCAL_SYMLINK` is used, potentially to address issues related to symlinking in GitHub.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/translate_lib/2.2.0/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nFILE(GLOB_RECURSE doc_files \"docs/*\")\nrez_install_files(\n\t${doc_files}\n\tRELATIVE src\n\tDESTINATION docs\n\tLOCAL_SYMLINK # Testing for github issue #553\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Ignored Packages (Rez)\nDESCRIPTION: This example demonstrates removing packages that have been ignored for a specified number of days using the `rez-rm` command-line tool. It removes packages ignored longer than 30 days.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/managing_packages.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ rez-rm --ignored-since=30 -v\n14:47:09 INFO     Searching filesystem@/home/ajohns/packages...\n14:47:09 INFO     Removed python-3.7.4 from filesystem@/home/ajohns/packages\n1 packages were removed.\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Attributes\nDESCRIPTION: This snippet shows how to access test-related attributes using the `test` object within the `pre_test_commands` function. It provides an example of accessing the test name.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nif test.name == \"unit\":\n   info(\"My unit test is about to run yay\")\n```\n\n----------------------------------------\n\nTITLE: Package Definition Snippet with sys import - Python\nDESCRIPTION: This snippet demonstrates how Python modules are handled within package definitions in Rez.  Modules imported at the top level are explicitly excluded from becoming package attributes. This prevents exposing internal implementation details as part of the package interface.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\ndescription = \"This package was built on %s\" % sys.platform\n```\n\n----------------------------------------\n\nTITLE: Defining Relocatable Attribute in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `relocatable` attribute in a Rez package definition file. The `relocatable` attribute is a boolean value indicating whether the package can be copied to another package repository. If not explicitly set, the default value is taken from the global configuration.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nrelocatable = True\n```\n\n----------------------------------------\n\nTITLE: Binding Existing Software as Rez Packages\nDESCRIPTION: This example demonstrates how to use the `rez-bind` tool to create Rez packages based on software already installed on the system. It shows the commands to bind `platform`, `arch`, `os`, and `python` as Rez packages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n]$ rez-bind platform\n]$ rez-bind arch\n]$ rez-bind os\n]$ rez-bind python\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Executable\nDESCRIPTION: This snippet defines the executable to be built (`greeter`) from `main.cpp`. It links the executable with necessary libraries (supworld and rez packages) and specifies the installation location as the `bin` directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/util/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# build and install executable\nADD_EXECUTABLE (greeter main.cpp)\nTARGET_LINK_LIBRARIES ( greeter supworld ${pkgs_LIBRARIES} )\nINSTALL ( TARGETS greeter DESTINATION bin )\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Requests\nDESCRIPTION: This snippet illustrates how to access package requests using the `request` object. It shows how to check for the presence of a package request and how to test it with the intersects function.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"maya\": \"maya-2015\",\n   \"maya_utils\": \"maya_utils-1.2+<2\",\n   \"corelib\": \"!corelib-1.4.4\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nif intersects(request.get_range(\"maya\", \"0\"), \"2019\"): \n   info(\"maya 2019.* was asked for!\")\n```\n\nLANGUAGE: python\nCODE:\n```\nif \"maya\" in request:\n   info(\"maya was asked for!\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Reductions in Rez\nDESCRIPTION: This snippet shows reductions and the scopes that changed as a result, due to dependency conflicts or constraints during Rez solving.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nREDUCING:\nremoved blah-35.0.2[1] (dep(python-3.6) <--!--> python==2.7.3)\n[blah==35.0.2[0,1]] was reduced to [blah==35.0.2[0]]* by python==2.7.3\n```\n\n----------------------------------------\n\nTITLE: Detect Old-Style Commands in Rez Repositories (Python)\nDESCRIPTION: This Python script iterates through all package families, packages, and variants in Rez repositories to detect and report the usage of old-style commands. It leverages the `rez.config`, `rez.packages.iter_packages`, and `rez.packages.iter_package_families` modules. The script is intended to be run before upgrading to Rez 3.0.0 to identify potentially incompatible packages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/guides/update_to_3.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rez.config import config\nfrom rez.packages import iter_packages, iter_package_families\n\nconfig.warn_old_commands = True\nconfig.error_old_commands = False\nconfig.disable_rez_1_compatibility = False\n\nfor family_name in iter_package_families():\n   packages = iter_packages(family_name.name)\n\n   for package in packages:\n      package.validate_data()\n\n      for variant in package.iter_variants():\n            variant.validate_data()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files\nDESCRIPTION: This section installs the header files for the 'supworld' library. It gathers all '.h' files and uses the custom function 'rez_install_files' to install them to the 'include/supworld' directory.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/lib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(GLOB_RECURSE h_files \"*.h\")\nrez_install_files(\n\t${h_files}\n\tDESTINATION include/supworld\n)\n```\n\n----------------------------------------\n\nTITLE: Rez Weak Reference Example (Text)\nDESCRIPTION: This example showcases the weak reference operator (~) in a rez-env command. It indicates that if the nuke package is present, it must be within version 9.rc2, but the package is not explicitly required.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/basic_concepts.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env foo '~nuke-9.rc2'\n```\n\n----------------------------------------\n\nTITLE: Pushing Phase onto the Phase Stack in Rez\nDESCRIPTION: This snippet illustrates pushing the initial phase onto the phase stack during Rez solving. The numbers indicate the phase's position within the stack, providing context to the resolving process.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npushed {0,0}: [foo==1.2.0[0,1]]* bah[3.0.5..3.4.0(6)]*\n```\n\n----------------------------------------\n\nTITLE: Displaying Added Scopes in Rez\nDESCRIPTION: This snippet illustrates scopes added for new extractions, meaning new packages are being introduced into the solve.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nADDING:\nadded utils[1.2.0..5.2.0(12:14)]*\n```\n\n----------------------------------------\n\nTITLE: Installing Rez Extension with Pip\nDESCRIPTION: This snippet shows how to install a Rez extension using pip.  It is assumed that pip is configured to install into Rez's virtual environment. This installation makes the plugin available for Rez to discover.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/example_extensions/hello_cmd/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrez -i\n```\n\n----------------------------------------\n\nTITLE: Late Binding Tools with `in_context` - Python\nDESCRIPTION: This late binding example shows how the tool list depends on if the function is being evaluated as part of a rez context, and if the 'maya' package is being requested.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@late()\ndef tools():\n   result = [\"edit\"]\n\n   if in_context() and \"maya\" in request:\n      result.append(\"maya-edit\")\n\n   return result\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Family Package Orderer with Version Split in Rez\nDESCRIPTION: This snippet demonstrates how to configure the 'per_family' package orderer in rezconfig.py with a nested 'version_split' orderer. This allows applying specific orderers to different package families, such as prioritizing Python 2 versions for the 'python' package. `first_version` must be specified.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_orderers.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npackage_orderers = [\n    {\n       \"type\": \"per_family\",\n       \"orderers\": [\n            {\n                \"packages\": [\"python\"],\n                \"type\": \"version_split\",\n                \"first_version\": \"2.7.16\"\n            }\n       ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This command sets the minimum required CMake version for the project. This ensures that the build system has the necessary features and capabilities to correctly process the CMakeLists.txt file.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/data/tests/builds/packages/sup_world/3.8/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n```\n\n----------------------------------------\n\nTITLE: IntEnum Implementation Example Python\nDESCRIPTION: This code shows a minimal implementation of `IntEnum` by inheriting from both `int` and `Enum`. This demonstrates how derived enumerations can be defined by mixing in other types.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass IntEnum(int, Enum):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Rez Environment with Ephemerals and Environment Variables (text)\nDESCRIPTION: Demonstrates how ephemeral packages set environment variables. `REZ_EPH_(PKG)_REQUEST` and `REZ_USED_EPH_RESOLVE` are set based on the ephemeral packages requested.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/ephemerals.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-env python .foo-1 .bah-2\n...\n]$ echo $REZ_EPH_FOO_REQUEST\n1\n]$ echo $REZ_USED_EPH_RESOLVE\n.foo-1 .bah-2\n```\n\n----------------------------------------\n\nTITLE: Displaying Intersecting Scopes in Rez\nDESCRIPTION: This snippet shows scopes that were intersected by previous extractions during Rez solving.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nINTERSECTING:\npython[2.7.3..3.3.0(3)] was intersected to [python==2.7.3] by range '2'\n```\n\n----------------------------------------\n\nTITLE: Changelog Generation using release-rez.py (Python)\nDESCRIPTION: This snippet demonstrates how to use the `release-rez.py` script to automatically generate changelog entries based on pull request and issue numbers. It takes pull request and issue numbers as arguments and prints the generated changelog entry to standard output, which can then be pasted into the `CHANGELOG.md` file.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/RELEASE.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n]$\\n]$ python ./release-rez.py -c X Y Z\n```\n\n----------------------------------------\n\nTITLE: Defining Help Attribute (String) in Rez Package\nDESCRIPTION: This code snippet demonstrates how to define the `help` attribute in a Rez package definition file as a string.  The `help` attribute provides a URL for the package webpage or a command to run. This help information can be accessed using the `rez-help` command line tool.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nhelp = \"https://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Restricted Subclassing of Enumerations (Python)\nDESCRIPTION: This code demonstrates that subclassing an enumeration is only allowed if the base enumeration does not define any members. Attempting to extend an enumeration with existing members raises a `TypeError`. The reason is that allowing subclassing of enums that define members would lead to a violation of invariants.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> class MoreColor(Color):\n...   pink = 17\nTraceback (most recent call last):\n...\nTypeError: Cannot extend enumerations\n```\n\n----------------------------------------\n\nTITLE: Checking Implicit Package Request\nDESCRIPTION: This code demonstrates how to check if a package is implicitly requested using the `implicits` object. The example checks if the `platform` package is implicitly requested.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif \"platform\" in implicits:\n   pass\n```\n\n----------------------------------------\n\nTITLE: Creating Comments in Shell Script\nDESCRIPTION: This code shows how to add a comment line to the generated shell script code using the `comment()` function. These comments are only visible when inspecting the generated environment script.  The example adds a comment indicating a binary replacement.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif \"nuke\" in resolve:\n   comment(\"note: taking over 'nuke' binary!\")\n   alias(\"nuke\", \"foo_nuke_replacer\")\n```\n\n----------------------------------------\n\nTITLE: Revision Definition (Python)\nDESCRIPTION: Defines information about the source control revision used for the release. Example is git-based.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nrevision = \\\n   {'branch': 'master',\n      'commit': '22abe31541ceebced8d4e209e3f6c44d8d0bea1c',\n      'fetch_url': 'git@github.com:foo/dummy.git',\n```\n\n----------------------------------------\n\nTITLE: AutoNumber Enum Example Python\nDESCRIPTION: This snippet shows how to create an `AutoNumber` Enum, where the value of each member is automatically assigned based on the order of declaration, starting from 1. The `__new__` method is overridden to assign the value.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> class AutoNumber(Enum):\n...     def __new__(cls):\n...         value = len(cls.__members__) + 1\n...         obj = object.__new__(cls)\n...         obj._value_ = value\n...         return obj\n...\n>>> class Color(AutoNumber):\n...     __order__ = \"red green blue\"  # only needed in 2.x\n...     red = ()\n...     green = ()\n...     blue = ()\n...\n>>> Color.green.value == 2\nTrue\n```\n\n----------------------------------------\n\nTITLE: Alternative Description Definition - Python\nDESCRIPTION: This example shows an alternative way to define the package description using a standard Python function and assigning its return value to the `description` attribute. This demonstrates the flexibility of defining attributes in Rez package files.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _description():\n   return \"%s version %s\" % (this.name, this.version)\n\ndescription = _description()\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example (Text)\nDESCRIPTION: Illustrates the typical directory structure of a Rez package with multiple Python variants, including the package.py file, build files (e.g., CMakeLists.txt), a 'build' directory, and variant-specific subdirectories.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/building_packages.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+- package.py\n+- CMakeLists.txt (or other build file)\n+-build\n+-python-2.6  # build dir for python-2.6 variant\n+-python-2.7  # build dir for python-2.6 variant\n```\n\n----------------------------------------\n\nTITLE: Unsetting an Environment Variable\nDESCRIPTION: This snippet demonstrates the usage of the unsetenv function which is used to unset environment variables.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nunsetenv(\"FOO_LIC_SERVER\")\n```\n\n----------------------------------------\n\nTITLE: Generating a UUID (Text)\nDESCRIPTION: Command to generate a UUID using Python. The generated UUID is typically used as the package family identifier.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n]$ python -c 'import uuid; print(uuid.uuid4().hex)'\n```\n\n----------------------------------------\n\nTITLE: Package Build System Definition (Python)\nDESCRIPTION: Specifies the build system used for the package. If not set, Rez attempts to automatically detect the build system.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nbuild_system = \"cmake\"\n```\n\n----------------------------------------\n\nTITLE: Release Message Definition (Python)\nDESCRIPTION: Defines the message associated with the package release. Captures the purpose and context of the release.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nrelease_message = \"Fixed the flickering thingo\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Merged Request List in Rez\nDESCRIPTION: This snippet shows the simplified (merged) version of the initial request list. It occurs immediately after the 'request:' output and highlights how conflicting or redundant requests are resolved.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmerged request: foo-1.2 bah-3\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Environment Variables in Rez\nDESCRIPTION: This snippet demonstrates how to configure PowerShell environment variables using `Set-Item` instead of `$Env:`. This change was implemented to address issues with environment variables containing brackets in PowerShell.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Item -Path Env:\\VariableName -Value \"VariableValue\"\n```\n\n----------------------------------------\n\nTITLE: Requires Rez Version Definition (Python)\nDESCRIPTION: Defines the minimum Rez version required to build the package, ensuring compatibility with package features.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nrequires_rez_version = \"2.10\"\n```\n\n----------------------------------------\n\nTITLE: Listing Attributes of Enum Class and Member\nDESCRIPTION: Demonstrates the difference in available attributes between an Enum class and its members when extra methods are defined in the Enum subclass. `dir(Planet)` lists class-level attributes including members, while `dir(Planet.EARTH)` lists member-specific attributes, including custom methods.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> dir(Planet)\n['EARTH', 'JUPITER', 'MARS', 'MERCURY', 'NEPTUNE', 'SATURN', 'URANUS',\n'VENUS', '__class__', '__doc__', '__members__', '__module__']\n>>> dir(Planet.EARTH)\n['__class__', '__doc__', '__module__', 'name', 'surface_gravity', 'value']\n```\n\n----------------------------------------\n\nTITLE: Displaying Extractions in Rez\nDESCRIPTION: This snippet shows the extractions that have occurred from the current scopes during Rez solving.  These are package requests extracted from the scopes.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nEXTRACTING:\nextracted python-2 from [foo==1.2.0[0,1]]*\nextracted utils-1.2+ from bah[3.0.5..3.4.0(6)]*\n```\n\n----------------------------------------\n\nTITLE: Displaying Original Package Root (Console)\nDESCRIPTION: This code snippet demonstrates how to display the original package root location using the environment variable `REZ_<package_name>_ORIG_ROOT`. This environment variable is set when a package variant is cached and provides the original location of the package on the file system.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/caching.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ echo $REZ_FLASK_ORIG_ROOT\n/svr/packages/Flask/1.1.2/88a70aca30cb79a278872594adf043dc6c40af99\n```\n\n----------------------------------------\n\nTITLE: Stopping Resolve with an Error\nDESCRIPTION: This snippet shows how to stop a resolve process with an error message using the `stop` function. It's used when an unrecoverable error is detected.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nstop(\"The value should be %s\", expected_value)\n```\n\n----------------------------------------\n\nTITLE: Displaying Merged Extractions in Rez\nDESCRIPTION: This snippet demonstrates the result of merging extracted package requests into a simplified set, which may be simpler or may indicate conflicts.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nMERGE-EXTRACTIONS:\nmerged extractions are: python-2 utils-1.2+\n```\n\n----------------------------------------\n\nTITLE: Pickling Enum Example Python\nDESCRIPTION: This snippet demonstrates how to pickle and unpickle an enum member.  It uses the `pickle` module to serialize and deserialize the `Fruit.tomato` enum member, verifying that the unpickled object is the same as the original.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from enum.test_enum import Fruit\n>>> from pickle import dumps, loads\n>>> Fruit.tomato is loads(dumps(Fruit.tomato, 2))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Displaying Solve Number in Rez\nDESCRIPTION: This snippet shows output indicating that a phase is starting during Rez solving.  The number indicates the number of phases that have been solved so far (1-indexed).\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n--------------------------------------------------------------------------------\nSOLVE #1...\n--------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Enum Functional API Module Name Specification Python\nDESCRIPTION: This snippet shows how to explicitly specify the module name when creating an enum using the functional API. This is necessary to ensure proper pickling of the Enum, especially when using utility functions in separate modules, or on platforms like IronPython or Jython.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> Animals = Enum('Animals', 'ant bee cat dog', module=__name__)\n```\n\n----------------------------------------\n\nTITLE: Popping Phase from the Phase Stack in Rez\nDESCRIPTION: This snippet demonstrates retrieving the topmost phase from the phase stack during Rez solving, happening after the `SOLVE` output.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/SOLVER.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npopped {0,0}: [foo==1.2.0[0,1]]* bah[3.0.5..3.4.0(6)]*\n```\n\n----------------------------------------\n\nTITLE: Sourcing Shell Scripts\nDESCRIPTION: This snippet illustrates how to source a shell script using the `source` function. It highlights that side effects of the sourced script are not visible to packages.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsource(\"{root}/scripts/init.sh\")\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright and License Notice\nDESCRIPTION: Adds a copyright and license notice at the beginning of new source files. This informs users about the licensing terms and the copyright holders for the Rez project.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# SPDX-License-Identifier: Apache-2.0\n# Copyright Contributors to the Rez Project\n```\n\n----------------------------------------\n\nTITLE: Using the `testing` variable\nDESCRIPTION: This snippet shows how to use the `testing` variable to conditionally set environment variables during test execution.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nif testing:\n   env.FOO_TEST_DATA_PATH = \"{root}/tests/data\"\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Autosummary Directive for Rez Modules\nDESCRIPTION: This snippet uses the `autosummary` directive to generate a summary of the submodules within a Rez module. It iterates through a list of modules specified by the `modules` variable, creating a table of contents entry for each submodule. The `:toctree:` option specifies the directory where the generated summary files will be placed, and `:recursive:` makes it recursive.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/_templates/autosummary/module.rst#_snippet_1\n\nLANGUAGE: Jinja2\nCODE:\n```\n{% if modules %}\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :recursive:\n{% for item in modules %}\n   {{ item }}\n{%- endfor %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Version Tokens\nDESCRIPTION: This snippet demonstrates how to access specific tokens (major, minor, patch) within the package version using the `this.version` object.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_commands.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nenv.FOO_MAJOR = this.version.major  # or, this.version[0]\n```\n\n----------------------------------------\n\nTITLE: Package UUID Definition (Python)\nDESCRIPTION: Defines a unique identifier for the package family. Used to prevent naming conflicts across unrelated packages during release.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nuuid = \"489ad32867494baab7e5be3e462473c6\"\n```\n\n----------------------------------------\n\nTITLE: Example Rez Test Execution (Text)\nDESCRIPTION: Illustrates how to execute a specific test defined within a Rez package. Shows the command to run the 'lint' test for the 'maya_utils' package.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n]$ rez-test maya_utils lint\n```\n\n----------------------------------------\n\nTITLE: Previous Version Definition (Python)\nDESCRIPTION: Defines the version of the package previously released. Provides a reference point for tracking updates and changes.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nprevious_version = \"1.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Package Version Definition (Python)\nDESCRIPTION: Defines the version of the package.  The version string is used for dependency resolution and version management.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nversion = \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: IntEnum Usage Example Python\nDESCRIPTION: This example demonstrates the use of `IntEnum`, which is a subclass of both `int` and `Enum`. `IntEnum` members can be compared to integers and to other `IntEnum` members, but not to standard `Enum` members.  It also shows how to use `IntEnum` members as integers (e.g., indexing a list).\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from enum import IntEnum\n>>> class Shape(IntEnum):\n...   circle = 1\n...   square = 2\n...\n>>> class Request(IntEnum):\n...   post = 1\n...   get = 2\n...\n>>> Shape == 1\nFalse\n>>> Shape.circle == 1\nTrue\n>>> Shape.circle == Request.post\nTrue\n>>> class Shape(IntEnum):\n...   circle = 1\n...   square = 2\n...\n>>> class Color(Enum):\n...   red = 1\n...   green = 2\n...\n>>> Shape.circle == Color.red\nFalse\n>>> int(Shape.circle)\n1\n>>> ['a', 'b', 'c'][Shape.circle]\n'b'\n>>> [i for i in range(Shape.square)]\n[0, 1]\n```\n\n----------------------------------------\n\nTITLE: Changelog Definition (Python)\nDESCRIPTION: Defines the changelog for the package release, containing commit history since the last release. Example is git-based.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nchangelog = \\\n   \"\"\"\n   commit 22abe31541ceebced8d4e209e3f6c44d8d0bea1c\n   Author: allan johns <>\n   Date:   Sun May 15 15:39:10 2016 -0700\n\n         first commit\n   \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Functional API Enum Creation Python\nDESCRIPTION: This snippet illustrates the functional API for creating an Enum. The `Enum` class is called with the enum name and member names (as a string). The result is a new Enum class, and its members are accessible via dot notation. This API is similar to `namedtuple`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/src/rez/vendor/enum/doc/enum.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> Animal = Enum('Animal', 'ant bee cat dog')\n>>> Animal\n<enum 'Animal'>\n>>> Animal.ant\n<Animal.ant: 1>\n>>> Animal.ant.value\n1\n>>> list(Animal)\n[<Animal.ant: 1>, <Animal.bee: 2>, <Animal.cat: 3>, <Animal.dog: 4>]\n```\n\n----------------------------------------\n\nTITLE: Inspecting RPATH of a bundled library using patchelf\nDESCRIPTION: Illustrates how Rez bundling remaps rpaths in ELF files on Linux.  It shows how `patchelf` can be used to inspect the rpath of a library both before and after bundling, demonstrating the use of `$ORIGIN` to create relative paths within the bundle. This ensures libraries within the bundle link to other bundled libraries.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/context_bundles.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ # a lib in an original non-bundled package\n$ patchelf --print-rpath /sw/packages/foo/1.0.0/bin/foo\n/sw/packages/bah/2.1.1/lib\n$\n$ # the same lib in our bundle. We assume that package 'bah' is in the bundle\n$ # also, since foo links to one of its libs\n$ patchelf --print-rpath ./mybundle/packages/foo/1.0.0/bin/foo\n$ORIGIN/../../../bah/2.1.1/lib\n```\n\n----------------------------------------\n\nTITLE: Late Binding Function with Early Binding Arbitrary Attribute - Python\nDESCRIPTION: This example shows a late binding function leveraging an early binding arbitrary attribute `_tools` to cache some information that can be evaluated at build time. This reduces the runtime cost of the late binding function.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/docs/source/package_definition.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@late()\ndef tools():\n   import os\n   result = this._tools\n\n   # we don't want artists to see the admin tools\n   if os.getenv(\"_USER_ROLE\") != \"superuser\":\n      result = set(result) - set([\"delete-all\", \"mod-things\"])\n\n   return list(result)\n\n@early()\ndef _tools():\n   import os\n   return os.listdir(\"./bin\")\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated API call in Rez (Python)\nDESCRIPTION: This snippet demonstrates the recommended way to replace a deprecated call to `executor.execute_code(..., isolate=True)` in Rez. Instead, it uses a context manager `executor.reset_globals()` to achieve the same isolation. The `executor` object is assumed to be an instance of `rez.rex.RexExecutor`.\nSOURCE: https://github.com/academysoftwarefoundation/rez/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith executor.reset_globals():\n    executor.execute_code(...)\n```"
  }
]