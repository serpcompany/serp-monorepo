[
  {
    "owner": "steveukx",
    "repo": "git-js",
    "content": "TITLE: Catching errors in async code with simple-git\nDESCRIPTION: Demonstrates two methods for catching errors when using async/await with simple-git: wrapping the entire chain in a try/catch block, and catching errors on individual steps.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\ntry {\n   await git.init();\n   await git.addRemote(name, repoUrl);\n} catch (e) {\n   /* handle all errors here */\n}\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\ntry {\n   await git.init().catch(ignoreError);\n   await git.addRemote(name, repoUrl);\n} catch (e) {\n   /* handle all errors here */\n}\n\nfunction ignoreError() {}\n```\n\n----------------------------------------\n\nTITLE: Git Options as an Object - JavaScript\nDESCRIPTION: Explains how to specify options for git commands using an object.  Key-value pairs in the object are converted to arguments in the git command.  If a value is `null`, the key is used as a boolean flag.  If a value is a string, the key-value pair is passed as `key=value`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\n// results in 'git pull origin master --no-rebase'\ngit.pull('origin', 'master', { '--no-rebase': null });\n\n// results in 'git pull origin master --rebase=true'\ngit.pull('origin', 'master', { '--rebase': 'true' });\n```\n\n----------------------------------------\n\nTITLE: Starting a New Repo - SimpleGit (JavaScript)\nDESCRIPTION: This snippet shows how to initialize a new Git repository, add all files to the staging area, commit the changes, add a remote origin, and push the commit to the remote repository's master branch. It utilizes a chain of `simpleGit` commands for a concise implementation.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit()\n   .init()\n   .add('./*')\n   .commit('first commit!')\n   .addRemote('origin', 'https://github.com/user/repo.git')\n   .push('origin', 'master');\n```\n\n----------------------------------------\n\nTITLE: Starting a New Git Repository - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a new Git repository, add all files, commit the changes, add a remote origin, and push to the remote repository.  It's a concise example of setting up a new repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit()\n   .init()\n   .add('./*')\n   .commit('first commit!')\n   .addRemote('origin', 'https://github.com/user/repo.git')\n   .push('origin', 'master');\n```\n\n----------------------------------------\n\nTITLE: Using Task Promises with simple-git\nDESCRIPTION: Shows how to chain simple-git tasks using Promises and the `await` keyword in an async function.  It demonstrates chaining multiple tasks and awaiting them individually.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\n\n// chain together tasks to await final result\nawait git.init().addRemote('origin', '...remote.git');\n\n// or await each step individually\nawait git.init();\nawait git.addRemote('origin', '...remote.git');\n```\n\n----------------------------------------\n\nTITLE: Setting Author and Committing - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the local Git configuration for the author's name and email, and how to override the author for individual commits. It uses `addConfig` to set the global author and the `--author` option during the commit to set the author for a specific commit.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit()\n   .addConfig('user.name', 'Some One')\n   .addConfig('user.email', 'some@one.com')\n   .commit('committed as \"Some One\"', 'file-one')\n   .commit('committed as \"Another Person\"', 'file-two', {\n      '--author': '\"Another Person <another@person.com>\"',\n   });\n```\n\n----------------------------------------\n\nTITLE: Using Task Promises with simple-git\nDESCRIPTION: Shows how to chain together multiple git tasks using promises.  The first example chains `init()` and `addRemote()` and awaits the final result.  The second example awaits each step individually. Assumes an async environment.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\n\n// chain together tasks to await final result\nawait git.init().addRemote('origin', '...remote.git');\n\n// or await each step individually\nawait git.init();\nawait git.addRemote('origin', '...remote.git');\n```\n\n----------------------------------------\n\nTITLE: Catching Errors in Async Code with simple-git\nDESCRIPTION: Illustrates two methods for handling errors in asynchronous simple-git code. The first uses a try/catch block around the entire chain. The second catches errors on individual steps to allow execution to continue. Assumes an async environment.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\ntry {\n   await git.init();\n   await git.addRemote(name, repoUrl);\n} catch (e) {\n   /* handle all errors here */\n}\n\n// or catch individual steps to permit the main chain to carry on executing rather than\n// jumping to the final `catch` on the first error:\n\nconst git = simpleGit();\ntry {\n   await git.init().catch(ignoreError);\n   await git.addRemote(name, repoUrl);\n} catch (e) {\n   /* handle all errors here */\n}\n\nfunction ignoreError() {}\n```\n\n----------------------------------------\n\nTITLE: Getting Commit Logs - SimpleGit (JavaScript)\nDESCRIPTION: This snippet retrieves and logs commit history using `simpleGit`. It shows how to get a full list of commits, and how to filter commits between two tags ('0.11.0' and '0.12.0'). The results are logged to the console.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(await simpleGit().log());\nconsole.log(await simpleGit().log('0.11.0', '0.12.0'));\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (JavaScript)\nDESCRIPTION: Shows how to pass environment variables to the child processes spawned by `simple-git` using the `.env` method.  Supports passing either an object of name=value pairs or setting a single variable at a time.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nconst GIT_SSH_COMMAND = 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no';\n\nsimpleGit()\n   .env('GIT_SSH_COMMAND', GIT_SSH_COMMAND)\n   .status((err, status) => {\n      /*  */\n   });\n\nsimpleGit()\n   .env({ ...process.env, GIT_SSH_COMMAND })\n   .status()\n   .then((status) => {})\n   .catch((err) => {});\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates and Getting Tags - JavaScript\nDESCRIPTION: This snippet demonstrates how to pull updates from a remote repository and retrieve the latest tag using `simpleGit`. It also shows how to trigger an action (restart the app) if there are changes after pulling. It uses callbacks to handle the asynchronous operations.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit(__dirname + '/some-repo')\n   .pull()\n   .tags((err, tags) => console.log('Latest available tag: %s', tags.latest));\n\n// update repo and when there are changes, restart the app\nsimpleGit().pull((err, update) => {\n   if (update && update.summary.changes) {\n      require('child_process').exec('npm restart');\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Pushing with -u Option - JavaScript\nDESCRIPTION: This snippet shows how to push changes to a remote repository with the `-u` option (set upstream). This associates the local branch with the remote branch, so future pushes can be done with just `git push`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit()\n   .add('./*')\n   .commit('first commit!')\n   .addRemote('origin', 'some-repo-url')\n   .push(['-u', 'origin', 'master'], () => console.log('done'));\n```\n\n----------------------------------------\n\nTITLE: Configuring simple-git per command\nDESCRIPTION: Demonstrates configuring a `simple-git` instance to prefix all commands with a custom configuration (e.g., setting a proxy).  This is achieved by supplying a `config` option during instance creation. The configuration only applies to the specific instance and doesn't modify the global git configuration.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// configure the instance with a custom configuration property\nconst git: SimpleGit = simpleGit('/some/path', { config: ['http.proxy=someproxy'] });\n\n// any command executed will be prefixed with this config\n// runs: git -c http.proxy=someproxy pull\nawait git.pull();\n```\n\n----------------------------------------\n\nTITLE: Check Git Installation with SimpleGit (TypeScript)\nDESCRIPTION: This snippet checks if Git is installed and accessible using the `simple-git` library. It imports `simpleGit`, calls the `version()` method, and checks the `installed` property of the result. If Git is not installed, it throws an error. Requires simple-git.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-version.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\n\nconst {installed} = await simpleGit().version();\nif (!installed) {\n  throw new Error(`Exit: \"git\" not available.`);\n}\n\n// ... continue using Git commands here\n```\n\n----------------------------------------\n\nTITLE: Per-command Configuration in TypeScript\nDESCRIPTION: Demonstrates how to configure a simple-git instance with custom configuration properties that prefix the git commands. This example sets an HTTP proxy.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// configure the instance with a custom configuration property\nconst git: SimpleGit = simpleGit('/some/path', { config: ['http.proxy=someproxy'] });\n\n// any command executed will be prefixed with this config\n// runs: git -c http.proxy=someproxy pull\nawait git.pull();\n```\n\n----------------------------------------\n\nTITLE: Git Pull with Remote and Branch - JavaScript\nDESCRIPTION: Illustrates the use of the `.pull(remote, branch, [options])` method to pull updates from a specified remote branch (e.g., 'origin'/'master') along with any custom options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: Raw Git Command Execution (JavaScript)\nDESCRIPTION: Shows how to execute raw Git commands using `git.raw()`. This allows running commands for which no wrapper exists in the `simple-git` interface. The first example uses a node-style callback, the second awaits the result.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = '/path/to/repo';\nconst commands = ['config', '--global', 'advice.pushNonFastForward', 'false'];\n\n// using an array of commands and node-style callback\nsimpleGit(path).raw(commands, (err, result) => {\n   // err is null unless this command failed\n   // result is the raw output of this command\n});\n\n// using a var-args of strings and awaiting rather than using the callback\nconst result = await simpleGit(path).raw(...commands);\n\n// automatically trim trailing white-space in responses\nconst result = await simpleGit(path, { trimmed: true }).raw(...commands);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a Git repository if one doesn't already exist and then fetch updates from a remote repository.  It uses `checkIsRepo` to verify if the repository is initialized and `init` with `addRemote` to setup the repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit(__dirname);\n\ngit.checkIsRepo()\n   .then((isRepo) => !isRepo && initialiseRepo(git))\n   .then(() => git.fetch());\n\nfunction initialiseRepo(git) {\n   return git.init().then(() => git.addRemote('origin', 'https://some.git.repo'));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Timeout with SimpleGit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a timeout for git operations in SimpleGit. The `timeout` plugin is configured with a `block` value of 2000 milliseconds. If the `git pull` process doesn't send content to `stdOut` or `stdErr` for 2 seconds, SimpleGit kills it with a `SIGINT` signal. The code also demonstrates how to catch a `GitPluginError` related to timeouts.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-TIMEOUT.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, GitPluginError, SimpleGit, SimpleGitProgressEvent } from 'simple-git';\n\nconst git: SimpleGit = simpleGit({\n   timeout: {\n       block: 2000,\n   },\n});\n\n// if the `git pull` process fails to send content to the `stdOut` or `stdErr`\n// streams for 2 seconds, simple-git will kill it with a SIGINT\ntry {\n    await git.pull();\n}\ncatch (err) {\n    if (err instanceof GitPluginError && err.plugin === 'timeout') {\n        // task failed because of a timeout\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Status with Async/Await - SimpleGit (JavaScript)\nDESCRIPTION: This snippet shows how to use `simpleGit` with `async/await` to check the status of a Git repository in a specified working directory. It includes error handling within a try/catch block and returns a `statusSummary` object. The `__dirname` variable is used to construct the full path to the repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nasync function status(workingDir) {\n   let statusSummary = null;\n   try {\n      statusSummary = await simpleGit(workingDir).status();\n   } catch (e) {\n      // handle the error\n   }\n\n   return statusSummary;\n}\n\n// using the async function\nstatus(__dirname + '/some-repo').then((status) => console.log(status));\n```\n\n----------------------------------------\n\nTITLE: Git Push with Remote, Branch and Options - JavaScript\nDESCRIPTION: Explains the usage of `.push(remote, branch, [options])` for pushing to a named remote/branch, also supporting additional options from the `git push` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_49\n\n\n\n----------------------------------------\n\nTITLE: Pulling and Restarting App on Changes - JavaScript\nDESCRIPTION: This snippet demonstrates pulling updates from a remote repository and restarting the application if changes are detected. Two approaches are shown: using a chain of commands with `exec` and using `async/await` with optional chaining to check for changes. It restarts the app using `child_process.exec('npm restart')`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n// when using a chain\nsimpleGit()\n   .exec(() => console.log('Starting pull...'))\n   .pull((err, update) => {\n      if (update && update.summary.changes) {\n         require('child_process').exec('npm restart');\n      }\n   })\n   .exec(() => console.log('pull done.'));\n\n// when using async and optional chaining\nconst git = simpleGit();\nconsole.log('Starting pull...');\nif ((await git.pull())?.summary.changes) {\n   require('child_process').exec('npm restart');\n}\nconsole.log('pull done.');\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repo - SimpleGit (JavaScript)\nDESCRIPTION: This snippet initializes a Git repository if one doesn't already exist. It uses `git.checkIsRepo()` to determine if the current directory is a Git repository. If not, it calls the `initialiseRepo` function to initialize the repo and add a remote origin. It also fetches the remote repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit(__dirname);\n\ngit.checkIsRepo()\n   .then((isRepo) => !isRepo && initialiseRepo(git))\n   .then(() => git.fetch());\n\nfunction initialiseRepo(git) {\n   return git.init().then(() => git.addRemote('origin', 'https://some.git.repo'));\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Try/Catch (JavaScript)\nDESCRIPTION: Demonstrates how to catch errors using a try/catch block in async JavaScript code.  Provides examples for accessing the error message, stack trace, and parsed content (if available).\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n   const mergeSummary = await git.merge();\n   console.log(`Merged ${mergeSummary.merges.length} files`);\n} catch (err) {\n   // err.message - the string summary of the error\n   // err.stack - some stack trace detail\n   // err.git - where a parser was able to run, this is the parsed content\n\n   console.error(`Merge resulted in ${err.git.conflicts.length} conflicts`);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out a New Branch\nDESCRIPTION: Creates and checks out a new branch from a specified start point. Requires the new branch name and the starting point as parameters.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkoutBranch(branchName, startPoint)`\n```\n\n----------------------------------------\n\nTITLE: Initializing Repository using init\nDESCRIPTION: Initializes a git repository, either bare or not bare. The method `.init(bare , [options])` initializes a repository using the boolean `bare` parameter to intialise a bare repository with options. The method `.init([options])` initializes a repository with options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.init(bare , [options])`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.init([options])`\n```\n\n----------------------------------------\n\nTITLE: Git Status with Options - JavaScript\nDESCRIPTION: Explains the usage of `.status([options])` to get the status of the current repo, resulting in a StatusResult.  Additional arguments supported by `git status` can be supplied as an `options` object or array.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository\nDESCRIPTION: Initializes a repository using any arguments supported by `git init`, supplied as an `options` object or array.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.init([options])`\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository using clone\nDESCRIPTION: Clones a remote repository to a local directory. The method `.clone(repoPath, [localPath, [options]])` clones a remote repo at `repoPath` to a local directory at `localPath`, optionally with options. The method `.clone(repoPath, [options])` clones a remote repo at `repoPath` to a directory in the current working directory with the same name as the repo.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clone(repoPath, [localPath, [options]])`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clone(repoPath, [options])`\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository (Bare)\nDESCRIPTION: Initializes a repository using the boolean `bare` parameter to create a bare repository.  Supports additional arguments via an `options` object or array.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.init(bare , [options])`\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleGit with baseDir in TypeScript\nDESCRIPTION: This code snippet initializes a simple-git instance with a specified base directory using the `baseDir` property. The `path` module is used to construct the full path. The `__dirname` variable represents the directory of the current module. This creates a `SimpleGit` instance that will execute commands within the `repos` subdirectory.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-change-working-directory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\nimport { simpleGit } from 'simple-git';\n\nconst git = simpleGit({ baseDir: join(__dirname, 'repos') });\n```\n\n----------------------------------------\n\nTITLE: Git Grep with Multiple Terms in TypeScript\nDESCRIPTION: Demonstrates how to perform a `git grep` search with multiple search terms using the `grepQueryBuilder` helper. It imports both `simpleGit` and `grepQueryBuilder` from the library and builds a query to find files containing `aaa` AND either `bbb` or `ccc`. The results are then logged to the console.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-grep.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit, { grepQueryBuilder } from 'simple-git';\n\n// logs all files that contain `aaa` AND either `bbb` or `ccc`\nconsole.log(\n    await simpleGit().grep(grepQueryBuilder('aaa').and('bbb', 'ccc'))\n);\n```\n\n----------------------------------------\n\nTITLE: Git Authentication via URL (JavaScript)\nDESCRIPTION: Demonstrates how to supply a username and password to the remote host by including it in the URL. Be sure to disable debug logging when using this mechanism to prevent passwords from being logged.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nconst USER = 'something';\nconst PASS = 'somewhere';\nconst REPO = 'github.com/username/private-repo';\n\nconst remote = `https://${USER}:${PASS}@${REPO}`;\n\nsimpleGit()\n   .clone(remote)\n   .then(() => console.log('finished'))\n   .catch((err) => console.error('failed: ', err));\n```\n\n----------------------------------------\n\nTITLE: Git Merge Options\nDESCRIPTION: Explains how the `.merge(options)` function works. It runs a merge using any configuration options supported by `git merge`. Conflicts during the merge result in an error response, which is an instance of MergeSummary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Exception Handling with .catch (JavaScript)\nDESCRIPTION: Shows how to catch errors using the `.catch` method on a promise.  Provides an example for handling different types of errors and re-throwing if necessary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nconst mergeSummary = await git.merge().catch((err) => {\n   if (err.git) {\n      return err.git;\n   } // the unsuccessful mergeSummary\n   throw err; // some other error, so throw\n});\n\nif (mergeSummary.failed) {\n   console.error(`Merge resulted in ${mergeSummary.conflicts.length} conflicts`);\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Callback (JavaScript)\nDESCRIPTION: Illustrates how to handle errors when using a callback with `simple-git`.  The `err` parameter of the callback contains information about the error. Shows how to access the failed `mergeSummary` if available.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\ngit.merge((err, mergeSummary) => {\n   if (err.git) {\n      mergeSummary = err.git; // the failed mergeSummary\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging Programmatically - TypeScript\nDESCRIPTION: This snippet demonstrates how to enable debug logging programmatically using the `debug` package in TypeScript. It requires both `debug` and `simpleGit` from the simple-git package to be installed. The `debug.enable` function is called with a string indicating which debug logs to enable. Then `simpleGit` is initialized and an action is performed.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/DEBUG-LOGGING-GUIDE.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport debug from 'debug';\nimport { simpleGit } from 'simple-git';\n\ndebug.enable('simple-git,simple-git:*');\nsimpleGit().init().then(() => console.log('DONE'));\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates and Listing Tags - SimpleGit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to pull updates from a remote repository and list available tags using `simpleGit`. The first example pulls updates and logs the latest tag. The second example pulls updates and restarts the application if there are changes.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit(__dirname + '/some-repo')\n   .pull()\n   .tags((err, tags) => console.log('Latest available tag: %s', tags.latest));\n\n// update repo and when there are changes, restart the app\nsimpleGit().pull((err, update) => {\n   if (update && update.summary.changes) {\n      require('child_process').exec('npm restart');\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository (Short)\nDESCRIPTION: Clones a remote repository to a local directory with the same name as the repository.  Accepts the repository path and an optional options object as parameters.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clone(repoPath, [options])`\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Local Git Branches\nDESCRIPTION: Deletes multiple local Git branches. Accepts an array of branch names as a parameter.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranches(branchNames)`\n```\n\n----------------------------------------\n\nTITLE: Concurrent Git Requests (TypeScript)\nDESCRIPTION: Illustrates how to run Git commands concurrently using `Promise.all`.  Each task runs independently and is not affected by failures in other tasks.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nconst git = simpleGit();\nconst results = await Promise.all([\n   git.raw('rev-parse', '--show-cdup').catch(swallow),\n   git.raw('rev-parse', '--show-prefix').catch(swallow),\n]);\nfunction swallow(err) {\n   return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Git Repository (TypeScript)\nDESCRIPTION: Demonstrates how to use `git.reset` with different reset modes and trailing options. It imports ResetMode to provide enum-like access to various reset modes. This allows developers to reset the repository to a specific state with options to discard or keep changes.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/CHANGELOG.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit, { ResetMode } from 'simple-git';\n\n// git reset --hard\nawait simpleGit().reset(ResetMode.HARD);\n\n// git reset --soft -- sub-dir\nawait simpleGit().reset(ResetMode.SOFT, ['--', 'sub-dir']);\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in simple-git with TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure simple-git with a custom error detection function using the `errors` plugin. The function receives the original error (if any) and the result of the git task (including the exit code, standard output, and standard error). It allows you to customize the conditions under which a git task is considered an error, and to modify the error message.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-ERRORS.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\n\nconst git = simpleGit({\n   errors(error, result) {\n      // optionally pass through any errors reported before this plugin runs\n      if (error) return error;\n\n      // customise the `errorCode` values to treat as success\n      if (result.exitCode === 0) {\n         return;\n      }\n\n      // the default error messages include both stdOut and stdErr, but that\n      // can be changed here, or completely replaced with some other content\n      return Buffer.concat([...result.stdOut, ...result.stdErr]);\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Git Pull with Options Object - JavaScript\nDESCRIPTION: Illustrates the use of the `.pull([options])` method to pull updates from the default tracked remote.  Arguments supported by `git pull` can be supplied as an `options` object or array.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_46\n\n\n\n----------------------------------------\n\nTITLE: Configuring simple-git Instance in TypeScript\nDESCRIPTION: Demonstrates how to configure a simple-git instance with options like `baseDir`, `binary`, `maxConcurrentProcesses`, and `trimmed`. It shows two ways to pass options: in a single object and with a base directory and options object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit, SimpleGitOptions } from 'simple-git';\n\nconst options: Partial<SimpleGitOptions> = {\n   baseDir: process.cwd(),\n   binary: 'git',\n   maxConcurrentProcesses: 6,\n   trimmed: false,\n};\n\n// when setting all options in a single object\nconst git: SimpleGit = simpleGit(options);\n\n// or split out the baseDir, supported for backward compatibility\nconst git: SimpleGit = simpleGit('/some/path', { binary: 'git' });\n```\n\n----------------------------------------\n\nTITLE: Pushing with -u Option - SimpleGit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to push commits to a remote repository while setting the upstream branch using the `-u` option. It adds all files to the staging area, commits the changes, adds a remote origin, and pushes the commit to the remote repository's master branch with the `-u` flag. A callback function logs 'done' upon completion.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit()\n   .add('./*')\n   .commit('first commit!')\n   .addRemote('origin', 'some-repo-url')\n   .push(['-u', 'origin', 'master'], () => console.log('done'));\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository (TypeScript)\nDESCRIPTION: Illustrates how to use `git.init` with object and array formats for trailing options. It shows different ways to initialize a Git repository, including setting the `--shared` and `--bare` flags. The code also shows how to import the InitResult type.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit, { InitResult } from 'simple-git';\nconst notSharedInit: InitResult = await simpleGit().init(false, ['--shared=false']);\nconst notSharedBareInit: InitResult = await simpleGit().init(['--bare', '--shared=false']);\nconst sharedInit: InitResult = await simpleGit().init(false, {\n   '--shared': 'true',\n});\nconst sharedBareInit: InitResult = await simpleGit().init({\n   '--bare': null,\n   '--shared': 'false',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Git Diff\nDESCRIPTION: Gets the diff of the current repository compared to the last commit. Optional arguments supported by `git diff` can be supplied as an `options` object or array. Returns the raw `diff` output as a string.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.diff([ options ])`\n```\n\n----------------------------------------\n\nTITLE: Authentication via URL - JavaScript\nDESCRIPTION: Demonstrates how to supply a username and password to the remote Git host by including it in the URL when cloning a repository.  It's crucial to avoid enabling debug logging when using this method to prevent exposing sensitive credentials in the output.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst USER = 'something';\nconst PASS = 'somewhere';\nconst REPO = 'github.com/username/private-repo';\n\nconst remote = `https://${USER}:${PASS}@${REPO}`;\n\nsimpleGit()\n   .clone(remote)\n   .then(() => console.log('finished'))\n   .catch((err) => console.error('failed: ', err));\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status Asynchronously - JavaScript\nDESCRIPTION: This snippet demonstrates how to use `simpleGit` to asynchronously check the status of a Git repository using `async/await`. It includes error handling within a try/catch block and returns a status summary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nasync function status(workingDir) {\n   let statusSummary = null;\n   try {\n      statusSummary = await simpleGit(workingDir).status();\n   } catch (e) {\n      // handle the error\n   }\n\n   return statusSummary;\n}\n\n// using the async function\nstatus(__dirname + '/some-repo').then((status) => console.log(status));\n```\n\n----------------------------------------\n\nTITLE: Chained Git Requests (TypeScript)\nDESCRIPTION: Shows how to chain Git commands together.  The commands will run in series, with each task requiring the previous one to complete successfully. Errors in a step of the chain will prevent later steps from being attempted.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nsimpleGit().init().addRemote('origin', 'https://some-repo.git').fetch();\n```\n\n----------------------------------------\n\nTITLE: Cleaning with Switches and Options\nDESCRIPTION: Cleans the working tree using specific switches and options.  `cleanSwitches` should be a string with supported single-character options, and the `options` parameter can be used for more customization.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clean(cleanSwitches [,options])`\n```\n\n----------------------------------------\n\nTITLE: Check Git Version with SimpleGit (TypeScript)\nDESCRIPTION: This snippet checks if the installed Git version meets a minimum requirement using the `simple-git` library and `semver`. It imports `simpleGit` and `lt` from `semver`, calls the `version()` method, and uses `lt` to compare the current version to the required version. If the installed version is less than the required version, it throws an error. Requires simple-git and semver.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-version.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\nimport { lt } from 'semver';\n\nconst versionResult = await simpleGit().version();\nif (lt(String(versionResult), '2.1.0')) {\n  throw new Error(`Exit: \"git\" must be at least version 2.1.0.`);\n}\n\n// ... continue using Git commands here that are compatible with 2.1.0 or higher\n```\n\n----------------------------------------\n\nTITLE: Limiting Scope with Pathspec - TypeScript\nDESCRIPTION: This snippet demonstrates how to use `pathspec` to limit the scope of a `git.status()` command to a specific subdirectory within a Git repository. It showcases using `pathspec` with both array and object options for the `status()` method.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, pathspec } from \"simple-git\";\n\nconst git = simpleGit();\nconst wholeRepoStatus = await git.status();\nconst subDirStatusUsingOptArray = await git.status([pathspec('sub-dir')]);\nconst subDirStatusUsingOptObject = await git.status({ 'sub-dir': pathspec('sub-dir') });\n```\n\n----------------------------------------\n\nTITLE: Git Stash with Options - JavaScript\nDESCRIPTION: Explains the usage of `.stash([ options ])` to stash the working directory. The optional argument can be an array of string arguments or an options object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_71\n\n\n\n----------------------------------------\n\nTITLE: Chained Git Commands - TypeScript\nDESCRIPTION: Illustrates how to chain multiple Git commands together using simple-git.  This approach ensures that commands are executed sequentially, where each command depends on the successful completion of the previous one. Any errors in a step of the chain should prevent later steps from being attempted.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nsimpleGit().init().addRemote('origin', 'https://some-repo.git').fetch();\n```\n\n----------------------------------------\n\nTITLE: Git Log Options Object Example - JavaScript\nDESCRIPTION: Demonstrates how to use the `options` object to customize the `git log` command in simple-git.  The options object can specify parameters like `from`, `to`, `file`, `format`, and `maxCount` to filter and format the log output.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Checkout with Trailing Options (TypeScript)\nDESCRIPTION: Demonstrates the usage of `git.checkout` with both object and array formats for supplying trailing options. It shows how to specify options like `--track` and remote branch names. This allows for flexible configuration of the checkout command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit from 'simple-git';\nawait simpleGit().checkout('branch-name', ['--track', 'remote/branch']);\nawait simpleGit().checkout(['branch-name', '--track', 'remote/branch']);\nawait simpleGit().checkout({ 'branch-name': null });\n```\n\n----------------------------------------\n\nTITLE: Git Pull with Array Options (JavaScript)\nDESCRIPTION: Demonstrates passing options to the `git pull` command as an array of strings. This results in the specified arguments being appended to the command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// results in 'git pull origin master --no-rebase'\ngit.pull('origin', 'master', ['--no-rebase']);\n```\n\n----------------------------------------\n\nTITLE: Git Move Multiple Files\nDESCRIPTION: Explains the `.mv(from, to)` function to move all files in the `from` array to the `to` directory.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Git Submodule Update - JavaScript\nDESCRIPTION: Explains the usage of `.submoduleUpdate(subModuleName, [options])` to update submodules, either by submodule name and options, or just the options, or with no arguments.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Git Add Remote - JavaScript\nDESCRIPTION: Explains the usage of `.addRemote(name, repo, [options])` to add a new named remote to be tracked, optionally with supported options for the `git add` call.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_51\n\n\n\n----------------------------------------\n\nTITLE: Executing Raw Git Commands with Await - JavaScript\nDESCRIPTION: Shows how to execute raw Git commands using `simpleGit`'s `raw` method with async/await. The spread operator is used to pass the commands as arguments. It also shows how to trim whitespace.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// using a var-args of strings and awaiting rather than using the callback\nconst result = await simpleGit(path).raw(...commands);\n\n// automatically trim trailing white-space in responses\nconst result = await simpleGit(path, { trimmed: true }).raw(...commands);\n```\n\n----------------------------------------\n\nTITLE: Listing Config using listConfig\nDESCRIPTION: Reads the current configuration.  The method `.listConfig()` reads the current configuration. The method `.listConfig(scope: GitConfigScope)` returns only those items in a specified scope.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.listConfig()`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.listConfig(scope: GitConfigScope)`\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local Git Branch\nDESCRIPTION: Deletes a local Git branch. If the deletion fails, it will be treated as an error. Accepts the branch name as a parameter.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranch(branchName)`\n```\n\n----------------------------------------\n\nTITLE: Listing Git Config with Scope\nDESCRIPTION: Lists only those configuration items within a specified scope. Returns a `ConfigListSummary` instance limited by the scope.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.listConfig(scope: GitConfigScope)`\n```\n\n----------------------------------------\n\nTITLE: Getting Remote Repositories - SimpleGit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve the remote repository URL using `simpleGit`. It uses `listRemote` with the `--get-url` option to fetch the URL, and then logs the URL to the console if no error occurred. The current directory (`__dirname`) is also logged.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit().listRemote(['--get-url'], (err, data) => {\n   if (!err) {\n      console.log('Remote url for repository at ' + __dirname + ':');\n      console.log(data);\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Try/Catch - JavaScript\nDESCRIPTION: Shows how to handle exceptions using try/catch with async/await when calling `git.merge`. The `err` object may contain `err.message`, `err.stack`, and `err.git` properties for detailed error information.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n   const mergeSummary = await git.merge();\n   console.log(`Merged ${mergeSummary.merges.length} files`);\n} catch (err) {\n   // err.message - the string summary of the error\n   // err.stack - some stack trace detail\n   // err.git - where a parser was able to run, this is the parsed content\n\n   console.error(`Merge resulted in ${err.git.conflicts.length} conflicts`);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Git Grep Search in TypeScript\nDESCRIPTION: Performs a basic `git grep` search using a single search term. It imports the `simpleGit` library and executes the `grep` method with the search term. The result is then logged to the console. This requires the `simple-git` package to be installed.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-grep.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit from 'simple-git';\n\nconsole.log(await simpleGit().grep('search-term'));\n```\n\n----------------------------------------\n\nTITLE: Using Task Callbacks with simple-git\nDESCRIPTION: Demonstrates how to use callbacks with simple-git methods to handle the result of each task.  It includes example callback functions for handling initialization and adding a remote.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\ngit.init(onInit).addRemote('origin', 'git@github.com:steveukx/git-js.git', onRemoteAdd);\n\nfunction onInit(err, initResult) {}\nfunction onRemoteAdd(err, addRemoteResult) {}\n```\n\n----------------------------------------\n\nTITLE: Git Merge From To\nDESCRIPTION: Explains how the `.mergeFromTo(remote, branch , [options])` function works. It merges from the specified branch into the currently checked out branch, similar to `.merge` but with the `remote` and `branch` supplied as strings separately to any additional options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Task Timeouts and Progress Events in SimpleGit (TypeScript)\nDESCRIPTION: This snippet shows how to configure timeouts with progress events. It includes a `progress` callback function to log git operation progress.  The `timeout` plugin is configured to reset the timer only when data arrives on `stdOut`, ignoring progress events written to `stdErr`. This prevents timeouts from occurring due to continuous progress updates.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-TIMEOUT.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit } from \"simple-git\";\n\nconst git: SimpleGit = simpleGit({\n   progress({method, stage, progress}) {\n      console.log(`git.${method} ${stage} stage ${progress}% complete`);\n   },\n   timeout: {\n      block: 2000,\n      stdOut: true, // default behaviour, resets the 2s timer every time data arrives on stdOut\n      stdErr: false // custom behaviour, ignore the progress events being written to stdErr\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute Task Timeout in SimpleGit (TypeScript)\nDESCRIPTION: This code demonstrates how to configure an absolute timeout in SimpleGit.  By setting both `stdOut` and `stdErr` to `false`, the timeout plugin will kill the git process after the specified `block` duration (5000ms), regardless of whether data is still being received. This creates a hard timeout limit.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-TIMEOUT.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit } from \"simple-git\";\n\n// create a simple-git instance that kills any process after 5s\n// whether it's still receiving data or not:\nconst git: SimpleGit = simpleGit({\n   timeout: {\n      block: 5000,\n      stdOut: false,\n      stdErr: false\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory using clone and cwd (async/await) in TypeScript\nDESCRIPTION: This code snippet demonstrates how to clone a remote Git repository and subsequently change the working directory to that cloned repository using separate `async/await` steps. It first creates a simple-git instance, then clones the repository. Finally, it sets the working directory of the Git instance to the `target` directory, which is the location where the repository was cloned. The `root: true` option ensures the working directory is changed for future tasks run through `git`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-change-working-directory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\nimport { simpleGit, SimpleGit } from 'simple-git';\n\nconst remote = `https://github.com/steveukx/git-js.git`;\nconst target = join(__dirname, 'repos', 'git-js');\n\n// create a `SimpleGit` instance \nconst git: SimpleGit = simpleGit();\n\n// use that instance to do the clone\nawait git.clone(remote, target);\n\n// then set the working directory of the root instance - you want all future\n// tasks run through `git` to be from the new directory, rather than just tasks\n// chained off this task\nawait git.cwd({ path: target, root: true });\n```\n\n----------------------------------------\n\nTITLE: Getting Commit Logs - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve commit logs using simple-git. It showcases fetching all commits and filtering commits between two specific tags.  It uses `simpleGit().log()` to get the commit history.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(await simpleGit().log());\nconsole.log(await simpleGit().log('0.11.0', '0.12.0'));\n```\n\n----------------------------------------\n\nTITLE: Importing simple-git in TypeScript\nDESCRIPTION: Demonstrates how to import and use the simple-git library in a TypeScript application, utilizing bundled type definitions.  It imports the library, defines types, and executes a `clean` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit, CleanOptions } from 'simple-git';\n\nconst git: SimpleGit = simpleGit().clean(CleanOptions.FORCE);\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Environment Variables in simple-git (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set the `LANG` and `LC_ALL` environment variables to 'C' when using `simple-git`. This ensures that the `git` command output is in English, allowing `simple-git` to correctly parse the results. It requires the `simple-git` library.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/NON_ENGLISH_LOCALE.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\n\nconst git = simpleGit().env({\n   LANG: 'C',\n   LC_ALL: 'C',\n});\nconst branches = await git.branchLocal();\n```\n\n----------------------------------------\n\nTITLE: Checkout using checkout\nDESCRIPTION: Checks out the supplied tag, revision, or branch when supplied as a string, or can be used to check out a tag or revision using the supplied options. Method variations include: `.checkout(checkoutWhat , [options])` and `.checkout(options)`\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkout(checkoutWhat , [options])`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkout(options)`\n```\n\n----------------------------------------\n\nTITLE: Getting Git Status (TypeScript)\nDESCRIPTION: Shows how to use `git.status` with an array of options to specify a subdirectory to check. It imports StatusResult to provide typing to the return of the status call. Demonstrates retrieving the status of a Git repository or a specific subdirectory.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit, { StatusResult } from 'simple-git';\nconst repoStatus: StatusResult = await simpleGit().status();\nconst subDirStatus: StatusResult = await simpleGit().status(['--', 'sub-dir']);\n```\n\n----------------------------------------\n\nTITLE: Git Pull with Object Options (Rebase) - JavaScript\nDESCRIPTION: Demonstrates how to use the `git.pull` method with an options object to enable rebasing with a specified value. The `--rebase` option is set to 'true', which results in the option being included in the command string with the assigned value.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n// results in 'git pull origin master --rebase=true'\ngit.pull('origin', 'master', { '--rebase': 'true' });\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Revision\nDESCRIPTION: Checks out a specified tag, revision, or branch. Accepts a string specifying the target, with additional options configurable via an `options` object or array.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkout(checkoutWhat , [options])`\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: Clones a remote repository to a local directory. Accepts the repository path, local path, and optional options object as parameters.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clone(repoPath, [localPath, [options]])`\n```\n\n----------------------------------------\n\nTITLE: Listing Local Branches using branchLocal\nDESCRIPTION: Gets a list of local branches.  The method `.branchLocal()` returns a [BranchSummaryResult] instance.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.branchLocal()`\n```\n\n----------------------------------------\n\nTITLE: Passing Through Existing Environment Variables to simple-git (TypeScript)\nDESCRIPTION: This snippet shows how to pass all existing environment variables (including `GIT_*` variables) to the `simple-git` process in addition to setting `LANG` and `LC_ALL`. This ensures that `git` functions correctly, even when relying on environment variables for authentication or other configurations. It depends on both `simple-git` and the Node.js `process.env` object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/NON_ENGLISH_LOCALE.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\n\nconst git = simpleGit().env({\n   ...process.env,\n   LANG: 'C',\n   LC_ALL: 'C',\n});\nconst branches = await git.branchLocal();\n```\n\n----------------------------------------\n\nTITLE: Applying Patch using applyPatch\nDESCRIPTION: Applies a single or multiple string patches. The method `.applyPatch(patch, [options])` accepts patch as string and optional options.  The method `.applyPatch(patches, [options])` accepts an array of string patches and optional options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.applyPatch(patch, [options])`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.applyPatch(patches, [options])`\n```\n\n----------------------------------------\n\nTITLE: Getting Git Diff Summary\nDESCRIPTION: Creates a `DiffResult` to summarize the diff for files in the repository. Uses the `--stat` format by default, which can be overridden with other log format commands in the options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.diffSummary([ options ])`\n```\n\n----------------------------------------\n\nTITLE: Adding Config using addConfig\nDESCRIPTION: Adds a local configuration property.  The method `.addConfig(key, value, append = false, scope = 'local')` add a local configuration property. `append` is optional, defaulting to false, and scope defaults to local.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.addConfig(key, value, append = false, scope = 'local')`\n```\n\n----------------------------------------\n\nTITLE: Configure Max Concurrent Processes (TypeScript)\nDESCRIPTION: Demonstrates how to configure the maximum number of concurrent Git processes by passing an options object to the `simpleGit` function.  This controls how many child processes can be spawned simultaneously.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nconst git = simpleGit({ maxConcurrentProcesses: 10 });\n```\n\n----------------------------------------\n\nTITLE: Git First Commit - JavaScript\nDESCRIPTION: Explains the usage of `.firstCommit()` to get the commit hash of the first commit made to the current repo.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: SimpleGit Task Runner (TypeScript)\nDESCRIPTION: Illustrates that it's not possible to await on the `simpleGit()` task runner itself but on the tasks it returns (e.g., `simpleGit().init()`). This highlights how promises should be used with the `simple-git` library, ensuring that only the tasks are awaited, not the runner.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/CHANGELOG.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(simpleGit().then).toBeUndefined();\nexpect(simpleGit().init().then).toBe(expect.any(Function));\n```\n\n----------------------------------------\n\nTITLE: Removing Files from Git with rmKeepLocal\nDESCRIPTION: Removes specified files from source control while preserving them on the disk. The method `.rmKeepLocal([fileA, ...], handlerFn)` takes an array of file paths as the first argument and a handler function as the second argument. It is part of the git-js library.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.rmKeepLocal([fileA, ...], handlerFn)`\n```\n\n----------------------------------------\n\nTITLE: Cleaning using clean\nDESCRIPTION: Cleans the working tree with different modes or with clean switches and options. `.clean(mode)` cleans the working tree. Mode should be \"n\" - dry run or \"f\" - force. `.clean(cleanSwitches [,options])` sets cleanSwitches to a string containing any number of the supported single character options, optionally with a standard options object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clean(mode)`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clean(cleanSwitches [,options])`\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Config\nDESCRIPTION: Adds a local configuration property.  The configuration setting can be appended to rather than overwritten. Uses the `scope` argument to specify where to save the new configuration.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.addConfig(key, value, append = false, scope = 'local')`\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging Programmatically - JavaScript\nDESCRIPTION: This snippet demonstrates how to enable debug logging programmatically using the `debug` package in JavaScript. It requires both `debug` and `simple-git` to be installed. The `debug.enable` function is called with a string indicating which debug logs to enable. Then `simpleGit` is initialized and an action is performed.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/DEBUG-LOGGING-GUIDE.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst debug = require('debug');\nconst simpleGit = require('simple-git');\n\ndebug.enable('simple-git,simple-git:*');\nsimpleGit().init().then(() => console.log('DONE'));\n```\n\n----------------------------------------\n\nTITLE: Removing Files from Source Control\nDESCRIPTION: Removes specified files from Git source control while keeping them on the local disk.  Takes an array of file paths and a handler function as parameters.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.rmKeepLocal([fileA, ...], handlerFn)`\n```\n\n----------------------------------------\n\nTITLE: Piping to Console for Long-Running Tasks - SimpleGit (JavaScript)\nDESCRIPTION: This snippet illustrates how to use progress events to monitor the progress of long-running Git tasks. It configures `simpleGit` with a `progress` handler that logs the method, stage, and completion percentage to the console. It then performs a checkout operation.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit({\n   progress({ method, stage, progress }) {\n      console.log(`git.${method} ${stage} stage ${progress}% complete`);\n   },\n});\ngit.checkout('https://github.com/user/repo.git');\n```\n\n----------------------------------------\n\nTITLE: Mirroring Repository using mirror\nDESCRIPTION: Mirrors a remote repository to a local directory. `mirror(repoPath, [localPath, [options]])` behaves the same as the `.clone` interface with the `--mirror` flag enabled.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n`mirror(repoPath, [localPath, [options]])`\n```\n\n----------------------------------------\n\nTITLE: Git Reset with Mode and Options - JavaScript\nDESCRIPTION: Explains the usage of `.reset(resetMode, [resetOptions])` to reset the repository. `resetMode` should be one of the supported types (use a constant or a string).  Additional arguments supported by `git reset` can be supplied as an `options` object or array.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_56\n\n\n\n----------------------------------------\n\nTITLE: Setting Author Configuration - SimpleGit (JavaScript)\nDESCRIPTION: This snippet shows how to set the local configuration for the author name and email, and how to override the author for an individual commit. It uses `addConfig` to set the global author information and the `--author` option in `commit` to set the author for a specific commit.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit()\n   .addConfig('user.name', 'Some One')\n   .addConfig('user.email', 'some@one.com')\n   .commit('committed as \"Some One\"', 'file-one')\n   .commit('committed as \"Another Person\"', 'file-two', {\n      '--author': '\"Another Person <another@person.com>\"',\n   });\n```\n\n----------------------------------------\n\nTITLE: Getting Diff using diff\nDESCRIPTION: Gets the diff of the current repo compared to the last commit. The method `.diff([ options ])` get the diff of the current repo compared to the last commit, optionally including any number of other arguments supported by git diff supplied as an options object/array. Returns the raw `diff` output as a string.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.diff([ options ])`\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Branches using deleteLocalBranches\nDESCRIPTION: Deletes multiple local branches. The method `.deleteLocalBranches(branchNames)` takes an array of branch names as the first argument. The method `.deleteLocalBranches(branchNames, forceDelete)` optionally force deletes.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranches(branchNames)`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranches(branchNames, forceDelete)`\n```\n\n----------------------------------------\n\nTITLE: Git Check Is Bare Repo - JavaScript\nDESCRIPTION: Explains the usage of `.checkIsRepo('bare')` to check whether the current working directory is within a bare git repo.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Including core-js polyfills - TypeScript\nDESCRIPTION: This TypeScript code demonstrates importing the required `core-js` polyfills for `array/flat-map` and `object/from-entries` to ensure compatibility with older Node.js versions when using `simple-git`. It also imports `simpleGit` and the `SimpleGit` interface, and initializes a `simpleGit` instance.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/LEGACY_NODE_VERSIONS.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'core-js/stable/array/flat-map';\nimport 'core-js/stable/object/from-entries';\nimport 'core-js/stable/object/from-entries';\n\nimport simpleGit, { SimpleGit } from 'simple-git';\n\nconst git: SimpleGit = simpleGit();\n```\n\n----------------------------------------\n\nTITLE: Grep using grep\nDESCRIPTION: Searches for a single search term across all files in the working tree, optionally passing a standard options object of additional arguments. Method signature: `.grep(searchTerm)` or `.grep(grepQueryBuilder(...))`\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.grep(searchTerm)`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.grep(grepQueryBuilder(...))`\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Events in SimpleGit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a SimpleGit instance to receive progress updates during Git operations. It defines a progress handler function that logs the method, stage, and progress percentage to the console.  The handler is then passed as the `progress` option when creating a SimpleGit instance. The `pull` command will automatically trigger the progress handler.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-PROGRESS-EVENTS.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit, SimpleGitProgressEvent } from 'simple-git';\n\nconst progress = ({method, stage, progress}: SimpleGitProgressEvent) => {\n   console.log(`git.${method} ${stage} stage ${progress}% complete`);\n}\nconst git: SimpleGit = simpleGit({baseDir: '/some/path', progress});\n\n// pull automatically triggers progress events when the progress plugin is configured\nawait git.pull();\n\n// supply the `--progress` option to any other command that supports it to receive\n// progress events into your handler\nawait git.raw('pull', '--progress');\n```\n\n----------------------------------------\n\nTITLE: Git Check Is Root Repo - JavaScript\nDESCRIPTION: Explains the usage of `.checkIsRepo('root')` to check whether the current working directory is the root directory for a repo.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Counting Git Objects\nDESCRIPTION: Queries the pack and disk usage properties of the local repository. Returns a `CountObjectsResult` object with disk sizes in Kb.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.countObjects()`\n```\n\n----------------------------------------\n\nTITLE: Git Check Is Repo - JavaScript\nDESCRIPTION: Explains the usage of `.checkIsRepo()` to check whether the current working directory is a descendent of a git repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_60\n\n\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging via Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable debug logging using the `DEBUG` environment variable.  It sets the `DEBUG` variable to `simple-git` which will enable the default logging level. This needs to be set before running the application.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/DEBUG-LOGGING-GUIDE.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"DEBUG=simple-git\" node ./your-app.js\n```\n\n----------------------------------------\n\nTITLE: Searching with Git Grep\nDESCRIPTION: Searches for a single search term across all files in the working tree. Accepts a search term and optionally a standard options object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.grep(searchTerm)`\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with .catch - JavaScript\nDESCRIPTION: Demonstrates how to handle exceptions using `.catch` on a promise. It checks if `err.git` exists and returns it; otherwise, it re-throws the error.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst mergeSummary = await git.merge().catch((err) => {\n   if (err.git) {\n      return err.git;\n   } // the unsuccessful mergeSummary\n   throw err; // some other error, so throw\n});\n\nif (mergeSummary.failed) {\n   console.error(`Merge resulted in ${mergeSummary.conflicts.length} conflicts`);\n}\n```\n\n----------------------------------------\n\nTITLE: Git Get Remotes - JavaScript\nDESCRIPTION: Explains the usage of `.getRemotes([verbose])` to get a list of the named remotes. Supplying `verbose` as `true` includes the URLs and purpose of each ref.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_52\n\n\n\n----------------------------------------\n\nTITLE: Listing Tags using tags\nDESCRIPTION: Lists all tags, with optional options to filter and sort. The method `.tags([options, ] handlerFn)` accepts an optional options object and a handler function. Tags will be sorted by semantic version number by default, but can be changed using the `--sort` option.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.tags([options, ] handlerFn)`\n```\n\n----------------------------------------\n\nTITLE: Git Submodule Command - JavaScript\nDESCRIPTION: Explains the usage of `.subModule(options)` to run a `git submodule` command with arguments passed in as an array or object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Git Move Single File\nDESCRIPTION: Explains the `.mv(from, to)` function to rename or move a single file.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Typed Exception Handling - TypeScript\nDESCRIPTION: Illustrates how to handle exceptions with typed errors in TypeScript using try/catch.  Imports `simpleGit`, `MergeSummary`, and `GitResponseError` from the 'simple-git' library for type safety. Casts the error to `GitResponseError<MergeSummary>` to access the `git` property, providing structured access to conflict details.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, MergeSummary, GitResponseError } from 'simple-git';\ntry {\n   const mergeSummary = await simpleGit().merge();\n   console.log(`Merged ${mergeSummary.merges.length} files`);\n} catch (err) {\n   // err.message - the string summary of the error\n   // err.stack - some stack trace detail\n   // err.git - where a parser was able to run, this is the parsed content\n   const mergeSummary: MergeSummary = (err as GitResponseError<MergeSummary>).git;\n   const conflicts = mergeSummary?.conflicts || [];\n\n   console.error(`Merge resulted in ${conflicts.length} conflicts`);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing simple-git\nDESCRIPTION: Initializes a `simple-git` instance, which is equivalent to running `git init` in a terminal. It relies on the default `git` binary being available on the system's `$PATH`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsimpleGit().init();\n```\n\n----------------------------------------\n\nTITLE: Git Reset with Options - JavaScript\nDESCRIPTION: Explains the usage of `.reset(resetOptions)` to reset the repository with the supplied options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_57\n\n\n\n----------------------------------------\n\nTITLE: Git List Remote - JavaScript\nDESCRIPTION: Explains the usage of `.listRemote([options])` to list remote repositories. Options can be supplied to configure the underlying `git ls-remote` call.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_53\n\n\n\n----------------------------------------\n\nTITLE: Overriding Allowed Protocols in SimpleGit\nDESCRIPTION: This code snippet shows how to enable overriding allowed protocols in simple-git by setting the `allowUnsafeProtocolOverride` option to `true` within the `unsafe` configuration. Simple-git blocks protocol overrides by default to prevent accidental triggering of helper transports via unsanitized user input. Enabling this option allows specifying custom protocols, but requires explicit opt-in due to the potential security risks associated with arbitrary binary execution.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\n\n// throws\nawait simpleGit()\n   .raw('clone', 'ext::git-server-alias foo %G/repo', '-c', 'protocol.ext.allow=always');\n\n// allows calling clone with a helper transport\nawait simpleGit({ unsafe: { allowUnsafeProtocolOverride: true } })\n   .raw('clone', 'ext::git-server-alias foo %G/repo', '-c', 'protocol.ext.allow=always');\n```\n\n----------------------------------------\n\nTITLE: Git Remove Remote - JavaScript\nDESCRIPTION: Explains the usage of `.removeRemote(name)` to remove the named remote.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_55\n\n\n\n----------------------------------------\n\nTITLE: Git Version - JavaScript\nDESCRIPTION: Explains the usage of `.version()` to retrieve the major, minor, and patch versions of the installed git.  The `.installed` property indicates whether `git` is accessible.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_73\n\n\n\n----------------------------------------\n\nTITLE: Git Remote Command - JavaScript\nDESCRIPTION: Explains the usage of `.remote([options])` to run a `git remote` command with any number of options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_54\n\n\n\n----------------------------------------\n\nTITLE: Cleaning the Working Tree\nDESCRIPTION: Cleans the working tree of the Git repository.  Requires the `mode` parameter to be set to either \"n\" (dry run) or \"f\" (force).\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.clean(mode)`\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Upload and Receive Packs in SimpleGit\nDESCRIPTION: This code snippet demonstrates how to enable the use of custom upload and receive packs in simple-git by setting the `allowUnsafePack` option to `true` within the `unsafe` configuration.  By default, simple-git prevents the use of custom packs to avoid accidentally triggering malicious scripts. Enabling this option requires explicit opt-in. The code throws an error if `allowUnsafePack` is not enabled and attempts to use custom pack options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit } from 'simple-git';\n\n// throws\nawait simpleGit()\n   .raw('push', '--receive-pack=git-receive-pack-custom');\n\n// allows calling clone with a helper transport\nawait simpleGit({ unsafe: { allowUnsafePack: true } })\n   .raw('push', '--receive-pack=git-receive-pack-custom');\n```\n\n----------------------------------------\n\nTITLE: Branching using branch\nDESCRIPTION: Lists existing branches or delete a named branch based on options provided. `.branch([options])` uses the supplied options to run any arguments supported by the branch command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.branch([options])`\n```\n\n----------------------------------------\n\nTITLE: Searching with Git Grep (Query Builder)\nDESCRIPTION: Searches using a complex query created with `grepQueryBuilder`.  Accepts the query builder result and optionally a standard options object.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.grep(grepQueryBuilder(...))`\n```\n\n----------------------------------------\n\nTITLE: Listing Git Config\nDESCRIPTION: Reads the current configuration and returns a `ConfigListSummary` instance.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.listConfig()`\n```\n\n----------------------------------------\n\nTITLE: Pulling Updates and Restarting App on Changes - SimpleGit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to pull updates from a remote repository and restart the application if changes are detected. It shows two approaches: one using a chain of `simpleGit` commands with `exec`, and another using `async/await` with optional chaining. Both approaches check `update.summary.changes` to determine if a restart is needed.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n// when using a chain\nsimpleGit()\n   .exec(() => console.log('Starting pull...'))\n   .pull((err, update) => {\n      if (update && update.summary.changes) {\n         require('child_process').exec('npm restart');\n      }\n   })\n   .exec(() => console.log('pull done.'));\n\n// when using async and optional chaining\nconst git = simpleGit();\nconsole.log('Starting pull...');\nif ((await git.pull())?.summary.changes) {\n   require('child_process').exec('npm restart');\n}\nconsole.log('pull done.');\n```\n\n----------------------------------------\n\nTITLE: Listing Remote Repositories - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the URL of a remote repository using `simpleGit`. It uses the `listRemote` method with the `--get-url` option to fetch the remote URL.  It retrieves and displays the remote URL associated with the Git repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nsimpleGit().listRemote(['--get-url'], (err, data) => {\n   if (!err) {\n      console.log('Remote url for repository at ' + __dirname + ':');\n      console.log(data);\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Git Show Buffer with Options - JavaScript\nDESCRIPTION: Demonstrates the `.showBuffer(options)` method, similar to `.show`, but returning the content as a Buffer for binary file content.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Allowing Unsafe Custom Binary\nDESCRIPTION: Illustrates how to override the default security checks and allow an unsafe custom binary to be used.  This is only recommended in controlled environments where the user trusts the source of the custom binary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// this would normally throw because of the invalid value for `binary` \nsimpleGit({\n   unsafe: {\n      allowUnsafeCustomBinary: true\n   },\n   binary: '!'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Binary with WSL\nDESCRIPTION: Configures a `simple-git` instance to use `git` within a WSL environment. The `binary` property is an array where the first element is the command to execute (`wsl`) and the second element is the `git` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsimpleGit({ binary: ['wsl', 'git'] }).init();\n```\n\n----------------------------------------\n\nTITLE: Git Push Tags - JavaScript\nDESCRIPTION: Illustrates the usage of `.pushTags(remote, [options])` to push local tags to a named remote, equivalent to `.push([remote, '--tags'])`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_50\n\n\n\n----------------------------------------\n\nTITLE: Listing Local Git Branches\nDESCRIPTION: Retrieves a list of local Git branches as a `BranchSummaryResult` instance.  No parameters are needed.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.branchLocal()`\n```\n\n----------------------------------------\n\nTITLE: Including core-js polyfills - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the required `core-js` polyfills for `array/flat-map` and `object/from-entries` to ensure compatibility with older Node.js versions when using `simple-git`. It also imports and requires the `simple-git` module.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/LEGACY_NODE_VERSIONS.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('core-js/stable/array/flat-map');\nrequire('core-js/stable/object/from-entries');\nrequire('core-js/stable/object/from-entries');\n\nconst simpleGit = require('simple-git');\n```\n\n----------------------------------------\n\nTITLE: Hashing a Git Object\nDESCRIPTION: Computes the object ID value for the contents of a file. Optionally writes the resulting value to the object database.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.hashObject(filePath, write = false)`\n```\n\n----------------------------------------\n\nTITLE: Git Rev-Parse with Options - JavaScript\nDESCRIPTION: Explains the usage of `.revparse([options])` to send options to `git rev-parse` and return the string response from `git`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: Git Change Working Directory - JavaScript\nDESCRIPTION: Explains the usage of `.cwd(workingDirectory)` to set the working directory for all future commands on the root instance.  Using `.cwd({ path, root = false })` sets the working directory for the current chain or the root instance.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: Checking Out with Options\nDESCRIPTION: Checks out a tag or revision using an options object.  This object can contain arguments supported by the `git checkout` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkout(options)`\n```\n\n----------------------------------------\n\nTITLE: Getting Git Config\nDESCRIPTION: Gets the value(s) for a named key. Returns a `ConfigGetResult` instance.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.getConfig(key)`\n```\n\n----------------------------------------\n\nTITLE: Git Grep with Array Options in TypeScript\nDESCRIPTION: Illustrates how to use the array form of options to build a custom `git grep` query. It imports the `simpleGit` library and passes an array of options to the `grep` method. This enables more flexibility than using the query builder.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-grep.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport simpleGit from 'simple-git';\n\nconsole.log(await simpleGit().grep('search-term', ['-e', 'another search term']));\n```\n\n----------------------------------------\n\nTITLE: Checkout Local Branch using checkoutLocalBranch\nDESCRIPTION: Checks out a new local branch. The method `.checkoutLocalBranch(branchName)` checks out a new local branch.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkoutLocalBranch(branchName)`\n```\n\n----------------------------------------\n\nTITLE: Concurrent Git Requests - TypeScript\nDESCRIPTION: Shows how to execute multiple Git commands concurrently using `Promise.all` and separate `simpleGit` instances. This is useful for independent tasks where the order of execution does not matter. An error handling function `swallow` is used to prevent promise rejections from interrupting the flow.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst git = simpleGit();\nconst results = await Promise.all([\n   git.raw('rev-parse', '--show-cdup').catch(swallow),\n   git.raw('rev-parse', '--show-prefix').catch(swallow),\n]);\nfunction swallow(err) {\n   return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Git Show with Options - JavaScript\nDESCRIPTION: Demonstrates the `.show(options)` method to show various types of objects, such as file content at a specific commit.  `options` can be a single value string or an object containing options supported by the `git show` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: Checking Out a New Local Branch\nDESCRIPTION: Checks out a new local branch.  Requires only the name of the new branch as a parameter.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkoutLocalBranch(branchName)`\n```\n\n----------------------------------------\n\nTITLE: Configuring simple-git instance\nDESCRIPTION: Illustrates configuring a `simple-git` instance with various options like `baseDir`, `binary`, `maxConcurrentProcesses`, and `trimmed`. It also shows how to set the base directory as a separate argument. This configuration affects all subsequent git commands executed by the instance.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit, SimpleGitOptions } from 'simple-git';\n\nconst options: Partial<SimpleGitOptions> = {\n   baseDir: process.cwd(),\n   binary: 'git',\n   maxConcurrentProcesses: 6,\n   trimmed: false,\n};\n\n// when setting all options in a single object\nconst git: SimpleGit = simpleGit(options);\n\n// or split out the baseDir, supported for backward compatibility\nconst git: SimpleGit = simpleGit('/some/path', { binary: 'git' });\n```\n\n----------------------------------------\n\nTITLE: Enabling Progress Events for Submodule Tasks (TypeScript)\nDESCRIPTION: This snippet shows how to enable progress events for Git commands like `submoduleUpdate` that do not automatically trigger progress events. It involves passing the `--progress` option in the `TaskOptions` when calling the method.  This forces the git command to generate the required progress output.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-PROGRESS-EVENTS.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait git.submoduleUpdate('submodule-name', { '--progress': null });\nawait git.submoduleUpdate('submodule-name', ['--progress']);\n```\n\n----------------------------------------\n\nTITLE: Checkout Branch using checkoutBranch\nDESCRIPTION: Checks out a new branch from the supplied start point. The method `.checkoutBranch(branchName, startPoint)` checks out a new branch from the supplied start point.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.checkoutBranch(branchName, startPoint)`\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory using clone and cwd in TypeScript\nDESCRIPTION: This code snippet clones a remote Git repository and then changes the working directory of the simple-git instance to the cloned repository's directory using command chaining with the `cwd` method. It demonstrates cloning a remote repository to a specified target directory, and subsequently sets the current working directory to the target directory so further git commands will operate from the cloned repository.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-change-working-directory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\nimport { simpleGit, SimpleGit } from 'simple-git';\n\nconst remote = `https://github.com/steveukx/git-js.git`;\nconst target = join(__dirname, 'repos', 'git-js');\n\n// repo is now a `SimpleGit` instance operating on the `target` directory\n// having cloned the remote repo then switched into the cloned directory\nconst repo: SimpleGit = await simpleGit().clone(remote, target).cwd({ path: target });\n```\n\n----------------------------------------\n\nTITLE: Git Push with Options Object - JavaScript\nDESCRIPTION: Explains the usage of `.push([options])` for pushing to a named remote/branch, accepting options supported by the `git push` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_48\n\n\n\n----------------------------------------\n\nTITLE: Setting Environment Variables - JavaScript\nDESCRIPTION: Illustrates how to pass environment variables to the child processes spawned by `simple-git` using the `.env` method. Supports passing an object of name=value pairs or setting a single variable at a time.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst GIT_SSH_COMMAND = 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no';\n\nsimpleGit()\n   .env('GIT_SSH_COMMAND', GIT_SSH_COMMAND)\n   .status((err, status) => {\n      /*  */\n   });\n\nsimpleGit()\n   .env({ ...process.env, GIT_SSH_COMMAND })\n   .status()\n   .then((status) => {})\n   .catch((err) => {});\n```\n\n----------------------------------------\n\nTITLE: Limiting Scope with Pathspec - SimpleGit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a `pathspec` to limit the scope of a `git.status()` operation to a specific subdirectory. It imports `simpleGit` and `pathspec` from the `simple-git` library and uses `git.status()` with an options array and object to achieve this.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, pathspec } from \"simple-git\";\n\nconst git = simpleGit();\nconst wholeRepoStatus = await git.status();\nconst subDirStatusUsingOptArray = await git.status([pathspec('sub-dir')]);\nconst subDirStatusUsingOptObject = await git.status({ 'sub-dir': pathspec('sub-dir') });\n```\n\n----------------------------------------\n\nTITLE: Git Stash List with Options - JavaScript\nDESCRIPTION: Explains the usage of `.stashList([ options ])` to retrieve the stash list. The optional argument can be an object in the same format as used in `git log`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_72\n\n\n\n----------------------------------------\n\nTITLE: Git Reset Default - JavaScript\nDESCRIPTION: Explains the usage of `.reset()` to reset the repository in `soft` mode.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_58\n\n\n\n----------------------------------------\n\nTITLE: Force Deleting a Local Git Branch\nDESCRIPTION: Deletes a local Git branch with optional force deletion. Takes the branch name and an optional boolean `forceDelete` flag as parameters.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranch(branchName, forceDelete)`\n```\n\n----------------------------------------\n\nTITLE: Git Submodule Add - JavaScript\nDESCRIPTION: Explains the usage of `.submoduleAdd(repo, path)` to add a new submodule.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Git Pull with Object Options - JavaScript\nDESCRIPTION: Demonstrates how to use the `git.pull` method with an options object to prevent rebasing during the pull operation. The `--no-rebase` option is set to null, which results in the option being included in the command string without a value.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n// results in 'git pull origin master --no-rebase'\ngit.pull('origin', 'master', { '--no-rebase': null });\n```\n\n----------------------------------------\n\nTITLE: Git Submodule Init - JavaScript\nDESCRIPTION: Explains the usage of `.submoduleInit([options])` to initialize submodules. The optional options argument can pass extra options to the `git submodule init` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: Executing Git Branch Commands\nDESCRIPTION: Executes `git branch` command with given options. Returns a `BranchSummaryResult` when listing branches or a `BranchSingleDeleteResult` when deleting a branch with options like `-d`, `-D`, or `--delete`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.branch([options])`\n```\n\n----------------------------------------\n\nTITLE: Share AbortController across SimpleGit Instances (TypeScript)\nDESCRIPTION: This example demonstrates sharing an AbortController across multiple simple-git instances, allowing the cancellation of pending operations when the first one completes. It uses Promise.race to run the same operation (fetch) against multiple repositories and cancels pending operations when the first one succeeds.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-ABORT-CONTROLLER.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst repos = [\n  '/path/to/repo-a',\n  '/path/to/repo-b',\n  '/path/to/repo-c',\n];\n\nconst controller = new AbortController();\nconst result = await Promise.race(\n  repos.map(baseDir => simpleGit({ baseDir, abort: controller.signal }).fetch())\n);\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Git Binary\nDESCRIPTION: Configures a `simple-git` instance to use a custom `git` binary. This is useful when `git` is not on the `$PATH` or when using a specific version of `git`. The `binary` option specifies the path to the custom binary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsimpleGit({ binary: 'my-custom-git' });\n```\n\n----------------------------------------\n\nTITLE: Piping to Console for Long Tasks - JavaScript\nDESCRIPTION: This snippet demonstrates how to monitor the progress of long-running Git tasks, such as cloning, by listening to progress events.  It configures the `simpleGit` instance with a `progress` handler and executes a checkout command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit({\n   progress({ method, stage, progress }) {\n      console.log(`git.${method} ${stage} stage ${progress}% complete`);\n   },\n});\ngit.checkout('https://github.com/user/repo.git');\n```\n\n----------------------------------------\n\nTITLE: Tracking Git Processes with Output Handler\nDESCRIPTION: Tracks the number of currently running git processes by using the `outputHandler` to add and remove processes from a Set.  Each time a command is executed, a new date is added to the processes Set, and removed when either stdout or stderr streams are closed. This example requires the `simple-git` library and demonstrates a utility function to fetch currently running processes.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-output-handler.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet processes = new Set();\nconst currentlyRunning = () => processes.size;\nconst git = context.git.outputHandler((_command, stdout, stderr) => {\n   const start = new Date();\n   const onClose = () => processes.delete(start);\n\n   stdout.on('close', onClose);\n   stderr.on('close', onClose);\n\n   processes.add(start);\n});\n\nexpect(currentlyRunning()).toBe(0);\nconst queue = [git.init(), git.add('*.txt')];\n\nawait wait(0);\nexpect(currentlyRunning()).toBe(2);\n\nawait Promise.all(queue);\nexpect(currentlyRunning()).toBe(0);\n```\n\n----------------------------------------\n\nTITLE: Running Git Tag Commands\nDESCRIPTION: Executes any supported `git tag` command with arguments passed as an array of strings. Requires the arguments to be passed in an array and a handler function.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.tag(args[], handlerFn)`\n```\n\n----------------------------------------\n\nTITLE: Force Deleting Multiple Local Git Branches\nDESCRIPTION: Deletes multiple local Git branches with optional force deletion. Takes an array of branch names and an optional boolean `forceDelete` flag as parameters.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranches(branchNames, forceDelete)`\n```\n\n----------------------------------------\n\nTITLE: Tagging with Git using tag\nDESCRIPTION: Runs any supported `git tag` command with arguments passed as an array of strings. The method `.tag(args[], handlerFn)` takes an array of arguments as the first argument and a handler function as the second argument.  Refer to the git documentation for details on the supported arguments.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.tag(args[], handlerFn)`\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Branch using deleteLocalBranch\nDESCRIPTION: Deletes a local branch with `.deleteLocalBranch(branchName)` and `.deleteLocalBranch(branchName, forceDelete)`. `forceDelete` defaults to false.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranch(branchName)`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.deleteLocalBranch(branchName, forceDelete)`\n```\n\n----------------------------------------\n\nTITLE: Pulling with Options Array - JavaScript\nDESCRIPTION: Demonstrates how to use an array of strings to provide options when pulling changes from a remote Git repository using simple-git. The options are merged into the command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// results in 'git pull origin master --no-rebase'\ngit.pull('origin', 'master', ['--no-rebase']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent Processes - TypeScript\nDESCRIPTION: Demonstrates how to configure the maximum number of concurrent Git processes that `simple-git` can run by passing an options object to the `simpleGit` function.  This controls the number of child processes that can run simultaneously.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst git = simpleGit({ maxConcurrentProcesses: 10 });\n```\n\n----------------------------------------\n\nTITLE: Listing Git Tags\nDESCRIPTION: Lists all Git tags, allowing optional configuration via an options object. Supports custom sorting in Git versions 2.7 and above using the `--sort` option.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.tags([options, ] handlerFn)`\n```\n\n----------------------------------------\n\nTITLE: Getting Git Config with Scope\nDESCRIPTION: Gets the value(s) for a named key within a specific scope. Returns a `ConfigGetResult` instance with results limited to the defined scope.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.getConfig(key, scope)`\n```\n\n----------------------------------------\n\nTITLE: Getting Diff Summary using diffSummary\nDESCRIPTION: Creates a DiffResult to summarise the diff for files in the repo. Uses the `--stat` format by default which can be overridden by passing in any of the log format commands. Method signature: `.diffSummary([ options ])`\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.diffSummary([ options ])`\n```\n\n----------------------------------------\n\nTITLE: Getting Config using getConfig\nDESCRIPTION: Gets the value(s) for a named key.  The method `.getConfig(key)` gets the value(s) for a named key.  The method `.getConfig(key, scope)` gets the value(s) for a named key with scope.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.getConfig(key)`\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.getConfig(key, scope)`\n```\n\n----------------------------------------\n\nTITLE: Applying Single Git Patch\nDESCRIPTION: Applies a single patch string (generated by `git diff`) to the repository.  Supports optional configuration via the `options` parameter to set arguments supported by the `git apply` command. Returns the stdout of the git binary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.applyPatch(patch, [options])`\n```\n\n----------------------------------------\n\nTITLE: Hashing Object using hashObject\nDESCRIPTION: Computes the object ID value for the contents of the named file, optionally writing the resulting value to the object database. Method signature: `.hashObject(filePath, write = false)`\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.hashObject(filePath, write = false)`\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Git Commands with Callback - JavaScript\nDESCRIPTION: Illustrates how to execute raw Git commands directly using `simpleGit`'s `raw` method with a Node.js-style callback function.  The callback receives an error object (if the command failed) and the raw output of the command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = '/path/to/repo';\nconst commands = ['config', '--global', 'advice.pushNonFastForward', 'false'];\n\n// using an array of commands and node-style callback\nsimpleGit(path).raw(commands, (err, result) => {\n   // err is null unless this command failed\n   // result is the raw output of this command\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Objects using countObjects\nDESCRIPTION: Queries the pack and disk usage properties of the local repository. All disk sizes are reported in Kb. Method signature: `.countObjects()`\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.countObjects()`\n```\n\n----------------------------------------\n\nTITLE: Piping Git Output Streams\nDESCRIPTION: Pipes the `stdout` and `stderr` streams from the `git` child process to the main process's `stdout` and `stderr`. This allows for real-time output from git commands to be displayed in the console. Requires the `simple-git` library.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-output-handler.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InitResult, SimpleGit, simpleGit } from \"simple-git\";\n\nconst git: SimpleGit = simpleGit()\n   .outputHandler((_command, stdout, stderr) => {\n      stdout.pipe(process.stdout);\n      stderr.pipe(process.stderr);\n   });\n\nconst init: InitResult = await git.init();\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleGit with AbortController (TypeScript)\nDESCRIPTION: This snippet shows how to initialize a simple-git instance with an AbortController's signal. It demonstrates how to handle GitPluginError when the abort signal is triggered during a git operation, indicating that the task was terminated by the AbortController.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-ABORT-CONTROLLER.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, GitPluginError, SimpleGit } from 'simple-git';\n\nconst controller = new AbortController();\n\nconst git: SimpleGit = simpleGit({\n   baseDir: '/some/path', \n   abort: controller.signal,\n});\n\ntry {\n  await git.pull();\n}\ncatch (err) {\n    if (err instanceof GitPluginError && err.plugin === 'abort') {\n        // task failed because `controller.abort` was called while waiting for the `git.pull`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Callback - JavaScript\nDESCRIPTION: Demonstrates how to handle exceptions using a callback with the `git.merge` command. If there's an error, the `err.git` property may contain a parsed merge summary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ngit.merge((err, mergeSummary) => {\n   if (err.git) {\n      mergeSummary = err.git; // the failed mergeSummary\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Completion Plugin in simple-git (TypeScript)\nDESCRIPTION: This code snippet shows how to configure the `completion` plugin in `simple-git` to control how `git` task completion is determined. It sets `onExit` to 50ms and `onClose` to `true`.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-COMPLETION-DETECTION.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit } from 'simple-git';\n\nconst git: SimpleGit = simpleGit({\n   completion: {\n      onExit: 50,\n      onClose: true,\n   },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing simple-git in a TypeScript app\nDESCRIPTION: Demonstrates importing simple-git in a TypeScript application. It shows how to import `simpleGit`, `SimpleGit` type, and `CleanOptions`, then uses them to invoke the `clean` command with the `FORCE` option and assign the result to a typed variable. Requires TypeScript and simple-git typings.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, SimpleGit, CleanOptions } from 'simple-git';\n\nconst git: SimpleGit = simpleGit().clean(CleanOptions.FORCE);\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository in Shell\nDESCRIPTION: This is the shell command equivalent to the `simpleGit().init()` TypeScript code. It initializes an empty Git repository in the current directory.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Typed Exception Handling (TypeScript)\nDESCRIPTION: Illustrates how to handle errors in TypeScript with typed error objects. Imports `simpleGit`, `MergeSummary`, and `GitResponseError` from the 'simple-git' module for type safety and provides an example for accessing error properties and handling conflicts.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nimport { simpleGit, MergeSummary, GitResponseError } from 'simple-git';\ntry {\n   const mergeSummary = await simpleGit().merge();\n   console.log(`Merged ${mergeSummary.merges.length} files`);\n} catch (err) {\n   // err.message - the string summary of the error\n   // err.stack - some stack trace detail\n   // err.git - where a parser was able to run, this is the parsed content\n   const mergeSummary: MergeSummary = (err as GitResponseError<MergeSummary>).git;\n   const conflicts = mergeSummary?.conflicts || [];\n\n   console.error(`Merge resulted in ${conflicts.length} conflicts`);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User ID with SimpleGit (TypeScript)\nDESCRIPTION: This code snippet illustrates how to set the user ID (uid) for spawned Git commands using the `spawnOptions` option in SimpleGit. It ensures that any Git command executed through this instance will belong to the specified system user.  The `uid` option is set to 1000 in this example.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-SPAWN-OPTIONS.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst git: SimpleGit = simpleGit('/some/path', { spawnOptions: { uid: 1000 } });\n\n// any command executed will belong to system user 1000\nawait git.pull();\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Git Patches\nDESCRIPTION: Applies an array of patch strings (generated by `git diff`) to the repository. Supports optional configuration via the `options` parameter to set arguments supported by the `git apply` command. Returns the stdout of the git binary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n`.applyPatch(patches, [options])`\n```\n\n----------------------------------------\n\nTITLE: Grep Query Builder Output in TypeScript\nDESCRIPTION: Shows the output of the `grepQueryBuilder` to demonstrate the underlying arguments passed to git grep. It builds the same query as the previous example and then converts it to an array to show the equivalent command line options.\nSOURCE: https://github.com/steveukx/git-js/blob/main/examples/git-grep.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(Array.from(grepQueryBuilder('aaa').and('bbb', 'ccc')))\n    // [ '-e', 'aaa', '--and', '(', '-e', 'bbb', '-e', 'ccc', ')' ]\n```\n\n----------------------------------------\n\nTITLE: Setting Group ID with SimpleGit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set the group ID (gid) for spawned Git commands using the `spawnOptions` option in SimpleGit.  It ensures that any Git command executed through this instance will belong to the specified system group. The `gid` option is set to 20 in this example.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-SPAWN-OPTIONS.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst git: SimpleGit = simpleGit('/some/path', { spawnOptions: { gid: 20 } });\n\n// any command executed will belong to system group 20\nawait git.pull();\n```\n\n----------------------------------------\n\nTITLE: Importing simple-git as an ES Module\nDESCRIPTION: Demonstrates how to import and use the simple-git library in a Node.js application using ES Module syntax.  It imports the library and executes a `clean` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { simpleGit, CleanOptions } from 'simple-git';\n\nsimpleGit().clean(CleanOptions.FORCE);\n```\n\n----------------------------------------\n\nTITLE: Resolving Debug Dependency Conflicts\nDESCRIPTION: This snippet demonstrates how to resolve dependency conflicts with the `debug` package using the `resolutions` field in `package.json`.  This is useful when different dependencies require different versions of debug, causing unexpected behavior. The `resolutions` field forces npm to use a specific version across all dependencies.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/DEBUG-LOGGING-GUIDE.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"name\": \"my-app\",\n   \"dependencies\": {\n      \"simple-git\": \"^2.21.0\",\n      \"debug\": \"^4.3.1\"\n   },\n   \"resolutions\": {\n      \"debug\": \"^4.3.1\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing simple-git as an ES Module\nDESCRIPTION: Shows how to import the simple-git library as an ES module. It imports `simpleGit` and `CleanOptions` and then executes the `clean` command with the `FORCE` option. Assumes an ES module compatible environment.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { simpleGit, CleanOptions } from 'simple-git';\n\nsimpleGit().clean(CleanOptions.FORCE);\n```\n\n----------------------------------------\n\nTITLE: Changing Git Binary on Existing Instance\nDESCRIPTION: Changes the `git` binary on an existing `simple-git` instance using the `customBinary` method. This method takes the new binary path as an argument and allows subsequent Git commands to use the specified binary.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst git = await simpleGit().init();\ngit.customBinary('./custom/git').raw('add', '.');\n```\n\n----------------------------------------\n\nTITLE: Importing simple-git using CommonJS\nDESCRIPTION: Demonstrates how to import and use the simple-git library in a Node.js application using CommonJS syntax.  It imports the library and executes a `clean` command.\nSOURCE: https://github.com/steveukx/git-js/blob/main/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// require the library, main export is a function\nconst simpleGit = require('simple-git');\nsimpleGit().clean(simpleGit.CleanOptions.FORCE);\n\n// or use named properties\nconst { simpleGit, CleanOptions } = require('simple-git');\nsimpleGit().clean(CleanOptions.FORCE);\n```\n\n----------------------------------------\n\nTITLE: Importing simple-git with Common JS\nDESCRIPTION: Demonstrates importing the simple-git library using Common JS syntax.  It showcases how to require the library and use both the main export and named properties for invoking git commands like `clean` with `FORCE` option.  Requires node.js environment.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// require the library, main export is a function\nconst simpleGit = require('simple-git');\nsimpleGit().clean(simpleGit.CleanOptions.FORCE);\n\n// or use named properties\nconst { simpleGit, CleanOptions } = require('simple-git');\nsimpleGit().clean(CleanOptions.FORCE);\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository in WSL\nDESCRIPTION: This shell command is equivalent to the `simpleGit({ binary: ['wsl', 'git'] }).init();` TypeScript code.  It initializes a git repository within the WSL environment.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwsl git init\n```\n\n----------------------------------------\n\nTITLE: Using Task Callbacks with simple-git\nDESCRIPTION: Demonstrates how to use callbacks to handle the results of simple-git tasks. Each method call includes a trailing callback function to process the result or handle errors. Provides asynchronous functionality without using Promises.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst git = simpleGit();\ngit.init(onInit).addRemote('origin', 'git@github.com:steveukx/git-js.git', onRemoteAdd);\n\nfunction onInit(err, initResult) {}\nfunction onRemoteAdd(err, addRemoteResult) {}\n```\n\n----------------------------------------\n\nTITLE: Adding files with Custom Binary in Shell\nDESCRIPTION: The first command initializes the repo and the second uses the custom binary to add all files in the current directory to the staging area.\nSOURCE: https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-CUSTOM-BINARY.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n./custom/git add .\n```\n\n----------------------------------------\n\nTITLE: Mirroring a Git Repository\nDESCRIPTION: Mirrors a remote repository to a local directory. Behaves similarly to `.clone` but with the `--mirror` flag enabled.\nSOURCE: https://github.com/steveukx/git-js/blob/main/simple-git/readme.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n`mirror(repoPath, [localPath, [options]])`\n```"
  }
]