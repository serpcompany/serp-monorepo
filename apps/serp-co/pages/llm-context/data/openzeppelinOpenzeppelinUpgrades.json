[
  {
    "owner": "openzeppelin",
    "repo": "openzeppelin-upgrades",
    "content": "TITLE: Testing Proxy Upgrades\nDESCRIPTION: Test code showing how to verify the upgradeability of a contract using proxy pattern in a test environment.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require(\"chai\");\n\ndescribe(\"Box\", function() {\n  it('works', async () => {\n    const Box = await ethers.getContractFactory(\"Box\");\n    const BoxV2 = await ethers.getContractFactory(\"BoxV2\");\n  \n    const instance = await upgrades.deployProxy(Box, [42]);\n    const upgraded = await upgrades.upgradeProxy(await instance.getAddress(), BoxV2);\n\n    const value = await upgraded.value();\n    expect(value.toString()).to.equal('42');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Proxy Contract in Migrations\nDESCRIPTION: Example of deploying an upgradeable contract using deployProxy in a Truffle migration. Demonstrates initialization with parameters and proper deployment setup.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { deployProxy } = require('@openzeppelin/truffle-upgrades');\n\nconst Box = artifacts.require('Box');\n\nmodule.exports = async function (deployer) {\n  const instance = await deployProxy(Box, [42], { deployer });\n  console.log('Deployed', instance.address);\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Proxy Contract in Migrations\nDESCRIPTION: Example of upgrading an existing proxy contract to a new implementation in a Truffle migration using upgradeProxy function.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { upgradeProxy } = require('@openzeppelin/truffle-upgrades');\n\nconst Box = artifacts.require('Box');\nconst BoxV2 = artifacts.require('BoxV2');\n\nmodule.exports = async function (deployer) {\n  const existing = await Box.deployed();\n  const instance = await upgradeProxy(existing.address, BoxV2, { deployer });\n  console.log(\"Upgraded\", instance.address);\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Contract Script\nDESCRIPTION: Script showing how to upgrade an existing proxy to a new implementation using upgradeProxy function.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers, upgrades } = require(\"hardhat\");\n\nasync function main() {\n  const BoxV2 = await ethers.getContractFactory(\"BoxV2\");\n  const box = await upgrades.upgradeProxy(BOX_ADDRESS, BoxV2);\n  console.log(\"Box upgraded\");\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Deploying Upgradeable Contract Script\nDESCRIPTION: Script demonstrating how to deploy an upgradeable contract using deployProxy function. It initializes a Box contract with a value of 42.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers, upgrades } = require(\"hardhat\");\n\nasync function main() {\n  const Box = await ethers.getContractFactory(\"Box\");\n  const box = await upgrades.deployProxy(Box, [42]);\n  await box.waitForDeployment();\n  console.log(\"Box deployed to:\", await box.getAddress());\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Deploying Beacon Proxy Script\nDESCRIPTION: Script demonstrating deployment of a beacon and associated beacon proxy, allowing for multiple proxies to be upgraded simultaneously.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers, upgrades } = require(\"hardhat\");\n\nasync function main() {\n  const Box = await ethers.getContractFactory(\"Box\");\n\n  const beacon = await upgrades.deployBeacon(Box);\n  await beacon.waitForDeployment();\n  console.log(\"Beacon deployed to:\", await beacon.getAddress());\n\n  const box = await upgrades.deployBeaconProxy(beacon, Box, [42]);\n  await box.waitForDeployment();\n  console.log(\"Box deployed to:\", await box.getAddress());\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Upgrade Proposal with Hardhat Defender\nDESCRIPTION: Script demonstrating how to propose a contract upgrade using the Hardhat Defender plugin, which deploys the implementation contract and creates a proposal in Defender Admin.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-defender-hardhat/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// scripts/propose-upgrade.js\nconst { defender } = require(\"hardhat\");\n\nasync function main() {\n  const BoxV2 = await ethers.getContractFactory(\"BoxV2\");\n  const proposal = await defender.proposeUpgrade(BOX_ADDRESS, BoxV2);\n  console.log(\"Upgrade proposal created at:\", proposal.url);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Plugin\nDESCRIPTION: Configuration code for registering the OpenZeppelin upgrades plugin in Hardhat config file, showing both JavaScript and TypeScript syntax.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Javascript\nrequire('@openzeppelin/hardhat-upgrades');\n\n// Typescript\nimport '@openzeppelin/hardhat-upgrades';\n```\n\n----------------------------------------\n\nTITLE: Analyzing Function Visibility Changes in Solidity\nDESCRIPTION: This snippet demonstrates the analysis of incompatible function visibility changes within structs during upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `s1` to an incompatible type\n  - Bad upgrade from struct StorageUpgrade_FunctionType_Visibility_V1.S to struct StorageUpgrade_FunctionType_Visibility_V2_Bad.S\n  - In struct StorageUpgrade_FunctionType_Visibility_V2_Bad.S\n    - Upgraded `m` to an incompatible type\n      - Bad upgrade from function () to function () external\n        Different visibility\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin Hardhat Upgrades Dependencies\nDESCRIPTION: Commands for installing the required npm packages including the main plugin and its peer dependencies.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @openzeppelin/hardhat-upgrades\nnpm install --save-dev @nomicfoundation/hardhat-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Testing Proxy Upgrades\nDESCRIPTION: Example of testing proxy contract upgrades using deployProxy and upgradeProxy functions in Truffle tests.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { deployProxy, upgradeProxy } = require('@openzeppelin/truffle-upgrades');\n\nconst Box = artifacts.require('Box');\nconst BoxV2 = artifacts.require('BoxV2');\n\ndescribe('upgrades', () => {\n  it('works', async () => {\n    const box = await deployProxy(Box, [42]);\n    const box2 = await upgradeProxy(box.address, BoxV2);\n\n    const value = await box2.value();\n    assert.equal(value.toString(), '42');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Analyzing Mapping Upgrades in Solidity\nDESCRIPTION: This snippet demonstrates the analysis of incompatible mapping upgrades, including changes in value types and key types.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `m1` to an incompatible type\n  - In mapping(uint256 => uint256)\n    - Bad upgrade from uint256[10] to uint256\n\nfile.sol:1: Upgraded `m2` to an incompatible type\n  - In key of mapping(bool => uint256)\n    - Bad upgrade from undefined to bool\n```\n\n----------------------------------------\n\nTITLE: Verifying Smart Contract Deployment with Hardhat Defender\nDESCRIPTION: Script showing how to verify a deployed contract by uploading its compilation artifact to Defender, which checks that on-chain code matches the artifact.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-defender-hardhat/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// scripts/verify-deploy.js\nconst { defender } = require('hardhat');\n\nasync function main() {\n  const verification = await defender.verifyDeployment(BOX_ADDRESS, 'Box', MY_REPO_URL);\n  console.log(`Verified artifact with hash`, verification.providedSha256);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Mapping Enum Key Upgrades in Solidity\nDESCRIPTION: This snippet shows the analysis of incompatible mapping upgrades involving enum keys and other type changes in mapping keys.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `m2` to an incompatible type\n  - In key of mapping(enum E2_Bad => uint256)\n    - Bad upgrade from enum E1 to enum E2_Bad\n\nfile.sol:1: Upgraded `m3` to an incompatible type\n  - In key of mapping(enum E1 => uint256)\n    - Bad upgrade from uint8 to enum E1\n\nfile.sol:1: Upgraded `m4` to an incompatible type\n  - In key of mapping(uint256 => uint256)\n    - Bad upgrade from contract Storage1 to uint256\n```\n\n----------------------------------------\n\nTITLE: Upgrading Beacon Proxy in Migrations\nDESCRIPTION: Example of upgrading a beacon proxy implementation using upgradeBeacon function in Truffle migrations.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { erc1967, upgradeBeacon } = require('@openzeppelin/truffle-upgrades');\n\nconst Box = artifacts.require('Box');\nconst BoxV2 = artifacts.require('BoxV2');\n\nmodule.exports = async function (deployer) {\n  const existing = await Box.deployed();\n\n  const beaconAddress = await erc1967.getBeaconAddress(existing.address);\n  await upgradeBeacon(beaconAddress, BoxV2, { deployer });\n  console.log(\"Beacon upgraded\", beaconAddress);\n\n  const instance = await BoxV2.at(existing.address);\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Beacon Script\nDESCRIPTION: Script showing how to upgrade a beacon to a new implementation, which automatically upgrades all associated beacon proxies.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ethers, upgrades } = require(\"hardhat\");\n\nasync function main() {\n  const BoxV2 = await ethers.getContractFactory(\"BoxV2\");\n\n  await upgrades.upgradeBeacon(BEACON_ADDRESS, BoxV2);\n  console.log(\"Beacon upgraded\");\n\n  const box = BoxV2.attach(BOX_ADDRESS);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Obvious Type Mismatches in Solidity\nDESCRIPTION: This snippet shows the analysis of obvious type mismatches during upgrades, including changes between basic types, structs, and arrays.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `x1` to an incompatible type\n  - Bad upgrade from uint256 to string\n\nfile.sol:1: Upgraded `s1` to an incompatible type\n  - Bad upgrade from struct StorageUpgrade_ObviousMismatch_V1.S to uint256\n\nfile.sol:1: Upgraded `a1` to an incompatible type\n  - Bad upgrade from uint256[] to mapping(uint256 => uint256)\n```\n\n----------------------------------------\n\nTITLE: Testing Beacon Proxy Upgrades\nDESCRIPTION: Example of testing beacon proxy upgrades using deployBeacon, deployBeaconProxy, and upgradeBeacon functions in Truffle tests.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { deployBeacon, deployBeaconProxy, upgradeBeacon } = require('@openzeppelin/truffle-upgrades');\n\nconst Box = artifacts.require('Box');\nconst BoxV2 = artifacts.require('BoxV2');\n\ndescribe('upgrades', () => {\n  it('works', async () => {\n    const beacon = await deployBeacon(Box);\n    const box = await deployBeaconProxy(beacon, Box, [42]);\n\n    await upgradeBeacon(beacon, BoxV2);\n    const box2 = await BoxV2.at(box.address);\n\n    const value = await box2.value();\n    assert.equal(value.toString(), '42');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Beacon Proxy in Migrations\nDESCRIPTION: Example of deploying a beacon proxy pattern using deployBeacon and deployBeaconProxy functions in Truffle migrations.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { deployBeacon, deployBeaconProxy } = require('@openzeppelin/truffle-upgrades');\n\nconst Box = artifacts.require('Box');\n\nmodule.exports = async function (deployer) {\n  const beacon = await deployBeacon(Box);\n  console.log('Beacon deployed', beacon.address);\n\n  const instance = await deployBeaconProxy(beacon, Box, [42], { deployer });\n  console.log('Box deployed', instance.address);\n};\n```\n\n----------------------------------------\n\nTITLE: Rejecting Inherited Unsafe Operations in Solidity Contract\nDESCRIPTION: This test validates that the CLI correctly identifies and rejects a contract that inherits multiple unsafe operations from its parent contracts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:InheritsMultipleUnsafe\n\n    contracts/test/cli/Validate.sol:53: Use of delegatecall is not allowed\n        https://zpl.in/upgrades/error-002\n    \n    contracts/test/cli/Validate.sol:58: Use of delegatecall is not allowed\n        https://zpl.in/upgrades/error-002\n    \n    contracts/test/cli/Validate.sol:44: Use of selfdestruct is not allowed\n        https://zpl.in/upgrades/error-003`\n```\n\n----------------------------------------\n\nTITLE: Using verify:verify for Etherscan Verification in Hardhat\nDESCRIPTION: Example showing how to programmatically verify a proxy on Etherscan from a Hardhat script by calling the verify:verify subtask instead of the verify task.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait hre.run(\"verify:verify\", {\n  address: PROXY_ADDRESS,\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting Unsafe Operations and Storage Layout Changes\nDESCRIPTION: This test validates that the CLI correctly identifies and rejects a contract with both unsafe operations (selfdestruct) and storage layout changes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:UnsafeAndStorageLayoutErrors (upgrades from contracts/test/cli/Validate.sol:StorageV1)\n\n    contracts/test/cli/Validate.sol:97: Use of selfdestruct is not allowed\n        https://zpl.in/upgrades/error-003\n\n    contracts/test/cli/Validate.sol:94: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])\n      - Slot changed from 1 to 2\n      > Set __gap array to size 48`\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Defender Plugin in JavaScript\nDESCRIPTION: Shows how to register the OpenZeppelin Hardhat Defender plugin in a JavaScript Hardhat configuration file.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-defender-hardhat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Javascript\nrequire('@openzeppelin/hardhat-defender');\n```\n\n----------------------------------------\n\nTITLE: Custom Gap: Inserting Variable Without Shrinking Gaps and Switching Gap Names in Solidity\nDESCRIPTION: This snippet shows the output when a variable is inserted with custom gaps, the gaps are not shrunk, and the gap names are switched.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Renamed `__gap_part1` to `__gap_part2`\n\nfile.sol:1: Renamed `__gap_part2` to `__gap_part1`\n```\n\n----------------------------------------\n\nTITLE: Inserting Variables Without Shrinking Gap (uint128) in Solidity\nDESCRIPTION: This snippet demonstrates the output when variables of type uint128 are inserted without shrinking the gap. It suggests adjusting the gap array size.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Layout changed for `__gap` (uint128[49] -> uint128[49])\n  - Slot changed from 1 to 2\n  > Set __gap array to size 48\n```\n\n----------------------------------------\n\nTITLE: Inserting Variables and Insufficiently Shrinking Gap in Solidity\nDESCRIPTION: This snippet shows the output when variables are inserted but the gap is not shrunk enough. It suggests the correct gap size adjustment.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Upgraded `__gap` to an incompatible type\n  - Bad storage gap resize from 48 to 47\n    Size decrease must match with corresponding variable inserts\n  > Set __gap array to size 46\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Contract with ERC-7201 Namespaced Storage in Solidity\nDESCRIPTION: This snippet defines an abstract contract 'Example' with ERC-7201 namespaced storage structures. It includes multiple storage structures with custom storage locations and demonstrates the use of virtual functions and internal view functions.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract Example {\n    /// @custom:storage-location erc7201:example.main\n    struct MainStorage {\n        uint256 x;\n        uint256 y;\n    } MainStorage $MainStorage_random;\n\n    /// @custom:storage-location erc7201:example.secondary\n    struct SecondaryStorage {\n        uint256 a;\n        uint256 b;\n    } SecondaryStorage $SecondaryStorage_random;\n\n    /// @custom:storage-location erc7201:example.with.following.comment\n    // some comment\n    struct StorageWithComment {\n        uint256 a;\n        uint256 b;\n    } StorageWithComment $StorageWithComment_random;\n\n    \n    function foo() virtual  public ;\n\n    \n    function foo1(uint a) virtual  public ;\n\n    \n    function foo2(uint a) virtual  internal ;\n    struct MyStruct { uint b; }\n\n    // keccak256(abi.encode(uint256(keccak256(\"example.main\")) - 1)) & ~bytes32(uint256(0xff));\n    bytes32 private constant MAIN_STORAGE_LOCATION =\n        0x183a6125c38840424c4a85fa12bab2ab606c4b6d0e7cc73c0c06ba5300eab500;\n\n    function _getMainStorage() private pure returns (bool $) {}\n\n    function _getXTimesY() virtual  internal view returns (uint256) ;\n\n    \n\n    \n    enum $astId_id_random { dummy }\n\n    // standalone doc\n\n    \n\n    \n    function foo3() virtual  public ;\n\n    \n    function foo4() virtual  public ;\n\n    \n    enum $astId_id_random { dummy }\n\n    enum $astId_id_random { dummy }\n    enum $astId_id_random { dummy }\n    enum $astId_id_random { dummy }\n    enum $astId_id_random { dummy }\n    enum $astId_id_random { dummy }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Beacon Proxy Upgrades\nDESCRIPTION: Test code demonstrating how to verify the upgradeability of a contract using beacon proxy pattern in a test environment.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/README.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require(\"chai\");\n\ndescribe(\"Box\", function() {\n  it('works', async () => {\n    const Box = await ethers.getContractFactory(\"Box\");\n    const BoxV2 = await ethers.getContractFactory(\"BoxV2\");\n\n    const beacon = await upgrades.deployBeacon(Box);\n    const instance = await upgrades.deployBeaconProxy(beacon, Box, [42]);\n    \n    await upgrades.upgradeBeacon(beacon, BoxV2);\n    const upgraded = BoxV2.attach(await instance.getAddress());\n\n    const value = await upgraded.value();\n    expect(value.toString()).to.equal('42');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Variable and Excessively Shrinking Gap in Solidity\nDESCRIPTION: This snippet demonstrates the output when a variable is inserted and the gap is shrunk too much. It suggests the correct gap size adjustment.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Upgraded `__gap` to an incompatible type\n  - Bad storage gap resize from 48 to 46\n    Size decrease must match with corresponding variable inserts\n  > Set __gap array to size 47\n```\n\n----------------------------------------\n\nTITLE: Shrinking Gap Without Adding Variable in Solidity\nDESCRIPTION: This snippet shows the output when attempting to shrink the storage gap without adding a corresponding variable. It suggests maintaining the original gap size.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Upgraded `__gap` to an incompatible type\n  - Bad storage gap resize from 48 to 47\n    Size decrease must match with corresponding variable inserts\n  > Set __gap array to size 48\n```\n\n----------------------------------------\n\nTITLE: Basic CustomLayout Storage Snapshot\nDESCRIPTION: Snapshot test showing the storage layout for a basic CustomLayout contract that extends a Base contract with storage slots properly defined.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: '0x1',\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Base',\n      label: 'x',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n    {\n      contract: 'CustomLayout',\n      label: 'y',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '2',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n  ],\n  types: [\n    [\n      't_uint256',\n      {\n        label: 'uint256',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Namespaces and Regular Variables in JavaScript\nDESCRIPTION: This snapshot test checks the error messages when new variables are inserted in multiple namespaces and regular storage. It ensures that new variables are placed correctly in the storage layout.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\ncontracts/Namespaced.sol:225: Inserted \\`a2\\`\n  > New variables should be placed after all existing inherited variables\n\ncontracts/Namespaced.sol:211: Inserted \\`a2\\`\n  > New variables should be placed after all existing inherited variables\n\ncontracts/Namespaced.sol:219: Inserted \\`a2\\`\n  > New variables should be placed after all existing inherited variables`\n```\n\n----------------------------------------\n\nTITLE: Validating Upgrade Safety for Multiple Contracts in TypeScript\nDESCRIPTION: This snapshot test validates the upgrade safety of multiple Solidity contracts using the OpenZeppelin Upgrades CLI. It checks for various safety issues such as constructors, delegatecall, selfdestruct, and storage layout changes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validate-upgrade-safety.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n` ✔  contracts/test/cli/Validate.sol:Safe␊\n\n ✔  contracts/test/cli/Validate.sol:HasInitializer␊\n\n ✔  contracts/test/cli/Validate.sol:HasUpgradeTo␊\n\n ✘  contracts/test/cli/Validate.sol:HasUpgradeToConstructorUnsafe␊\n\n      contracts/test/cli/Validate.sol:33: Contract \\`HasUpgradeToConstructorUnsafe\\` has a constructor␊\n          Define an initializer instead␊\n          https://zpl.in/upgrades/error-001␊\n\n ✘  contracts/test/cli/Validate.sol:MultipleUnsafe␊\n\n      contracts/test/cli/Validate.sol:53: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:58: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:44: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n\n ✘  contracts/test/cli/Validate.sol:InheritsMultipleUnsafe␊\n\n      contracts/test/cli/Validate.sol:53: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:58: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:44: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n\n ✘  contracts/test/cli/Validate.sol:UpgradesFromUUPS (upgrades from contracts/test/cli/Validate.sol:HasUpgradeTo)␊\n\n      contracts/test/cli/Validate.sol:72: Implementation is missing a public \\`upgradeTo(address)\\` or \\`upgradeToAndCall(address,bytes)\\` function␊\n          Inherit UUPSUpgradeable to include one or both of these functions in your contract␊\n          @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol␊\n          https://zpl.in/upgrades/error-008␊\n\n ✔  contracts/test/cli/Validate.sol:UpgradesFromTransparent (upgrades from contracts/test/cli/Validate.sol:HasInitializer)␊\n\n ✘  contracts/test/cli/Validate.sol:UnsafeAndStorageLayoutErrors (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n\n      contracts/test/cli/Validate.sol:97: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n\n      contracts/test/cli/Validate.sol:94: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])␊\n        - Slot changed from 1 to 2␊\n        > Set __gap array to size 48␊\n\n ✔  contracts/test/cli/Validate.sol:BecomesSafe (upgrades from contracts/test/cli/Validate.sol:MultipleUnsafe)␊\n\n ✘  contracts/test/cli/Validate.sol:BecomesBadLayout (upgrades from contracts/test/cli/Validate.sol:BecomesSafe)␊\n\n      BecomesSafe: Deleted \\`x\\`␊\n        > Keep the variable even if unused␊\n\n ✘  contracts/test/cli/Validate.sol:StillUnsafe (upgrades from contracts/test/cli/Validate.sol:NonUpgradeable)␊\n\n      contracts/test/cli/Validate.sol:119: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n\n ✔  contracts/test/cli/Validate.sol:InheritsAbstractUpgradeable␊\n\n ✘  contracts/test/cli/Validate.sol:BothAnnotationsUnsafe (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n\n      contracts/test/cli/Validate.sol:140: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n\n      contracts/test/cli/Validate.sol:137: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])␊\n        - Slot changed from 1 to 2␊\n        > Set __gap array to size 48␊\n\nFAILED (14 upgradeable contracts detected, 6 passed, 8 failed)`\n```\n\n----------------------------------------\n\nTITLE: CustomLayout Multiple Namespaces Configuration\nDESCRIPTION: Storage layout snapshot demonstrating multiple namespace configurations with ERC7201 standard. Shows separate namespace definitions for example.a and example.b with their respective storage variables.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseSlot\": \"0x1\",\n  \"namespaces\": [\n    [\n      \"erc7201:example.b\",\n      [\n        {\n          \"contract\": \"NamespaceB\",\n          \"label\": \"x\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        }\n      ]\n    ],\n    [\n      \"erc7201:example.a\",\n      [\n        {\n          \"contract\": \"NamespaceA\",\n          \"label\": \"x\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        }\n      ]\n    ]\n  ],\n  \"storage\": [],\n  \"types\": [\n    [\n      \"t_uint256\",\n      {\n        \"label\": \"uint256\",\n        \"members\": undefined\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Namespace Deletion in JavaScript\nDESCRIPTION: This snapshot test verifies the error message when an entire namespace is deleted. It ensures that the system recommends keeping the struct with the namespace annotation even if unused.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\nExample: Deleted namespace \\`erc7201:example.main\\`\n  > Keep the struct with annotation '@custom:storage-location erc7201:example.main' even if unused`\n```\n\n----------------------------------------\n\nTITLE: Analyzing Struct Upgrades in Solidity\nDESCRIPTION: This snippet shows the analysis of incompatible struct upgrades, including deleted fields, added fields, and type changes within structs.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `data1` to an incompatible type\n  - Bad upgrade from struct StorageUpgrade_Struct_V1.Struct1 to struct StorageUpgrade_Struct_V2_Bad.Struct2Minus\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Minus\n    - Deleted `s1`\n      > Keep the variable even if unused\n\nfile.sol:1: Upgraded `data2` to an incompatible type\n  - Bad upgrade from struct StorageUpgrade_Struct_V1.Struct1 to struct StorageUpgrade_Struct_V2_Bad.Struct2Plus\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Plus\n    - Added `z`\n\nfile.sol:1: Upgraded `m` to an incompatible type\n  - In mapping(uint256 => struct StorageUpgrade_Struct_V2_Bad.Struct2Minus)\n    - Bad upgrade from struct StorageUpgrade_Struct_V1.Struct1 to struct StorageUpgrade_Struct_V2_Bad.Struct2Minus\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Minus\n    - Deleted `s1`\n      > Keep the variable even if unused\n\nfile.sol:1: Upgraded `a1` to an incompatible type\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Minus[10]\n    - Bad upgrade from struct StorageUpgrade_Struct_V1.Struct1 to struct StorageUpgrade_Struct_V2_Bad.Struct2Minus\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Minus\n    - Deleted `s1`\n      > Keep the variable even if unused\n\nfile.sol:1: Upgraded `a2` to an incompatible type\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Plus[10]\n    - Bad upgrade from struct StorageUpgrade_Struct_V1.Struct1 to struct StorageUpgrade_Struct_V2_Bad.Struct2Plus\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Plus\n    - Added `z`\n\nfile.sol:1: Upgraded `data3` to an incompatible type\n  - Bad upgrade from struct StorageUpgrade_Struct_V1.Struct1 to struct StorageUpgrade_Struct_V2_Bad.Struct2Changed\n  - In struct StorageUpgrade_Struct_V2_Bad.Struct2Changed\n    - Upgraded `x` to an incompatible type\n      - Bad upgrade from uint256 to string\n    - Upgraded `s1` to an incompatible type\n      - Bad upgrade from string to uint256\n    - Upgraded `inner` to an incompatible type\n      - Bad upgrade from struct StorageUpgrade_Struct_V1.StructInner to struct StorageUpgrade_Struct_V2_Bad.StructInnerPlus\n  - In struct StorageUpgrade_Struct_V2_Bad.StructInnerPlus\n    - Added `z`\n```\n\n----------------------------------------\n\nTITLE: CustomLayout Unknown Namespace Formula Configuration\nDESCRIPTION: Storage layout snapshot showing custom namespace configuration with base slot and storage definitions for unknown namespace formula implementation. Includes type definitions and storage slot assignments.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseSlot\": \"0x183a6125c38840424c4a85fa12bab2ab606c4b6d0e7cc73c0c06ba5300eab500\",\n  \"namespaces\": [\n    [\n      \"erc0000:example.main\",\n      [\n        {\n          \"contract\": \"CustomLayout_Unknown_Namespace_Formula\",\n          \"label\": \"x\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        },\n        {\n          \"contract\": \"CustomLayout_Unknown_Namespace_Formula\",\n          \"label\": \"y\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        }\n      ]\n    ]\n  ],\n  \"storage\": [\n    {\n      \"contract\": \"CustomLayout_Unknown_Namespace_Formula\",\n      \"label\": \"a\",\n      \"offset\": 0,\n      \"renamedFrom\": undefined,\n      \"retypedFrom\": undefined,\n      \"slot\": \"10958655983261152271848436692291137275443024275653522991983264966744321209600\",\n      \"src\": \"file.sol:1\",\n      \"type\": \"t_uint256\"\n    }\n  ],\n  \"types\": [\n    [\n      \"t_uint256\",\n      {\n        \"label\": \"uint256\",\n        \"members\": undefined,\n        \"numberOfBytes\": \"32\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Array Upgrades in Solidity\nDESCRIPTION: This snippet shows the analysis of incompatible array upgrades, including size changes and conversions between fixed and dynamic arrays.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `x1` to an incompatible type\n  - Bad array resize from 20 to 15\n    Size cannot decrease\n\nfile.sol:1: Upgraded `x2` to an incompatible type\n  - Bad array resize from 20 to 25\n    Size cannot increase here\n\nfile.sol:1: Upgraded `x3` to an incompatible type\n  - Bad upgrade from fixed to dynamic size array\n\nfile.sol:1: Upgraded `x4` to an incompatible type\n  - Bad upgrade from fixed to dynamic size array\n\nfile.sol:1: Upgraded `m` to an incompatible type\n  - In mapping(uint256 => uint256[15])\n    - Bad array resize from 20 to 15\n      Size cannot decrease\n```\n\n----------------------------------------\n\nTITLE: Error Message for Base Slot Change in Custom Layout\nDESCRIPTION: Snapshot of the error message displayed when the base slot for a custom storage layout is changed from 0x1 to 0x2, explaining the issue and providing remediation steps.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBase slot for custom storage layout changed from 0x0000000000000000000000000000000000000000000000000000000000000001 to 0x0000000000000000000000000000000000000000000000000000000000000002\n\nDo not change the base slot during upgrades when using custom storage layout.\n\nIf you need to change the base slot, ensure you also do the following:\n1. Adjust all storage variables to continue using their original slots.\n2. Configure your Solidity compiler options to include storage layouts according to https://docs.openzeppelin.com/upgrades-plugins/api-core#compile_contracts_with_storage_layouts\n3. Recompile both the original and updated contracts.\n4. Run the storage layout check again.\n```\n\n----------------------------------------\n\nTITLE: Validation Error Output for Missing UUPS Functions and Delegatecall Usage\nDESCRIPTION: Console output showing validation errors for a contract missing required upgrade functions and using delegatecall, which is not allowed in upgradeable contracts. It also shows an error for incompatible type replacement in an upgrade.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/project-report.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n ✘  mypath/MyContract.sol:MyContract␊\n␊\n      MyContract.sol:10: Implementation is missing a public `upgradeTo(address)` or `upgradeToAndCall(address,bytes)` function␊\n          Inherit UUPSUpgradeable to include one or both of these functions in your contract␊\n          @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol␊\n          https://zpl.in/upgrades/error-008␊\n      ␊\n      MyContract.sol:20: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n␊\n ✘  MyContract2 (upgrades from MyContract)␊\n␊\n      file.sol:1: Replaced `x2` with `renamed` of incompatible type␊\n␊\nFAILED (2 upgradeable contracts detected, 0 passed, 2 failed)\n```\n\n----------------------------------------\n\nTITLE: Base Slot Change Error Message\nDESCRIPTION: Error message displayed when base slot for custom storage layout is changed during upgrades, including instructions for proper handling of storage layout modifications.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nBase slot for custom storage layout changed from 0x0000000000000000000000000000000000000000000000000000000000000000 to 0x0000000000000000000000000000000000000000000000000000000000000019\n\nDo not change the base slot during upgrades when using custom storage layout.\n\nIf you need to change the base slot, ensure you also do the following:\n1. Adjust all storage variables to continue using their original slots.\n2. Configure your Solidity compiler options to include storage layouts according to https://docs.openzeppelin.com/upgrades-plugins/api-core#compile_contracts_with_storage_layouts\n3. Recompile both the original and updated contracts.\n4. Run the storage layout check again.\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces and Contracts with External View Functions in Solidity\nDESCRIPTION: This snippet defines an interface 'IHasExternalViewFunction' and an abstract contract 'HasExternalViewFunction' implementing it. It demonstrates the use of external view functions, function selectors, and getter functions for public variables.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_9\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface IHasExternalViewFunction {\n    function foo() external view returns (uint256);\n}\n\nabstract contract HasExternalViewFunction is IHasExternalViewFunction {\n    // This generates a getter function that conforms to the interface\n    enum $astId_id_random { dummy }\n\n    // References a selector in an interface\n    bytes4 constant USING_INTERFACE_FUNCTION_SELECTOR = IHasExternalViewFunction.foo.selector;\n\n    // References a getter generated for a public variable\n    enum $astId_id_random { dummy }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Valid Upgradeable Contracts\nDESCRIPTION: Output when validating multiple contracts that properly follow all upgrade safety rules, showing aggregate success statistics.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n ✔  contracts/test/cli/Annotation.sol:Annotation␊\n␊\nSUCCESS (1 upgradeable contract detected, 1 passed, 0 failed)␊\n```\n\n----------------------------------------\n\nTITLE: Error Message for Namespace Clash in Custom Layout\nDESCRIPTION: Snapshot of the error message when a custom layout for a contract clashes with the storage location for a namespace, instructing to use a different layout or namespace.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCustom layout for contract Namespaced_Custom_Layout_Clash clashes with the storage location for namespace erc7201:example.main\n\nThe namespace erc7201:example.main is defined in a struct at the following location:\n- file.sol:1\n\nSpecify a different custom layout for the contract or use a different namespace for the struct.\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface with a Constant Getter in Solidity\nDESCRIPTION: Demonstrates a contract implementing the IHasConstantGetter interface by providing a constant value for the getter function. The function is marked as public and override to satisfy the interface requirement.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_18\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract HasConstantGetter is IHasConstantGetter {\n  bytes32 public override constant a = bytes32(\"foo\");\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Constructor in Upgradeable Contract\nDESCRIPTION: This test ensures that the CLI detects and rejects a contract that has a constructor instead of an initializer, which is not allowed in upgradeable contracts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:HasUpgradeToConstructorUnsafe\n\n    contracts/test/cli/Validate.sol:33: Contract \\`HasUpgradeToConstructorUnsafe\\` has a constructor\n        Define an initializer instead\n        https://zpl.in/upgrades/error-001`\n```\n\n----------------------------------------\n\nTITLE: Error Message for Unsupported Node Type in Storage Layout\nDESCRIPTION: Snapshot of the error message shown when a custom storage layout expression uses an unsupported node type (BinaryOperation), with instructions to report the issue.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfile.sol:1: Custom storage layout expression with node type BinaryOperation is not currently supported\n\nPlease report this at https://zpl.in/upgrades/report and include the `layout at` expression from your contract.\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Contracts with Function Selectors in Solidity\nDESCRIPTION: This snippet defines abstract contracts 'HasFunction' and 'UsingFunction' demonstrating function selectors and inheritance. It also includes a free function and a constant using a function selector.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract HasFunction {\n  \n  enum $astId_id_random { dummy }\n\n  function foo() virtual  pure public returns (uint) ;\n}\n\nabstract contract UsingFunction is HasFunction {\n  enum $astId_id_random { dummy }\n}\n\nfunction FreeFunctionUsingSelector() pure returns (bool) {}\n\nbytes4 constant CONSTANT_USING_SELECTOR = HasFunction.foo.selector;\n```\n\n----------------------------------------\n\nTITLE: Rejecting Storage Layout Changes in Upgraded Contract\nDESCRIPTION: This test ensures that the CLI detects and rejects a contract upgrade that introduces storage layout changes, such as deleting a variable.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:BecomesBadLayout (upgrades from contracts/test/cli/Validate.sol:BecomesSafe)\n\n    BecomesSafe: Deleted \\`x\\`\n      > Keep the variable even if unused`\n```\n\n----------------------------------------\n\nTITLE: Validating Triple Struct Namespace Upgrade in JavaScript\nDESCRIPTION: This snapshot test verifies the error message for an incompatible upgrade in a nested struct within a namespace. It detects changes in the inner struct of a triple-nested structure.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\ncontracts/Namespaced.sol:162: Upgraded \\`s\\` to an incompatible type\n  - Bad upgrade from struct TripleStruct.Outer to struct TripleStructV2_Bad.Outer\n  - In struct TripleStructV2_Bad.Outer\n    - Upgraded \\`i\\` to an incompatible type\n      - Bad upgrade from struct TripleStruct.Inner to struct TripleStructV2_Bad.Inner\n  - In struct TripleStructV2_Bad.Inner\n    - Added \\`c\\``\n```\n\n----------------------------------------\n\nTITLE: Defining an Abstract Contract with Virtual Function in Solidity\nDESCRIPTION: Creates an abstract contract with a virtual pure function that returns a bytes32 value. This contract serves as a base for other contracts to implement or override the function.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_19\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract AbstractHasConstantGetter {\n  function a() virtual external pure returns (bytes32) ;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Safe Upgradeable Contract with Reference\nDESCRIPTION: Output when validating a contract that properly upgrades from a previously unsafe contract but is now safe for upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n ✔  contracts/test/cli/Validate.sol:BecomesSafe (upgrades from contracts/test/cli/Validate.sol:MultipleUnsafe)␊\n␊\nSUCCESS␊\n```\n\n----------------------------------------\n\nTITLE: Validating Namespace Movement and Variable Deletion in JavaScript\nDESCRIPTION: This snapshot test checks the error message when a namespace is moved to an inherited contract and a variable is deleted. It ensures that the system recommends keeping the variable even if unused.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\nExample: Deleted \\`x\\`\n  > Keep the variable even if unused`\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Contract with Using For Directives in Solidity\nDESCRIPTION: This snippet defines an abstract contract 'UsingForDirectives' demonstrating the use of 'using for' directives in Solidity. It includes a pure function that takes a uint parameter and returns a uint.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract UsingForDirectives {\n  enum $astId_id_random { dummy }\n\n  function usingFor(uint x) virtual  pure public returns (uint) ;\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Enum Upgrades in Solidity\nDESCRIPTION: This snippet demonstrates the analysis of incompatible enum upgrades, including deleted values, replaced values, inserted values, and size changes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Upgraded `data1` to an incompatible type\n  - Bad upgrade from enum StorageUpgrade_Enum_V1.Enum1 to enum StorageUpgrade_Enum_V2_Bad.Enum2Delete\n  - In enum StorageUpgrade_Enum_V2_Bad.Enum2Delete\n    - Deleted `B`\n\nfile.sol:1: Upgraded `data2` to an incompatible type\n  - Bad upgrade from enum StorageUpgrade_Enum_V1.Enum1 to enum StorageUpgrade_Enum_V2_Bad.Enum2Replace\n  - In enum StorageUpgrade_Enum_V2_Bad.Enum2Replace\n    - Replaced `B` with `X`\n\nfile.sol:1: Upgraded `data3` to an incompatible type\n  - Bad upgrade from enum StorageUpgrade_Enum_V1.Enum1 to enum StorageUpgrade_Enum_V2_Bad.Enum2Insert\n  - In enum StorageUpgrade_Enum_V2_Bad.Enum2Insert\n    - Inserted `X`\n\nfile.sol:1: Upgraded `data4` to an incompatible type\n  - Bad upgrade from enum StorageUpgrade_Enum_V1.Enum1 to enum StorageUpgrade_Enum_V2_Bad.Enum2TooLarge\n    Different representation sizes\n```\n\n----------------------------------------\n\nTITLE: Validating Namespace Movement, Variable Deletion, and Layout Presence in JavaScript\nDESCRIPTION: This snapshot test verifies the error message when a namespace is moved to an inherited contract, a variable is deleted, and the contract has a layout. It ensures that the system recommends keeping the variable even if unused.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\nExample: Deleted \\`x\\`\n  > Keep the variable even if unused`\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Namespace Conflict between Parent and Child Solidity Contracts\nDESCRIPTION: This snapshot test checks for namespace 'erc7201:conflicting' conflicts between a parent and child contract. It verifies that the test correctly identifies the conflict across the inheritance hierarchy and provides appropriate error messages.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts-layout.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> Snapshot 1\n\n    `Namespace erc7201:conflicting is defined multiple times for contract ConflictsWithParent␊\n    ␊\n    The namespace erc7201:conflicting was found in structs at the following locations:␊\n    - contracts/test/NamespacedConflicts.sol:45␊\n    - contracts/test/NamespacedConflicts.sol:30␊\n    ␊\n    Use a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.`\n```\n\n----------------------------------------\n\nTITLE: Deleting Variable and Expanding Gap in Solidity\nDESCRIPTION: This snippet demonstrates the output when a variable is deleted and the gap is expanded. It warns about incompatible gap resizing and suggests keeping unused variables.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nStorageUpgrade_Gap_V1: Deleted `b`\n  > Keep the variable even if unused\n\nfile.sol:1: Upgraded `__gap` to an incompatible type\n  - Bad storage gap resize from 48 to 49\n    Size cannot increase\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Contracts with Different Build Info References\nDESCRIPTION: This snippet demonstrates validating multiple contracts that reference different build info directories. It shows a mix of failed and successful validations, with one contract failing due to a renamed variable.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/ValidateBuildInfoV2_Branch_Bad.sol:MyContract (upgrades from build-info-v2:contracts/test/cli/ValidateBuildInfoV2_Ok.sol:MyContract)\n\n      contracts/test/cli/ValidateBuildInfoV2_Branch_Bad.sol:8: Renamed `z` to `zBranch`\n\n ✔  contracts/test/cli/ValidateBuildInfoV2_Branch_Ok.sol:MyContract (upgrades from build-info-v1:contracts/test/cli/ValidateBuildInfoV1.sol:MyContract)\n\nFAILED (2 upgradeable contracts detected, 1 passed, 1 failed)\n\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Duplicate Namespace in Solidity Contract\nDESCRIPTION: This snapshot test checks for duplicate namespace 'erc7201:conflicting' within the same contract. It verifies that the test correctly identifies multiple occurrences of the namespace and provides appropriate error messages.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts-layout.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Snapshot 1\n\n    `Namespace erc7201:conflicting is defined multiple times for contract DuplicateNamespace␊\n    ␊\n    The namespace erc7201:conflicting was found in structs at the following locations:␊\n    - contracts/test/NamespacedConflicts.sol:10␊\n    - contracts/test/NamespacedConflicts.sol:15␊\n    ␊\n    Use a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.`\n```\n\n----------------------------------------\n\nTITLE: Analyzing Variable Replacement in Solidity\nDESCRIPTION: This snippet shows the detection of variable replacement with an incompatible type during upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Replaced `x2` with `renamed` of incompatible type\n```\n\n----------------------------------------\n\nTITLE: Reporting Error Message for Incompatible Type Change from bool to uint8\nDESCRIPTION: Snapshot test showing the error message when a variable is incorrectly reported as changing from bool to uint8 type, which is incompatible for upgradeable contracts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-rename-retype.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfile.sol:1: Upgraded `x` to an incompatible type\n  - Bad upgrade from bool to uint8\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Inherited Duplicate Namespace in Solidity Contract\nDESCRIPTION: This snapshot test checks for duplicate namespace 'erc7201:conflicting' in an inherited contract. It verifies that the test correctly identifies multiple occurrences of the namespace across inheritance and provides appropriate error messages.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts-layout.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> Snapshot 1\n\n    `Namespace erc7201:conflicting is defined multiple times for contract InheritsDuplicate␊\n    ␊\n    The namespace erc7201:conflicting was found in structs at the following locations:␊\n    - contracts/test/NamespacedConflicts.sol:10␊\n    - contracts/test/NamespacedConflicts.sol:15␊\n    ␊\n    Use a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.`\n```\n\n----------------------------------------\n\nTITLE: Rejecting Persistent Unsafe Operations in Upgraded Contract\nDESCRIPTION: This test validates that the CLI correctly identifies and rejects a contract upgrade that still contains unsafe operations (selfdestruct) from its previous version.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:StillUnsafe (upgrades from contracts/test/cli/Validate.sol:NonUpgradeable)\n\n    contracts/test/cli/Validate.sol:119: Use of selfdestruct is not allowed\n        https://zpl.in/upgrades/error-003`\n```\n\n----------------------------------------\n\nTITLE: Reporting Error Message for Layout Change from bool to uint16\nDESCRIPTION: Snapshot test showing the error message when a variable 'a' changes from bool to uint16, which causes a layout change due to different byte sizes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-rename-retype.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfile.sol:1: Layout changed for `a` (bool -> uint16)\n  - Number of bytes changed from 1 to 2\n```\n\n----------------------------------------\n\nTITLE: Error Message for Duplicate Namespace in Single Contract\nDESCRIPTION: Snapshot of error message when a contract has the same namespace 'erc7201:conflicting' defined multiple times at different locations in the same contract file.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNamespace erc7201:conflicting is defined multiple times for contract DuplicateNamespace\n\nThe namespace erc7201:conflicting was found in structs at the following locations:\n- contracts/test/NamespacedConflicts.sol:10\n- contracts/test/NamespacedConflicts.sol:15\n\nUse a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.\n```\n\n----------------------------------------\n\nTITLE: Validating a Contract with Storage Variable Deletion\nDESCRIPTION: Output when validating a contract that improperly removes storage variables that existed in the previous version, which is unsafe for upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:BecomesBadLayout (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n␊\n      StorageV1: Deleted \\`x\\`␊\n        > Keep the variable even if unused␊\n      ␊\n      StorageV1: Deleted \\`__gap\\`␊\n        > Keep the variable even if unused␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Reporting Error Message for Layout Change from bool to bytes32\nDESCRIPTION: Snapshot test showing the error message when a variable changes from bool to bytes32, which is incompatible due to different byte sizes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-rename-retype.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfile.sol:1: Layout changed for `x` (bool -> bytes32)\n  - Number of bytes changed from 1 to 32\n```\n\n----------------------------------------\n\nTITLE: Error Message for Namespace Conflict Between Child and Parent Contract\nDESCRIPTION: Snapshot of error message when a child contract defines a namespace that conflicts with one in its parent contract, showing the two conflicting locations.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNamespace erc7201:conflicting is defined multiple times for contract ConflictsWithParent\n\nThe namespace erc7201:conflicting was found in structs at the following locations:\n- contracts/test/NamespacedConflicts.sol:45\n- contracts/test/NamespacedConflicts.sol:30\n\nUse a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.\n```\n\n----------------------------------------\n\nTITLE: Custom Gap: Inserting Variable Without Shrinking Gaps and Changing First Gap Name in Solidity\nDESCRIPTION: This snippet demonstrates the output when a variable is inserted with custom gaps, the gaps are not shrunk, and the name of the first gap is changed.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Renamed `__gap_part1` to `__gap`\n```\n\n----------------------------------------\n\nTITLE: Custom Gap: Inserting Variable Without Shrinking Gaps in Solidity\nDESCRIPTION: This snippet shows the output when a variable is inserted with custom gaps, but the gaps are not shrunk. It suggests adjusting the size of the first gap part.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Layout changed for `__gap_part1` (uint256[24] -> uint256[24])\n  - Slot changed from 1 to 2\n  > Set __gap_part1 array to size 23\n```\n\n----------------------------------------\n\nTITLE: Analyzing Variable Renaming in Solidity\nDESCRIPTION: This snippet demonstrates the detection of variable renaming during upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report.test.ts.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfile.sol:1: Renamed `x2` to `renamed`\n```\n\n----------------------------------------\n\nTITLE: Error Message for Namespace Conflict from Multiple Parent Contracts\nDESCRIPTION: Snapshot of error message when a child contract inherits from multiple parent contracts that have conflicting namespace definitions, showing the two conflicting parent locations.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNamespace erc7201:conflicting is defined multiple times for contract ConflictsInBothParents\n\nThe namespace erc7201:conflicting was found in structs at the following locations:\n- contracts/test/NamespacedConflicts.sol:45\n- contracts/test/NamespacedConflicts.sol:30\n\nUse a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface with ERC-7201 Namespaced Storage in Solidity\nDESCRIPTION: Shows an interface declaration that contains a storage structure with a custom storage location annotation. This demonstrates how storage namespacing can be defined within interface contracts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_16\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface InterfaceWithNamespace {\n    /// @custom:storage-location erc7201:example.main\n    struct MainStorage {\n        uint256 x;\n        uint256 y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Contracts and Functions in Solidity\nDESCRIPTION: This snippet demonstrates importing specific elements from another Solidity file and defining an abstract contract. It shows how to use imported constants, functions, and custom errors in a new contract context.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_13\n\nLANGUAGE: Solidity\nCODE:\n```\nimport {CONSTANT_USING_SELECTOR, plusTwo, plusThree, CustomErrorOutsideContract} from \"./NamespacedToModify.sol\";\n\nabstract contract Example {}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Single Namespace Layout in JavaScript\nDESCRIPTION: This snapshot test verifies the layout of a single namespace 'erc7201:example.main' with two uint256 variables 'x' and 'y' in the 'Example' contract.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseSlot\": undefined,\n  \"namespaces\": [\n    [\n      \"erc7201:example.main\",\n      [\n        {\n          \"contract\": \"Example\",\n          \"label\": \"x\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        },\n        {\n          \"contract\": \"Example\",\n          \"label\": \"y\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        }\n      ]\n    ]\n  ],\n  \"storage\": [],\n  \"types\": [\n    [\n      \"t_uint256\",\n      {\n        \"label\": \"uint256\",\n        \"members\": undefined\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Gap: Inserting Variable and Shrinking Only First Gap in Solidity\nDESCRIPTION: This snippet demonstrates the output when a variable is inserted with custom gaps, and only the first gap is shrunk. It suggests adjusting the size of the second gap part.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Layout changed for `__gap_part2` (uint256[23] -> uint256[23])\n  - Slot changed from 27 to 29\n  > Set __gap_part2 array to size 21\n```\n\n----------------------------------------\n\nTITLE: Defining Contracts with Special Functions in Solidity\nDESCRIPTION: This snippet defines abstract contracts 'DeploysContractToImmutable' and 'HasSpecialFunctions' demonstrating the use of special functions like constructors and payable functions, along with their function selectors.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_10\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract DeploysContractToImmutable {\n    enum $astId_id_random { dummy }\n}\n\nabstract contract HasSpecialFunctions {\n    \n    \n    enum $astId_id_random { dummy }\n\n    enum $astId_id_random { dummy }\n\n    // Regular function but payable\n    function hasPayable() virtual  public payable ;\n\n    bytes4 constant PAYABLE_SELECTOR = this.hasPayable.selector;\n}\n```\n\n----------------------------------------\n\nTITLE: Solidity Storage Layout Configuration\nDESCRIPTION: Detailed storage layout configuration showing memory slots, offsets, and type definitions for complex data structures including mappings, structs, and primitive types. Includes byte sizes and member definitions for each type.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  slot: '1',\n  type: 't_mapping(t_string_memory_ptr,t_enum(MyEnum))',\n},\n{\n  label: 'other_struct',\n  offset: 0,\n  slot: '2',\n  type: 't_struct(MyStruct)storage',\n},\n],\nnumberOfBytes: '160',\n},\n],\n[\n't_struct(MyStruct)storage',\n{\n  label: 'struct Storage2.MyStruct',\n  members: [\n    {\n      label: 'struct_uint256',\n      offset: 0,\n      slot: '0',\n      type: 't_uint256',\n    },\n    {\n      label: 'struct_string',\n      offset: 0,\n      slot: '1',\n      type: 't_string_storage',\n    },\n    {\n      label: 'struct_address',\n      offset: 0,\n      slot: '2',\n      type: 't_address',\n    },\n  ],\n  numberOfBytes: '96',\n},\n],\n[\n't_uint256',\n{\n  label: 'uint256',\n  members: undefined,\n  numberOfBytes: '32',\n},\n],\n[\n't_uint8',\n{\n  label: 'uint8',\n  members: undefined,\n  numberOfBytes: '1',\n},\n],\n],\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Namespaced Storage Layout in TypeScript\nDESCRIPTION: This snapshot test verifies the storage layout of a namespaced contract 'Example'. It includes details about the namespace, storage variables, and type definitions.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-layout.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [\n    [\n      'erc7201:example.main',\n      [\n        {\n          contract: 'Example',\n          label: 'x',\n          offset: 0,\n          slot: '0',\n          src: 'contracts/test/Namespaced.sol:7',\n          type: 't_uint256',\n        },\n        {\n          contract: 'Example',\n          label: 'y',\n          offset: 0,\n          slot: '1',\n          src: 'contracts/test/Namespaced.sol:8',\n          type: 't_uint256',\n        },\n      ],\n    ],\n  ],\n  storage: [],\n  types: [\n    [\n      't_struct(MainStorage)storage',\n      {\n        label: 'struct Example.MainStorage',\n        members: [\n          {\n            label: 'x',\n            offset: 0,\n            slot: '0',\n            type: 't_uint256',\n          },\n          {\n            label: 'y',\n            offset: 0,\n            slot: '1',\n            type: 't_uint256',\n          },\n        ],\n        numberOfBytes: '64',\n      },\n    ],\n    [\n      't_uint256',\n      {\n        label: 'uint256',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contracts and Libraries with Required Returns in Solidity\nDESCRIPTION: This snippet defines an abstract contract 'HasFunctionWithRequiredReturn' and a library 'LibWithRequiredReturn', both demonstrating the use of structs and functions with specific return requirements.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_7\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract HasFunctionWithRequiredReturn {\n    struct S { uint x; }\n    enum $astId_id_random { dummy }\n    function foo(S calldata s) virtual  internal pure  returns (S calldata) ;\n}\n\nlibrary LibWithRequiredReturn {\n    struct S { uint x; }\n    enum $astId_id_random { dummy }\n    function foo(S calldata s)  internal pure returns (bool) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type Definitions for Solidity Contract in JavaScript\nDESCRIPTION: This code snippet defines the storage type information for function types in a Solidity contract. It includes various internal function signatures with different parameter types and return values, specifying their memory layout characteristics for storage validation.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  't_array(t_function_internal_nonpayable(t_string_memory_ptr,t_string_memory_ptr)returns())dyn_storage',\n  {\n    label: 'function (string,string)[]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_array(t_function_internal_nonpayable(t_uint256)returns(t_address))10_storage',\n  {\n    label: 'function (uint256) returns (address)[10]',\n    members: undefined,\n    numberOfBytes: '96',\n  },\n],\n[\n  't_function_internal_nonpayable(t_bool)returns()',\n  {\n    label: 'function (bool)',\n    members: undefined,\n    numberOfBytes: '8',\n  },\n],\n[\n  't_function_internal_nonpayable(t_string_memory_ptr,t_string_memory_ptr)returns()',\n  {\n    label: 'function (string,string)',\n    members: undefined,\n    numberOfBytes: '8',\n  },\n],\n[\n  't_function_internal_nonpayable(t_uint256)returns()',\n  {\n    label: 'function (uint256)',\n    members: undefined,\n    numberOfBytes: '8',\n  },\n],\n[\n  't_function_internal_nonpayable(t_uint256)returns(t_address)',\n  {\n    label: 'function (uint256) returns (address)',\n    members: undefined,\n    numberOfBytes: '8',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Validating Contract Upgrades with References to Other Build Info Directories\nDESCRIPTION: This snippet shows the output of validating contract upgrades where the new version references a different build info directory. It demonstrates a failed validation due to deleted variables and incompatible storage gap changes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/ValidateBuildInfoV2_Bad.sol:MyContract (upgrades from build-info-v1:contracts/test/cli/ValidateBuildInfoV1.sol:MyContract)\n\n      MyContract: Deleted `y`\n        > Keep the variable even if unused\n      \n      contracts/test/cli/ValidateBuildInfoV2_Bad.sol:6: Upgraded `__gap` to an incompatible type\n        - Bad storage gap resize from 48 to 49\n          Size cannot increase\n\nFAILED\n\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Defining Enums, Constants, and Structs with ERC-7201 Namespacing in Solidity\nDESCRIPTION: This snippet defines free enums, constants, and an abstract contract 'StructArrayUsesConstant' demonstrating the use of constants in struct definitions and ERC-7201 namespaced storage.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\nenum FreeEnum { MyEnum }\n\n\nenum CustomErrorOutsideContract { dummy }\n\nint8 constant MAX_SIZE_C = 2;\n\nabstract contract StructArrayUsesConstant {\n  uint16 private constant MAX_SIZE = 10;\n\n  struct NotNamespaced {\n    uint16 a;\n    uint256[MAX_SIZE] b;\n    uint256[MAX_SIZE_C] c;\n  }\n\n  /// @custom:storage-location erc7201:uses.constant\n  struct MainStorage {\n    uint256 x;\n    uint256[MAX_SIZE] y;\n    uint256[MAX_SIZE_C] c;\n  } MainStorage $MainStorage_random;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MyComplexStruct Structure for Solidity Contract in JavaScript\nDESCRIPTION: This code snippet shows the beginning of a structure definition for a complex struct named MyComplexStruct in the Storage2 contract. It contains members with their corresponding offsets, slots, and types, which is used for storage layout validation during upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  't_struct(MyComplexStruct)storage',\n  {\n    label: 'struct Storage2.MyComplexStruct',\n    members: [\n      {\n        label: 'uint256_dynarray',\n        offset: 0,\n        slot: '0',\n        type: 't_array(t_uint256)dyn_storage',\n      },\n      {\n        label: 'mapping_enums',\n        offset: 0,\n        slot: '1',\n        type: 't_mapping(t_uint256,t_enum(MyEnum))',\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: CustomLayout with Namespace Storage Snapshot\nDESCRIPTION: Snapshot test showing the storage layout for a contract with both custom layout and ERC-7201 namespaces, demonstrating how they coexist with a complex storage slot calculation.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: '0x183a6125c38840424c4a85fa12bab2ab606c4b6d0e7cc73c0c06ba5300eab500',\n  namespaces: [\n    [\n      'example.main',\n      [\n        {\n          contract: 'CustomLayout_No_Namespace_Formula',\n          label: 'x',\n          src: 'file.sol:1',\n          type: 't_uint256',\n        },\n        {\n          contract: 'CustomLayout_No_Namespace_Formula',\n          label: 'y',\n          src: 'file.sol:1',\n          type: 't_uint256',\n        },\n      ],\n    ],\n  ],\n  storage: [\n    {\n      contract: 'CustomLayout_No_Namespace_Formula',\n      label: 'a',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '10958655983261152271848436692291137275443024275653522991983264966744321209600',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n  ],\n  types: [\n    [\n      't_uint256',\n      {\n        label: 'uint256',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Library with ERC-7201 Namespaced Storage Structure in Solidity\nDESCRIPTION: Demonstrates a library with a storage structure marked with a custom storage location annotation. Note that this is not considered a true namespace according to ERC-7201 because the namespaced struct is outside of a contract.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_15\n\nLANGUAGE: Solidity\nCODE:\n```\nlibrary LibraryWithNamespace {\n    /// @custom:storage-location erc7201:example.main\n    struct MainStorage {\n        uint256 x;\n        uint256 y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Variable Without Shrinking Gap in Solidity\nDESCRIPTION: This snippet shows the expected output when a variable is inserted without shrinking the storage gap. It suggests adjusting the __gap array size.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage/report-gap.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfile.sol:1: Layout changed for `__gap` (uint256[48] -> uint256[48])\n  - Slot changed from 2 to 3\n  > Set __gap array to size 47\n```\n\n----------------------------------------\n\nTITLE: Defining Library and Interface with ERC-7201 Namespaced Storage in Solidity\nDESCRIPTION: This snippet defines a library 'LibraryWithNamespace' and an interface 'InterfaceWithNamespace', both demonstrating the use of ERC-7201 namespaced storage structures.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_11\n\nLANGUAGE: Solidity\nCODE:\n```\nlibrary LibraryWithNamespace {\n    /// @custom:storage-location erc7201:example.main\n    struct MainStorage {\n        uint256 x;\n        uint256 y;\n    }\n}\n\ninterface InterfaceWithNamespace {\n    /// @custom:storage-location erc7201:example.main\n    struct MainStorage {\n        uint256 x;\n        uint256 y;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contracts and Functions with Selectors in Solidity\nDESCRIPTION: This snippet defines an abstract contract 'HasConstantWithSelector' using a function selector as a constant. It also includes free functions and demonstrates the use of function overloading.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract HasConstantWithSelector {\n  bytes4 constant CONTRACT_CONSTANT_USING_SELECTOR = HasFunction.foo.selector;\n}\n\nfunction plusTwo(uint x) pure returns (bool) {}\n\n\n\n\nfunction plusThree(uint x) pure returns (bool) {}\n\n\n\n\nfunction plusThree(uint x, uint y) pure returns (bool) {}\n\nfunction originallyNoDocumentation() pure {}\n\n\nenum $astId_id_random { dummy }\n```\n\n----------------------------------------\n\nTITLE: Rejecting Multiple Unsafe Operations in Solidity Contract\nDESCRIPTION: This test case validates that the CLI correctly identifies and rejects a contract with multiple unsafe operations, including delegatecall and selfdestruct.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:MultipleUnsafe\n\n    contracts/test/cli/Validate.sol:53: Use of delegatecall is not allowed\n        https://zpl.in/upgrades/error-002\n    \n    contracts/test/cli/Validate.sol:58: Use of delegatecall is not allowed\n        https://zpl.in/upgrades/error-002\n    \n    contracts/test/cli/Validate.sol:44: Use of selfdestruct is not allowed\n        https://zpl.in/upgrades/error-003`\n```\n\n----------------------------------------\n\nTITLE: Validating Namespace Deletion in JavaScript\nDESCRIPTION: This snapshot test validates the error message when a variable is deleted from a namespace. It ensures that the system recommends keeping unused variables for compatibility.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\nExample: Deleted \\`x\\`\n  > Keep the variable even if unused`\n```\n\n----------------------------------------\n\nTITLE: Validation Output with Mixed Pass/Fail Results\nDESCRIPTION: Console output showing both passing and failing contract validations. One contract fails due to missing required UUPS upgrade functions while another contract passes all validation checks.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/project-report.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n ✘  mypath/MyContract.sol:MyContract1␊\n␊\n      MyContract.sol:10: Implementation is missing a public `upgradeTo(address)` or `upgradeToAndCall(address,bytes)` function␊\n          Inherit UUPSUpgradeable to include one or both of these functions in your contract␊\n          @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol␊\n          https://zpl.in/upgrades/error-008␊\n␊\n ✔  mypath/MyContract.sol:MyContract2␊\n␊\nFAILED (2 upgradeable contracts detected, 1 passed, 1 failed)\n```\n\n----------------------------------------\n\nTITLE: Defining Constants and Contracts with Address Conversions in Solidity\nDESCRIPTION: This snippet defines constants for addresses and their uint160 conversions. It also includes an interface 'IDummy' and an abstract contract 'UsesAddress' demonstrating the use of address constants in contract instantiation.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\naddress constant MY_ADDRESS = address(0);\nuint constant CONVERTED_ADDRESS = uint160(MY_ADDRESS);\n\ninterface IDummy {\n}\n\nabstract contract UsesAddress {\n  IDummy public constant MY_CONTRACT = IDummy(MY_ADDRESS);\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Missing UUPS Upgrade Functions\nDESCRIPTION: This test case ensures that the CLI detects and rejects a contract that is missing the required UUPS upgrade functions (upgradeTo or upgradeToAndCall).\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validations.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Validate.sol:UpgradesFromUUPS (upgrades from contracts/test/cli/Validate.sol:HasUpgradeTo)\n\n    contracts/test/cli/Validate.sol:72: Implementation is missing a public \\`upgradeTo(address)\\` or \\`upgradeToAndCall(address,bytes)\\` function\n        Inherit UUPSUpgradeable to include one or both of these functions in your contract\n        @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\n        https://zpl.in/upgrades/error-008`\n```\n\n----------------------------------------\n\nTITLE: Validating With References to External Build Info Directory Using Fully Qualified Names\nDESCRIPTION: Output when validating a contract that refers to a contract in a different build info directory using fully qualified names and command-line syntax.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nstderr: '',\nstdout: ` ✔  contracts/test/cli/ValidateBuildInfoV2_Ok.sol:MyContract (upgrades from build-info-v1:contracts/test/cli/ValidateBuildInfoV1.sol:MyContract)␊\n␊\nSUCCESS␊\n`\n```\n\n----------------------------------------\n\nTITLE: Parsing Storage Struct Type ID\nDESCRIPTION: Test snapshot for parsing a struct type identifier with storage location. Shows parsing of t_struct(MyComplexStruct)storage format.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/parse-type-id.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": [\n    {\n      \"args\": undefined,\n      \"head\": \"MyComplexStruct\",\n      \"id\": \"MyComplexStruct\",\n      \"rets\": undefined,\n      \"tail\": undefined,\n    },\n  ],\n  \"head\": \"t_struct\",\n  \"id\": \"t_struct(MyComplexStruct)storage\",\n  \"rets\": undefined,\n  \"tail\": \"storage\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout for a Solidity Contract\nDESCRIPTION: A JSON representation of the storage layout for a Solidity smart contract named Storage2. It shows how various types of variables are organized in storage slots with their respective offsets, types, and other metadata. This layout is essential for contract upgrades to ensure storage compatibility.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Storage2',\n      label: 'my_public_uint256',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_internal_string',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_string_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_uint8',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '2',\n      src: 'file.sol:1',\n      type: 't_uint8',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_uint16',\n      offset: 1,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '2',\n      src: 'file.sol:1',\n      type: 't_int8',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_bool',\n      offset: 2,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '2',\n      src: 'file.sol:1',\n      type: 't_bool',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_uint',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '3',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_address',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '4',\n      src: 'file.sol:1',\n      type: 't_address',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_bytes',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '5',\n      src: 'file.sol:1',\n      type: 't_bytes_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_bytes8',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '6',\n      src: 'file.sol:1',\n      type: 't_bytes8',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_bytes32',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '7',\n      src: 'file.sol:1',\n      type: 't_bytes32',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_public_uint256_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '8',\n      src: 'file.sol:1',\n      type: 't_array(t_uint256)dyn_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_internal_string_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '9',\n      src: 'file.sol:1',\n      type: 't_array(t_string_storage)dyn_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_address_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '10',\n      src: 'file.sol:1',\n      type: 't_array(t_address)dyn_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_public_int8_staticarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '11',\n      src: 'file.sol:1',\n      type: 't_array(t_int8)10_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_internal_bool_staticarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '12',\n      src: 'file.sol:1',\n      type: 't_array(t_bool)20_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_private_uint_staticarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '13',\n      src: 'file.sol:1',\n      type: 't_array(t_uint256)30_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '43',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_string_storage)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_nested_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '44',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_address))',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_mapping_with_arrays',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '45',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_array(t_bool)dyn_storage)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_fun',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '46',\n      src: 'file.sol:1',\n      type: 't_function_internal_nonpayable(t_uint256)returns()',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_fun_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '47',\n      src: 'file.sol:1',\n      type: 't_array(t_function_internal_nonpayable(t_string_memory_ptr,t_string_memory_ptr)returns())dyn_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_fun_staticarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '48',\n      src: 'file.sol:1',\n      type: 't_array(t_function_internal_nonpayable(t_uint256)returns(t_address))10_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_fun_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '51',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_function_internal_nonpayable(t_bool)returns())',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_contract',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '52',\n      src: 'file.sol:1',\n      type: 't_contract(Storage2)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_contract_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '53',\n      src: 'file.sol:1',\n      type: 't_array(t_contract(Storage2))dyn_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_contract_staticarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '54',\n      src: 'file.sol:1',\n      type: 't_array(t_contract(Storage2))10_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_contract_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '64',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_contract(Storage2))',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_contract_dynarray_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '65',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_array(t_contract(Storage2))dyn_storage)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_contract_staticarray_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '66',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_array(t_contract(Storage2))10_storage)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_struct',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '67',\n      src: 'file.sol:1',\n      type: 't_struct(MyStruct)storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_struct_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '70',\n      src: 'file.sol:1',\n      type: 't_array(t_struct(MyStruct)storage)dyn_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_struct_staticarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '71',\n      src: 'file.sol:1',\n      type: 't_array(t_struct(MyStruct)storage)10_storage',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_struct_mapping',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '101',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_struct(MyStruct)storage)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_enum',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '102',\n      src: 'file.sol:1',\n      type: 't_enum(MyEnum)',\n    },\n    {\n      contract: 'Storage2',\n      label: 'my_enum_dynarray',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '103',\n      src: 'file.sol:1',\n      type: 't_array(t_enum(MyEnum))dyn_storage'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Bad Upgrade from Solidity 0.8.8 to 0.8.9 in TypeScript\nDESCRIPTION: This snapshot test checks for incompatible upgrades between Solidity versions 0.8.8 and 0.8.9. It specifically focuses on detecting changes in type representations that may cause upgrade failures.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/validate/validate-upgrade-safety.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n` ✘  contracts/test/cli/Storage089.sol:Storage089 (upgrades from contracts/test/cli/Storage088.sol:Storage088)␊\n\n      contracts/test/cli/Storage089.sol:9: Upgraded \\`my_user_value\\` to an incompatible type␊\n        - Bad upgrade from Storage088.MyUserValueType to Storage089.MyUserValueType␊\n          Different representation sizes␊\n\nFAILED (1 upgradeable contract detected, 0 passed, 1 failed)`\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Multiple Namespaces Layout in JavaScript\nDESCRIPTION: This snapshot test verifies the layout of multiple namespaces 'erc7201:one' and 'erc7201:two', each containing a single variable 'a' of different types in the 'MultipleNamespaces' contract.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseSlot\": undefined,\n  \"namespaces\": [\n    [\n      \"erc7201:one\",\n      [\n        {\n          \"contract\": \"MultipleNamespaces\",\n          \"label\": \"a\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint256\"\n        }\n      ]\n    ],\n    [\n      \"erc7201:two\",\n      [\n        {\n          \"contract\": \"MultipleNamespaces\",\n          \"label\": \"a\",\n          \"src\": \"file.sol:1\",\n          \"type\": \"t_uint128\"\n        }\n      ]\n    ]\n  ],\n  \"storage\": [],\n  \"types\": [\n    [\n      \"t_uint256\",\n      {\n        \"label\": \"uint256\",\n        \"members\": undefined\n      }\n    ],\n    [\n      \"t_uint128\",\n      {\n        \"label\": \"uint128\",\n        \"members\": undefined\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Enum Type ID\nDESCRIPTION: Test snapshot for parsing an enum type identifier with a single argument. Demonstrates parsing of t_enum(MyEnum) format.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/parse-type-id.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": [\n    {\n      \"args\": undefined,\n      \"head\": \"MyEnum\",\n      \"id\": \"MyEnum\",\n      \"rets\": undefined,\n      \"tail\": undefined,\n    },\n  ],\n  \"head\": \"t_enum\",\n  \"id\": \"t_enum(MyEnum)\",\n  \"rets\": undefined,\n  \"tail\": undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Single Non-Upgradeable Contract\nDESCRIPTION: Output of the validate command when checking a single contract that contains unsafe operations like selfdestruct, making it non-upgradeable.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:NonUpgradeable␊\n␊\n      contracts/test/cli/Validate.sol:14: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Defining Storage Layout Objects for Solidity Contract in JavaScript\nDESCRIPTION: This code snippet defines the storage layout for a Solidity contract named Storage2. It includes various storage slot definitions with different data types such as enums, structs, arrays, and mappings. This information is used by OpenZeppelin Upgrades to verify storage layout compatibility during contract upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  contract: 'Storage2',\n  label: 'my_enum_staticarray',\n  offset: 0,\n  renamedFrom: undefined,\n  retypedFrom: undefined,\n  slot: '104',\n  src: 'file.sol:1',\n  type: 't_array(t_enum(MyEnum))10_storage',\n},\n{\n  contract: 'Storage2',\n  label: 'my_enum_mapping',\n  offset: 0,\n  renamedFrom: undefined,\n  retypedFrom: undefined,\n  slot: '105',\n  src: 'file.sol:1',\n  type: 't_mapping(t_uint256,t_enum(MyEnum))',\n},\n{\n  contract: 'Storage2',\n  label: 'my_complex_struct',\n  offset: 0,\n  renamedFrom: undefined,\n  retypedFrom: undefined,\n  slot: '106',\n  src: 'file.sol:1',\n  type: 't_struct(MyComplexStruct)storage',\n},\n{\n  contract: 'Storage2',\n  label: 'my_other_struct',\n  offset: 0,\n  renamedFrom: undefined,\n  retypedFrom: undefined,\n  slot: '111',\n  src: 'file.sol:1',\n  type: 't_struct(MyStruct)storage',\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Fixed Array Type ID\nDESCRIPTION: Test snapshot for parsing a fixed-size array type identifier with storage location. Demonstrates parsing of t_array(t_uint256)3_storage format.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/parse-type-id.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": [\n    {\n      \"args\": undefined,\n      \"head\": \"t_uint256\",\n      \"id\": \"t_uint256\",\n      \"rets\": undefined,\n      \"tail\": undefined,\n    },\n  ],\n  \"head\": \"t_array\",\n  \"id\": \"t_array(t_uint256)3_storage\",\n  \"rets\": undefined,\n  \"tail\": \"3_storage\",\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Contract with Storage Layout Errors and Unsafe Operations\nDESCRIPTION: Output of validating a contract that has both selfdestruct usage and storage layout errors when compared to its predecessor contract.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:UnsafeAndStorageLayoutErrors (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n␊\n      contracts/test/cli/Validate.sol:97: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\n      contracts/test/cli/Validate.sol:94: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])␊\n        - Slot changed from 1 to 2␊\n        > Set __gap array to size 48␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type for Solidity Contract in JavaScript\nDESCRIPTION: This code snippet defines a Solidity enum type named MyEnum with two states (State1 and State2). It includes metadata about the enum's byte size and member values that's used for storage layout validation during contract upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  't_enum(MyEnum)',\n  {\n    label: 'enum Storage2.MyEnum',\n    members: [\n      'State1',\n      'State2',\n    ],\n    numberOfBytes: '1',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: CustomLayout Fallback Storage Snapshot\nDESCRIPTION: Snapshot test for the fallback behavior of a CustomLayout contract, showing simplified storage representation without detailed offset information.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: '0x1',\n  namespaces: [],\n  storage: [\n    {\n      contract: 'CustomLayout',\n      label: 'y',\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n  ],\n  types: [\n    [\n      't_uint256',\n      {\n        label: 'uint256',\n        members: undefined,\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Contract with Override of upgrades-from\nDESCRIPTION: Output when validating a contract with selfdestruct issues while overriding the reference contract to a safe one via upgrades-from parameter.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:UnsafeAndStorageLayoutErrors (upgrades from contracts/test/cli/Validate.sol:Safe)␊\n␊\n      contracts/test/cli/Validate.sol:97: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Validating With References to External Build Info Directory\nDESCRIPTION: Output when validating a contract that refers to a contract in a different build info directory using the command-line syntax.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nstderr: '',\nstdout: ` ✔  contracts/test/cli/ValidateBuildInfoV2_Ok.sol:MyContract (upgrades from build-info-v1:contracts/test/cli/ValidateBuildInfoV1.sol:MyContract)␊\n␊\nSUCCESS␊\n`\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Mapping Types for Solidity Contract in JavaScript\nDESCRIPTION: This code snippet defines various mapping types used in the Storage2 contract, including nested mappings and mappings to complex data types like arrays, contracts, and structs. Each mapping definition includes type information necessary for storage layout validation.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  't_mapping(t_string_memory_ptr,t_address)',\n  {\n    label: 'mapping(string => address)',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_string_memory_ptr,t_enum(MyEnum))',\n  {\n    label: 'mapping(string => enum Storage2.MyEnum)',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_array(t_bool)dyn_storage)',\n  {\n    label: 'mapping(uint256 => bool[])',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_array(t_contract(Storage2))10_storage)',\n  {\n    label: 'mapping(uint256 => contract Storage2[10])',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_array(t_contract(Storage2))dyn_storage)',\n  {\n    label: 'mapping(uint256 => contract Storage2[])',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_contract(Storage2))',\n  {\n    label: 'mapping(uint256 => contract Storage2)',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_enum(MyEnum))',\n  {\n    label: 'mapping(uint256 => enum Storage2.MyEnum)',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_function_internal_nonpayable(t_bool)returns())',\n  {\n    label: 'mapping(uint256 => function (bool))',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_address))',\n  {\n    label: 'mapping(uint256 => mapping(string => address))',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_string_storage)',\n  {\n    label: 'mapping(uint256 => string)',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_mapping(t_uint256,t_struct(MyStruct)storage)',\n  {\n    label: 'mapping(uint256 => struct Storage2.MyStruct)',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Producing Network Export Data in JSON\nDESCRIPTION: A snapshot test showing the network export data generated by the migration script. It organizes proxy information by network (rinkeby) and project (my-project/Box), including address, admin, implementation, kind, and version details.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/scripts/migrate-oz-cli-project.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  rinkeby: {\n    proxies: {\n      'my-project/Box': [\n        {\n          address: '0xE4C10Db67595aF2Cb4166c8C274e0140f7E43059',\n          admin: '0x1750499D05Ed1674d822430FB960d5F6731fDf64',\n          implementation: '0xb682dEEf4f8e298d86bFc3e21f50c675151FB974',\n          kind: 'Upgradeable',\n          version: '1.0.0',\n        },\n      ],\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Contract with UUPS Implementation Issues\nDESCRIPTION: Output when validating a contract that should implement UUPS upgrade functions but fails to do so when compared to its predecessor.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:BecomesBadLayout (upgrades from contracts/test/cli/Validate.sol:HasUpgradeTo)␊\n␊\n      contracts/test/cli/Validate.sol:111: Implementation is missing a public \\`upgradeTo(address)\\` or \\`upgradeToAndCall(address,bytes)\\` function␊\n          Inherit UUPSUpgradeable to include one or both of these functions in your contract␊\n          @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol␊\n          https://zpl.in/upgrades/error-008␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Help Command Output for OpenZeppelin Upgrades CLI\nDESCRIPTION: This snippet displays the help text output for the OpenZeppelin Upgrades CLI, showing the command syntax, purpose, arguments, and all available options for validating upgradeable contracts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: npx @openzeppelin/upgrades-core validate [<BUILD_INFO_DIR>] [<OPTIONS>]\n\nDetects upgradeable contracts from a build info directory and validates whether they are upgrade safe.\n\nArguments:\n  <BUILD_INFO_DIR>  Optional path to the build info directory which contains JSON files with Solidity compiler input and output. Defaults to 'artifacts/build-info' for Hardhat projects or 'out/build-info' for Foundry projects. If your project uses a custom output directory, you must specify its build info directory here.\n\nOptions:\n  --contract <CONTRACT>  The name or fully qualified name of the contract to validate. If not specified, all upgradeable contracts in the build info directory will be validated.\n  --reference <REFERENCE_CONTRACT>  Can only be used when the --contract option is also provided. The name or fully qualified name of the reference contract to use for storage layout comparisons. If not specified, uses the @custom:oz-upgrades-from annotation if it is defined in the contract that is being validated.\n  --requireReference  Can only be used when the --contract option is also provided. Not compatible with --unsafeSkipStorageCheck. If specified, requires either the --reference option to be provided or the contract to have a @custom:oz-upgrades-from annotation.\n  --referenceBuildInfoDirs \"<BUILD_INFO_DIR>[,<BUILD_INFO_DIR>...]\"  Optional paths of additional build info directories from previous versions of the project to use for storage layout comparisons. When using this option, refer to one of these directories using prefix '<dirName>:' before the contract name or fully qualified name in the --reference option or @custom:oz-upgrades-from annotation, where <dirName> is the directory short name. Each directory short name must be unique, including compared to the main build info directory. If passing in multiple directories, separate them with commas or call the option multiple times, once for each directory.\n  --exclude \"<GLOB_PATTERN>\" [--exclude \"<GLOB_PATTERN>\"...]  Exclude validations for contracts in source file paths that match any of the given glob patterns. For example, --exclude \"contracts/mocks/**/*.sol\". Does not apply to reference contracts. If passing in multiple patterns, call the option multiple times, once for each pattern.\n  --unsafeAllow \"<VALIDATION_ERROR>[,<VALIDATION_ERROR>...]\"  Selectively disable one or more validation errors or warnings. Comma-separated list with one or more of the following:\n      Errors: state-variable-assignment, state-variable-immutable, external-library-linking, struct-definition, enum-definition, constructor, delegatecall, selfdestruct, missing-public-upgradeto, internal-function-storage, missing-initializer, missing-initializer-call, duplicate-initializer-call\n      Warnings: incorrect-initializer-order\n  --unsafeAllowRenames  Configure storage layout check to allow variable renaming.\n  --unsafeSkipStorageCheck  Skips checking for storage layout compatibility errors. This is a dangerous option meant to be used as a last resort.\n```\n\n----------------------------------------\n\nTITLE: User Defined Value Types Storage Layout for Solidity 0.8.9\nDESCRIPTION: JSON representation of the storage layout extraction for a contract with user-defined value types in Solidity 0.8.9. Shows the storage structure with a user-defined value type 'MyUserValueType' based on uint128 that takes 16 bytes of storage.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-0.8.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Storage089',\n      label: 'my_user_value',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_userDefinedValueType(MyUserValueType)',\n    },\n  ],\n  types: [\n    [\n      't_userDefinedValueType(MyUserValueType)',\n      {\n        label: 'Storage089.MyUserValueType',\n        members: undefined,\n        numberOfBytes: '16',\n        underlying: 't_uint128',\n      },\n    ],\n    [\n      't_uint128',\n      {\n        label: 'uint128',\n        members: undefined,\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: User Defined Value Types Without Layout Information\nDESCRIPTION: JSON representation of a storage layout extraction for a contract with user-defined value types, where certain layout information (slot and offset) is missing. This demonstrates how the system handles incomplete layout information cases.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-0.8.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Storage089',\n      label: 'my_user_value',\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      src: 'file.sol:1',\n      type: 't_userDefinedValueType(MyUserValueType)',\n    },\n  ],\n  types: [\n    [\n      't_userDefinedValueType(MyUserValueType)',\n      {\n        label: 'Storage089.MyUserValueType',\n        members: undefined,\n        underlying: 't_uint128',\n      },\n    ],\n    [\n      't_uint128',\n      {\n        label: 'uint128',\n        members: undefined,\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Contract with Storage Gap Issues\nDESCRIPTION: Output when validating a contract that has storage layout changes specifically related to the __gap array size or position.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:StorageV2_Bad_NoAnnotation (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n␊\n      contracts/test/cli/Validate.sol:147: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])␊\n        - Slot changed from 1 to 2␊\n        > Set __gap array to size 48␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Excluding Contracts by Pattern in Validation\nDESCRIPTION: This snippet demonstrates the use of exclusion patterns in the validate command. It shows cases where no contracts match the exclusion pattern, some contracts match, and all contracts match, resulting in different validation outcomes.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/excludes/UsesAbstractUUPS.sol:UsesAbstractUUPS\n\n      contracts/test/cli/excludes/UsesAbstractUUPS.sol:9: Contract `UsesAbstractUUPS` has a constructor\n          Define an initializer instead\n          https://zpl.in/upgrades/error-001\n\nFAILED (1 upgradeable contract detected, 0 passed, 1 failed)\n\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Storage Layout Snapshot for Solidity 0.8.9\nDESCRIPTION: This snapshot shows the storage layout for a contract using memory types in Solidity 0.8.9. It includes mappings from memory string and bytes to address, with updated type signatures using 't_string_memory_ptr' and 't_bytes_memory_ptr' format.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-memory-0.5.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Memory08',\n      label: 'a',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_mapping(t_string_memory_ptr,t_address)',\n    },\n    {\n      contract: 'Memory08',\n      label: 'b',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_mapping(t_bytes_memory_ptr,t_address)',\n    },\n  ],\n  types: [\n    [\n      't_address',\n      {\n        label: 'address',\n        members: undefined,\n        numberOfBytes: '20',\n      },\n    ],\n    [\n      't_bytes_memory_ptr',\n      {\n        label: 'bytes',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_mapping(t_bytes_memory_ptr,t_address)',\n      {\n        label: 'mapping(bytes => address)',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_mapping(t_string_memory_ptr,t_address)',\n      {\n        label: 'mapping(string => address)',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_string_memory_ptr',\n      {\n        label: 'string',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_string_storage',\n      {\n        label: 'string',\n        members: undefined,\n      },\n    ],\n    [\n      't_bytes_storage',\n      {\n        label: 'bytes',\n        members: undefined,\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a Single Valid Upgradeable Contract\nDESCRIPTION: Output when validating a single contract that properly follows all upgrade safety rules.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n ✔  contracts/test/cli/Annotation.sol:Annotation␊\n␊\nSUCCESS␊\n```\n\n----------------------------------------\n\nTITLE: Validating with Default Exclusion of UpgradeableBeacon\nDESCRIPTION: This snippet shows the validation process with the default exclusion of UpgradeableBeacon and its parent contracts. It demonstrates how certain contracts are still validated while others are excluded.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/excludes/V2Bad1.sol:V2Bad1 (upgrades from contracts/test/cli/excludes/V1.sol:V1)\n\n      V1: Deleted `x`\n        > Keep the variable even if unused\n\n ✘  contracts/test/cli/excludes/V2Bad2.sol:V2Bad2 (upgrades from contracts/test/cli/excludes/V1.sol:V1)\n\n      V1: Deleted `x`\n        > Keep the variable even if unused\n\nFAILED (2 upgradeable contracts detected, 0 passed, 2 failed)\n\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Storage Layout Snapshot for Solidity 0.5.16\nDESCRIPTION: This snapshot shows the storage layout for a contract using memory types in Solidity 0.5.16. It includes mappings from memory string and bytes to address, with type signatures using 't_string_memory' and 't_bytes_memory' format.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-memory-0.5.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Memory05',\n      label: 'a',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_mapping(t_string_memory,t_address)',\n    },\n    {\n      contract: 'Memory05',\n      label: 'b',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_mapping(t_bytes_memory,t_address)',\n    },\n  ],\n  types: [\n    [\n      't_address',\n      {\n        label: 'address',\n        members: undefined,\n        numberOfBytes: '20',\n      },\n    ],\n    [\n      't_bytes_memory',\n      {\n        label: 'bytes',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_mapping(t_bytes_memory,t_address)',\n      {\n        label: 'mapping(bytes => address)',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_mapping(t_string_memory,t_address)',\n      {\n        label: 'mapping(string => address)',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_string_memory',\n      {\n        label: 'string',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_string_storage',\n      {\n        label: 'string',\n        members: undefined,\n      },\n    ],\n    [\n      't_bytes_storage',\n      {\n        label: 'bytes',\n        members: undefined,\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Fully Qualified Contract Name\nDESCRIPTION: Output when validating a contract using its fully qualified name to resolve ambiguity when multiple contracts with the same name exist.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n ✔  contracts/test/ValidationsSameNameSafe.sol:SameName␊\n␊\nSUCCESS␊\n```\n\n----------------------------------------\n\nTITLE: Defining Type Definitions for Solidity Storage Types in JavaScript\nDESCRIPTION: This code snippet defines a collection of type definitions for various Solidity data types including primitives, arrays, mappings, and structs. Each type definition includes information about labels, members, and byte sizes that are essential for storage layout validation during contract upgrades.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  't_address',\n  {\n    label: 'address',\n    members: undefined,\n    numberOfBytes: '20',\n  },\n],\n[\n  't_array(t_address)dyn_storage',\n  {\n    label: 'address[]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_array(t_bool)20_storage',\n  {\n    label: 'bool[20]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_array(t_bool)dyn_storage',\n  {\n    label: 'bool[]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_array(t_contract(Storage2))10_storage',\n  {\n    label: 'contract Storage2[10]',\n    members: undefined,\n    numberOfBytes: '320',\n  },\n],\n[\n  't_array(t_contract(Storage2))dyn_storage',\n  {\n    label: 'contract Storage2[]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_array(t_enum(MyEnum))10_storage',\n  {\n    label: 'enum Storage2.MyEnum[10]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n],\n[\n  't_array(t_enum(MyEnum))dyn_storage',\n  {\n    label: 'enum Storage2.MyEnum[]',\n    members: undefined,\n    numberOfBytes: '32',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Version history formatted in Markdown, documenting changes, updates, and breaking changes for the OpenZeppelin Upgrades plugin across multiple versions.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 3.9.0 (2025-01-13)\n\n- Update Defender SDK to v2.1.0, set Hardhat origin for Defender deployments. ([#1111](https://github.com/OpenZeppelin/openzeppelin-upgrades/pull/1111))\n```\n\n----------------------------------------\n\nTITLE: Validating with Reference to an Ambiguous Contract Name\nDESCRIPTION: Output when validating a contract that upgrades from another contract with a potentially ambiguous name, using fully qualified names to resolve ambiguity.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n ✔  contracts/test/ValidationsSameNameSafe.sol:SameName (upgrades from contracts/test/ValidationsSameNameUnsafe.sol:SameName)␊\n␊\nSUCCESS␊\n```\n\n----------------------------------------\n\nTITLE: Storage Layout Snapshot Test Output\nDESCRIPTION: Detailed storage layout analysis showing variable slots, types, and memory configuration for a Solidity contract. Includes storage slots mapping, variable types, and memory sizes for contract Storage1.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Storage1',\n      label: 'u1',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n    {\n      contract: 'Storage1',\n      label: 'a1',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_address',\n    },\n    {\n      contract: 'Storage1',\n      label: 'm1',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '2',\n      src: 'file.sol:1',\n      type: 't_mapping(t_uint256,t_uint256)',\n    },\n    {\n      contract: 'Storage1',\n      label: 'us1',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '3',\n      src: 'file.sol:1',\n      type: 't_array(t_uint256)3_storage',\n    },\n  ],\n  types: [\n    [\n      't_address',\n      {\n        label: 'address',\n        members: undefined,\n        numberOfBytes: '20',\n      },\n    ],\n    [\n      't_array(t_uint256)3_storage',\n      {\n        label: 'uint256[3]',\n        members: undefined,\n        numberOfBytes: '96',\n      },\n    ],\n    [\n      't_mapping(t_uint256,t_uint256)',\n      {\n        label: 'mapping(uint256 => uint256)',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_uint256',\n      {\n        label: 'uint256',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Renamed and Retyped Variables Storage Layout\nDESCRIPTION: JSON representation of the storage layout extraction for a contract with renamed and retyped variables. Shows how the system tracks storage variables that have been renamed or had their types changed, including slot and offset information.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-0.8.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'StorageRenamedRetyped',\n      label: 'a',\n      offset: 0,\n      renamedFrom: 'b',\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_uint256',\n    },\n    {\n      contract: 'StorageRenamedRetyped',\n      label: 'b',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: 'bool',\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_uint8',\n    },\n    {\n      contract: 'StorageRenamedRetyped',\n      label: 'c',\n      offset: 1,\n      renamedFrom: 'b',\n      retypedFrom: 'bool',\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_uint8',\n    },\n    {\n      contract: 'StorageRenamedRetyped',\n      label: 'd',\n      offset: 2,\n      renamedFrom: 'b',\n      retypedFrom: 'bool',\n      slot: '1',\n      src: 'file.sol:1',\n      type: 't_uint8',\n    },\n  ],\n  types: [\n    [\n      't_uint256',\n      {\n        label: 'uint256',\n        members: undefined,\n        numberOfBytes: '32',\n      },\n    ],\n    [\n      't_uint8',\n      {\n        label: 'uint8',\n        members: undefined,\n        numberOfBytes: '1',\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Defender API Credentials in Hardhat Configuration\nDESCRIPTION: Demonstrates how to add Defender Team API credentials to the Hardhat configuration file for authentication.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-defender-hardhat/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  defender: {\n    apiKey: process.env.API_KEY,\n    apiSecret: process.env.API_SECRET,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Validation with Build Info Directory Annotation\nDESCRIPTION: This snippet shows a successful validation where the contract references another build info directory using an annotation. The test passes without any errors.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n{\n  stderr: '',\n  stdout: ` ✔  contracts/test/cli/ValidateBuildInfoV2_Annotation_Ok.sol:MyContract (upgrades from build-info-v1:contracts/test/cli/ValidateBuildInfoV1.sol:MyContract)\n  \n  SUCCESS\n  `,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces and Contracts with Constant Getters in Solidity\nDESCRIPTION: This snippet defines interfaces and abstract contracts demonstrating the implementation and overriding of constant getter functions. It includes examples of interface implementation and function overriding.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_12\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface IHasConstantGetter {\n  function a() external view returns (bytes32);\n}\n\nabstract contract HasConstantGetter is IHasConstantGetter {\n  bytes32 public override constant a = bytes32(\"foo\");\n}\n\nabstract contract AbstractHasConstantGetter {\n  function a() virtual external pure returns (bytes32) ;\n}\n\nabstract contract HasConstantGetterOverride is AbstractHasConstantGetter {\n  bytes32 public override constant a = bytes32(\"foo\");\n}\n\nabstract contract HasFunctionOverride is AbstractHasConstantGetter {\n  function a() override virtual external pure returns (bytes32) ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Defender Plugin in TypeScript\nDESCRIPTION: Shows how to register the OpenZeppelin Hardhat Defender plugin in a TypeScript Hardhat configuration file.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-defender-hardhat/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Typescript\nimport '@openzeppelin/hardhat-defender';\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Contracts with Error Reporting\nDESCRIPTION: This code shows the output of the validate command when checking multiple contracts, some of which contain errors like using selfdestruct, delegatecall, or having improper storage layouts.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✔  contracts/test/cli/Validate.sol:Safe␊\n␊\n ✔  contracts/test/cli/Validate.sol:HasInitializer␊\n␊\n ✔  contracts/test/cli/Validate.sol:HasUpgradeTo␊\n␊\n ✘  contracts/test/cli/Validate.sol:HasUpgradeToConstructorUnsafe␊\n␊\n      contracts/test/cli/Validate.sol:33: Contract \\`HasUpgradeToConstructorUnsafe\\` has a constructor␊\n          Define an initializer instead␊\n          https://zpl.in/upgrades/error-001␊\n␊\n ✘  contracts/test/cli/Validate.sol:MultipleUnsafe␊\n␊\n      contracts/test/cli/Validate.sol:53: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:58: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:44: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\n ✘  contracts/test/cli/Validate.sol:InheritsMultipleUnsafe␊\n␊\n      contracts/test/cli/Validate.sol:53: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:58: Use of delegatecall is not allowed␊\n          https://zpl.in/upgrades/error-002␊\n      ␊\n      contracts/test/cli/Validate.sol:44: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\n ✘  contracts/test/cli/Validate.sol:UpgradesFromUUPS (upgrades from contracts/test/cli/Validate.sol:HasUpgradeTo)␊\n␊\n      contracts/test/cli/Validate.sol:72: Implementation is missing a public \\`upgradeTo(address)\\` or \\`upgradeToAndCall(address,bytes)\\` function␊\n          Inherit UUPSUpgradeable to include one or both of these functions in your contract␊\n          @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol␊\n          https://zpl.in/upgrades/error-008␊\n␊\n ✔  contracts/test/cli/Validate.sol:UpgradesFromTransparent (upgrades from contracts/test/cli/Validate.sol:HasInitializer)␊\n␊\n ✘  contracts/test/cli/Validate.sol:UnsafeAndStorageLayoutErrors (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n␊\n      contracts/test/cli/Validate.sol:97: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\n      contracts/test/cli/Validate.sol:94: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])␊\n        - Slot changed from 1 to 2␊\n        > Set __gap array to size 48␊\n␊\n ✔  contracts/test/cli/Validate.sol:BecomesSafe (upgrades from contracts/test/cli/Validate.sol:MultipleUnsafe)␊\n␊\n ✘  contracts/test/cli/Validate.sol:BecomesBadLayout (upgrades from contracts/test/cli/Validate.sol:BecomesSafe)␊\n␊\n      BecomesSafe: Deleted \\`x\\`␊\n        > Keep the variable even if unused␊\n␊\n ✘  contracts/test/cli/Validate.sol:StillUnsafe (upgrades from contracts/test/cli/Validate.sol:NonUpgradeable)␊\n␊\n      contracts/test/cli/Validate.sol:119: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\n ✔  contracts/test/cli/Validate.sol:InheritsAbstractUpgradeable␊\n␊\n ✘  contracts/test/cli/Validate.sol:BothAnnotationsUnsafe (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n␊\n      contracts/test/cli/Validate.sol:140: Use of selfdestruct is not allowed␊\n          https://zpl.in/upgrades/error-003␊\n␊\n      contracts/test/cli/Validate.sol:137: Layout changed for \\`__gap\\` (uint256[49] -> uint256[49])␊\n        - Slot changed from 1 to 2␊\n        > Set __gap array to size 48␊\n␊\nFAILED (14 upgradeable contracts detected, 6 passed, 8 failed)␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: User Defined Value Types Storage Layout for Solidity 0.8.8\nDESCRIPTION: JSON representation of the storage layout extraction for a contract with user-defined value types in Solidity 0.8.8. Shows the storage structure with a user-defined value type 'MyUserValueType' based on uint128 that takes 32 bytes of storage.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-0.8.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  baseSlot: undefined,\n  namespaces: [],\n  storage: [\n    {\n      contract: 'Storage088',\n      label: 'my_user_value',\n      offset: 0,\n      renamedFrom: undefined,\n      retypedFrom: undefined,\n      slot: '0',\n      src: 'file.sol:1',\n      type: 't_userDefinedValueType(MyUserValueType)',\n    },\n  ],\n  types: [\n    [\n      't_userDefinedValueType(MyUserValueType)',\n      {\n        label: 'Storage088.MyUserValueType',\n        members: undefined,\n        numberOfBytes: '32',\n        underlying: 't_uint128',\n      },\n    ],\n    [\n      't_uint128',\n      {\n        label: 'uint128',\n        members: undefined,\n      },\n    ],\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenZeppelin Truffle Upgrades Package\nDESCRIPTION: NPM installation command for the OpenZeppelin Truffle Upgrades package\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-truffle/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @openzeppelin/truffle-upgrades\n```\n\n----------------------------------------\n\nTITLE: No Arguments Output for OpenZeppelin Upgrades CLI\nDESCRIPTION: This snippet shows the default output when the OpenZeppelin Upgrades CLI is run without any arguments, displaying usage instructions and available options, identical to the help command output.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: npx @openzeppelin/upgrades-core validate [<BUILD_INFO_DIR>] [<OPTIONS>]\n\nDetects upgradeable contracts from a build info directory and validates whether they are upgrade safe.\n\nArguments:\n  <BUILD_INFO_DIR>  Optional path to the build info directory which contains JSON files with Solidity compiler input and output. Defaults to 'artifacts/build-info' for Hardhat projects or 'out/build-info' for Foundry projects. If your project uses a custom output directory, you must specify its build info directory here.\n\nOptions:\n  --contract <CONTRACT>  The name or fully qualified name of the contract to validate. If not specified, all upgradeable contracts in the build info directory will be validated.\n  --reference <REFERENCE_CONTRACT>  Can only be used when the --contract option is also provided. The name or fully qualified name of the reference contract to use for storage layout comparisons. If not specified, uses the @custom:oz-upgrades-from annotation if it is defined in the contract that is being validated.\n  --requireReference  Can only be used when the --contract option is also provided. Not compatible with --unsafeSkipStorageCheck. If specified, requires either the --reference option to be provided or the contract to have a @custom:oz-upgrades-from annotation.\n  --referenceBuildInfoDirs \"<BUILD_INFO_DIR>[,<BUILD_INFO_DIR>...]\"  Optional paths of additional build info directories from previous versions of the project to use for storage layout comparisons. When using this option, refer to one of these directories using prefix '<dirName>:' before the contract name or fully qualified name in the --reference option or @custom:oz-upgrades-from annotation, where <dirName> is the directory short name. Each directory short name must be unique, including compared to the main build info directory. If passing in multiple directories, separate them with commas or call the option multiple times, once for each directory.\n  --exclude \"<GLOB_PATTERN>\" [--exclude \"<GLOB_PATTERN>\"...]  Exclude validations for contracts in source file paths that match any of the given glob patterns. For example, --exclude \"contracts/mocks/**/*.sol\". Does not apply to reference contracts. If passing in multiple patterns, call the option multiple times, once for each pattern.\n  --unsafeAllow \"<VALIDATION_ERROR>[,<VALIDATION_ERROR>...]\"  Selectively disable one or more validation errors or warnings. Comma-separated list with one or more of the following:\n      Errors: state-variable-assignment, state-variable-immutable, external-library-linking, struct-definition, enum-definition, constructor, delegatecall, selfdestruct, missing-public-upgradeto, internal-function-storage, missing-initializer, missing-initializer-call, duplicate-initializer-call\n      Warnings: incorrect-initializer-order\n  --unsafeAllowRenames  Configure storage layout check to allow variable renaming.\n  --unsafeSkipStorageCheck  Skips checking for storage layout compatibility errors. This is a dangerous option meant to be used as a last resort.\n```\n\n----------------------------------------\n\nTITLE: Snapshot Test for Namespace Conflict in Multiple Parent Solidity Contracts\nDESCRIPTION: This snapshot test checks for namespace 'erc7201:conflicting' conflicts across multiple parent contracts. It verifies that the test correctly identifies conflicts in a complex inheritance hierarchy and provides appropriate error messages.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts-layout.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> Snapshot 1\n\n    `Namespace erc7201:conflicting is defined multiple times for contract ConflictsInBothParents␊\n    ␊\n    The namespace erc7201:conflicting was found in structs at the following locations:␊\n    - contracts/test/NamespacedConflicts.sol:45␊\n    - contracts/test/NamespacedConflicts.sol:30␊\n    ␊\n    Use a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.`\n```\n\n----------------------------------------\n\nTITLE: Declaring a Simple Interface with Constant Getter in Solidity\nDESCRIPTION: Defines a simple interface with a single view function that returns a bytes32 value. This interface establishes a contract for implementing constant getters.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_17\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface IHasConstantGetter {\n  function a() external view returns (bytes32);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Duplicate Namespace in Inherited Contract\nDESCRIPTION: Snapshot of error message when a contract inherits from another contract that contains duplicated namespaces, reporting the same conflict as in the base contract.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-namespaced-conflicts.test.ts.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNamespace erc7201:conflicting is defined multiple times for contract InheritsDuplicate\n\nThe namespace erc7201:conflicting was found in structs at the following locations:\n- contracts/test/NamespacedConflicts.sol:10\n- contracts/test/NamespacedConflicts.sol:15\n\nUse a unique namespace id for each struct annotated with '@custom:storage-location erc7201:<NAMESPACE_ID>' in your contract and its inherited contracts.\n```\n\n----------------------------------------\n\nTITLE: Configuring Solidity Compiler Settings with Custom Output Selection\nDESCRIPTION: Sets up Solidity compiler configuration with Paris EVM version, optimizer settings, and specialized output selection to extract AST and storage layout information.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  language: 'Solidity',\n  settings: {\n    evmVersion: 'paris',\n    optimizer: {\n      enabled: true,\n      runs: 200,\n    },\n    outputSelection: {\n      '*': {\n        '': [\n          'ast',\n        ],\n        '*': [\n          'storageLayout',\n        ],\n      },\n    },\n  },\n  sources: {\n    'contracts/test/NamespacedToModify.sol': {\n      content: `// SPDX-License-Identifier: MIT␊\n      pragma solidity ^0.8.20;␊\n      ␊\n      abstract contract Example {␊\n          /// @custom:storage-location erc7201:example.main␊\n          struct MainStorage {␊\n              uint256 x;␊\n              uint256 y;␊\n          } MainStorage $MainStorage_random;␊\n      ␊\n          /// @custom:storage-location erc7201:example.secondary␊\n          struct SecondaryStorage {␊\n              uint256 a;␊\n              uint256 b;␊\n          } SecondaryStorage $SecondaryStorage_random;␊\n      ␊\n          /// @custom:storage-location erc7201:example.with.following.comment␊\n          // some comment␊\n          struct StorageWithComment {␊\n              uint256 a;␊\n              uint256 b;␊\n          } StorageWithComment $StorageWithComment_random;␊\n      ␊\n          /// @notice some natspec␊\n          function foo() virtual  public ;␊\n      ␊\n          /// @param a docs␊\n          function foo1(uint a) virtual  public ;␊\n      ␊\n          /// @param a docs␊\n          function foo2(uint a) virtual  internal ;␊\n          struct MyStruct { uint b; }␊\n      ␊\n          // keccak256(abi.encode(uint256(keccak256(\"example.main\")) - 1)) & ~bytes32(uint256(0xff));␊\n          bytes32 private constant MAIN_STORAGE_LOCATION =␊\n              0x183a6125c38840424c4a85fa12bab2ab606c4b6d0e7cc73c0c06ba5300eab500;␊\n      ␊\n          function _getMainStorage() private pure returns (bool $) {}␊\n      ␊\n          function _getXTimesY() virtual  internal view returns (uint256) ;␊\n      ␊\n          /// @notice standlone natspec␊\n      ␊\n          /// @notice natspec for var␊\n          enum $astId_id_random { dummy }␊\n      ␊\n          // standalone doc␊\n      ␊\n          /**␊\n           * standlone doc block␊\n           */␊\n      ␊\n          /**␊\n           * doc block without natspec␊\n           */␊\n          function foo3() virtual  public ;␊\n      ␊\n          /**␊\n           * doc block with natspec␊\n           *␊\n           * @notice some natspec␊\n           */␊\n          function foo4() virtual  public ;␊\n      ␊\n          /**␊\n           * @dev a custom error inside a contract␊\n           */␊\n          enum $astId_id_random { dummy }␊\n      ␊\n          enum $astId_id_random { dummy }␊\n          enum $astId_id_random { dummy }␊\n          enum $astId_id_random { dummy }␊\n          enum $astId_id_random { dummy }␊\n          enum $astId_id_random { dummy }␊\n      }␊\n      ␊\n      abstract contract HasFunction {␊\n        /// @param myInt an integer␊\n        enum $astId_id_random { dummy }␊\n      ␊\n        function foo() virtual  pure public returns (uint) ;␊\n      }␊\n      ␊\n      abstract contract UsingFunction is HasFunction {␊\n        enum $astId_id_random { dummy }␊\n      }␊\n      ␊\n      function FreeFunctionUsingSelector() pure returns (bool) {}␊\n      ␊\n      bytes4 constant CONSTANT_USING_SELECTOR = HasFunction.foo.selector;␊\n      ␊\n      library Lib {␊\n        function usingSelector() pure public returns (bool) {}␊\n      ␊\n        function plusOne(uint x) pure public returns (bool) {}␊\n      }␊\n      ␊\n      abstract contract Consumer {␊\n        enum $astId_id_random { dummy }␊\n      ␊\n        function usingFreeFunction() virtual  pure public returns (bytes4) ;␊\n      ␊\n        function usingConstant() virtual  pure public returns (bytes4) ;␊\n      ␊\n        function usingLibraryFunction() virtual  pure public returns (bytes4) ;␊\n      }␊\n      ␊\n      abstract contract HasConstantWithSelector {␊\n        bytes4 constant CONTRACT_CONSTANT_USING_SELECTOR = HasFunction.foo.selector;␊\n      }␊\n      ␊\n      function plusTwo(uint x) pure returns (bool) {}␊\n      ␊\n      /**␊\n       * @notice originally orphaned natspec␊\n       */␊\n      ␊\n      /**␊\n       * @dev plusThree␊\n       * @param x x␊\n       */␊\n      function plusThree(uint x) pure returns (bool) {}␊\n      ␊\n      /// @notice originally orphaned natspec 2␊\n      ␊\n      /**␊\n       * @dev plusThree overloaded␊\n       * @param x x␊\n       * @param y y␊\n       */␊\n      function plusThree(uint x, uint y) pure returns (bool) {}␊\n      ␊\n      function originallyNoDocumentation() pure {}␊\n      ␊\n      /**␊\n       * @param foo foo␊\n       */␊\n      enum $astId_id_random { dummy }␊\n      ␊\n      abstract contract UsingForDirectives {␊\n        enum $astId_id_random { dummy }␊\n      ␊\n        function usingFor(uint x) virtual  pure public returns (uint) ;␊\n      }␊\n      ␊\n      /**␊\n       * @title a␊\n       * @author a␊\n       * @inheritdoc Example␊\n       * @dev a␊\n       * @custom:a a␊\n       * @notice a␊\n       * @param a a␊\n       * @return a a␊\n       */␊\n      enum FreeEnum { MyEnum }␊\n      ␊\n      /**␊\n       * @dev a custom error outside a contract␊\n       * @param example example parameter␊\n       */␊\n      enum CustomErrorOutsideContract { dummy }␊\n      ␊\n      int8 constant MAX_SIZE_C = 2;␊\n      ␊\n      abstract contract StructArrayUsesConstant {␊\n        uint16 private constant MAX_SIZE = 10;␊\n      ␊\n        struct NotNamespaced {␊\n          uint16 a;␊\n          uint256[MAX_SIZE] b;␊\n          uint256[MAX_SIZE_C] c;␊\n        }␊\n      ␊\n        /// @custom:storage-location erc7201:uses.constant␊\n        struct MainStorage {␊\n          uint256 x;␊\n          uint256[MAX_SIZE] y;␊\n          uint256[MAX_SIZE_C] c;␊\n        } MainStorage $MainStorage_random;␊\n      }␊\n      ␊\n      address constant MY_ADDRESS = address(0);␊\n      uint constant CONVERTED_ADDRESS = uint160(MY_ADDRESS);␊\n      ␊\n      interface IDummy {␊\n      }␊\n      ␊\n      abstract contract UsesAddress {␊\n        IDummy public constant MY_CONTRACT = IDummy(MY_ADDRESS);␊\n      }␊\n      ␊\n      abstract contract HasFunctionWithRequiredReturn {␊\n          struct S { uint x; }␊\n          enum $astId_id_random { dummy }␊\n          function foo(S calldata s) virtual  internal pure  returns (S calldata) ;␊\n      }␊\n      ␊\n      library LibWithRequiredReturn {␊\n          struct S { uint x; }␊\n          enum $astId_id_random { dummy }␊\n          function foo(S calldata s)  internal pure returns (bool) {}␊\n      }␊\n      ␊\n      /**␊\n       * @return uint 1␊\n       * @return uint 2␊\n       */␊\n      function hasMultipleReturns() pure returns (bool, bool) {}␊\n      ␊\n      /**␊\n       * @return a first␊\n       * @return b second␊\n       */␊\n      function hasMultipleNamedReturns() pure returns (bool a, bool b) {}␊\n      ␊\n      /**␊\n       * @param a first␊\n       * @param b second␊\n       */␊\n      function hasReturnsDocumentedAsParams() pure returns (bool a, bool b) {}␊\n      ␊\n      abstract contract HasNatSpecWithMultipleReturns {␊\n          /**␊\n           * @return uint 1␊\n           * @return uint 2␊\n           */␊\n          function hasMultipleReturnsInContract() virtual  public pure returns (uint, uint) ;␊\n      ␊\n          /**␊\n           * @return a first␊\n           * @return b second␊\n           */␊\n          function hasMultipleNamedReturnsInContract() virtual  public pure returns (uint a, uint b) ;␊\n      ␊\n          /**␊\n           * @param a first␊\n           * @param b second␊\n           */␊\n          function hasReturnsDocumentedAsParamsInContract() virtual  public pure returns (uint a, uint b) ;␊\n      }␊\n      ␊\n      interface IHasExternalViewFunction {␊\n          function foo() external view returns (uint256);␊\n      }␊\n      ␊\n      abstract contract HasExternalViewFunction is IHasExternalViewFunction {␊\n          // This generates a getter function that conforms to the interface␊\n          enum $astId_id_random { dummy }␊\n      ␊\n          // References a selector in an interface␊\n          bytes4 constant USING_INTERFACE_FUNCTION_SELECTOR = IHasExternalViewFunction.foo.selector;␊\n      ␊\n          // References a getter generated for a public variable␊\n          enum $astId_id_random { dummy }␊\n      }␊\n      ␊\n      abstract contract DeploysContractToImmutable {␊\n          enum $astId_id_random { dummy }␊\n      }␊\n      ␊\n      abstract contract HasSpecialFunctions {␊\n          /// @param data call data␊\n          /// @return dataReturn returned data␊\n          enum $astId_id_random { dummy }␊\n      ␊\n          enum $astId_id_random { dummy }␊\n      ␊\n          // Regular function but payable␊\n          function hasPayable() virtual  public payable ;␊\n      ␊\n          bytes4 constant PAYABLE_SELECTOR = this.hasPayable.selector;␊\n      }␊\n      ␊\n`\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Constant Override for an Abstract Function in Solidity\nDESCRIPTION: Shows a contract that inherits from AbstractHasConstantGetter and implements the virtual function with a constant value. This demonstrates how to override a virtual function with a constant state variable.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_20\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract HasConstantGetterOverride is AbstractHasConstantGetter {\n  bytes32 public override constant a = bytes32(\"foo\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Multiple Returns and NatSpec in Solidity\nDESCRIPTION: This snippet defines free functions and an abstract contract 'HasNatSpecWithMultipleReturns' demonstrating functions with multiple returns, named returns, and NatSpec documentation for return values.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_8\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction hasMultipleReturns() pure returns (bool, bool) {}\n\n\nfunction hasMultipleNamedReturns() pure returns (bool a, bool b) {}\n\n\nfunction hasReturnsDocumentedAsParams() pure returns (bool a, bool b) {}\n\nabstract contract HasNatSpecWithMultipleReturns {\n    \n    function hasMultipleReturnsInContract() virtual  public pure returns (uint, uint) ;\n\n    \n    function hasMultipleNamedReturnsInContract() virtual  public pure returns (uint a, uint b) ;\n\n    \n    function hasReturnsDocumentedAsParamsInContract() virtual  public pure returns (uint a, uint b) ;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function Override in an Abstract Contract in Solidity\nDESCRIPTION: Demonstrates a contract that inherits from AbstractHasConstantGetter and overrides the virtual function with another virtual function. This shows function override patterns without providing an implementation.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_21\n\nLANGUAGE: Solidity\nCODE:\n```\nabstract contract HasFunctionOverride is AbstractHasConstantGetter {\n  function a() override virtual external pure returns (bytes32) ;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Basic Type ID (uint256)\nDESCRIPTION: Test snapshot for parsing a basic uint256 type identifier. Shows decomposition into head, id, args and tail components.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/parse-type-id.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": undefined,\n  \"head\": \"t_uint256\",\n  \"id\": \"t_uint256\",\n  \"rets\": undefined,\n  \"tail\": undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Library and Consumer Contract in Solidity\nDESCRIPTION: This snippet defines a library 'Lib' with pure functions and an abstract contract 'Consumer' that uses free functions, constants, and library functions. It demonstrates different ways of using function selectors.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/utils/make-namespaced.test.ts.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nlibrary Lib {\n  function usingSelector() pure public returns (bool) {}\n\n  function plusOne(uint x) pure public returns (bool) {}\n}\n\nabstract contract Consumer {\n  enum $astId_id_random { dummy }\n\n  function usingFreeFunction() virtual  pure public returns (bytes4) ;\n\n  function usingConstant() virtual  pure public returns (bytes4) ;\n\n  function usingLibraryFunction() virtual  pure public returns (bytes4) ;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming OpenZeppelin CLI Manifest Data in JSON\nDESCRIPTION: A snapshot test showing the structure of transformed manifest data. It contains network information (rinkeby), admin address, implementation details with storage layout and type definitions, and proxy information.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/scripts/migrate-oz-cli-project.test.ts.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  rinkeby: {\n    admin: {\n      address: '0x1750499D05Ed1674d822430FB960d5F6731fDf64',\n    },\n    impls: {\n      '08100f44a71d905a66088b4c5d72f12417a580d454357e06dcc5ad12b3fa2cbc': {\n        address: '0xb682dEEf4f8e298d86bFc3e21f50c675151FB974',\n        layout: {\n          storage: [\n            {\n              contract: 'Box',\n              label: 'value',\n              src: 'contracts/Box.sol',\n              type: 't_uint256',\n            },\n            {\n              contract: 'Box',\n              label: 'flag',\n              src: 'contracts/Box.sol',\n              type: 't_bool',\n            },\n            {\n              contract: 'Box',\n              label: 'map',\n              src: 'contracts/Box.sol',\n              type: 't_mapping(unknown,t_bool)',\n            },\n            {\n              contract: 'Box',\n              label: 'foo',\n              src: 'contracts/Box.sol',\n              type: 't_struct(MyStruct)3_storage',\n            },\n            {\n              contract: 'Box',\n              label: 'myEnum',\n              src: 'contracts/Box.sol',\n              type: 't_enum(MyEnum)4',\n            },\n            {\n              contract: 'Box',\n              label: 'dynArray',\n              src: 'contracts/Box.sol',\n              type: 't_array(t_uint256)dyn_storage',\n            },\n            {\n              contract: 'Box',\n              label: 'staticArray',\n              src: 'contracts/Box.sol',\n              type: 't_array(t_uint256)10_storage',\n            },\n            {\n              contract: 'Box',\n              label: 'enumArray',\n              src: 'contracts/Box.sol',\n              type: 't_array(t_enum(MyEnum)4)dyn_storage',\n            },\n            {\n              contract: 'Box',\n              label: 'byteArray',\n              src: 'contracts/Box.sol',\n              type: 't_bytes8',\n            },\n          ],\n          types: {\n            't_array(t_enum(MyEnum)4)dyn_storage': {\n              label: 'MyEnum[]',\n            },\n            't_array(t_uint256)10_storage': {\n              label: 'uint256[10]',\n            },\n            't_array(t_uint256)dyn_storage': {\n              label: 'uint256[]',\n            },\n            t_bool: {\n              label: 'bool',\n            },\n            t_bytes8: {\n              label: 'bytes8',\n            },\n            't_enum(MyEnum)4': {\n              label: 'MyEnum',\n              members: [\n                'UP',\n                'DOWN',\n              ],\n            },\n            't_mapping(unknown,t_bool)': {\n              label: 'mapping(key => bool)',\n            },\n            't_struct(MyStruct)3_storage': {\n              label: 'MyStruct',\n              members: [\n                {\n                  label: 'x',\n                  type: 't_bool',\n                },\n              ],\n            },\n            t_uint256: {\n              label: 'uint256',\n            },\n          },\n        },\n      },\n    },\n    manifestVersion: '3.2',\n    proxies: [\n      {\n        address: '0xE4C10Db67595aF2Cb4166c8C274e0140f7E43059',\n        kind: 'transparent',\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling No Upgradeable Contracts\nDESCRIPTION: Output when the validate command doesn't find any upgradeable contracts in the specified path.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nNo upgradeable contracts detected.␊\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenZeppelin Upgrades in Bash\nDESCRIPTION: Command to install project dependencies using Yarn package manager. This must be run at least once before running tests or linter.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Error Message for Base Slot Change with Scientific Notation\nDESCRIPTION: Snapshot of the error message when the base slot is changed to a value expressed in scientific notation (0x00000000000000000000000000000000000000000000000000000004a817c800).\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/storage-custom-layout.test.ts.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nBase slot for custom storage layout changed from 0x0000000000000000000000000000000000000000000000000000000000000001 to 0x00000000000000000000000000000000000000000000000000000004a817c800\n\nDo not change the base slot during upgrades when using custom storage layout.\n\nIf you need to change the base slot, ensure you also do the following:\n1. Adjust all storage variables to continue using their original slots.\n2. Configure your Solidity compiler options to include storage layouts according to https://docs.openzeppelin.com/upgrades-plugins/api-core#compile_contracts_with_storage_layouts\n3. Recompile both the original and updated contracts.\n4. Run the storage layout check again.\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenZeppelin Upgrades in Bash\nDESCRIPTION: Command to execute all tests for the project using Yarn. Contributors should ensure all tests pass and add new tests when implementing new functionality.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Validating Recursive Namespace Upgrade in JavaScript\nDESCRIPTION: This snapshot test checks the error message for an incompatible upgrade in a recursive struct within a namespace. It detects the addition of a new field in the upgraded struct.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/test/namespaced.js.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`New storage layout is incompatible\n\ncontracts/Namespaced.sol:109: Upgraded \\`s\\` to an incompatible type\n  - Bad upgrade from struct RecursiveStruct.MyStruct to struct RecursiveStructV2_Bad.MyStruct\n  - In struct RecursiveStructV2_Bad.MyStruct\n    - Added \\`c\\``\n```\n\n----------------------------------------\n\nTITLE: Validating an Unsafe Storage Layout Change\nDESCRIPTION: Output when validating a contract that improperly modifies the storage layout compared to its predecessor.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nStdout:  ✘  contracts/test/cli/Validate.sol:BecomesBadLayout (upgrades from contracts/test/cli/Validate.sol:BecomesSafe)␊\n␊\n      BecomesSafe: Deleted \\`x\\`␊\n        > Keep the variable even if unused␊\n␊\nFAILED␊\n␊\nStderr: \n```\n\n----------------------------------------\n\nTITLE: Running Linter for OpenZeppelin Upgrades in Bash\nDESCRIPTION: Command to run the linter on the project code. If linting errors occur, contributors can try auto-fixing with the --fix flag or manually address remaining issues.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Validating a Properly Implemented Upgradeable Contract\nDESCRIPTION: Output when validating a contract that properly follows all upgrade safety rules and correctly maintains storage layout.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/src/cli/cli.test.ts.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n ✔  contracts/test/cli/StorageV2_Ok_NoAnnotation (upgrades from contracts/test/cli/Validate.sol:StorageV1)␊\n␊\nSUCCESS␊\n```\n\n----------------------------------------\n\nTITLE: Awaiting Proxy Upgrade Transaction\nDESCRIPTION: Code example showing how to await until a proxy upgrade transaction is mined, making it easier to ensure deployment completion before proceeding.\nSOURCE: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/plugin-hardhat/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst v2 = await upgrades.upgradeProxy(proxy, ContractV2);\nawait v2.deployed();\n```"
  }
]