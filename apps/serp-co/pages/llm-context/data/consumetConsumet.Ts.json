[
  {
    "owner": "consumet",
    "repo": "consumet.ts",
    "content": "TITLE: Installing Consumet.ts using package managers\nDESCRIPTION: Command-line instructions for installing the Consumet library via yarn or npm package managers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @consumet/extensions\n# or \"npm i @consumet/extensions\"\n```\n\n----------------------------------------\n\nTITLE: Installing consumet.ts Extensions with NPM - Shell\nDESCRIPTION: This snippet demonstrates how to install the @consumet/extensions package using npm. Running this command adds the consumet.ts extensions to your node_modules directory and updates your package.json. Node.js and npm must be installed prior to executing this command. No additional parameters are required, and it works for any Node.js project. Input: none. Output: installed package in your project directory.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @consumet/extensions\n```\n\n----------------------------------------\n\nTITLE: Searching for Books with the Libgen Provider - TypeScript\nDESCRIPTION: This TypeScript example searches for books using the Libgen provider from the consumet.ts library. It supports both ESM and CommonJS module systems for import. The code asynchronously searches for a book by title ('pride and prejudice'), logs the search results, selects the first book, fetches detailed information about it, and prints it. Key dependencies are the @consumet/extensions package and Node.js. The main function expects no arguments. Outputs are logged to the console; inputs include the search query string. Limitations: network connectivity required and the structure of results may depend on the provider API.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/getting-started.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { BOOKS } from \"@consumet/extensions\"\n// CommonJS\nconst { BOOKS } = require(\"@consumet/extensions\");\n\nconst main = async () => {\n  // Create a new instance of the Libgen provider\n  const books = new BOOKS.Libgen();\n  // Search for a book. In this case, \"Pride and Prejudice\"\n  const results = await books.search('pride and prejudice');\n  // Print the results\n  console.log(results);\n  // Get the first book info\n  const firstBook = results[0];\n  const bookInfo = await books.scrapePage(firstBook.link);\n  // Print the info\n  console.log(bookInfo);\n};\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Searching anime using the Gogoanime provider in TypeScript\nDESCRIPTION: Example demonstrating how to create a Gogoanime provider instance, search for the anime 'One Piece', and display the results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ANIME } from \"@consumet/extensions\"\n\n// Create a new instance of the Gogoanime provider\nconst gogoanime = new ANIME.Gogoanime();\n// Search for an anime. In this case, \"One Piece\"\nconst results = gogoanime.search(\"One Piece\").then(data => {\n  // print results\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime with the Gogoanime Provider - TypeScript\nDESCRIPTION: This code snippet demonstrates how to search for anime using the Gogoanime provider from consumet.ts with TypeScript. It illustrates both ESM and CommonJS import forms. The main function creates a Gogoanime provider instance, searches for an anime (\"One Piece\"), logs the search results, retrieves detailed information for the first anime result, fetches streaming sources for the first episode, and lists available servers. Requires @consumet/extensions and Node.js. Inputs include the anime name and episode indices; outputs are console logs of search and fetching results. The snippet relies on API responses and may require a live internet connection.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/getting-started.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { ANIME } from \"@consumet/extensions\"\n// CommonJS\nconst { ANIME } = require(\"@consumet/extensions\");\n\nconst main = async () => {\n  // Create a new instance of the Gogoanime provider\n  const gogoanime = new ANIME.Gogoanime();\n  // Search for a anime. In this case, \"One Piece\"\n  const results = await gogoanime.search(\"One Piece\");\n  // Print the results\n  console.log(results);\n  // Get the first anime info\n  const firstAnime = results.results[0];\n  const animeInfo = await gogoanime.fetchAnimeInfo(firstAnime.id);\n  // Print the info\n  console.log(animeInfo);\n  // get the first episode stream link. By default, it chooses goload server.\n  const episodes = await gogoanime.fetchEpisodeSources(animeInfo.episodes[0].id);\n  // get the available streaming servers for the first episode\n  const streamingServers = await gogoanime.fetchEpisodeServers(animeInfo.episodes[0].id);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing META Provider (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize a META provider using the Consumet library. It imports the `META` object from `@consumet/extensions` and then uses it to access methods of a specific provider by its name. The `<providerName>` placeholder should be replaced with the actual provider's name (e.g., 'Anilist'). The snippet does not specify any specific parameters but illustrates how to retrieve a provider instance.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/meta.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ESM\nimport { META } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst metaProvider = META.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Searching Anime Titles via Gogoanime API (TypeScript)\nDESCRIPTION: This code demonstrates how to search for anime series using the search method of the gogoanime instance in TypeScript. The method takes the query string (e.g., \"One Piece\") and an optional page number, returning a promise that resolves to a paginated result including anime IDs, titles, images, release dates, and related metadata. Requires gogoanime to be properly initialized and returns a Promise<ISearch<IAnimeResult[]>> object. Input is a string query; output is an object with currentPage, hasNextPage, and an array of anime results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.search(\"One Piece\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Zoro Anime Provider - Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize the Zoro anime provider using the `ANIME.Zoro()` constructor. It creates an instance of the `Zoro` class, which can then be used to call various methods for retrieving anime data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst zoro = new ANIME.Zoro();\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime - Typescript\nDESCRIPTION: This snippet shows how to use the `search` method of the `Zoro` class to search for anime. It takes a query string as input and returns a promise that resolves to an array of anime search results.  The result includes information like title, URL, image, and type of the anime. It is a subclass of the `BaseParser` class.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nzoro.search(\"spy x family\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Media Information from FlixHQ\nDESCRIPTION: Retrieves detailed information about a specific media item using its media id or URL. The returned promise resolves to an object with media metadata, description, genres, cast, tags, production details, duration, rating, and episode list for TV series.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchMediaInfo(\"tv/watch-vincenzo-67955\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Manga Provider with Consumet Extensions in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the MANGA namespace from the @consumet/extensions package and initialize a manga provider instance by invoking a provider constructor on MANGA. The <providerName> placeholder should be replaced with an actual provider name such as MangaDex or MangaHere. The snippet allows access to the selected provider's methods for retrieving manga information and chapters. It requires an environment supporting ECMAScript modules and TypeScript.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/manga.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ESM\nimport { MANGA } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst mangaProvider = MANGA.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Media Info with TMDB Provider in TypeScript\nDESCRIPTION: This snippet showcases the use of TMDB's fetchMediaInfo method to retrieve comprehensive details about a specific media item (movie or TV series), including description, metadata, actors, trailers, seasons, and episodes. The method requires a media id and type ('movie' or 'tv'), both typically obtained from previous search or trending results. It returns a promise that resolves to a detailed info object. Requires prior TMDB instance creation.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/tmdb.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntmdb.fetchMediaInfo(\"60735\", \"tv\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"id\": \"tv/watch-the-flash-39535\",\n  \"title\": \"The Flash\",\n  \"image\": \"https://image.tmdb.org/t/p/original/lJA2RCMfsWoskqlQhXPSLFQGXEJ.jpg\",\n  \"cover\": \"https://image.tmdb.org/t/p/original/41yaWnIT8AjIHiULHtTbKNzZTjc.jpg\",\n  \"type\": \"TV Series\",\n  \"rating\": 7.807,\n  \"releaseDate\": \"2014-10-07\",\n  \"description\": \"After a particle accelerator causes a freak storm, CSI Investigator Barry Allen is struck by lightning and falls into a coma. Months later he awakens with the power of super speed, granting him the ability to move through Central City like an unseen guardian angel. Though initially excited by his newfound powers, Barry is shocked to discover he is not the only \\\"meta-human\\\" who was created in the wake of the accelerator explosion -- and not everyone is using their new powers for good. Barry partners with S.T.A.R. Labs and dedicates his life to protect the innocent. For now, only a few close friends and associates know that Barry is literally the fastest man alive, but it won't be long before the world learns what Barry Allen has become...The Flash.\",\n  \"genres\": [\n    \"Drama\",\n    \"Sci-Fi & Fantasy\"\n  ],\n  \"duration\": 44,\n  \"totalEpisodes\": 176,\n  \"totalSeasons\": 9,\n  \"directors\": [],\n  \"writers\": [],\n  \"actors\": [\n    \"Grant Gustin\",\n    \"Candice Patton\",\n    \"Danielle Panabaker\",\n    \"Danielle Nicolet\",\n    \"Kayla Compton\",\n    \"Brandon McKnight\",\n    \"Jon Cor\"\n  ],\n  \"trailer\": {\n    \"id\": \"Mx7xTF8fKz4\",\n    \"site\": \"YouTube\",\n    \"url\": \"https://www.youtube.com/watch?v=Mx7xTF8fKz4\"\n  },\n  \"similar\": [\n    {\n      \"id\": 12971,\n      \"title\": \"Dragon Ball Z\",\n      \"image\": \"https://image.tmdb.org/t/p/original/jB9l4mp0bzBgzE5y4tvBH6AMeMk.jpg\",\n      \"type\": \"TV Series\",\n      \"rating\": 8.311,\n      \"releaseDate\": \"1989-04-26\"\n    },\n    {\n      \"id\": 13023,\n      \"title\": \"El ChapulÃ­n Colorado\",\n      \"image\": \"https://image.tmdb.org/t/p/original/qF8NDpVBSTDhdLlEjVAhNhfqB8K.jpg\",\n      \"type\": \"TV Series\",\n      \"rating\": 7.932,\n      \"releaseDate\": \"1973-04-11\"\n    },\n    {...}\n  ],\n  \"seasons\": [\n    {\n      \"season\": 1,\n      \"image\": \"https://image.tmdb.org/t/p/original/kHyXbcb2JGWIe1fyZa6PqBwlNJN.jpg\",\n      \"episodes\": [\n        {\n          \"id\": \"2899\",\n          \"title\": \"Pilot\",\n          \"episode\": 1,\n          \"season\": 1,\n          \"releaseDate\": \"2014-10-07\",\n          \"overview\": \"Barry discovers his powers and puts them to the test, only when he finds its no longer a test but the real thing when he encounters a certain someone.\",\n          \"url\": \"https://flixhq.to/ajax/v2/episode/servers/2899\",\n          \"img\": \"https://image.tmdb.org/t/p/original/piyGyhwbqqyIxcyuZXYmDUWSylb.jpg\"\n        },\n        {\n          \"id\": \"2900\",\n          \"title\": \"Fastest Man Alive\",\n          \"episode\": 2,\n          \"season\": 1,\n          \"releaseDate\": \"2014-10-14\",\n          \"overview\": \"Barry changes into the Flash when six gunmen storm a university event honoring a scientist, but his heroics don't match up to his expectations. Meanwhile, Iris becomes even more intrigued by the \\\"red streak.\\\"\",\n          \"url\": \"https://flixhq.to/ajax/v2/episode/servers/2900\",\n          \"img\": \"https://image.tmdb.org/t/p/original/mUgakZLNaMIjG63pz7VeJXJPMu4.jpg\"\n        },\n        {...}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Streaming Sources with Goku Provider in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the available streaming sources and subtitles for a given episode using the fetchEpisodeSources method. It requires episodeId and mediaId string parameters, both of which are typically extracted from media info results. An optional server parameter can be provided to select the desired streaming server. The method returns a Promise with details about streaming URLs (including qualities, M3U8 status), headers, and available subtitle tracks. Types and expected response structures are defined in Consumet types.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngoku.fetchEpisodeSources('1064170', 'watch-movie/watch-batman-begins-19636').then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  headers: { Referer: 'https://dokicloud.one/embed-4/K6ki8JPP1SkJ?autoPlay=0' },\n  sources: [\n    {\n      url: 'https://eno.dokicloud.one/_v10/2af246bae4e0d217720d27dba17e4a0f4e8f550c693738169f21cf8cc72f2198e352e26e99193ebd3dce37463b7c7fcb891ee7fda32f63c11374de4c1b5bf6c7dbfc2851e0463aafed7be7e5e481ececc3b638fc02a47e512968fd9a297ae7344582c2dde5e2b37efab41bbcafbc11b60de37d5e6fc50ce45f70ce940bf10f16bb7fcfb0a02f3bdbdd69999e636a61f4/1080/index.m3u8',\n      quality: '1080',\n      isM3U8: true\n    },\n    {\n      url: 'https://eno.dokicloud.one/_v10/2af246bae4e0d217720d27dba17e4a0f4e8f550c693738169f21cf8cc72f2198e352e26e99193ebd3dce37463b7c7fcb891ee7fda32f63c11374de4c1b5bf6c7dbfc2851e0463aafed7be7e5e481ececc3b638fc02a47e512968fd9a297ae7344582c2dde5e2b37efab41bbcafbc11b60de37d5e6fc50ce45f70ce940bf10f16bb7fcfb0a02f3bdbdd69999e636a61f4/720/index.m3u8',\n      quality: '720',\n      isM3U8: true\n    },\n    {\n      url: 'https://eno.dokicloud.one/_v10/2af246bae4e0d217720d27dba17e4a0f4e8f550c693738169f21cf8cc72f2198e352e26e99193ebd3dce37463b7c7fcb891ee7fda32f63c11374de4c1b5bf6c7dbfc2851e0463aafed7be7e5e481ececc3b638fc02a47e512968fd9a297ae7344582c2dde5e2b37efab41bbcafbc11b60de37d5e6fc50ce45f70ce940bf10f16bb7fcfb0a02f3bdbdd69999e636a61f4/360/index.m3u8',\n      quality: '360',\n      isM3U8: true\n    },\n    {\n      url: 'https://eno.dokicloud.one/_v10/2af246bae4e0d217720d27dba17e4a0f4e8f550c693738169f21cf8cc72f2198e352e26e99193ebd3dce37463b7c7fcb891ee7fda32f63c11374de4c1b5bf6c7dbfc2851e0463aafed7be7e5e481ececc3b638fc02a47e512968fd9a297ae7344582c2dde5e2b37efab41bbcafbc11b60de37d5e6fc50ce45f70ce940bf10f16bb7fcfb0a02f3bdbdd69999e636a61f4/playlist.m3u8',\n      isM3U8: true,\n      quality: 'auto'\n    }\n  ],\n  subtitles: [\n    {\n      url: 'https://cc.2cdns.com/19/09/19094c8682ed23d7d4ebf16ed2272164/19094c8682ed23d7d4ebf16ed2272164.vtt',\n      lang: 'English'\n    },\n    {\n      url: 'https://cc.2cdns.com/12/1b/121bb7314feb9661f55597aa441d7551/121bb7314feb9661f55597aa441d7551.vtt',\n      lang: 'Spanish'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Complete Anime List via Gogoanime API (TypeScript)\nDESCRIPTION: This snippet shows the usage of fetchAnimeList to retrieve a paginated list of all available anime from Gogoanime. Input is an optional page number (default: 1), and the result includes detailed anime objects with genres, release dates, images, and URLs. The method requires a gogoanime instance and returns Promise-based results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchAnimeList().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiating MovieHdWatch with MOVIES API - TypeScript\nDESCRIPTION: Initializes a new instance of the MovieHdWatch class from the MOVIES API, which allows methods like search and fetchMediaInfo to be called. Requires the MOVIES API to be imported and available in the current context. No parameters are required, and the returned object provides methods for interacting with the MoviesHD service.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst moviesHd = new MOVIES.MovieHdWatch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources from Gogoanime Using TypeScript\nDESCRIPTION: This snippet demonstrates the usage of the fetchEpisodeSources function from the Consumet gogoanime SDK to asynchronously retrieve streaming source URLs for a given episode ID. It requires the episodeId parameter (string) and an optional server enum. The returned promise resolves to an array of episode sources containing streaming URLs, quality labels, and M3U8 format flags, along with HTTP headers and a direct download link. This function depends on the StreamingServers enum from the Consumet types module and is typically used to get available video qualities for playback.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngogoanime.fetchEpisodeSources(\"one-piece-episode-1022\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Media Information with Goku Provider in TypeScript\nDESCRIPTION: This snippet details how to retrieve comprehensive information for a specific media item (movie or TV show) using the fetchMediaInfo method. The method requires a media ID or URL as its string parameter, typically obtained from search results. It returns a Promise resolving to an object containing media metadata such as title, genres, casts, production, duration, and nested episode details. The output structure follows the IMovieInfo interface in the Consumet type definitions.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngoku.fetchMediaInfo(\"watch-movie/watch-batman-begins-19636\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  id: 'watch-movie/watch-batman-begins-19636',\n  title: 'Batman Begins',\n  url: 'https://goku.sx/watch-movie/watch-batman-begins-19636',\n  image: 'https://img.goku.sx/xxrz/250x400/576/15/33/1533eaa2c80dbc5ea003c7cc4f6669ff/1533eaa2c80dbc5ea003c7cc4f6669ff.jpg',\n  description: 'Billionaire Bruce Wayne is driven by tragedy to expose and defeat the corruption that haunts his hometown of Gotham City. Because he is unable to work within the system, he establishes a new identity as The Batman, a symbol of fear for the criminal underworld. ',\n  type: 'Movie',\n  genres: [ 'Action', 'Crime', 'Drama' ],\n  casts: [\n    'Tom Wilkinson',\n    'Vincent Wong',\n    'Morgan Freeman',\n    'Katie Holmes',\n    'Ken Watanabe'\n  ],\n  production: 'DC Comics,Legendary Entertainment,DC Entertainment,Syncopy,Patalex III Productions Limited,Warner Bros. Pictures',\n  duration: '140 m',\n  episodes: [\n    {\n      id: '1064170',\n      title: 'Batman Begins',\n      url: 'https://goku.sx/watch-movie/watch-batman-begins-19636/1064170'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with Consumet API in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch episode sources using the `fetchEpisodeSources` method from the `moviesHd` provider. It takes the episode ID and media ID as parameters and returns a promise that resolves into an array of episode sources and subtitles. The parameters episodeId and mediaId can be found in the media info object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchEpisodeSources('16076', 'movie/watch-the-batman-online-16076').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Anime Titles Using AnimeUnity in TypeScript\nDESCRIPTION: Executes a search query for anime titles matching the provided string using AnimeUnity's search method. This method returns a Promise resolving to an object that includes pagination status and a list of search results. Each search result contains properties such as id, title, URL, image links, rating, release date, and sub/dub status. It depends on the BaseParser subclass and requires the search query as a string parameter.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animeunity.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimeunity.search(\"Demon Slayer: Kimetsu no Yaiba Hashira Training Arc\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Servers with Consumet API in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch episode servers using the `fetchEpisodeServers` method. It takes the episode ID and media ID as parameters and returns a promise that resolves into an array of episode servers. The parameters episodeId and mediaId can be found in the media info object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchEpisodeServers('16076', 'movie/watch-the-batman-online-16076').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Episode Servers List in FlixHQ\nDESCRIPTION: Fetches available streaming servers for a given episode and media. The promise resolves into an array of server objects containing server name and URL, enabling selection of preferred streaming sources.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchEpisodeServers('1167571', 'tv/watch-vincenzo-67955').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Information by ID\nDESCRIPTION: Fetches detailed information about a specific anime using its ID. The `fetchAnimeInfo` method retrieves data like title, description, genres, and episode information for a given anime ID. The input is a string representing the anime ID.  It returns a promise resolving with the anime info object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anify.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nanify.fetchAnimeInfo(\"133844\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Anime Information via Gogoanime API (TypeScript)\nDESCRIPTION: This snippet retrieves comprehensive information about a specific anime, including metadata and a list of episodes, using fetchAnimeInfo. The input must be either the anime's URL or ID (e.g., 'one-piece'). The output is a detailed anime info object with episode listings and various descriptive attributes. Requires gogoanime to be previously initialized.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchAnimeInfo(\"one-piece\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Media Info using ViewAsian\nDESCRIPTION: This snippet shows how to fetch media information using the `fetchMediaInfo` method. It takes a media ID (or URL) as input and returns a promise that resolves to an object containing information about the movie or TV series, including episodes. The example uses the media ID \"drama/vincenzo\".\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/viewAsian.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nviewAsian.fetchMediaInfo(\"drama/vincenzo\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with MultiMovies (TypeScript)\nDESCRIPTION: Fetches available streaming sources and subtitle tracks for a specific episode. It requires the `episodeId` and can optionally take a `server` enum to specify the desired source server. The method returns a Promise resolving to an object (`ISource`) containing source URLs and subtitle information.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmultimovies.fetchEpisodeSources('episodes/jujutsu-kaisen-1x1/').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Details from MangaHere API in TypeScript\nDESCRIPTION: Uses the fetchMangaInfo method with the manga ID ('tomodachi_game') to retrieve detailed information including description, cover image, genres, status, rating, authors, and chapters. Returns an object that conforms to the IMangaInfo interface and is used to display or process complete manga data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahere.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmangahere.fetchMangaInfo(\"tomodachi_game\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Information from MangaDex\nDESCRIPTION: Retrieves detailed information about a specific manga using its ID. Returns a manga info object that includes metadata and a list of chapters.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmanagdex.fetchMangaInfo(\"b35f67b6-bfb9-4cbd-86f0-621f37e6cb41\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Anime Information Using AnimePahe API in TypeScript\nDESCRIPTION: Fetches detailed metadata for a specific anime by its unique id as returned by the search method. Optionally accepts an episode page number to paginate episodes; -1 retrieves all episodes at once. Returns a promise resolving to a detailed anime info object including title, cover images, description, genres, status, studios, release dates, total episodes, and a list of episodes with id, number, title, image, and duration. Depends on the AnimePahe client instance and the supplied anime id.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animepahe.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimepahe.fetchAnimeInfo(\"adb84358-8fec-fe80-1dc5-ad6218421dc1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enhanced Manga Search Results with Api Search in TypeScript\nDESCRIPTION: Fetches a detailed list of manga matching the search query, including alt titles, descriptions, and images, limited to four entries; useful for obtaining enriched metadata for display. Returns a promise resolving to search results with extended info.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/vyvymanga.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nvyvyManga.searchApi('Sora no Otoshimono').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing MangaDex Client in TypeScript\nDESCRIPTION: Creates a new instance of the MangaDex manga provider class from the MANGA namespace in Consumet.ts.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mangadex = new MANGA.MangaDex();\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Info - ReadManga (TypeScript)\nDESCRIPTION: Fetches detailed information about a specific manga using its ID. Returns a promise that resolves to a manga info object, including the chapters available. The manga ID can be obtained from the search results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readmanga.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadManga.fetchMangaInfo('one-piece-colored-edition-55493').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with AnimeDrive - TypeScript\nDESCRIPTION: Obtains a list of streaming sources for a specific anime episode using fetchEpisodeSources on the animedrive instance. Expects an episode id string, which is typically available in the episodes array from fetchAnimeInfo. Returns a Promise that resolves to an object containing an array of sources, each with url, quality, and isM3U8. The output adheres to the ISource shape and supports multiple video qualities. Initialization of animedrive and a valid episode id are required.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animedrive.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimedrive.fetchEpisodeSources(\"?id=1031&ep=1\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n      sources: [\n        {\n          url: 'https://hugh.cdn.rumble.cloud/video/s8/2/p/A/k/5/pAk5o.oaa.mp4',\n          quality: '240p',\n          isM3U8: false\n        },\n        {\n          url: 'https://hugh.cdn.rumble.cloud/video/s8/2/p/A/k/5/pAk5o.baa.mp4',\n          quality: '360p',\n          isM3U8: false\n        },\n        {\n          url: 'https://hugh.cdn.rumble.cloud/video/s8/2/p/A/k/5/pAk5o.caa.mp4',\n          quality: '480p',\n          isM3U8: false\n        },\n        {\n          url: 'https://hugh.cdn.rumble.cloud/video/s8/2/p/A/k/5/pAk5o.gaa.mp4',\n          quality: '720p',\n          isM3U8: false\n        },\n        {\n          url: 'https://hugh.cdn.rumble.cloud/video/s8/2/p/A/k/5/pAk5o.haa.mp4',\n          quality: '1080p',\n          isM3U8: false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scraping Book Details from Libgen in TypeScript\nDESCRIPTION: Method for retrieving detailed information about a specific book from Libgen using its URL. Returns a Promise containing LibgenBook data with comprehensive book information.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/libgen.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * scrapes a ligen book page by book page url\n * \n * @param {string} bookUrl - ligen book page url\n * @returns {Promise<LibgenBook>}\n*/\nLibgen.scrapeBook(\n  \"http://libgen.rs/book/index.php?md5=262BFA73B8090B6AA3DBD2FBCDC4B91D\"\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing MangaReader Class in TypeScript\nDESCRIPTION: Creates an instance of the MangaReader class from the MANGA namespace to enable interaction with manga data sources. To use, ensure that the MANGA.MangaReader is imported and available. The instance variable can then call methods like search, fetchMangaInfo, and fetchChapterPages.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangareader.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mangaReader = new MANGA.MangaReader();\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Episode Sources in TypeScript\nDESCRIPTION: Demonstrates how to fetch streaming sources for a specific anime episode with optional parameters for server selection and subtitle/dubbing preferences.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchEpisodeSources(\"overlord-iv-18075$episode$92599\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Anime Episodes via Gogoanime API (TypeScript)\nDESCRIPTION: This snippet retrieves a list of the most recent anime episodes using the fetchRecentEpisodes method. The method supports optional parameters for page number (default: 1) and anime type (sub, dub, or Chinese with subtitles) and returns a paginated list of episodes with IDs, titles, images, and URLs. Requires a valid gogoanime instance and returns a promise resolving to a structured episodes result object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchRecentEpisodes().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Popular Anime using Anilist Provider in TypeScript\nDESCRIPTION: This code demonstrates how to fetch a list of popular anime using the `fetchPopularAnime` method. It invokes the method without pagination parameters and asynchronously logs the result, which is a promise resolving to a search result object containing an array of popular anime. Optional `page` and `perPage` parameters can be used for pagination.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nanilist.fetchPopularAnime().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga with BRMangas\nDESCRIPTION: Demonstrates how to search for manga using the BRMangas provider. The search method returns a promise that resolves to an array of manga results containing id, title, and image information.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/brmangas.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbrmangas.search(\"punpun\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  results: [\n      {\n        id: 'berserk-online',\n        title: 'Berserk',\n        image: 'https://cdn.plaquiz.xyz/uploads/b/berserk/berserk.jpg',\n        headerForImage: { Referer: 'https://brmangas.net' }\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VyvyManga Class Instance in TypeScript\nDESCRIPTION: Creates an instance of the VyvyManga class, which provides methods to access manga data from the VyvyManga source. This setup is necessary before invoking any search or data retrieval operations.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/vyvymanga.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst vyvyManga = new MANGA.VyvyManga();\n```\n\n----------------------------------------\n\nTITLE: Fetching Popular Content with MultiMovies (TypeScript)\nDESCRIPTION: Retrieves a list of popular movies and TV series from the MultiMovies provider. This method does not require any input parameters. It returns a Promise that resolves into an object (`ISearch<IMovieResult>`) containing an array of popular media results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmultimovies.fetchPopular.then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Media Info with MultiMovies (TypeScript)\nDESCRIPTION: Retrieves detailed information for a specific movie or TV series using its unique media ID or URL. The method requires a `mediaId` string as input. It returns a Promise that resolves into an object (`IMovieInfo`) containing comprehensive details, including episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmultimovies.fetchMediaInfo('tvshows/jujutsu-kaisen/').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Anime Info using AnimeDrive - TypeScript\nDESCRIPTION: Retrieves comprehensive information for a specific anime based on its id, including metadata and a list of episodes, by calling fetchAnimeInfo. The function expects an anime id string (which can be obtained from search results). Returns a Promise that resolves to an object structured as IAnimeInfo. The output object includes title, description, releaseYear, status, and episodes array. Requires prior instantiation of the animedrive object and a valid anime id.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animedrive.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimedrive.fetchAnimeInfo(\"1031\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  id: '1031',\n  title: 'Yofukashi no Uta',\n  image: 'https: //animedrive.hu/cover/1031.webp',\n  description: 'Yamori Kou látszatra egy teljesen átlagos, középiskolás tanuló. Viszonylag jók a tanulmányi eredményei, kedves az osztálytársaival. Sok energiát fektet bele, hogy fenntartsa ezt a látszatot. Egy nap azonban belefárad ebbe, és többé nem jár be az iskolába. Inszomniában szenved, mivel napközben semmit sem csinál, amivel levezethetné az energiáját. Amikor sétálni megy éjszaka, egy picit jobban érzi magát, azonban tudja, hogy az álmatlansága egy komoly probléma. Egy ilyen esti séta közben Kou találkozik egy furcsa lánnyal, Nanakusa Nazunával, aki megállapítja az álmatlanságának okát: habár változtatott az életvitelén, még mindig visszafogja magát, és nem tapasztalja meg az igazi szabadságot. Azt mondja neki a lány, hogy nem fog tudni aludni, amíg nem lesz elégedett azzal, hogyan tölti az ébrenlétének idejét. Amikor végre úgy tűnik, hogy megoldódott a jelenlegi problémája, a lány felhívja őt a lakására, hogy együtt aludjanak. Egy idő után, amikor a lány nem tudja, hogy a fiú tetteti az alvást, közelebb hajol hozzá és... beleharap a nyakába.',\n  type: 'TV',\n  releaseYear: '2022-07-08',\n  status: 'Completed',\n  totalEpisodes: 13,\n  url: 'https: //animedrive.hu/anime/?id=1031',\n  episodes: [\n    {\n      id: '?id=1031&ep=1',\n      number: 1,\n      title: 'Yofukashi no Uta Episode 1',\n      url: 'https: //animedrive.hu/watch/?id=1031&ep=1'\n    },\n    {...},\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Available Episode Servers with Goku Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to obtain the list of streaming servers for a specific episode using the fetchEpisodeServers method. It requires an episodeId (string) and a mediaId (string) as parameters, both of which must be previously retrieved from the media info. The method returns a Promise resolving to an array of available servers, each with a name and streaming URL. The response fits the IEpisodeServer structure defined in Consumet types.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngoku.fetchEpisodeServers('1064170', 'watch-movie/watch-batman-begins-19636').then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    name: 'UpCloud',\n    url: 'https://dokicloud.one/embed-4/K6ki8JPP1SkJ?autoPlay=0'\n  },\n  {\n    name: 'Vidcloud',\n    url: 'https://rabbitstream.net/embed-4/eq17GDB0o3mj?autoPlay=0'\n  },\n  {\n    name: 'Upstream',\n    url: 'https://upstream.to/embed-ncw8o5bt6ie5.html'\n  },\n  { \n    name: 'MixDrop',\n    url: 'https://mixdrop.co/e/kn9l3gelc3d4med' \n  }    \n  {...},\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources and Subtitles in FlixHQ\nDESCRIPTION: Obtains streaming URLs and subtitles for a specific episode using episode id and media id. The function returns a promise resolving to an object with headers, sources (video links), and subtitles (language and URL).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchEpisodeSources(\"1167571\", \"tv/watch-vincenzo-67955\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Anime using Anilist Provider in TypeScript\nDESCRIPTION: This snippet illustrates how to retrieve a list of trending anime using the `fetchTrendingAnime` method. It calls the method without pagination parameters and asynchronously logs the result, which is a promise resolving to a search result object containing an array of trending anime. Optional `page` and `perPage` parameters can be used for pagination.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nanilist.fetchTrendingAnime().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with AnimeKai in TypeScript\nDESCRIPTION: This snippet shows how to fetch direct streaming sources for a given episode using the `fetchEpisodeSources` method.  It requires the episode ID, and optionally takes server type (defaulting to MegaUp) and sub/dub preference as input.  It returns a promise that resolves into an array of streaming sources, subtitles and download link.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanimekai.fetchEpisodeSources(\"jujutsu-kaisen-4gm6#ep=1?token=30nW30ysAuVpjobTutx2\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime using Anilist Provider in TypeScript\nDESCRIPTION: This code demonstrates how to call the `search` method on an `Anilist` instance. It searches for anime matching the provided query string (\"Classroom of the elite\") and logs the asynchronous result, which is a promise resolving to a search result object containing an array of anime. Optional parameters for pagination (`page`, `perPage`) are available.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nanilist.search(\"Classroom of the elite\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Information with Pagination Using AnimeUnity in TypeScript\nDESCRIPTION: Fetches detailed anime information and episode lists by anime ID, with optional pagination to handle batches of 120 episodes. The method returns a Promise resolving to an object containing metadata (title, genres, image, description, etc.) and paginated episode data. Parameters include the anime ID string and an optional page number, which allows retrieval of episodes in chunks (e.g., page 1 returns episodes 1-120).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animeunity.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimesaturn.fetchAnimeInfo(\"5167-demon-slayer-kimetsu-no-yaiba-hashira-training-arc\", 1).then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent TV Shows using Consumet sflix API in TypeScript\nDESCRIPTION: Demonstrates fetching recent TV shows via the sflix.fetchRecentTvShows() asynchronous method. Returns a promise resolving to an array of TV show objects typed as Promise<IMovieResult[]> containing details like id, title, URL, image, season, and episode information. It requires the Consumet sflix API client instance 'sflix'. The output is logged to the console as an array of TV show entries.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nsflix.fetchRecentTvShows().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Info - Typescript\nDESCRIPTION: This snippet retrieves detailed information about a specific manga using the `fetchMangaInfo` method. It requires a manga ID and returns a promise resolving to an object containing the manga's title, description, genres, chapters, and other relevant details.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangasee123.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmangasee123.fetchMangaInfo('Yofukashi-no-Uta').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with AnimeFox\nDESCRIPTION: Retrieves streaming sources for a specific anime episode using its episode ID. Returns an array of source objects containing URLs and format information for streaming the episode. The headers property may contain referer information needed to bypass streaming restrictions.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animefox.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanimefox.fetchEpisodeSources(\"overlord-iv\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    sources: [\n    {\n        url: 'https://wwwx20.gogocdn.stream/videos/hls/NbM2m1QH_oxhhOUt6gLkSg/1660076576/188769/ca09dc1ce88568467994ea8e756c4493/ep.1.1657688625.m3u8',\n        isM3U8: true\n    },\n    {\n        url: 'https://wwwx20.gogocdn.stream/videos/hls/NbM2m1QH_oxhhOUt6gLkSg/1660076576/188769/ca09dc1ce88568467994ea8e756c4493/ep.1.1657688625.m3u8',\n        isM3U8: true\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Media Information with MovieHdWatch - TypeScript\nDESCRIPTION: Illustrates retrieving detailed information about a specific movie or TV show using the fetchMediaInfo method of the MovieHdWatch instance. Requires a valid media identifier (as returned from the search method) or URL. Returns a promise that resolves to an object describing the media, including fields like id, title, url, images, description, genres, cast, production, country, duration, rating, recommendations, and episodes. Dependencies include the MovieHdWatch instance and access to the MoviesHD service.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmoviesHd.fetchMediaInfo('movie/watch-the-batman-online-16076').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Streaming Sources Using AnimeUnity in TypeScript\nDESCRIPTION: Retrieves streaming source URLs for a given episode ID using AnimeUnity's fetchEpisodeSources method. This method returns a Promise resolving to an object that includes multiple source streams with attributes like URL, video quality, and format type, as well as a direct download link. The episode ID parameter should be obtained from the fetched anime information object's episodes array.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animeunity.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimesaturn.fetchEpisodeSources(\"5167-demon-slayer-kimetsu-no-yaiba-hashira-training-arc/80480\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Anime with AnimeSaturn - TypeScript\nDESCRIPTION: This code snippet demonstrates how to search for anime using the `search` method of the `animesaturn` object. It takes a query string as input (e.g., \"Tokyo Revengers\") and returns a promise that resolves to an array of anime results. The output includes details like id, title, image, and URL of each anime found.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animesaturn.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimesaturn.search(\"Tokyo Revengers\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Manga Information in TypeScript\nDESCRIPTION: Retrieves comprehensive information about a specific manga, including its chapters, given a manga ID. The method returns a promise resolving to an IMangaInfo object with properties such as title, description, genres, and chapter list. Example fetches info for 'one-piece-colored-edition-55493' and logs the data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangareader.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangaPill.fetchMangaInfo('one-piece-colored-edition-55493').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recently Updated Anime with Consumet Zoro Extension in TypeScript\nDESCRIPTION: Fetches the list of recently updated anime from the zoro source as a paginated response. The function optionally accepts a page number parameter (default is 1) to navigate through multiple pages of results. It returns a Promise that resolves to an object containing metadata such as currentPage, hasNextPage, totalPages, and an array of anime results with detailed information per anime.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchRecentlyUpdated().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Servers List\nDESCRIPTION: Obtains a list of available servers for streaming or downloading a specific episode via its episode ID or URL. Returns an array of server objects with names and URLs, facilitating different streaming options.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchEpisodeServers(\"vincenzo-2021-episode-1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources using ViewAsian\nDESCRIPTION: This snippet fetches the episode sources using the `fetchEpisodeSources` method.  It takes an episode ID as input. The method then returns a promise which resolves to the streaming sources and subtitles for the specified episode. The example utilizes the episode ID `/watch/vincenzo/watching.html$episode$20`\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/viewAsian.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nviewAsian.fetchEpisodeSources(\"/watch/vincenzo/watching.html$episode$20\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching SFlix Episode Sources - TypeScript\nDESCRIPTION: Calls the `fetchEpisodeSources` method to get streaming sources and subtitles for a specific episode. It requires the `episodeId` and `mediaId` (from media info) and optionally a `server` from the `StreamingServers` enum (defaults to `StreamingServers.VidCloud`). Returns a Promise resolving to an object containing source URLs and subtitle tracks.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsflix.fetchEpisodeSources(\"1167571\",\"tv/free-vincenzo-hd-67955\",StreamingServers.Voe).then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chapter Pages from MangaHere in TypeScript\nDESCRIPTION: Fetches all pages of a specific chapter ('tomodachi_game/c102') using the fetchChapterPages method. Returns a promise resolving to an array of page objects, each containing the page number, image URL, and headers such as Referer, suitable for rendering the chapter's pages in a viewer.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahere.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmangahere.fetchChapterPages(\"tomodachi_game/c102\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime on 9Anime using TypeScript\nDESCRIPTION: Demonstrates how to use the `search` method with a query string (e.g., \"ojisan\") to find anime. This method returns a Promise that resolves to an `ISearch` object containing pagination information and an array of `IAnimeResult` objects matching the query.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/9anime.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnineanime.search(\"ojisan\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  currentPage: 1,\n  hasNextPage: false,\n  results: [\n    {\n      id: 'uncle-from-another-world.oj9q8',\n      title: 'UNCLE FROM ANOTHER WORLD',\n      url: 'https://9anime.to/watch/uncle-from-another-world.oj9q8',\n      image: 'https://static.bunnycdn.ru/i/cache/images/1/1e/1e014e4ca206a486abef62cf0795c919.jpg',\n      subOrSub: 'sub',\n      type: 'TV'\n    },\n    {\n      id: 'ojisan-and-marshmallow.4qo',\n      title: 'Ojisan and Marshmallow',\n      url: 'https://9anime.to/watch/ojisan-and-marshmallow.4qo',\n      image: 'https://static.bunnycdn.ru/i/cache/images/2018/04/7794c3d41b0cd0d2c521b034fcca6b23.jpg',\n      subOrSub: 'sub',\n      type: 'TV'\n    },\n    {...}\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Manga Information from MangaPill in TypeScript\nDESCRIPTION: This snippet illustrates how to asynchronously retrieve detailed information about a specific manga using its ID via the 'fetchMangaInfo' method. The method requires a mangaId string (which can be obtained from a previous search) and returns a Promise with a manga info object, including properties such as description, release date, genres, and chapters. The resulting data can be consumed for display or further logic, and the output structure is outlined for reference. The 'mangaPill' instance must be initialized prior to calling this method.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapill.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangaPill.fetchMangaInfo('2/one-piece').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages - ReadManga (TypeScript)\nDESCRIPTION: Fetches the pages for a specific chapter of a manga. Requires the chapter ID, which can be found in the manga info. Returns a promise resolving to an array of image URLs representing the chapter pages.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readmanga.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadManga.fetchChapterPages('one-piece-colored-edition-55493/en/chapter-1004').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga on AsuraScans (TypeScript)\nDESCRIPTION: Performs a search query for manga titled 'Omniscient Reader’s Viewpoint' using the search method, which returns a promise resolving to an array of search results including id, title, image, status, latest chapter, and rating.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/asurascans.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nasuraScans.search('Omniscient Reader’s Viewpoint').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Popular Manga from MangaDex\nDESCRIPTION: Retrieves popular manga with optional pagination. Returns a paginated list of manga results sorted by popularity.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmangadex.fetchPopular().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Information - Typescript\nDESCRIPTION: This snippet demonstrates how to use the `fetchAnimeInfo` method of the `Zoro` class to fetch detailed information about a specific anime.  It takes the anime ID as a parameter and returns a promise that resolves to an anime info object including episodes, malID and alID.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nzoro.fetchAnimeInfo(\"overlord-iv-18075\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Top Upcoming Anime with Consumet Zoro Extension in TypeScript\nDESCRIPTION: Queries the top upcoming anime titles from the zoro source, with optional pagination controlled by a page number parameter (default 1). Returns a Promise that resolves to a paginated response object containing anime entries with identifying attributes such as id, title, url, image, type, and expected airing details formatted as duration. This snippet is useful for accessing imminent anime releases.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchTopUpcoming().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Manga - Typescript\nDESCRIPTION: This snippet demonstrates how to search for manga using the `search` method of the Mangasee123 provider. It takes a query string as input and returns a promise that resolves to an array of manga search results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangasee123.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmangasee123.search('Call of the Night').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages with MangaKakalot in TypeScript\nDESCRIPTION: Fetches all pages of a chapter using its chapterId. Returns a promise resolving to an array of page objects, each containing the image URL, page number, title, and header information for image requests. Essential for displaying or downloading individual chapter pages.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangakakalot.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangakakalot.fetchChapterPages(\"manga-kr954974/chapter-102$$READMANGANATO\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Search with MultiMovies (TypeScript)\nDESCRIPTION: Searches the MultiMovies provider for media (movies/tv series) matching the given query. It accepts a mandatory `query` string and an optional `page` number. This method returns a Promise that resolves into an object containing search results (`ISearch<IMovieResult[]>`).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmultimovies.search(\"jujutsu kaisen\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources by ID\nDESCRIPTION: Retrieves streaming sources for a specific episode of an anime.  This method takes the episode ID, episode number, and anime ID as parameters.  It returns a promise that resolves to an array of episode sources, including streaming URLs and quality information. The returned object also contains `headers` which might be used to prevent 403 errors during video playback.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anify.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nanify.fetchEpisodeSources(\"/overlord-iv-episode-5\", 11, \"133844\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime with AnimeFox\nDESCRIPTION: Searches for anime based on a query string. Returns search results with pagination info and an array of anime results containing basic details like ID, title, type, image, URL, and episode count.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animefox.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimefox.search(\"Overlord IV\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    currentPage: 1,\n    hasNextPage: false,\n    results: [\n    {\n        id: 'overlord-iv',\n        title: 'Overlord IV',\n        type: 'Overlord IV',\n        image: 'Summer 2022 ',\n        url: 'https://animefox.tv/anime/overlord-iv',\n        episode: 6\n    },\n    {\n        id: 'overlord-iv-dub',\n        title: 'Overlord IV (Dub)',\n        type: 'Overlord IV (Dub)',\n        image: 'TV Series',\n        url: 'https://animefox.tv/anime/overlord-iv-dub',\n        episode: 3\n    },\n    {...}\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages\nDESCRIPTION: This snippet demonstrates how to use the `fetchChapterPages` method to retrieve the pages of a specific chapter. It requires a chapter ID, which can be obtained from the manga info. The example fetches pages for 'kimetsu-no-yaiba-gotouge-koyoharu/i2325814'.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmangapark.fetchChapterPages('kimetsu-no-yaiba-gotouge-koyoharu/i2325814').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Media with MovieHdWatch - TypeScript\nDESCRIPTION: Demonstrates how to use the search method of the MovieHdWatch instance to find movies or TV series based on a string query such as 'Batman'. This method returns a promise resolving to an array of result objects. The search method supports an optional page parameter for pagination. Dependencies include a valid MovieHdWatch instance and, optionally, an internet connection if communicating with external APIs. The output is a Promise of search results containing fields such as id, title, url, image, releaseDate, seasons, duration, and type.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmoviesHd.search(\"Batman\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga by Title with MangaKakalot in TypeScript\nDESCRIPTION: Performs a search query for manga titled \"Tomodachi Game\" using the search method. Returns a promise resolving to an array of manga search results, including id, title, image, and header information for image requests. The method relies on inheriting from BaseParser and uses a query string parameter.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangakakalot.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangakakalot.search(\"Tomodachi Game\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Movies with MoviesHD API\nDESCRIPTION: This snippet demonstrates how to fetch trending movies using the `fetchTrendingMovies` method of the `moviesHd` object. It calls the method and logs the returned data (an array of movie objects) to the console. The method returns a promise that resolves to an array of `IMovieResult` objects.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchTrendingMovies().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Top Airing Anime via Gogoanime API (TypeScript)\nDESCRIPTION: This code demonstrates how to use fetchTopAiring to get the list of top airing anime on Gogoanime. Accepts an optional page parameter (default: 1) and returns an object with IDs, titles, images, genres, episode information, and pagination metadata. gogoanime must be properly instantiated. Returns a promise resolving to the paginated top airing anime collection.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchTopAiring().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Manga by Title with MangaHere API in TypeScript\nDESCRIPTION: Invokes the search method to query mangas matching a specific string ('Tomodachi Game') and returns a promise resolving to a structured object containing search results, pagination info, and manga summaries. Requires the search method of the MangaHere class, which extends the BaseParser class and returns data conforming to the ISearch interface.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahere.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmangahere.search(\"Tomodachi Game\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Media Using FlixHQ's search Method\nDESCRIPTION: Performs a search query for media titles, such as 'Vincenzo', returning a promise that resolves into an object containing search results with metadata like id, title, URL, image, and type. Supports pagination via an optional page parameter.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.search(\"Vincenzo\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent TV Shows from flixhq API\nDESCRIPTION: This snippet fetches recent TV shows using the `flixhq.fetchRecentTvShows()` function.  It awaits the promise and logs the retrieved data, which is an array of TV show objects. The function doesn't take any parameters.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchRecentTvShows().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Media Titles with Goku Provider in TypeScript\nDESCRIPTION: This snippet shows how to search for movies or TV series using the Goku provider's search method in TypeScript. It depends on prior initialization of the Goku object. The search method accepts a string query (e.g., 'Batman') and an optional page number (default: 1). It returns a Promise resolving to a search result array including id, title, url, image, releaseDate, rating, and type for each matching media. This method is inherited from BaseParser and is available across most categories.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngoku.search(\"Batman\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  currentPage: 1, // current page\n  hasNextPage: true, // if there is a next page\n  results: [\n    {\n      id: 'watch-movie/watch-batman-13647',\n      title: 'Batman',\n      url: 'https://goku.sx/watch-movie/watch-batman-13647',\n      image: 'https://img.goku.sx/xxrz/250x400/576/7d/df/7ddf28de1b0053327ad6ff1c974894e8/7ddf28de1b0053327ad6ff1c974894e8.jpg',\n      releaseDate: '1966',\n      rating: 6.5,\n      type: 'TV Series'\n    }\n    {...},\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Movies and TV Shows by Genre with Pagination using Consumet sflix API in TypeScript\nDESCRIPTION: Shows how to fetch movies and TV shows filtered by genre (e.g., 'drama') and supports optional pagination via a page parameter (default 1). The call sflix.fetchByGenre(genre, page?) returns a promise of type Promise<ISearch<IMovieResult[]>> containing currentPage, hasNextPage, and results array of movies/TV series matching the genre. The snippet outputs the search results to the console. The genre parameter is a string matching available categories on the API.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nsflix.fetchByGenre('drama').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Movies and TV Shows by Country with Pagination using Consumet sflix API in TypeScript\nDESCRIPTION: Demonstrates filtering movies and TV shows by a given country code (e.g., 'KR') and optional page number (default 1). The method sflix.fetchByCountry(country, page?) returns a promise resolving to a paginated search response Promise<ISearch<IMovieResult[]>> with properties currentPage, hasNextPage, and results array. The results include both movies and TV series with respective metadata. This requires the sflix API client and a string country code parameter.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nsflix.fetchByCountry('KR').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages from AsuraScans (TypeScript)\nDESCRIPTION: Retrieves all pages of a specific chapter by chapter ID, returning a promise resolving to an array of page objects with image URLs and page numbers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/asurascans.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nasuraScans.fetchChapterPages('solo-max-level-newbie-d9977a85/chapter/66').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga\nDESCRIPTION: This snippet demonstrates how to use the `search` method to find manga on Mangapark. It takes a query string as input and returns a promise that resolves to an array of manga search results. The example searches for \"Demon Slayer\".\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmangapark.search('Demon Slayer').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Anime Information using Anilist Provider in TypeScript\nDESCRIPTION: This snippet shows how to retrieve detailed information for a specific anime using its ID (\"98659\") via the `fetchAnimeInfo` method. It calls the method with the required ID and asynchronously logs the result, which is a promise resolving to a comprehensive anime information object including episodes. An optional `dub` boolean parameter can be used to specify dubbed versions.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nanilist.fetchAnimeInfo(\"98659\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching DramaCool Media Content\nDESCRIPTION: Performs a search query for a specified media title (e.g., Vincenzo) on DramaCool. It leverages the inherited BaseParser class for search functionality, returning a promise that resolves into an object containing search results with media IDs, titles, URLs, and images.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.search(\"Vincenzo\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Servers with AnimeKai in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve available streaming servers for a specific episode using the `fetchEpisodeServers` method. It requires the episode ID as input and optionally accepts a `SubOrDub` parameter. The method returns a promise resolving to an array of available servers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nanimekai.fetchEpisodeServers(\"jujutsu-kaisen-4gm6#ep=1?token=30nW30ysAuVpjobTutx2\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga on MangaDex\nDESCRIPTION: Searches for manga using a query string with optional pagination. Returns an array of manga results including IDs, titles, descriptions, and other metadata.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmangadex.search(\"Tomodachi Game\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Top Rated Manga - ReadManga (TypeScript)\nDESCRIPTION: Retrieves a list of top-rated manga. Accepts a page number as a parameter for pagination, with a default page number of 1. Returns a promise that resolves to an array of manga search results, showing the top-rated titles.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readmanga.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadManga.fetchTopRatedManga().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent TV Shows with Goku (TypeScript)\nDESCRIPTION: Uses the `goku.fetchRecentTvShows()` method to asynchronously retrieve a list of recently added TV shows. The method returns a Promise that resolves to an array of TV show objects (`IMovieResult[]`), including details like ID, title, URL, image, season, latest episode, and type. The example logs the resolved data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngoku.fetchRecentTvShows().then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 'watch-series/watch-deadloch-97072',\n    title: 'Deadloch',\n    url: 'https://goku.sx/watch-series/watch-deadloch-97072',\n    image: 'https://img.goku.sx/xxrz/250x400/576/9f/85/9f8594271eb6540e32b7fbda24747c6e/9f8594271eb6540e32b7fbda24747c6e.jpg',\n    season: '1',\n    latestEpisode: '6',\n    type: 'TV Series'\n  },\n  {\n    id: 'watch-series/watch-clone-high-96937',\n    title: 'Clone High',\n    url: 'https://goku.sx/watch-series/watch-clone-high-96937',\n    image: 'https://img.goku.sx/xxrz/250x400/576/ad/c5/adc55790c8c88d5538210f7558fec960/adc55790c8c88d5538210f7558fec960.jpg',\n    season: '1',\n    latestEpisode: '10',\n    type: 'TV Series'\n  },\n  {\n    id: 'watch-series/watch-and-just-like-that-75286',\n    title: 'And Just Like That…',\n    url: 'https://goku.sx/watch-series/watch-and-just-like-that-75286',\n    image: 'https://img.goku.sx/xxrz/250x400/576/b8/e2/b8e20a6264e28cf1133413f63425297d/b8e20a6264e28cf1133413f63425297d.jpg',\n    season: '2',\n    latestEpisode: '2',\n    type: 'TV Series'\n  },\n  {...},\n]\n```\n\n----------------------------------------\n\nTITLE: Searching Manga Titles via MangaPill API in TypeScript\nDESCRIPTION: This snippet demonstrates performing an asynchronous search for manga using a query string with the 'search' method of the MangaPill client. It expects a string parameter representing the manga title, returns a Promise resolving to an array of manga search results, and logs the results to the console. The structure of the returned result includes manga IDs, titles, and image URLs. Dependencies include the 'mangaPill' client from Consumet.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapill.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangaPill.search('one piece').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga Using the search Method in TypeScript\nDESCRIPTION: Performs a search query for manga titles, returning a promise that resolves into an array of manga results matching the query. It depends on the subclassing from BaseParser, requiring a string query parameter. Usage example searches for 'one piece' and logs results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangareader.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangaPill.search('one piece').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages with MangaHost - TypeScript\nDESCRIPTION: This code fetches the pages of a specific chapter of a manga using the `fetchChapterPages` method.  The method receives mangaId and chapterId, both of which are found by calling `fetchMangaInfo`. It returns a promise that resolves into an array containing the image URLs and related information for each page within the chapter.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahost.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmangahost.fetchChapterPages(\"oyasumi-punpun-mh34076/1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Light Novels with NovelUpdates Provider in TypeScript\nDESCRIPTION: Performs a search query for light novels matching a given string using the NovelUpdates provider. This method returns a promise that resolves to an array of light novel search result objects, where each object contains ID, title, URL, and cover image. The `query` parameter specifies the search keyword. The method is inherited from the BaseParser class, ensuring consistent behavior across providers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/novelupdates.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnovelupdates.search(\"Clasroom of the Elite\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Spotlight Movies using Consumet sflix API in TypeScript\nDESCRIPTION: Illustrates fetching spotlight movies via sflix.fetchSpotlight(), which returns a promise resolving to a search response Promise<ISearch<IMovieResult>> containing a results array of highlighted movie objects. Results include movie id, title, URL, cover image, rating, description, and type properties. This provides featured movie data for spotlight or highlighted sections. Requires sflix API client initialization.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nsflix.fetchSpotlight().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Manga - ReadManga (TypeScript)\nDESCRIPTION: Searches for manga titles using the ReadManga provider. Takes a query string as input and returns a promise that resolves to an array of manga search results. The ID from the manga result is used to fetch more detailed manga information. This method is a subclass of the BaseParser class.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readmanga.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadManga.search('one piece').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Goku Provider with Consumet API in TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate the Goku provider class from the Consumet API's MOVIES namespace in TypeScript. It requires the Consumet library as a dependency and is typically used as the entry point for accessing other provider methods. The initialized object grants access to searching, fetching details, and streaming functionality. No parameters are required for initialization, and this constructor does not return a value.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst goku = new MOVIES.Goku();\n```\n\n----------------------------------------\n\nTITLE: Searching Media Titles with TMDB Provider in TypeScript\nDESCRIPTION: This snippet performs a media title search using the TMDB provider's search method. It requires a query string (e.g., a movie or anime title) and supports an optional page parameter for pagination. Returns a promise resolving to an array of matched media results, each with id, title, image, type, rating, and releaseDate fields. An instance of TMDB must be initialized prior to use.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/tmdb.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntmdb.search(\"the flash\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  currentPage: 1,\n  results: [\n    {\n      \"id\": 60735,\n      \"title\": \"The Flash\",\n      \"image\": \"https://image.tmdb.org/t/p/original/lJA2RCMfsWoskqlQhXPSLFQGXEJ.jpg\",\n      \"type\": \"TV Series\",\n      \"rating\": 7.807,\n      \"releaseDate\": \"2014\"\n    },\n    {\n      \"id\": 236,\n      \"title\": \"The Flash\",\n      \"image\": \"https://image.tmdb.org/t/p/original/fi1GEdCbyWRDHpyJcB25YYK7fh4.jpg\",\n      \"type\": \"TV Series\",\n      \"rating\": 7.464,\n      \"releaseDate\": \"1990\"\n    },\n    {\n      \"id\": 298618,\n      \"title\": \"The Flash\",\n      \"image\": \"https://image.tmdb.org/t/p/original/oduJooXJya3u6wuA6FgljAFCEQp.jpg\",\n      \"type\": \"Movie\",\n      \"rating\": 0,\n      \"releaseDate\": \"2023\"\n    },\n    {...}\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Top Airing Anime in TypeScript\nDESCRIPTION: Shows how to retrieve a list of currently airing anime sorted by popularity, with optional pagination support.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchTopAiring().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Random Manga from MangaDex\nDESCRIPTION: Retrieves a random manga from MangaDex. Returns a manga result object with full metadata.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nmangadex.fetchRandom().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Light Novel Provider using consumet.ts (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `LIGHT_NOVELS` category from the `@consumet/extensions` package and instantiate a specific light novel provider for interaction. Replace `<providerName>` with the actual name of the desired provider from the list provided.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/light-novels.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ESM\nimport { LIGHT_NOVELS } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst lightnovelProvider = LIGHT_NOVELS.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Fetching SFlix Media Info - TypeScript\nDESCRIPTION: Calls the `fetchMediaInfo` method to retrieve detailed information about a specific movie or TV show. It requires the `mediaId` (which can be an ID or URL obtained from search results). The method returns a Promise resolving to a comprehensive media info object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsflix.fetchMediaInfo(\"tv/free-vincenzo-hd-67955\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Genre List via Gogoanime API (TypeScript)\nDESCRIPTION: This code fetches the complete list of genres and their associated IDs from the Gogoanime API by calling fetchGenreList. It requires no parameters and yields an array of genre objects, each containing an ID and title. A gogoanime instance must be initialized prior to use.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchGenreList().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Media with TMDB Provider in TypeScript\nDESCRIPTION: This snippet calls the fetchTrending method of the TMDB class to retrieve trending items (such as movies, TV series, or people) from the TMDB API. The primary parameter specifies the media type; optional parameters control the trending time period ('day' or 'week') and pagination. The method returns a promise resolving to a structured array of search results, each containing id, title, image URL, type, rating, and release date. Requires an initialized TMDB instance.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/tmdb.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntmdb.fetchTrending(\"the flash\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  currentPage: 1,\n  results: [\n        {\n          id: 848326,\n          title: 'Rebel Moon - Part One: A Child of Fire',\n          image: 'https://image.tmdb.org/t/p/original/ui4DrH1cKk2vkHshcUcGt2lKxCm.jpg',\n          type: 'Movie',\n          rating: 6.457,\n          releaseDate: '2023'\n        },\n        {\n          id: 572802,\n          title: 'Aquaman and the Lost Kingdom',\n          image: 'https://image.tmdb.org/t/p/original/8xV47NDrjdZDpkVcCFqkdHa3T0C.jpg',\n          type: 'Movie',\n          rating: 6.551,\n          releaseDate: '2023'\n        },\n        {\n          id: 930564,\n          title: 'Saltburn',\n          image: 'https://image.tmdb.org/t/p/original/qjhahNLSZ705B5JP92YMEYPocPz.jpg',\n          type: 'Movie',\n          rating: 7.2,\n          releaseDate: '2023'\n        },\n        {...}\n        ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Anime with AnimeKai in TypeScript\nDESCRIPTION: This snippet shows how to search for anime using the `search` method of the AnimeKai provider. It takes a query string as input and returns a promise that resolves to an array of anime search results. The result includes anime id, title, url, image, japaneseTitle, type, sub, dub, and episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nanimekai.search(\"dandadan\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Movies List\nDESCRIPTION: Fetches a list of the most recent movies added to DramaCool, including their titles, URLs, and poster images. This allows users to discover new releases on the platform.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchRecentMovies.then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Light Novel Info using Typescript\nDESCRIPTION: This snippet demonstrates how to use the `fetchLightNovelInfo` method to retrieve detailed information about a specific light novel.  It uses the light novel's ID (`youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e`) to fetch the information, then logs the results to the console. The method returns a promise that resolves to an object containing details about the light novel, including chapters and volumes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadlightnovels.fetchLightNovelInfo(\"youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Information from 9Anime using TypeScript\nDESCRIPTION: Illustrates using the `fetchAnimeInfo` method with an anime ID (e.g., \"uncle-from-another-world.oj9q8\") obtained from search results. This returns a Promise resolving to an `IAnimeInfo` object containing comprehensive details about the anime, including its title, description, genres, and a list of episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/9anime.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnineanime.fetchAnimeInfo(\"uncle-from-another-world.oj9q8\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 'uncle-from-another-world.oj9q8',\n  title: 'UNCLE FROM ANOTHER WORLD',\n  url: 'https://9anime.id/watch/uncle-from-another-world.oj9q8',\n  jpTitle: 'Isekai Ojisan',\n  genres: [ 'Adventure', 'Comedy', 'Fantasy', 'Isekai' ],\n  image: 'https://static.bunnycdn.ru/i/cache/images/1/1e/1e014e4ca206a486abef62cf0795c919.jpg',\n  description: \"Seventeen years ago, Takafumi's uncle fell into a coma, but now he's back like a man...\",\n  type: 'TV',\n  studios: [ { id: 'atelierpontdarc', title: 'AtelierPontdarc' } ],\n  releaseDate: 'Jul 06, 2022',\n  status: 'Ongoing',\n  score: 7.95,\n  premiered: 'Summer 2022',\n  duration: '24 min',\n  views: 316267,\n  otherNames: [ 'Isekai Ojisan', 'UNCLE FROM ANOTHER WORLD' ],\n  totalEpisodes: 4,\n  episodes: [\n    {\n      id: '155250',\n      number: 1,\n      title: 'I`m Finally Back from the Fantasy World of Granbahamal After 17 Long Years!',\n      isFiller: false,\n      url: 'https://9anime.id/ajax/server/list/155250?vrf=TYRythk8'\n    },\n    {\n      id: '155251',\n      number: 2,\n      title: '\"Guardian Heroes\" Shoulda Been Number One!',\n      isFiller: false,\n      url: 'https://9anime.id/ajax/server/list/155251?vrf=TYRythk9'\n    },\n    {...}\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Movies with Consumet API in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch recent movies using the `fetchRecentMovies` method. It returns a promise that resolves into an array of movie objects, each containing information like ID, title, URL, image, release date, duration, and type.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchRecentMovies().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Light Novels using Typescript\nDESCRIPTION: This snippet shows how to use the `search` method to find light novels based on a query. It calls the `search` method with the query \"Classrrom of the Elite\" and logs the results to the console. The search method returns a promise that resolves to an array of light novel search results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadlightnovels.search(\"Classrrom of the Elite\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Media Information by Media ID or URL\nDESCRIPTION: Retrieves detailed information of a media item such as title, status, genres, description, episodes, trailer, characters, and more, using its media ID or URL. Returns a promise resolving to an IMovieInfo object containing comprehensive media metadata.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchMediaInfo(\"drama-detail/vincenzo\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Popular Media List\nDESCRIPTION: Retrieves a list of popular movies or TV shows currently trending on DramaCool. It returns a promise resolving into an object with current page info, total pages, and an array of movie results with IDs, titles, URLs, and images.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchPopular.then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Content by Country with MoviesHD API\nDESCRIPTION: This snippet demonstrates how to fetch content filtered by country using the `fetchByCountrty` method. It calls the method with the country code 'KR' (Korea) and logs the returned data (an object containing a list of movies/TV shows) to the console. The method returns a promise resolving to `ISearch<IMovieResult>`.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchByCountrty('KR').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing NEWS Provider Instance using consumet.ts - TypeScript\nDESCRIPTION: Demonstrates how to import the NEWS module from the @consumet/extensions library and initialize a specific news provider. Replace `<providerName>` with the actual name of the desired provider from the available list to create an instance for fetching news.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/news.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// ESM\nimport { NEWS } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst newsProvider = NEWS.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Information from AsuraScans (TypeScript)\nDESCRIPTION: Retrieves detailed information about a specific manga using its ID, including title, image, rating, status, description, authors, genres, chapters, and recommendations. Returns a promise resolving to an IMangaInfo object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/asurascans.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nasuraScans.fetchMangaInfo('series/solo-max-level-newbie-d9977a85').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Gogoanime API Wrapper with ANIME.Gogoanime (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the Gogoanime API wrapper using ANIME.Gogoanime in TypeScript. It creates a new instance assigned to the variable gogoanime, which is required as the starting point for calling all subsequent API methods. No external dependencies are needed besides the ANIME.Gogoanime class itself, which should be imported or accessible within the scope.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst gogoanime = new ANIME.Gogoanime();\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Information with AnimeFox\nDESCRIPTION: Retrieves detailed information about a specific anime using its ID. Returns comprehensive data including title, cover image, description, type, release year, status, total episodes, and a list of all available episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animefox.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nanimefox.fetchAnimeInfo(\"overlord-iv\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: 'overlord-iv',\n    title: 'Overlord IV',\n    image: 'https://cdn.animefox.tv/cover/overlord-iv.png',\n    description: 'Fourth season of Overlord.',\n    type: 'Summer 2022',\n    releaseYear: '2022',\n    status: 'Ongoing',\n    totalEpisodes: 6,\n    url: 'https://animefox.tv/overlord-iv',\n      episodes: [\n        {\n          id: 'overlord-iv-episode-1',\n          number: 1,\n          title: 'Overlord IV Episode 1',\n          url: 'https://animefox.tv/watch/overlord-iv-episode-1'\n        },\n        {\n          id: 'overlord-iv-episode-2',\n          number: 2,\n          title: 'Overlord IV Episode 2',\n          url: 'https://animefox.tv/watch/overlord-iv-episode-2'\n        },\n        {...},\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent TV Shows with Consumet API in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch recent TV shows using the `fetchRecentTvShows` method. It returns a promise that resolves into an array of TV show objects, each containing information like ID, title, URL, image, season, latest episode, and type.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchRecentTvShows().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Media with SFlix - TypeScript\nDESCRIPTION: Calls the `search` method on the SFlix instance to find media based on a text query. It takes a mandatory `query` string and an optional `page` number (defaulting to 1). The method returns a Promise that resolves to an object containing search results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsflix.search(\"Vincenzo\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching TV/Movies by Country from flixhq API\nDESCRIPTION: This snippet filters movies and TV series by a specified country using `flixhq.fetchByCountry()`. The only required parameter is the country code (e.g., 'KR'). The result, including the current page and results is logged.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchByCountry('KR').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Import and Initialize Comic Provider - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import the COMICS object from the '@consumet/extensions' library and initialize a specific comic provider.  Replace `<providerName>` with the desired provider's name.  The initialized `comicProvider` object can then be used to access the provider's methods for searching, retrieving info, and obtaining chapters.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/comics.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { COMICS } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst comicProvider = COMICS.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Info with AnimeKai in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch detailed information about a specific anime using the `fetchAnimeInfo` method. It requires the anime ID as input and returns a promise resolving to an object containing anime details such as title, description, genres, and episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimekai.fetchAnimeInfo(\"jujutsu-kaisen-4gm6\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing MangaKakalot Class using TypeScript\nDESCRIPTION: Creates a new instance of the MangaKakalot class from the MANGA namespace to enable interaction with the MangaKakalot provider. This instance is used to perform search operations and fetch manga data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangakakalot.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mangakakalot = new MANGA.MangaKakalot();\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending TV Shows using Consumet sflix API in TypeScript\nDESCRIPTION: Illustrates usage of sflix.fetchTrendingTvShows() method to retrieve an array of trending TV shows. The promise resolves to Promise<IMovieResult[]> type containing fields such as id, title, URL, image, season, latest episode, and type. The snippet prints the fetched data to console. Requires API client initialization.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nsflix.fetchTrendingTvShows().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Details - MonosChinos - TypeScript\nDESCRIPTION: Retrieves detailed information for a specific anime using its ID. It can optionally take the total number of episodes to build episode URLs. Returns a Promise resolving to an object with comprehensive anime data, including episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmonoschinos.fetchAnimeInfo(\"jujutsu-kaisen-sub-espanol\", 24).then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime (Overlord IV)\nDESCRIPTION: Searches for anime using a query string.  This example searches for \"Overlord IV\".  The `search` method returns a promise that resolves to an array of anime search results.  The `query` parameter is the search term, and the page and perPage parameters allow for pagination.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anify.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nanify.search(\"Overlord IV\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Movies/TV Shows by Genre with Goku (TypeScript)\nDESCRIPTION: Uses the `goku.fetchByGenre()` method, passing a genre identifier string (e.g., 'action-1') as an argument. It returns a Promise resolving to a paginated search result object (`ISearch<IMovieResult>`) containing pagination info (currentPage, hasNextPage) and an array of movie/TV show results matching the specified genre.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngoku.fetchByGenre('action-1').then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  currentPage: 1,\n  hasNextPage: true,\n  results: [\n    {\n      id: 'movie/watch-the-pastor-111166',\n      title: 'The Pastor',\n      url: 'https://goku.sx/movie/watch-the-pastor-111166',\n      image: 'https://img.goku.sx/xxrz/250x400/576/cf/98/cf98db6049fd31178a415817f2de796b/cf98db6049fd31178a415817f2de796b.jpg',\n      type: 'Movie',\n      releaseDate: '2024',\n      duration: '88min'\n    },\n    {\n      id: 'movie/watch-ang-pintor-at-ang-paraluman-112501',\n      title: 'Ang Pintor At Ang Paraluman',\n      url: 'https://goku.sx/movie/watch-ang-pintor-at-ang-paraluman-112501',\n      image: 'https://img.goku.sx/xxrz/250x400/576/4a/0f/4a0f7df9c4a0d91ae81330d37e8f551e/4a0f7df9c4a0d91ae81330d37e8f551e.jpg',\n      type: 'Movie',\n      releaseDate: '2024',\n      duration: '104min'\n    },\n    {...},\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Airing Schedule with Consumet API (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to fetch the airing schedule of anime using the Consumet API. It calls the `fetchAiringSchedule` method with page number, results per page, week start and end dates (as Unix timestamps), and a boolean indicating whether to filter for not-yet-aired episodes. The API returns a promise that resolves into an array of anime results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nanilist.fetchAiringSchedule(1 , 20, 1660047922, 1661832000, true).then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Movies using Consumet sflix API in TypeScript\nDESCRIPTION: Shows how to fetch trending movies using sflix.fetchTrendingMovies(), which returns a promise resolving to an array of movie objects typed as Promise<IMovieResult[]>. Each movie object includes properties like id, title, URL, image, release date, rating, and type. The snippet logs the results to the console. Dependence on the Consumet sflix API client instance is required.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nsflix.fetchTrendingMovies().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching SFlix Episode Servers - TypeScript\nDESCRIPTION: Calls the `fetchEpisodeServers` method to retrieve a list of available streaming servers for a specific episode. It requires the `episodeId` and `mediaId` (from media info). The method returns a Promise that resolves to an array of server objects.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsflix.fetchEpisodeServers(\"1167571\",\"tv/free-vincenzo-hd-67955\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Movies by Genre using Multimovies API (Typescript)\nDESCRIPTION: This code snippet demonstrates how to use the `multimovies.fetchByGenre` method to retrieve a list of movies belonging to a specific genre. The method returns a promise that resolves to an object containing the results, current page, and information about the existence of the next page. The 'action' genre is used as an example.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmultimovies.fetchByGenre(\"action\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Importing BOOKS module from @consumet/extensions (ESM)\nDESCRIPTION: This code snippet shows how to import the BOOKS module from the @consumet/extensions package using ES modules. It is the starting point for interacting with book providers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/books.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { BOOKS } from '@consumet/extensions';\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages - Typescript\nDESCRIPTION: This snippet demonstrates how to fetch the pages of a specific chapter using the `fetchChapterPages` method. It takes a chapter ID as input and returns a promise that resolves to an array of page objects, each containing the page number and image URL.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangasee123.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmangasee123.fetchChapterPages('Yofukashi-no-Uta-chapter-1').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimeUnity Provider Instance in TypeScript\nDESCRIPTION: Initializes a new AnimeUnity instance from the ANIME namespace, preparing the provider to be used for subsequent API calls. This snippet assumes that the ANIME namespace is properly imported or available in the environment.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animeunity.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst animeunity = new ANIME.AnimeUnity();\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Schedule with AnimeKai in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the anime schedule using the `fetchSchedule` method. It optionally takes a date string in the format 'YYYY-MM-DD' (defaults to current date) and returns a promise resolving to an array of anime schedule results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nanimekai.fetchSchedule().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching TV/Movies by Genre from flixhq API\nDESCRIPTION: This snippet fetches movies and TV series by genre utilizing the `flixhq.fetchByGenre()` function. The function requires a genre string, such as 'drama', as an input. The results, inclusive of page and results data, are logged to the console after the promise resolves.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchByGenre('drama').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing the 9Anime Provider in TypeScript\nDESCRIPTION: Shows the required asynchronous method to create and initialize an instance of the `NineAnime` provider. This instance is then used to call other provider-specific methods.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/9anime.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nineanime = await ANIME.NineAnime.create();\n```\n\n----------------------------------------\n\nTITLE: Fetching Most Popular Anime in TypeScript\nDESCRIPTION: Demonstrates retrieving a paginated list of the most popular anime series across all time periods.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchMostPopular().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimeDrive Instance - TypeScript\nDESCRIPTION: Creates a new instance of the AnimeDrive provider using the ANIME.AnimeDrive class. This is the prerequisite step before making any API calls to search, fetch info, or obtain episode sources. No input parameters are required for initialization, but the ANIME namespace or object must be available in the environment.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animedrive.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst animedrive = new ANIME.AnimeDrive();\n```\n\n----------------------------------------\n\nTITLE: Fetching Most Favorite Anime in TypeScript\nDESCRIPTION: Shows how to get a list of anime series with the highest user favorites, supporting pagination for browsing results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchMostFavorite().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching New Manga - ReadManga (TypeScript)\nDESCRIPTION: Retrieves a list of newly released manga. Accepts a page number as a parameter to paginate through the results. Returns a promise that resolves to an array of manga search results, showing new releases.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readmanga.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreadManga.fetchNewManga(3).then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Streaming Sources Using AnimePahe API in TypeScript\nDESCRIPTION: Retrieves streaming source URLs for a specific episode identified by its episode id. Returns a promise resolving to an object containing required headers (notably the referer header to bypass 403 errors) and an array of source objects specifying URLs, format (e.g., M3U8), video quality, and file size. This method depends on prior knowledge of the episode id typically obtained from the fetched anime info object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animepahe.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimepahe.fetchEpisodeSources(\"c673b4d6cedf5e4cd1900d30d61ee2130e23a74e58f4401a85f21a4e95c94f73\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Movies/TV Shows by Country with Goku (TypeScript)\nDESCRIPTION: Uses the `goku.fetchByCountry()` method, passing a country identifier string (e.g., 'india-105') as an argument. It returns a Promise resolving to a paginated search result object (`ISearch<IMovieResult>`) containing the current page number, a flag indicating if there's a next page, and an array of movie/TV show results matching the country.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngoku.fetchByCountrty('india-105').then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  currentPage: 1,\n  hasNextPage: true,\n  results: [\n    {\n      id: 'movie/watch-bloody-ishq-112024',\n      title: 'Bloody Ishq',\n      url: 'https://goku.sx/movie/watch-bloody-ishq-112024',\n      image: 'https://img.goku.sx/xxrz/250x400/576/c4/14/c414870b61993b268593d962994d15a8/c414870b61993b268593d962994d15a8.jpg',\n      type: 'Movie',\n      releaseDate: '2024',\n      duration: '138min'\n    },\n    {\n      id: 'movie/watch-wild-wild-punjab-111226',\n      title: 'Wild Wild Punjab',\n      url: 'https://goku.sx/movie/watch-wild-wild-punjab-111226',\n      image: 'https://img.goku.sx/xxrz/250x400/576/ec/d7/ecd7abd2c25ef985c1cbd55fa62a97b8/ecd7abd2c25ef985c1cbd55fa62a97b8.jpg',\n      type: 'Movie',\n      releaseDate: '2024',\n      duration: '111min'\n    },\n    {...},\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mangasee123 Provider - Typescript\nDESCRIPTION: This snippet initializes the Mangasee123 provider from the Consumet MANGA module. This is the first step to using the API and accessing its functionality.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangasee123.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mangasee123 = new MANGA.Mangasee123();\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Anime Episodes with AnimeFox\nDESCRIPTION: Retrieves a list of recently released anime episodes. The method accepts an optional page parameter to navigate through pagination. Returns episode details including ID, image, title, URL, and episode number.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animefox.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nanimefox.fetchRecentEpisodes().then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    currentPage: 1,\n    hasNextPage: true,\n    results: [\n        {\n          id: 'kinsou-no-vermeil-gakeppuchi-majutsushi-wa-saikyou-no-yakusai-to-mahou-sekai-wo-tsukisusumu-episode-6',\n          image: 'https://cdn.animefox.tv/cover/kinsou-no-vermeil-gakeppuchi-majutsushi-wa-saikyou-no-yakusai-to-mahou-sekai-wo-tsukisusumu.png',\n          title: 'Kinsou no Vermeil: Gakeppuchi Majutsushi wa Saikyou no Yakusai to Mahou Sekai wo Tsukisusumu',\n          url: 'https://animefox.tv/watch/kinsou-no-vermeil-gakeppuchi-majutsushi-wa-saikyou-no-yakusai-to-mahou-sekai-wo-tsukisusumu-episode-6!',\n          episode: 6\n        },\n        {\n          id: 'overlord-iv-episode-6',\n          image: 'https://cdn.animefox.tv/cover/overlord-iv.png',\n          title: 'Overlord IV',\n          url: 'https://animefox.tv/watch/overlord-iv-episode-6!',\n          episode: 6\n        },\n        {\n          id: 'sekai-no-owari-ni-shiba-inu-to-episode-5',\n          image: 'https://cdn.animefox.tv/cover/sekai-no-owari-ni-shiba-inu-to.png',\n          title: 'Sekai no Owari ni Shiba Inu to',\n          url: 'https://animefox.tv/watch/sekai-no-owari-ni-shiba-inu-to-episode-5!',\n          episode: 5\n        },\n    {...},\n    ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Anilist Metadata Provider in TypeScript\nDESCRIPTION: This snippet shows how to create a new instance of the `Anilist` class without providing an optional `AnimeParser`. This initializes the provider ready to fetch metadata directly from Anilist/Kitsu.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst anilist = new META.Anilist();\n```\n\n----------------------------------------\n\nTITLE: Initializing MangaPill Client with Consumet API in TypeScript\nDESCRIPTION: This snippet shows how to instantiate a new MangaPill client using the Consumet TypeScript library. The MangaPill client, provided by the 'MANGA' namespace, enables access to methods for manga searching, info retrieval, and page fetching. The 'MANGA' module must be properly imported before use.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapill.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mangaPill = new MANGA.MangaPill();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manga Chapter Page Images from MangaPill in TypeScript\nDESCRIPTION: This snippet shows how to fetch all image URLs for pages in a specific manga chapter using the 'fetchChapterPages' method. The method accepts a chapterId string—obtainable from the manga info—and returns a Promise of an array containing image URL and page number pairs. The returned data allows clients to display complete manga chapters page by page. Dependencies include a prior manga info lookup to get the appropriate chapterId, and the initialized MangaPill client.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapill.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangaPill.fetchChapterPages('3258-11004000/one-piece-digital-colored-comics-chapter-1004').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Movies with Goku (TypeScript)\nDESCRIPTION: Uses the `goku.fetchTrendingMovies()` method to asynchronously fetch a list of currently trending movies. It returns a Promise resolving to an array (`IMovieResult[]`) of movie objects with details like ID, title, URL, image, release date, duration, and type. The example logs the data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngoku.fetchTrendingMovies().then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n {\n    id: 'watch-movie/watch-extraction-2-97549',\n    title: 'Extraction 2',\n    url: 'https://goku.sx/watch-movie/watch-extraction-2-97549',\n    image: 'https://img.goku.sx/xxrz/250x400/576/9c/d5/9cd56c00c2b79598f7fba8ba33b2128d/9cd56c00c2b79598f7fba8ba33b2128d.jpg',\n    releaseDate: '2023',\n    duration: '123min',\n    type: 'Movie'\n  },\n  {\n    id: 'watch-movie/watch-the-flash-97519',\n    title: 'The Flash',\n    url: 'https://goku.sx/watch-movie/watch-the-flash-97519',\n    image: 'https://img.goku.sx/xxrz/250x400/576/f7/97/f7975e92348f8055ee359ea5218d1aa5/f7975e92348f8055ee359ea5218d1aa5.jpg',\n    releaseDate: '2023',\n    duration: '144min',\n    type: 'Movie'\n  },\n  {\n    id: 'watch-movie/watch-fast-and-furious-10-8846',\n    title: 'Fast X',\n    url: 'https://goku.sx/watch-movie/watch-fast-and-furious-10-8846',\n    image: 'https://img.goku.sx/xxrz/250x400/576/a9/9b/a99ba7cd6b251e75c6723da994bc02b4/a99ba7cd6b251e75c6723da994bc02b4.jpg',\n    releaseDate: '2023',\n    duration: '142min',\n    type: 'Movie'\n  },\n  {...},\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Search Suggestions - TypeScript\nDESCRIPTION: This snippet fetches search suggestions for a given query using the `animekai.fetchSearchSuggestions()` method. It passes the search query \"One Piece\" as an argument and logs the resulting data to the console. The output is an array of anime search results. Requires the `animekai` library and the search term as input. The promise resolves into an array of `IAnimeResult`.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nanimekai.fetchSearchSuggestions(\"One Piece\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Completed Anime with AnimeKai in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the latest completed anime using the `fetchLatestCompleted` method. It optionally takes a page number as input (defaulting to 1) and returns a promise resolving to an array of anime results, similar to the search results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nanimekai.fetchLatestCompleted().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Multimovies API Response Example (Javascript)\nDESCRIPTION: This Javascript object shows the expected structure of the response returned by `multimovies.fetchByGenre`.  It includes information about the current page, whether there is a next page, and an array of movie objects.  Each movie object contains details such as ID, title, URL, image URL, type, rating, and release date. The output is formatted as a JSON object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  currentPage: 1,\n  hasNextPage: true,\n  results: [\n    {\n      id: 'post-71528',\n      title: 'Marco',\n      url: 'https://multimovies.lat/movies/marco/',\n      image: 'https://multimovies.lat/wp-content/uploads/2024/12/il3ao5gcF6fZNqo1o9o7lusmEyU-185x278.jpg',\n      type: 'Movie',\n      rating: '8.3',\n      releaseDate: 'Dec. 20, 2024'\n    },\n    {\n      id: 'post-70068',\n      title: 'Pushpa 2 – The Rule',\n      url: 'https://multimovies.lat/movies/pushpa-2-the-rule/',\n      image: 'https://multimovies.lat/wp-content/uploads/2024/12/1T21FblunT0y8fz7YaW8JMYgUKm-185x278.jpg',\n      type: 'Movie',\n      rating: '6.6',\n      releaseDate: 'Dec. 04, 2024'\n    },\n    {/*...*/} // Ellipsis added to represent the rest of the data\n  ]}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Schedule by Date with Consumet Zoro Extension in TypeScript\nDESCRIPTION: Fetches the anime airing schedule for a specific date from the zoro extension. The date parameter must be a string in 'YYYY-MM-DD' format, defaulting to the current date if omitted. The function returns a Promise that resolves to a response object containing an array of anime scheduled on that day, including information such as id, title, japaneseTitle, url, airing episode, and airing time.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchSchedule('2024-03-11').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing MangaHere Instance using TypeScript\nDESCRIPTION: Creates an instance of the MangaHere class to enable interaction with MangaHere's API for subsequent operations such as search and data fetching. It requires the MANGA.MangaHere class to be imported or available in the scope.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahere.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mangahere = new MANGA.MangaHere();\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Updated Manga from MangaDex\nDESCRIPTION: Retrieves manga with the latest updates with optional pagination. Returns a paginated list of manga results sorted by update date.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmangadex.fetchLatestUpdates().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Anime Details Output Structure - MonosChinos - JavaScript\nDESCRIPTION: Shows the JSON structure returned by the fetchAnimeInfo method. This structure includes detailed fields like genres, total episodes, description, and an array of episode objects with their ID, number, and URL.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    id: 'jujutsu-kaisen-sub-espanol',\n    title: 'Jujutsu Kaisen',\n    url: 'https://monoschinos2.com/anime/jujutsu-kaisen-sub-espanol',\n    genres: [ 'Acción', 'Escolares', 'Shonen', 'Sobrenatural' ],\n    totalEpisodes: 24,\n    image: 'https://monoschinos2.com/public/img/anime.png',\n    description: 'En un mundo donde los demonios se alimentan de humanos desprevenidos fragmentos del legendario y temido demonio Ryoumen Sukuna....',\n    episodes: [\n        {\n            id: 'jujutsu-kaisen-episodio-1',\n            number: 1,\n            url: 'https://monoschinos2.com/ver/jujutsu-kaisen-episodio-1'\n        },\n        {...},\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Info - Output\nDESCRIPTION: This JavaScript object shows the expected output structure of the `fetchMangaInfo` method, including manga details such as title, image, description, and a list of chapters.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n        id: 'kimetsu-no-yaiba-gotouge-koyoharu',\n        title: 'Kimetsu no Yaiba Manga',\n        image: 'https://xfs-205.mpcdn.net/thumb/W600/ampi/4aa/4aa22fd3ad34407a393f7b6913d2aa2b8f8ffb16_200_313_42953.jpg?acc=rE6O-EEv2KdiP10eToF_JA&exp=1667748279',\n        description: 'Tanjiro is the eldest son in a family that has lost its father. Tanjiro visits another town one day to sell charcoal but ends up staying the night at someone else’s house instead of going home because of a rumor about a demon that stalks a nearby mountain at night. When he goes home the next day, tragedy is waiting for him.',\n        chapters: [\n          {\n            id: 'kimetsu-no-yaiba-gotouge-koyoharu/i2458253',\n            title: 'ch.205: Lives That Make the Years Shine',\n            releaseDate: '2 years ago'\n          },\n          {/*...*/},\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent TV Shows with Dramacool API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the Dramacool API's fetchRecentTvShows property to asynchronously retrieve the latest TV shows. It returns a Promise resolving to a paginated ISearch<IMovieResult> object, which contains details such as currentPage, totalPages, hasNextPage, and a results array of TV show metadata. Dependencies include the Dramacool API integration and proper typings. Input: none; Output: structured object of recent TV shows. Limitation: Output structure relies on the underlying API and available data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchRecentTvShows.then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  currentPage: 1,\n  totalPages: 376,\n  hasNextPage: true,\n  results: [\n    {\n      id: 'drama-detail/kimi-to-yukite-saku-shinsengumi-seishunroku',\n      title: 'Kimi to Yukite Saku: Shinsengumi Seishunroku (2024)',\n      url: 'https://dramacool.com.pa/kimi-to-yukite-saku-shinsengumi-seishunroku-2024-episode-12.html',\n      image: 'https://asianimg.pro/cover/kimi-to-yukite-saku-shinsengumi-seishunroku-1711089348.png',\n      episodeNumber: '12'\n    },\n    {\n      id: 'drama-detail/ayaka-chan-wa-hiroko-senpai-ni-koishiteru',\n      title: 'Ayaka-chan wa Hiroko-senpai ni Koishiteru (2024)',\n      url: 'https://dramacool.com.pa/ayaka-chan-wa-hiroko-senpai-ni-koishiteru-2024-episode-6.html',\n      image: 'https://asianimg.pro/cover/ayaka-chan-wa-hiroko-senpai-ni-koishiteru-2024-1719580986.png',\n      episodeNumber: '6'\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Movies/TV Series using ViewAsian\nDESCRIPTION: This code snippet demonstrates how to search for movies or TV series using the `search` method of the `ViewAsian` class.  It takes a query string as input and returns a promise that resolves to an array of search results. The example searches for \"Vincenzo\".\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/viewAsian.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nviewAsian.search(\"Vincenzo\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Installing consumet.ts Extensions with Yarn - Shell\nDESCRIPTION: This snippet shows how to install the @consumet/extensions package using yarn. It adds the consumet.ts extensions as a dependency, modifying yarn.lock and your project manifest automatically. Ensure yarn is globally installed before running the command. Input: none. Output: installed package for use in your project.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @consumet/extensions\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiMovies Provider (TypeScript)\nDESCRIPTION: Instantiates a new instance of the `MultiMovies` class from the `MOVIES` namespace within the Consumet providers. This is the required first step before calling any provider methods to interact with the MultiMovies source.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst multimovies = new MOVIES.MultiMovies();\n```\n\n----------------------------------------\n\nTITLE: Initializing DramaCool Media Provider using TypeScript\nDESCRIPTION: Creates an instance of the DramaCool class from the MOVIES namespace, enabling interaction with DramaCool's media data. It serves as the main entry point for all media-related operations like search and fetch actions.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst dramacool = new MOVIES.DramaCool();\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Genres with Consumet API (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the Consumet API to fetch anime genres. It calls the `fetchAnimeGenres` method with a list of genres and logs the results to the console. The API returns a promise that resolves into an array of anime results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nanilist.fetchAnimeGenres([\"Action\", \"Adventure\"])\n.then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ViewAsian Class\nDESCRIPTION: This code snippet initializes a new instance of the `ViewAsian` class, which is used to interact with the ViewAsian service.  This instantiation is the prerequisite for utilizing the methods like `search`, `fetchMediaInfo`, and `fetchEpisodeSources` later on.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/viewAsian.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst viewAsian = new MOVIES.ViewAsian();\n```\n\n----------------------------------------\n\nTITLE: Example Light Novel Info Output (Javascript)\nDESCRIPTION: This Javascript object represents the expected output of the `fetchLightNovelInfo` method. It contains details about a light novel, including its ID, title, URL, image, author, genres, rating, views, description, status, page count, and a list of chapters. This illustrates the data structure returned by the `fetchLightNovelInfo` function.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: 'youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e',\n  title: 'Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e Novel (Classroom of the Elite Novel)',\n  url: 'https://readlightnovels.net/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e.html',\n  image: 'https://readlightnovels.net/wp-content/uploads/2020/01/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e.jpg',\n  author: 'Kinugasa Shougo衣笠彰梧',\n  genres: [\n    'Drama',\n    'Harem',\n    '...'\n  ],\n  rating: 8.6,\n  views: 651729,\n  description: 'Kōdo Ikusei Senior High School, a leading prestigious school with state-of-the-art facilities where nearly...',\n  status: 'Ongoing',\n  pages: 13,\n  chapters: [\n    {\n      id: 'youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e/volume-1-prologue-the-structure-of-japanese-society',\n      title: 'Volume 1, Prologue: The structure of Japanese society',\n      url: 'https://readlightnovels.net/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e/volume-1-prologue-the-structure-of-japanese-society.html'\n    },\n    {...}\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MangaHost API - TypeScript\nDESCRIPTION: This snippet initializes the `MangaHost` API client. It instantiates the `MangaHost` class to create an object for making API calls related to manga content. This object serves as the main entry point for all subsequent operations.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahost.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mangahost = new MANGA.MangaHost();\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with AnimeSaturn - TypeScript\nDESCRIPTION: This snippet fetches the streaming sources for a specific anime episode using the `fetchEpisodeSources` method. It takes an episode ID as input (found within the anime info object). The method returns a promise that resolves to an array of episode sources (URLs for streaming) and also might include subtitles.  It suggests the second source is more stable.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animesaturn.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimesaturn.fetchEpisodeSources(\"Tokyo-Revengers-ep-1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Direct Download Links for Episodes from Gogoanime Using TypeScript\nDESCRIPTION: This snippet shows how to obtain direct downloadable links for an episode using fetchDirectDownloadLink from the Consumet SDK. It takes a required downloadUrl string parameter, typically sourced from the fetchEpisodeSources output, and an optional captchaToken for advanced captcha validation scenarios. The promise resolves with an array of download links, each containing descriptive source labels with video quality and MP4 format, and a direct link URL. This function is useful for clients wanting direct file downloads instead of streaming URLs, with dependencies including captcha token retrieval techniques.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngogoanime.fetchDirectDownloadLink(\"https://s3taku.com/download?id=MjI4Mzg0&typesub=Gogoanime-SUB&title=Hazurewaku+no+%22Joutai+Ijou+Skill%22+de+Saikyou+ni+Natta+Ore+ga+Subete+wo+Juurin+suru+made+Episode+4\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimePahe API Client in TypeScript\nDESCRIPTION: Creates an instance of the AnimePahe API client using the ANIME namespace. This instance (`animepahe`) is used to call subsequent API methods such as search and fetch. It requires the ANIME module to be available and properly imported.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animepahe.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst animepahe = new ANIME.AnimePahe();\n```\n\n----------------------------------------\n\nTITLE: Sample Output for MovieHdWatch Search Results - JavaScript\nDESCRIPTION: Shows the structure of the data returned from the search method for MovieHdWatch when querying for a term like 'Batman'. The output includes currentPage, hasNextPage, and an array of result objects with detailed information such as id, title, url, image, releaseDate, seasons, duration, and type. This is an example output to understand how to process or further handle the search results in an application.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  currentPage: 1, // current page\n  hasNextPage: true, // if there is a next page\n  results: [\n    {\n      id: 'tv/watch-batman-online-39276',\n      title: 'Batman',\n      url: 'https://movieshd.watch/tv/watch-batman-online-39276',\n      image: 'https://img.movieshd.watch/xxrz/250x400/391/fb/f9/fbf9562059527ed2075e3e61bf7439c6/fbf9562059527ed2075e3e61bf7439c6.jpg',\n      releaseDate: undefined,\n      seasons: 3,\n      duration: undefined,\n      type: 'TV Series'\n    },\n    {\n      id: 'movie/watch-batman-online-13647',\n      title: 'Batman',\n      url: 'https://movieshd.watch/movie/watch-batman-online-13647',\n      image: 'https://img.movieshd.watch/xxrz/250x400/391/7d/df/7ddf28de1b0053327ad6ff1c974894e8/7ddf28de1b0053327ad6ff1c974894e8.jpg',\n      releaseDate: '1966',\n      seasons: undefined,\n      duration: '105m',\n      type: 'Movie'\n    },\n    {\n      id: 'movie/watch-batman-online-18073',\n      title: 'Batman',\n      url: 'https://movieshd.watch/movie/watch-batman-online-18073',\n      image: 'https://img.movieshd.watch/xxrz/250x400/391/d9/bc/d9bc77bc0c00049fbaba0896b51d361f/d9bc77bc0c00049fbaba0896b51d361f.jpg',\n      releaseDate: '1989',\n      seasons: undefined,\n      duration: '126m',\n      type: 'Movie'\n    },\n    {...},\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime Info with AnimeSaturn - TypeScript\nDESCRIPTION: This code snippet retrieves detailed information about a specific anime using the `fetchAnimeInfo` method. It requires the anime's ID as input, which can be obtained from the search results. The method returns a promise that resolves to an object containing the anime's title, genres, image, cover, description, and episodes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animesaturn.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimesaturn.fetchAnimeInfo(\"Tokyo-Revengers-aaaaaa\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime by Genre via Gogoanime API (TypeScript)\nDESCRIPTION: This example retrieves a list of anime associated with a specific genre by calling fetchGenreInfo. It accepts the genre ID (e.g., 'action') and an optional page number (default: 1), returning paginated results with anime IDs, titles, images, release dates, and URLs. Requires prior initialization of gogoanime and a valid genre ID.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchGenreInfo('action').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources from TMDB in TypeScript\nDESCRIPTION: Example code demonstrating how to use the tmdb.fetchEpisodeSources method to retrieve streaming sources for a TV episode. The method accepts an episode ID and media ID as parameters and returns a promise that resolves to an array of sources.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/tmdb.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntmdb.fetchEpisodeSources(\"2899\", \"tv/watch-the-flash-39535\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimeSaturn Client - TypeScript\nDESCRIPTION: This snippet initializes a new instance of the `ANIME.AnimeSaturn` class, which serves as the entry point for interacting with the AnimeSaturn API. No parameters are required for initialization.  This instantiation is a prerequisite for using the other methods.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animesaturn.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst animesaturn = new ANIME.AnimeSaturn();\n```\n\n----------------------------------------\n\nTITLE: Fetching Recently Added Anime with Consumet Zoro Extension in TypeScript\nDESCRIPTION: Retrieves a list of recently added anime titles from the zoro source. This function supports an optional page parameter to paginate results, defaulting to page 1. It returns a Promise resolving to a structured response including pagination metadata and an array of anime objects, each containing properties such as id, title, url, image, type, duration, japaneseTitle, nsfw flag, sub and dub counts, and episode information.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchRecentlyAdded().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chapter Pages in TypeScript\nDESCRIPTION: Fetches an array of page objects for a specific chapter using its chapter ID. Returns a promise resolving to an array of IMangaChapterPage objects, each containing the image URL and page number. Example demonstrates fetching pages for chapter 'one-piece-colored-edition-55493/en/chapter-1004' and logs the pages.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangareader.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangaPill.fetchChapterPages('one-piece-colored-edition-55493/en/chapter-1004').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Spotlight Anime - TypeScript\nDESCRIPTION: This snippet fetches spotlight anime data using the `animekai.fetchSpotlight()` method. It then uses `.then()` to handle the promise and logs the retrieved data to the console. The output is an array of anime results, each containing details like ID, title, banner image, and description. Requires the `animekai` library to be imported and initialized. The promise resolves into an array of `IAnimeResult`.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nanimekai.fetchSpotlight().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Popular Anime List via Gogoanime API (TypeScript)\nDESCRIPTION: This snippet calls the fetchPopular method to obtain a paginated list of currently popular anime series from Gogoanime. It accepts an optional page parameter (default: 1), returning details such as anime IDs, release dates, images, URLs, and titles. Requires gogoanime initialization; returns a promise of the structured result set.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngogoanime.fetchPopular().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recently Added Manga from MangaDex\nDESCRIPTION: Retrieves recently added manga with optional pagination. Returns a paginated list of manga results sorted by addition date.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmangadex.fetchRecentlyAdded().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources - MonosChinos - TypeScript\nDESCRIPTION: Fetches available streaming sources for a specific anime episode using its ID. This method may not always work due to provider-specific server variations. It returns a Promise resolving to an object containing an array of source details.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nmonoschinos.fetchEpisodeSources(\"jujutsu-kaisen-episodio-1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending TV Shows with Goku (TypeScript)\nDESCRIPTION: Uses the `goku.fetchTrendingTvShows()` method to asynchronously fetch a list of currently trending TV shows. It returns a Promise resolving to an array (`IMovieResult[]`) of TV show objects, including ID, title, URL, image, season, latest episode, and type. The example logs the data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngoku.fetchTrendingTvShows().then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 'watch-series/watch-secret-invasion-88246',\n    title: 'Secret Invasion',\n    url: 'https://goku.sx/watch-series/watch-secret-invasion-88246',\n    image: 'https://img.goku.sx/xxrz/250x400/576/84/21/84218c778e006f43777e1f8fe18a2560/84218c778e006f43777e1f8fe18a2560.jpg',\n    season: '1',\n    latestEpisode: '1',\n    type: 'TV Series'\n  },\n  {\n    id: 'watch-series/watch-black-mirror-39396',\n    title: 'Black Mirror',\n    url: 'https://goku.sx/watch-series/watch-black-mirror-39396',\n    image: 'https://img.goku.sx/xxrz/250x400/576/d6/9d/d69d87285ef143fab74322227616bb04/d69d87285ef143fab74322227616bb04.jpg',\n    season: '6',\n    latestEpisode: '5',\n    type: 'TV Series'\n  },\n  {\n    id: 'watch-series/watch-demon-slayer-kimetsu-no-yaiba-42177',\n    title: 'Demon Slayer: Kimetsu no Yaiba',\n    url: 'https://goku.sx/watch-series/watch-demon-slayer-kimetsu-no-yaiba-42177',\n    image: 'https://img.goku.sx/xxrz/250x400/576/d7/38/d7380c0e22b5493e8f2257c539d8a6fa/d7380c0e22b5493e8f2257c539d8a6fa.jpg',\n    season: '3',\n    latestEpisode: '11',\n    type: 'TV Series'\n  },\n  {...},\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Mangapark\nDESCRIPTION: This snippet initializes a new instance of the Mangapark class from the Consumet MANGA module. This is the entry point for interacting with the Mangapark API.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mangapark = new MANGA.Mangapark();\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Info with MangaHost - TypeScript\nDESCRIPTION: This snippet fetches detailed information about a specific manga using the `fetchMangaInfo` method, using the manga ID from the search results.  It retrieves a promise that resolves with an object containing manga details such as ID, title, description, chapters, image, genres, and status.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahost.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmangahost.fetchMangaInfo(\"oyasumi-punpun-mh34076\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning Consumet Repository (Shell)\nDESCRIPTION: Provides the shell command to clone a forked version of the consumet.ts repository to your local machine. Ensure you replace the placeholder with your actual GitHub username. This is the first step after forking the repository.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-username>/consumet-api.git\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Servers with MultiMovies (TypeScript)\nDESCRIPTION: Retrieves a list of available streaming servers for a given episode. This method accepts the `episodeId` or episode URL as a parameter. It returns a Promise that resolves into an array of objects (`IEpisodeServer[]`), each listing a server name and its corresponding URL.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/multimovies.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmultimovies.fetchEpisodeServers(\"vincenzo-2021-episode-1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Servers from 9Anime using TypeScript\nDESCRIPTION: Shows how to use the `fetchEpisodeServers` method with an episode ID (e.g., \"155250\") from the anime info object. This method returns a Promise that resolves to an array of `IEpisodeServer` objects, each specifying a server name (like 'vidstream', 'mycloud') and its corresponding URL.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/9anime.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnineanime.fetchEpisodeServers(\"155250\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    name: 'vidstream',\n    url: 'https://9anime.id/ajax/server/1080419?vrf=TYFtBg99w'\n  },\n  {\n    name: 'mycloud',\n    url: 'https://9anime.id/ajax/server/1080418?vrf=TYFtBg99g'\n  },\n  {\n    name: 'filemoon',\n    url: 'https://9anime.id/ajax/server/1219176?vrf=TYN2vR07%2BA'\n  },\n  {\n    name: 'streamtape',\n    url: 'https://9anime.id/ajax/server/1080423?vrf=TYFtBg%2BQ'\n  },\n  {\n    name: 'mp4upload',\n    url: 'https://9anime.id/ajax/server/1080422?vrf=TYFtBg%2BA'\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Light Novel Information with NovelUpdates in TypeScript\nDESCRIPTION: Fetches detailed information about a specific light novel identified by its ID or URL using the NovelUpdates provider. The `lightNovelUrl` parameter accepts the novel ID or URL found from search results, and `chapterPage` (optional) specifies which chapter page to fetch, defaulting to -1 to retrieve all chapters. The returned promise resolves to an object containing metadata such as title, author, genres, rating, description, status, and an array of chapters or volumes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/novelupdates.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnovelupdates.fetchLightNovelInfo(\"youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent SFlix Movies - TypeScript\nDESCRIPTION: Calls the `fetchRecentMovies` method to retrieve a list of recently added movies on SFlix. This method does not require any parameters. It returns a Promise that resolves to an array of movie result objects.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsflix.fetchRecentMovies().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching News Info by ID - TypeScript\nDESCRIPTION: This code fetches detailed information about a specific news article by its ID. The `fetchNewsInfo()` method of the `ann` object is used, taking the news ID as a string parameter. It logs the resulting news information object to the console.  The example includes the expected output structure for reference.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/ann.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nann.fetchNewsInfo(\"2022-08-26/higurashi-no-naku-koro-ni-rei-oni-okoshi-hen-manga-ends/.188996\" /* --> https://www.animenewsnetwork.com/news/2022-08-26/higurashi-no-naku-koro-ni-rei-oni-okoshi-hen-manga-ends/.188996*/ ).then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Accessing Libgen Provider Properties in TypeScript\nDESCRIPTION: Variables that provide metadata about the Libgen provider, including its name, NSFW status, and operational status. These properties help determine the provider's capabilities and current state.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/libgen.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @type {string}\n*/\nLibgen.name; // the name of the provider.\n/**\n * @type {boolean}\n*/\nLibgen.isNSFW; // if NSFW\n/**\n * @type {boolean}\n*/\nLibgen.isWorking; // if provider is working\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Movies from FlixHQ\nDESCRIPTION: Retrieves a list of the most recent movies added to FlixHQ, returning a promise that resolves to an array of movie result objects including id, title, URL, image, release date, duration, and type.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchRecentMovies().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Books with Libgen in TypeScript\nDESCRIPTION: Method for searching books on Libgen by title with pagination support. Returns a Promise containing LibgenResult data which likely includes book listings matching the query.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/libgen.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Scrapes a libgen search page by book query\n * \n * @param {string} query - the name of the book\n * @param {number} [page=1] - maximum number of results\n * @returns {Promise<LibgenResult>}\n*/\nLibgen.search(\"One Houndred Years of Solitude\", 30);\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Details including chapters with MangaKakalot in TypeScript\nDESCRIPTION: Retrieves detailed information about a specific manga using its mangaId. The promise resolves into an object containing title, description, genres, status, views, authors, and chapter list with chapter IDs, titles, views, and release dates. Useful for displaying manga info like chapters and alternative titles.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangakakalot.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nmangakakalot.fetchMangaInfo(\"manga-kr954974\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Movies with Goku (TypeScript)\nDESCRIPTION: Uses the `goku.fetchRecentMovies()` method to asynchronously retrieve a list of recently added movies. The method returns a Promise that resolves to an array of movie objects (`IMovieResult[]`), each containing details like ID, title, URL, image, release date, duration, and type. The example logs the resolved data to the console.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/goku.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngoku.fetchRecentMovies().then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 'watch-movie/watch-the-wedding-contract-97651',\n    title: 'The Wedding Contract',\n    url: 'https://goku.sx/watch-movie/watch-the-wedding-contract-97651',\n    image: 'https://img.goku.sx/xxrz/250x400/576/33/10/33107bd51d8b311170c90b6f300fa362/33107bd51d8b311170c90b6f300fa362.jpg',\n    releaseDate: '2023',\n    duration: '84min',\n    type: 'Movie'\n  },\n  {\n    id: 'watch-movie/watch-the-nudels-of-nudeland-97648',\n    title: 'The Nudels of Nudeland',\n    url: 'https://goku.sx/watch-movie/watch-the-nudels-of-nudeland-97648',\n    image: 'https://img.goku.sx/xxrz/250x400/576/f2/89/f289a6f11fac3f1633bac1d6c172d54d/f289a6f11fac3f1633bac1d6c172d54d.jpg',\n    releaseDate: '2022',\n    duration: '95min',\n    type: 'Movie'\n  },\n  {\n    id: 'watch-movie/watch-the-machine-97645',\n    title: 'The Machine',\n    url: 'https://goku.sx/watch-movie/watch-the-machine-97645',\n    image: 'https://img.goku.sx/xxrz/250x400/576/eb/8d/eb8ddc18d6b098be9f04203c2d3d0a6b/eb8ddc18d6b098be9f04203c2d3d0a6b.jpg',\n    releaseDate: '2023',\n    duration: '112min',\n    type: 'Movie'\n  },\n  {...},\n]\n```\n\n----------------------------------------\n\nTITLE: Getting News Info from Feed - TypeScript\nDESCRIPTION: This snippet retrieves detailed information about a specific news item from the Anime News Network.  It first calls `fetchNewsFeeds()` to get a list of news feeds, then selects the first feed (`res[0]`) and calls `getInfo()` on it. The result, a Promise resolving to news info is logged to the console.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/ann.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nann.fetchNewsFeeds().then((res) => {\n    res[0].getInfo().then(console.log)\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Anime by Studio with Consumet Zoro Extension in TypeScript\nDESCRIPTION: Retrieves a paginated list of anime associated with a given studio id from the zoro source. The required 'studio' parameter is a string identifying the animation studio, for example, 'toei-animation'. The optional page parameter allows navigation through multiple pages of results (defaulting to 1). Returns a Promise with a structured response containing pagination metadata and an array of anime belonging to the specified studio, including id, title, url, image, type, duration, japaneseTitle, nsfw flag, and counts of sub and dub versions.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchStudio('toei-animation').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Manga with MangaHost - TypeScript\nDESCRIPTION: This code searches for manga titles using the `search` method of the `MangaHost` API.  It takes a query string as input (e.g., \"punpun\") and returns a promise that resolves to an array of manga search results. The output includes manga ID, title, image, and a header for the image.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangahost.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmangahost.search(\"punpun\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Complete Manga Information and Chapters in TypeScript\nDESCRIPTION: Fetches detailed information about a specific manga by its ID, including title, author, genres, description, and chapters; returns a promise resolving to an object with all manga details. Essential for viewing manga details and chapter listings.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/vyvymanga.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nvyvyManga.fetchMangaInfo('365').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending TV Shows with MoviesHD API\nDESCRIPTION: This snippet demonstrates how to fetch trending TV shows using the `fetchTrendingTvShows` method. It calls the method and logs the response (an array of TV show objects) to the console. This method returns a promise that resolves to an array of `IMovieResult` objects.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchTrendingTvShows().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Recent Movies Output Example in JavaScript\nDESCRIPTION: This JavaScript array represents the expected output of the `fetchRecentMovies` method. It provides a list of recent movies with details such as ID, title, URL, image, release date, duration, and movie type, facilitating the display of a movie catalog.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n[\n {\n    id: 'movie/watch-worlds-best-online-97678',\n    title: \"World's Best\",\n    url: 'https://movieshd.watch/movie/watch-worlds-best-online-97678',\n    image: 'https://img.movieshd.watch/xxrz/250x400/391/39/a6/39a6f63d6aa29ed36b292e029d3d38f0/39a6f63d6aa29ed36b292e029d3d38f0.jpg',\n    releaseDate: '2023',\n    duration: '101m',\n    type: 'Movie'\n  },\n  {\n    id: 'movie/watch-through-my-window-across-the-sea-online-97675',\n    title: 'Through My Window: Across the Sea',\n    url: 'https://movieshd.watch/movie/watch-through-my-window-across-the-sea-online-97675',\n    image: 'https://img.movieshd.watch/xxrz/250x400/391/fd/fa/fdfaee0cf2c0321390292d5d2f60c9b4/fdfaee0cf2c0321390292d5d2f60c9b4.jpg',\n    releaseDate: '2023',\n    duration: '110m',\n    type: 'Movie'\n  },\n  {\n    id: 'movie/watch-the-perfect-find-online-97669',\n    title: 'The Perfect Find',\n    url: 'https://movieshd.watch/movie/watch-the-perfect-find-online-97669',\n    image: 'https://img.movieshd.watch/xxrz/250x400/391/c9/a7/c9a780f7d7cd1eb8a72c3e4ee5880426/c9a780f7d7cd1eb8a72c3e4ee5880426.jpg',\n    releaseDate: '2023',\n    duration: '99m',\n    type: 'Movie'\n  },\n  {...},\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Pages of a Specific Manga Chapter in TypeScript\nDESCRIPTION: Retrieves the images for each page of a manga chapter given its chapter ID; provides an array of page objects containing image URLs and page numbers. This method is crucial for loading manga pages for display in a viewer.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/vyvymanga.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nvyvyManga.fetchChapterPages('https://summonersky.com/rds/rdsd?data=ajV1V3Q1QkJtenN2WGFMQkZiRDVCVkRESEJVNHFOR3JEQ0RmeW9RcmY4ZVJNc1JDMzBBWnQ2VEFxbTgvWUxTb3BsUTN0bWVLNlV3VXpIMkJXc0VJRy9oQUIrSmlCazhxTHBKT3RRTHB6ZXdCWCsrZDlscDFGcUIyNUFBPT06Oj36AI7zIUTNdCiLjky42QE%3D').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Example Search Result Output (Javascript)\nDESCRIPTION: This Javascript object represents the expected output format of the `search` method. It contains an array of light novel results, where each result includes the light novel's ID, title, URL, and image URL. This illustrates the data structure returned by the `search` function.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  results: [\n    {\n      id: 'youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e', // the light novel id\n      title: 'Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e Novel (Classroom of the Elite Novel)',\n      url: 'https://readlightnovels.net/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e.html',\n      image: 'https://readlightnovels.net/wp-content/uploads/2020/01/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e.jpg'\n    },\n    {...}\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages from MangaDex\nDESCRIPTION: Retrieves the pages for a specific chapter using its ID. Returns an array of page objects containing image URLs and page numbers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangadex.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmangadex.fetchChapterPages(\"a79255c8-21b5-4a8c-a586-48469fa87020\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga via VyvyManga's Search Method in TypeScript\nDESCRIPTION: Performs a manga search using the VyvyManga provider with a specified query string; returns a promise resolving to an array of manga search results. Useful for finding manga titles matching user input.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/vyvymanga.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nvyvyManga.search('one piece').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Watch List - TypeScript\nDESCRIPTION: This snippet calls the `fetchWatchList()` method, which retrieves a user's watch list. The `connectSid` parameter (session ID from website cookies) is required to authenticate the request and get the user's watch list. It returns a promise that resolves to an array of anime, including their IDs, titles, and other details. The session ID is used for user-specific data.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchWatchList(\"{user_connect_sid}\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Completed Anime in TypeScript\nDESCRIPTION: Demonstrates how to retrieve recently completed anime series with optional pagination support.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchLatestCompleted().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chapter Pages with BRMangas\nDESCRIPTION: Demonstrates how to fetch all pages of a manga chapter using the fetchChapterPages method with a chapter ID, returning an array of page objects with image URLs.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/brmangas.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbrmangas.fetchChapterPages(\"berserk-16-online\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n      img: 'https://cdn.plaquiz.xyz/uploads/b/berserk/-16/1.jpg',\n      page: 0,\n      title: 'Page 1',\n      headerForImage: { Referer: 'https://www.brmangas.net' }\n  },\n  {\n      img: 'https://cdn.plaquiz.xyz/uploads/b/berserk/-16/2.jpg',\n      page: 1,\n      title: 'Page 2',\n      headerForImage: { Referer: 'https://www.brmangas.net' }\n  },\n  {...}\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources with Consumet API (TypeScript)\nDESCRIPTION: This code snippet shows how to fetch episode sources for a given anime episode using the Consumet API. It calls the `fetchEpisodeSources` method with the episode ID and logs the results to the console. The API returns a promise that resolves into an object containing the episode sources and necessary headers (Referer).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nanilist.fetchEpisodeSources(\"youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-tv-episode-12\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Spotlight Titles with Dramacool API in TypeScript\nDESCRIPTION: This code example shows how to call the fetchSpotlight method of the Dramacool API using TypeScript to fetch an array of movies in spotlight. It returns a Promise resolving to an ISearch<IMovieResult> object, primarily exposing a results array containing highlighted TV show or movie entries. This requires an existing Dramacool API interface and the relevant types. Input: none; Output: an object with a list of spotlighted titles and their core metadata. Output structure may change if the API schema changes.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchSpotlight().then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  results: [\n    {\n      id: 'drama-detail/the-judge-from-hell',\n      title: 'The Judge from Hell',\n      url: 'https://asianc.co/drama-detail/the-judge-from-hell',\n      cover: 'https://asianc.co/plugins/slideshow/slides/new/dramacool-the-judge-from-hell.png'\n    },\n    {\n      id: 'drama-detail/mom-s-friend-s-son',\n      title: 'Love Next Door',\n      url: 'https://asianc.co/drama-detail/mom-s-friend-s-son',\n      cover: 'https://asianc.co/plugins/slideshow/slides/new/dramacool-mom-s-friend-s-son.png'\n    },\n    {...}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Servers from Gogoanime Using TypeScript\nDESCRIPTION: This snippet illustrates fetching the list of streaming servers available for a specific episode ID or URL using fetchEpisodeServers. The episodeId parameter is required and can be either an episode identifier or the episode's URL string. The function returns a promise that resolves into an array of episode server objects, each containing a server name and a URL for streaming. Dependencies include the IEpisodeServer interface from the Consumet types, and the function helps in retrieving multiple sources/providers hosting the requested episode.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/gogoanime.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngogoanime.fetchEpisodeServers(\"one-piece-episode-1022\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Consumet Movie Provider (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the `MOVIES` category from `@consumet/extensions` using ESM syntax and how to create a new instance of a specific movie provider within that category. Replace `<providerName>` with the actual name of the desired provider.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/movies.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { MOVIES } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst movieProvider = new MOVIES.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Initializing Anify API Client\nDESCRIPTION: Initializes a new instance of the `Anify` class, which acts as the entry point for interacting with the anime API. This is a prerequisite for all subsequent operations.  No specific parameters are passed during initialization.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anify.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst anify = new ANIME.Anify();\n```\n\n----------------------------------------\n\nTITLE: Fetching Spotlight Movies from flixhq API\nDESCRIPTION: This snippet retrieves a selection of spotlight movies by using `flixhq.fetchSpotlight()`. The results are printed to the console after the promise resolves. No parameters are required for this function call.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchSpotlight().then(data => {\n    console.log(data);\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Anime Provider in TypeScript\nDESCRIPTION: Demonstrates how to import the ANIME category from '@consumet/extensions' using ESM syntax and initialize a specific anime provider instance. Replace `<providerName>` with the actual name of the desired provider from the provided list (e.g., Gogoanime, Zoro).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/anime.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM\nimport { ANIME } from '@consumet/extensions';\n\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst animeProvider = ANIME.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Fetching Spotlight Anime - TypeScript\nDESCRIPTION: This snippet calls the `fetchSpotlight()` method of the `zoro` object to retrieve a list of spotlight anime. The data is then logged to the console. It requires the `zoro` object to be initialized with the Zoro provider. The output is a promise resolving to an array of anime results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchSpotlight().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SFlix Provider Instance - TypeScript\nDESCRIPTION: Creates a new instance of the SFlix provider by accessing the SFlix class within the MOVIES namespace of the consumet library. This instance is the entry point for interacting with the SFlix provider's functionalities.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/sflix.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sflix = new MOVIES.SFlix();\n```\n\n----------------------------------------\n\nTITLE: Fetching Continue Watching Episodes - TypeScript\nDESCRIPTION: This snippet uses `fetchContinueWatching()` to retrieve episodes the user has previously been watching. It requires the `connectSid` parameter, representing a session ID, obtained from the website's cookies. The returned promise resolves to an array of episodes data, including the episode ID, title, and more. It depends on the session ID for authentication.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchContinueWatching(\"{user_connect_sid}\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Search Suggestions - TypeScript\nDESCRIPTION: This snippet calls `fetchSearchSuggestions()` with a search query ('One Piece') to get anime search suggestions. The results are logged to the console. This function requires the `zoro` object to be initialized and a search query string.  The function returns a promise that resolves to an array of anime results that match the search query.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nzoro.fetchSearchSuggestions(\"One Piece\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiating MonosChinos Provider - TypeScript\nDESCRIPTION: Creates a new instance of the MonosChinos anime provider class from the ANIME namespace. This instance is required to access the provider's search and data fetching methods. It relies on the consumet library being available.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst monoschinos = new ANIME.MonosChinos();\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimeKai in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the AnimeKai provider using TypeScript. It creates a new instance of the `ANIME.AnimeKai` class, making it ready for use in subsequent operations.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animekai.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst animekai = new ANIME.AnimeKai();\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources from 9Anime using TypeScript\nDESCRIPTION: Demonstrates the `fetchEpisodeSources` method, which takes an episode ID (e.g., \"155250\") found in the anime info object. It's intended to return a Promise resolving to an `ISource` object containing streaming source URLs. Note: The documentation indicates this method may not be functional.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/9anime.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnineanime.fetchEpisodeSources(\"155250\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlol jk. it doesnt work yet :).\n```\n\n----------------------------------------\n\nTITLE: Initializing AsuraScans Instance\nDESCRIPTION: Creates a new instance of the AsuraScans class, enabling access to methods for searching manga and retrieving chapters and pages.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/asurascans.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst asuraScans = new MANGA.AsuraScans();\n```\n\n----------------------------------------\n\nTITLE: Initializing BRMangas Provider in TypeScript\nDESCRIPTION: Creates a new instance of the BRMangas provider from the MANGA namespace to access Brazilian manga content.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/brmangas.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst brmangas = new MANGA.BRMangas();\n```\n\n----------------------------------------\n\nTITLE: Fetching Episode Sources and Subtitles\nDESCRIPTION: Retrieves streaming sources, subtitles, and download link for a specific episode using its episode ID. The result includes an array of source URLs (like M3U8 streams), subtitle URLs with language info, and a download link (specific to AsianLoad).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/dramacool.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ndramacool.fetchEpisodeSources(\"vincenzo-2021-episode-1\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Advanced Anime Search - Typescript\nDESCRIPTION: This snippet demonstrates how to use the `fetchAdvancedSearch` method of the `Zoro` class to fetch a list of anime based on various filters, such as page number, type, status. It returns a promise that resolves into an array of anime, including information like id, title, url, image, and more. This method can take several optional parameters to filter the search.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/zoro.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nzoro.fetchAdvancedSearch(1, 'tv', 'finished_airing').then(data => {\n  console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadManga Provider\nDESCRIPTION: Initializes the ReadManga provider class. This creates an instance that can be used to call the different methods that interact with the ReadManga API.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readmanga.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  const readManga = new MANGA.ReadManga();\n```\n\n----------------------------------------\n\nTITLE: Searching Anime Titles using AnimeDrive - TypeScript\nDESCRIPTION: Performs an asynchronous search for anime titles matching the provided query string using the search method of AnimeDrive. Requires a query string; in this example, 'Yofukashi no Uta' is used as the search term. Returns a Promise resolving to an object containing currentPage, hasNextPage, and results (an array of anime objects). Dependencies include the initialized animedrive object. The output adheres to the ISearch<IAnimeResult[]> shape.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animedrive.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimedrive.search(\"Yofukashi no Uta\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n      currentPage: 1,\n      hasNextPage: false,\n      results: [\n        {\n          id: '1031',\n          title: 'Yofukashi no Uta',\n          image: 'https://animedrive.hu/cover/1031.webp',\n          url: 'https://animedrive.hu/anime/?id=1031',\n          subOrDub: 'sub'\n        }\n        {...},\n        ...\n      ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Content with NovelUpdates in TypeScript\nDESCRIPTION: Retrieves the content of a specific chapter by its `chapterId` using the NovelUpdates provider instance referred to as `readlightnovels`. The method returns a promise resolving to the chapter's content object, which includes both plain text (`text`) and formatted HTML (`html`) representations of the chapter content. The chapter ID can be found in the chapter list obtained from the light novel info object.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/novelupdates.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadlightnovels.fetchChapterContent(\"5692421\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing NovelUpdates Provider with LIGHT_NOVELS in TypeScript\nDESCRIPTION: Creates a new instance of the NovelUpdates provider from the LIGHT_NOVELS module, allowing access to its methods for novel searching, info retrieval, and chapter content fetching. This initialization step is required before invoking any provider-specific operations.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/novelupdates.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst novelupdates = new LIGHT_NOVELS.NovelUpdates();\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimeFox Provider in TypeScript\nDESCRIPTION: Creates a new instance of the AnimeFox provider from the ANIME namespace of Consumet.ts. This is the first step required before using any of the provider's methods.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animefox.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst animefox = new ANIME.AnimeFox();\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Content using Typescript\nDESCRIPTION: This snippet shows how to use the `fetchChapterContent` method to retrieve the content of a specific chapter. It takes the chapter ID as an argument (`youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e/volume-1-prologue-the-structure-of-japanese-society`) and logs the result to the console. The method returns a promise resolving to an object containing text and html representations of the chapter's content.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadlightnovels.fetchChapterContent(\"youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e/volume-1-prologue-the-structure-of-japanese-society\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Search Results Output Structure - MonosChinos - JavaScript\nDESCRIPTION: Illustrates the expected JSON structure returned by the search method. It includes a flag indicating if there are more pages and an array of anime result objects, each containing basic identification and metadata.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    hasNextPage: false,\n    results: [\n        {\n            id: 'jujutsu-kaisen-2nd-season-sub-espanol',\n            title: 'Jujutsu Kaisen 2nd Season',\n            url: 'https://monoschinos2.com/anime/jujutsu-kaisen-2nd-season-sub-espanol',\n            image: 'https://monoschinos2.com/public/img/anime.png',\n            releaseDate: '2023'\n        },\n        {\n            id: 'jujutsu-kaisen-0-movie-sub-espanol',\n            title: 'Jujutsu Kaisen 0 Movie',\n            url: 'https://monoschinos2.com/anime/jujutsu-kaisen-0-movie-sub-espanol',\n            image: 'https://monoschinos2.com/public/img/anime.png',\n            releaseDate: '2021'\n        },\n        {...},\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Anime Titles Using AnimePahe API in TypeScript\nDESCRIPTION: Performs a search query for anime titles matching the given string (e.g., \"Overlord IV\"). Returns a promise resolving to a typed object containing an array of search results. Each result includes anime id, title, image URL, rating, release date, and type. Requires the AnimePahe API client instance. The method inherits from a BaseParser class, ensuring a consistent interface.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/animepahe.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nanimepahe.search(\"Overlord IV\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ANN API Client - TypeScript\nDESCRIPTION: This snippet initializes an instance of the `ANN` class, presumably from a `NEWS` module or namespace. This object serves as the primary entry point for interacting with the Anime News Network API to fetch news feeds and details.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/ann.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst ann = new NEWS.ANN();\n```\n\n----------------------------------------\n\nTITLE: Initializing TMDB Provider Class in TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate the TMDB provider by creating a new instance of META.TMDB in TypeScript. The constructor optionally accepts a MovieParser object to enable custom parsing of episodes before mapping them to TMDB formats. To use, import or access META.TMDB, and provide a compatible MovieParser if custom episode/result parsing is needed.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/tmdb.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tmdb = new META.TMDB();\n```\n\n----------------------------------------\n\nTITLE: Searching books using the Libgen provider in TypeScript\nDESCRIPTION: Example of how to create a Libgen provider instance and search for a book titled 'Pride and Prejudice', then display the results.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BOOKS } from \"@consumet/extensions\"\n\n// Create a new instance of the Libgen provider\nconst books = new BOOKS.Libgen();\n// Search for a book. In this case, \"Pride and Prejudice\"\nconst data = books.search('pride and prejudice').then(data => {\n  // print results\n  console.log(data)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing FlixHQ API Client in TypeScript\nDESCRIPTION: Creates a new instance of the FlixHQ client class from the MOVIES namespace. This instance is used to access various media fetching methods like search, fetchMediaInfo, etc.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst flixhq = new MOVIES.FlixHQ();\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending TV Shows from flixhq API\nDESCRIPTION: This code snippet retrieves trending TV shows using the function `flixhq.fetchTrendingTvShows()`. The response is an array of TV show objects, which is printed to the console after the promise resolves. No parameters are accepted.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchTrendingTvShows().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending Movies from flixhq API\nDESCRIPTION: This snippet fetches trending movies via `flixhq.fetchTrendingMovies()`.  It calls the function and uses `.then()` to handle the resolved promise, printing the result, which is an array of movie objects, to the console. No parameters are needed.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/flixhq.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nflixhq.fetchTrendingMovies().then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing a Book Provider using BOOKS module\nDESCRIPTION: This snippet demonstrates how to access a specific book provider using the BOOKS module.  Replace `<providerName>` with the actual name of the provider (e.g., Libgen). This returns an instance of the provider, allowing you to use its methods.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/guides/books.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// <providerName> is the name of the provider you want to use. list of the proivders is below.\nconst bookProvider = BOOKS.<providerName>();\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadLightNovels Provider in Typescript\nDESCRIPTION: This snippet demonstrates how to initialize the `ReadLightNovels` provider from the `LIGHT_NOVELS` namespace.  It creates an instance of the `ReadLightNovels` class, which can then be used to access the various methods for interacting with the ReadLightNovels service. No external dependencies are explicitly shown, but it relies on the `LIGHT_NOVELS` namespace being available.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst readlightnovels = new LIGHT_NOVELS.ReadLightNovels();\n```\n\n----------------------------------------\n\nTITLE: Episode Sources Output (JavaScript)\nDESCRIPTION: Example output from the `fetchEpisodeSources` function.  It shows the structure of the returned data which includes headers needed to bypass 403 errors and stream the video.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/anilist.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  headers: {\n    Referer: 'https://goload.pro/streaming.php?id=MTAxMTU3&title=Youkoso+Jitsuryoku+Shijou+Shugi+no+Kyoushitsu+e+%28TV%29+Episode+12&typesub=SUB'\n  },\n  sources: [\n    {\n      url: 'https://manifest.prod.boltdns.net/manifest/v1/hls/v4/clear/6310475588001/d34ba94f-c1db-4b05-a0b2-34d5a40134b2/6s/master.m3u8?fastly_token=NjJjZjkxZGFfODlmNWQyMWU1ZDM1NzhlNWM1MGMyMTBkNjczMjY4YjQ5ZGMyMzEzMWI2YjgyZjVhNWRhMDU4YmI0NjFjMTY4Zg%3D%3D',\n      isM3U8: true\n    },\n    {\n      url: 'https://www13.gogocdn.stream/hls/ba0b5d73fb1737d2e8007c65f347dae8/ep.12.1649784300.m3u8',\n      isM3U8: true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Content by Genre with MoviesHD API\nDESCRIPTION: This snippet demonstrates how to fetch content filtered by genre using the `fetchByGenre` method. It calls the method with the genre 'drama' and logs the returned data (an object containing a list of movies/TV shows) to the console. The method returns a promise that resolves to `ISearch<IMovieResult>`.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nmoviesHd.fetchByGenre('drama').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Response Structure from fetchEpisodeSources in JavaScript\nDESCRIPTION: Sample output from the fetchEpisodeSources method showing the returned data structure. It includes headers with a Referer needed to bypass 403 errors, an array of streaming sources with different quality options, and available subtitles in various languages.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/tmdb.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"headers\": {\n    \"Referer\": \"https://dokicloud.one/embed-4/hkEpFgTBEN9G?z=\"\n  },\n  \"sources\": [\n    {\n      \"url\": \"https://t-eu-2.magnewscontent.org/_v9/f1f4fc0acbf8baef134d6ba2f0e42815c4f3e58a6648e8f2b046410b81510d90e399b927c3135c88b026299880c0ca317d1bb065d7ec76af49cb38620a075678f1e005f1336207700b67e48f4f466b546bce3cdd11ddd1775f99b45a46311887eb1a74d2403405bd85443785566b85ab8394f8191c72a97b3dd951a30bc02479/1080/index.m3u8\",\n      \"quality\": \"1080\",\n      \"isM3U8\": true\n    },\n    {\n      \"url\": \"https://t-eu-2.magnewscontent.org/_v9/f1f4fc0acbf8baef134d6ba2f0e42815c4f3e58a6648e8f2b046410b81510d90e399b927c3135c88b026299880c0ca317d1bb065d7ec76af49cb38620a075678f1e005f1336207700b67e48f4f466b546bce3cdd11ddd1775f99b45a46311887eb1a74d2403405bd85443785566b85ab8394f8191c72a97b3dd951a30bc02479/720/index.m3u8\",\n      \"quality\": \"720\",\n      \"isM3U8\": true\n    },\n    {\n      \"url\": \"https://t-eu-2.magnewscontent.org/_v9/f1f4fc0acbf8baef134d6ba2f0e42815c4f3e58a6648e8f2b046410b81510d90e399b927c3135c88b026299880c0ca317d1bb065d7ec76af49cb38620a075678f1e005f1336207700b67e48f4f466b546bce3cdd11ddd1775f99b45a46311887eb1a74d2403405bd85443785566b85ab8394f8191c72a97b3dd951a30bc02479/360/index.m3u8\",\n      \"quality\": \"360\",\n      \"isM3U8\": true\n    },\n    {\n      \"url\": \"https://t-eu-2.magnewscontent.org/_v9/f1f4fc0acbf8baef134d6ba2f0e42815c4f3e58a6648e8f2b046410b81510d90e399b927c3135c88b026299880c0ca317d1bb065d7ec76af49cb38620a075678f1e005f1336207700b67e48f4f466b546bce3cdd11ddd1775f99b45a46311887eb1a74d2403405bd85443785566b85ab8394f8191c72a97b3dd951a30bc02479/playlist.m3u8\",\n      \"isM3U8\": true,\n      \"quality\": \"auto\"\n    }\n  ],\n  \"subtitles\": [\n    {\n      \"url\": \"https://cc.2cdns.com/4a/02/4a027259c5bd865a75e756cc09f54cbb/4a027259c5bd865a75e756cc09f54cbb.vtt\",\n      \"lang\": \"English\"\n    },\n    {\n      \"url\": \"https://cc.2cdns.com/48/66/4866edc69de4b4fd17c89b59efa726a5/4866edc69de4b4fd17c89b59efa726a5.vtt\",\n      \"lang\": \"Portuguese\"\n    },\n    {\n      \"url\": \"https://prev.2cdns.com/_m_preview/15/1568bec9a3267e03fcca2a1fb86b3b59/thumbnails/sprite.vtt\",\n      \"lang\": \"Default (maybe)\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Episode Sources Output Example in JavaScript\nDESCRIPTION: This JavaScript object represents the expected output of the `fetchEpisodeSources` method. It includes the headers, a list of sources with URLs, quality, and M3U8 status, as well as a list of subtitles with URLs and language codes. This data is crucial for playing back the selected episode.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  headers: { Referer: 'https://dokicloud.one/embed-4/3F3nysmdRDMF?z=' },\n  sources: [\n    {\n      url: 'https://eno.dokicloud.one/_v10/fd5de830b89416820504ffef6b23be58878b11bc91d26f99a884f7d4c0dc7c4c500b6ce5d53054d705a74628a3b34208a95bf0d5663142027d6284e4ce2424b9a8cbe9241fb0054f352fcf4d797b2af0fec364a840a38d0d1d3a340c564ad89bb1fecb219076d813667da0ad13266f8a589df412b39bcc03c7c07dc5bfe401c2601ce19dd9530fac08c20fc89104a5d0/1080/index.m3u8',\n      quality: '1080',\n      isM3U8: true\n    },\n    {\n      url: 'https://eno.dokicloud.one/_v10/fd5de830b89416820504ffef6b23be58878b11bc91d26f99a884f7d4c0dc7c4c500b6ce5d53054d705a74628a3b34208a95bf0d5663142027d6284e4ce2424b9a8cbe9241fb0054f352fcf4d797b2af0fec364a840a38d0d1d3a340c564ad89bb1fecb219076d813667da0ad13266f8a589df412b39bcc03c7c07dc5bfe401c2601ce19dd9530fac08c20fc89104a5d0/720/index.m3u8',\n      quality: '720',\n      isM3U8: true\n    },\n    {\n      url: 'https://eno.dokicloud.one/_v10/fd5de830b89416820504ffef6b23be58878b11bc91d26f99a884f7d4c0dc7c4c500b6ce5d53054d705a74628a3b34208a95bf0d5663142027d6284e4ce2424b9a8cbe9241fb0054f352fcf4d797b2af0fec364a840a38d0d1d3a340c564ad89bb1fecb219076d813667da0ad13266f8a589df412b39bcc03c7c07dc5bfe401c2601ce19dd9530fac08c20fc89104a5d0/360/index.m3u8',\n      quality: '360',\n      isM3U8: true\n    },\n    {\n      url: 'https://eno.dokicloud.one/_v10/fd5de830b89416820504ffef6b23be58878b11bc91d26f99a884f7d4c0dc7c4c500b6ce5d53054d705a74628a3b34208a95bf0d5663142027d6284e4ce2424b9a8cbe9241fb0054f352fcf4d797b2af0fec364a840a38d0d1d3a340c564ad89bb1fecb219076d813667da0ad13266f8a589df412b39bcc03c7c07dc5bfe401c2601ce19dd9530fac08c20fc89104a5d0/playlist.m3u8',\n      isM3U8: true,\n      quality: 'auto'\n    }\n  ],\n  subtitles: [\n    {\n      url: 'https://cc.2cdns.com/85/ca/85ca0405b2fc0f1f3edacf13e84a9277/85ca0405b2fc0f1f3edacf13e84a9277.vtt',\n      lang: 'Arabic'\n    },\n    {\n      url: 'https://cc.2cdns.com/9c/19/9c19c8fceb977034e8ef86bba8ec161e/9c19c8fceb977034e8ef86bba8ec161e.vtt',\n      lang: 'Danish'\n    },\n    {\n      url: 'https://cc.2cdns.com/c7/7f/c77fc58f1848b61b665e7de01f298223/eng-2.vtt',\n      lang: 'English'\n    },\n    {\n      url: 'https://cc.2cdns.com/a2/73/a2737a6c19b70eb7be88f852eb3f2b8a/a2737a6c19b70eb7be88f852eb3f2b8a.vtt',\n      lang: 'Finnish'\n    },\n    {\n      url: 'https://cc.2cdns.com/b2/18/b2180b98383a2ad8a3d3297af5ee9e7f/b2180b98383a2ad8a3d3297af5ee9e7f.vtt',\n      lang: 'Indonesian'\n    },\n    {\n      url: 'https://cc.2cdns.com/8f/4b/8f4bf106dc5aca724af13820acde367c/8f4bf106dc5aca724af13820acde367c.vtt',\n      lang: 'Norwegian'\n    },\n    {\n      url: 'https://cc.2cdns.com/37/3f/373fd3656dfbccd23746b325f0fdf917/373fd3656dfbccd23746b325f0fdf917.vtt',\n      lang: 'Portuguese'\n    },\n    {\n      url: 'https://cc.2cdns.com/b7/e5/b7e5765026f7031a883d19b9b919613a/b7e5765026f7031a883d19b9b919613a.vtt',\n      lang: 'Spanish'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Info\nDESCRIPTION: This snippet demonstrates how to use the `fetchMangaInfo` method to retrieve detailed information about a specific manga. It requires a manga ID, which can be obtained from the search results. The example fetches information for 'kimetsu-no-yaiba-gotouge-koyoharu'.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmangapark.fetchMangaInfo('kimetsu-no-yaiba-gotouge-koyoharu').then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Recent TV Shows Output Example in JavaScript\nDESCRIPTION: This JavaScript array represents the expected output of the `fetchRecentTvShows` method.  It provides a list of recent TV shows with details such as ID, title, URL, image, season, latest episode number and type, enabling the display of a TV show catalog.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    id: 'tv/watch-deadloch-online-97072',\n    title: 'Deadloch',\n    url: 'https://movieshd.watch/tv/watch-deadloch-online-97072',\n    image: 'https://img.movieshd.watch/xxrz/250x400/391/9f/85/9f8594271eb6540e32b7fbda24747c6e/9f8594271eb6540e32b7fbda24747c6e.jpg',\n    season: 1,\n    latestEpisode: 6,\n    type: 'TV Series'\n  },\n  {\n    id: 'tv/watch-clone-high-online-96937',\n    title: 'Clone High',\n    url: 'https://movieshd.watch/tv/watch-clone-high-online-96937',\n    image: 'https://img.movieshd.watch/xxrz/250x400/391/ad/c5/adc55790c8c88d5538210f7558fec960/adc55790c8c88d5538210f7558fec960.jpg',\n    season: 1,\n    latestEpisode: 10,\n    type: 'TV Series'\n  },\n  {\n    id: 'tv/watch-and-just-like-that-online-75286',\n    title: 'And Just Like That…',\n    url: 'https://movieshd.watch/tv/watch-and-just-like-that-online-75286',\n    image: 'https://img.movieshd.watch/xxrz/250x400/391/b8/e2/b8e20a6264e28cf1133413f63425297d/b8e20a6264e28cf1133413f63425297d.jpg',\n    season: 2,\n    latestEpisode: 2,\n    type: 'TV Series'\n  },\n  {...},\n]\n```\n\n----------------------------------------\n\nTITLE: Searching for Anime - MonosChinos - TypeScript\nDESCRIPTION: Uses the search method to find anime matching a given query string. It returns a Promise that resolves to an object containing search results, including details like ID, title, and URL. The example searches for \"Jujutsu Kaisen\".\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nmonoschinos.search(\"Jujutsu Kaisen\").then(data => {\n  console.log(data);\n})\n```\n\n----------------------------------------\n\nTITLE: Episode Servers Output Example in JavaScript\nDESCRIPTION: This JavaScript array represents the expected output of the `fetchEpisodeServers` method.  Each object contains the server name and its corresponding URL, useful for selecting a streaming server to watch the episode.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { name: 'MixDrop', url: 'https://mixdrop.co/e/7r1l3erphjrn0o' },\n  { name: 'DoodStream', url: 'https://dood.watch/e/6xi1hr51ghlb' },\n  {\n    name: 'Vidcloud',\n    url: 'https://rabbitstream.net/embed-4/T2SqGLFECVhb?z='\n  },\n  {\n    name: 'UpCloud',\n    url: 'https://dokicloud.one/embed-4/3F3nysmdRDMF?z='\n  }\n  {...},\n   ...\n]\n```\n\n----------------------------------------\n\nTITLE: Example Chapter Content Output (Javascript)\nDESCRIPTION: This Javascript object represents the expected output of the `fetchChapterContent` method. It includes the chapter's text content and its HTML representation. This shows the format of the data returned by the `fetchChapterContent` function.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/readlightnovels.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  text: '\\n' +\n    'It’s a bit sudden,...',\n  html: '<p></p><p>It’s a bit sudden, but listen seriously to the question I’m about to ask and think about...'\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Chapter Pages - Output\nDESCRIPTION: This JavaScript object shows the expected output structure of the `fetchChapterPages` method, which returns an array of page objects, each containing the page number and the image URL.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        page: 1,\n        img: 'https://xfs-227.mpcdn.net/comic/00005/images/bd/f1/bdf140d00acd17ce7f9a45f9b4ac148e332495b6_225748_800_1168.jpg?acc=pnJI5cyhhLQiJe85kXeDrg&exp=1667748434'\n    },\n    {\n        page: 2,\n        img: 'https://xfs-223.mpcdn.net/comic/00005/images/91/17/911786e51e670d10422d65e1d82d5344fb0a314a_170091_800_1168.jpg?acc=_vqLK38I_5bYy7fnNewm9A&exp=1667748434'\n    },\n    {\n        page: 3,\n        img: 'https://xfs-211.mpcdn.net/comic/00005/images/00/1d/001d537355ed17050395285a2b503f88ef481781_182747_1200_876.jpg?acc=iMYaYUDBkqfYRODG4y2QKg&exp=1667748434'\n    },\n    {\n        page: 4,\n        img: 'https://xfs-202.mpcdn.net/comic/00005/images/c8/d3/c8d3610e09dd47552601187395c93f3e8f200137_102838_800_800.jpg?acc=svY_E6ZWyiBoiuhP7-fSHA&exp=1667748434'\n    },\n    {/*...*/},\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Manga Information with BRMangas\nDESCRIPTION: Shows how to retrieve detailed manga information including title, description, genres, authors, and chapters using the fetchMangaInfo method with a manga ID.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/brmangas.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbrmangas.fetchMangaInfo(\"berserk-online\").then(data => {\n  console.log(data);\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      id: 'berserk-online',\n      title: 'Berserk',\n      altTitles: [],\n      description: 'Gatts é um sobrevivente que vaga pelo mundo à procura de respostas. Antigo membro do ext \"Bando dos Falcões\", um grupo mercenário de cavaleiros e guerreiros liderado por Griffith e Caska, Gatts se adentra na história que ganha corpo e emerge sob um ponto de vista totalmente imprevisível, a medida que os acontecimentos vão se completando. É uma obra dedicada à eterna luta do Catolicismo contra Paganismo….',\n      headerForImage: { Referer: 'https://www.brmangas.net' },\n      image: 'https://cdn.plaquiz.xyz/uploads/b/berserk/berserk.jpg',\n      genres: [\n        'Ação',         'Aventura',\n        'Demônios',     'Drama',\n        'Fantasia',     'Horror',\n        'Mangás',       'Militar',\n        'Psicológico',  'Seinen',\n        'Sobrenatural'\n      ],\n      status: 'Unknown',\n      views: null,\n      authors: [ 'Miura, Kentarou' ],\n      chapters: [\n        {\n          id: 'berserk-16-online',\n          title: 'Capítulo -16',\n          views: null,\n          releasedDate: null\n        },\n        {...}\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Episode Sources Output Structure - MonosChinos - JavaScript\nDESCRIPTION: Displays the JSON structure returned by the fetchEpisodeSources method. It contains an array of source objects, each providing a URL, quality, and a flag indicating if the source is an M3U8 stream.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/monoschinos.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    sources: [\n        {\n            url: 'https://delivery-node-eegpnfut1s580fm4.voe-network.net/engine/hls2/01/11290/adyowzavymfa_,n,.urlset/master.m3u8?t=HvPh3pTk4ZpCEDbOBT62tYjoLACrObb2p9IXPeAp1fU&s=1728306400&e=14400&f=56451279&node=delivery-node-eegpnfut1s580fm4.voe-network.net&i=150.214&sp=2500&asn=198096',\n            quality: 'default',\n            isM3U8: true\n        }\n      ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching News Feeds - TypeScript\nDESCRIPTION: This code fetches the news feeds from the Anime News Network API. It utilizes the `fetchNewsFeeds()` method of the `ann` object, which returns a Promise that resolves to an array of `NewsFeed` objects. The results are then logged to the console.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/ann.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nann.fetchNewsFeeds().then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Sample Output for fetchMediaInfo in MovieHdWatch - JavaScript\nDESCRIPTION: Provides the object structure for the result of the fetchMediaInfo method, which contains in-depth details about the requested media item. The output comprises information such as id, title, url, cover, image, description, type, releaseDate, genres, cast list, production companies, country of origin, duration, rating score, recommended media, and episodes available. This is for reference to understand the returned data and to aid further integration or display.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/moviehdwatch.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  id: 'movie/watch-the-batman-online-16076',\n  title: 'The Batman',\n  url: 'https://movieshd.watch/movie/watch-the-batman-online-16076',\n  cover: 'https://img.movieshd.watch/xxrz/1200x600/391/34/98/3498b36949518ca118b1ebe321dbd7ca/3498b36949518ca118b1ebe321dbd7ca.jpg',\n  image: 'https://img.movieshd.watch/xxrz/250x400/391/21/2d/212d2d95b9d515504a4de227d49a769f/212d2d95b9d515504a4de227d49a769f.jpg',\n  description: \"A point-of-view driven noir tale with heavy focus on Batman's detective work. A stand-alone story with no connection to the DCEU.\",\n  type: 'Movie',\n  releaseDate: '2022-03-01',\n  genres: [ 'Drama', 'Action', 'Crime', 'Mystery', 'Fantasy', 'Thriller' ],\n  casts: [\n    'Robert Pattinson',\n    'Vanessa Kirby',\n    'Jeffrey Wright',\n    'Jonah Hill',\n    'Peter Sarsgaard'\n  ],\n  production: 'DC Entertainment,Branded Entertainment/Batfilm Productions,Atlas Entertainment,Cruel & Unusual Films,Warner Bros. Pictures,6th & Idaho Productions,Mad Ghost Productions,DC Comics,DC Films,Dylan Clark Productions',\n  country: [ 'United States of America' ],\n  duration: '176min',\n  rating: 7.9,\n  recommendations: [\n    {\n      id: 'movie/watch-through-my-window-across-the-sea-online-97675',\n      title: 'Through My Window: Across the Sea',\n      image: 'https://img.movieshd.watch/xxrz/250x400/391/fd/fa/fdfaee0cf2c0321390292d5d2f60c9b4/fdfaee0cf2c0321390292d5d2f60c9b4.jpg',\n      releaseDate: '2023',\n      seasons: undefined,\n      duration: '110m',\n      type: 'Movie'\n    },\n    {\n      id: 'tv/watch-the-walking-dead-dead-city-online-97540',\n      title: 'The Walking Dead: Dead City',\n      image: 'https://img.movieshd.watch/xxrz/250x400/391/96/2f/962fd0158f7f708e16fc62f8b763a276/962fd0158f7f708e16fc62f8b763a276.jpg',\n      releaseDate: undefined,\n      seasons: 1,\n      duration: undefined,\n      type: 'TV Series'\n    },\n    {...},\n    ...  \n  ],\n  episodes: [\n    {\n      id: '16076',\n      title: 'The Batman',\n      url: 'https://movieshd.watch/ajax/movie/episodes/16076'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Manga - Output\nDESCRIPTION: This JavaScript object shows the expected output structure of the `search` method, which returns an array of manga results, each containing an ID, title, and image URL.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/docs/providers/mangapark.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    results: [\n        {\n            id: 'kimetsu-no-yaiba-gotouge-koyoharu',\n            title: 'Kimetsu no Yaiba',\n            image: 'https://xfs-208.mpcdn.net/thumb/W300/ampi/4aa/4aa22fd3ad34407a393f7b6913d2aa2b8f8ffb16_200_313_42953.jpg?acc=HWnoBrwaLc4Zr8oqnuye6A&exp=1667746330}'\n        },\n        {\n            id: 'demon-slayer',\n            title: 'Demon Slayer',\n            image: 'https://xfs-202.mpcdn.net/thumb/W300/ampi/d53/d53c34517f4f01a432671daf6b40ddf286d1eb3f_420_560_93000.jpg?acc=-aM_ezD9ZjavQljf-5oKfA&exp=1667746330}'\n        },\n        {/*...*/},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Provider Class Hierarchy (Mermaid)\nDESCRIPTION: Presents a Mermaid class diagram illustrating the inheritance structure of the provider classes in consumet.ts. It shows how specific parsers like `AnimeParser` and `MovieParser` inherit from the common `BaseParser` and `BaseProvider` classes, outlining key methods available at each level.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n      Proxy <|-- BaseProvider\n      BaseProvider <|-- BaseParser\n      BaseProvider : +String name\n      BaseProvider : +String baseUrl\n      BaseProvider: +toString()\n      BaseParser <|-- AnimeParser\n      BaseParser <|-- BookParser\n      BaseParser <|-- MangaParser\n      BaseParser <|-- LightNovelParser\n      BaseParser <|-- ComicParser\n      BaseParser <|-- MovieParser\n      class Proxy{\n         ProxyConfig\n      }\n      class BaseParser{\n         +search(String query)\n      }\n      class AnimeParser{\n         +fetchAnimeInfo(String animeId)\n         +fetchEpisodeSources(String episodeId)\n         +fetchEpisodeServers(String episodeId)\n      }\n      class MovieParser{\n         +fetchMediaInfo(String mediaId)\n         +fetchEpisodeSources(String episodeId)\n         +fetchEpisodeServers(String episodeId)\n      }\n      class BookParser{\n         empty\n      }\n      class MangaParser{\n         +fetchMangaInfo(String mangaId)\n         +fetchChapterPages(String chapterId)\n      }\n      class ComicParser{\n         empty\n      }\n      class LightNovelParser{\n         +fetchLighNovelInfo(String lightNovelId)\n         +fetchChapterContent(String chapterId)\n      }\n```\n\n----------------------------------------\n\nTITLE: Listing Abstract Parser Class Paths (Shell Output)\nDESCRIPTION: Provides a list of file paths within the `src/models` directory, showing the location of the different abstract parser classes. These classes (`AnimeParser`, `BookParser`, etc.) serve as base classes that new providers must extend to implement specific scraping logic.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsrc/models/anime-parser.ts # AnimeParser\nsrc/models/book-parser.ts  # BookParser\nsrc/models/lightnovel-parser.ts  # LightNovelParser\nsrc/models/comic-parser.ts # ComicParser\nsrc/models/manga-parser.ts # MangaParser\nsrc/models/movie-parser.ts # MovieParser\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch (Shell)\nDESCRIPTION: Shows the shell command to create and switch to a new Git branch for your contributions. This isolates your changes, making it easier to manage and submit them. Replace `<new-branch-name>` with a descriptive name relevant to your task (e.g., `feat/new-anime-provider`).\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <new-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure (Shell)\nDESCRIPTION: Illustrates the main directories and files within the consumet.ts project using a tree-like output. This snippet helps contributors understand the layout, particularly the location of documentation (`docs`), source code (`src`), models, and providers.\nSOURCE: https://github.com/consumet/consumet.ts/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n> tree\ndocs/\n├── guides/\n|   ├── ...\n|   ├── anime.md\n|   ├── getting-started.md\n│   └── contributing.md (informal guide)\n├── providers/\n│   └── <provider-name>.md (provider documentation)\n├── README.md\nsrc/\n├── index.ts\n|── models\n├── providers\n│   ├── <category>\n│   │   ├── index.ts\n│   │   └── <provider-name>.ts\n│   └── <category>\n└── utils\n```"
  }
]