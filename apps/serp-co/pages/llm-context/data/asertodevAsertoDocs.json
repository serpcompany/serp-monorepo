[
  {
    "owner": "aserto-dev",
    "repo": "aserto-docs",
    "content": "TITLE: Accessing JWT Claims in Rego Policy\nDESCRIPTION: A Rego policy that decodes a JWT from the identity context and uses claims from the token payload. This example checks both the user's department and a 'manager' claim from the JWT to determine authorization.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/identity-context.mdx#2025-04-21_snippet_3\n\nLANGUAGE: rego\nCODE:\n```\npackage sample.GET.api.orders\ndefault allowed = false\n\n# Helper to get the token payload\ntoken = {\"payload\": payload} {\n  [header, payload, signature] := io.jwt.decode(input.identity.identity)\n}\n\n# only allow sales managers\nallowed {\n  input.user.properties.department == \"Sales\"\n  token.payload.manager\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policy in Rego for Express.js API Endpoint\nDESCRIPTION: This Rego code defines an authorization policy for the '/api/protected' endpoint. It allows access only to users with the 'admin' role by checking the user's roles array in the input object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/create-a-policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\npackage asertodemo.GET.api.protected\n\ndefault allowed = false\n\nallowed {\n\tsome index\n\tinput.user.properties.roles[index] == \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Authorizer Example\nDESCRIPTION: Full example showing Authorizer client initialization and usage with identity context, policy context, and resource context.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Authorizer,\n  identityContext,\n  policyContext,\n  policyInstance,\n} from \"@aserto/aserto-node\";\n\nconst authClient = new Authorizer(\n  {\n    authorizerServiceUrl: \"localhost:8282\",\n    caFile: `${process.env.HOME}/.local/share/topaz/certs/grpc-ca.crt`\n  },\n);\n\nauthClient\n  .Is({\n    identityContext: identityContext(\n      \"rick@the-citadel.com\",\n      \"SUB\"\n    ),\n    policyInstance: policyInstance(\"rebac\", \"rebac\"),\n    policyContext: policyContext(\"rebac.check\", [\"allowed\"]),\n    resourceContext: {\n      object_type: \"group\",\n      object_id: \"evil_genius\",\n      relation: \"member\",\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Query API Request Payload Structure in JSON\nDESCRIPTION: This JSON structure represents the payload for the POST request to the Query API endpoint. It includes identity context, policy context, policy instance details, resource context, input data, query string, and options for instrumentation and tracing.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityContext\": {\n    \"identity\": \"[aserto-user-guid]\",\n    \"type\": \"IDENTITY_TYPE_*\"\n  },\n  \"policyContext\": {\n    \"decisions\": [\"string\"],\n    \"path\": \"string\"\n  },\n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  },\n  \"resourceContext\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  },\n  \"input\": \"string\",\n  \"query\": \"string\",\n  \"options\": {\n    \"instrument\": true,\n    \"metrics\": true,\n    \"trace\": \"TRACE_LEVEL_*\",\n    \"traceSummary\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Role-Based Permissions in JSON\nDESCRIPTION: JSON data file defining permissions for viewer, editor, and admin roles, specifying access rules for protected API endpoints.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/support-more-roles.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"roles\": {\n    \"viewer\": {\n      \"description\": \"A viewer with no access to sensitive asset\",\n      \"perms\": {\n        \"asertodemo.GET.api.protected\": {\n          \"allowed\": false\n        }\n      }\n    },\n    \"editor\": {\n      \"description\": \"A editor with access to sensitive asset\",\n      \"perms\": {\n        \"asertodemo.GET.api.protected\": {\n          \"allowed\": true\n        }\n      }\n    },\n    \"admin\": {\n      \"description\": \"An admin user with access to sensitive asset\",\n      \"perms\": {\n        \"asertodemo.GET.api.protected\": {\n          \"allowed\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rego Policy for Profile Access\nDESCRIPTION: Rego policy that restricts access to /profile endpoint on GET requests to users with verified identities\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_5\n\nLANGUAGE: rego\nCODE:\n```\ncaller.identities[i].verified == true\n```\n\n----------------------------------------\n\nTITLE: ABAC Policy Rule for User Update Operation\nDESCRIPTION: Rego policy rule that checks if a user's department property equals 'Operations' to determine if they can update other users' information via POST /api/users/:id endpoint.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/explore-abac-policies/creating-an-abac-policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\n# Implied from context/screenshot:\nallow {\n    input.user.properties.department == \"Operations\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing PolicyPathMapper in Startup.cs\nDESCRIPTION: C# code snippet for customizing the PolicyPathMapper in the Startup.cs file. This example demonstrates how to provide a custom function for mapping URL paths to policy paths.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n   //...\n\n   // Adds the Aserto Authorization service\n   services.AddAsertoAuthorization(options =>\n   {\n      Configuration.GetSection(\"Aserto\").Bind(options);\n      options.PolicyPathMapper = (policyRoot, httpRequest) =>\n      {\n          return \"custom.policy.path\";\n      };\n   });\n\n   //...\n}\n```\n\n----------------------------------------\n\nTITLE: Making Authorization Calls with Aserto Client in Go\nDESCRIPTION: Shows how to use the Aserto authorizer client to make authorization calls using the Is() API. The example includes setting up identity context, policy context, and resource context for the authorization request.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/authorizer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/protobuf/types/known/structpb\"\n\n\t\"github.com/aserto-dev/go-authorizer/aserto/authorizer/v2\"\n\t\"github.com/aserto-dev/go-authorizer/aserto/authorizer/v2/api\"\n)\n\n...\n\nctx := context.Background()\n\n// Information about the resource being accessed can be sent\n// to the authorizer as a JSON object.\nresource, err := structpb.NewStruct(map[string]any{\n\t\"id\": \"aprils@acmecorp.com\",\n})\nif err != nil {\n\tlog.Fatalf(\"failed to create resource: %v\", err)\n}\n\nresult, err := azClient.Is(ctx, &authorizer.IsRequest{\n\tIdentityContext: &api.IdentityContext{             // The user performing the operation.\n\t\tType: api.IdentityType_IDENTITY_TYPE_SUB,\n\t\tIdentity: \"username\",\n\t},\n\tPolicyContext: &api.PolicyContext{\n\t\tPath:      \"peoplefinder.PUT.api.users.__id\",  // Policy module to evaluate.\n\t\tDecisions: []string{\"allowed\"},                // Policy rules to evaluate.\n\t},\n\tResourceContext: resource,\n\tPolicyInstance: &api.PolicyInstance {\n\t\tName: \"<policy name>\",\n\t},\n})\nif err != nil {\n\tlog.Fatal(\"Failed to call authorizer:\", err)\n}\n\n// Check the authorizer's decision.\nfor _, decision := range result.Decisions {\n\tif decision.Decision == \"allowed\" {\n\t\tif decision.Is {\n\t\t\tfmt.Println(\"Access granted\")\n\t\t} else {\n\t\t\tfmt.Println(\"Access denied\")\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Authorization Model in YAML\nDESCRIPTION: This YAML snippet defines the authorization model for API access control. It includes type definitions for user, group, identity, service, and endpoint, along with their relationships and permissions. The model allows for flexible entitlement at the service, endpoint class, or discrete endpoint level.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/directory.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  # user represents a user that can be granted role(s)\n  user:\n    relations:\n      manager: user\n\n    permissions:\n      ### display_name: user#in_management_chain ###\n      in_management_chain: manager | manager->in_management_chain\n\n  # group represents a collection of users and/or (nested) groups\n  group:\n    relations:\n      member: user | group#member\n\n  # identity represents a collection of identities for users\n  identity:\n    relations:\n      identifier: user\n\n  # service represents a set of endpoints\n  service:\n    relations:\n      owner: user\n      deleter: user | group#member\n      creator: user | group#member\n      writer: user | group#member\n      reader: user | group#member\n\n    permissions:\n      can_get: reader | can_put\n      can_put: writer | can_post\n      can_patch: writer | can_post\n      can_post: creator | can_delete\n      can_delete: deleter | owner\n\n  # endpoint represents a specific API endpoint\n  endpoint:\n    relations:\n      # each endpoint picks the reader/writer/creator/deleter relation to the service\n      # based on the method (GET -> reader, PUT/PATCH -> writer, etc)\n      service-reader: service\n      service-writer: service\n      service-creator: service\n      service-deleter: service\n      # invoker allows a user or group to get access to invoke this specific endpoint\n      invoker: user | group#member\n    permissions:\n      can_invoke: invoker | service-reader->can_get | service-writer->can_put |\n        service-creator->can_post | service-deleter->can_delete\n```\n\n----------------------------------------\n\nTITLE: Initializing Aserto Authorizer Client\nDESCRIPTION: Example of creating an AuthorizerClient instance with required identity and options configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/api-client.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aserto import Identity, IdentityType\nfrom aserto.client.authorizer import AuthorizerClient, AuthorizerOptions\n\nclient = AuthorizerClient(\n    identity=Identity(IdentityType.IDENTITY_TYPE_NONE),\n    options=AuthorizerOptions(\n        api_key=YOUR_ASERTO_API_KEY,\n        tenant_id=YOUR_ASERTO_TENANT_ID,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Aserto Policy Structure in Rego\nDESCRIPTION: A simple Rego policy that exports an 'allowed' decision with a value of true. The package name follows the Aserto convention of policy-root.HTTP-method.HTTP-route.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\npackage sample.GET.api.orders\n\nallowed {\n  true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aserto ReBAC Policy in TypeScript for Zuplo API Gateway\nDESCRIPTION: This code snippet defines an Aserto ReBAC (Relationship-Based Access Control) policy for use with a Zuplo API gateway. It handles authorization requests by communicating with the Aserto authorizer API, supporting various input methods for object type, ID, and relation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpProblems, ZuploContext, ZuploRequest } from \"@zuplo/runtime\"\n\ntype AsertoPolicyOptions = {\n  // Aserto hosted authorizer configuration values (required)\n  tenantId: string\n  authorizerApiKey: string\n  policyName: string\n  \n  // Canonicalized service name (required unless all the overrides below are provided)\n  serviceName: string\n\n  // The default behavior is to call the Aserto authorizer with the following check call:\n  //   objectType: \"endpoint\"\n  //   objectId: `${serviceName}:${httpMethod}:${routePath}`\n  //   relation: \"can_invoke\"\n  // Each of these can be overridden by providing explicit values for these.\n  // The values can be in the following formats:\n  //   1. \"string\": string literal\n  //   2. \"$header(HEADER_NAME)\": retrieve the value of request.headers[HEADER_NAME]\n  //   3. \"$param(PARAM_NAME)\": retrieve the value of request.params[PARAM_NAME]\n  //   4. \"$body(BODY_KEY_NAME)\": retrieve the value of request.body[BODY_KEY_NAME] (this assumes a JSON body and can be a compound - like x.y.z)\n  objectType: string\n  objectId: string\n  relation: string\n}\n\nconst ASERTO_AUTHORIZER_URL = \"https://authorizer.prod.aserto.com/api/v2/authz/is\"\nconst HEADER = \"$header(\"\nconst PARAM = \"$param(\"\nconst BODY = \"$body(\"\n\nasync function getValue(request: ZuploRequest, value: string): Promise<string> {\n  if (!value) {\n    return null\n  }\n  if (value.startsWith(HEADER)) {\n    const header = value.substring(HEADER.length, value.length - 1)\n    return request.headers[header]\n  }\n  if (value.startsWith(PARAM)) {\n    const param = value.substring(PARAM.length, value.length - 1)\n    return request.params[param]\n  }\n  if (value.startsWith(BODY)) {\n    const bodyPath = value.substring(BODY.length, value.length - 1)\n    const bodyPathComponents = bodyPath.split('.')\n    let body = await request.json() \n    for (const pathComponent of bodyPathComponents) {\n      body = body[pathComponent]\n    }\n    return body\n  }\n  return value\n}\n\nfunction getCanonicalizedEndpointID(request: ZuploRequest, context: ZuploContext, serviceName: string): string {\n  return `${serviceName}:${request.method}:${context.route.path}`\n}\n\nexport default async function policy(\n  request: ZuploRequest,\n  context: ZuploContext,\n  options: AsertoPolicyOptions,\n  policyName: string\n) {\n\n  if (!request.user) {\n    context.log.error(\n      \"User is not authenticated. An authentication policy must come before the authorization policy.\",\n    );\n    return HttpProblems.unauthorized(request, context);\n  }\n\n  const endpointID = getCanonicalizedEndpointID(request, context, options.serviceName)\n\n  const asertoRequest = JSON.stringify({\n    \"identity_context\": {\n      \"type\": \"IDENTITY_TYPE_SUB\",\n      \"identity\": request.user.data.sub\n    },\n    \"resource_context\": {\n      \"object_type\": await getValue(request, options.objectType) ?? \"endpoint\",\n      \"object_id\": await getValue(request, options.objectId) ?? endpointID,\n      \"relation\": await getValue(request, options.relation) ?? \"can_invoke\"\n    },\n    \"policy_context\": {\n      \"decisions\": [\n        \"allowed\"\n      ],\n      \"path\": \"rebac.check\"\n    },\n    \"policy_instance\": {\n      \"name\": options.policyName,\n      \"instance_label\": options.policyName\n    }\n  })\n\n  try {\n    context.log.debug(`rebac.check request: ${asertoRequest}`)\n\n    const asertoResponse = await fetch(ASERTO_AUTHORIZER_URL, { \n      headers: {\n        \"content-type\": \"application/json\",\n        \"Aserto-Tenant-ID\": options.tenantId,\n        \"Authorization\": `basic ${options.authorizerApiKey}`\n      },\n      method: 'POST',\n      body: asertoRequest\n    })\n    const response = await asertoResponse.json()\n    context.log.debug(`aserto response: ${JSON.stringify(response)}`)\n\n    if (response && response.decisions && response.decisions.length > 0 && response.decisions[0].is) {\n      return request\n    }\n    context.log.error(\n      `The user '${request.user.sub}' is not authorized to perform this action.`,\n    )\n    return HttpProblems.forbidden(request, context);\n  } catch (e) {\n    context.log.error(\n      `Aserto authorization error. The user '${request.user.sub}' is not authorized to perform this action.`,\n    )\n    return HttpProblems.forbidden(request, context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing User Properties in Rego Policy\nDESCRIPTION: This snippet shows how to import user attributes as properties in a Rego policy. This allows access to user-specific attributes like department, manager, and title for making authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/aserto-playground.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\nimport input.user.attributes.properties as props\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional UI Rendering with Aserto\nDESCRIPTION: React component implementation using Aserto display state for conditional rendering\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/conditional-ui-rendering.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"main\">\n  {loading && <div className=\"loading\">Loading...</div>}\n  {!loading && isAuthenticated && (\n    <>\n      <div className=\"top-main\">\n        <div className=\"welcome-message\">\n          Welcome {auth.userData?.profile?.email}!\n        </div>\n        <div>\n          {!message && (\n            <button\n              className=\"primary-button\"\n              disabled={!displayState.enabled}\n              onClick={() => accessSensitiveInformation()}\n            >\n              Get Sensitive Resource\n            </button>\n          )}\n          <div className=\"message-container\">\n            {message && message !== 403 && message !== 401 && (\n              <>\n                <div className=\"lottie\"></div>\n                <div className=\"message\">{message}</div>\n              </>\n            )}\n            {message && message === 401 && (\n              <>\n                <div className=\"sad-lottie\"></div>\n                <div className=\"message\">\n                  No access to sensitive information\n                </div>\n              </>\n            )}\n            {message && message === 403 && (\n              <>\n                <div className=\"sad-lottie\"></div>\n                <div className=\"message\">\n                  No access to sensitive information\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"center-main\">\n        {displayState.visible && (\n          <div>You have been identified as an `admin`.</div>\n        )}\n      </div>\n    </>\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Authorization Inbound Policy in JSON for Zuplo\nDESCRIPTION: This JSON configuration sets up the Aserto authorization inbound policy for a Zuplo API gateway. It specifies the policy module, export function, and required options including tenant ID, authorizer API key, policy name, and service name.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"export\": \"default\",\n  \"module\": \"$import(./modules/aserto-rebac)\",\n  \"options\": {\n    \"tenantId\": \"tenant-id\",\n    \"authorizerApiKey\": \"authorizer-api-key\",\n    \"policyName\": \"api-auth\",\n    \"serviceName\": \"todo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with gorilla/mux Router\nDESCRIPTION: Example of integrating Aserto middleware with the gorilla/mux router package.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n\tname = mux.Vars(r)[\"name\"]\n    w.Write([]byte(fmt.Sprintf(`\"hello %s\"`, name)))\n}\n\nr := mux.NewRouter()  // Create new gorilla/mux Router.\nr.Use(mw)             // Attach authorization middleware to all routes.\n\nr.HandleFunc(\"/hello/{name}\", Hello) // Define route.\n```\n\n----------------------------------------\n\nTITLE: Passing Resource Context in JSON\nDESCRIPTION: Example of passing a resource context containing an owner ID to the Aserto authorizer. The resource context is a key-value map that becomes available as input.resource in the policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/resource-context.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"resourceContext\": {\n  \"ownerId\": \"[owner-resource-id]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Identity Mapper Implementation Examples\nDESCRIPTION: Examples of different identity mapper implementations including SubIdentityMapper, JWTIdentityMapper, and custom functions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// use the identity type sub\nimport { SubIdentityMapper } from \"@aserto/aserto-node\";\n\nconst restMw = new Middleware({\n  client: authClient,\n  policy: policy,\n  identityMapper: SubIdentityMapper,\n})\n\n// use the jwt type sub from a custom header\nimport { JWTIdentityMapper } from \"@aserto/aserto-node\";\n\nconst restMw = new Middleware({\n  client: authClient,\n  policy: policy,\n  identityMapper: JWTIdentityMapper(\"my-header\");,\n})\n```\n\n----------------------------------------\n\nTITLE: Making Authorization Calls with Aserto Java SDK\nDESCRIPTION: This Java code snippet shows how to make authorization calls using the AuthorizerClient. It creates IdentityCtx and PolicyCtx objects, checks if an identity is allowed to perform an action, and processes the resulting decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/authorizer.mdx#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// identity context contains information abou the user that requests access to some resource\nIdentityCtx identityCtx = new IdentityCtx(\"rick@the-citadel.com\", IdentityType.IDENTITY_TYPE_SUB);\n\n// contains information about the policy we want to check for the provided identity\nPolicyCtx policyCtx = new PolicyCtx(\"todo\", \"todo\", \"todoApp.DELETE.todos.__id\", new String[]{\"allowed\"});\n\n// check if the identity is allowed to perform the action\nList<Decision> decisions = authzClient.is(identityCtx, policyCtx);\nauthzClient.close();\n\ndecisions.forEach(decision -> {\n    String dec = decision.getDecision();\n    boolean isAllowed =  decision.getIs();\n    System.out.println(\"For decision [\" + dec + \"] the answer was [\" + isAllowed + \"]\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authorization Middleware in Express with Aserto\nDESCRIPTION: Demonstrates how to set up Express middleware for JWT validation and authorization using Aserto. The middleware validates JWT tokens and checks permissions against Aserto policies before allowing access to endpoints.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require('express-jwt');\nconst { jwtAuthz } = require('@aserto/aserto-node');\n\nconst options = {\n  authorizerServiceUrl: 'localhost:8282', // required - must pass a valid host:port\n  policyRoot: 'mycars', // required - must be a string representing the policy root (the first component of the policy module name)\n  instanceName: 'instance-name', // optional (required only for a hosted authorizer)\n  instanceLabel: 'instance-label' // optional (required only for a hosted authorizer)\n};\n\napp.get('/users/:id',\n  jwt({ secret: 'shared_secret' }),\n  jwtAuthz(options),\n  function(req, res) { ... });\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity in Middleware\nDESCRIPTION: Examples of configuring identity extraction from JWT headers and context values.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmw.Identity.JWT().FromHeader(\"Authorization\")\n\nmw.Identity.Subject().FromContextValue(\"username\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Aserto HTTP Middleware\nDESCRIPTION: Example of creating an Aserto HTTP middleware instance with basic policy configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n     \"github.com/aserto-dev/aserto-go/middleware\"\n     \"github.com/aserto-dev/aserto-go/middleware/httpz\"\n)\n\n...\n\n// Create HTTP middleware.\nmw := httpz.New(\n    azClient,\n    middleware.Policy{\n        Name:       \"< policy name>\",\n        Decision: \"allowed\",           // Name of the policy rule to evaluate.\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Aserto Middleware\nDESCRIPTION: Creating an instance of AsertoMiddleware with the configured options\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_aserto import AsertoMiddleware\n\naserto = AsertoMiddleware(**options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Check with Aserto's 'is' Function in Express\nDESCRIPTION: This snippet demonstrates how to use the 'is' function from @aserto/aserto-node to perform an authorization check in an Express route. It shows the basic setup, options configuration, and error handling for the authorization process.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst { is } = require('@aserto/aserto-node');\n\nconst options = {\n  authorizerServiceUrl: 'localhost:8282', // required - must pass a valid host:port\n  policyRoot: 'policy' // required - must be a string representing the policy root (the first component of the policy module name)\n};\n\napp.get('/users/:id', async function(req, res) {\n  try {\n    const allowed = await is('allowed', req, options);\n    if (allowed) {\n      ...\n    } else {\n      res.status(403).send(\"Unauthorized\");\n    }\n  } catch (e) {\n    res.status(500).send(e.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Context Provider\nDESCRIPTION: Example of creating a resource context provider that extracts context from request arguments\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef resource_context_from_request() -> ResourceContext:\n    return request.view_args or {}\n```\n\n----------------------------------------\n\nTITLE: Authorizer Client Configuration Interface\nDESCRIPTION: TypeScript interface definitions for the Authorizer client configuration including service URL, tenant ID, and API key settings.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Authorizer {\n  config: AuthorizerConfig,\n};\n\ntype AuthorizerConfig = {\n  authorizerServiceUrl?: string;\n  tenantId?: string;\n  authorizerApiKey?: string;\n  token?: string;\n  caFile?: string;\n  insecure?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Graph Search Function\nDESCRIPTION: The ds.graph function searches the directory graph to find subjects or objects with specific relations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nds.graph({\n    \"object_type\": \"<object type>\",\n    \"object_id\": \"<object identifier>\",\n    \"relation\": \"<relation name>\",\n    \"subject_type\": \"<subject type>\",\n    \"subject_id\": \"<subject identifier>\",\n    \"subject_relation\": \"<subject relation>\",\n    \"explain\": <boolean>,\n    \"trace\":  <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Creating React Application\nDESCRIPTION: Command to create a new React application using yarn\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn create react-app aserto-react-demo\n```\n\n----------------------------------------\n\nTITLE: Express Middleware Implementation Examples\nDESCRIPTION: Examples showing how to implement REST and Check middleware in an Express application.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app: express.Application = express();\n\n\n// Standard REST\nconst restMw = new Middleware({\n  client: client,\n  policy: {\n    name: 'todo',\n    instanceLabel: 'todo',\n    root: 'todoApp',\n  },\n  resourceMapper: async (req: express.Request) => {\n    if (!req.params?.id) {\n      return {};\n    }\n\n    const todo = await store.get(req.params.id);\n    return { ownerID: todo.OwnerID };\n  },\n})\n\napp.get(\"/todos\", checkJwt, restMw.Authz(), server.list.bind(server));\napp.post(\"/todos\", checkJwt, restMw.Authz(), server.create.bind(server));\napp.put(\"/todos/:id\", checkJwt, restMw.Authz(), server.update.bind(server));\n\n\n// Check\nconst rebacMw = new Middleware({\n  client: authClient,\n  policy: {\n    name: 'policy-rebac',\n    instanceLabel: 'policy-rebac',\n    root: 'rebac',\n  }\n})\n\n// Only users that are in the `evil_genius` group are allowed to delete todos.\napp.delete(\"/todos/:id\", checkJwt, rebacMw.Check({\n  objectType: \"group\",\n  objectId: \"evil_genius\"\n  relation:  \"member\",\n}))\n```\n\n----------------------------------------\n\nTITLE: Manual Identity Mapper Implementation\nDESCRIPTION: Example of implementing a manual identity mapper and custom identity resolution function.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// use the manual identity type\nimport { ManualIdentityMapper } from \"@aserto/aserto-node\";\n\nconst restMw = new Middleware({\n  client: authClient,\n  policy: policy,\n  identityMapper: ManualIdentityMapper(\"my-identity\");,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Identity Context in Aserto API Request\nDESCRIPTION: Example of setting the identity context with a JWT token using IDENTITY_TYPE_JWT. This allows the policy to access claims from the JWT directly, beyond just the subject claim used for identity resolution.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/identity-context.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityContext\": {\n    \"identity\": \"[JWT that could contain a 'manager' claim]\",\n    \"type\": \"IDENTITY_TYPE_JWT\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Services in Startup.cs\nDESCRIPTION: C# code for configuring Aserto authorization services and default authorization policy in Startup.cs\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAsertoAuthorization(options => Configuration.GetSection(\"Aserto\").Bind(options));\n\n    services.AddAuthorization(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder(CookieAuthenticationDefaults.AuthenticationScheme);\n        policy.AddRequirements(new AsertoDecisionRequirement());\n        options.DefaultPolicy = policy.Build();\n    });\n\n    services.AddControllersWithViews();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto in Ruby on Rails\nDESCRIPTION: Set up Aserto configuration in a Rails initializer, including policy ID, tenant ID, API key, and other options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"aserto/rails\"\n\nAserto.configure do |config|\n  config.enabled = true\n  config.policy_id = \"my-policy-id\"\n  config.tenant_id = \"my-tenant-id\"\n  config.authorizer_api_key = Rails.application.credentials.aserto[:authorizer_api_key]\n  config.policy_root = \"peoplefinder\"\n  config.service_url = \"authorizer.prod.aserto.com:8443\"\n  config.decision = \"allowed\"\n  config.logger = Rails.logger\n  config.identity_mapping = {\n    type: :sub,\n    from: :sub\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Set and Delete Relations\nDESCRIPTION: Creates and deletes relations between objects and subjects.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nds.set_relation(\n    object_type=\"group\",\n    object_id=\"admin\",\n    relation=\"member\",\n    subject_type=\"user\",\n    subject_id=\"euang@acmecorp.com\",\n)\n\nds.delete_relation(\n    object_type=\"group\",\n    object_id=\"admin\",\n    relation=\"member\",\n    subject_type=\"user\",\n    subject_id=\"euang@acmecorp.com\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authorizer Client\nDESCRIPTION: Example of creating a new Authorizer client instance with required configuration parameters.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst authClient = new Authorizer({\n  authorizerServiceUrl: \"authorizer.prod.aserto.com:8443\",\n  authorizerApiKey: \"my-authorizer-api-key\",\n  tenantId: \"my-tenant-id\",\n});\n```\n\n----------------------------------------\n\nTITLE: Example Request for is API in JSON\nDESCRIPTION: An example JSON payload sent to the is API, demonstrating how to check if a user is allowed to access their own resource. It includes the user's identity, the decision to check, the policy path, and the resource context.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/is.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityContext\": {\n    \"identity\": \"011a88bc-7df9-4d92-ba1f-2ff319e101e1\",\n    \"type\": \"IDENTITY_TYPE_SUB\"\n  },\n  \"policyContext\": {\n    \"decisions\": [\"allowed\"],\n    \"path\": \"sample\"\n  },\n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  },\n  \"resourceContext\": {\n    \"id\": \"011a88bc-7df9-4d92-ba1f-2ff319e101e1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Node.js SDK\nDESCRIPTION: Commands for installing the Aserto Node.js SDK using npm or yarn package managers.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @aserto/aserto-node\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @aserto/aserto-node\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Settings in appsettings.json\nDESCRIPTION: JSON configuration for Aserto middleware settings including API key, tenant ID, policy name, and policy root.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcorecheck.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Aserto\": {\n        \"AuthorizerApiKey\": \"YOUR_AUTHORIZER_API_KEY\",\n        \"TenantID\": \"YOUR_ASERTO_TENANT_ID\",\n        \"PolicyName\": \"YOUR_POLICY_NAME\",    \n        \"PolicyRoot\": \"YOUR_POLICY_ROOT\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Mapper Implementation\nDESCRIPTION: Examples of implementing custom resource mappers with different return types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst restMw = new Middleware({\n  client: authClient,\n  policy: policy,\n  resourceMapper: async () => {\n    return { customKey: \"customValue\" };\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Object and Relation Management\nDESCRIPTION: Examples of getting, setting, and managing objects and relations in the Directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await directoryClient.object({ objectType: 'user', objectId: 'euang@acmecorp.com' });\n\n// Handle a specific Directory Error\nimport { NotFoundError } from  \"@aserto/aserto-node\"\n\ntry {\n  directoryClient.object({\n    objectType: \"user\",\n    objectId: \"euang@acmecorp.com\",\n  });\n} catch (error) {\n  if (error instanceof NotFoundError) {\n    // handle the case where the object was not found\n  }\n  throw error;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Permissions in Aserto\nDESCRIPTION: JSON configuration defining role-based permissions for different user types\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/conditional-ui-rendering.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": {\n    \"viewer\": {\n      \"description\": \"A viewer with no access to sensitive asset\",\n      \"perms\": {\n        \"asertodemo.GET.api.protected\": {\n          \"allowed\": false,\n          \"enabled\": false,\n          \"visible\": false\n        }\n      }\n    },\n    \"editor\": {\n      \"description\": \"A editor with access to sensitive asset\",\n      \"perms\": {\n        \"asertodemo.GET.api.protected\": {\n          \"allowed\": false,\n          \"enabled\": true,\n          \"visible\": false\n        }\n      }\n    },\n    \"admin\": {\n      \"description\": \"An admin user with access to sensitive asset\",\n      \"perms\": {\n        \"asertodemo.GET.api.protected\": {\n          \"allowed\": true,\n          \"enabled\": true,\n          \"visible\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute-Based Access Control Rule in Rego\nDESCRIPTION: This code demonstrates how to create an allowed rule based on a user's department attribute. The rule grants access to users from the \"Sales Engagement Management\" department regardless of their role assignments.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/aserto-playground.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\nallowed {\n\tprops = attributes.properties\n\tprops.department == \"Sales Engagement Management\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Relations with GraphQL\nDESCRIPTION: This GraphQL query retrieves relations matching specified criteria with support for pagination. It requires specifying the maximum number of results to return, and optionally takes filtering criteria and a cursor for pagination.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/queries/relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nrelations(\n  where: RelationsWhere\n  first: Int!\n  after: Cursor\n): RelationConnection!\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto.AspNetCore.Middleware via Package Manager\nDESCRIPTION: Command to install the Aserto.AspNetCore.Middleware NuGet package using Package Manager in Visual Studio.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Aserto.AspNetCore.Middleware\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected API Endpoint with Aserto Middleware\nDESCRIPTION: Express.js route implementation using both JWT authentication and Aserto authorization middleware.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/use-express-middleware.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n//Protected API endpoint\napp.get('/api/protected', checkJwt, checkAuthz, function (req, res) {\n  //send the response\n  res.json({ secret: 'Very sensitive information presented here' })\n})\n```\n\n----------------------------------------\n\nTITLE: Get Objects with Pagination\nDESCRIPTION: Retrieves object instances of a specific type with pagination support.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aserto.client.directory.v3 import PaginationRequest\n\nusers = ds.get_objects(object_type=\"user\", page=PaginationRequest(size=10))\n```\n\n----------------------------------------\n\nTITLE: Implementing Display State Map for Application Routes in JSON\nDESCRIPTION: Example of a display state map that maps API routes to their corresponding display states. This structure allows applications to determine permissions for multiple routes at once, enabling efficient UI permission enforcement.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/display-state-map.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GET/api/users\": { \"visible\": true, \"enabled\": true },\n  \"POST/api/users\": { \"visible\": true, \"enabled\": false },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Aserto CLI Authorizer Command Usage\nDESCRIPTION: Shows the usage pattern and available commands for the Aserto authorizer CLI interface. Includes main commands like eval, query, decisiontree, and various policy management commands, along with global flags for configuration and verbosity.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/authorizer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: aserto authorizer (az) <command> [flags]\n\nauthorizer commands\n\nCommands:\n  authorizer (az) eval             evaluate policy decision\n  authorizer (az) query            execute query\n  authorizer (az) decisiontree     get decision tree\n  authorizer (az) get-policy       get policy\n  authorizer (az) list-policies    list policies\n  authorizer (az) test             execute authorizer assertions\n\nFlags:\n  -h, --help             Show context-sensitive help.\n  -c, --config=STRING    name or path of configuration file\n  -v, --verbosity        Use to increase output verbosity.\n      --tenant=STRING    tenant id override ($ASERTO_TENANT_ID)\n```\n\n----------------------------------------\n\nTITLE: React App Component with Authentication\nDESCRIPTION: Main React application component implementing authentication and user interface\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect } from 'react'\nimport { useAuth } from 'oidc-react'\n\nfunction App() {\n  const auth = useAuth()\n  const isAuthenticated = auth.userData?.id_token ? true : false\n\n  //If the user logs out, redirect them to the login page\n  useEffect(() => {\n    if (!auth.isLoading && !isAuthenticated) {\n      auth.signIn()\n    }\n  })\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <div className=\"logo-container\">\n          <div className=\"logo\"></div>\n          <div className=\"brand-name\"></div>\n        </div>\n      </div>\n\n      <div className=\"user-controls\">\n        {isAuthenticated && (\n          <>\n            <div className=\"user-info\">{auth.userData?.profile?.email}</div>\n            <div className=\"seperator\"></div>\n            <div className=\"auth-button\">\n              <div onClick={() => auth.signOut('/')}>Log Out</div>\n            </div>\n          </>\n        )}\n        {!isAuthenticated && (\n          <div className=\"auth-button\">\n            <div onClick={() => auth.signIn('/')}>Login</div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"main\">\n        {isAuthenticated && (\n          <>\n            <div className=\"top-main\">\n              <div className=\"welcome-message\">\n                Welcome {auth.userData?.profile?.email}!\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Accessing User Properties in Rego Policy\nDESCRIPTION: A Rego policy that accesses user properties from the input.user object. This example checks if the user's department is 'Sales' to determine authorization for a GET request to the orders API.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/identity-context.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage sample.GET.api.orders\ndefault allowed = false\n\n# only allow salespeople\nallowed {\n  input.user.properties.department == \"Sales\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Display State Map Middleware in Express with Aserto\nDESCRIPTION: Shows how to configure the displayStateMap middleware to expose an endpoint that returns UI display state information to clients. This allows frontend applications to dynamically adjust their UI based on user permissions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { displayStateMap } = require('@aserto/aserto-node');\n\nconst options = {\n  authorizerServiceUrl: 'localhost:8282', // required - must pass a valid host:port\n  policyRoot: 'policy' // required - must be a string representing the policy root (the first component of the policy module name)\n};\napp.use(displayStateMap(options));\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto settings in appsettings.json\nDESCRIPTION: JSON configuration for Aserto middleware settings in the appsettings.json file. Includes AuthorizerApiKey, TenantID, PolicyName, and PolicyRoot.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Aserto\": {\n        \"AuthorizerApiKey\": \"YOUR_AUTHORIZER_API_KEY\",\n        \"TenantID\": \"YOUR_ASERTO_TENANT_ID\",\n        \"PolicyName\": \"YOUR_POLICY_NAME\",    \n        \"PolicyRoot\": \"YOUR_POLICY_ROOT\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity Provider\nDESCRIPTION: Example of creating an identity provider function that extracts identity from Flask's g object\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef identity_provider() -> Identity:\n    identity = g.identity\n\n    if identity is None:\n        return Identity(IdentityType.IDENTITY_TYPE_NONE)\n\n    return Identity(type=IdentityType.IDENTITY_TYPE_SUB, value=identity)\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Context Mapping\nDESCRIPTION: Example of adding resource context information to authorization requests.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmw.WithResourceMapper(\n    func(ctx, context.Context, message interface{}, resource map[string]interface{}) {\n        // Custom function to retrieve the owner of the resource being accessed.\n        resource[\"ownerId\"] = GetOwner(ctx, message)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Display State Map\nDESCRIPTION: Example of setting up the display state map endpoint in a Flask application\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_aserto import AsertoMiddleware\n\napp = Flask(__name__)\naserto = AsertoMiddleware(**options)\n\n# The `__displaystatemap` route is now defined\naserto.register_display_state_map(app)\n\n# The path name can be overridden\naserto.register_display_state_map(app, endpoint=\"custom_display_state_map_path\")\n```\n\n----------------------------------------\n\nTITLE: Middleware Interface Definition\nDESCRIPTION: TypeScript interface definitions for the authorization middleware including client, policy, and mapper configurations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Middleware {\n  client: Authorizer;\n  policy: Policy;\n  resourceMapper?: ResourceMapper;\n  identityMapper?: IdentityMapper;\n  policyMapper?: PolicyMapper;\n  failWithError?: boolean;\n}\n\ntype Policy = {\n  root: string;\n  name?: string;\n  instanceLabel?: string;\n  decision?: string;\n  path?: string;\n};\n\ntype CheckOptions = {\n  object?: ObjectMapper;\n  objectId?: string | StringMapper;\n  objectType?: string | StringMapper;\n  relation?: string | StringMapper;\n  subjectType?: string;\n};\n\ntype ResourceMapper =\n  | ResourceContext\n  | ((req?: Request) => Promise<ResourceContext>);\n\ntype IdentityMapper = (req?: Request) => Promise<IdentityContext>;\ntype PolicyMapper = (req?: Request) => Promise<PolicyContext>;\n```\n\n----------------------------------------\n\nTITLE: Applying Aserto Authorization to RESTful Resource Controller in Ruby\nDESCRIPTION: Use the aserto_authorize_resource method to automatically authorize all actions in a RESTful controller.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  aserto_authorize_resource\n  # aserto_authorize_resource only: %i[show]\n  # aserto_authorize_resource except: %i[index]\n\n  def show\n    # getting a single post authorized\n  end\n\n  def index\n    # getting all posts is authorized\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Provider in React Application\nDESCRIPTION: Example of wrapping a React application with AsertoProvider and Auth0Provider for configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AsertoProvider } from '@aserto/aserto-react'\nimport { Auth0Provider } from '@auth0/auth0-react'\nimport App from './App'\n\nReactDOM.render(\n  <Auth0Provider\n    domain=\"YOUR_AUTH0_DOMAIN\"\n    clientId=\"YOUR_AUTH0_CLIENT_ID\"\n    redirectUri={window.location.origin}\n  >\n    <AsertoProvider>\n      <App />\n    </AsertoProvider>\n  </Auth0Provider>,\n  document.getElementById('app')\n)\n```\n\n----------------------------------------\n\nTITLE: Making Decisions API Call\nDESCRIPTION: Example of using the decisions method to check multiple authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/api-client.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndecisions = client.decisions(\n    decisions=[\"allowed\", \"enabled\"],\n    policy_instance_name=ASERTO_POLICY_INSTANCE_NAME,\n    policy_instance_label=ASERTO_POLICY_INSTANCE_LABEL,\n    policy_path=\"my_policy_root.GET.user.__id\",\n)\n\nassert decisions ==  {\n    \"enabled\": True,\n    \"allowed\": False,\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from Aserto Directory Client in TypeScript\nDESCRIPTION: Shows how to export all data from an Aserto directory using the export API. The code uses the readAsyncIterable utility to process the async stream of response data.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await readAsyncIterable(\n  await directoryClient.export({ options: \"all\" })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Aserto AuthorizerClient in Java\nDESCRIPTION: This Java code demonstrates how to create an AuthorizerClient using the ChannelBuilder. It sets up a ManagedChannel with connection details and creates an AuthzClient instance.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/authorizer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// create a channel that has the connection details\nManagedChannel channel = new ChannelBuilder()\n        .withHost(\"localhost\")\n        .withPort(8282)\n        .withCACertPath(<path_to_authorizer_certificates>)\n        .build();\n\n// create authz client\nAuthorizerClient authzClient =  new AuthzClient(channel);\n```\n\n----------------------------------------\n\nTITLE: ObjectType Schema Definition in GraphQL\nDESCRIPTION: Defines the ObjectType GraphQL type which represents different kinds of objects in the directory. It includes fields for name, whether it's a subject, display name, ordinal value, status flags, hash, lifecycle metadata, and related relation types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/objects/object-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype ObjectType {\n  name: String!\n  isSubject: Boolean!\n  displayName: String!\n  ordinal: Int!\n  status: [Flag!]!\n  hash: Hash!\n  lifecycle: Lifecycle!\n  relationTypes(\n  first: Int!\n  after: Cursor\n): RelationTypeConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Owner-Based Access Control in Rego\nDESCRIPTION: A Rego policy implementation that checks if the current user is the owner of a resource. The policy evaluates to true only if the user's ID matches the owner ID from the resource context.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/resource-context.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage sample.GET.api.orders\ndefault allowed = false\n\nallowed {\n  input.user.id == input.resource.ownerId\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Mapping in Ruby\nDESCRIPTION: Define a custom function to map request data to a resource object for authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nAserto.with_resource_mapper do |request|\n  { resource:  request.path_info }\nend\n```\n\n----------------------------------------\n\nTITLE: Query Response JSON\nDESCRIPTION: The JSON response showing the list of department objects retrieved from the query, including their keys, display names, and type information.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/objects.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"objects\": {\n      \"nodes\": [\n        {\n          \"key\": \"teleporters\",\n          \"displayName\": \"Teleporters\",\n          \"type\": {\n            \"name\": \"department\"\n          }\n        },\n        {\n          \"key\": \"lasers\",\n          \"displayName\": \"Lasers\",\n          \"type\": {\n            \"name\": \"department\"\n          }\n        },\n        {\n          \"key\": \"spaceships\",\n          \"displayName\": \"Spaceships\",\n          \"type\": {\n            \"name\": \"department\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Mapping\nDESCRIPTION: Example of adding resource context to authorization requests using a custom mapper.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmw.WithResourceMapper(\n    func(r *http.Request, resource map[string]interface{}) {\n        // Custom function to retrieve the owner of the resource being accessed.\n        resource[\"ownerId\"] = GetOwner(r)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Mapper\nDESCRIPTION: Example of implementing a custom resource mapper function.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nAserto.with_resource_mapper do |request|\n  { resource:  request.path_info }\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Response from is API\nDESCRIPTION: Example of the response returned by the is API when evaluating the allowed decision for the specified policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy-context.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"decisions\": [\n    {\n      \"decision\": \"allowed\",\n      \"is\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Middleware for ReBAC\nDESCRIPTION: Example of using Check middleware to implement Relation-Based Access Control\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef id_mapper() -> str:\n    return request.view_args['asset']\n\n@app.route(\"/resource/<asset>\", methods=[\"GET\"])\n@requires_auth\n@aserto.check(objType=\"resource\", objIdMapper=id_mapper, relationName=\"can_read\").authorize\ndef get_resource(asset: str):\n    return {\"message\": \"Hello from GET /resource/\" + asset}\n```\n\n----------------------------------------\n\nTITLE: Using Decision Tree API\nDESCRIPTION: Example of using the decision_tree method to get multiple authorization decisions across policy paths.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/api-client.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = await client.decision_tree(\n    decisions=[\"visible\", \"enabled\", \"allowed\"],\n    policy_instance_name=ASERTO_POLICY_INSTANCE_NAME,\n    policy_instance_label=ASERTO_POLICY_INSTANCE_LABEL,\n    policy_path_root=ASERTO_POLICY_PATH_ROOT,\n    policy_path_separator=\"DOT\",\n)\n\nassert result == {\n    \"GET.your.policy.path\": {\n        \"visible\": True,\n        \"enabled\": True,\n        \"allowed\": False,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Aserto Authorization Properties Configuration\nDESCRIPTION: Complete application.properties configuration example for Aserto authorization setup\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# --- Authorizer configuration\naserto.authorizer.serviceUrl=localhost:8282\naserto.authorization.enabled=false\naserto.authorizer.policyRoot=todoApp\naserto.authorizer.decision=allowed\n\n## Topaz\n##  This configuration targets a Topaz instance running locally.\naserto.authorizer.insecure=false\naserto.authorizer.grpc.caCertPath=${user.home}/.config/topaz/certs/grpc-ca.crt\n\n## Aserto hosted authorizer\n#aserto.tenantId=<tenant_id>\n#aserto.authorizer.policyName=todo\n#aserto.authorizer.policyLabel=todo\n#aserto.authorizer.apiKey=<api_key>\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with GraphQL Query\nDESCRIPTION: GraphQL query that checks if a subject has a specific permission on an object. Requires three mandatory arguments: subject (ObjectSelector), permission (String), and object (ObjectSelector). Returns a CheckPermissionResult object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/queries/check-permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ncheckPermission(\n  subject: ObjectSelector!\n  permission: String!\n  object: ObjectSelector!\n): CheckPermissionResult!\n```\n\n----------------------------------------\n\nTITLE: Permission Type Definition in GraphQL Schema\nDESCRIPTION: GraphQL type definition for Permission object that represents an action that can be performed on a resource. Includes fields for permission identifier, display name, hash value, lifecycle metadata, and associated relation types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Permission {\n  permission: String!\n  displayName: String\n  hash: Hash!\n  lifecycle: Lifecycle!\n  relationTypes(\n  first: Int!\n  after: Cursor\n): RelationTypeConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Aserto JWT Authorization Module\nDESCRIPTION: JavaScript import statement for the Aserto JWT authorization module.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/use-express-middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { jwtAuthz } = require(\"@aserto/aserto-node\");\n```\n\n----------------------------------------\n\nTITLE: Rails Middleware Configuration\nDESCRIPTION: Complete example of configuring Aserto authorization middleware in a Rails application.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.middleware.use Aserto::Authorization do |config|\n  config.enabled = true\n  config.policy_id = \"my-policy-id\"\n  config.tenant_id = \"my-tenant-id\"\n  config.authorizer_api_key = Rails.application.credentials.aserto[:authorizer_api_key]\n  config.policy_root = \"peoplefinder\"\n  config.service_url = \"authorizer.prod.aserto.com:8443\"\n  config.decision = \"allowed\"\n  config.logger = Rails.logger\n  config.identity_mapping = {\n    type: :sub,\n    from: :sub\n  }\n  config.disabled_for = [\n    {\n      path: \"/api/users\",\n      actions: %i[GET POST]\n    },\n    {\n      path: \"/api/authentication\",\n      actions: %i[POST]\n    }\n  ]\n  config.on_unauthorized = lambda do |env|\n    puts env\n    return [403, {}, [\"Forbidden\"]]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Policy Context in is API Request\nDESCRIPTION: Example of setting the policyContext parameter in a POST request to the is API. The context identifies the policy path and decision to evaluate.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy-context.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyContext\": {\n    \"decisions\": [\n      \"allowed\"\n    ],\n    \"path\": \"sample.GET.api.orders\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Directory Client\nDESCRIPTION: Creates a directory client instance with optional configuration parameters including API key, tenant ID, and service addresses.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aserto.client.directory.v3 import Directory\n\nds = Directory(api_key=\"my_api_key\", tenant_id=\"1234\", address=\"localhost:9292\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Policy Path Mapping in Ruby\nDESCRIPTION: Provide a custom function to map URL paths to policy paths, overriding the default behavior.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAserto.with_policy_path_mapper do |policy_root, request|\n  method = request.request_method\n  path = request.path_info\n\n  \"custom: #{policy_root}.#{method}.#{path}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Aserto Initialization in React Component\nDESCRIPTION: React useEffect hook for initializing Aserto with authentication token\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/conditional-ui-rendering.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  async function initAserto() {\n    try {\n      const token = auth.userData?.id_token\n\n      if (token) {\n        await init({\n          serviceUrl: 'http://localhost:8080',\n          accessToken: token,\n          policyRoot: 'asertodemo',\n          throwOnError: false,\n        })\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  if (!asertoError && isAuthenticated) {\n    initAserto()\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [isAuthenticated, auth.userData?.id_token])\n```\n\n----------------------------------------\n\nTITLE: Using Aserto Hook in React Component\nDESCRIPTION: Example of using the useAserto hook in a React component to initialize, reload, and access the display state map.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useAserto } from '@aserto/aserto-react'\nimport { useAuth0 } from '@auth0/auth0-react'\n\nfunction App() {\n  const {\n    loading,\n    isLoaded,\n    error,\n    identity,\n    setIdentity,\n    displayStateMap,\n    getDisplayState,\n    init,\n    reload,\n  } = useAserto()\n\n  const { isLoading, isAuthenticated, getAccessTokenSilently } = useAuth0()\n\n  useEffect(() => {\n    async function load() {\n      const token = await getAccessTokenSilently()\n      if (token) {\n        await init({ accessToken: token })\n      }\n    }\n\n    if (!isLoading && isAuthenticated) {\n      load()\n    }\n  }, [isAuthenticated])\n\n  if (loading) {\n    return <div>Loading...</div>\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>\n  } else {\n    return (\n      <div>\n        {\n          displayStateMap\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Protected Route Implementation\nDESCRIPTION: Setting up CORS and creating a protected API endpoint that requires JWT authentication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/service-setup.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(cors())\n\napp.get('/api/protected', checkJwt, function (req, res) {\n  res.json({\n    secretMessage: 'Here you go, very sensitive information for ya!',\n  })\n})\n\napp.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Creating Aserto Authorization GRPC Client\nDESCRIPTION: Creates a GRPC client for Aserto authorization with proper metadata headers and SSL context configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/grpc-bindings.mdx#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMetadata metadata = new Metadata();\nMetadata.Key<String> asertoTenantId = Metadata.Key.of(\"aserto-tenant-id\", Metadata.ASCII_STRING_MARSHALLER);\nMetadata.Key<String> authorization = Metadata.Key.of(\"authorization\", Metadata.ASCII_STRING_MARSHALLER);\nmetadata.put(asertoTenantId, \"<Aserto tenant ID>\");\nmetadata.put(authorization, \"basic \" + \"<Aserto API key>\");\n\nManagedChannel channel = NettyChannelBuilder\n        .forAddress(authorizerAddress, authorizerPort)\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata))\n        .sslContext(GrpcSslContexts.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build())\n        .build();\n\nAuthorizerGrpc.AuthorizerBlockingStub authzClient = AuthorizerGrpc.newBlockingStub(channel);\n```\n\n----------------------------------------\n\nTITLE: Creating Identity Objects in Python\nDESCRIPTION: Examples of creating Identity objects with different types for use with the Aserto client.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/api-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aserto import Identity, IdentityType\n\nidentitySub = Identity(type=IdentityType.IDENTITY_TYPE_SUB, value=identity)\nidenitytNone = Identity(IdentityType.IDENTITY_TYPE_NONE)\n```\n\n----------------------------------------\n\nTITLE: Defining CheckRelationResult GraphQL Type\nDESCRIPTION: This GraphQL type definition specifies the structure of the CheckRelationResult, which is used to represent the outcome of a check_relation query. It contains a single non-null boolean field 'allowed' that indicates whether the specified relation exists.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/objects/check-relation-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype CheckRelationResult {\n  allowed: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining deleteRelation GraphQL Mutation\nDESCRIPTION: GraphQL mutation signature for deleteRelation which is used to delete relation records in the Aserto Directory. It requires a RelationInput object as input and returns a DeleteRelationResult object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/mutations/delete-relation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndeleteRelation(\n  relation: RelationInput!\n): DeleteRelationResult!\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Middleware in Startup.cs\nDESCRIPTION: C# code for configuring the authorization middleware pipeline in Startup.cs\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseAuthentication();\n    app.UseAuthorization();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\n            name: \"default\",\n            pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Authorization Middleware\nDESCRIPTION: Example showing how to create a new gRPC middleware instance with an authorizer client and policy configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/aserto-dev/go-aserto/middleware\"\n    \"github.com/aserto-dev/go-aserto/middleware/grpcz\"\n)\n\n...\n\n// Create gRPC middleware.\nmw := grpcz.New(\n    azClient,\n    middleware.Policy{\n        Name:     \"<policy name>\",\n        Decision: \"allowed\",        // Name of the policy rule to evaluate.\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Object Type in GraphQL\nDESCRIPTION: This GraphQL mutation creates a new 'Organization' object type using the setObjectType mutation. It sets various properties like name, display name, subject status, ordinal, and status, demonstrating how to create custom object types in Aserto Directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/object-types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateOrganizationObjectType {\n  setObjectType(type: {\n    name: \"org\"\n    displayName: \"Organization\"\n    isSubject: false\n    ordinal: 350\n    status: []\n  }) {\n    objectType {\n      name\n      displayName\n      isSubject\n      ordinal\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Object Instance in Ruby\nDESCRIPTION: Retrieve an object instance of a specific type and key using the Directory Client.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nuser = directory_client.object(type: 'user', key: 'euang@acmecorp.com')\n```\n\n----------------------------------------\n\nTITLE: Importing Objects and Relations with Aserto Directory Client in TypeScript\nDESCRIPTION: Creates a request to import users, groups, and their relations into an Aserto directory. The code demonstrates setting objects with properties and establishing relationships between them using the import API.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImportMsgCase, ImportOpCode, objectPropertiesAsStruct } from \"@aserto/aserto-node\"\nconst importRequest = createAsyncIterable([\n  {\n    opCode: ImportOpCode.SET,\n    msg: {\n      case: ImportMsgCase.OBJECT,\n      value: {\n        id: \"import-user\",\n        type: \"user\",\n        properties: objectPropertiesAsStruct({ foo: \"bar\" }),\n        displayName: \"name1\",\n      },\n    },\n  },\n  {\n    opCode: ImportOpCode.SET,\n    msg: {\n      case: ImportMsgCase.OBJECT,\n      value: {\n        id: \"import-group\",\n        type: \"group\",\n        properties: {},\n        displayName: \"name2\",\n      },\n    },\n  },\n  {\n    opCode: ImportOpCode.SET,\n    msg: {\n      case: ImportMsgCase.RELATION,\n      value: {\n        subjectId: \"import-user\",\n        subjectType: \"user\",\n        objectId: \"import-group\",\n        objectType: \"group\",\n        relation: \"member\",\n      },\n    },\n  },\n]);\n\nconst resp = await directoryClient.import(importRequest);\nawait (readAsyncIterable(resp))\n```\n\n----------------------------------------\n\nTITLE: Sample Rego Policy for Authorization\nDESCRIPTION: A simple Rego policy that allows access when the user ID matches the resource ID. This policy is used in the example to demonstrate the is API in action.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/is.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage sample\n\nallowed {\n  input.user.id == input.resource.id\n}\n```\n\n----------------------------------------\n\nTITLE: Identity Type Definitions and Mapping\nDESCRIPTION: Defines identity mapping types and enums for handling different identity contexts in Aserto. Includes support for unknown, none, subject, JWT, and manual identity types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype IdentityMapper = (req?: Request) => Promise<IdentityContext>;\n\nconst identityContext = (value: string, type: keyof typeof IdentityType) => {\n\nIdentityType {\n    UNKNOWN = 0,\n    NONE = 1,\n    SUB = 2,\n    JWT = 3,\n    MANUAL = 4\n}\n\n// example\nidentityContext(\"morty@the-citadel.com\", \"SUB\")\n```\n\n----------------------------------------\n\nTITLE: Async Directory Client Implementation\nDESCRIPTION: Initializes an asynchronous directory client with the same functionality as the synchronous version.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom aserto.client.directory.v3.aio import Directory\n\nds = Directory(api_key=\"my_api_key\", tenant_id=\"1234\", address=\"localhost:9292\")\n```\n\n----------------------------------------\n\nTITLE: Setting Identity Context in Aserto API Request\nDESCRIPTION: Example of setting the identity context in an Aserto API request using IDENTITY_TYPE_SUB. The identity field contains the user GUID that will be resolved to populate the input.user object during policy evaluation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/identity-context.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityContext\": {\n    \"identity\": \"[aserto-user-guid]\",\n    \"type\": \"IDENTITY_TYPE_SUB\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Resource Mapper\nDESCRIPTION: Configuration for custom resource mapping using JSON body extraction\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    @Bean\n    public ResourceMapper resourceMapper() {\n        BodyExtractor bodyExtractor = new BodyExtractor();\n        return new JsonResourceMapper(bodyExtractor, new String[]{\"email\", \"name\", \"aud\"});\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Details with Directory v1 API in JSON\nDESCRIPTION: This snippet illustrates the JSON structure returned by the 'dir/users/{id}' API endpoint. It contains detailed information about a specific user, including display name, email, enabled status, and identities.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/dir.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"displayName\": \"string\",\n    \"email\": \"string\",\n    \"enabled\": true,\n    \"id\": \"string\",\n    \"identities\": {\n      \"additionalProp3\": {\n        \"kind\": \"IDENTITY_KIND_UNKNOWN\",\n        \"provider\": \"string\",\n        \"verified\": true\n      }\n    },\n    \"metadata\": {\n      \"createdAt\": \"2021-05-22T02:23:06.199Z\",\n      \"updatedAt\": \"2021-05-22T02:23:06.199Z\"\n    },\n    \"picture\": \"string\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Objects with Cursor in GraphQL\nDESCRIPTION: This GraphQL query shows how to retrieve the next object after a specific cursor, demonstrating pagination functionality.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/graphql.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  objects(first: 1, after: \"OC04NzQyLTQ5YWQtOTUyNi05NzA5YzAwYmIwZGUA\") {\n    nodes {\n      displayName\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"objects\": {\n      \"nodes\": [\n        {\n          \"displayName\": \"Lukas Keller\"\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": true,\n        \"endCursor\": \"OC02ZWNjLTQ1ZWQtYjI3OC1kODQ5YWI1ZjdjM2UA\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Identity Mapper\nDESCRIPTION: Configuration for JWT token-based identity mapping using Authorization header\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    @Bean\n    public IdentityMapper identityDiscoverer() {\n        Extractor headerExtractor = new HeaderExtractor(\"Authorization\");\n        return new JwtIdentityMapper(headerExtractor);\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Setup\nDESCRIPTION: Initial authentication setup code showing how to check if a user is authenticated using the auth hook.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/update-the-application.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  const auth = useAuth();\n  const isAuthenticated = auth.userData?.id_token ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Creating Aserto Authorizer Client in Go\nDESCRIPTION: Demonstrates how to initialize an Aserto authorizer client using the go-aserto package. The client requires an API key and tenant ID for authentication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/authorizer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/aserto-dev/go-aserto\"\n\t\"github.com/aserto-dev/go-aserto/az\"\n)\n\n...\n\nazClient, err := az.New(\n\taserto.WithAPIKeyAuth(\"<Aserto authorizer API key\"),\n\taserto.WithTenantID(\"<Aserto tenant ID>\"),\n)\nif err != nil {\n\tlog.Fatal(\"Failed to create authorizer client:\", err)\n}\ndefer azClient.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Authorizer Options\nDESCRIPTION: Setup of AuthorizerOptions object with required parameters for connecting to Aserto service\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noptions = AuthorizerOptions(\n        url=authorizer_service_url,\n        tenant_id=tenant_id,\n        api_key=authorizer_api_key,\n        cert_file_path=cert_file_path,\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request for Morty Smith on mega-seed Resource\nDESCRIPTION: This curl command demonstrates a GET request to the /resource/mega-seed endpoint using Morty Smith's JWT token. It tests if Morty has read access to the mega-seed resource.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/simple-rbac/use-the-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHello from GET /resource/mega-seed\n```\n\n----------------------------------------\n\nTITLE: Authorizer Methods Implementation\nDESCRIPTION: Examples of different Authorizer client methods including Is, Query, DecisionTree, and ListPolicies.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Is\nawait authClient\n  .Is({\n    identityContext: identityContext(\n      \"morty@the-citadel.com\",\n      \"SUB\"\n    ),\n    policyInstance: policyInstance(\"todo\", \"todo\"),\n    policyContext: policyContext(\"todoApp.POST.todos\", [\"allowed\"]),\n    resourceContext: {\n      ownerID: \"fd1614d3-c39a-4781-b7bd-8b96f5a5100d\",\n    },\n  })\n\n// Query\nawait authClient\n  .Query({\n    identityContext: identityContext(\n      \"morty@the-citadel.com\",\n      \"SUB\"\n    ),\n    policyInstance: policyInstance(\"todo\", \"todo\"),\n    policyContext: policyContext(\"todoApp.POST.todos\", [\"allowed\"]),\n    resourceContext: {\n      ownerID: \"fd1614d3-c39a-4781-b7bd-8b96f5a5100d\",\n    },\n    query: \"x = data\",\n  })\n\n\n// DecisionTree\nawait authClient\n  .DecisionTree({\n    identityContext: identityContext(\n      \"morty@the-citadel.com\",\n      \"SUB\"\n    ),\n    policyInstance: policyInstance(\"todo\", \"todo\"),\n    policyContext: policyContext(\"todoApp.POST.todos\", [\"allowed\"]),\n    resourceContext: {\n      ownerID: \"fd1614d3-c39a-4781-b7bd-8b96f5a5100d\",\n    },\n  })\n\n\n// ListPolicies\nawait authClient\n  .ListPolicies({ policyInstance: policyInstance(\"todo\", \"todo\") })\n```\n\n----------------------------------------\n\nTITLE: Single Relation Query Function\nDESCRIPTION: The ds.relation function returns a specific relation instance connecting a subject and object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nds.relation({\n  \"object_type\": \"<object type>\",\n  \"object_id\": \"<object identifier>\",\n  \"relation\": \"<relation name>\",\n  \"subject_type\": \"<subject type>\",\n  \"subject_id\": \"<subject identifier>\",\n  \"subject_relation\": \"subject relation name>\",\n  \"with_objects\": <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Aserto Client\nDESCRIPTION: Examples of creating an AsertoClient instance using both the factory function and direct instantiation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/spa.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport createAsertoClient from '@aserto/aserto-spa-js'\n\nconst aserto = await createAsertoClient({\n  accessToken: accessToken, // valid access token\n  serviceUrl: 'https://service-url', // defaults to window.location.origin\n  endpoint: '/__displaystatemap', // access map endpoint, defaults to /__displaystatemap\n})\n\n// or you can just instantiate the client on its own\nimport { AsertoClient } from '@aserto/aserto-spa-js'\n\nconst aserto = new AsertoClient({\n  accessToken: accessToken,\n  serviceUrl: 'https://service-url', // defaults to window.location.origin\n  endpoint: '/__displaystatemap', // access map endpoint, defaults to  /__displaystatemap\n})\n\n// explicitly load\nawait aserto.reload()\n```\n\n----------------------------------------\n\nTITLE: Input Payload Structure for is API in JSON\nDESCRIPTION: The expected JSON structure to be sent to the is API endpoint. It includes identityContext for user information, policyContext for decisions and paths, policyInstance for policy identification, and resourceContext for resource-specific data.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/is.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityContext\": {\n    \"identity\": \"[aserto-user-guid]\",\n    \"type\": \"IDENTITY_TYPE_*\"\n  },\n  \"policyContext\": {\n    \"decisions\": [\"string\"],\n    \"path\": \"string\"\n  },\n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  },\n  \"resourceContext\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Aserto Display State Map in Express.js\nDESCRIPTION: Express.js middleware setup for handling display state mapping with Aserto\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/conditional-ui-rendering.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { displayStateMap, jwtAuthz } = require('@aserto/aserto-node')\n```\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(displayStateMap(authzOptions))\n```\n\n----------------------------------------\n\nTITLE: Protected Resource Access Implementation\nDESCRIPTION: Implements the logic for accessing protected resources using JWT tokens and handling the response.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/update-the-application.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [message, setMessage] = useState(false)\nconst accessSensitiveInformation = useCallback(async () => {\n  try {\n    if (!auth.isLoading) {\n      const accessToken = auth.userData?.id_token\n      const sensitiveInformationURL = `${process.env.REACT_APP_API_ORIGIN}/api/protected`\n      const sensitiveDataResponse = await fetch(sensitiveInformationURL, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n\n      try {\n        const res = await sensitiveDataResponse.json()\n        setMessage(res.secretMessage)\n      } catch (e) {\n        //In case no access is given, the response will return 403 and not return a JSON response\n        setMessage(sensitiveDataResponse.status)\n      }\n    }\n  } catch (e) {\n    console.log(e.message)\n  }\n}, [auth.isLoading, auth.userData?.id_token])\n```\n\n----------------------------------------\n\nTITLE: Identity Lookup Function\nDESCRIPTION: The ds.identity function looks up a user identity by ID (email or PID) and returns the identifier of the associated user object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nds.identity({\n  \"id\": \"<value>\"\n})\n```\n\n----------------------------------------\n\nTITLE: Delete Object Operations\nDESCRIPTION: Deletes object instances and optionally their relations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# delete an object\nds.delete_object(object_type=\"user\", object_id=\"test-object\")\n\n# delete an object and all its relations\nds.delete_object(object_type=\"user\", object_id=\"test-object\", with_relations=True)\n```\n\n----------------------------------------\n\nTITLE: Making Authorization Calls with Aserto Client\nDESCRIPTION: Example of making authorization calls using the GRPC client, including setting up identity context, policy context and handling responses.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/grpc-bindings.mdx#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic boolean is() {\n    IsRequest.Builder isBuilder = IsRequest.newBuilder();\n\n    IdentityContext.Builder identityContextBuilder =  IdentityContext.newBuilder();\n    identityContextBuilder.setIdentity(\"<email-address>\");\n    identityContextBuilder.setType(IdentityType.IDENTITY_TYPE_SUB);\n\n\n    PolicyContext.Builder policyContextBuilder = PolicyContext.newBuilder();\n    policyContextBuilder.setPath(\"todoApp.DELETE.todos.__id\");\n    policyContextBuilder.addDecisions( \"allowed\");\n\n\n    isBuilder.setIdentityContext(identityContextBuilder.build());\n    isBuilder.setPolicyContext(policyContextBuilder.build());\n\n    PolicyInstance policy = getPolicy(<policyName>, <policyLabel>);\n    isBuilder.setPolicyInstance(policy);\n\n    IsResponse isReponse = authzClient.is(isBuilder.build());\n    isReponse.getDecisions(0).getIs();\n}\n\nprivate PolicyInstance getPolicy(String name, String label) {\n    PolicyInstance.Builder policyInstance = PolicyInstance.newBuilder();\n    policyInstance.setName(name);\n    policyInstance.setInstanceLabel(label);\n\n    return policyInstance.build();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetObjectInput GraphQL Input Type\nDESCRIPTION: Input type definition for the setObject mutation with fields for type, key, displayName, properties, and hash. Used to create or update objects in the directory with specified attributes and optional hash validation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/inputs/set-object-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput SetObjectInput {\n  type: String!\n  key: String!\n  displayName: String!\n  properties: Map!\n  hash: Hash\n}\n```\n\n----------------------------------------\n\nTITLE: Sinatra Middleware Configuration\nDESCRIPTION: Example of configuring Aserto authorization middleware in a Sinatra application.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nuse Aserto::Authorization do |config|\n  config.enabled = true\n  config.policy_id = \"my-policy-id\"\n  config.tenant_id = \"my-tenant-id\"\n  config.authorizer_api_key = ENV['authorizer_api_key']\n  config.policy_root = \"peoplefinder\"\n  config.service_url = \"authorizer.prod.aserto.com:8443\"\n  config.decision = \"allowed\"\n  config.disabled_for = [\n    {\n      path: \"/api/users/:id\",\n      actions: %i[GET]\n    },\n    {\n      path: \"/\",\n      actions: %i[GET]\n    }\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Using Aserto Authorization in Ruby on Rails Controller\nDESCRIPTION: Implement Aserto authorization in a Rails controller action using the aserto_authorize! method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  aserto_authorize!\n  @post = Post.find(params[:id])\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Aserto Client in React\nDESCRIPTION: Example of initializing the Aserto client using the init() function from the useAserto hook.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { init, displayStateMap } = useAserto()\nawait init({\n  serviceUrl: 'http://service-url',\n  endpointName: '/__displaystatemap',\n  accessToken: '<VALID ACCESS TOKEN>',\n  throwOnError: true,\n  defaultDisplayState: {\n    visible: false,\n    enabled: false,\n  },\n})\n\nconsole.log(displayStateMap)\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Middleware via .NET CLI\nDESCRIPTION: Command to install the Aserto.Middleware package using the .NET Core CLI\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet add package Aserto.Middleware\n```\n\n----------------------------------------\n\nTITLE: Custom Policy Mapper Implementation\nDESCRIPTION: Example of implementing a custom policy mapper with policyContext.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// needs to return an IdentityContext\nimport { identityContext } from \"@aserto/aserto-node\";\n\nconst restMw = new Middleware({\n  client: authClient,\n  policy: policy,\n  policyMapper: async () => {\n    return policyContext('path', ['decision'])\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Settings in appsettings.json\nDESCRIPTION: JSON configuration for Aserto authorization settings including API key, tenant ID, and policy details\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"Aserto\": {\n    \"AuthorizerApiKey\": \"YOUR_AUTHORIZER_API_KEY\",\n    \"TenantID\": \"YOUR_ASERTO_TENANT_ID\",\n    \"PolicyName\": \"YOUR_POLICY_NAME\",\n    \"PolicyRoot\": \"quickstartmvc\"\n}\n```\n\n----------------------------------------\n\nTITLE: React UI Implementation\nDESCRIPTION: JSX code for rendering the authentication UI components including welcome message and sensitive information access button.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/update-the-application.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"main\">\n  {isAuthenticated && (\n    <>\n      <div className=\"top-main\">\n        <div className=\"welcome-message\">\n          Welcome {auth.userData?.profile?.email}!\n        </div>\n        <div>\n          {!message && (\n            <button\n              className=\"primary-button\"\n              onClick={() => accessSensitiveInformation()}\n            >\n              Get Sensitive Resource\n            </button>\n          )}\n          <div className=\"message-container\">\n            {message && message !== 403 && message !== 401 && (\n              <>\n                <div className=\"lottie\"></div>\n                <div className=\"message\">{message}</div>\n              </>\n            )}\n            {message && message === 401 && (\n              <>\n                <div className=\"sad-lottie\"></div>\n                <div className=\"message\">\n                  No access to sensitive information\n                </div>\n              </>\n            )}\n            {message && message === 403 && (\n              <>\n                <div className=\"sad-lottie\"></div>\n                <div className=\"message\">\n                  No access to sensitive information\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  )}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking View Permission in Rego Policy\nDESCRIPTION: This code snippet shows how to create a policy that checks if the current user has the \"view\" permission on the \"citadel\" organization using the ds.check_permission function, regardless of which relation grants this permission.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/aserto-console/directory/add-relation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\nallowed {\n  ds.check_permission({\n    \"object\": {\n      \"key\": \"citadel\",\n      \"type\": \"organization\"\n    },\n    \"permission\": {\n      \"name\": \"view\",\n    },\n    \"subject\": {\n      \"id\": input.user.id\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AsertoDecisionRequirement in Startup.cs\nDESCRIPTION: C# code snippet for customizing the AsertoDecisionRequirement in the Startup.cs file. This example shows how to add custom claim types for identity determination.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    //...\n\n    services.AddAuthorization(options =>\n    {\n        options.AddPolicy(\"Aserto\", policy =>\n        policy.Requirements.Add(new AsertoDecisionRequirement(new List<string>\n        {\n            \"mytype1\",\n            \"mytype2\"\n        })));\n    });\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Identity Resolution Implementation\nDESCRIPTION: Example of implementing a custom identity resolution function using identityContext.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// needs to return an IdentityContext\nimport { identityContext } from \"@aserto/aserto-node\";\n\nconst restMw = new Middleware({\n  client: authClient,\n  policy: policy,\n  identityMapper: async () => {\n    return identityContext('test', 'SUB')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Aserto Provider in React\nDESCRIPTION: React configuration for Aserto provider and authentication setup\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/conditional-ui-rendering.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<React.StrictMode>\n  <AuthProvider {...configuration}>\n    <AsertoProvider>\n      <App />\n    </AsertoProvider>\n  </AuthProvider>\n</React.StrictMode>\n```\n\n----------------------------------------\n\nTITLE: Querying Users in Aserto Directory using GraphQL\nDESCRIPTION: This GraphQL query retrieves the first 10 objects of type 'user' from the Aserto directory, returning their key and display name.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/relations.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ListUsers {\n  objects(first: 10, where: {type: {name: {equals: \"user\"}}}) {\n    nodes {\n      key\n      displayName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Service Configuration\nDESCRIPTION: Defines configuration types for the Directory service including endpoints and authentication settings.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServiceConfig = {\n  url?: string;\n  tenantId?: string;\n  apiKey?: string;\n  caFile?: string;\n  insecure?: boolean;\n\n};\n\nexport type DirectoryV3Config = ServiceConfig & {\n  reader?: ServiceConfig;\n  writer?: ServiceConfig;\n  importer?: ServiceConfig;\n  exporter?: ServiceConfig;\n  model?: ServiceConfig;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Department Objects with GraphQL Mutation\nDESCRIPTION: GraphQL mutation to create three department objects simultaneously. Each object has a type, key, displayName, and empty properties. The response returns the key, displayName and type name for each created object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/objects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateDepartmentObjects {\n  spaceships: setObject(object: {\n    type: \"department\"\n    key: \"spaceships\"\n    displayName: \"Spaceships\"\n    properties: {}\n  }) {\n    object {\n      key\n      displayName\n      type {\n        name\n      }\n    }\n  }\n\n  teleporters: setObject(object: {\n    type: \"department\"\n    key: \"teleporters\"\n    displayName: \"Teleporters\"\n    properties: {}\n  }) {\n    object {\n      key\n      displayName\n      type {\n        name\n      }\n    }\n  }\n\n  lasers: setObject(object: {\n    type: \"department\"\n    key: \"lasers\"\n    displayName: \"Lasers\"\n    properties: {}\n  }) {\n    object {\n      key\n      displayName\n      type {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Middleware to gRPC Server\nDESCRIPTION: Example showing how to connect the configured middleware to a gRPC server using interceptors.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Create gRPC server with middleware.\ns := grpc.NewServer(\n    grpc.UnaryInterceptor(mw.Unary),\n    grpc.StreamInterceptor(mw.Stream),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Policy Rules in Aserto\nDESCRIPTION: Policy definition for handling allowed, visible, and enabled states based on user roles\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/conditional-ui-rendering.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\npackage asertodemo.GET.api.protected\n\nimport input.policy.path\nimport input.user.properties.roles as user_roles\n\ndefault allowed = false\ndefault visible = false\ndefault enabled = false\n\nallowed {\n\tsome i\n\tdata.roles[user_roles[i]].perms[path].allowed\n}\n\nvisible {\n\tsome i\n\tdata.roles[user_roles[i]].perms[path].visible\n}\n\nenabled {\n\tsome i\n\tdata.roles[user_roles[i]].perms[path].enabled\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authorize Decorator\nDESCRIPTION: Example of protecting a Flask route with the Aserto authorize decorator\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_aserto import AsertoMiddleware, AuthorizationError\n\n\napp = Flask(__name__)\naserto = AsertoMiddleware(**aserto_options)\n\n\n@app.route(\"/api/users/<id>\", methods=[\"GET\"])\n@aserto.authorize\ndef api_user(id: str) -> Response:\n    # Raises an AuthorizationError if the `GET.api.users.__id`\n    # policy returns a decision of \"allowed = false\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Middleware via Package Manager\nDESCRIPTION: Commands to install the Aserto.Middleware NuGet package using the Package Manager Console in Visual Studio\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Aserto.Middleware\n```\n\n----------------------------------------\n\nTITLE: Creating a Department Object Type with GraphQL\nDESCRIPTION: Demonstrates how to create a new object type called 'department' using the setObjectType mutation. The object type includes name, displayName, and other configuration properties.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateDepartmentObjectType {\n  setObjectType(type: {\n    name: \"department\"\n    displayName: \"Department\"\n    isSubject: false\n    ordinal: 0\n    status: []\n  }) {\n    objectType {\n      name\n      displayName\n      isSubject\n      ordinal\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Admin Role in RBAC Policy using Rego\nDESCRIPTION: This Rego code snippet iterates over all the user's roles and returns 'true' if 'admin' is present, determining if the user should be allowed to update Department or Title properties.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/peoplefinder/modify-the-policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\n# Iterate over all the user's roles and return \"true\" if \"admin\" is present\nallowed {\n\t\"admin\" = user_roles[_]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Relation in Ruby\nDESCRIPTION: Create a new relation between objects using the Directory Client's set_relation method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndirectory_client.set_relation(\n  subject: { type: \"user\", \"test-object\" },\n  relation: \"identifier\",\n  object: { type: \"identity\", key: \"test-identity\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying an Existing Object Type in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates how to modify an existing object type using the setObjectType mutation. It updates the display name and ordinal of the previously created 'org' object type, showing how to alter object type properties after creation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/object-types.mdx#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateOrganizationObjectType {\n  setObjectType(type: {\n    name: \"org\"\n    displayName: \"Org\"\n    isSubject: false\n    ordinal: 400\n    status: []\n  }) {\n    objectType {\n      name\n      displayName\n      isSubject\n      ordinal\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Profile View\nDESCRIPTION: CSHTML view template for displaying user profile information and claims\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_11\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Microsoft.AspNetCore.Authentication\n\n@{\n    ViewData[\"Title\"] = \"Profile\";\n}\n<h1>@ViewData[\"Title\"]</h1>\n\n<p>User profile</p>\n@if (Context.User.Identity.IsAuthenticated)\n{\n    <h2>Claims</h2>\n\n    <dl>\n        @foreach (var claim in User.Claims)\n        {\n            <dt>@claim.Type</dt>\n            <dd>@claim.Value</dd>\n        }\n    </dl>\n\n    <h2>Properties</h2>\n\n    <dl>\n        @foreach (var prop in (await Context.AuthenticateAsync()).Properties.Items)\n        {\n            <dt>@prop.Key</dt>\n            <dd>@prop.Value</dd>\n        }\n    </dl>\n}\nelse\n{\n    <h2>User not authenticated.</h2>\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with Gin Framework\nDESCRIPTION: Examples of integrating Aserto middleware with the Gin web framework, including handler and resource mapping.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(c *gin.Context) {\n\tname = c.Params.ByName(\"name\")\n\tc.JSON(http.StatusOK, fmt.Sprintf(\"hello %s\", name))\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nmw.WithResourceMapper(\n    func(c *gin.Context, resource map[string]interface{}) {\n        // Custom function to retrieve the owner of the resource being accessed.\n        resource[\"ownerId\"] = GetOwner(c)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Discovery Flow Validation with cURL\nDESCRIPTION: Shell command using cURL to validate the discovery flow configuration by directly calling the discovery API endpoint with the required authorization headers and parameters.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/discovery-flow.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n     --url https://discovery.prod.aserto.com/api/v2/discovery/<POLICY_NAME>/<INSTANCE_LABEL>/opa\\\n     --header 'Accept: application/json' \\\n     --header 'Content-Type: application/json' \\\n     --header 'aserto-tenant-id: <TENANT_ID>' \\\n     --header 'authorization: basic <DISCOVERY_API_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Identity from Metadata\nDESCRIPTION: Configuration to extract JWT identity from request metadata.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmw.Identity.JWT().FromMetadata(\"identity\")\n```\n\n----------------------------------------\n\nTITLE: Response for Member and Owner Relation Types Creation\nDESCRIPTION: Shows the JSON response after creating both member and owner relation types, with results organized by the aliases specified in the request.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"member\": {\n      \"relationType\": {\n        \"name\": \"member\"\n      }\n    },\n    \"owner\": {\n      \"relationType\": {\n        \"name\": \"owner\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto CLI via Homebrew for macOS/Linux\nDESCRIPTION: Installs the Aserto CLI using Homebrew package manager on macOS or LinuxBrew on Linux. This command adds the Aserto tap repository and installs the Aserto CLI tool.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap aserto-dev/tap && brew install aserto\n```\n\n----------------------------------------\n\nTITLE: Retrieving Display State in Aserto React SDK\nDESCRIPTION: Example of using the getDisplayState() function to retrieve display state for specific resources.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst { getDisplayState } = useAserto();\nconst path = '/api/path';\n\nconst isVisible = aserto.getDisplayState('GET', path).visible;\n\nconst isUpdateEnabled = aserto.getDisplayState('PUT', path).enabled;\n\nfor (const verb of ['GET', 'POST', 'PUT', 'DELETE']) {\n  const resource = aserto.getDisplayState(verb, path));\n  for (const value of ['visible', 'enabled']) {\n    console.log(`${verb} ${path} ${value} is ${resource[verb][value]}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Owner Relations for Departments in Aserto using GraphQL\nDESCRIPTION: This GraphQL mutation creates 'owner' relations between a user (Rick) and three departments (Spaceships, Teleporters, Lasers) in the Aserto directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/relations.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateRickOwnerRelations {\n  spaceships: setRelation(relation: {\n    object: {key: \"spaceships\", type: \"department\"}\n    relationType: {name: \"owner\", objectType: \"department\"}\n    subject: {key: \"fd0614d3-c39a-4781-b7bd-8b96f5a5100d\", type: \"user\"}\n  }) {\n    relation {\n      object {\n        displayName\n        type {\n          name\n        }\n      }\n      type {\n        displayName\n      }\n      subject {\n        displayName\n        type {\n          name\n        }\n      }\n    }\n  }\n\n  teleporters: setRelation(relation: {\n    object: {key: \"teleporters\", type: \"department\"}\n    relationType: {name: \"owner\", objectType: \"department\"}\n    subject: {key: \"fd0614d3-c39a-4781-b7bd-8b96f5a5100d\", type: \"user\"}\n  }) {\n    relation {\n      object {\n        displayName\n        type {\n          name\n        }\n      }\n      type {\n        displayName\n      }\n      subject {\n        displayName\n        type {\n          name\n        }\n      }\n    }\n  }\n\n  lasers: setRelation(relation: {\n    object: {key: \"lasers\", type: \"department\"}\n    relationType: {name: \"owner\", objectType: \"department\"}\n    subject: {key: \"fd0614d3-c39a-4781-b7bd-8b96f5a5100d\", type: \"user\"}\n  }) {\n    relation {\n      object {\n        displayName\n        type {\n          name\n        }\n      }\n      type {\n        displayName\n      }\n      subject {\n        displayName\n        type {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Git Repository with New Policy\nDESCRIPTION: These Git commands are used to commit, tag, and push the updated policy to the repository. This triggers the GitOps flow in Aserto to build and publish the new policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/create-a-policy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"updated policy\"\ngit push\ngit tag v0.0.1\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Updating Layout with Profile Navigation\nDESCRIPTION: CSHTML layout template update to include profile navigation link for authenticated users\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_12\n\nLANGUAGE: cshtml\nCODE:\n```\n@if (User.Identity.IsAuthenticated)\n{\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Profile\">Profile</a>\n    </li>\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Rego Policy Package\nDESCRIPTION: Simple Rego policy package that corresponds to the policy path referenced in the API request. This policy always returns true for the allowed decision.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy-context.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage sample.GET.api.orders\n\nallowed {\n  true\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Relation in Ruby\nDESCRIPTION: Delete a relation between objects using the Directory Client's delete_relation method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\npp client.delete_relation(\n  subject: { type: \"user\", key: \"test-object\" },\n  relation: { name: \"identifier\", object_type: \"identity\" },\n  object: { type: \"identity\", key: \"test-identity\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Discovery (Policy Download) Command via REST API\nDESCRIPTION: This curl command sends a Discovery command to trigger an immediate download of a policy image. It requires the Instance ID, Aserto Tenant ID, and Discovery API key.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://relay.prod.aserto.com/api/v2/management/control_plane/exec' \\\n  -H 'content-type: application/json' \\\n  -H 'aserto-tenant-id: <Aserto-Tenant-ID>' \\\n  -H 'Authorization: basic <Discovery-API-key> \\\n  -d '{\"id\":\"<Instance-ID>\",\"command\":{\"discovery\":{}}}' \n```\n\n----------------------------------------\n\nTITLE: API Response for Forbidden Operation\nDESCRIPTION: Example response when a user attempts an unauthorized operation, showing the policy-based rejection\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/multi-tenant/use-the-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nForbidden by policy rebac.check\n```\n\n----------------------------------------\n\nTITLE: Adding Profile Action to HomeController\nDESCRIPTION: C# code implementing the Profile action in HomeController with authorization requirement\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[Authorize]\npublic IActionResult Profile()\n{\n    return View();\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with net/http Package\nDESCRIPTION: Example of integrating Aserto middleware with the standard net/http package.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(`\"hello\"`))\n}\n\n// Create a router.\nmux := http.NewServeMux()\n\n// Attach middleware to route handler.\nmux.Handle(\"/hello\", mw.HandlerFunc(Hello))\n```\n\n----------------------------------------\n\nTITLE: Piping Fetch Data to Transform\nDESCRIPTION: Shows how to pipe fetched Auth0 data directly to the transform stage using ds-load CLI, demonstrating the pipeline capability of the tool.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nds-load auth0 fetch --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret> | ds-load -p auth0 transform\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Policy using GET Request in JSON\nDESCRIPTION: This snippet shows the JSON response structure when retrieving a specific policy module using the '/api/v2/policies/{id}' endpoint. It includes the same fields as the previous endpoint but for a single policy module.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"id\": \"todo/tmp/opa/oci/github/workspace/content/src/policies/todoApp.PUT.todos.__id.rego\",\n    \"raw\": \"package todoApp.PUT.todos.__id\\n\\nimport future.keywords.in\\nimport input.resource\\nimport input.user\\n\\ndefault allowed = false\\n\\nallowed {\\n\\tuser.properties.roles[_] == \\\"editor\\\"\\n\\tuser.key == resource.ownerID\\n}\\n\\nallowed {\\n\\tuser.properties.roles[_] == \\\"evil_genius\\\"\\n}\\n\",\n    \"package_path\": \"data.todoApp.PUT.todos.__id\",\n    \"ast\": {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Viewer Relation Type with GraphQL\nDESCRIPTION: Demonstrates how to create a 'viewer' relation type for the department object type, defining a role that users can have in relation to a department.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateDepartmentViewerRelationType {\n  setRelationType(type: {\n    objectType: \"department\"\n    name: \"viewer\",\n    displayName: \"department:viewer\"\n    ordinal: 1,\n    status: []\n    unions: []\n  }) {\n    relationType {\n      name\n      displayName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to initialize a new Node.js project and install required dependencies including Express.js, JWT libraries, and Aserto SDK.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/service-setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn init -y\nyarn add express express-jwt jwks-rsa cors @aserto/aserto-node dotenv\n```\n\n----------------------------------------\n\nTITLE: API Request Structure for decisiontree API in JSON\nDESCRIPTION: The JSON input payload structure for the decisiontree API endpoint. It includes identityContext, policyContext, policyInstance, resourceContext, and options fields to define the decision tree request parameters.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/decisiontree.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identityContext\": {\n    \"type\": \"IDENTITY_TYPE_SUB\",\n    \"identity\": \"<subject>\"\n  },\n  \"policyContext\": {\n    \"decisions\": [\"visible\", \"enabled\"],\n    \"path\": \"sample\"\n  },\n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  },\n  \"resourceContext\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  },\n  \"options\": {\n    \"pathSeparator\": \"PATH_SEPARATOR_SLASH\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Client Initialization\nDESCRIPTION: Shows how to initialize the Directory client with various configuration options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectoryServiceV3 } from \"@aserto/aserto-node\";\n\nconst directoryClient = DirectoryServiceV3({\n  url: 'localhost:9292',\n  caFile: `${process.env.HOME}/.local/share/topaz/certs/grpc-ca.crt`\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Aserto Configuration\nDESCRIPTION: Environment variables required for Aserto middleware configuration including policy instance name, tenant ID, API key, and service URL.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/use-express-middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nASERTO_POLICY_INSTANCE_NAME=aserto-react\nASERTO_POLICY_INSTANCE_LABEL=aserto-react\nASERTO_TENANT_ID={Your Tenant ID}\nASERTO_AUTHORIZER_API_KEY={Your Authorizer API Key}\nASERTO_AUTHORIZER_SERVICE_URL=authorizer.prod.aserto.com:8443\nASERTO_POLICY_ROOT=asertodemo\n```\n\n----------------------------------------\n\nTITLE: Querying Relation Types with GraphQL\nDESCRIPTION: Demonstrates how to query relation types to verify that the viewer, member, and owner relation types were created successfully for the department object type.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery RelationTypes {\n  relationTypes(first: 3) {\n    nodes {\n      name\n      displayName\n      objectType {\n        name\n      }\n      ordinal\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Relations in Aserto Directory using GraphQL\nDESCRIPTION: This GraphQL query retrieves the relations of a specific user (Rick) where the user is the subject and the object is of type 'department'.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/relations.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery RicksRelations {\n  object(key: \"fd0614d3-c39a-4781-b7bd-8b96f5a5100d\", type: \"user\") {\n    displayName\n    relations(\n      side: SUBJECT,\n      options: {otherType: \"department\"},\n      first: 3\n    ) {\n      nodes {\n        type {\n          displayName\n        }\n        object {\n          type {\n            displayName\n          }\n          displayName\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions with GraphQL in Aserto Directory API\nDESCRIPTION: GraphQL mutation for creating a new permission or modifying an existing one in the Aserto Directory. It requires a SetPermissionInput object and returns a SetPermissionResult.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/mutations/set-permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsetPermission(\n  permission: SetPermissionInput!\n): SetPermissionResult!\n```\n\n----------------------------------------\n\nTITLE: Example Response from is API in JSON\nDESCRIPTION: The JSON response returned by the is API after evaluating the policy. It indicates that the allowed decision evaluated to true, meaning the authorization was granted.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/is.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"decisions\": [\n    {\n      \"decision\": \"allowed\",\n      \"is\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Scan Annotation\nDESCRIPTION: Spring annotation required for filter discovery\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ComponentScan(\"com.aserto\")\n```\n\n----------------------------------------\n\nTITLE: Reloading Display State Map in Aserto React SDK\nDESCRIPTION: Example of reloading the display state map using the reload() function from the useAserto hook.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { reload, displayStateMap } = useAserto()\nawait reload()\n\nconsole.log(displayStateMap)\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Claim Identity Mapper\nDESCRIPTION: Configuration for extracting specific claims from JWT token for identity mapping\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    @Bean\n    public IdentityMapper identityDiscoverer() {\n        Extractor headerExtractor = new AuthzHeaderExtractor(\"Authorization\", \"sub\");\n        return new SubjectIdentityMapper(headerExtractor);\n    }\n```\n\n----------------------------------------\n\nTITLE: Running REPL with policy CLI\nDESCRIPTION: This command demonstrates how to start the read-eval-print loop using the policy CLI with a tagged policy image. It requires the image to be pushed to an OCI-compliant registry.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/repl.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy repl [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Defining the RelationTypeName GraphQL Input Type\nDESCRIPTION: The RelationTypeName input type contains two required fields: name (String) for the relation type name and objectType (ObjectTypeSelector) for specifying the type of object that can be part of the relation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/inputs/relation-type-name.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RelationTypeName {\n  name: String!\n  objectType: ObjectTypeSelector!\n}\n```\n\n----------------------------------------\n\nTITLE: Input Payload Structure for Decision Logs Query API\nDESCRIPTION: JSON structure for the query API request payload. Includes page size and token for pagination, policy_id to filter by specific policy, and top_n to limit the number of results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": {\n    \"size\": \"[page size]\",\n    \"token\": \"[token of page to retrieve, must be empty on the first call]\"\n  },\n  \"policy_id\": \"[policy id or empty for all policies]\",\n  \"top_n\": \"[last N decisions to retrieve]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto React SDK using npm\nDESCRIPTION: Command to install the Aserto React SDK using npm package manager.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @aserto/aserto-react\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Path in Middleware\nDESCRIPTION: Examples of configuring policy path generation and custom mapping in the middleware.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmw.WithPolicyFromURL(\"peoplefinder\")\n\nmw.WithPolicyPathMapper(\n    func(r *http.Request) string {\n        // custom logic inspects the request and returns the policy path.\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Check Relations and Permissions\nDESCRIPTION: Verifies if a subject has a specific relation or permission on an object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nallowed = ds.check(\n    object_type=\"folder\",\n    object_id=\"/path/to/folder\",\n    relation=\"can_delete\",\n    subject_type=\"user\",\n    subject_id=\"euang@acmecorp.com\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Rails Gem in Ruby\nDESCRIPTION: Add the aserto-rails gem to your Rails application's Gemfile and install it using Bundler.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"aserto-rails\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\nLANGUAGE: bash\nCODE:\n```\ngem install aserto-rails\n```\n\n----------------------------------------\n\nTITLE: Creating local Topaz configuration\nDESCRIPTION: Command to create a new local Topaz configuration mirroring an existing policy in the Aserto Console.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naserto config new --name=\"peoplefinder\"\n```\n\n----------------------------------------\n\nTITLE: API Response Example for decisiontree API in JSON\nDESCRIPTION: Sample JSON response from the decisiontree API showing a decision tree structure. The response maps paths to their corresponding decisions (visible and enabled properties) with boolean values.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/decisiontree.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GET/api/orders\": {\n    \"visible\": true,\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Permission GraphQL Mutation\nDESCRIPTION: A GraphQL mutation that deletes a permission from the system. Takes a required permission string as input and returns a DeletePermissionResult object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/mutations/delete-permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndeletePermission(\n  permission: String!\n): DeletePermissionResult!\n```\n\n----------------------------------------\n\nTITLE: Example of Exporting a Policy Image in Bash\nDESCRIPTION: An example of using the policy save command to export a policy image called 'ogazitt/peoplefinder'. The command resolves the reference to version 1.0.0 and outputs the SHA256 digest of the exported image.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/export.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy save ogazitt/peoplefinder\n\nResolved ref [ogazitt/peoplefinder:1.0.0].\ndigest: sha256:84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectKey GraphQL Input Type for Object Identification\nDESCRIPTION: The ObjectKey input type is used to uniquely identify an object by its key and optional type. It contains a required 'key' field of type String to specify the object key, and an optional 'type' field of type ObjectTypeSelector to specify the object type.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/inputs/object-key.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput ObjectKey {\n  key: String!\n  type: ObjectTypeSelector\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Display State Map\nDESCRIPTION: Example of retrieving the display state map from the Aserto client.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/spa.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(aserto.displayStateMap())\n```\n\n----------------------------------------\n\nTITLE: Initializing Check Middleware in Startup.cs\nDESCRIPTION: C# code to configure and add Aserto check authorization middleware to the service collection.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcorecheck.mdx#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n            CheckOptions checkOptions = new CheckOptions();\n            Configuration.GetSection(\"Aserto\").Bind(checkOptions.BaseOptions);\n            // Adding the check middleware\n            services.AddAsertoCheckAuthorization(checkOptions,\n            authorizerConfig =>\n            {\n                Configuration.GetSection(\"Aserto\").Bind(authorizerConfig);\n            });\n```\n\n----------------------------------------\n\nTITLE: Configuring auth0 Plugin with YAML\nDESCRIPTION: Shows an example YAML configuration file specifically for the auth0 plugin, including domain, client ID, client secret, and template file path.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauth0:\n  domain: \"domain.auth0.com\"\n  client-id: \"clientid\"\n  client-secret: \"clientsupersecret\"\n  template-file: \"/path/to/transform.file\"\n```\n\n----------------------------------------\n\nTITLE: Forbidden Access Response\nDESCRIPTION: Example response when a user lacks required permissions to access a channel\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/slack/use-the-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nForbidden by policy rebac.check\n```\n\n----------------------------------------\n\nTITLE: Example Request for Decision Logs Query\nDESCRIPTION: Example JSON request that uses the default page size of 10 to retrieve the last 12 decisions for a specific policy ID.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/query.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"top_n\": 12,\n  \"policy_id\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto gem in Ruby\nDESCRIPTION: Add the Aserto gem to your application's Gemfile and install it using Bundler.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"aserto\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Policy Path Mapper\nDESCRIPTION: Example of implementing a custom policy path mapper bean\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    @Bean\n    public PolicyMapper policyMapperDiscoverer() {\n        return new MyCustomPolicyPathMapper();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Authorizer Directory Sync Settings in YAML\nDESCRIPTION: YAML configuration block for Edge Authorizer directory synchronization settings. Defines connection parameters including API endpoint, credentials, sync interval, and other operational settings.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/directory-synchronization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  aserto_edge:\n    addr: directory.prod.aserto.com:8443\n    apikey: '<REDACTED directory API key>'\n    enabled: true\n    insecure: false\n    page_size: 100\n    sync_interval: 5\n    timeout: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claim Identity Mapping in Ruby\nDESCRIPTION: Configure the Aserto gem to use a specific claim from a JWT token for identity mapping.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.identity_mapping = {\n  type: :sub,\n  from: :sub,\n}\n```\n\n----------------------------------------\n\nTITLE: ObjectConnection GraphQL Type Definition\nDESCRIPTION: Defines the ObjectConnection type which provides a paginated collection of Object instances. It includes pageInfo for pagination metadata and nodes for the actual collection of Objects. This type is returned by the 'objects' query.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/objects/object-connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype ObjectConnection {\n  pageInfo: PageInfo!\n  nodes: [Object!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Decision Logs JSON Structure in Aserto\nDESCRIPTION: This JSON structure represents the result of querying decision logs in Aserto. It includes details such as decision ID, time, user information, policy details, and resource context. The structure is returned by the query and decisions APIs.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/schemas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"decision_id\": \"f506be2f-97d5-4d3d-93a1-91e7623038af\",\n  \"decision_time\": \"2022-02-03T19:05:10Z\",\n  \"tenant_id\": \"2e9d3de4-8517-11ec-b068-0054f4025d69\",\n  \"user\": {\n    \"id\": \"01d1e01e-bf53-419a-9762-17270b1a7328\",\n    \"email\": \"nunof@acmecorp.com\"\n  },\n  \"path\": \"peoplefinder.GET.api.users.__id\",\n  \"decisions\": {\n    \"allowed\": true,\n    \"enabled\": true,\n    \"visible\": true\n  },\n  \"policy\": {\n    \"id\": \"dcba7cb8-8523-11ec-b00a-0154f4025d69\",\n    \"service\": \"registry.prod.aserto.com\",\n    \"image\": \"sample/policy-peoplefinder-abac\",\n    \"tag\": \"latest\",\n    \"digest\": \"sha256:5b5dc2b1211682082f8c57f8bce4a7531f17017babf7b8dc90153f160de9744f\"\n  },\n  \"resource\": {\n    \"id\": \"06ae3442-d45c-4434-bcbc-8fffc563159c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Object GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting an existing object from the directory. Requires a key and type name as input arguments and returns a DeleteObjectResult type. The key identifies the specific object to delete while the type specifies the object type name.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/mutations/delete-object.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndeleteObject(\n  key: String!\n  type: String!\n): DeleteObjectResult!\n```\n\n----------------------------------------\n\nTITLE: Getting Connection Details\nDESCRIPTION: Command to retrieve detailed information about a specific connection using its connection ID. This provides comprehensive information about the connection configuration and status.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/connections.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant get connection <connection-id>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectTypeSelector Input Type in GraphQL\nDESCRIPTION: Defines the ObjectTypeSelector input type that uniquely identifies an object type. The selector contains a single field 'name' which is a required String value that specifies the object type's name.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/inputs/object-type-selector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput ObjectTypeSelector {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Policy Context in decisiontree API Request\nDESCRIPTION: Example of setting the policyContext parameter in a POST request to the decisiontree API. This evaluates multiple decisions across all paths under a specified root.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy-context.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyContext\": {\n    \"decisions\": [\n      \"visible\",\n      \"enabled\"\n    ],\n    \"path\": \"sample\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Ruby on Rails View\nDESCRIPTION: Use the allowed? method in a Rails view to conditionally render content based on user permissions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n<% if allowed? :get, \"/posts/:id\", @post %>\n  <%= link_to \"View\", @post %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Managing Edge Authorizer Instances\nDESCRIPTION: Additional commands for managing Edge Authorizer instances, including checking status, stopping the authorizer, and updating the authorizer image to the latest version.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/onebox.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto status   # displays the running status of the authorizer\naserto stop     # stops the authorizer\naserto update   # updates the authorizer image to :latest\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteRelationResult GraphQL Type\nDESCRIPTION: This snippet defines the DeleteRelationResult GraphQL type with a single required boolean field 'deleted' that indicates whether the relation was successfully deleted. This type is returned by the deleteRelation mutation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/objects/delete-relation-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeleteRelationResult {\n  deleted: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Decision Logs Query API Example Response\nDESCRIPTION: Example JSON response from the query API showing the first page of results with pagination metadata and decision log entries.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/query.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\":  {\n    \"next_token\":  \"e2a62bd2-2704-48a4-b5e7-86f7885012f9\",\n    \"result_size\":  10,\n    \"total_size\":  12\n  },\n  \"results\":  [\n    {\n      \"log\":  \"{\\\"decision_id\\\":\\\"1834b93a-3a15-4f98-b6e2-3b1221ca984c\\\",\\\"decision_time\\\":\\\"2022-01-31T23:52:03Z\\\",\\\"tenant_id\\\":\\\"0116e83a-7e21-11ec-ab5b-00c9e2c2068b\\\",\\\"user\\\":{\\\"id\\\":\\\"2bfaa552-d9a5-41e9-a6c3-5be62b4433c8\\\",\\\"email\\\":\\\"aprils@acmecorp.com\\\"},\\\"path\\\":\\\"peoplefinder.POST.api.users.__id\\\",\\\"decisions\\\":{\\\"allowed\\\":true},\\\"policy\\\":{\\\"id\\\":\\\"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\\\",\\\"service\\\":\\\"registry.beta.aserto.com\\\",\\\"image\\\":\\\"peoplefinder/peoplefinder-abac\\\",\\\"tag\\\":\\\"latest\\\",\\\"digest\\\":\\\"sha256:dd0c6506d8d20539d46acbebffa03976274d022818dec0337a250df72d205b3a\\\"},\\\"resource\\\":{\\\"id\\\":\\\"dfdadc39-7335-404d-af66-c77cf13a15f8\\\"}}\"\n    },\n    ...\n    {\n      \"log\":  \"{\\\"decision_id\\\":\\\"89ffa41e-8083-49f6-8714-832973ff2040\\\",\\\"decision_time\\\":\\\"2022-02-03T00:28:00Z\\\",\\\"tenant_id\\\":\\\"0116e83a-7e21-11ec-ab5b-00c9e2c2068b\\\",\\\"user\\\":{\\\"id\\\":\\\"dfdadc39-7335-404d-af66-c77cf13a15f8\\\",\\\"email\\\":\\\"euang@acmecorp.com\\\"},\\\"path\\\":\\\"peoplefinder.PUT.api.users.__id\\\",\\\"decisions\\\":{\\\"allowed\\\":true},\\\"policy\\\":{\\\"id\\\":\\\"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\\\",\\\"service\\\":\\\"registry.beta.aserto.com\\\",\\\"image\\\":\\\"peoplefinder/peoplefinder-abac\\\",\\\"tag\\\":\\\"latest\\\",\\\"digest\\\":\\\"sha256:dd0c6506d8d20539d46acbebffa03976274d022818dec0337a250df72d205b3a\\\"},\\\"resource\\\":{\\\"id\\\":\\\"dfdadc39-7335-404d-af66-c77cf13a15f8\\\"}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Clients via Package Manager\nDESCRIPTION: Instructions for installing the Aserto.Clients NuGet package using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/clients.mdx#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Aserto.Clients\n```\n\n----------------------------------------\n\nTITLE: Custom Identity Mapper Implementation\nDESCRIPTION: Example of implementing a custom identity mapper function.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAserto.with_identity_mapper do |request|\n  {\n    type: :sub,\n    identity: \"my custom identity\",\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Check Attribute in Controller\nDESCRIPTION: Example of applying the Check attribute to a controller method for authorization checking.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcorecheck.mdx#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n        [HttpPost]        \n        [Check(objectID: \"resource-creators\", objectType: \"resource-creator\", relation: \"member\")]\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Identity Mapping in Ruby\nDESCRIPTION: Configure the Aserto gem to use a JWT token from a custom header for identity mapping.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.identity_mapping = {\n  type: :jwt,\n  from: \"my-auth-header\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetObjectTypeInput Type in GraphQL Schema\nDESCRIPTION: GraphQL input type definition for creating or modifying object types. Contains fields for name, displayName, isSubject flag, ordinal sorting value, status flags, and hash value for optimistic concurrency control.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/inputs/set-object-type-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput SetObjectTypeInput {\n  name: String!\n  displayName: String\n  isSubject: Boolean\n  ordinal: Int\n  status: [Flag!]\n  hash: Hash\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Objects in Auth0 Transform\nDESCRIPTION: Generates a user object with properties from Auth0 data, including email, nickname, picture, and custom metadata. The user's key is set to the email address.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{\n  \"objects\": [\n    {\n      \"key\": \"{{ $.email }}\",\n      \"type\": \"user\",\n      \"displayName\": \"{{ $.nickname }}\",\n      \"created_at\":\"{{ $.created_at }}\",\n      \"properties\":{\n        \"email\": \"{{ $.email }}\",\n        \"enabled\": true,\n        \"picture\": \"{{ $.picture }}\",\n        {{ fromEnv \"connection_id\" \"ASERTO_CONNECTION_ID\" }},\n        \"status\": \"{{ $status }}\"\n        {{ range $key, $value := $.user_metadata }}\n        ,\"{{ $key }}\": {{ marshal $value }}\n        {{ end }}\n      }\n    },\n```\n\n----------------------------------------\n\nTITLE: Defining SetRelationTypeInput GraphQL Input Type\nDESCRIPTION: GraphQL input type definition that specifies the structure for creating or updating relation types. Contains fields for name, object type, display name, ordinal, status flags, union types, and hash verification.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/inputs/set-relation-type-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput SetRelationTypeInput {\n  name: String!\n  objectType: String!\n  displayName: String\n  ordinal: Int\n  status: [Flag!]\n  unions: [RelationTypeSelector!]\n  hash: Hash\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Response for Forbidden Access in Bash\nDESCRIPTION: This snippet shows the API response when a user doesn't have the required permissions to access a resource. It's used in the context of testing Rick's access to Morty's private journal.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/gdrive/use-the-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nForbidden by policy rebac.check\n```\n\n----------------------------------------\n\nTITLE: Deleting a Permission from a Relation Type using GraphQL\nDESCRIPTION: This GraphQL mutation deletes a specific permission from a relation type. It requires a RelationTypeSelector to identify the relation type and a String representing the permission to be removed. The mutation returns a DeleteRelationTypePermissionResult.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/mutations/delete-relation-type-permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndeleteRelationTypePermission(\n  relationType: RelationTypeSelector!\n  permission: String!\n): DeleteRelationTypePermissionResult!\n```\n\n----------------------------------------\n\nTITLE: Defining UnionsWhere GraphQL Input Type for Relation Type Filtering\nDESCRIPTION: This GraphQL input type defines a structure for filtering relation types based on their union membership. It contains two fields: 'contains' which matches relation types that include all given relation types in their unions field, and 'notContains' which matches relation types that don't include any of the specified relation types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/inputs/unions-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput UnionsWhere {\n  contains: [RelationTypeSelector]\n  notContains: [RelationTypeSelector]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Identity Mapping in Ruby\nDESCRIPTION: Override the default identity mapping with a custom function that returns a hash with identity type and value.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/rails.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nAserto.with_identity_mapper do |request|\n  {\n    type: :sub,\n    identity: \"my custom identity\",\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Response for Relation Types Query\nDESCRIPTION: Shows the JSON response when querying relation types, displaying the three department relation types (viewer, member, owner) with their properties.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"relationTypes\": {\n      \"nodes\": [\n        {\n          \"name\": \"viewer\",\n          \"displayName\": \"department:viewer\",\n          \"objectType\": {\n            \"name\": \"department\"\n          },\n          \"ordinal\": 1,\n        },\n        {\n          \"name\": \"member\",\n          \"displayName\": \"department:member\",\n          \"objectType\": {\n            \"name\": \"department\"\n          },\n          \"ordinal\": 1,\n        },\n        {\n          \"name\": \"owner\",\n          \"displayName\": \"department:owner\",\n          \"objectType\": {\n            \"name\": \"department\"\n          },\n          \"ordinal\": 1,\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelationType Object in GraphQL Schema\nDESCRIPTION: This GraphQL type definition outlines the structure of a RelationType object. It includes fields for identifying and describing the relation type, its associated object type, permissions, and metadata.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/objects/relation-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype RelationType {\n  objectType: ObjectType!\n  name: String!\n  displayName: String!\n  ordinal: Int!\n  status: [Flag!]!\n  unions: [RelationType!]!\n  hash: Hash!\n  lifecycle: Lifecycle!\n  permissions(\n  first: Int!\n  after: Cursor\n): PermissionConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Decision Logs Query API Pagination Request\nDESCRIPTION: Example JSON request for retrieving the next page of results using the pagination token from a previous response.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/query.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": {\n      \"token\": \"e2a62bd2-2704-48a4-b5e7-86f7885012f9\"\n  }\n  \"top_n\": 12,\n  \"policy_id\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Context Comparison in Rego\nDESCRIPTION: A Rego policy clause that evaluates to true when the user key matches the resource key, demonstrating how resource context can be used in Aserto policies for authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy.mdx#2025-04-21_snippet_2\n\nLANGUAGE: rego\nCODE:\n```\nallowed {\n  input.user.key == input.resource.key\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity from Context Value\nDESCRIPTION: Configuration to extract subject identity from a context value in the request.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmw.Identity.Subject().FromContextValue(\"username\")\n```\n\n----------------------------------------\n\nTITLE: Checking Display State for Resources\nDESCRIPTION: Examples of checking visibility and enabled states for specific resources and iterating through HTTP verbs.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/spa.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst method = 'GET';\nconst path = '/api/path';\nconst displayState = aserto.getDisplayState(method, path));\nconst isVisible = displayState.visible;\nconst isEnabled = displayState.enabled;\n\nconst path = '/api/path';\nfor (const verb of ['GET', 'POST', 'PUT', 'DELETE']) {\n  const resource = aserto.getDisplayState(verb, path));\n  for (const value of ['visible', 'enabled']) {\n    console.log(`${verb} ${path} ${value} is ${resource[verb][value]}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Identity Mapping\nDESCRIPTION: Example configuration for JWT token-based identity mapping using a custom header.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.identity_mapping = {\n  type: :jwt,\n  from: \"my-auth-header\",\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Object Type in GraphQL\nDESCRIPTION: This GraphQL mutation deletes an object type from the system. It requires the name of the object type to delete as a non-null String argument and returns a DeleteObjectTypeResult object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/mutations/delete-object-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndeleteObjectType(\n  name: String!\n): DeleteObjectTypeResult!\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Identity Objects in Auth0 Transform\nDESCRIPTION: Conditionally generates additional identity objects for username and phone_number if they exist in the Auth0 data. These objects are only created when the respective fields are present and not empty.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    {{ if and ($.username) (ne $.username \"\") }}\n    ,\n      {\n          \"key\": \"{{ $.username }}\",\n          \"type\": \"identity\",\n          \"properties\": {\n            \"kind\": \"IDENTITY_KIND_USERNAME\",\n            \"provider\": \"auth0\",\n            {{ fromEnv \"connection_id\" \"ASERTO_CONNECTION_ID\" }},\n            \"verified\": true\n          }\n      }\n    {{ end }}\n\n    {{ if and ($.phone_number) (ne $.phone_number \"\") ($.phone_verified) }}\n    ,\n      {\n          \"key\": \"{{ $.phone_number }}\",\n          \"type\": \"identity\",\n          \"properties\": {\n            \"kind\": \"IDENTITY_KIND_PHONE\",\n            \"provider\": \"auth0\",\n            {{ fromEnv \"connection_id\" \"ASERTO_CONNECTION_ID\" }},\n            \"verified\": {{ .phone_verified }}\n          }\n      }\n    {{ end }}\n```\n\n----------------------------------------\n\nTITLE: RelationInput GraphQL Definition\nDESCRIPTION: Defines the RelationInput GraphQL input type used to specify relation parameters when creating or deleting relations. It requires three non-null fields: object, relationType, and subject, all of which use selector types to identify the respective entities.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/inputs/relation-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RelationInput {\n  object: ObjectSelector!\n  relationType: RelationTypeSelector!\n  subject: ObjectSelector!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket with Buffered Events\nDESCRIPTION: Creates a WebSocket connection with a 'since' parameter to specify the starting point for receiving buffered decision events. The Control Plane buffers up to 1000 events.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/decisions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nws = new WebSocket(\"wss://decision-logs.prod.aserto.com/api/v1/decision_logs/decisions/policy/<policy-id>?since=<start date-time>\",\n  ...)\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Metadata for Morty in JSON\nDESCRIPTION: This JSON snippet defines the metadata for Morty's API key, including the 'sub' claim used for identification in the Aserto authorization system. Note the slight difference in the 'sub' value compared to Rick's.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"CiRmZDE2MTRkMy1jMzlhLTQ3ODEtYjdiZC04Yjk2ZjVhNTEwMGQSBWxvY2Fs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetObjectTypeResult GraphQL Type\nDESCRIPTION: This GraphQL type definition specifies the structure of the SetObjectTypeResult, which is returned by the setObjectType mutation. It contains a single non-null field 'objectType' of type ObjectType, representing the object type that was created or updated.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/objects/set-object-type-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype SetObjectTypeResult {\n  objectType: ObjectType!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Objects in Ruby\nDESCRIPTION: Create new objects using the Directory Client's set_object method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nuser = directory_client.set_object(object: { type: \"user\", key: \"test-object\", display_name: \"test object\" })\nidentity = directory_client.set_object(object: { type: \"identity\", key: \"test-identity\" })\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Cognito Transform Template\nDESCRIPTION: Command to export the default transform template for the Cognito plugin. This template can be used as a basis for customizing how Cognito data is transformed into directory objects.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/cognito.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nds-load cognito export-transform\n```\n\n----------------------------------------\n\nTITLE: Defining SetRelationTypePermissionResult Type in GraphQL\nDESCRIPTION: Defines the SetRelationTypePermissionResult GraphQL type which contains information about a relation type, permission, and whether the permission is allowed. This type is returned by the setRelationTypePermission mutation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/set-relation-type-permission-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype SetRelationTypePermissionResult {\n  relationType: RelationType!\n  permission: Permission!\n  allowed: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Decision Logger for Edge Authorizer in YAML\nDESCRIPTION: YAML configuration for setting up the decision logger on an Edge Authorizer. Specifies the store directory for buffering logs, scribe connection details including certificates, and shipper parameters. Used to enable resilient decision logging with persistent storage.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/decision-logs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndecision_logger:\n  type: self\n  config:\n    store_directory: <path mount point for decision logs buffer storate>\n    scribe:\n      address: ems.prod.aserto.com:8443\n      client_cert_path: <path to client cert>\n      client_key_path: <path to client key>\n      ack_wait_seconds: 30\n      headers:\n        Aserto-Tenant-Id: <TENANT-ID>\n    shipper: \n      publish_timeout_seconds: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Authorizer with Aserto Registry Policy\nDESCRIPTION: A YAML configuration example for an Edge Authorizer that uses a policy image from the Aserto registry service. The configuration defines logging settings, directory database path, API endpoints for the authorizer (gRPC, gateway, health), and OPA instance configuration including bundle settings and service credentials.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/runtime-flow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlogging:\n  prod: true\n  log_level: info\n\ndirectory:\n  db_path: /db/directory.db\n\napi:\n  authorizer:\n    grpc:\n      connection_timeout_seconds: 2\n      listen_address: '0.0.0.0:8282'\n      certs:\n        tls_key_path: '/certs/grpc.key'\n        tls_cert_path: '/certs/grpc.crt'\n        tls_ca_cert_path: '/certs/grpc-ca.crt'\n    gateway:\n      listen_address: '0.0.0.0:8383'\n      allowed_origins:\n        - https://*.mydomain.com\n      certs:\n        tls_key_path: '/certs/gateway.key'\n        tls_cert_path: '/certs/gateway.crt'\n        tls_ca_cert_path: '/certs/gateway-ca.crt'\n    health:\n      listen_address: '0.0.0.0:8484'\n\nopa:\n  instance_id: <TENANT_ID>\n  config:\n    bundles:\n      '<POLICY_NAME>.<INSTANCE_LABEL>.<DIGEST>':\n        persist: false       \n        resource: 'registry.prod.aserto.com/<TENANT_NAME>/<REPO_NAME>:<LABEL>'\n        service: <CONNECTION_ID>-<TENANT_NAME>         \n    services:\n      <CONNECTION_ID>-<TENANT_NAME>:\n        credentials:\n          bearer:\n            token: '<TENANT_NAME>:<REDACTED> registry download API key'\n            scheme: 'basic'\n        response_header_timeout_seconds: 60\n        url:  \"https://registry.prod.aserto.com/v2/\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining Access Token from Auth0\nDESCRIPTION: Example code showing how to obtain an access token using Auth0 authentication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/spa.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport createAuth0Client from '@auth0/auth0-spa-js';\nconst auth0 = await createAuth0Cient(\n  domain: '<AUTH0_DOMAIN>',\n  client_id: '<AUTH0_CLIENT_ID>',\n  redirect_uri: '<MY_CALLBACK_URL>'\n);\nconst accessToken = await auth0.getTokenSilently();\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Display State Structure in JSON\nDESCRIPTION: Example of a simple display state JSON object that indicates whether a UI element should be visible and enabled based on user permissions. This is the core data structure used by Aserto to control UI elements.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/display-state-map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"visible\": true, \"enabled\": false }\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub Claim Identity Mapping\nDESCRIPTION: Configuration example for using a sub claim from JWT token for identity mapping.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.identity_mapping = {\n  type: :sub,\n  from: :sub,\n}\n```\n\n----------------------------------------\n\nTITLE: Express.js Dependencies Setup\nDESCRIPTION: Importing required Node.js modules and initializing Express application with necessary middleware.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/service-setup.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config()\nconst express = require('express')\nconst jwt = require('express-jwt')\nconst jwksRsa = require('jwks-rsa')\nconst cors = require('cors')\nconst app = express()\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto CLI Plugins in YAML\nDESCRIPTION: This YAML configuration file sets up various Aserto CLI plugins including Auth0, JSON, Aserto, Okta, and AzureAD integrations. The configuration defines connection parameters such as domains, client IDs, API keys, and file paths needed for the plugins to function correctly.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  log_level: LEVEL\nplugins:\n  auth0:\n    domain: DOMAIN\n    client-id: ID\n    client-secret: SECRET\n  json:\n    from-file: PATH_TO_FILE\n    to-file: PATH_TO_OUTPUT_FILE\n  aserto:\n    tenant: TENANT_ID\n    authorizer: AUTHORIZER\n    api-key: AUTHORIZER_API_KEY\n  okta:\n    domain: OKTA_DOMAIN\n    api-token: TOKEN\n  azuread:\n    tenant: AZUREAD_TENANT\n    client-id: AZUREAD_CLIENT_ID\n    client-secret: AZUREAD_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: SetPermissionInput GraphQL Input Type Definition\nDESCRIPTION: This GraphQL input type defines the structure for setting a permission in the directory. It requires a unique permission string, and optionally accepts a display name and hash for concurrency control.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/inputs/set-permission-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput SetPermissionInput {\n  permission: String!\n  displayName: String\n  hash: Hash\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Provider Details\nDESCRIPTION: Command to retrieve detailed information about a specific provider using its provider ID. This shows comprehensive information about the provider's capabilities and configuration options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/connections.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant get provider <provider-id>\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionsWhere Input Type in GraphQL\nDESCRIPTION: This GraphQL schema defines the PermissionsWhere input type which contains fields for filtering permissions by their permission value and display name. Both fields use the StringWhere input type for string comparison operations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/inputs/permissions-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput PermissionsWhere {\n  permission: StringWhere\n  displayName: StringWhere\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Relations for Object in Ruby\nDESCRIPTION: Retrieve an array of relations of a certain type for an object instance using the Directory Client.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nidentity = 'euang@acmecorp.com';\nrelations = directory_client.relation(\n  {\n    subject: {\n      type: 'user',\n    },\n    object: {\n      type: 'identity',\n      key: identity\n    },\n    relation: {\n      name: 'identifier',\n      objectType: 'identity'\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Azure AD Plugin Arguments\nDESCRIPTION: Required arguments for authenticating with Azure AD, including tenant ID, client ID, client secret, and refresh token. These can be provided as command-line arguments or environment variables.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/azuread.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  -a, --tenant=STRING           AzureAD tenant ($AZUREAD_TENANT)\n  -i, --client-id=STRING        AzureAD Client ID ($AZUREAD_CLIENT_ID)\n  -s, --client-secret=STRING    AzureAD Client Secret ($AZUREAD_CLIENT_SECRET)\n  -r, --refresh-token=STRING    AzureAD Refresh Token ($AZUREAD_REFRESH_TOKEN)\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Pagination in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to retrieve the display names of the first two objects in the directory, along with pagination information.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/graphql.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  objects(first: 2) {\n    nodes {\n      displayName\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"objects\": {\n      \"nodes\": [\n        {\n          \"displayName\": \"Karin Lamb\"\n        },\n        {\n          \"displayName\": \"Nuno Farinha\"\n        }\n      ],\n      \"pageInfo\": {\n        \"hasNextPage\": true,\n        \"endCursor\": \"OC04NzQyLTQ5YWQtOTUyNi05NzA5YzAwYmIwZGUA\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Edge Authorizer as a Microservice with Docker CLI\nDESCRIPTION: Docker command for running the Edge Authorizer as a microservice. This advanced configuration maps multiple ports and mounts necessary volumes for certificates, configuration, and data. The POLICY_INSTANCE_NAME must be replaced with your actual policy instance.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n-ti \\\n--rm \\\n--name edge \\\n--platform=linux/amd64 \\\n-p 8282:8282 \\\n-p 8383:8383 \\\n-p 8484:8484 \\\n-p 9292:9292 \\\n-p 9393:9393 \\\n-p 9494:9494 \\\n-v $HOME/.config/aserto/sidecar/certs:/certs:rw \\\n-v $HOME/.config/aserto/sidecar/cfg:/cfg:ro \\\n-v $HOME/.config/aserto/sidecar/eds:/db:rw \\\nghcr.io/aserto-dev/topaz:latest run \\\n--config-file /cfg/<POLICY_INSTANCE_NAME>.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying a Policy Template with Policy CLI\nDESCRIPTION: This command applies the minimal policy template to create a new policy. It generates a basic \"hello world\" policy structure with the necessary files and directories.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/init.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npolicy templates apply policy-template\n\nProcessing template 'policy-template' .\n\nGenerating files\n\nThe template 'policy-template' was created successfully.\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variables setup for JWT authentication including JWKS URI, issuer, and audience configurations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/service-setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nJWKS_URI=https://acmecorp.demo.aserto.com/dex/keys\nISSUER=https://acmecorp.demo.aserto.com/dex\nAUDIENCE=acmecorp-app\n```\n\n----------------------------------------\n\nTITLE: Get Multiple Objects\nDESCRIPTION: Retrieves multiple object instances in a single request using object identifiers.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nobjects = ds.get_object_many(\n    [\n        ObjectIdentifier(type=\"user\", id=\"euan@acmecorp.com\"),\n        ObjectIdentifier(type=\"group\", id=\"marketing\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Edge Authorizer Configuration Template in YAML\nDESCRIPTION: Configuration file template for bootstrapping an Edge Authorizer, including logging, directory, API settings, OPA configuration with discovery service setup, and decision logger options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/discovery-flow.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlogging:\n  prod: true\n  log_level: info\n\ndirectory:\n  db_path: /db/directory.db\n\napi:\n  authorizer:\n    grpc:\n      connection_timeout_seconds: 2\n      listen_address: '0.0.0.0:8282'\n      certs:\n        tls_key_path: '/certs/grpc.key'\n        tls_cert_path: '/certs/grpc.crt'\n        tls_ca_cert_path: '/certs/grpc-ca.crt'\n    gateway:\n      listen_address: '0.0.0.0:8383'\n      allowed_origins:\n        - https://*.mydomain.com\n      certs:\n        tls_key_path: '/certs/gateway.key'\n        tls_cert_path: '/certs/gateway.crt'\n        tls_ca_cert_path: '/certs/gateway-ca.crt'\n    health:\n      listen_address: '0.0.0.0:8484'\n\nopa:\n  instance_id: <TENANT_ID>\n  graceful_shutdown_period_seconds: 2\n  config:\n    services:\n      aserto-discovery:\n        url: https://discovery.prod.aserto.com/api/v2/discovery\n        credentials:\n          bearer:\n            token: '<DISCOVERY_API_KEY>'\n            scheme: 'basic'\n        headers:\n          Aserto-Tenant-Id: <TENANT_ID>\n    discovery:\n      service: aserto-discovery\n      resource: <POLICY_NAME>/<INSTANCE_LABEL>/opa\n\ndecision_logger:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Defining DeletePermissionResult GraphQL Type\nDESCRIPTION: This GraphQL type definition specifies the structure of the DeletePermissionResult. It contains a single non-null Boolean field 'deleted' indicating whether the permission was successfully deleted.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/delete-permission-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeletePermissionResult {\n  deleted: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Topaz Instances with Aserto CLI\nDESCRIPTION: Lists all Topaz instances that have registered with the control plane. This command returns a JSON array containing instance IDs and associated information needed for sending control plane commands.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane list instances\n```\n\n----------------------------------------\n\nTITLE: Object Type Definition in GraphQL\nDESCRIPTION: Defines the Object type in GraphQL schema, which represents primary nodes in the directory graph. The type includes fields for object metadata (type, key, displayName), properties, lifecycle information, and relations to other objects.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/objects/object.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Object {\n  type: ObjectType!\n  key: String!\n  displayName: String!\n  properties: Map!\n  hash: Hash!\n  lifecycle: Lifecycle!\n  relations(\n  side: RelationSide!\n  options: RelationOptions\n  first: Int!\n  after: Cursor\n): RelationConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectTypesWhere Input Type in GraphQL\nDESCRIPTION: This GraphQL input type definition specifies the structure for filtering object types. It contains optional fields for filtering by subject status, name matching, display name matching, ordinal values, and status flags. All fields are optional and only object types matching all provided criteria are included in results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/inputs/object-types-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput ObjectTypesWhere {\n  isSubject: Boolean\n  name: StringWhere\n  displayName: StringWhere\n  ordinal: IntWhere\n  status: FlagsWhere\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Permissions with GraphQL\nDESCRIPTION: This GraphQL query retrieves a paginated list of permissions. It requires specifying the maximum number of items to return and supports optional filtering criteria and pagination cursor for continuous data retrieval.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/queries/permissions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\npermissions(\n  where: PermissionsWhere\n  first: Int!\n  after: Cursor\n): PermissionConnection!\n```\n\n----------------------------------------\n\nTITLE: Directory Client with Custom Writer Configuration\nDESCRIPTION: Demonstrates setting up a Directory client with custom writer service configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectoryServiceV3 } from \"@aserto/aserto-node\";\n\nconst directoryClient = DirectoryServiceV3({\n  url: 'localhost:9292',\n  tenantId: '1234',\n  apiKey: 'my-api-key',\n  writer: {\n    url: 'localhost:9393'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: OIDC Configuration Setup\nDESCRIPTION: Configuration object for OIDC authentication setup\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst configuration = {\n  authority: `https://${process.env.REACT_APP_OIDC_DOMAIN}/dex`,\n  clientId: process.env.REACT_APP_OIDC_CLIENT_ID,\n  autoSignIn: true,\n  responseType: 'id_token',\n  scope: 'openid profile email',\n  redirectUri: window.location.origin,\n  audience: process.env.REACT_APP_OIDC_AUDIENCE,\n  onSignIn: () => {\n    window.location.replace(window.location.origin)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageInfo Type in GraphQL Schema\nDESCRIPTION: Definition of the PageInfo GraphQL type that provides pagination information. It contains fields for determining if there are more pages to fetch, the cursor for the next page, and the size of the current page of results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/objects/page-info.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype PageInfo {\n  hasNextPage: Boolean!\n  endCursor: Cursor\n  size: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling the Edge Authorizer Docker Image\nDESCRIPTION: Command to pull the Topaz Docker image which serves as the Edge Authorizer. Only versions 0.25.6 or higher support deployment as an Edge Authorizer.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ghcr.io/aserto-dev/topaz:latest\n```\n\n----------------------------------------\n\nTITLE: Building Policy Image with Tag\nDESCRIPTION: Command syntax for building a policy image from a directory and tagging it with organization, repository name, and version tag. Requires an OPA bundle manifest and rego files in the current directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/build.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy build <directory> -t [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Policy Instance Parameters in Aserto API\nDESCRIPTION: Example of how to structure the policyInstance parameter in Aserto API POST requests. The parameter requires a name field for the policy instance name and an instanceLabel field to identify the specific instance. Currently, the instanceLabel must match the name field.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy-instance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Set Object Operations\nDESCRIPTION: Creates or updates object instances with specified properties and optional ETag validation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# pass object fields as arguments:\nuser = ds.set_object(\n    object_type=\"user\",\n    object_id=\"new-user@acmecorp.com\",\n    display_name=\"John Doe\",\n    \"properties\": {\"active\": True, \"department\": \"Engineering\"},\n}\n\n# set_object can also take an Object parameter:\nuser.display_name = \"Jane Doe\"\nuser.properties[\"title\"] = \"Senior Engineer\"\nupdated_user = ds.set_object(object=user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Authorizer Connection to Control Plane\nDESCRIPTION: YAML configuration for connecting an Edge Authorizer to the Aserto Control Plane. Specifies the tenant ID, policy name, instance label, and the TLS certificate information needed for secure communication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/security-and-management.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntenant_id: <TENANT-ID>\npolicy_name: <POLICY-NAME>\ninstance_label: <INSTANCE-LABEL>\n\ncontroller:\n  enabled: true\n  server:\n    address: relay.prod.aserto.com:8443\n    client_cert_path: ~/.config/aserto/sidecar.crt\n    client_key_path: ~/.config/aserto/sidecar.key\n```\n\n----------------------------------------\n\nTITLE: Installing go-aserto SDK using Go package manager\nDESCRIPTION: Command to install the go-aserto package using the Go package manager. This will fetch the latest version of the SDK from the GitHub repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/install.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/aserto-dev/go-aserto\n```\n\n----------------------------------------\n\nTITLE: Pagination Request for Decision Logs Query\nDESCRIPTION: Follow-up request using the next_token from the previous response to retrieve the remaining results for the same query.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/query.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": {\n      \"token\": \"e2a62bd2-2704-48a4-b5e7-86f7885012f9\"\n  }\n  \"top_n\": 12,\n  \"policy_id\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a RelationTypePermissionConnection Type in GraphQL\nDESCRIPTION: GraphQL type definition for RelationTypePermissionConnection which represents a paginated collection of RelationTypePermission objects. It includes pageInfo for pagination metadata and nodes for the actual collection of RelationTypePermission instances.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/relation-type-permission-connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype RelationTypePermissionConnection {\n  pageInfo: PageInfo!\n  nodes: [RelationTypePermission!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Policy References with Aserto CLI\nDESCRIPTION: Command to list all policy references that Aserto is managing for the current tenant. Policy references are named connections to git repositories containing Rego files and optional JSON data files.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/policies.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant list policy-references\n```\n\n----------------------------------------\n\nTITLE: Querying Department Objects with GraphQL\nDESCRIPTION: GraphQL query to retrieve department objects using pagination (first: 5) and filtering by type name. Returns key, displayName and type information for each department.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/objects.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery DepartmentObjects {\n  objects(first: 5, where: {type: {name: {equals: \"department\"}}}) {\n    nodes {\n      key\n      displayName\n      type {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Aserto Authorization Middleware Function\nDESCRIPTION: Defining the Aserto authorization middleware function using the configuration options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/use-express-middleware.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//Aserto authorizer middleware function\nconst checkAuthz = jwtAuthz(authzOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining FlagsWhere GraphQL Input Type\nDESCRIPTION: Defines a GraphQL input type for flag-based filtering with three fields: equals for exact matching, contains for subset matching, and notContains for negative matching. Each field accepts an array of Flag enum values.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/inputs/flags-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput FlagsWhere {\n  equals: [Flag!]\n  contains: [Flag!]\n  notContains: [Flag!]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Status in Auth0 Transform\nDESCRIPTION: Assigns a default status value and then conditionally modifies it based on Auth0's user attributes email_verified and blocked status.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{$status := \"USER_STATUS_ACTIVE\"}}\n{{ if not $.email_verified }}\n  {{$status = \"USER_STATUS_PROVISIONED\"}}\n{{ else if $.blocked}}\n  {{$status = \"USER_STATUS_SUSPENDED\"}}\n{{end}}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Edge Authorizer Connections\nDESCRIPTION: Command to list all available Edge Authorizer connections configured in the Aserto Control Plane.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\naserto control-plane list connections\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects by Type and Key in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to filter objects based on their type and key, retrieving group objects whose key contains 'management'.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/graphql.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  objects(\n    first: 10\n    where: {\n      type: {name: {equals: \"group\"}}\n      key: {contains: \"management\"}\n  }) {\n    pageInfo {\n      hasNextPage\n    }\n    nodes {\n      key\n      displayName\n      type {\n        name\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"objects\": {\n      \"pageInfo\": {\n        \"hasNextPage\": false\n      },\n      \"nodes\": [\n        {\n          \"key\": \"sales-engagement-management\",\n          \"displayName\": \"sales-engagement-management-group\",\n          \"type\": {\n            \"name\": \"group\"\n          }\n        },\n        {\n          \"key\": \"content-management-consulting\",\n          \"displayName\": \"content-management-consulting-group\",\n          \"type\": {\n            \"name\": \"group\"\n          }\n        },\n        {\n          \"key\": \"project-management\",\n          \"displayName\": \"project-management-group\",\n          \"type\": {\n            \"name\": \"group\"\n          }\n        },\n        {\n          \"key\": \"senior-management\",\n          \"displayName\": \"senior-management-group\",\n          \"type\": {\n            \"name\": \"group\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Response Format\nDESCRIPTION: Example response showing the structure of the JWT token response containing access_token, token_type, expires_in, and id_token fields.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/how-to-get-a-citadel-token.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ssh\nCODE:\n```\n{\"access_token\":\"eyJh...\",\"token_type\":\"bearer\",\"expires_in\":86399,\"id_token\":\"eyJh...\"}\n```\n\n----------------------------------------\n\nTITLE: Policy Context Mapping\nDESCRIPTION: Defines policy mapping functionality for creating and managing policy contexts with decision lists.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype PolicyMapper = (req?: Request) => Promise<PolicyContext>;\n\npolicyContext = (policyPath: string, decisionsList: Array<string> = [\"allowed\"])\n\n// Example\npolicyContext(\"todoApp.POST.todos\", [\"allowed\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Instance Structure in v2 APIs\nDESCRIPTION: Shows the new policyInstance structure required in v2 APIs that replaces the policy ID that was previously in the policyContext. The policyInstance contains name and instanceLabel fields to identify the policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/upgrading-from-v1.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Plugin Arguments\nDESCRIPTION: Configuration arguments for the Okta plugin including domain, API token, and options to include groups and roles. Also includes a request timeout parameter and shows environment variable alternatives.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/okta.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n      --domain=STRING         ($DS_OKTA_DOMAIN)\n      --api-token=STRING      ($DS_OKTA_TOKEN)\n      --[no-]groups           ($DS_OKTA_GROUPS)\n      --[no-]roles            ($DS_OKTA_ROLES)\n      --request-timeout=0\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteObjectResult GraphQL Type\nDESCRIPTION: Defines a GraphQL type that contains a single required boolean field 'deleted' which indicates if an object was successfully deleted. This type is returned by the deleteObject mutation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/objects/delete-object-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeleteObjectResult {\n  deleted: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckPermissionResult Type in GraphQL Schema\nDESCRIPTION: Defines a GraphQL type that represents the result of a permission check operation. Contains a single required Boolean field 'allowed' that indicates whether the permission is granted.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/check-permission-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype CheckPermissionResult {\n  allowed: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Java Authorizer Maven Dependency\nDESCRIPTION: Maven dependency configuration to add the Aserto Java authorizer package to a project.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/grpc-bindings.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.aserto</groupId>\n    <artifactId>java-authorizer</artifactId>\n    <version>0.20.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Response for Object Types Query\nDESCRIPTION: Shows the JSON response from querying object types, showing the department object type along with other object types in the system.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"objectTypes\": {\n      \"nodes\": [\n        {\n          \"name\": \"department\",\n          \"displayName\": \"Department\"\n        },\n        {\n          \"name\": \"application\",\n          \"displayName\": \"Application\"\n        },\n        {\n          \"name\": \"resource\",\n          \"displayName\": \"Resource\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Authorization with User Attributes in Rego\nDESCRIPTION: A Rego policy that exports an 'allowed' decision with a default value of false, which becomes true only if the user's department attribute equals 'Sales'. Demonstrates using user context for authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage sample.GET.api.orders\n\ndefault allowed = false\n\nallowed {\n  input.user.properties.department == \"Sales\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetObjectResult GraphQL Type\nDESCRIPTION: GraphQL type definition for SetObjectResult which wraps an Object field representing the result of a setObject mutation. The object field is non-null and returns the created or updated object instance.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/objects/set-object-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype SetObjectResult {\n  object: Object!\n}\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Policy Deployment\nDESCRIPTION: Shell commands for committing and deploying policy changes to version control.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/support-more-roles.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"added data.json file\"\ngit push\ngit tag v0.0.2\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Checking Minikube Status for Sidecar Deployment\nDESCRIPTION: Command to verify that the minikube cluster is running properly before deploying an Edge Authorizer as a sidecar.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nminikube status\n\nminikube\ntype: Control Plane\nhost: Running\nkubelet: Running\napiserver: Running\nkubeconfig: Configured\n```\n\n----------------------------------------\n\nTITLE: Checking Permission in Ruby\nDESCRIPTION: Check if a subject has a specific permission on an object using the Directory Client's check_permission method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndirectory_client.check_permission(\n  subject: { type: \"user\", key: \"011a88bc-7df9-4d92-ba1f-2ff319e101e1\" },\n  permission: { name: \"read\" },\n  object: { type: \"group\", key: \"executive\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Object Retrieval Function\nDESCRIPTION: The ds.object function retrieves an object instance by type and ID, with optional relation instances.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nds.object({\n  \"object_type\": \"<object type>\",\n  \"object_id\": \"<object identifier>\",\n  \"with_relations\": <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Decision Logging for Edge Authorizers\nDESCRIPTION: YAML configuration for enabling decision logging in an Edge Authorizer. Defines storage location, scribe settings for secure communication with the Control Plane, and publishing parameters.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/security-and-management.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndecision_logger:\n  type: self\n  config:\n    store_directory: /app/decision_logs\n    scribe:\n      address: ems.prod.aserto.com:8443\n      client_cert_path: ~/.config/aserto/sidecar.crt\n      client_key_path: ~/.config/aserto/sidecar.key\n      ack_wait_seconds: 30\n      headers:\n        Aserto-Tenant-Id: <TENANT-ID>\n    shipper:\n      publish_timeout_seconds: 2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policies using GET Request in JSON\nDESCRIPTION: This snippet demonstrates the JSON response structure when retrieving all policies using the '/api/v2/policies' endpoint. It includes fields such as 'id', 'raw', 'package_path', and 'ast' for each policy module.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/policy.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": [\n    {\n      \"id\": \"todo/tmp/opa/oci/github/workspace/content/src/policies/todoApp.PUT.todos.__id.rego\",\n      \"raw\": \"package todoApp.PUT.todos.__id\\n\\nimport future.keywords.in\\nimport input.resource\\nimport input.user\\n\\ndefault allowed = false\\n\\nallowed {\\n\\tuser.properties.roles[_] == \\\"editor\\\"\\n\\tuser.key == resource.ownerID\\n}\\n\\nallowed {\\n\\tuser.properties.roles[_] == \\\"evil_genius\\\"\\n}\\n\",\n      \"package_path\": \"data.todoApp.PUT.todos.__id\",\n      \"ast\": {\n        ...\n      }\n    },\n    {\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examining User Properties with Viewer Role in JSON\nDESCRIPTION: JSON representation of a user named Euan Garden showing their properties including department, manager, phone, title, and roles. This user has the 'viewer' role and is in the Sales Engagement Management department. This demonstrates how user attributes are stored in Aserto for authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/peoplefinder/set-up-users.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cirkzmrhzgmzos03mzm1ltqwngqtywy2ni1jnzdjzjezyte1zjgsbwxvy2fs\",\n  \"display_name\": \"Euan Garden\",\n  ...\n  \"properties\": {\n    \"department\": \"Sales Engagement Management\",\n    \"manager\": \"2bfaa552-d9a5-41e9-a6c3-5be62b4433c8\",\n    \"phone\": \"+1-804-555-3383\",\n    \"title\": \"Salesperson\",\n    \"roles\": [\n      \"acmecorp\",\n      \"sales-engagement-management\",\n      \"user\",\n      \"viewer\"\n    ]\n  },\n  \"metadata\": {\n    \"created_at\": \"2021-11-08T21:16:13.883383606Z\",\n    \"updated_at\": \"2021-11-08T21:16:13.883383606Z\",\n    \"deleted_at\": null\n  },\n  \"deleted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteRelationTypeResult GraphQL Type\nDESCRIPTION: The DeleteRelationTypeResult GraphQL type definition that contains a single Boolean field indicating whether the relation type was successfully deleted. This type is returned by the deleteRelationType mutation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations-types/objects/delete-relation-type-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeleteRelationTypeResult {\n  deleted: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetPermissionResult GraphQL Type\nDESCRIPTION: This GraphQL type definition specifies the structure of the SetPermissionResult, which is returned by the setPermission mutation. It contains a single non-null field 'permission' of type Permission.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/set-permission-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype SetPermissionResult {\n  permission: Permission!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Clients via .NET CLI\nDESCRIPTION: Instructions for installing the Aserto.Clients NuGet package using the .NET Core CLI command line tool.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/clients.mdx#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet add package Aserto.Clients\n```\n\n----------------------------------------\n\nTITLE: Checking Owner Relation in Rego Policy\nDESCRIPTION: This code snippet demonstrates how to create a policy that checks if the current user has the \"owner\" relation to the \"citadel\" organization using the ds.check_relation function.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/aserto-console/directory/add-relation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: rego\nCODE:\n```\nallowed {\n  ds.check_relation({\n    \"object\": {\n      \"key\": \"citadel\",\n      \"type\": \"organization\"\n    },\n    \"relation\": {\n      \"name\": \"owner\",\n      \"object_type\": \"organization\"\n    },\n    \"subject\": {\n      \"id\": input.user.id\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Policy Images from a Registry\nDESCRIPTION: The basic syntax for pulling policy images from a registry using the policy CLI. This command follows a similar pattern to Docker's pull command, allowing you to specify an optional registry, organization name, repository name, and tag.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/pull.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy pull [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Defining Time Scalar Type in GraphQL\nDESCRIPTION: Definition of a GraphQL scalar type called Time that represents timestamp values. This scalar is used as a member of the Lifecycle object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/time.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Time\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Middleware using .NET CLI\nDESCRIPTION: Command to install the Aserto.AspNetCore.Middleware package using .NET CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcorecheck.mdx#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet add package Aserto.AspNetCore.Middleware\n```\n\n----------------------------------------\n\nTITLE: Example of Pushing a Policy Image using Policy CLI\nDESCRIPTION: A practical example showing how to push a policy image named 'peoplefinder' with version '1.0.0' to the registry under the organization 'ogazitt'. The output displays the resolved reference and digests for the pushed image.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/push.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy push ogazitt/peoplefinder:1.0.0\n\nResolved ref [ogazitt/peoplefinder:1.0.0].\ndigest: sha256:84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\n\nPushed ref [ogazitt/peoplefinder:1.0.0].\ndigest: sha256:05e6ed84d86f6a252e24f33cb12138d9193780f1d89a1b2ff14ced315fdf8481\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Policy Path Mapping\nDESCRIPTION: Example of implementing custom policy path mapping logic using WithPolicyPathMapper.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmw.WithPolicyPathMapper(\n    func((ctx context.Context, message interface{})) string {\n        // custom logic inspects the request and returns the policy path.\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Relation in Ruby\nDESCRIPTION: Check if a subject has a specific relation to an object using the Directory Client's check_relation method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndirectory_client.check_relation(\n  subject: { type: \"user\", key: \"dfdadc39-7335-404d-af66-c77cf13a15f8\" },\n  relation: { name: \"identifier\", object_type: \"identity\" },\n  object: { type: \"identity\", key: \"euang@acmecorp.com\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto HTTP Middleware Packages\nDESCRIPTION: Commands for installing different Aserto HTTP middleware packages for net/http, gorilla/mux, and Gin frameworks.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-http.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/aserto-dev/go-aserto/middleware/httpz\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/aserto-dev/go-aserto/middleware/gorillaz\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/aserto-dev/go-aserto/middleware/ginz\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Directory v1 API in JSON\nDESCRIPTION: This snippet shows the JSON structure returned by the 'dir/users' API endpoint. It includes pagination information and an array of user results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/dir.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": {\n    \"nextToken\": \"string\",\n    \"resultSize\": 0,\n    \"totalSize\": 0\n  },\n  \"results\": [\n    { ... user info },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelationTypesWhere Input Type in GraphQL\nDESCRIPTION: A GraphQL input type definition for RelationTypesWhere that provides filtering capabilities for relation types. All fields are optional and act as conditions that must all be satisfied for a relation type to be included in the results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/inputs/relation-types-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RelationTypesWhere {\n  objectType: ObjectTypesWhere\n  name: StringWhere\n  displayName: StringWhere\n  unions: UnionsWhere\n  ordinal: IntWhere\n  status: FlagsWhere\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelationConnection Type in GraphQL Schema\nDESCRIPTION: Defines a GraphQL type for paginated relation collections with pageInfo for pagination metadata and nodes containing the actual relation objects.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/objects/relation-connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype RelationConnection {\n  pageInfo: PageInfo!\n  nodes: [Relation!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetRelationTypeResult GraphQL Type\nDESCRIPTION: This GraphQL type definition specifies the structure of the SetRelationTypeResult object, which is returned by the setRelationType mutation. It contains a single non-null field 'relationType' that returns the RelationType object that was created.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations-types/objects/set-relation-type-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype SetRelationTypeResult {\n  relationType: RelationType!\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Aserto Policy Registry\nDESCRIPTION: Example command to sign in to the Aserto Policy Registry (APCR) using your Aserto username and APCR API key. Requires retrieving the API key from the Connections tab.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npolicy login -s registry.prod.aserto.com -u <Aserto-Username> -p <APCR-API-Key>\n```\n\n----------------------------------------\n\nTITLE: Legacy Relation Check Function\nDESCRIPTION: The obsolete ds.check_relation function checks if an object has a specific relation to a subject.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nds.check_relation({\n  \"object_type\": \"<object type>\",\n  \"object_id\": \"<object identifier>\",\n  \"relation\": \"<relation name>\",\n  \"subject_type\": \"<subject type>\",\n  \"subject_id\": \"<subject identifier>\",\n  \"trace\":  <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Pushing Policy Images to Registry using Policy CLI\nDESCRIPTION: The basic command syntax for pushing policy images to a registry. The command follows a similar pattern to Docker push, allowing you to specify the registry, organization name, repository name, and tag.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/push.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy push [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Defining @skip Directive in GraphQL\nDESCRIPTION: The @skip directive is used to conditionally exclude fields or fragments from a GraphQL query. It takes a single required Boolean argument 'if', which determines whether the field or fragment should be skipped.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/directives/skip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @skip(\n  if: Boolean!\n) on \n  | FIELD\n  | FRAGMENT_SPREAD\n  | INLINE_FRAGMENT\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Node Package\nDESCRIPTION: Command to install the Aserto Node.js package dependency using yarn.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/use-express-middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @aserto/aserto-node\n```\n\n----------------------------------------\n\nTITLE: Building Policy Image Example with Tag\nDESCRIPTION: Example of building a policy image with a specific organization name (ogazitt), repository name (peoplefinder), and version tag (1.0.0). Shows the successful creation and tagging output.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/build.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy build . -t ogazitt/peoplefinder:1.0.0\n\n\nCreated new image.\ndigest: sha256:84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\n\nTagging image.\nreference: ogazitt/peoplefinder:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Import and Export Data\nDESCRIPTION: Bulk operations for inserting and retrieving objects and relations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# import an object and a relation.\ndata = [\n    Object(type=\"user\", id=\"test@acmecorp.com\"),\n    Relation(\n        object_type=\"user\",\n        object_id=\"euang@acmecorp.com\",\n        relation=\"manager\",\n        subject_type=\"user\",\n        subject_id=\"test@acmecorp.com\",\n    ),\n]\n\nresponse = ds.import_data(data)\n\nassert response.objects.set == 1\nassert response.object.error == 0\nassert response.relations.set == 1\nassert response.relations.error == 0\n\nfrom aserto.client.directory.v3 import ExportOption, Object, Relation\n\n# export all objects and relations\nfor item in ds.export(ExportOption.OPTION_DATA):\n    if isinstance(item, Object):\n        print(\"object:\", item)\n    elif isinstance(item, Relation):\n        print(\"relation:\", item)\n```\n\n----------------------------------------\n\nTITLE: Get Relation Operations\nDESCRIPTION: Retrieves relation information with optional object and subject details.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# get the manager of euang@acmecorp.com:\nrelation = ds.get_relation(\n    object_type=\"user\",\n    relation=\"manager\",\n    subject_type=\"user\",\n    subject_id=\"euang@acmecorp.com\",\n)\n\nassert relation.object_id\n\n# include the relation's object and subject in the response:\nresponse = ds.get_relation(\n    object_type=\"user\",\n    relation=\"manager\",\n    subject_type=\"user\",\n    subject_id=\"euang@acmecorp.com\",\n    with_relations=True,\n)\n\nassert response.relation.object_id\nassert response.subject.display_name == \"Euan Garden\"\nassert response.object.properties[\"department\"] == \"Sales\"\n#\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Deleting Relation Type\nDESCRIPTION: GraphQL mutation that deletes a relation type given its name and associated object type. Takes required string arguments for the relation type name and object type name, returning a DeleteRelationTypeResult.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/mutations/delete-relation-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndeleteRelationType(\n  name: String!\n  objectType: String!\n): DeleteRelationTypeResult!\n```\n\n----------------------------------------\n\nTITLE: Multiple Relations Query Function\nDESCRIPTION: The ds.relations function returns multiple relation instances based on search criteria.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nds.relations({\n  \"object_type\": \"<object type>\",\n  \"object_id\": \"<object identifier>\",\n  \"relation\": \"<relation name>\",\n  \"subject_type\": \"<subject type>\",\n  \"subject_id\": \"<subject identifier>\",\n  \"subject_relation\": \"subject relation name>\",\n  \"with_objects\": <boolean>,\n  \"with_empty_subject_relation\": <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Certificate Response Format\nDESCRIPTION: Example JSON response when retrieving client certificates. Contains the certificate, private key, expiration, and other metadata required for mutual TLS authentication with the Aserto Control Plane.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/security-and-management.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"certificate\": \"-----BEGIN CERTIFICATE----- <elided data> -----END CERTIFICATE-----\",\n  \"common_name\": \"edge-test.69b537c3-8db5-11ec-8417-00c5cc9cb8c0.edge-authorizer.aserto.com\",\n  \"expiration\": \"2022-06-24T17:11:31Z\",\n  \"id\": \"2b:d0:75:a0:7f:25:e8:2d:75:3d:20:cd:f3:e7:0c:f6:8d:02:94:01\",\n  \"private_key\": \"-----BEGIN RSA PRIVATE KEY----- <elided data> -----END RSA PRIVATE KEY-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Modifying Object Types with GraphQL Mutation\nDESCRIPTION: The setObjectType mutation is used to create a new object type or modify an existing one. It accepts a SetObjectTypeInput object as its input parameter and returns a SetObjectTypeResult object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/mutations/set-object-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsetObjectType(\n  type: SetObjectTypeInput!\n): SetObjectTypeResult!\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Type in GraphQL Schema\nDESCRIPTION: The Lifecycle type defines timestamp metadata about an entity's lifecycle in the Aserto Directory API. It includes required fields for creation and update times, and an optional field for deletion time which is null for non-deleted entities.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/objects/lifecycle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Lifecycle {\n  createdAt: Time!\n  updatedAt: Time!\n  deletedAt: Time\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ds-load CLI Usage and Commands\nDESCRIPTION: Shows the main usage syntax and available commands for the ds-load CLI, including exec, publish, get-plugin, set-default-plugin, list-plugins, and version.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load <command>\n\nDirectory loader\n\nCommands:\n  exec                  import data in directory by running fetch, transform and publish\n  publish               load data from stdin into directory\n  get-plugin            download plugin\n  set-default-plugin    sets a plugin as default\n  list-plugins          list available plugins\n  version               version information\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Path to the config file. Any argument provided to the CLI will take precedence.\n  -v, --verbosity=INT         Use to increase output verbosity.\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Context for Policy Evaluation in JSON\nDESCRIPTION: This JSON snippet defines the resource context for evaluating a policy in the Aserto Console's Evaluator. It specifies the user ID for which the policy is being evaluated.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/peoplefinder/understanding-policies.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": \"dfdadc39-7335-404d-af66-c77cf13a15f8\" }\n```\n\n----------------------------------------\n\nTITLE: Creating or Modifying Objects with setObject GraphQL Mutation\nDESCRIPTION: This GraphQL mutation creates a new object or modifies an existing one in the directory. It requires a SetObjectInput parameter containing the object details and returns a SetObjectResult with information about the operation outcome.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/mutations/set-object.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsetObject(\n  object: SetObjectInput!\n): SetObjectResult!\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-Aserto Package\nDESCRIPTION: Commands for installing the flask-aserto package using pip or Poetry package managers\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/flask.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install flask-aserto\n```\n\nLANGUAGE: sh\nCODE:\n```\npoetry add flask-aserto\n```\n\n----------------------------------------\n\nTITLE: Installing policy CLI via Homebrew for macOS or Linux\nDESCRIPTION: This command installs the policy CLI using Homebrew package manager for macOS or LinuxBrew for Linux systems.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install opcr-io/tap/policy\n```\n\n----------------------------------------\n\nTITLE: Using Aserto Directory CLI Commands\nDESCRIPTION: Displays the available directory commands in the Aserto CLI. These commands allow users to interact with the Aserto directory to check permissions, search the relation graph, and manage objects, relations, and manifests. The CLI also provides data management functions like import, export, backup, and restore.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/directory.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: aserto directory (ds) <command> [flags]\n\ndirectory commands\n\nCommands:\n  directory (ds) check      check permission\n  directory (ds) search     search relation graph\n  directory (ds) get        get object|relation|manifest\n  directory (ds) set        set object|relation|manifest\n  directory (ds) delete     delete object|relation|manifest\n  directory (ds) list       list objects|relations\n  directory (ds) import     import directory data\n  directory (ds) export     export directory data\n  directory (ds) backup     backup directory data\n  directory (ds) restore    restore directory data\n  directory (ds) test       execute directory assertions\n\nFlags:\n  -h, --help             Show context-sensitive help.\n  -c, --config=STRING    name or path of configuration file\n  -v, --verbosity        Use to increase output verbosity.\n      --tenant=STRING    tenant id override ($ASERTO_TENANT_ID)\n```\n\n----------------------------------------\n\nTITLE: Querying Subject-Object Relation Check with GraphQL\nDESCRIPTION: This GraphQL query checks if a given subject has a specified relation to an object. It requires three parameters: a subject selector, a relation type selector, and an object selector, all of which must be non-null. The query returns a CheckRelationResult object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/queries/check-relation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ncheckRelation(\n  subject: ObjectSelector!\n  relation: RelationTypeSelector!\n  object: ObjectSelector!\n): CheckRelationResult!\n```\n\n----------------------------------------\n\nTITLE: Get Relations with Pagination\nDESCRIPTION: Searches for relations matching specified criteria with pagination support.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# find all groups a user is a member of:\npage = PaginationRequest(size=10)\n\nwhile True:\n    response = ds.get_relations(\n        object_type=\"group\",\n        \"relation\"=\"member\",\n        \"subject_type\": \"user\",\n        \"subject_id\": \"euang@acmecorp.com\",\n        with_objects=True,\n        page=page,\n    )\n\n    if not response.page.next_token:\n        break\n\n    page.token = response.page.next_token\n```\n\n----------------------------------------\n\nTITLE: Defining setRelationTypePermission Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation adds a permission to a relation type. It takes a SetRelationTypePermissionInput as an argument and returns a SetRelationTypePermissionResult.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/mutations/set-relation-type-permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsetRelationTypePermission(\n  permission: SetRelationTypePermissionInput!\n): SetRelationTypePermissionResult!\n```\n\n----------------------------------------\n\nTITLE: Relation/Permission Check Function\nDESCRIPTION: The ds.check function verifies if an object has a specific relation or permission to a subject.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nds.check({\n  \"object_type\": \"<object type>\",\n  \"object_id\": \"<object identifier>\",\n  \"relation\": \"<relation or permission name>\",\n  \"subject_type\": \"<subject type>\",\n  \"subject_id\": \"<subject identifier>\",\n  \"trace\":  <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Scripting Control Plane Commands with Bash\nDESCRIPTION: This bash script obtains the Instance ID from the Edge Authorizer Connection ID, Aserto Tenant ID, and Discovery API key. It then sends a sync_edge_directory command to trigger an Edge Directory sync.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_ID=<Edge-Authorizer-Connection-ID>\nASERTO_TENANT_ID=<Aserto-Tenant-ID>\nASERTO_DISCOVER_KEY=<Aserto-Discovery-API-key>\n\nINSTANCE_ID=$(curl -s 'https://relay.prod.aserto.com/api/v2/management/control_plane/instance_registrations' \\\n    -H 'aserto-tenant-id: '${ASERTO_TENANT_ID} \\\n    -H 'authorization: basic '${ASERTO_DISCOVER_KEY} \\\n    -H 'content-type: application/json' | jq -r '.result[] | select (.info.connection_id == '\\\"$CONNECTION_ID\\\"' ) .id')\n\necho \"TENANT_ID     = ${ASERTO_TENANT_ID}\"\necho \"CONNECTION_ID = ${CONNECTION_ID}\"\necho \"INSTANCE_ID   = ${INSTANCE_ID}\"\n\ncurl -X POST 'https://relay.prod.aserto.com/api/v2/management/control_plane/exec' \\\n    -H 'content-type: application/json' \\\n    -H 'aserto-tenant-id: '${ASERTO_TENANT_ID} \\\n    -H 'authorization: basic '${ASERTO_DISCOVER_KEY} \\\n    --data-raw '{\"id\":'\\\"$INSTANCE_ID\\\"',\"command\":{\"sync_edge_directory\":{}}}'\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteRelationTypePermissionResult GraphQL Type\nDESCRIPTION: GraphQL type definition for DeleteRelationTypePermissionResult containing a single boolean field 'deleted' that indicates whether the permission was successfully deleted.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/delete-relation-type-permission-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeleteRelationTypePermissionResult {\n  deleted: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelationOptions Input Type in GraphQL\nDESCRIPTION: Defines an input type for filtering object relations queries. It allows specifying the related object, object type, and relation type constraints.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/inputs/relation-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RelationOptions {\n  other: ObjectSelector\n  otherType: String\n  relationType: RelationTypeSelector\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in to Aserto account\nDESCRIPTION: Command to authenticate and log in to your Aserto account using the CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto login\n```\n\n----------------------------------------\n\nTITLE: Displaying User Properties in JSON for Aserto Directory\nDESCRIPTION: This JSON snippet shows the structure of user properties in the Aserto Directory, including personal information, department, manager, phone, title, and roles. It demonstrates how user data is organized and what information is available for authorization decisions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/adding-users.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"displayName\": \"Euan Garden\",\n  \"email\": \"euang@acmecorp.com\",\n  ...\n  \"properties\": {\n    \"department\": \"Sales Engagement Management\",\n    \"manager\": \"2bfaa552-d9a5-41e9-a6c3-5be62b4433c8\",\n    \"phone\": \"+1-804-555-3383\",\n    \"title\": \"Salesperson\"\n    \"roles\": [\n      \"acmecorp\",\n      \"sales-engagement-management\",\n      \"user\",\n      \"viewer\"\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Filtering and Pagination in GraphQL\nDESCRIPTION: A GraphQL query that returns objects matching specified criteria. It supports filtering through the 'where' parameter, requires specifying the maximum number of results with 'first', and allows pagination with the 'after' cursor. Returns an ObjectConnection.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/queries/objects.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nobjects(\n  where: ObjectsWhere\n  first: Int!\n  after: Cursor\n): ObjectConnection!\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Python Client\nDESCRIPTION: Commands for installing the Aserto Python client using pip or Poetry package managers.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/api-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install aserto\n```\n\nLANGUAGE: sh\nCODE:\n```\npoetry add aserto\n```\n\n----------------------------------------\n\nTITLE: Installing aserto-idp via Go\nDESCRIPTION: This command installs aserto-idp using Go's package manager. It fetches the latest development version of aserto-idp from the GitHub repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# NOTE: The dev version will be in effect!\ngo get -u github.com/aserto-dev/aserto-idp\n```\n\n----------------------------------------\n\nTITLE: Signing in to Aserto CLI using browser authentication\nDESCRIPTION: This command opens a browser window for authentication with the Aserto identity provider. Upon successful authentication, the access token is stored in the system keychain for future use by the CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/login.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto login\n```\n\n----------------------------------------\n\nTITLE: Creating Member and Owner Relation Types with GraphQL\nDESCRIPTION: Shows how to create multiple relation types ('member' and 'owner') in a single GraphQL request using aliases to distinguish the results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateDepartmentMemberAndOwnerRelationTypes {\n  member: setRelationType(type: {\n    name: \"member\",\n    displayName: \"department:member\"\n    objectType: \"department\"\n    ordinal: 1,\n    status: []\n    unions: []\n  }) {\n    relationType {\n      name\n    }\n  }\n\n  owner: setRelationType(type: {\n    name: \"owner\",\n    displayName: \"department:owner\"\n    objectType: \"department\"\n    ordinal: 1,\n    status: []\n    unions: []\n  }) {\n    relationType {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Topaz Client Configuration\nDESCRIPTION: Example of creating an Authorizer client for local Topaz instance with CA certificate.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/express.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst authClient = new Authorizer({\n  authorizerServiceUrl: \"localhost:8282\",\n  caFile: `${process.env.HOME}/.local/share/topaz/certs/grpc-ca.crt`\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Single Permission with GraphQL\nDESCRIPTION: GraphQL query to select a single permission by its name. Takes a required permission string argument and returns a Permission object containing the permission details.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/queries/permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\npermission(\n  permission: String!\n): Permission!\n```\n\n----------------------------------------\n\nTITLE: Defining the SetRelationResult GraphQL Type\nDESCRIPTION: GraphQL type definition for SetRelationResult which represents the result returned by the setRelation mutation. It contains a single non-null field named 'relation' of type Relation that represents the created relation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/objects/set-relation-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype SetRelationResult {\n  relation: Relation!\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Middleware Configuration\nDESCRIPTION: Configuration of JWT validation middleware using jwks-rsa to dynamically fetch signing keys and validate tokens.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/service-setup.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkJwt = jwt({\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: process.env.JWKS_URI,\n  }),\n\n  audience: process.env.AUDIENCE,\n  issuer: process.env.ISSUER,\n  algorithms: ['RS256'],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectsWhere GraphQL Input Type\nDESCRIPTION: The ObjectsWhere input type defines a structure for filtering objects based on type, key, and displayName properties. It's used in queries that return objects and in relation filtering.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/inputs/objects-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput ObjectsWhere {\n  type: ObjectTypesWhere\n  key: StringWhere\n  displayName: StringWhere\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeIDWhere Input Type in GraphQL\nDESCRIPTION: This GraphQL input type defines fields for comparing TypeIDs. It includes equality, inequality, and set membership operations. The type is used for filtering types based on their id field in queries.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/inputs/type-idwhere.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput TypeIDWhere {\n  equals: TypeID\n  notEquals: TypeID\n  in: [TypeID!]\n  notIn: [TypeID!]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS ECR Repository\nDESCRIPTION: Creates a new policy repository in AWS ECR. This command will return a URI that can be used to push policy images to the repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws ecr create-repository --repository-name <my-policy-name>\n```\n\n----------------------------------------\n\nTITLE: Successful PUT Request Response\nDESCRIPTION: Example of a successful API response for a PUT request when a user has write permissions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/github/use-the-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHello from PUT /repo/citadel.missions\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Object Type with GraphQL\nDESCRIPTION: A GraphQL query that retrieves a single object type from the directory. It takes a required 'name' parameter as a non-null String that specifies which object type to retrieve. The query returns an ObjectType entity.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/queries/object-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nobjectType(\n  name: String!\n): ObjectType!\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto gRPC Middleware Package\nDESCRIPTION: Command to install the Aserto gRPC middleware package using go get.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/go/middleware-grpc.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/aserto-dev/go-aserto/middleware/grpz\n```\n\n----------------------------------------\n\nTITLE: Viewing Tagged Policy Images\nDESCRIPTION: This command demonstrates how to view the list of tagged policy images using the policy CLI. It shows the repository, tag, size, and creation time for each image.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/tag.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ policy images\n\n|          REPOSITORY          |  TAG   | SIZE  |  CREATED AT   |\n|------------------------------|--------|-------|---------------|\n| ogazitt/peoplefinder         | 1.0.0  | 555 B | 5 minutes ago |\n| ogazitt/peoplefinder         | latest | 555 B | 5 minutes ago |\n```\n\n----------------------------------------\n\nTITLE: Signing out of Aserto CLI and removing access token\nDESCRIPTION: This command logs out the user from the Aserto CLI and removes the stored access token from the operating system's keychain. It's important to note that after logging out, the user should select a new configuration using 'aserto config' commands.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/login.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto logout\n```\n\n----------------------------------------\n\nTITLE: Querying Object Types with GraphQL\nDESCRIPTION: Shows how to retrieve the first 10 object types that are not subjects and have no modifier flags, returning their name and display name.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery ListObjectTypes {\n  objectTypes(first: 10, where: {isSubject: false, status: {equals: []}}) {\n    nodes {\n      name\n      displayName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Object in Ruby\nDESCRIPTION: Update an existing object using the Directory Client's set_object method.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nuser = directory_client.set_object(object: { type: \"user\", key: \"test-object\", display_name: \"test object\" })\nuser.display_name = 'test object edit'\nupdated_user = directory_client.set_object(object: user)\n```\n\n----------------------------------------\n\nTITLE: Defining a Relation Type in GraphQL Schema\nDESCRIPTION: This GraphQL schema defines a Relation type that represents a relationship between a source object and a target object. It includes fields for the object, subject, relation type, and lifecycle metadata.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/objects/relation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Relation {\n  object: Object!\n  subject: Object!\n  type: RelationType!\n  lifecycle: Lifecycle!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relations with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for creating a new relation. Takes a required RelationInput argument and returns a SetRelationResult object containing the operation result.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/mutations/set-relation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsetRelation(\n  relation: RelationInput!\n): SetRelationResult!\n```\n\n----------------------------------------\n\nTITLE: Triggering Edge Directory Sync with Aserto CLI\nDESCRIPTION: Forces an immediate synchronization of new manifest or data in the Central Directory by short-circuiting the Directory timer. The command requires the instance ID obtained from the list instances command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane exec edge-sync <Instance-ID>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSelector GraphQL Input Type\nDESCRIPTION: This GraphQL input type definition provides a way to uniquely identify an object by combining its type and key. The input requires both fields to be non-null strings.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/inputs/object-selector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput ObjectSelector {\n  key: String!\n  type: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Authorization Directive\nDESCRIPTION: Defines an authorization directive that can be applied to field definitions to specify required permissions. The directive takes a mandatory permission parameter of type String that determines the access control requirements.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/directives/authz.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @authz(\n  permission: String!\n) on FIELD_DEFINITION\n```\n\n----------------------------------------\n\nTITLE: Configuration Arguments for Google Workspace Plugin in Shell\nDESCRIPTION: Lists the supported arguments for configuring the Google Workspace plugin, including client ID, client secret, refresh token, and options for retrieving groups and specifying the customer.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/google.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  -i, --client-id=STRING          Google Client ID ($GOOGLE_CLIENT_ID)\n  -s, --client-secret=STRING      Google Client Secret ($GOOGLE_CLIENT_SECRET)\n  -r, --refresh-token=STRING      Google Refresh Token ($GOOGLE_REFRESH_TOKEN)\n  -g, --groups                    Retrieve Google groups ($GOOGLE_GROUPS)\n      --customer=\"my_customer\"    Google Workspace Customer field ($GOOGLE_CUSTOMER)\n```\n\n----------------------------------------\n\nTITLE: Creating Group Membership Relations in Auth0 Transform\nDESCRIPTION: Generates member relations between users and groups based on Auth0 roles. For each role assigned to a user, a member relation is created linking the user to the corresponding group.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    {{ if $.roles }}, {{ end }}\n\n    {{ range $i, $element := $.roles }}\n      {{ if $i }},{{ end }}\n      {\n      \"relation\": \"member\",\n              \"subject\": {\n                  \"type\": \"user\",\n                  \"key\": \"{{$.email}}\"\n              },\n              \"object\": {\n                  \"type\": \"group\",\n                  \"key\": \"{{$element.name}}\"\n              }\n      }\n    {{ end }}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Middleware using Package Manager\nDESCRIPTION: Command to install the Aserto.AspNetCore.Middleware package using NuGet Package Manager.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcorecheck.mdx#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Aserto.AspNetCore.Middleware\n```\n\n----------------------------------------\n\nTITLE: Example Policy Context Structure in v1 APIs\nDESCRIPTION: Displays the v1 format of the policy context containing the decisions array, policy ID, and path. This represents the structure that needs to be updated for v2 compatibility.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/upgrading-from-v1.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyContext\": {\n    \"decisions\": [\n      \"allowed\"\n    ],\n    \"id\": \"[policy-id]\",\n    \"path\": \"sample.GET.api.orders\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ds-load CLI with Homebrew for macOS or LinuxBrew\nDESCRIPTION: Command to install the ds-load CLI using the Homebrew package manager on macOS or LinuxBrew on Linux systems. This taps the Aserto developer repository and then installs the ds-load package.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap aserto-dev/tap && brew install ds-load\n```\n\n----------------------------------------\n\nTITLE: Example of Pulling a Policy Image\nDESCRIPTION: A complete example showing how to pull a specific policy image called 'peoplefinder' from the 'ogazitt' organization with version tag '1.0.0'. The output shows the successful pull operation with the image digest.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/pull.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy pull ogazitt/peoplefinder:1.0.0\n\nPulling.\nref: ogazitt/peoplefinder:1.0.0\n\nPulled ref [ogazitt/peoplefinder:1.0.0].\ndigest: sha256:84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\n```\n\n----------------------------------------\n\nTITLE: Manifest Operations\nDESCRIPTION: Downloads and uploads directory manifests with optional ETag validation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmanifest = ds.get_manifest()\n\nprint(manifest.body)    # yaml manifest\n\n# conditionally get the manifest if its etag has changed\nnew_manifest = ds.get_manifest(etag=manifest.etag)\n\nassert new_manifest is None   # the manifest hasn't changed\n\nwith open(\"manifest.yaml\", \"rb\") as f:\n    manifest = f.read()\n\nds.set_manifest(manifest)\n```\n\n----------------------------------------\n\nTITLE: Starting an Edge Authorizer Container\nDESCRIPTION: Command to start a Docker container running an Edge Authorizer with the created policy configuration. This runs after selecting the appropriate configuration with the config use command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/onebox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto start\n```\n\n----------------------------------------\n\nTITLE: Defining RelationTypePermission GraphQL Type\nDESCRIPTION: This GraphQL type definition specifies the structure of a RelationTypePermission object. It includes fields for the associated permission, relation type, allowed status, and lifecycle metadata.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/relation-type-permission.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype RelationTypePermission {\n  permission: Permission!\n  relationType: RelationType!\n  allowed: Boolean!\n  lifecycle: Lifecycle!\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Auth0 Data with Custom Template\nDESCRIPTION: Shell command to transform Auth0 data using a custom template. Takes the raw Auth0 data and applies the transformation to generate directory objects and relations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nds-load -p auth0 transform --template=./auth0.tmpl <auth0.json >auth0-transformed.json \n```\n\n----------------------------------------\n\nTITLE: Defining RelationTypeSelector Input Type in GraphQL\nDESCRIPTION: Defines an input type that identifies a relation type using two required fields: name and objectType. This selector is used across various queries and mutations for relation type operations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/inputs/relation-type-selector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RelationTypeSelector {\n  name: String!\n  objectType: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Scalar Type in GraphQL\nDESCRIPTION: Defines the String scalar type that represents textual data as UTF-8 character sequences. This type is commonly used for free-form human-readable text in GraphQL schemas.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/string.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar String\n```\n\n----------------------------------------\n\nTITLE: Saving Policy Image Locally\nDESCRIPTION: Command to save the policy image to a local bundle file.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npolicy save aserto-templates/peoplefinder-rbac:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Obtaining Refresh Token for Google Workspace Plugin in Shell\nDESCRIPTION: Shows the usage command for obtaining a refresh token from Google Cloud Platform, including required flags for client ID, client secret, and optional port configuration for the callback server.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/google.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-google get-refresh-token --client-id=STRING --client-secret=STRING\n\nobtain a refresh token from GCP\n\nFlags:\n  -h, --help                    Show context-sensitive help.\n  -c, --config=CONFIG-FLAG      Configuration file path\n  -v, --verbosity=INT           Use to increase output verbosity.\n\n  -i, --client-id=STRING        Google Client ID ($GOOGLE_CLIENT_ID)\n  -s, --client-secret=STRING    Google Client Secret ($GOOGLE_CLIENT_SECRET)\n  -p, --port=8761               Port number to run callback server on ($GOOGLE_PORT)\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Auth0\nDESCRIPTION: Shell command to retrieve user data from Auth0 using authentication credentials. The data is saved to a JSON file for further processing.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nds-load auth0 fetch --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret> >auth0.json\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto NuGet Package\nDESCRIPTION: Command to add Aserto ASP.NET Core middleware package to the project\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\n$dotnetmvc/src/QuickstartMVC$ dotnet add package Aserto.AspNetCore.Middleware\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Transform for Auth0 Plugin\nDESCRIPTION: Demonstrates the command to export the default transform template for the Auth0 plugin, which can be used as a basis for custom transformations of Auth0 data into directory objects and relations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/auth0.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nds-load auth0 export-transform\n```\n\n----------------------------------------\n\nTITLE: Exporting Policy Images in Bash\nDESCRIPTION: The command syntax for exporting a policy image to a tarball using the policy CLI. By default, the output is saved to a file called bundle.tar.gz in the current directory, unlike docker save which outputs to STDOUT.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/export.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy save [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionConnection GraphQL Type Schema\nDESCRIPTION: GraphQL schema definition for the PermissionConnection type which provides a paginated collection of Permission instances. It includes pageInfo for pagination metadata and nodes for the actual permission collection.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/objects/permission-connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype PermissionConnection {\n  pageInfo: PageInfo!\n  nodes: [Permission!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Building and tagging policy images using the policy CLI\nDESCRIPTION: Commands to build a policy image from the current directory and tag it with version and latest tags.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy-lifecycle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npolicy build . -t my-org/my-policy:v0.1.2\npolicy tag my-org/my-policy:v0.1.2 my-org/my-policy:latest\n```\n\n----------------------------------------\n\nTITLE: Defining the RelationTypeConnection GraphQL Type\nDESCRIPTION: Defines the RelationTypeConnection GraphQL type which provides a paginated collection of relation types. It includes pageInfo for pagination details and nodes containing the actual relation types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/objects/relation-type-connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype RelationTypeConnection {\n  pageInfo: PageInfo!\n  nodes: [RelationType!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub CI Generated Directory Structure\nDESCRIPTION: This command shows the GitHub workflow directory structure created by applying the GitHub CI template. It includes the configuration and workflow files for building and releasing the policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/init.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntree .github\n.github\n├── config.yaml\n└── workflows\n    └── build-release-policy.yaml\n\n1 directory, 2 files\n```\n\n----------------------------------------\n\nTITLE: Querying Object Types with Pagination in GraphQL\nDESCRIPTION: This GraphQL query retrieves a paginated list of object types, including their name, subject status, display name, ordinal, status, and creation time. It demonstrates pagination using the 'first' parameter and returns page info for further queries.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/object-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  objectTypes(first: 3) {\n    nodes {\n      name\n      isSubject\n      displayName\n      ordinal\n      status\n      lifecycle {\n        createdAt\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int Scalar Type in GraphQL\nDESCRIPTION: The Int scalar type represents non-fractional signed whole numeric values. It can represent values between -(2^31) and 2^31 - 1.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/int.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Int\n```\n\n----------------------------------------\n\nTITLE: Using the ds-load-okta Command Line Interface\nDESCRIPTION: Command line interface for the Okta directory loader, showing available commands including fetch, transform, export-transform, exec, and verify operations. Includes global flags for configuration and verbosity.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/okta.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-okta <command>\n\nokta directory loader\n\nCommands:\n  version             version information\n  fetch               fetch okta data\n  transform           transform okta data\n  export-transform    export default transform template\n  exec                fetch and transform okta data\n  verify              verify fetcher configuration and credentials\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Configuration file path\n  -v, --verbosity=INT         Use to increase output verbosity.\n\nRun \"ds-load-okta <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Publishing Transformed Data to Directory\nDESCRIPTION: Shell command to publish the transformed data to the Aserto directory, completing the extract, transform, and load process.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nds-load publish <auth0-transformed.json\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Auth0 Plugin CLI\nDESCRIPTION: Displays the usage instructions for the ds-load-auth0 command-line tool, including available commands and global flags.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/auth0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-auth0 <command>\n\nauth0 directory loader\n\nCommands:\n  version             version information\n  fetch               fetch auth0 data\n  transform           transform auth0 data\n  export-transform    export default transform template\n  exec                fetch and transform auth0 data\n  verify              verify fetcher configuration and credentials\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Configuration file path\n  -v, --verbosity=INT         Use to increase output verbosity.\n\nRun \"ds-load-auth0 <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Using the Azure AD Directory Loader CLI\nDESCRIPTION: Basic usage commands for the ds-load-azuread CLI tool, including options for fetching data, transforming data, and verifying configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/azuread.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-azuread <command>\n\nAzureAD directory loader\n\nCommands:\n  version             version information\n  fetch               fetch Azure AD data\n  transform           transform Azure AD data\n  export-transform    export default transform template\n  exec                fetch and transform Azure AD data\n  verify              verify fetcher configuration and credentials\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Configuration file path\n  -v, --verbosity=INT         Use to increase output verbosity.\n\nRun \"ds-load-azuread <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Example of using policy REPL\nDESCRIPTION: This example shows the execution of the policy REPL command with a specific tagged image. It demonstrates the output of pulling the image and accessing data within the REPL environment.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/repl.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy repl ogazitt/peoplefinder:1.0.0\n\nPulling.\nref: ogazitt/peoplefinder:1.0.0\n\nPulled ref [ogazitt/peoplefinder:1.0.0].\ndigest: sha256:84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\nrunning policy [ogazitt/peoplefinder:1.0.0]\n> data.system.bundles\n{\n  \"/Users/ogazitt/.policy/policies-root/blobs/sha256/84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\": {\n    \"manifest\": {\n      \"revision\": \"\",\n      \"roots\": [\n        \"peoplefinder\"\n      ]\n    }\n  }\n}\n>\n```\n\n----------------------------------------\n\nTITLE: Defining SetRelationTypePermissionInput GraphQL Input Type\nDESCRIPTION: This GraphQL input type is used to set permissions for relation types. It requires a permission string, a relation type selector, and a boolean indicating whether the permission is allowed.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/inputs/set-relation-type-permission-input.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput SetRelationTypePermissionInput {\n  permission: String!\n  relationType: RelationTypeSelector!\n  allowed: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Aserto Authorization Options\nDESCRIPTION: JavaScript configuration object for Aserto middleware settings using environment variables.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/use-express-middleware.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst authzOptions = {\n  authorizerServiceUrl: process.env.ASERTO_AUTHORIZER_SERVICE_URL,\n  instanceName: process.env.ASERTO_POLICY_INSTANCE_NAME,\n  instanceLabel: process.env.ASERTO_POLICY_INSTANCE_LABEL,\n  policyRoot: 'asertodemo',\n  authorizerApiKey: process.env.ASERTO_AUTHORIZER_API_KEY,\n  tenantId: process.env.ASERTO_TENANT_ID,\n};\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Object in GraphQL Directory API\nDESCRIPTION: GraphQL query to select a single object from the directory graph. Requires two mandatory arguments: 'key' (the object's unique identifier) and 'type' (the name of an existing object type). Returns an Object type, which represents a primary node in the directory graph.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/queries/object.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nobject(\n  key: String!\n  type: String!\n): Object!\n```\n\n----------------------------------------\n\nTITLE: Starting Topaz with local configuration\nDESCRIPTION: Command to start a Docker container running Topaz with the specified local configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naserto start\n```\n\n----------------------------------------\n\nTITLE: Managing Topaz Docker instance\nDESCRIPTION: Commands for managing the Topaz Docker instance, including checking status, stopping, and updating the image.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naserto status   # displays the running status of the topaz authorizer\naserto stop     # stops the topaz authorizer\naserto update   # updates the topaz authorizer image to :latest\n```\n\n----------------------------------------\n\nTITLE: Installing policy CLI via WinGet for Windows\nDESCRIPTION: This command installs the policy CLI using the WinGet package manager for Windows operating systems.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwinget install OpenPolicyContainers.Policy \n```\n\n----------------------------------------\n\nTITLE: Importing Data from Auth0 to Directory\nDESCRIPTION: Demonstrates how to use ds-load CLI to import data from Auth0 into the directory, specifying host, API key, tenant ID, and Auth0 credentials.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nds-load --host=<directory-host> --api-key=<directory-api-key> --tenant-id=<tenant-id> auth0 --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Listing Edge Authorizer Connections with Aserto CLI\nDESCRIPTION: This command lists all existing Edge Authorizer connections for a tenant. Each connection has an ID field which can be used to retrieve certificate data.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/control-plane.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane list connections\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto CLI using Homebrew\nDESCRIPTION: Command to install the Aserto CLI using Homebrew package manager on Mac or Linux systems.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap aserto-dev/tap && brew install aserto\n```\n\n----------------------------------------\n\nTITLE: Configuring Cognito Plugin Arguments\nDESCRIPTION: Lists the supported arguments for configuring the Cognito plugin. These parameters allow specifying AWS credentials, Cognito User Pool ID, AWS region, and whether to retrieve groups from Cognito.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/cognito.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  -k, --access-key=STRING      AWS Access Key ($AWS_ACCESS_KEY)\n  -s, --secret-key=STRING      AWS Secret Key ($AWS_SECRET_KEY)\n  -p, --user-pool-id=STRING    AWS Cognito User Pool ID ($AWS_COGNITO_USER_POOL_ID)\n  -r, --region=STRING          AWS Region ($AWS_REGION)\n  -g, --[no-]groups            Retrieve Cognito groups ($AWS_COGNITO_GROUPS)\n```\n\n----------------------------------------\n\nTITLE: Importing Data with Custom Transform File\nDESCRIPTION: Shows how to import data using ds-load CLI with a custom transformation file, in addition to specifying directory and Auth0 credentials.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nds-load --host=<directory-host> --api-key=<directory-api-key> --tenant-id=<tenant-id> auth0 --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret> --template-file=<template-path>\n```\n\n----------------------------------------\n\nTITLE: Querying Relation Types with GraphQL\nDESCRIPTION: GraphQL query for finding relation types that match given criteria. It accepts filtering parameters, pagination limits, and cursor-based pagination. Returns a connection of relation types.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/queries/relation-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nrelationTypes(\n  where: RelationTypesWhere\n  first: Int!\n  after: Cursor\n): RelationTypeConnection!\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Java SDK via Maven\nDESCRIPTION: This XML snippet shows how to add the Aserto Java SDK as a dependency in a Maven project. It specifies the groupId, artifactId, and version of the SDK.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/authorizer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.aserto</groupId>\n    <artifactId>aserto-java</artifactId>\n    <version>1.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Auth0 without Importing\nDESCRIPTION: Demonstrates how to use ds-load CLI to fetch data from Auth0 without importing it into the directory, useful for data inspection or preprocessing.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nds-load auth0 fetch --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Querying Object Types with GraphQL\nDESCRIPTION: GraphQL query for retrieving paginated object types with optional filtering. Requires a mandatory first parameter for pagination limit, and accepts optional after cursor and where filter criteria.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/queries/object-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nobjectTypes(\n  first: Int!\n  after: Cursor\n  where: ObjectTypesWhere\n): ObjectTypeConnection!\n```\n\n----------------------------------------\n\nTITLE: General Channel Delete Response\nDESCRIPTION: Response showing successful deletion permission for the general channel\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/slack/use-the-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello from DELETE /channel/smiths.general\n```\n\n----------------------------------------\n\nTITLE: Updating Aserto CLI via Homebrew\nDESCRIPTION: Updates the Aserto CLI to the latest version using Homebrew if it was originally installed through brew. This ensures you have the most recent features and bug fixes.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew upgrade aserto\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Plugin Installation\nDESCRIPTION: Example showing how to verify installed custom plugins in the ~/.ds-load/plugins directory using ls command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/custom.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nls -l ~/.ds-load/plugins\ntotal 32000\n-rwxr-xr-x  1 ogazitt  staff    16M Aug  3 10:50 ds-load-hubspot*\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Authorizer Connection to Control Plane\nDESCRIPTION: Command to configure the Edge Authorizer to connect to the Aserto Control Plane using a specific connection ID. The optional --decision-logging flag enables decision logs to be collected and forwarded to the Control Plane.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/onebox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto config new -n <POLICY_INSTANCE_NAME> --edge-authorizer=<EDGE_AUTHORIZER_CONNECTION_ID> [--decision-logging]\n```\n\n----------------------------------------\n\nTITLE: Installing Topaz Docker image\nDESCRIPTION: Command to pull down the latest Topaz Docker image using the Aserto CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto install\n```\n\n----------------------------------------\n\nTITLE: Verifying Plugin Loading with ds-load exec\nDESCRIPTION: Command output showing how to verify that ds-load can recognize and load custom plugins using the exec --help command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/custom.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load exec <command> ...\n\nimport data in directory by running fetch, transform and publish\n\nArguments:\n  <command> ...    available commands are: hubspot|auth0|azuread|cognito|google|okta\n```\n\n----------------------------------------\n\nTITLE: Creating Identity Objects in Auth0 Transform\nDESCRIPTION: Generates identity objects from Auth0 user_id and email fields. These objects identify the user with different identity types, each having a provider and verification status.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    {\n      \"key\": \"{{ $.user_id }}\",\n      \"type\": \"identity\",\n      \"properties\": {\n        \"kind\": \"IDENTITY_KIND_PID\",\n        \"provider\": \"auth0\",\n        {{ fromEnv \"connection_id\" \"ASERTO_CONNECTION_ID\" }},\n        \"verified\": true\n      }\n    },\n    {\n        \"key\": \"{{ $.email }}\",\n        \"type\": \"identity\",\n        \"properties\": {\n          \"kind\": \"IDENTITY_KIND_EMAIL\",\n          \"provider\": \"auth0\",\n          {{ fromEnv \"connection_id\" \"ASERTO_CONNECTION_ID\" }},\n          \"verified\": {{ .email_verified }}\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request for Rick Sanchez on mega-seed Resource\nDESCRIPTION: This curl command shows a GET request to the /resource/mega-seed endpoint using Rick Sanchez's JWT token. It tests if Rick has read access to the mega-seed resource.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/simple-rbac/use-the-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHello from GET /resource/mega-seed\n```\n\n----------------------------------------\n\nTITLE: Initializing Directory Client in Ruby\nDESCRIPTION: Create a new Directory Client instance with the required configuration parameters.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'aserto/directory/client'\n\ndirectory_client = Aserto::Directory::Client.new(\n  url: \"directory.prod.aserto.com:8443\",\n  tenant_id: \"aserto-tenant-id\",\n  api_key: \"basic directory api key\",\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying ds-load exec Command Usage\nDESCRIPTION: Shows the usage syntax and available flags for the ds-load exec command, which is used to import data into the directory by running fetch, transform, and publish stages.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load exec <command> ...\n\nimport data in directory by running fetch, transform and publish\n\nArguments:\n  <command> ...    available commands are: auth0|azuread|cognito|google|okta|ldap\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Path to the config file. Any argument provided to the CLI will take precedence.\n  -v, --verbosity=INT         Use to increase output verbosity.\n\n  -s, --host=STRING           Directory host address ($DIRECTORY_HOST)\n  -k, --api-key=STRING        Directory API Key ($DIRECTORY_API_KEY)\n  -i, --insecure              Disable TLS verification\n  -t, --tenant-id=STRING      Directory Tenant ID ($DIRECTORY_TENANT_ID)\n  -p, --print                 print output to stdout\n```\n\n----------------------------------------\n\nTITLE: LDAP Plugin Configuration Example in YAML\nDESCRIPTION: Provides an example configuration file for the LDAP plugin. This YAML configuration includes settings for the directory host, API key, tenant ID, and LDAP-specific parameters such as base DN, user credentials, and filters.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/ldap.mdx#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhost: \"directory.prod.aserto.com:8443\"\napi-key: \"<your-directory-api-key>\"\ntenant-id: \"<your-tenant-id>\"\nldap:\n  base-dn: \"dc=aserto,dc=com\"\n  user: \"CN=aserto,CN=Users,DC=aserto,DC=com\"\n  password: \"<ldap-user-password>\"\n  host: \"ldap://localhost:1389\"\n  user-filter: \"(&(objectClass=organizationalPerson))\"\n  group-filter: \"(&(objectClass=group))\"\n  id-field: \"objectGUID\"\n```\n\n----------------------------------------\n\nTITLE: API Response Example\nDESCRIPTION: Example of successful response from the resource API endpoint.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/how-to-get-a-citadel-token.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ssh\nCODE:\n```\nHello from DELETE /resource/mega-seed\n```\n\n----------------------------------------\n\nTITLE: Tagging Policy Images with Policy CLI\nDESCRIPTION: This command demonstrates how to tag an existing policy image with a new tag using the policy CLI. It follows a similar syntax to Docker's tagging command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/tag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy tag <image-name> [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Plugin Version\nDESCRIPTION: Command to download a specific version of an aserto-idp plugin by specifying the version number.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/plugins.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp get-plugin aserto:1.0.1\n```\n\n----------------------------------------\n\nTITLE: Deleting User Data from Aserto\nDESCRIPTION: This command deletes a specific user from Aserto using their user ID.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/usage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp delete --from aserto USER_ID\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto CLI via WinGet for Windows\nDESCRIPTION: Installs the Aserto CLI using the WinGet package manager on Windows systems. This is the preferred installation method for Windows users.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwinget install Aserto.CLI\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Auth0 Transform\nDESCRIPTION: Shell command to export the default transform template for Auth0, which can then be customized for specific needs.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nds-load auth0 export-transform >auth0.tmpl\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Transform for Google Workspace Plugin in Shell\nDESCRIPTION: Demonstrates the command to export the default transform template for customizing the mapping between Google Workspace and directory objects and relations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/google.mdx#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nds-load google export-transform\n```\n\n----------------------------------------\n\nTITLE: Example Response from Decision Logs Query API\nDESCRIPTION: Sample JSON response containing pagination information and the first 10 decision logs. Each log contains details about a decision including user, resource, and policy information.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/query.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\":  {\n    \"next_token\":  \"e2a62bd2-2704-48a4-b5e7-86f7885012f9\",\n    \"result_size\":  10,\n    \"total_size\":  12\n  },\n  \"results\":  [\n    {\n      \"log\":  \"{\\\"decision_id\\\":\\\"1834b93a-3a15-4f98-b6e2-3b1221ca984c\\\",\\\"decision_time\\\":\\\"2022-01-31T23:52:03Z\\\",\\\"tenant_id\\\":\\\"0116e83a-7e21-11ec-ab5b-00c9e2c2068b\\\",\\\"user\\\":{\\\"id\\\":\\\"2bfaa552-d9a5-41e9-a6c3-5be62b4433c8\\\",\\\"email\\\":\\\"aprils@acmecorp.com\\\"},\\\"path\\\":\\\"peoplefinder.POST.api.users.__id\\\",\\\"decisions\\\":{\\\"allowed\\\":true},\\\"policy\\\":{\\\"id\\\":\\\"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\\\",\\\"service\\\":\\\"registry.beta.aserto.com\\\",\\\"image\\\":\\\"peoplefinder/peoplefinder-abac\\\",\\\"tag\\\":\\\"latest\\\",\\\"digest\\\":\\\"sha256:dd0c6506d8d20539d46acbebffa03976274d022818dec0337a250df72d205b3a\\\"},\\\"resource\\\":{\\\"id\\\":\\\"dfdadc39-7335-404d-af66-c77cf13a15f8\\\"}}\"\n    },\n    {\n      \"log\":  \"{\\\"decision_id\\\":\\\"89ffa41e-8083-49f6-8714-832973ff2040\\\",\\\"decision_time\\\":\\\"2022-02-03T00:28:00Z\\\",\\\"tenant_id\\\":\\\"0116e83a-7e21-11ec-ab5b-00c9e2c2068b\\\",\\\"user\\\":{\\\"id\\\":\\\"dfdadc39-7335-404d-af66-c77cf13a15f8\\\",\\\"email\\\":\\\"euang@acmecorp.com\\\"},\\\"path\\\":\\\"peoplefinder.PUT.api.users.__id\\\",\\\"decisions\\\":{\\\"allowed\\\":true},\\\"policy\\\":{\\\"id\\\":\\\"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\\\",\\\"service\\\":\\\"registry.beta.aserto.com\\\",\\\"image\\\":\\\"peoplefinder/peoplefinder-abac\\\",\\\"tag\\\":\\\"latest\\\",\\\"digest\\\":\\\"sha256:dd0c6506d8d20539d46acbebffa03976274d022818dec0337a250df72d205b3a\\\"},\\\"resource\\\":{\\\"id\\\":\\\"dfdadc39-7335-404d-af66-c77cf13a15f8\\\"}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE Request for Morty Smith on mega-seed Resource\nDESCRIPTION: This curl command demonstrates a DELETE request to the /resource/mega-seed endpoint using Morty Smith's JWT token. It tests if Morty has delete access to the mega-seed resource.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/simple-rbac/use-the-api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nHello from DELETE /resource/mega-seed\n```\n\n----------------------------------------\n\nTITLE: Usage of LDAP Plugin CLI in Shell\nDESCRIPTION: Demonstrates the command-line usage of the ds-load-ldap tool, including available commands and global flags. This snippet shows how to access help information and run different commands.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/ldap.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-ldap <command>\n\nldap directory loader\n\nCommands:\n  version             version information\n  fetch               fetch ldap data\n  transform           transform ldap data\n  export-transform    export default transform template\n  exec                fetch and transform ldap data\n  verify              verify fetcher configuration and credentials\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Configuration file path\n  -v, --verbosity=INT         Use to increase output verbosity.\n\nRun \"ds-load-ldap <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Pulling PeopleFinder Policy Image\nDESCRIPTION: Command to pull the PeopleFinder RBAC policy template from OPCR registry.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npolicy pull aserto-templates/peoplefinder-rbac:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Endpoint Object Identifier\nDESCRIPTION: The fully qualified identifier for the delete todo endpoint in Aserto's directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway-testing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ntodo:DELETE:/v1/todos/{todoId}\n```\n\n----------------------------------------\n\nTITLE: Example of Tagging a Policy Image\nDESCRIPTION: This example shows how to tag an existing policy image 'ogazitt/peoplefinder:1.0.0' with a new tag 'latest'. It also displays the output of the tagging operation.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/tag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy tag ogazitt/peoplefinder:1.0.0 ogazitt/peoplefinder:latest\n\nTagging image.\nreference: ogazitt/peoplefinder:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Aserto CLI Version\nDESCRIPTION: Displays the currently installed version of the Aserto CLI. Useful for verifying successful installation or checking if an update is needed.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/installation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naserto version\n```\n\n----------------------------------------\n\nTITLE: Filtering Object Types in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to filter object types based on specific criteria. It retrieves object types that are subjects and have names containing the substring 'user', showing the use of the 'where' parameter for filtering.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/object-types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  objectTypes(\n    first: 3,\n    where: {isSubject: true, name: {contains: \"user\"}}\n  ) {\n    nodes {\n      name\n      isSubject\n      displayName\n      ordinal\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto gem manually in Ruby\nDESCRIPTION: Install the Aserto gem manually using the gem command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/directory.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngem install aserto\n```\n\n----------------------------------------\n\nTITLE: Downloading Latest Plugin Version\nDESCRIPTION: Commands to download the latest version of an aserto-idp plugin. Can be done either by specifying just the plugin name or explicitly using the :latest tag.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/plugins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp get-plugin aserto\n```\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp get-plugin aserto:latest\n```\n\n----------------------------------------\n\nTITLE: Defining setRelationType GraphQL Mutation\nDESCRIPTION: This GraphQL mutation creates a new relation type or modifies an existing one. It takes a SetRelationTypeInput object as an argument and returns a SetRelationTypeResult.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/mutations/set-relation-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsetRelationType(\n  type: SetRelationTypeInput!\n): SetRelationTypeResult!\n```\n\n----------------------------------------\n\nTITLE: Creating Decision Logs WebSocket Connection\nDESCRIPTION: Creates a new WebSocket connection to the Aserto decision logs API. Requires a policy ID, Decision Logs API Key, and Tenant ID for authentication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/decisions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nws = new WebSocket(\"wss://decision-logs.prod.aserto.com/api/v1/decision_logs/decisions/policy/<policy-id>\",\n  [\n      \"Basic\", \"<Decision-Logs-API-Key>\",\n      \"TenantID\", \"<Tenant-ID>\"\n  ])\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Docker Hub\nDESCRIPTION: Signs in to Docker Hub using a username and either a password or personal access token (PAT). The credentials are passed securely via stdin.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho $PAT | policy login -s registry-1.docker.io -u <username> --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Triggering Immediate Directory Synchronization\nDESCRIPTION: This command forces a specific Edge Authorizer instance to immediately synchronize its local directory state with the Control Plane. This only works if synchronization is enabled for the instance.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/control-plane.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane exec edge-sync <instance-registration-id>\n```\n\n----------------------------------------\n\nTITLE: Signing a container image with cosign\nDESCRIPTION: Demonstrates how to sign a container image using cosign with a private key. This requires the image to be pushed to an OCI-compliant registry first.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/sign.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign sign --key cosign.key ogazitt/peoplefinder:1.0.0\nEnter password for private key: Pushing signature to: ogazitt/peoplefinder:sha256-05e6ed84d86f6a252e24f33cb12138d9193780f1d89a1b2ff14ced315fdf8481.sig\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Metadata for Rick in JSON\nDESCRIPTION: This JSON snippet defines the metadata for Rick's API key, including the 'sub' claim used for identification in the Aserto authorization system.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"CiRmZDA2MTRkMy1jMzlhLTQ3ODEtYjdiZC04Yjk2ZjVhNTEwMGQSBWxvY2Fs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Directory Data from File\nDESCRIPTION: Shows how to load directory data from a file using ds-load CLI, first fetching and saving Auth0 data, then publishing it to the directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nds-load -p auth0 --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret> > auth0.json\n\ncat auth0.json | ds-load publish --host=<directory-host> --api-key=<directory-api-key> --tenant-id=<tenant-id>\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto CLI via Go\nDESCRIPTION: Installs the Aserto CLI using Go's package manager. This method requires Go to be installed on your system and will install the latest version from the GitHub repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/aserto-dev/aserto/cmd/aserto@latest\n```\n\n----------------------------------------\n\nTITLE: Successful API Response Example\nDESCRIPTION: Example of a successful API response when a user has required permissions to access a repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/github/use-the-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHello from GET /repo/smiths.budget\n```\n\n----------------------------------------\n\nTITLE: Adding Aserto Helm Repository\nDESCRIPTION: Command to add the Aserto Helm repository to your local Helm installation. This allows access to Aserto's official charts.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add aserto https://charts.aserto.com\n```\n\n----------------------------------------\n\nTITLE: Listing Remote Plugins\nDESCRIPTION: Command to list all available plugin versions from the remote repository that can be downloaded.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/plugins.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp list-plugins --remote\n```\n\n----------------------------------------\n\nTITLE: Query RelationType Operation in GraphQL\nDESCRIPTION: GraphQL query operation to fetch a single relation type based on name and object type. Requires two non-null arguments: name (String) and objectType (String). Returns a RelationType object containing information about the relation type between subjects and resources.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relation-types/queries/relation-type.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nrelationType(\n  name: String!\n  objectType: String!\n): RelationType!\n```\n\n----------------------------------------\n\nTITLE: Using Decision Logs API Key for Authentication in Aserto CLI\nDESCRIPTION: Example of using the decision logs API key for authentication instead of user login. This command downloads all decision logs for a specific tenant to the specified path using the API key for authentication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/decision-logs.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naserto --tenant 0116e83a-7e21-11ec-ab5b-00c9e2c2068b decision-logs get \\\n--api-key 877572d643b2a8b6d94e12b461cd4527b2eb1e1a5fa2e9d2be67866642a9d123 \\\n--path ~/files/decision-logs\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker registry (ghcr.io example)\nDESCRIPTION: Demonstrates how to log into a Docker registry (GitHub Container Registry in this case) using a personal access token (PAT).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/sign.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $PAT | docker login -u <GitHub-account> ghcr.io --password-stdin\nLogin Succeeded\n```\n\n----------------------------------------\n\nTITLE: Triggering Immediate Configuration Discovery\nDESCRIPTION: This command causes a specific Edge Authorizer instance to immediately fetch its configuration from the Control Plane. The instance is identified by its registration ID.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/control-plane.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane exec discovery <instance-registration-id>\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteObjectTypeResult GraphQL Type\nDESCRIPTION: Defines a GraphQL type that represents the result of a DeleteObjectType mutation. Contains a single required boolean field 'deleted' that indicates whether the object type was successfully deleted.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/objects/delete-object-type-result.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeleteObjectTypeResult {\n  deleted: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Hooks\nDESCRIPTION: Updates the React import statement to include additional hooks needed for authentication functionality.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/update-the-application.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useCallback, useState } from 'react'\n```\n\n----------------------------------------\n\nTITLE: Creating Group Objects in Auth0 Transform\nDESCRIPTION: Iterates through Auth0 roles and transforms each into a group object. Each group has a key based on the role name and includes connection_id from environment variables.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    {{ if $.roles }}, {{ end }}\n\n    {{ range $i, $element := $.roles }}\n      {{ if $i }},{{ end }}\n      {\n        \"key\": \"{{$element.name}}\",\n        \"type\": \"group\",\n        \"properties\":{\n          {{ fromEnv \"connection_id\" \"ASERTO_CONNECTION_ID\" }}\n        }\n      }\n    {{ end }}\n  ],\n```\n\n----------------------------------------\n\nTITLE: Displaying Aserto Config Command Help in Bash\nDESCRIPTION: Shows the help information for the Aserto CLI config commands, including available subcommands and flags. This demonstrates the various configuration management options available in the CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/config.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: aserto config <command> [flags]\n\nconfiguration commands\n\nCommands:\n  config use       use a topaz configuration\n  config new       create new configuration\n  config list      list configurations\n  config rename    rename configuration\n  config delete    delete configuration\n  config info      display configuration information\n\nFlags:\n  -h, --help             Show context-sensitive help.\n  -c, --config=STRING    name or path of configuration file\n  -v, --verbosity        Use to increase output verbosity.\n      --tenant=STRING    tenant id override ($ASERTO_TENANT_ID)\n```\n\n----------------------------------------\n\nTITLE: API Response for Successful GET Operation\nDESCRIPTION: Example response from an allowed GET operation on the smiths-budget resource\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/multi-tenant/use-the-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nHello from GET /resource/smiths-budget\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Aserto Self-Hosted Chart\nDESCRIPTION: Command to remove the Aserto self-hosted deployment from your Kubernetes cluster.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete my-aserto\n```\n\n----------------------------------------\n\nTITLE: Importing User Data with Update Check Disabled\nDESCRIPTION: This command imports user data from JSON to Aserto while disabling the update check for plugins. It can be done using either the long-form or short-form flag.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/usage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp exec --from json --to aserto -c PATH_TO_CONFIG --no-update-check\n```\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp exec --from json --to aserto -c PATH_TO_CONFIG -n\n```\n\n----------------------------------------\n\nTITLE: Defining StringWhere Input Type in GraphQL\nDESCRIPTION: GraphQL input type definition for StringWhere that provides various comparison predicates for filtering on string fields. It allows for operations like contains, startsWith, endsWith, equals, notEquals, in, and notIn, with the constraint that at most one field may be specified in a query.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/inputs/string-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput StringWhere {\n  contains: String\n  startsWith: String\n  endsWith: String\n  equals: String\n  notEquals: String\n  in: [String!]\n  notIn: [String!]\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Response JSON\nDESCRIPTION: The JSON response showing the successful creation of three department objects with their respective keys, display names, and type information.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/objects.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"spaceships\": {\n      \"object\": {\n        \"key\": \"spaceships\",\n        \"displayName\": \"Spaceships\"\n        \"type\": {\n          \"name\": \"department\"\n        }\n      }\n    },\n    \"teleporters\": {\n      \"object\": {\n        \"key\": \"teleporters\",\n        \"displayName\": \"Teleporters\"\n        \"type\": {\n          \"name\": \"department\"\n        }\n      }\n    },\n    \"lasers\": {\n      \"object\": {\n        \"key\": \"lasers\",\n        \"displayName\": \"Lasers\"\n        \"type\": {\n          \"name\": \"department\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manifest Roots for Role Data\nDESCRIPTION: Manifest file configuration to allow access to roles data within the policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/support-more-roles.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"roots\": [\"asertodemo\", \"roles\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Edge Authorizer Instances Connected to Control Plane\nDESCRIPTION: This command lists all Edge Authorizer instances connected to the Control Plane. Each entry includes an ID, policy ID, and remote host information to identify individual edge instances.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/control-plane.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane list instances\n```\n\n----------------------------------------\n\nTITLE: LDAP Plugin CLI Arguments in Shell\nDESCRIPTION: Lists and explains the command-line arguments supported by the LDAP plugin. These arguments allow configuration of LDAP connection details, filters, and transformation options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/ldap.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  -h, --help                                                   Show context-sensitive help.\n  -c, --config=CONFIG-FLAG                                     Configuration file path\n  -v, --verbosity=INT                                          Use to increase output verbosity.\n\n  -u, --user=STRING                                            LDAP user ($LDAP_USER)\n  -p, --password=STRING                                        LDAP password ($LDAP_PASSWORD)\n  -s, --host=STRING                                            LDAP host ($LDAP_HOST)\n  -b, --base-dn=\"dc=example,dc=org\"                            LDAP base DN ($LDAP_BASE_DN)\n  -f, --user-filter=\"(&(objectClass=organizationalPerson))\"    LDAP user filter ($LDAP_USER_FILTER)\n  -g, --group-filter=\"(&(objectClass=groupOfNames))\"           LDAP group filter ($LDAP_GROUP_FILTER)\n  -i, --insecure                                               Allow insecure LDAP connection ($LDAP_INSECURE)\n  -U, --id-field=\"objectGUID\"                                  LDAP field to use as ID ($LDAP_ID_FIELD)\n  -t, --template=STRING                                        transformation template file path ($DS_TEMPLATE_FILE)\n```\n\n----------------------------------------\n\nTITLE: Listing Provider Kinds\nDESCRIPTION: Command to list the kinds of providers that Aserto supports. This provides a categorized view of the different types of connections available.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/connections.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant list provider-kinds\n```\n\n----------------------------------------\n\nTITLE: Pushing Policy Image to OPCR\nDESCRIPTION: Command to push the built policy image back to the OPCR registry.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npolicy push <your OPCR organization>/peoplefinder-rbac:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Selecting an Aserto Configuration in Bash\nDESCRIPTION: Demonstrates how to select a specific Aserto configuration using the 'aserto config use' command, which sets the target tenant for subsequent CLI operations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/config.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto config use tenant1.aserto.com\n```\n\n----------------------------------------\n\nTITLE: Executing PUT Request for Rick Sanchez on mega-seed Resource\nDESCRIPTION: This curl command shows a PUT request to the /resource/mega-seed endpoint using Rick Sanchez's JWT token. It tests if Rick has write access to the mega-seed resource, which is expected to fail.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/simple-rbac/use-the-api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nForbidden by policy rebac.check\n```\n\n----------------------------------------\n\nTITLE: Downgrading React Dependencies\nDESCRIPTION: Command to downgrade React and related dependencies to version 17 for OIDC compatibility\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react@17 react-dom@17 @testing-library/react@12 @types/react@17 @types/react-dom@17\n```\n\n----------------------------------------\n\nTITLE: Sending Directory Sync Command via REST API\nDESCRIPTION: This curl command sends a Directory Sync command to trigger an immediate sync of the Edge Directory. It requires the Instance ID, Aserto Tenant ID, and Discovery API key.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://relay.prod.aserto.com/api/v2/management/control_plane/exec' \\\n  -H 'content-type: application/json' \\\n  -H 'aserto-tenant-id: <Aserto-Tenant-ID>' \\\n  -H 'Authorization: basic <Discovery-API-key> \\\n  -d '{\"id\":\"<Instance-ID>\",\"command\":{\"sync_edge_directory\":{}}}' \n```\n\n----------------------------------------\n\nTITLE: Defining Map Scalar Type in GraphQL\nDESCRIPTION: Declaration of the Map scalar type in GraphQL schema. This type represents JSON key/value pairs that are sent and returned in their entirety, without the ability to query individual fields.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/map.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Map\n```\n\n----------------------------------------\n\nTITLE: Creating Identity Relations in Auth0 Transform\nDESCRIPTION: Generates identifier relations linking user objects to their identity objects. Creates relations for the primary user_id and email identities, and conditionally for username and phone_number if present.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/transform.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n  \"relations\":[\n      {\n      \"relation\": \"identifier\",\n              \"subject\": {\n                  \"type\": \"user\",\n                  \"key\": \"{{ $.email }}\"\n              },\n              \"object\": {\n                  \"type\": \"identity\",\n                  \"key\": \"{{ $.user_id }}\"\n              }\n      },\n      {\n      \"relation\": \"identifier\",\n              \"subject\": {\n                  \"type\": \"user\",\n                  \"key\": \"{{ $.email }}\"\n              },\n              \"object\": {\n                  \"type\": \"identity\",\n                  \"key\": \"{{ $.email }}\"\n              }\n      }\n\n    {{ if and ($.username) (ne $.username \"\") }}\n    ,\n      {\n      \"relation\": \"identifier\",\n              \"subject\": {\n                  \"type\": \"user\",\n                  \"key\": \"{{ $.email }}\"\n              },\n              \"object\": {\n                  \"type\": \"identity\",\n                  \"key\": \"{{ $.username }}\"\n              }\n      }\n    {{ end }}\n\n    {{ if and ($.phone_number) (ne $.phone_number \"\") ($.phone_verified) }}\n    ,\n      {\n      \"relation\": \"identifier\",\n              \"subject\": {\n                  \"type\": \"user\",\n                  \"key\": \"{{ $.email }}\"\n              },\n              \"object\": {\n                  \"type\": \"identity\",\n                  \"key\": \"{{ $.phone_number }}\"\n              }\n      }\n    {{ end }}\n```\n\n----------------------------------------\n\nTITLE: GitHub CI Configuration YAML\nDESCRIPTION: This YAML configuration file contains the parameters used by the GitHub workflow for building and pushing policy images. It includes the server, username, and repository information.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/init.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nserver: registry.prod.aserto.com\nusername: ogazitt\nrepo: ogazitt/peoplefinder\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Providers\nDESCRIPTION: Command to discover the types of connections (providers) supported by Aserto. This lists all available provider types that can be connected to your Aserto tenant.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/connections.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant list providers\n```\n\n----------------------------------------\n\nTITLE: Expected Discovery API Response in JSON\nDESCRIPTION: Sample JSON response from the discovery API showing the returned configuration including bundle information, plugins configuration, and service credentials that will be used by the Edge Authorizer.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/discovery-flow.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"opa\": {\n    \"discovery\": {\n      \"bundles\": {\n        \"<POLICY_ID>\": {\n          \"persist\": false,\n          \"polling\": {\n            \"max_delay_seconds\": 120,\n            \"min_delay_seconds\": 60\n          },\n          \"resource\": \"<TENANT>/<POLICY>//blobs/sha256:<DIGEST>\",\n          \"service\": \"<CONNECTION-ID>-tenant\",\n          \"signing\": null,\n          \"size_limit_bytes\": 0\n        }\n      },\n      \"plugins\": {\n        \"aserto_edge\": {\n          \"addr\": \"directory.prod.aserto.com:8443\",\n          \"apikey\": \"<REDACTED directory API key>\",\n          \"enabled\": false,\n          \"insecure\": false,\n          \"page_size\": 100,\n          \"sync_interval\": 60,\n          \"timeout\": 10\n        }\n      },\n      \"services\": {\n        \"<CONNECTION-ID>-tenant\": {\n          \"credentials\": {\n            \"bearer\": {\n              \"token\": \"<REDACTED> registry download API key\"\n            }\n          },\n          \"response_header_timeout_seconds\": 60,\n          \"url\": \"https://registry.aserto.com/v2/\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Connections in Aserto Tenant\nDESCRIPTION: Command to list all connections established in your Aserto tenant. This will show both system connections (to Aserto services) and user connections (to external services like identity providers and source code control).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/connections.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant list connections\n```\n\n----------------------------------------\n\nTITLE: Triggering Policy Discovery with Aserto CLI\nDESCRIPTION: Forces an immediate download of a policy image by short-circuiting the OPA Discovery timer. The command requires the instance ID obtained from the list instances command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane exec discovery <Instance-ID>\n```\n\n----------------------------------------\n\nTITLE: Listing Decision Log Objects in Aserto CLI\nDESCRIPTION: Command to list decision log objects for specific policies. The command accepts an optional policies parameter to filter the results by policy names.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/decision-logs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto decision-logs list [--policies=<policy-name1>,<policy-name2>...<policy-nameN>]\n```\n\n----------------------------------------\n\nTITLE: Creating Citadel JWT Token using curl\nDESCRIPTION: POST request to generate a Citadel JWT token by providing username and password credentials. Returns both access token and ID token in the response.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/how-to-get-a-citadel-token.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ssh\nCODE:\n```\ncurl -X POST \\\n  --url https://aserto-console-backend.eng.aserto.com/api/v1/dex/token \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"username\": \"<email>\",\n\t\"password\": \"<password>\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Updated React DOM Rendering\nDESCRIPTION: Modified React DOM rendering code to work with React 17\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\n----------------------------------------\n\nTITLE: Switching to local Topaz configuration\nDESCRIPTION: Command to switch and use the newly created local Topaz configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naserto config use peoplefinder\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL specifiedBy Directive\nDESCRIPTION: Defines a GraphQL directive that can be applied to SCALAR types to specify a URL that documents their behavior. The directive takes a required url parameter of type String.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/directives/specified-by.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @specifiedBy(\n  url: String!\n) on SCALAR\n```\n\n----------------------------------------\n\nTITLE: Listing Available Policy Templates with Policy CLI\nDESCRIPTION: This command lists all available policy templates that can be used as starting points. The output shows different template types including GitHub and GitLab CI/CD templates and a minimal policy template.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/init.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy templates list\n\nFetching templates .\n\n  NAME             KIND    DESCRIPTION\n  github           cicd    GitHub policy CI/CD template.\n  gitlab           cicd    GitLab policy CI/CD template.\n  policy-template  policy  Minimal policy template.\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectTypeConnection GraphQL Type\nDESCRIPTION: The ObjectTypeConnection type definition for handling paginated collections of object types. It includes pageInfo for pagination metadata and nodes for the actual object type instances.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/object-types/objects/object-type-connection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype ObjectTypeConnection {\n  pageInfo: PageInfo!\n  nodes: [ObjectType!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Connection Status\nDESCRIPTION: Command to verify that a connection is still operational by checking if the token Aserto holds is still valid. This helps troubleshoot connection issues.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/connections.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant exec verify <connection-id>\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL API Reference Documentation\nDESCRIPTION: Command to generate reference documentation for the GraphQL API using the schema from the directory repository. Requires specifying the path to the directory repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDIR_REPO=~/src/aserto-dev/directory yarn gqlgen\n```\n\n----------------------------------------\n\nTITLE: Streaming Real-time Decision Events in Aserto CLI\nDESCRIPTION: Command to stream near real-time decision events for a specific policy and instance. The optional 'since' parameter allows starting the stream from a specific time in RFC3339 format.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/decision-logs.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto decisions stream <policy-name> <instance-label> [--since <time in RFC3339 format>]\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Todo Application Backend\nDESCRIPTION: Dockerfile to build the todo-go-v2 backend application that will be deployed alongside the Edge Authorizer sidecar. This multi-stage build compiles a Go application and creates a minimal Alpine-based container.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang:1.19-alpine AS build-dev\nRUN apk add --no-cache bash gcc build-base\nWORKDIR /src\n\nENV GOBIN=/bin\nENV ROOT_DIR=/src\n\nCOPY . .\nRUN go build\n\nFROM alpine\n\nLABEL org.opencontainers.image.title=\"todo-go-v2\"\nLABEL org.opencontainers.image.version=\"latest\"\n\nRUN apk add --no-cache bash\nWORKDIR /app\nCOPY --from=build-dev /src/todo-go /app/\n\nEXPOSE 3001\n\nENTRYPOINT [\"./todo-go\"]\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Policy Directory Structure\nDESCRIPTION: This command shows the directory structure created by applying the policy template. It includes a README file and a source directory containing the policy file written in Rego.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/init.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntree .\n.\n├── README.md\n└── src\n    └── policies\n        └── hello-rego.rego\n\n2 directories, 2 files\n```\n\n----------------------------------------\n\nTITLE: Creating Morty's JWT Token\nDESCRIPTION: Example of creating a JWT token for the Morty user account using specific credentials.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/how-to-get-a-citadel-token.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ssh\nCODE:\n```\ncurl -X POST \\\n  --url https://aserto-console-backend.eng.aserto.com/api/v1/dex/token \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"username\": \"morty@the-citadel.com\",\n\t\"password\": \"V@erySecre#t123!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Opening Topaz console in browser\nDESCRIPTION: Command to open the local Topaz console in a browser window.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naserto console\n```\n\n----------------------------------------\n\nTITLE: Building and Loading Todo Application Docker Image\nDESCRIPTION: Commands to build the todo-go-v2 Docker image and load it into the minikube environment for deployment with the Edge Authorizer sidecar.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker build . -t todo-go-v2:latest\n```\n\nLANGUAGE: sh\nCODE:\n```\nminikube image load todo-go-v2:latest\n```\n\n----------------------------------------\n\nTITLE: Applying GitHub CI Template with Policy CLI\nDESCRIPTION: This command applies the GitHub CI template to set up continuous integration for the policy. It prompts for server selection, user credentials, and repository information to generate the CI configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/init.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npolicy templates apply github\n\nProcessing template 'github' .\n\n  #  SERVER\n  1  registry.prod.aserto.com\n  2  ghcr.io\n\n> Select server#: 1\n\n> server (registry.prod.aserto.com):\n\n> user (ogazitt):\n\n> secret name (TOKEN):\n\n> org/repo: ogazitt/peoplefinder\n\nGenerating files .\n\nThe template 'github' was created successfully.\n```\n\n----------------------------------------\n\nTITLE: Installing OPCR CLI via Go\nDESCRIPTION: Command to install the OPCR policy CLI tool using Go package manager.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/opcr-io/policy\n```\n\n----------------------------------------\n\nTITLE: Bulk Downloading Decision Log Objects in Aserto CLI\nDESCRIPTION: Command for bulk downloading decision log objects to a specified path. The CLI only downloads objects that don't already exist in the destination path, as log objects are immutable once created.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/decision-logs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto decision-logs get [--path <destination path>] \\\n[--policies <policy-name1>,<policy-name2>...<policyi-nameN>]\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to the Console Server\nDESCRIPTION: Command to forward port 8080 from your local machine to the console-proxy pod. This enables access to the self-hosted console UI for testing purposes.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace default port-forward $CONSOLE_POD_NAME 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Creating a Dry-Run of IDP Import\nDESCRIPTION: This command generates a JSON file containing all users that would be imported from an IDP (in this case, Auth0) without actually performing the import.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/usage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp exec --from auth0 --to json -c PATH_TO_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Getting Todo Application Pod Name\nDESCRIPTION: Command to retrieve the name of the running pod that contains both the todo-go-v2 application and the Edge Authorizer sidecar for further operations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nTODO_POD_NAME=$(kubectl get pods -n default -l 'app=todo' -o jsonpath=\"{.items[0].metadata.name}\")\n```\n\n----------------------------------------\n\nTITLE: Building Policy Image Without Tag\nDESCRIPTION: Example of building a policy image without specifying a tag, resulting in default:latest reference. Shows how the image is created but warns about the non-standard OCI format.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/build.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ policy build .\n\n\nCreated new image.\ndigest: sha256:84dbd4e3b5572dd2f23c3c987c89443fdcb57af87d714ea296fc552192fb17e9\n\nTagging image.\nreference: ghcr.io/default:latest\n```\n\n----------------------------------------\n\nTITLE: Defining RelationsWhere Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for filtering relations based on their object, subject, and type attributes. This input type is used in queries to narrow down relations based on specific criteria.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/relations/inputs/relations-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput RelationsWhere {\n  object: ObjectsWhere\n  subject: ObjectsWhere\n  type: RelationTypesWhere\n}\n```\n\n----------------------------------------\n\nTITLE: Examining User Properties with Admin Role in JSON\nDESCRIPTION: JSON representation of a user named Kris Johnsen showing their properties including department, manager, phone, title, and roles. This user has the 'admin' role and is in the Operations department, demonstrating how different roles are stored in the user object for authorization.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/peoplefinder/set-up-users.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cirknjriodq3ni0zyzvmltrjywytywy2zi05ytbmmwm1mwqxowysbwxvy2fs\",\n  \"display_name\": \"Kris Johnsen\",\n  ...\n  \"properties\": {\n    \"department\": \"Operations\",\n    \"manager\": \"a528dc1d-0042-484d-81cb-dc58c95d8147\",\n    \"phone\": \"+1-206-555-9001\",\n    \"title\": \"IT Manager\",\n    \"roles\": [\n      \"acmecorp\",\n      \"admin\",\n      \"operations\",\n      \"user\"\n    ]\n  },\n  \"metadata\": {\n    \"created_at\": \"2021-11-09T11:16:16.289969130Z\",\n    \"updated_at\": \"2021-11-09T11:16:16.289969130Z\",\n    \"deleted_at\": null\n  },\n  \"deleted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Console Pod Name for Port Forwarding\nDESCRIPTION: Command to retrieve the name of the console-proxy pod for port forwarding. This is used to access the self-hosted console during testing.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCONSOLE_POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=console-proxy,app.kubernetes.io/instance=my-aserto\" -o jsonpath=\"{.items[0].metadata.name}\")\n```\n\n----------------------------------------\n\nTITLE: Obtaining Certificates with Aserto CLI\nDESCRIPTION: Command to retrieve client certificates for an Edge Authorizer connection using the Aserto CLI. This enables the authorizer to establish a secure connection to the Control Plane.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/security-and-management.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane get certificates <edge-authorizer-connection-id>\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto.AspNetCore.Middleware via .NET CLI\nDESCRIPTION: Command to install the Aserto.AspNetCore.Middleware NuGet package using the .NET CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet add package Aserto.AspNetCore.Middleware\n```\n\n----------------------------------------\n\nTITLE: Fetching Download URL for Decision Log Objects in Aserto CLI\nDESCRIPTION: Command to obtain a download URL for a specific decision log object. The URL can be used to perform a standard HTTP download of the log object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/decision-logs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto decision-logs get --info <object name>\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Spring Dependency with Maven\nDESCRIPTION: Maven dependency configuration for adding Aserto Spring middleware to a project\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.aserto</groupId>\n    <artifactId>aserto-spring</artifactId>\n    <version>0.0.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Listing Local Plugins\nDESCRIPTION: Command to list all plugins currently installed on the local system along with their versions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/plugins.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp list-plugins\n```\n\n----------------------------------------\n\nTITLE: Custom values.yaml Configuration\nDESCRIPTION: Example YAML configuration to override default chart settings. This example shows how to configure an external PostgreSQL database and specify a custom policy for the authorizer.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n    topaz:\n      policyName: policy-todo\n      policyImage: ghcr.io/aserto-policies/policy-todo\n      policyTag: 2\n\n    postgresql:\n      localServerEnabled: false\n      auth:\n        postgresHost: postgresql.example.com\n        postgresUser: postgres\n        postgresPassword: directory\n        database: directory\n```\n\n----------------------------------------\n\nTITLE: Initializing cosign and generating key pair\nDESCRIPTION: Shows how to initialize cosign and generate a key pair for signing images.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/sign.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign initialize\n$ cosign generate-key-pair\ncosign generate-key-pair\nEnter password for private key: Enter again:\nPrivate key written to cosign.key\nPublic key written to cosign.pub\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionSelector Input Type in GraphQL\nDESCRIPTION: This snippet defines the PermissionSelector input type in GraphQL. It contains a single field 'permission' of type String, which represents the unique permission value. This input type is used in various queries and mutations related to permission management.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/permissions/inputs/permission-selector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput PermissionSelector {\n  permission: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Copying JWT Token with jq\nDESCRIPTION: Enhanced curl command that automatically extracts the access token using jq and copies it to clipboard using pbcopy on Mac systems.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/how-to-get-a-citadel-token.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ssh\nCODE:\n```\ncurl -X POST \\\n  --url https://aserto-console-backend.eng.aserto.com/api/v1/dex/token \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n\t\"username\": \"<email>\",\n\t\"password\": \"<password>\"\n}' | jq -r '.access_token' | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Certificate Data for Edge Authorizer Connections\nDESCRIPTION: This command retrieves certificate data, including the certificate and private key, for a specific Edge Authorizer connection identified by its connection ID.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/control-plane.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto control-plane get certificates <edge-authorizer-connection-id>\n```\n\n----------------------------------------\n\nTITLE: Verifying image signature with cosign\nDESCRIPTION: Shows how to verify the signature of a signed image using cosign with the public key.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/sign.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign verify --key cosign.pub ogazitt/peoplefinder:1.0.0\n\nVerification for ogazitt/peoplefinder:1.0.0 --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - The signatures were verified against the specified public key\n  - Any certificates were verified against the Fulcio roots.\n\n[{\"critical\":{\"identity\":{\"docker-reference\":\"ogazitt/peoplefinder\"},\"image\":{\"docker-manifest-digest\":\"sha256:05e6ed84d86f6a252e24f33cb12138d9193780f1d89a1b2ff14ced315fdf8481\"},\"type\":\"cosign container image signature\"},\"optional\":null}]\n```\n\n----------------------------------------\n\nTITLE: Building Maven Project\nDESCRIPTION: Command to clean and package the Maven project after adding dependencies\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/java/middleware.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Aserto Configuration in Bash\nDESCRIPTION: Shows the output of 'aserto config list' after selecting a configuration, with the currently active configuration marked with an asterisk (*).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/config.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto config list\n\n     NAME                CONFIG                                \n *   tenant1.aserto.com  7dxc1dscb-8541-11ee-8530-00fde8f8691a  \n     tenant2.aserto.com  c8x4x115-28cb-11rf-b88b-009az7b104e6  \n     gdrive              gdrive.yaml                                \n     peoplefinder        peoplefinder.yaml                          \n     todo                todo.yaml             \n```\n\n----------------------------------------\n\nTITLE: Decision Logs Query API Input Payload Structure\nDESCRIPTION: JSON structure for the query API request payload, including pagination parameters, policy filtering, and result limit configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": {\n    \"size\": \"[page size]\",\n    \"token\": \"[token of page to retrieve, must be empty on the first call]\"\n  },\n  \"policy_id\": \"[policy id or empty for all policies]\",\n  \"top_n\": \"[last N decisions to retrieve]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Azure AD Transform Template\nDESCRIPTION: Command to export the default transformation template for Azure AD data. This template can be customized to create mappings between Azure AD objects and directory objects.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/azuread.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nds-load azuread export-transform\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash for Aserto Decision Logs Integration with Elasticsearch\nDESCRIPTION: This Logstash configuration file sets up a pipeline to ingest Aserto decision logs into Elasticsearch. It uses the Aserto CLI to stream decision logs, adds timestamp formatting, and enriches user data by fetching email addresses via the Aserto API when a user ID is present in the resource context.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/elk.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ninput {\n// Use the Aserto CLI to listen for decision log events and pipe the results through logstash\n  pipe {\n    command => \"aserto l --api-key=<decision-logs-api-key> --tenant=<tenant-id>\"\n    codec => multiline {\n      pattern => \"^}\"\n      negate => true\n      what => \"next\"\n    }\n  }\n}\nfilter {\n  // Ensure we only grab entries that are decision log events  \n  json {\n    source => \"message\"\n  }\n  // Populate Elastic's preferred @timestamp field\n  date {\n    match => [\"[timestamp][seconds]\", \"UNIX\"]\n  }\n  // Make a copy of the timestamp field as a string, handy with some visualizations\n  mutate {\n    add_field => {\n      \"[timestamp_str]\" => \"%{[@timestamp]}\"\n    }                                                                                                                                                                                         \n  }\n  // If the resource context includes a user id, get the email and add a resource.user.email field.\n  if [resource][id] {\n    http {\n      url => \"https://authorizer.prod.aserto.com/api/v1/dir/users/%{[resource][id]}\"\n      verb => \"GET\"\n      headers => {\n        \"aserto-tenant-id\" => \"<tenant-id>\"\n        \"authorization\" => \"basic <authorizer-api-key>\"\n      }\n      add_field => {\n        \"[resource][user][email]\" => \"%{[body][result][email]}\"\n      }\n      remove_field => [\"body\", \"headers\"]\n    }\n  }\n}\n// Stash it!\noutput {\n  elasticsearch {\n    hosts => [\"<elastic hosts>\"]\n    // Other elastic connection settings. These are specific to your elastic installation and may include:\n    // ssl => true\n    // cacert => \"<path to your elastic server's CA .pem file>\"\n    // user => \"<elastic user>\"\n    // password => \"<elastic password>\"\n    index => \"<your index name>\"\n    // Use the decision id as a document id. Decision ids are unique, so this prevents duplicate entries.\n    document_id => \"%{[id]}\"\n  }                                                                                                                                                                                           \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows credential helper\nDESCRIPTION: JSON configuration to set up the wincred credential helper for Windows. This enables secure storage of credentials in the Windows Credential Manager after installing the wincred binary.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"auths\": {},\n        \"credStore\": \"wincred\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining @doc Directive for Documentation Categorization in GraphQL\nDESCRIPTION: This GraphQL directive @doc is used to group schema elements into documentation categories. It takes a required 'category' argument of type String and can be applied to field definitions, objects, input objects, and enums.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/directives/doc.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @doc(\n  category: String!\n) on \n  | FIELD_DEFINITION\n  | OBJECT\n  | INPUT_OBJECT\n  | ENUM\n```\n\n----------------------------------------\n\nTITLE: Serving Built Content Locally\nDESCRIPTION: Command to serve the static content built in the previous step using a local server for testing purposes.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn serve\n```\n\n----------------------------------------\n\nTITLE: Policy Image Removal Example\nDESCRIPTION: Practical example of removing a specific policy image with version tag, showing both the command and its output. This example removes version 1.0.0 of the peoplefinder policy from the ogazitt organization.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/rm.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy rm ogazitt/peoplefinder:1.0.0\n\nRemoved reference.\nreference: ogazitt/peoplefinder:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Topaz Docker Image with Aserto CLI\nDESCRIPTION: Command to pull down the latest Topaz docker image using the Aserto CLI. This is the first step after logging in to your Aserto account.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/onebox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto install\n```\n\n----------------------------------------\n\nTITLE: Importing User Data from JSON to Aserto\nDESCRIPTION: This command imports user data from a JSON file to Aserto. It automatically downloads required plugins if not present and checks for updates.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/usage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naserto-idp exec --from json --to aserto -c PATH_TO_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Listing Available Aserto Configurations in Bash\nDESCRIPTION: Shows the output of the 'aserto config list' command which displays all available configurations, including both Aserto tenants and local Topaz configuration files.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/config.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto config list\n     NAME                CONFIG                                \n     tenant1.aserto.com  7dxc1dscb-8541-11ee-8530-00fde8f8691a  \n     tenant2.aserto.com  c8x4x115-28cb-11rf-b88b-009az7b104e6  \n     gdrive              gdrive.yaml                                \n     peoplefinder        peoplefinder.yaml                          \n     todo                todo.yaml             \n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with policy CLI\nDESCRIPTION: The basic command to authenticate to an OCIv2-compliant registry using the policy CLI. This uses stdin to securely pass credentials, similar to docker login.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $PAT | policy login -s <server> -u <username> --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Installing ds-load CLI with WinGet for Windows\nDESCRIPTION: Command to install the ds-load CLI using the WinGet package manager on Windows systems. This installs the Aserto.DSLoad package.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwinget install Aserto.DSLoad\n```\n\n----------------------------------------\n\nTITLE: Handling Decision Log Events\nDESCRIPTION: Sets up an event handler for processing incoming decision log events received through the WebSocket connection.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/decisions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nws.onmessage = function(e) {\n  processDecision(e)\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into the Aserto Policy Registry using the policy CLI\nDESCRIPTION: Command to authenticate with an Aserto Policy Registry. Requires specifying the registry path, username, and API key.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy-lifecycle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy login -s <PATH-TO-REGISTRY> -u <USERNAME> -p <APCR_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Defining Hash Scalar in GraphQL Schema\nDESCRIPTION: Defines a scalar type called Hash that represents hash values for directory objects. This scalar can be used in various object types and input types within the directory API.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/hash.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Hash\n```\n\n----------------------------------------\n\nTITLE: Flag Enumeration Definition in GraphQL\nDESCRIPTION: Defines the Flag enumeration type with four possible values: HIDDEN (for types not displayed in Aserto Console), READONLY (for types not editable in Aserto Console), SYSTEM (to mark a type as internal), and SHADOW (for objects sharing keys with objects of another type).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/enums/flag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nenum Flag {\n  HIDDEN\n  READONLY\n  SYSTEM\n  SHADOW\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS credential helper\nDESCRIPTION: JSON configuration to set up the osxkeychain credential helper for macOS. This enables secure storage of credentials in the macOS KeyChain after installing the appropriate osxkeychain binary.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"auths\": {},\n        \"credStore\": \"osxkeychain\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Transforming Saved Auth0 Data\nDESCRIPTION: Shows how to transform previously fetched Auth0 data using ds-load CLI, saving the fetch result to a file and then applying the transform stage.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nds-load auth0 fetch --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret> > auth0.json\ncat auth0.json | ds-load -p auth0 transform\n```\n\n----------------------------------------\n\nTITLE: Selecting Aserto tenant configuration\nDESCRIPTION: Command to select and use a specific Aserto tenant configuration.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naserto config use <your-tenant-name.aserto.com>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aserto account information via CLI\nDESCRIPTION: This command retrieves and displays the organizations associated with the current account, as well as the default tenant information. It provides an overview of the account's registration details.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-cli/login.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naserto tenant get account\n```\n\n----------------------------------------\n\nTITLE: Building Policy Image\nDESCRIPTION: Command to build a new policy image from local modifications. Must be run from the directory containing the .manifest file.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npolicy build . -t <your OPCR organization>/peoplefinder-rbac:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing cosign on Mac or Linux\nDESCRIPTION: Installs cosign using Homebrew package manager on Mac or Linux systems.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/sign.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cosign\n```\n\n----------------------------------------\n\nTITLE: Gossip Channel Write Response\nDESCRIPTION: Response indicating successful write permission to the gossip channel\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/slack/use-the-api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHello from PUT /channel/smiths.gossip\n```\n\n----------------------------------------\n\nTITLE: Publishing a policy image to the Aserto Container Registry\nDESCRIPTION: Command to push a built policy image to the Aserto Policy Registry, making it available for deployment.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy-lifecycle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npolicy push my-org/my-policy:v0.1.2\n```\n\n----------------------------------------\n\nTITLE: Using the Cognito Directory Loader Commands\nDESCRIPTION: Shows the available commands and flags for the ds-load-cognito tool. The plugin provides commands for fetching and transforming Cognito data, as well as configuration and verification options.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/cognito.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-cognito <command>\n\nCognito directory loader\n\nCommands:\n  version             version information\n  fetch               fetch cognito data\n  transform           transform cognito data\n  export-transform    export default transform template\n  exec                fetch and transform cognito data\n  verify              verify fetcher configuration and credentials\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Configuration file path\n  -v, --verbosity=INT         Use to increase output verbosity.\n\nRun \"ds-load-cognito <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Defining RelationSide Enum in GraphQL\nDESCRIPTION: This GraphQL enum defines the possible sides of a relation where an object may be found. It has two values: OBJECT (representing the object side of a relation) and SUBJECT (representing the subject side of a relation).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/objects/enums/relation-side.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nenum RelationSide {\n  OBJECT\n  SUBJECT\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Accessible Endpoints for User - cURL Example\nDESCRIPTION: A cURL command that demonstrates how to query the Aserto Directory API to find endpoints that a specific user (beth@the-smiths.com) can invoke. The request requires tenant ID and directory API key for authentication.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/governance.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://directory.prod.aserto.com/api/v3/directory/graph/endpoint/can_invoke/user?object_id=&subject_id=beth%40the-smiths.com' \\\n          -H 'aserto-tenant-id: <your-tenant-id>' \\\n          -H 'authorization: basic <your-dir-api-key>' \\\n          -H 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Transforming and Importing Saved Auth0 Data\nDESCRIPTION: Demonstrates how to transform and import previously fetched Auth0 data into the directory using ds-load CLI, combining the transform and publish stages.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nds-load auth0 fetch --domain=<auth0-domain> --client-id=<auth0-client-id> --client-secret=<auth0-client-secret> > auth0.json\n\ncat auth0.json | ds-load --host=<directory-host> --api-key=<directory-api-key> --tenant-id=<tenant-id> auth0 transform\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto React SDK using yarn\nDESCRIPTION: Command to install the Aserto React SDK using yarn package manager.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @aserto/aserto-react\n```\n\n----------------------------------------\n\nTITLE: API Response for Successful Operation\nDESCRIPTION: Example response from an allowed DELETE operation on the citadel-adventures resource\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/multi-tenant/use-the-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHello from DELETE /resource/citadel-adventures\n```\n\n----------------------------------------\n\nTITLE: Installing policy CLI via Go\nDESCRIPTION: This command installs the policy CLI using Go's package management system, fetching the latest version from the GitHub repository.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/opcr-io/policy/cmd/policy@latest\n```\n\n----------------------------------------\n\nTITLE: Authenticating to GitHub Container Registry\nDESCRIPTION: Authenticates to GitHub Container Registry (ghcr.io) using a GitHub username and personal access token. The token needs appropriate scopes including repo, read:org, write:packages, and delete:packages.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho $PAT | policy login -s ghcr.io -u <username> --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Executing DELETE Request for Rick Sanchez on mega-seed Resource\nDESCRIPTION: This curl command shows a DELETE request to the /resource/mega-seed endpoint using Rick Sanchez's JWT token. It tests if Rick has delete access to the mega-seed resource, which is expected to fail.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/simple-rbac/use-the-api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nForbidden by policy rebac.check\n```\n\n----------------------------------------\n\nTITLE: Pulling a policy image from the Aserto Container Registry\nDESCRIPTION: Command to retrieve a policy image from the Aserto Policy Registry to the local environment.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy-lifecycle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npolicy pull my-org/my-policy:v0.1.2\n```\n\n----------------------------------------\n\nTITLE: Usage Commands for Google Workspace Plugin in Shell\nDESCRIPTION: Displays the main usage commands for the ds-load-google tool, including various operations like fetch, transform, and verify. It also shows global flags for configuration and verbosity.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/google.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage: ds-load-google <command>\n\nGoogle Workspace directory loader\n\nCommands:\n  version              version information\n  fetch                fetch google workspace data\n  transform            transform google workspace data\n  export-transform     export default transform template\n  exec                 fetch and transform google workspace data\n  get-refresh-token    obtain a refresh token from GCP\n  verify               verify fetcher configuration and credentials\n\nFlags:\n  -h, --help                  Show context-sensitive help.\n  -c, --config=CONFIG-FLAG    Configuration file path\n  -v, --verbosity=INT         Use to increase output verbosity.\n\nRun \"ds-load-google <command> --help\" for more information on a command.\n```\n\n----------------------------------------\n\nTITLE: Defining IntWhere Input Type in GraphQL\nDESCRIPTION: This GraphQL code defines the IntWhere input type, which includes fields for various comparison operations on integer values. It allows for equality, inequality, range checks, and list inclusion/exclusion comparisons.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/inputs/int-where.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput IntWhere {\n  equals: Int\n  notEquals: Int\n  in: [Int!]\n  notIn: [Int!]\n  lessThan: Int\n  lessThanOrEqual: Int\n  greaterThan: Int\n  greaterThanOrEqual: Int\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE API Endpoint Path\nDESCRIPTION: The DELETE endpoint path pattern for removing todo items.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway-testing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nDELETE /v1/todos/{todoId}\n```\n\n----------------------------------------\n\nTITLE: Using Config File for Auth0 Data Import\nDESCRIPTION: Demonstrates how to use a YAML configuration file to import data from Auth0 into the directory using ds-load CLI, simplifying command-line arguments.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nds-load -c ./config.yaml auth0\n```\n\n----------------------------------------\n\nTITLE: Basic Policy Images List Command\nDESCRIPTION: Basic command to list all local policy images using the policy CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/images.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy images\n```\n\n----------------------------------------\n\nTITLE: Failed Authorization Response Example\nDESCRIPTION: Example of an API response when authorization fails due to insufficient permissions.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/github/use-the-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nForbidden by policy rebac.check\n```\n\n----------------------------------------\n\nTITLE: Policy Images List Example Output\nDESCRIPTION: Example output showing the format of the policy images list command, displaying repository, tag, size, and creation time information.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/images.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ policy images\n\n|          REPOSITORY          |  TAG  | SIZE  |  CREATED AT  |\n|------------------------------|-------|-------|--------------||\n| ogazitt/peoplefinder         | 1.0.0 | 555 B | 1 minute ago |\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Deployment for Sidecar Configuration\nDESCRIPTION: Command to apply the Kubernetes deployment configuration that sets up the todo-go-v2 application with the Edge Authorizer as a sidecar in the minikube cluster.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f . --recursive\n```\n\n----------------------------------------\n\nTITLE: API Route Configuration File Reference\nDESCRIPTION: Reference to the routes.oas.json file that contains API endpoint definitions for the Todo application.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/api-auth/api-gateway-testing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nroutes.oas.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Git tag for automated policy deployment\nDESCRIPTION: Git commands to commit changes and push a new tag, which triggers GitHub/GitLab actions to automatically build and publish the policy.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy-lifecycle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -am 'new policy version'\ngit tag v0.1.2 && git push --tags\n```\n\n----------------------------------------\n\nTITLE: Removing Tagged Policy Images with CLI\nDESCRIPTION: Basic command syntax for removing a tagged policy image from a registry. The command accepts an optional registry prefix, followed by the required organization name, repository name, and tag.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/rm.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npolicy rm [<registry>/]<organization-name>/<repository-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Scalar Type in GraphQL\nDESCRIPTION: The Boolean scalar type represents true or false values in GraphQL schema. This basic type is used across multiple objects and directives in the directory API.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/boolean.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Boolean\n```\n\n----------------------------------------\n\nTITLE: Testing API Response for Allowed Access in Bash\nDESCRIPTION: This snippet demonstrates the API response when a user has permission to access a resource. It's used in the context of testing Morty's access to the grocery list document.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/gdrive/use-the-api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHello from GET /doc/groceries\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Self-Hosted Chart\nDESCRIPTION: Command to install the Aserto self-hosted Helm chart. This deploys the authorizer, directory, and web console to your Kubernetes cluster.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-aserto aserto/self-hosted\n```\n\n----------------------------------------\n\nTITLE: Retrieving Download URL Response in JSON\nDESCRIPTION: This JSON response shows the result of retrieving a specific decision log object. It provides a signed URL that can be used to download the CSV file containing the decision logs. The URL is valid for 15 minutes.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/decision-logs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log\": {\n    \"url\": \"https://storage.googleapis.com/...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Channel Access Response\nDESCRIPTION: Example of successful API response when a user has permission to access a channel\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/slack/use-the-api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHello from PUT /channel/smiths.citadel\n```\n\n----------------------------------------\n\nTITLE: Decision Logs Query API Example Request\nDESCRIPTION: Example JSON request for retrieving the last 12 decisions for a specific policy, using the default page size of 10.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/query.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"top_n\": 12,\n  \"policy_id\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the Aserto documentation site using Yarn package manager.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Markdown Error Reference Table\nDESCRIPTION: Detailed table containing error codes, HTTP status codes, error messages and explanations for the Aserto platform error handling system. Covers error codes from E10000 to E10042 with corresponding status codes and detailed explanations.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/troubleshooting/errors-reference.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Errors Reference Table\n\n| Error  | Error Code         | HTTP Code                 | Message                                                      | Explanation                                                                                     |\n| :----- | :----------------- | :------------------------ | :----------------------------------------------------------- | :---------------------------------------------------------------------------------------------- |\n| E10000 | Internal           | StatusInternalServerError | an unknown error has occurred                                | Unknown error ID. It's returned when the implementation has not returned another AsertoError.   |\n| E10001 | InvalidArgument    | StatusBadRequest          | no tenant id specified                                       | Means no tenant id was found in the current context                                             |\n| E10002 | InvalidArgument    | StatusBadRequest          | invalid tenant id                                            | Means the tenant id is not valid                                                                |\n```\n\n----------------------------------------\n\nTITLE: Setting up CI/CD templates for policy deployment\nDESCRIPTION: Commands to apply GitHub or GitLab CI templates for automated policy building and publishing using the policy CLI.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/overview/policy-lifecycle.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npolicy templates apply github-policy-ci\n\npolicy templates apply gitlab-policy-ci\n```\n\n----------------------------------------\n\nTITLE: Example Updated Policy Context Structure for v2 APIs\nDESCRIPTION: Shows the v2 format where the policy ID has been removed from policyContext and replaced with a separate policyInstance object. The policyContext now only contains decisions and path.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/upgrading-from-v1.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyContext\": {\n    \"decisions\": [\n      \"allowed\"\n    ],\n    \"path\": \"sample.GET.api.orders\"\n  }, \n  \"policyInstance\": {\n    \"name\": \"[policy-name]\",\n    \"instanceLabel\": \"[instance-label]\"\n  }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PUT Request for Morty Smith on mega-seed Resource\nDESCRIPTION: This curl command illustrates a PUT request to the /resource/mega-seed endpoint using Morty Smith's JWT token. It tests if Morty has write access to the mega-seed resource.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/simple-rbac/use-the-api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHello from PUT /resource/mega-seed\n```\n\n----------------------------------------\n\nTITLE: Authenticating to AWS ECR\nDESCRIPTION: Authenticates to AWS Elastic Container Registry using temporary credentials obtained from AWS CLI. Uses the get-login-password command to retrieve the token and pipe it to the policy login command.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws ecr get-login-password |policy login -s <org>.dkr.ecr.<region>.amazonaws.com -u AWS --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Configuring ds-load CLI with YAML\nDESCRIPTION: Demonstrates the structure of a YAML configuration file for ds-load CLI, including both general CLI settings and plugin-specific settings (using auth0 as an example).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/usage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhost: directory.prod.aserto.com:8443\napi-key: secretapikey\ntenant-id: your-tenant-id\nauth0:\n  domain: \"domain.auth0.com\"\n  client-id: \"clientid\"\n  client-secret: \"clientsupersecret\"\n  template-file: \"/path/to/transform.file\"\n```\n\n----------------------------------------\n\nTITLE: Adding External Stylesheet\nDESCRIPTION: HTML link tag to include external stylesheet for the application\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://aserto-remote-css.netlify.app/react-and-node-quickstart.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing ds-load CLI for Google Workspace Integration\nDESCRIPTION: Command to install the ds-load CLI tool using Homebrew. This tool is required for obtaining a refresh token from Google Workspace.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/aserto-console/connections/setup-google.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew tap aserto-dev/tap && brew install ds-load\n```\n\n----------------------------------------\n\nTITLE: Extracting Policy Bundle\nDESCRIPTION: Command to extract the contents of the policy bundle archive.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar -xvf bundle.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Executing policy build command with correct directory\nDESCRIPTION: This snippet shows the correct way to execute the policy build command by specifying the directory where the .manifest file is located. This resolves the 'undefined function' error by ensuring the CLI can find the necessary policy dependencies.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/troubleshooting/rego-type-error-undefined-function.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npolicy build content/src -t glennblock/policy-rebac:1:0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Aserto tenant configurations\nDESCRIPTION: Command to list available remote configurations (tenants) for Aserto.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/install-onebox.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naserto config list\n```\n\n----------------------------------------\n\nTITLE: Installing aserto-idp via Homebrew on macOS or LinuxBrew on Linux\nDESCRIPTION: This command installs aserto-idp using Homebrew for macOS or LinuxBrew for Linux. It taps the aserto-dev/tap repository and then installs the aserto-idp package.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/aserto-idp-cli/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap aserto-dev/tap && brew install aserto-idp\n```\n\n----------------------------------------\n\nTITLE: Using JWT Token in API Request\nDESCRIPTION: Example of using the generated JWT token in a DELETE request to the resource API endpoint.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/how-to-get-a-citadel-token.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ssh\nCODE:\n```\ncurl -X DELETE http://localhost:3001/resource/mega-seed \\\n-H 'Authorization: Bearer eyJ...'\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Service Account Key\nDESCRIPTION: Creates a JSON key file for a Google Cloud Platform service account. This key file will be used to authenticate to Google Container Registry.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud iam service-accounts keys create keyfile.json --iam-account [NAME]@[PROJECT_ID].iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for Topaz Instances\nDESCRIPTION: Sample JSON response from listing instances, showing the structure of the returned data. Each instance includes an ID field that is required to send control plane commands to the specific instance.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/control-plane-guide/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"0c0607e8-3689-491f-b42f-f9eb24409abb\",\n    \"info\": {\n      \"policy_id\": \"a4966ba0-b626-11ec-810f-018dbb604591\",\n      \"policy_label\": \"todo\",\n      \"remote_host\": \"29f48f6dc3f1\",\n      \"connection_id\": \"bc1bbfe2-20c8-11ee-9069-031f1f3ef1c7\",\n      \"certificate_id\": \"7a:b9:5c:b9:31:4c:81:00:8a:97:5b:c4:f7:1d:4e:02:b8:40:b1:e4\",\n      \"policy_name\": \"todo\"\n    }\n  },\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window with live reloading for the documentation site.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing with Custom Values File\nDESCRIPTION: Command to install the Aserto self-hosted chart with custom configuration values. This applies the settings from your values.yaml file to the deployment.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/local-deployment/local-directory/helm-chart.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-aserto aserto/self-hosted  -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Legacy Permission Check Function\nDESCRIPTION: The obsolete ds.check_permission function verifies if a subject has a specific permission to an object.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/authorizer-guide/built-ins.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nds.check_permission({\n  \"object_type\": \"<object type>\",\n  \"object_id\": \"<object identifier>\",\n  \"permission\": \"<permission name>\",\n  \"subject_type\": \"<subject type>\",\n  \"subject_id\": \"<subject identifier>\",\n  \"trace\":  <boolean>\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto SPA SDK using Package Managers\nDESCRIPTION: Instructions for installing the Aserto SPA SDK using npm or yarn package managers.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/javascript/spa.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @aserto/aserto-spa-js\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @aserto/aserto-spa-js\n```\n\n----------------------------------------\n\nTITLE: Response for Department Object Type Creation\nDESCRIPTION: Shows the JSON response returned after successfully creating the department object type, confirming the object was created with the specified properties.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"setObjectType\": {\n      \"objectType\": {\n        \"name\": \"department\",\n        \"displayName\": \"Department\",\n        \"isSubject\": false,\n        \"ordinal\": 0,\n        \"status\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Google Container Registry\nDESCRIPTION: Signs in to Google Container Registry (gcr.io) using a JSON key file for authentication. The _json_key username indicates that JSON key authentication is being used.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/policy-cli/login.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat KEY-FILE | policy login -s gcr.io -u _json_key --password-stdin \n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: Updates to package.json scripts section to enable running both the React app and server simultaneously.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/update-the-application.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n   ...\n   \"start:server\": \"node service/api.js\",\n   \"start:all\": \"npm-run-all --parallel start start:server\"\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Aserto Gem\nDESCRIPTION: Instructions for adding the Aserto gem to a Ruby application's Gemfile and installing it.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"aserto\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\nLANGUAGE: bash\nCODE:\n```\ngem install aserto\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variables for configuring OIDC authentication with Aserto's demo IDP\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_OIDC_DOMAIN=acmecorp.demo.aserto.com\nREACT_APP_OIDC_CLIENT_ID=acmecorp-app\nREACT_APP_OIDC_AUDIENCE=acmecorp-app\nREACT_APP_API_ORIGIN=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Custom Policy Path Mapper\nDESCRIPTION: Implementation of a custom policy path mapping function.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/ruby/middleware.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nAserto.with_policy_path_mapper do |policy_root, request|\n  method = request.request_method\n  path = request.path_info\n\n  \"custom: #{policy_root}.#{method}.#{path}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OPCR Registry\nDESCRIPTION: Command to log into the OPCR registry using GitHub credentials and Personal Access Token (PAT).\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npolicy login -u <GitHub-account> -p <GitHub-PAT>\n```\n\n----------------------------------------\n\nTITLE: Default Rego Policy\nDESCRIPTION: Default Rego policy allowing anonymous access to remaining endpoints\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/dotnet/dotnetcore.mdx#2025-04-21_snippet_6\n\nLANGUAGE: rego\nCODE:\n```\nallowed = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Crawler Restrictions for Aserto Subdomains\nDESCRIPTION: This robots.txt configuration specifies that all user agents should not crawl any URLs containing 'tenant.' or 'authorizer.' subdomains within the aserto.com domain. This helps protect sensitive or dynamic content from being indexed by search engines.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: *tenant.*.aserto.com*\nDisallow: *authorizer.*.aserto.com*\n```\n\n----------------------------------------\n\nTITLE: Installing OPCR CLI via Homebrew\nDESCRIPTION: Command to install the OPCR policy CLI tool using Homebrew package manager for macOS or LinuxBrew for Linux systems.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/getting-started/using-opcr.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install opcr-io/tap/policy\n```\n\n----------------------------------------\n\nTITLE: Cloning Demo Repository\nDESCRIPTION: Commands to clone and set up the demo application repository\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/application-setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:aserto-demo/aserto-react-and-node-with-conditional-rendering.git\ncd aserto-react-and-node-with-conditional-rendering\nyarn install:all\n```\n\n----------------------------------------\n\nTITLE: Obtaining Google Workspace Refresh Token\nDESCRIPTION: Command to obtain a refresh token using the ds-load-google tool. This requires the client ID and client secret from the previously created OAuth application.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/aserto-console/connections/setup-google.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nds-load-google get-refresh-token --client-id=<client-id> --client-secret=<client-secret>\n```\n\n----------------------------------------\n\nTITLE: GraphQL @deprecated Directive Definition\nDESCRIPTION: Defines the @deprecated directive which marks elements of a GraphQL schema as no longer supported. The directive can be applied to field definitions, argument definitions, input field definitions, and enum values. It accepts an optional reason parameter with a default value.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/directives/deprecated.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @deprecated(\n  reason: String = \"No longer supported\"\n) on \n  | FIELD_DEFINITION\n  | ARGUMENT_DEFINITION\n  | INPUT_FIELD_DEFINITION\n  | ENUM_VALUE\n```\n\n----------------------------------------\n\nTITLE: Executing policy build command with undefined function error\nDESCRIPTION: This snippet demonstrates the execution of a policy build command that results in an 'undefined function' error. The error occurs when the CLI cannot find the functions that the policy depends on, usually due to running the command from an incorrect directory.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/troubleshooting/rego-type-error-undefined-function.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npolicy build . -t glennblock/policy-rebac:1.0.0\n\nbuild failed: failed to build opa policy bundle: 3 errors occurred:\ncontent/src/policies/rebac.check.rego:14: rego_type_error: undefined function ds.check_relation\ncontent/src/policies/rebac.check_permission.rego:13: rego_type_error: undefined function ds.check_permission\ncontent/src/policies/rebac.check_relation.rego:13: rego_type_error: undefined function ds.check_relation\n```\n\n----------------------------------------\n\nTITLE: Building Static Content\nDESCRIPTION: Command to generate static content into the build directory that can be served using any static content hosting service.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Command-line Arguments for Auth0 Plugin\nDESCRIPTION: Lists the supported command-line arguments for the Auth0 plugin, including options for specifying Auth0 domain, client credentials, connection name, user identifiers, and additional flags for roles and rate limiting.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/auth0.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  -d, --domain=STRING             auth0 domain ($AUTH0_DOMAIN)\n  -i, --client-id=STRING          auth0 client id ($AUTH0_CLIENT_ID)\n  -s, --client-secret=STRING      auth0 client secret ($AUTH0_CLIENT_SECRET)\n      --connection-name=STRING    auth0 connection name ($AUTH0_CONNECTION_NAME)\n      --user-pid=STRING           auth0 user PID of the user you want to read ($AUTH0_USER_PID)\n      --user-email=STRING         auth0 user email of the user you want to read ($AUTH0_USER_EMAIL)\n      --[no-]roles                include roles ($AUTH0_ROLES)\n      --[no-]rate-limit           enable http client rate limiter\n```\n\n----------------------------------------\n\nTITLE: GraphQL Include Directive Definition\nDESCRIPTION: Defines the @include directive that can be applied to fields, fragment spreads, and inline fragments. Takes a required boolean 'if' argument that determines whether the target should be included in the query result.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/directives/include.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @include(\n  if: Boolean!\n) on \n  | FIELD\n  | FRAGMENT_SPREAD\n  | INLINE_FRAGMENT\n```\n\n----------------------------------------\n\nTITLE: Forcing Regeneration of GraphQL Documentation\nDESCRIPTION: Command to force regeneration of the GraphQL API reference documentation even if the schema hasn't changed since the last run.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nDIR_REPO=~/src/aserto-dev/directory yarn gqlgen -f\n```\n\n----------------------------------------\n\nTITLE: Directory v2 Client Implementation\nDESCRIPTION: Initializes a v2 client for older directory service instances with limited functionality.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom aserto.client.directory.v2 import Directory\nds = Directory(api_key=\"my_api_key\", tenant_id=\"1234\", address=\"localhost:9292\")\n```\n\n----------------------------------------\n\nTITLE: Get Object Operations\nDESCRIPTION: Retrieves directory object instances with optional relation information using pagination.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/software-development-kits/python/directory.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# without relations:\nuser = ds.get_object(object_type=\"user\", object_id=\"euang@acmecorp.com\")\n\n# with relations:\npage = PaginationRequest(size=10)\nwhile True:\n    resp = ds.get_object(object_type=\"user\", object_id=\"euang@acmecorp.com\", with_relations=True, page=page)\n    user = resp.result               # The returned object.\n    relations_page = resp.relations  # A page of relations.\n\n    if not resp.page.next_token:\n        # we've reached the last page.\n        break\n\n    # request the next page.\n    page.token = resp.page.next_token\n```\n\n----------------------------------------\n\nTITLE: Listing Decision Log Objects Response in JSON\nDESCRIPTION: This JSON response shows the result of listing decision log objects for a specific policy. It includes pagination information and a list of available log objects identified by name.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/decision-logs-guide/api/decision-logs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page\": {\n    \"next_token\": \"\",\n    \"result_size\": 3,\n    \"total_size\": 0\n  },\n  \"results\": [\n    {\n      \"name\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b/decisions-2022-01-28-00\"\n    },\n    {\n      \"name\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b/decisions-2022-01-28-01\"\n    },\n    {\n      \"name\": \"18d6580f-7fb0-11ec-bdd9-01c9e2c2068b/decisions-2022-01-28-04\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Scalar Type in GraphQL\nDESCRIPTION: The ID scalar type represents a unique identifier in GraphQL. It is used for object retrieval and caching. While it appears as a String in JSON responses, it's not meant to be human-readable. For input, it accepts both string and integer values.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/id.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar ID\n```\n\n----------------------------------------\n\nTITLE: Exporting LDAP Transform Template in Shell\nDESCRIPTION: Shows the command to export the default transformation template for LDAP data. This template can be used as a starting point for customizing the transformation process.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/command-line-interface/ds-load-cli/plugins/ldap.mdx#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nds-load ldap export-transform\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Cursor Scalar Type\nDESCRIPTION: Defines a scalar type called Cursor that represents a pagination cursor. This type is used within PageInfo objects and as arguments for the 'after' parameter in paginated queries to fetch subsequent results.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/cursor.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Cursor\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Access Control in Rego\nDESCRIPTION: Rego policy file that implements role-based access control by checking user roles against permitted actions defined in the data file.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/react/support-more-roles.mdx#2025-04-21_snippet_1\n\nLANGUAGE: rego\nCODE:\n```\npackage asertodemo.GET.api.protected\n\nimport input.policy.path\nimport input.user.properties.roles as user_roles\n\n\ndefault allowed = false\n\nallowed {\n\tsome index\n\tdata.roles[user_roles[index]].perms[path].allowed\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Local Testing\nDESCRIPTION: Command to forward port 3001 from the todo application pod to the local machine, allowing for testing the deployed application with the Edge Authorizer sidecar.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/edge-authorizers/deployment-and-operation.mdx#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace default port-forward $TODO_POD_NAME 3001:3001\n```\n\n----------------------------------------\n\nTITLE: Response for Viewer Relation Type Creation\nDESCRIPTION: Shows the JSON response returned after successfully creating the viewer relation type for departments.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-guide/types.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"setRelationType\": {\n      \"relationType\": {\n        \"name\": \"viewer\",\n        \"displayName\": \"department:viewer\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Algolia Search Scraping Script\nDESCRIPTION: Command to run the scraping script that indexes the documentation site content for Algolia search functionality.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn scrape\n```\n\n----------------------------------------\n\nTITLE: Defining TypeID Scalar in GraphQL\nDESCRIPTION: Declares a scalar type named TypeID that represents unique identifiers for object types or relation types in the schema.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/directory-api-reference/schema/common/scalars/type-id.mdx#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar TypeID\n```\n\n----------------------------------------\n\nTITLE: Importing QuickstartPage Component in JSX\nDESCRIPTION: Imports a custom QuickstartPage React component for displaying quickstart guide content.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport QuickstartPage from '../../src/components/QuickstartPage'\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: The provided text contains documentation and conceptual information but no actual code snippets to document.\nSOURCE: https://github.com/aserto-dev/aserto-docs/blob/main/docs/quickstarts/multi-tenant/overview.mdx#2025-04-21_snippet_0\n\n"
  }
]