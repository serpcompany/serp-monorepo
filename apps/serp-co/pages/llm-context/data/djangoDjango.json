[
  {
    "owner": "django",
    "repo": "django",
    "content": "TITLE: Loading Django Secret Key from Environment Variable\nDESCRIPTION: Demonstrates loading Django's SECRET_KEY from an environment variable rather than hardcoding it, which is a security best practice for production environments.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nSECRET_KEY = os.environ[\"SECRET_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Django Installed Applications List\nDESCRIPTION: Defines `INSTALLED_APPS`, the list of dotted Python paths of all applications enabled in this Django project. Defaults to an empty list, and developers are advised to use the application registry for introspection.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\nINSTALLED_APPS\n------------------\n\nDefault: `[]` (Empty list)\n\nA list of strings designating all applications that are enabled in this\nDjango installation. Each string should be a dotted Python path to:\n\n* an application configuration class (preferred), or\n* a package containing an application.\n\n:doc:`Learn more about application configurations </ref/applications>`.\n\n.. admonition:: Use the application registry for introspection\n\n    Your code should never access :setting:`INSTALLED_APPS` directly. Use\n    :attr:`django.apps.apps` instead.\n\n.. admonition:: Application names and labels must be unique in\n                :setting:`INSTALLED_APPS`\n\n    Application :attr:`names <django.apps.AppConfig.name>` — the dotted Python\n    path to the application package — must be unique. There is no way to\n    include the same application twice, short of duplicating its code under\n    another name.\n\n    Application :attr:`labels <django.apps.AppConfig.label>` — by default the\n    final part of the name — must be unique too. For example, you can't\n    include both `django.contrib.auth` and `myproject.auth`. However, you\n    can relabel an application with a custom configuration that defines a\n    different :attr:`~django.apps.AppConfig.label`.\n\n    These rules apply regardless of whether :setting:`INSTALLED_APPS`\n    references application configuration classes or application packages.\n\nWhen several applications provide different versions of the same resource\n(template, static file, management command, translation), the application\nlisted first in :setting:`INSTALLED_APPS` has precedence.\n```\n\n----------------------------------------\n\nTITLE: Iterating over a Django QuerySet in Python\nDESCRIPTION: Demonstrates synchronous iteration over a Django QuerySet. Accessing the QuerySet in a `for` loop triggers database evaluation, fetching all `Entry` objects and allowing access to their attributes like `headline`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor e in Entry.objects.all():\n    print(e.headline)\n```\n\n----------------------------------------\n\nTITLE: Implementing Django View Function\nDESCRIPTION: This snippet shows how to implement a Django view function that retrieves data from the database and renders it using a template.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\nfrom .models import Article\n\n\ndef year_archive(request, year):\n    a_list = Article.objects.filter(pub_date__year=year)\n    context = {\"year\": year, \"article_list\": a_list}\n    return render(request, \"news/year_archive.html\", context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic with If/Elif/Else Tags in HTML+Django\nDESCRIPTION: This snippet demonstrates conditional rendering using `{% if %}`, `{% elif %}`, and `{% else %}` tags. It first checks if `athlete_list` is truthy (not empty). If so, it displays the number of athletes using the `length` filter. If `athlete_list` is false, it checks `athlete_in_locker_room_list`. If that is truthy, a specific message is shown. If both conditions are false, the `{% else %}` block displaying \"No athletes.\" is rendered. Requires `athlete_list` and `athlete_in_locker_room_list` variables in the context.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% if athlete_list %}\n    Number of athletes: {{ athlete_list|length }}\n{% elif athlete_in_locker_room_list %}\n    Athletes should be out of the locker room soon!\n{% else %}\n    No athletes.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Template for Django Form\nDESCRIPTION: Shows how to create a simple HTML template that renders a Django form, including the CSRF token and submit button.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n<form action=\"/your-name/\" method=\"post\">\n    {% csrf_token %}\n    {{ form }}\n    <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Template with Context\nDESCRIPTION: Updates the index view to use a template instead of hardcoded output. Loads the template, creates a context dictionary with data, and renders the template with the context.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.template import loader\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    template = loader.get_template(\"polls/index.html\")\n    context = {\"latest_question_list\": latest_question_list}\n    return HttpResponse(template.render(context, request))\n```\n\n----------------------------------------\n\nTITLE: Redirecting Unauthenticated Users to Login Page in Django\nDESCRIPTION: This code shows how to limit access to a view by checking if a user is authenticated and redirecting unauthenticated users to a login page. It includes the current path as a 'next' parameter to redirect back after login.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.shortcuts import redirect\n\n\ndef my_view(request):\n    if not request.user.is_authenticated:\n        return redirect(f\"{settings.LOGIN_URL}?next={request.path}\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Simplified Pagination URL Generation Using querystring Tag - Django Templates\nDESCRIPTION: This snippet shows the new, recommended way to generate paginated links using the 'querystring' template tag introduced in Django 5.1. It replaces complex query parameter reconstruction with a concise declarative tag, reducing template complexity and minimizing errors. It requires Django 5.1+ and the use of its updated template engine. The tag receives keyword arguments (such as page) and outputs the correct query string for the anchor’s href attribute. This approach is limited to contexts where the custom 'querystring' tag is loaded and available.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n<a href=\"{% querystring page=page.next_page_number %}\">Next page</a>\n```\n\n----------------------------------------\n\nTITLE: Querying GeoDjango Model using 'intersects' Lookup with GEOS Point (Python)\nDESCRIPTION: Shows how to create a `Point` object using `django.contrib.gis.geos.Point` and then use it in an `intersects` spatial lookup combined with the `get` method to retrieve a single `WorldBorder` instance whose geometry intersects the point. Requires `django.contrib.gis.geos.Point` and the `world.models.WorldBorder` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import Point\n>>> pnt = Point(12.4604, 43.9420)\n>>> WorldBorder.objects.get(mpoly__intersects=pnt)\n<WorldBorder: San Marino>\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships in Django Models\nDESCRIPTION: Illustrates how to work with many-to-many relationships in Django models. Shows querying related objects and using methods like add(), set(), and remove().\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\ne = Entry.objects.get(id=3)\ne.authors.all()  # Returns all Author objects for this Entry.\ne.authors.count()\ne.authors.filter(name__contains=\"John\")\n\na = Author.objects.get(id=5)\na.entry_set.all()  # Returns all Entry objects for this Author.\n\na = Author.objects.get(id=5)\na.entry_set.set([e1, e2])\na.entry_set.set([e1.pk, e2.pk])\n```\n\n----------------------------------------\n\nTITLE: Deleting Individual Django Model Instances\nDESCRIPTION: Shows how to delete an individual Django model instance using the delete() method, which returns the count of deleted objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n>>> e.delete()\n(1, {'blog.Entry': 1})\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Logging in Users in Django\nDESCRIPTION: This example demonstrates a complete login process in a Django view, using both authenticate() to verify credentials and login() to attach the authenticated user to the current session.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import authenticate, login\n\n\ndef my_view(request):\n    username = request.POST[\"username\"]\n    password = request.POST[\"password\"]\n    user = authenticate(request, username=username, password=password)\n    if user is not None:\n        login(request, user)\n        # Redirect to a success page.\n        ...\n    else:\n        # Return an 'invalid login' error message.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Exact Match Lookup 'exact' with Examples\nDESCRIPTION: Details the 'exact' lookup for filtering exact matches in queries. Illustrates how 'None' compares to SQL NULL and discusses database-specific collation sensitivities, particularly in MySQL, affecting case sensitivity.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_94\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. fieldlookup:: exact\n\n``exact``\n~~~~~~~~~\n\nExact match. If the value provided for comparison is ``None``, it will be\ninterpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details).\n\nExamples::\n\n    Entry.objects.get(id__exact=14)\n    Entry.objects.get(id__exact=None)\n\nSQL equivalents:\n\n.. code-block:: sql\n\n    SELECT ... WHERE id = 14;\n    SELECT ... WHERE id IS NULL;\n\n.. admonition:: MySQL comparisons\n\n    In MySQL, a database table's \"collation\" setting determines whether\n    ``exact`` comparisons are case-sensitive. This is a database setting, *not*\n    a Django setting. It's possible to configure your MySQL tables to use\n    case-sensitive comparisons, but some trade-offs are involved. For more\n    information about this, see the :ref:`collation section <mysql-collation>`\n    in the :doc:`databases </ref/databases>` documentation.\n```\n\n----------------------------------------\n\nTITLE: Using permission_required Decorator in Django\nDESCRIPTION: Demonstrates how to use the permission_required decorator to restrict access to a view based on user permissions. The decorator checks if the user has the specified permission.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.decorators import permission_required\n\n@permission_required(\"polls.add_choice\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Field Lookups in Django ORM\nDESCRIPTION: Provides an overview of how Django's ORM specifies filtering conditions through field lookups like 'exact', 'iexact', 'contains', etc., used with query methods. Explains default behaviors, database-specific nuances, and sample usage scenarios with their SQL equivalents.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_93\n\n\n\n----------------------------------------\n\nTITLE: Using Django Query Expressions for Filtering, Annotating, and Ordering\nDESCRIPTION: Demonstrates various use cases of Django query expressions. Examples include filtering based on field comparisons (`F`), creating dynamic annotations (`annotate`) using functions (`Length`, `Upper`), handling aggregations (`Count`), creating objects with expression values, applying boolean/lookup expressions (`Exists`, `GreaterThan`), and ordering results based on expression values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Count, F, Value\n>>> from django.db.models.functions import Length, Upper\n>>> from django.db.models.lookups import GreaterThan\n\n# Find companies that have more employees than chairs.\n>>> Company.objects.filter(num_employees__gt=F(\"num_chairs\"))\n\n# Find companies that have at least twice as many employees\n# as chairs. Both the querysets below are equivalent.\n>>> Company.objects.filter(num_employees__gt=F(\"num_chairs\") * 2)\n>>> Company.objects.filter(num_employees__gt=F(\"num_chairs\") + F(\"num_chairs\"))\n\n# How many chairs are needed for each company to seat all employees?\n>>> company = (\n...     Company.objects.filter(num_employees__gt=F(\"num_chairs\"))\n...     .annotate(chairs_needed=F(\"num_employees\") - F(\"num_chairs\"))\n...     .first()\n... )\n>>> company.num_employees\n120\n>>> company.num_chairs\n50\n>>> company.chairs_needed\n70\n\n# Create a new company using expressions.\n>>> company = Company.objects.create(name=\"Google\", ticker=Upper(Value(\"goog\")))\n# Be sure to refresh it if you need to access the field.\n>>> company.refresh_from_db()\n>>> company.ticker\n'GOOG'\n\n# Annotate models with an aggregated value. Both forms\n# below are equivalent.\n>>> Company.objects.annotate(num_products=Count(\"products\"))\n>>> Company.objects.annotate(num_products=Count(F(\"products\")))\n\n# Aggregates can contain complex computations also\n>>> Company.objects.annotate(num_offerings=Count(F(\"products\") + F(\"services\")))\n\n# Expressions can also be used in order_by(), either directly\n>>> Company.objects.order_by(Length(\"name\").asc())\n>>> Company.objects.order_by(Length(\"name\").desc())\n# or using the double underscore lookup syntax.\n>>> from django.db.models import CharField\n>>> from django.db.models.functions import Length\n>>> CharField.register_lookup(Length)\n>>> Company.objects.order_by(\"name__length\")\n\n# Boolean expression can be used directly in filters.\n>>> from django.db.models import Exists, OuterRef\n>>> Company.objects.filter(\n...     Exists(Employee.objects.filter(company=OuterRef(\"pk\"), salary__gt=10))\n... )\n\n# Lookup expressions can also be used directly in filters\n>>> Company.objects.filter(GreaterThan(F(\"num_employees\"), F(\"num_chairs\")))\n# or annotations.\n>>> Company.objects.annotate(\n...     need_chairs=GreaterThan(F(\"num_employees\"), F(\"num_chairs\")),\n... )\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Model Methods in Django\nDESCRIPTION: Demonstrates defining custom methods on a Django model class to add row-level functionality. Includes examples of a regular method and a property method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    birth_date = models.DateField()\n\n    def baby_boomer_status(self):\n        \"Returns the person's baby-boomer status.\"\n        import datetime\n\n        if self.birth_date < datetime.date(1945, 8, 1):\n            return \"Pre-boomer\"\n        elif self.birth_date < datetime.date(1965, 1, 1):\n            return \"Baby boomer\"\n        else:\n            return \"Post-boomer\"\n\n    @property\n    def full_name(self):\n        \"Returns the person's full name.\"\n        return f\"{self.first_name} {self.last_name}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Date-Time View in Django\nDESCRIPTION: A simple Django view function that returns the current date and time as an HTML response. It imports HttpResponse from django.http and datetime module, then constructs and returns HTML content.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\nimport datetime\n\n\ndef current_datetime(request):\n    now = datetime.datetime.now()\n    html = '<html lang=\"en\"><body>It is now %s.</body></html>' % now\n    return HttpResponse(html)\n```\n\n----------------------------------------\n\nTITLE: Listing Changed Field Names with Django Form's changed_data - Python\nDESCRIPTION: Illustrates accessing Form's changed_data attribute, which provides a list of names of fields whose bound data differs from the initial values. This is useful for identifying which fields require further action after change detection. Requires a form instance bound to data. Output is a list of field names.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(request.POST, initial=data)\\n>>> if f.has_changed():\\n...     print(\\\"The following fields changed: %s\\\" % \\\", \\\").join(f.changed_data))\\n...\\n>>> f.changed_data\\n['subject', 'message']\n```\n\n----------------------------------------\n\nTITLE: Using Django's Bulk Update Method\nDESCRIPTION: Shows how to use bulk_update() to efficiently update multiple objects in a single database query rather than saving each object individually.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nentries = Entry.objects.bulk_create(\n    [\n        Entry(headline=\"This is a test\"),\n        Entry(headline=\"This is only a test\"),\n    ]\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nentries[0].headline = \"This is not a test\"\nentries[1].headline = \"This is no longer a test\"\nEntry.objects.bulk_update(entries, [\"headline\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nentries[0].headline = \"This is not a test\"\nentries[0].save()\nentries[1].headline = \"This is no longer a test\"\nentries[1].save()\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Field Labels\nDESCRIPTION: Demonstrates how to render a label tag for a form field using label_tag method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_40\n\nLANGUAGE: pycon\nCODE:\n```\n>>> f = ContactForm(data={\"message\": \"\"})\n>>> print(f[\"message\"].label_tag())\n<label for=\"id_message\">Message:</label>\n```\n\n----------------------------------------\n\nTITLE: Using RelatedManager Methods for Many-to-Many Relationships in Django\nDESCRIPTION: This snippet shows how to use the add(), create(), and set() methods of RelatedManager to create relationships with an intermediate model. It demonstrates specifying through_defaults for required fields in the intermediate model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> beatles.members.add(john, through_defaults={\"date_joined\": date(1960, 8, 1)})\n>>> beatles.members.create(\n...     name=\"George Harrison\", through_defaults={\"date_joined\": date(1960, 8, 1)}\n... )\n>>> beatles.members.set(\n...     [john, paul, ringo, george], through_defaults={\"date_joined\": date(1960, 8, 1)}\n... )\n```\n\n----------------------------------------\n\nTITLE: Chaining QuerySet Filters in Django\nDESCRIPTION: This snippet demonstrates how to chain multiple filters to refine a QuerySet. It creates a QuerySet with three conditions: headlines starting with \"What\", excluding those published after today, and including only those published after January 30, 2005.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(headline__startswith=\"What\").exclude(\n...     pub_date__gte=datetime.date.today()\n... ).filter(pub_date__gte=datetime.date(2005, 1, 30))\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Form Class\nDESCRIPTION: Example of defining a simple Django Form class with a single CharField. The example demonstrates creating a form field with a label and maximum length constraint.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass NameForm(forms.Form):\n    your_name = forms.CharField(label=\"Your name\", max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Object with get() in Django ORM (Python)\nDESCRIPTION: Shows various usages of the get() QuerySet method for retrieving a single database object that matches provided conditions. Demonstrates lookups by primary key, using Q objects for complex criteria, and illustrates handling exceptions like DoesNotExist and MultipleObjectsReturned for error cases. Requires a Django model (Entry) and optional Q imports.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.get(id=1)\nEntry.objects.get(Q(blog=blog) & Q(entry_number=1))\nEntry.objects.filter(pk=1).get()\nEntry.objects.get(id=-999)  # raises Entry.DoesNotExist\nEntry.objects.get(name=\"A Duplicated Name\")  # raises Entry.MultipleObjectsReturned\n```\n\n----------------------------------------\n\nTITLE: Getting the First Object with first() Method in Django ORM\nDESCRIPTION: This example shows the use of first() to fetch the first object matching a QuerySet, returning None if empty. If no explicit ordering is set, Django defaults to ordering by the primary key. It's a convenient method to quickly access the first record without loading all objects. Dependencies include Django ORM, and it's used in models with appropriate ordering considerations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_83\n\nLANGUAGE: Python\nCODE:\n```\np = Article.objects.order_by(\"title\", \"pub_date\").first()\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values for Unbound Django Form Fields\nDESCRIPTION: Shows how to use the `initial` argument when defining fields (`CharField`, `URLField`) in a Django `Form` (`CommentForm`). These initial values are used to populate the corresponding HTML input elements when rendering an unbound form (a form instantiated without data).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField(initial=\"Your name\")\n...     url = forms.URLField(initial=\"https://\")\n...     comment = forms.CharField()\n...\n>>> f = CommentForm(auto_id=False)\n>>> print(f)\n<div>Name:<input type=\"text\" name=\"name\" value=\"Your name\" required></div>\n<div>Url:<input type=\"url\" name=\"url\" value=\"https://\" required></div>\n<div>Comment:<input type=\"text\" name=\"comment\" required></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for MultiValueField in Django (Python)\nDESCRIPTION: This Python code defines a custom `PhoneField` class inheriting from `django.forms.MultiValueField`. It demonstrates how to configure individual error messages for nested fields (`CharField` instances for country code and phone number) when `require_all_fields` is set to `False`. It sets specific 'incomplete' messages for each part and uses `RegexValidator` for format validation. An optional extension field is also included.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.validators import RegexValidator\n\n\nclass PhoneField(MultiValueField):\n    def __init__(self, **kwargs):\n        # Define one message for all fields.\n        error_messages = {\n            \"incomplete\": \"Enter a country calling code and a phone number.\",\n        }\n        # Or define a different message for each field.\n        fields = (\n            CharField(\n                error_messages={\"incomplete\": \"Enter a country calling code.\"},\n                validators=[\n                    RegexValidator(r\"^[0-9]+$\", \"Enter a valid country calling code.\"),\n                ],\n            ),\n            CharField(\n                error_messages={\"incomplete\": \"Enter a phone number.\"},\n                validators=[RegexValidator(r\"^[0-9]+$\", \"Enter a valid phone number.\")],\n            ),\n            CharField(\n                validators=[RegexValidator(r\"^[0-9]+$\", \"Enter a valid extension.\")],\n                required=False,\n            ),\n        )\n        super().__init__(\n            error_messages=error_messages,\n            fields=fields,\n            require_all_fields=False,\n            **kwargs\n        )\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Django Objects with QuerySet\nDESCRIPTION: Demonstrates how to delete multiple Django model instances in bulk using the QuerySet delete() method with filtering.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(pub_date__year=2005).delete()\n(5, {'webapp.Entry': 5})\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Formset in Python\nDESCRIPTION: Demonstrates how to create a model formset for the Author model using modelformset_factory. It sets the fields to be included and enables edit-only mode to prevent creating new objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> AuthorFormSet = modelformset_factory(\n...     Author,\n...     fields=[\"name\", \"title\"],\n...     edit_only=True,\n... )\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Custom Primary Key in Django\nDESCRIPTION: Example showing how to define a model with a custom primary key field instead of using Django's default auto-incrementing primary key.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Fruit(models.Model):\n    name = models.CharField(max_length=100, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Day - Django ORM (Python)\nDESCRIPTION: Filters date/datetime fields to match specific days or ranges, using '__day' and comparison lookups. Inputs are integers representing the day of the month; outputs are QuerySets including any records from any month/year with a matching day number. Works with DateField and DateTimeField (with respect to current time zone if enabled).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__day=3)\nEntry.objects.filter(pub_date__day__gte=3)\n```\n\n----------------------------------------\n\nTITLE: Querying Across M2M Relationships in Django (pycon)\nDESCRIPTION: Demonstrates filtering `Article` objects based on attributes of their related `Publication` objects. It shows various lookup methods: filtering by related object ID (`publications__id=1`), primary key (`publications__pk=1`), object instance (`publications=p1`), and field lookups on the related model (`publications__title__startswith='Science'`). Includes the use of `distinct()` to avoid duplicate results when an article matches multiple related publications.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(publications__id=1)\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n>>> Article.objects.filter(publications__pk=1)\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n>>> Article.objects.filter(publications=1)\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n>>> Article.objects.filter(publications=p1)\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n\n>>> Article.objects.filter(publications__title__startswith=\"Science\")\n<QuerySet [<Article: NASA uses Python>, <Article: NASA uses Python>]>\n\n>>> Article.objects.filter(publications__title__startswith=\"Science\").distinct()\n<QuerySet [<Article: NASA uses Python>]>\n```\n\n----------------------------------------\n\nTITLE: Creating Related Objects with create() Method in Django ORM - Python\nDESCRIPTION: Provides an example of using the RelatedManager's create() method to instantiate, save, and associate a new related object in a single operation. Fetches a Blog instance and creates a new Entry with specified fields, automatically setting the foreign key. Inputs are the parent instance and model fields; outputs the created and saved Entry object. Requires correct model definitions and Django's ORM.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> b = Blog.objects.get(id=1)\n>>> e = b.entry_set.create(\n...     headline=\"Hello\", body_text=\"Hi\", pub_date=datetime.date(2005, 1, 1)\n... )\n\n# No need to call e.save() at this point -- it's already been saved.\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Year - Django ORM (Python)\nDESCRIPTION: Filters records whose date or datetime fields match a specified year, or are greater-or-equal to a given year, using Django's '__year' lookup. Inputs are integers representing years; outputs are filtered QuerySets. Further lookups can be chained, and inputs must be valid years. Timezone conversion applies if USE_TZ is enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__year=2005)\nEntry.objects.filter(pub_date__year__gte=2005)\n```\n\n----------------------------------------\n\nTITLE: Basic Django Test Client Usage - Python\nDESCRIPTION: Demonstrates basic usage of Django's test client for making POST and GET requests and checking responses.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.test import Client\n>>> c = Client()\n>>> response = c.post(\"/login/\", {\"username\": \"john\", \"password\": \"smith\"})\n>>> response.status_code\n200\n>>> response = c.get(\"/customer/details/\")\n>>> response.content\nb'<!DOCTYPE html...'\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Fixture for Django Person Model\nDESCRIPTION: Example YAML fixture showing the same Person model data in YAML format. Demonstrates the more concise YAML syntax for defining model fixtures.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/initial-data.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- model: myapp.person\n  pk: 1\n  fields:\n    first_name: John\n    last_name: Lennon\n- model: myapp.person\n  pk: 2\n  fields:\n    first_name: Paul\n    last_name: McCartney\n```\n\n----------------------------------------\n\nTITLE: Updating a Django Model Field using F() Expressions\nDESCRIPTION: Shows how to increment a model field directly in the database using an `F()` expression. This approach avoids loading the value into Python memory, performs the operation atomically at the database level, and helps prevent race conditions. The `F(\"stories_filed\") + 1` construct generates the necessary SQL for the update.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F\n\nreporter = Reporters.objects.get(name=\"Tintin\")\nreporter.stories_filed = F(\"stories_filed\") + 1\nreporter.save()\n```\n\n----------------------------------------\n\nTITLE: Raising ValidationError in Django - Python\nDESCRIPTION: Demonstrates correct and incorrect usage patterns for raising ValidationError in Django form and field validation. Highlights how to include descriptive error codes, use parameter interpolation, and wrap messages with translation for localization. Dependencies include Django's forms framework and translation utility (_), where inputs are dynamically substituted in localized error messages and limitations apply if not adhering to recommended practices.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Good\nValidationError(_(\"Invalid value\"), code=\"invalid\")\n\n# Bad\nValidationError(_(\"Invalid value\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Functional and Field Indexes with Django ORM (Python)\nDESCRIPTION: Demonstrates how to define a database index using expressions and multiple fields in Django models via the Index class. Assumes 'Lower', 'F', 'Round', and model fields are imported from django.db.models and related modules. Key parameters include 'expressions' for functional indexes and 'name' for the explicit index name. The snippet shows how to specify descending order with .desc() and combine field computations; expected inputs are field names and expressions, output is a model Meta option that creates the corresponding database index.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nIndex(Lower(\"title\").desc(), \"pub_date\", name=\"lower_title_date_idx\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nIndex(F(\"height\") * F(\"weight\"), Round(\"weight\"), name=\"calc_idx\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with ModelBackend in Django (Python)\nDESCRIPTION: Authenticates a user using username and password via `User.check_password`. If username isn't provided, it uses `USERNAME_FIELD` from kwargs. `request` is an optional HttpRequest. Returns the authenticated user object or `None`. The asynchronous version `aauthenticate()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nauthenticate(request, username=None, password=None, **kwargs)\n```\n\nLANGUAGE: python\nCODE:\n```\naauthenticate(request, username=None, password=None, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Testing Django DetailView Behavior in Python\nDESCRIPTION: This snippet defines a test class `QuestionDetailViewTests` inheriting from Django's `TestCase` to test the behavior of the `DetailView` for questions. The `test_future_question` method asserts that accessing the detail view for a question with a future publication date returns a 404 Not Found status code. The `test_past_question` method asserts that the detail view for a question with a past publication date successfully displays the question's text.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. code-block:: python\n    :caption: ``polls/tests.py``\n\n    class QuestionDetailViewTests(TestCase):\n        def test_future_question(self):\n            \"\"\"\n            The detail view of a question with a pub_date in the future\n            returns a 404 not found.\n            \"\"\"\n            future_question = create_question(question_text=\"Future question.\", days=5)\n            url = reverse(\"polls:detail\", args=(future_question.id,))\n            response = self.client.get(url)\n            self.assertEqual(response.status_code, 404)\n\n        def test_past_question(self):\n            \"\"\"\n            The detail view of a question with a pub_date in the past\n            displays the question's text.\n            \"\"\"\n            past_question = create_question(question_text=\"Past Question.\", days=-5)\n            url = reverse(\"polls:detail\", args=(past_question.id,))\n            response = self.client.get(url)\n            self.assertContains(response, past_question.question_text)\n```\n\n----------------------------------------\n\nTITLE: Replacing Related Objects with set() Method in Django ORM - Python\nDESCRIPTION: Shows how to replace the complete set of related objects via the set() method, passing a list of new related items. The example prepares a new list [obj1, obj2, obj3] and applies it using e.related_set.set(new_list). Inputs are the related manager and list of objects; result is update of the related set. Requires Django models with valid relationships configured.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> new_list = [obj1, obj2, obj3]\n>>> e.related_set.set(new_list)\n```\n\n----------------------------------------\n\nTITLE: Django Blog Entry Creation Example\nDESCRIPTION: Interactive example showing creation of blog entries and different filtering approaches with their results.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import date\n>>> beatles = Blog.objects.create(name=\"Beatles Blog\")\n>>> pop = Blog.objects.create(name=\"Pop Music Blog\")\n>>> Entry.objects.create(\n...     blog=beatles,\n...     headline=\"New Lennon Biography\",\n...     pub_date=date(2008, 6, 1),\n... )\n>>> Entry.objects.create(\n...     blog=beatles,\n...     headline=\"New Lennon Biography in Paperback\",\n...     pub_date=date(2009, 6, 1),\n... )\n>>> Entry.objects.create(\n...     blog=pop,\n...     headline=\"Best Albums of 2008\",\n...     pub_date=date(2008, 12, 15),\n... )\n>>> Entry.objects.create(\n...     blog=pop,\n...     headline=\"Lennon Would Have Loved Hip Hop\",\n...     pub_date=date(2020, 4, 1),\n... )\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Application Models in Django\nDESCRIPTION: This code defines three model classes (Blog, Author, and Entry) that compose a blog application. Each model maps to a database table with defined fields and relationships including ForeignKey and ManyToManyField relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\nfrom django.db import models\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=200)\n    email = models.EmailField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)\n    headline = models.CharField(max_length=255)\n    body_text = models.TextField()\n    pub_date = models.DateField()\n    mod_date = models.DateField(default=date.today)\n    authors = models.ManyToManyField(Author)\n    number_of_comments = models.IntegerField(default=0)\n    number_of_pingbacks = models.IntegerField(default=0)\n    rating = models.IntegerField(default=5)\n\n    def __str__(self):\n        return self.headline\n```\n\n----------------------------------------\n\nTITLE: Performing Common Aggregation Queries with Django ORM (pycon)\nDESCRIPTION: Provides a series of quick examples (cheat sheet) demonstrating common aggregation tasks using the Django ORM on the predefined models. Covers counting objects (`count`), filtering before counting, calculating average (`Avg`) and maximum (`Max`) values with defaults, computing differences between aggregates, annotating QuerySets with counts (`Count`) across relationships, using conditional aggregation with `Q` objects, and ordering/limiting annotated results. Requires importing `Avg`, `Max`, `Count`, `Q`, `FloatField` from `django.db.models`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n# Total number of books.\n>>> Book.objects.count()\n2452\n\n# Total number of books with publisher=BaloneyPress\n>>> Book.objects.filter(publisher__name=\"BaloneyPress\").count()\n73\n\n# Average price across all books, provide default to be returned instead\n# of None if no books exist.\n>>> from django.db.models import Avg\n>>> Book.objects.aggregate(Avg(\"price\", default=0))\n{'price__avg': 34.35}\n\n# Max price across all books, provide default to be returned instead of\n# None if no books exist.\n>>> from django.db.models import Max\n>>> Book.objects.aggregate(Max(\"price\", default=0))\n{'price__max': Decimal('81.20')}\n\n# Difference between the highest priced book and the average price of all books.\n>>> from django.db.models import FloatField\n>>> Book.objects.aggregate(\n...     price_diff=Max(\"price\", output_field=FloatField()) - Avg(\"price\")\n... )\n{'price_diff': 46.85}\n\n# All the following queries involve traversing the Book<->Publisher\n# foreign key relationship backwards.\n\n# Each publisher, each with a count of books as a \"num_books\" attribute.\n>>> from django.db.models import Count\n>>> pubs = Publisher.objects.annotate(num_books=Count(\"book\"))\n>>> pubs\n<QuerySet [<Publisher: BaloneyPress>, <Publisher: SalamiPress>, ...]>\n>>> pubs[0].num_books\n73\n\n# Each publisher, with a separate count of books with a rating above and below 5\n>>> from django.db.models import Q\n>>> above_5 = Count(\"book\", filter=Q(book__rating__gt=5))\n>>> below_5 = Count(\"book\", filter=Q(book__rating__lte=5))\n>>> pubs = Publisher.objects.annotate(below_5=below_5).annotate(above_5=above_5)\n>>> pubs[0].above_5\n23\n>>> pubs[0].below_5\n12\n\n# The top 5 publishers, in order by number of books.\n>>> pubs = Publisher.objects.annotate(num_books=Count(\"book\")).order_by(\"-num_books\")[:5]\n>>> pubs[0].num_books\n1323\n```\n\n----------------------------------------\n\nTITLE: Configuring Argon2 as the Default Hasher in Django (Python)\nDESCRIPTION: Demonstrates how to configure Django to use Argon2id as the default password hashing algorithm by modifying the `PASSWORD_HASHERS` setting. `Argon2PasswordHasher` is placed first in the list, making it the default for new passwords, while retaining compatibility with other listed hashers for verification.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySet (Default) Python\nDESCRIPTION: Filters a QuerySet to return Blog model instances where the name starts with 'Beatles'. This is a standard QuerySet operation returning model objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.filter(name__startswith=\"Beatles\")\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Token in Django HTML Template\nDESCRIPTION: Demonstrates how to include the CSRF token in a Django HTML template for POST forms targeting internal URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{% csrf_token %}\n```\n\n----------------------------------------\n\nTITLE: Defining ForeignKey Relationship in Django Model - Python\nDESCRIPTION: Demonstrates how to establish a one-to-many relationship between two Django models using ForeignKey. Models Blog and Entry are declared; Entry has a ForeignKey to Blog with cascade deletion and nullable entries. Requires Django's ORM (django.db.models). Inputs are the model and field definitions, no function calls in this snippet. Outputs are the registered models; this is a prerequisite configuration for using RelatedManager methods on the Blog-Entry relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\nclass Blog(models.Model):\n    # ...\n    pass\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, null=True)\n```\n\n----------------------------------------\n\nTITLE: Looping with for Tag in Django Templates\nDESCRIPTION: The for tag allows iteration over lists, dictionaries, and nested structures. It provides loop variables and supports an empty clause for handling empty collections.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_18\n\nLANGUAGE: html+django\nCODE:\n```\n<ul>\n{% for athlete in athlete_list %}\n    <li>{{ athlete.name }}</li>\n{% endfor %}\n</ul>\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% for x, y in points %}\n    There is a point at {{ x }},{{ y }}\n{% endfor %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% for key, value in data.items %}\n    {{ key }}: {{ value }}\n{% endfor %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n<ul>\n{% for athlete in athlete_list %}\n    <li>{{ athlete.name }}</li>\n{% empty %}\n    <li>Sorry, no athletes in this list.</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using bulk_update in Django\nDESCRIPTION: Demonstrates how to efficiently update multiple model instances using bulk_update(). It updates the specified fields on provided model instances generally with one query. This example creates two Entry objects and updates their headlines.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nobjs = [\n    Entry.objects.create(headline=\"Entry 1\"),\n    Entry.objects.create(headline=\"Entry 2\"),\n]\nobjs[0].headline = \"This is entry 1\"\nobjs[1].headline = \"This is entry 2\"\nEntry.objects.bulk_update(objs, [\"headline\"])\n```\n\n----------------------------------------\n\nTITLE: Running the Django Development Server (Console)\nDESCRIPTION: Shows the command to start Django's built-in lightweight web server. This server is primarily intended for development and testing purposes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Create or Retrieve an Object with get_or_create() in Django ORM (Python)\nDESCRIPTION: Shows how get_or_create() is used to safely retrieve or create a record, avoiding race conditions and ensuring uniqueness per defined constraints. Includes example using defaults to provide additional creation parameters. Notes on atomicity and uniqueness constraints are relevant for preventing duplicates. Requires the Person model and date from datetime.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nobj, created = Person.objects.get_or_create(\n    first_name=\"John\",\n    last_name=\"Lennon\",\n    defaults={\"birthday\": date(1940, 10, 9)},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django INSTALLED_APPS Setting\nDESCRIPTION: Example of how to add a Django app to the INSTALLED_APPS setting to enable the use of models defined in that app.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    # ...\n    \"myapp\",\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining AUTH_USER_MODEL setting\nDESCRIPTION: This setting defines the model used to represent a User. It defaults to 'auth.User'. It's intended to be set at the project start and the model it refers to must be available in the first migration. Changing this setting after migrations are made is a serious effort.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Acquiring CSRF Token from Cookie in JavaScript\nDESCRIPTION: Shows how to retrieve the CSRF token from the 'csrftoken' cookie using JavaScript, which is useful when CSRF_USE_SESSIONS and CSRF_COOKIE_HTTPONLY are False.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\nconst csrftoken = getCookie('csrftoken');\n```\n\n----------------------------------------\n\nTITLE: Direct Saving of ModelForm with Instance\nDESCRIPTION: This example demonstrates how to save a form when an instance is provided directly to the form, which automatically saves all data including many-to-many relationships without requiring additional method calls.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create a form instance with POST data.\n>>> a = Author()\n>>> f = AuthorForm(request.POST, instance=a)\n\n# Create and save the new author instance. There's no need to do anything else.\n>>> new_author = f.save()\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Column UniqueConstraint using Fields in Python\nDESCRIPTION: Illustrates how to create a standard `UniqueConstraint` across multiple columns using the `fields` parameter. This example ensures that the combination of 'room' and 'date' is unique.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import UniqueConstraint\n\nUniqueConstraint(fields=['room', 'date'], name='unique_booking')\n```\n\n----------------------------------------\n\nTITLE: Setting CSRF Token in AJAX Request using Fetch API\nDESCRIPTION: Shows how to set the CSRF token as a header in an AJAX request using the Fetch API.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst request = new Request(\n    /* URL */,\n    {\n        method: 'POST',\n        headers: {'X-CSRFToken': csrftoken},\n        mode: 'same-origin' // Do not send CSRF token to another domain.\n    }\n);\nfetch(request).then(function(response) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: AppConfig Signal Registration in Django\nDESCRIPTION: Implementation of signal handler registration in an AppConfig's ready method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\nfrom django.core.signals import request_finished\n\n\nclass MyAppConfig(AppConfig):\n    ...\n\n    def ready(self):\n        # Implicitly connect signal handlers decorated with @receiver.\n        from . import signals\n\n        # Explicitly connect a signal handler.\n        request_finished.connect(signals.my_callback)\n```\n\n----------------------------------------\n\nTITLE: Getting Local Time in Current Time Zone with Django\nDESCRIPTION: This snippet shows how to obtain the local time in the current time zone using Django's timezone utilities. It converts the current UTC time to the local time of the active time zone.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.utils import timezone\n>>> timezone.localtime(timezone.now())\ndatetime.datetime(2012, 3, 3, 20, 10, 53, 873365, tzinfo=zoneinfo.ZoneInfo(key='Europe/Paris'))\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget Attributes in Django ModelForm Using Python\nDESCRIPTION: Illustrates customizing widget attributes in a ModelForm by overriding the __init__ method and updating the field widgets via self.fields. Assumes usage of Django forms.ModelForm. It enables dynamic adjustment of input classes and sizes immediately upon form instantiation. Inputs are form initialization parameters; output is a form instance with updated widget HTML attributes. Ideal for model-based forms requiring individual field attribute overrides.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CommentForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields[\"name\"].widget.attrs.update({\"class\": \"special\"})\n        self.fields[\"comment\"].widget.attrs.update(size=\"40\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Django ORM Relationships - Pycon\nDESCRIPTION: Showcases a series of Django ORM commands run in a Python shell for managing Reporter and Article objects. Demonstrates object creation, saving, assigning relationships, error handling for unsaved relations, related manager usage, moving relationships, counting related objects, advanced querying through relationships using double underscores, and cascade deletion. Requires an initialized Django environment with the above models migrated. Commands illustrate direct user interaction with the ORM.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_one.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r = Reporter(first_name=\"John\", last_name=\"Smith\", email=\"john@example.com\")\n>>> r.save()\n\n>>> r2 = Reporter(first_name=\"Paul\", last_name=\"Jones\", email=\"paul@example.com\")\n>>> r2.save()\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from datetime import date\n>>> a = Article(id=None, headline=\"This is a test\", pub_date=date(2005, 7, 27), reporter=r)\n>>> a.save()\n\n>>> a.reporter.id\n1\n\n>>> a.reporter\n<Reporter: John Smith>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r3 = Reporter(first_name=\"John\", last_name=\"Smith\", email=\"john@example.com\")\n>>> Article.objects.create(\n...     headline=\"This is a test\", pub_date=date(2005, 7, 27), reporter=r3\n... )\nTraceback (most recent call last):\n...\nValueError: save() prohibited to prevent data loss due to unsaved related object 'reporter'.\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r = a.reporter\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> new_article = r.article_set.create(\n...     headline=\"John's second story\", pub_date=date(2005, 7, 29)\n... )\n>>> new_article\n<Article: John's second story>\n>>> new_article.reporter\n<Reporter: John Smith>\n>>> new_article.reporter.id\n1\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> new_article2 = Article.objects.create(\n...     headline=\"Paul's story\", pub_date=date(2006, 1, 17), reporter=r\n... )\n>>> new_article2.reporter\n<Reporter: John Smith>\n>>> new_article2.reporter.id\n1\n>>> r.article_set.all()\n<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r2.article_set.add(new_article2)\n>>> new_article2.reporter.id\n2\n>>> new_article2.reporter\n<Reporter: Paul Jones>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r.article_set.add(r2)\nTraceback (most recent call last):\n...\nTypeError: 'Article' instance expected, got <Reporter: Paul Jones>\n\n>>> r.article_set.all()\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n>>> r2.article_set.all()\n<QuerySet [<Article: Paul's story>]>\n\n>>> r.article_set.count()\n2\n\n>>> r2.article_set.count()\n1\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r.article_set.filter(headline__startswith=\"This\")\n<QuerySet [<Article: This is a test>]>\n\n# Find all Articles for any Reporter whose first name is \"John\".\n>>> Article.objects.filter(reporter__first_name=\"John\")\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(reporter__first_name=\"John\")\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(reporter__first_name=\"John\", reporter__last_name=\"Smith\")\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(reporter__pk=1)\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n>>> Article.objects.filter(reporter=1)\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n>>> Article.objects.filter(reporter=r)\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n>>> Article.objects.filter(reporter__in=[1, 2]).distinct()\n<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>\n>>> Article.objects.filter(reporter__in=[r, r2]).distinct()\n<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(\n...     reporter__in=Reporter.objects.filter(first_name=\"John\")\n... ).distinct()\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Reporter.objects.filter(article__pk=1)\n<QuerySet [<Reporter: John Smith>]>\n>>> Reporter.objects.filter(article=1)\n<QuerySet [<Reporter: John Smith>]>\n>>> Reporter.objects.filter(article=a)\n<QuerySet [<Reporter: John Smith>]>\n\n>>> Reporter.objects.filter(article__headline__startswith=\"This\")\n<QuerySet [<Reporter: John Smith>, <Reporter: John Smith>, <Reporter: John Smith>]>\n>>> Reporter.objects.filter(article__headline__startswith=\"This\").distinct()\n<QuerySet [<Reporter: John Smith>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Reporter.objects.filter(article__headline__startswith=\"This\").count()\n3\n>>> Reporter.objects.filter(article__headline__startswith=\"This\").distinct().count()\n1\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Reporter.objects.filter(article__reporter__first_name__startswith=\"John\")\n<QuerySet [<Reporter: John Smith>, <Reporter: John Smith>, <Reporter: John Smith>, <Reporter: John Smith>]>\n>>> Reporter.objects.filter(article__reporter__first_name__startswith=\"John\").distinct()\n<QuerySet [<Reporter: John Smith>]>\n>>> Reporter.objects.filter(article__reporter=r).distinct()\n<QuerySet [<Reporter: John Smith>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.all()\n<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>\n>>> Reporter.objects.order_by(\"first_name\")\n<QuerySet [<Reporter: John Smith>, <Reporter: Paul Jones>]>\n>>> r2.delete()\n>>> Article.objects.all()\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n>>> Reporter.objects.order_by(\"first_name\")\n<QuerySet [<Reporter: John Smith>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Reporter.objects.filter(article__headline__startswith=\"This\").delete()\n>>> Reporter.objects.all()\n<QuerySet []>\n>>> Article.objects.all()\n<QuerySet []>\n\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Records to ManyToManyField in Django\nDESCRIPTION: This example shows how to add multiple records to a ManyToManyField in a single operation. It creates four Author objects and adds them all to an Entry's authors field in one add() method call.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> john = Author.objects.create(name=\"John\")\n>>> paul = Author.objects.create(name=\"Paul\")\n>>> george = Author.objects.create(name=\"George\")\n>>> ringo = Author.objects.create(name=\"Ringo\")\n>>> entry.authors.add(john, paul, george, ringo)\n```\n\n----------------------------------------\n\nTITLE: Setting Accepted Time Input Formats in Django Settings (Python)\nDESCRIPTION: This snippet defines TIME_INPUT_FORMATS, which enumerates the valid string formats that will be accepted for time fields in Django forms and models. It is a list of Python datetime-compatible format strings, tried in order to accept various user input patterns for time values. Dependencies include Python's datetime module formatting conventions. Input: user-entered time strings; Output: parsed datetime.time objects or validation errors.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nTIME_INPUT_FORMATS = [\n    \"%H:%M:%S\",  # '14:30:59'\n    \"%H:%M:%S.%f\",  # '14:30:59.000200'\n    \"%H:%M\",  # '14:30'\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Self-Referential ManyToManyField in Django\nDESCRIPTION: This example shows how to create a symmetrical many-to-many relationship to the same model (self-referential). It's used to represent friendships between Person instances.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    friends = models.ManyToManyField(\"self\")\n```\n\n----------------------------------------\n\nTITLE: Defining `get_absolute_url` Using `reverse` (Python)\nDESCRIPTION: Demonstrates the recommended way to implement `get_absolute_url` using Django's `reverse` function. This approach is more portable as it relies on named URL patterns ('people-detail' in this example) rather than hardcoded URL paths. It requires importing `reverse` from `django.urls`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef get_absolute_url(self):\n    from django.urls import reverse\n\n    return reverse(\"people-detail\", kwargs={\"pk\": self.pk})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HttpRequest.build_absolute_uri Usage in Django (Python)\nDESCRIPTION: Shows interactive examples of calling build_absolute_uri() with various arguments to generate absolute URIs based on request context or specific locations. Assumes a Django HttpRequest with necessary context (host, scheme, etc.). Useful for generating fully qualified URLs in views or middleware.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> request.build_absolute_uri()\n'https://example.com/music/bands/the_beatles/?print=true'\n>>> request.build_absolute_uri(\"/bands/\")\n'https://example.com/bands/'\n>>> request.build_absolute_uri(\"https://example2.com/bands/\")\n'https://example2.com/bands/'\n\n```\n\n----------------------------------------\n\nTITLE: Using require_http_methods Decorator in Django Views\nDESCRIPTION: This snippet demonstrates how to restrict a view to only accept specific HTTP methods (GET and POST) using the require_http_methods decorator from django.views.decorators.http.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/decorators.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.http import require_http_methods\n\n\n@require_http_methods([\"GET\", \"POST\"])\ndef my_view(request):\n    # I can assume now that only GET or POST requests make it this far\n    # ...\n    pass\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of Django Q Object OR Condition\nDESCRIPTION: Shows the SQL WHERE clause that is equivalent to the Django Q object OR condition, demonstrating the underlying SQL being generated.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nWHERE question LIKE 'Who%' OR question LIKE 'What%'\n```\n\n----------------------------------------\n\nTITLE: Using async_to_sync Adapter Function\nDESCRIPTION: Examples of using async_to_sync as both a direct wrapper and decorator to convert async functions to sync functions. Preserves threadlocals and contextvars across the boundary.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import async_to_sync\n\n\nasync def get_data(): ...\n\n\nsync_get_data = async_to_sync(get_data)\n\n\n@async_to_sync\nasync def get_other_data(): ...\n```\n\n----------------------------------------\n\nTITLE: Combining Login Required and Permission Required Decorators in Django\nDESCRIPTION: Shows how to combine the @login_required and @permission_required decorators to ensure a user is both logged in and has the necessary permissions before accessing a view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required, permission_required\n\n@login_required\n@permission_required(\"polls.add_choice\", raise_exception=True)\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Options to View Functions in Django URLconf\nDESCRIPTION: This example shows how to pass extra options to view functions in Django's URLconf. It demonstrates the use of an optional third argument in the path function to provide additional keyword arguments to the view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path(\"blog/<int:year>/\", views.year_archive, {\"foo\": \"bar\"}),\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic HTML Form Structure in Django Template\nDESCRIPTION: Demonstrates the HTML markup generated by Django for a form, showing the label and input elements with their attributes for a basic text field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n<label for=\"your_name\">Your name: </label>\n<input id=\"your_name\" type=\"text\" name=\"your_name\" maxlength=\"100\" required>\n```\n\n----------------------------------------\n\nTITLE: Parameterized ValidationError Messages in Django - Python\nDESCRIPTION: Shows how to build parameterized ValidationError messages using placeholders and the params argument, following Django's recommendation for reusable and translatable error messages. Requires Django's translation function (_) and is typically used in field or form validation where variable details (such as the invalid value itself) need to be included. The input 'value' is inserted into the error message, and this pattern supports localization and flexible message rewriting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nValidationError(\n    _(\\\"Invalid value: %(value)s\\\"),\n    params={\\\"value\\\": \\\"42\\\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Acquiring CSRF Token from HTML in JavaScript\nDESCRIPTION: Demonstrates how to retrieve the CSRF token from the HTML DOM when CSRF_USE_SESSIONS or CSRF_COOKIE_HTTPONLY is True.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% csrf_token %}\n<script>\nconst csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Validator to a Django Form Field (Python)\nDESCRIPTION: Demonstrates adding the custom 'validate_even' validator to a Django Form IntegerField. Because Django converts data before validation, the same validator can be reused across models and forms. Dependency: Django's forms API. The form field 'even_field' requires input to be even, reusing the previously defined function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\\n\\nclass MyForm(forms.Form):\\n    even_field = forms.IntegerField(validators=[validate_even])\n```\n\n----------------------------------------\n\nTITLE: Using format_html for Safe HTML Formatting in Python\nDESCRIPTION: Demonstrates the use of format_html function to safely build HTML fragments. It escapes all arguments except the format string, preventing XSS vulnerabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nformat_html(\n    \"{} <b>{}</b> {}\",\n    mark_safe(some_html),\n    some_text,\n    some_other_text,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating ForeignKey Fields in Django Models\nDESCRIPTION: This example demonstrates how to update a ForeignKey field on a model. It retrieves Entry and Blog objects from the database, assigns the Blog object to the Entry's blog field, and then saves the changes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from blog.models import Blog, Entry\n>>> entry = Entry.objects.get(pk=1)\n>>> cheese_blog = Blog.objects.get(name=\"Cheddar Talk\")\n>>> entry.blog = cheese_blog\n>>> entry.save()\n```\n\n----------------------------------------\n\nTITLE: Handling Forms with a Class-Based View in Django\nDESCRIPTION: This snippet demonstrates the class-based view approach to form handling, equivalent to the function-based example. It uses class attributes like `form_class`, `initial`, and `template_name` for configuration. Separate `get` and `post` methods handle form display and processing logic, respectively, promoting better organization.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\nfrom django.views import View\n\nfrom .forms import MyForm\n\n\nclass MyFormView(View):\n    form_class = MyForm\n    initial = {\"key\": \"value\"}\n    template_name = \"form_template.html\"\n\n    def get(self, request, *args, **kwargs):\n        form = self.form_class(initial=self.initial)\n        return render(request, self.template_name, {\"form\": form})\n\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            # <process form cleaned data>\n            return HttpResponseRedirect(\"/success/\")\n\n        return render(request, self.template_name, {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Defining Absolute Application Reference for ForeignKey - Django Models - Python\nDESCRIPTION: Defines a Car model with a ForeignKey using an absolute reference to 'thirdpartyapp.Manufacturer' as a string. This approach is useful for referencing models in different Django applications and to resolve circular imports. Required dependency is django.db.models, and the input is an absolute string reference. The output is a Car model with a cross-app relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nclass Car(models.Model):\\n    manufacturer = models.ForeignKey(\\n        \"thirdpartyapp.Manufacturer\",\\n        on_delete=models.CASCADE,\\n    )\n```\n\n----------------------------------------\n\nTITLE: Using login_required Decorator in Django\nDESCRIPTION: Demonstrates how to use the login_required decorator to restrict access to a view to authenticated users only. If the user is not logged in, they will be redirected to the login page.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for News Application\nDESCRIPTION: This snippet demonstrates how to define Django models for a news application, including Reporter and Article models with various field types and relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Reporter(models.Model):\n    full_name = models.CharField(max_length=70)\n\n    def __str__(self):\n        return self.full_name\n\n\nclass Article(models.Model):\n    pub_date = models.DateField()\n    headline = models.CharField(max_length=200)\n    content = models.TextField()\n    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.headline\n```\n\n----------------------------------------\n\nTITLE: Implementing a FormView for Contact Form in Django\nDESCRIPTION: Creates a `ContactFormView` by subclassing `django.views.generic.edit.FormView`. It specifies the template (`contact.html`), the form class (`ContactForm`), and the URL to redirect to upon successful submission (`/thanks/`). It overrides the `form_valid` method to call the form's `send_email` method before executing the default redirection behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.forms import ContactForm\nfrom django.views.generic.edit import FormView\n\n\nclass ContactFormView(FormView):\n    template_name = \"contact.html\"\n    form_class = ContactForm\n    success_url = \"/thanks/\"\n\n    def form_valid(self, form):\n        # This method is called when valid form data has been POSTed.\n        # It should return an HttpResponse.\n        form.send_email()\n        return super().form_valid(form)\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Django Model Objects\nDESCRIPTION: This snippet shows how to update an existing Blog object in the database. It changes the name attribute of an existing Blog instance and calls save() to update the record in the database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> b5.name = \"New name\"\n>>> b5.save()\n```\n\n----------------------------------------\n\nTITLE: Defining URL Patterns with Application Namespace in Django\nDESCRIPTION: Illustrates how to set up URL patterns in a Django application, including setting the app_name for namespace and defining URL patterns using path.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.IndexView.as_view(), name=\"index\"),\n    path(\"<int:pk>/\", views.DetailView.as_view(), name=\"detail\"),\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Object with create() in Django ORM (Python)\nDESCRIPTION: Illustrates two equivalent methods to create and persist a new model instance in Django: using objects.create() and instantiating followed by save(). Shows usage of keyword arguments and force_insert. Assumes a Django model Person. If a manual primary key is used and already exists, an IntegrityError is raised.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\np = Person.objects.create(first_name=\"Bruce\", last_name=\"Springsteen\")\np = Person(first_name=\"Bruce\", last_name=\"Springsteen\")\np.save(force_insert=True)\n```\n\n----------------------------------------\n\nTITLE: Using Enumeration Classes for Choices in Django Models\nDESCRIPTION: Example demonstrating how to use enumeration classes to define choices for a model field in a more concise way.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Runner(models.Model):\n    MedalType = models.TextChoices(\"MedalType\", \"GOLD SILVER BRONZE\")\n    name = models.CharField(max_length=60)\n    medal = models.CharField(blank=True, choices=MedalType, max_length=10)\n```\n\n----------------------------------------\n\nTITLE: Defining CSS for Multiple Output Media Types with a Single File in Django\nDESCRIPTION: Shows how to specify a CSS file that applies to multiple output media types using a comma-separated list as the dictionary key.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Media:\n    css = {\n        \"screen\": [\"pretty.css\"],\n        \"tv,projector\": [\"lo_res.css\"],\n        \"print\": [\"newspaper.css\"],\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring bcrypt as the Default Hasher in Django (Python)\nDESCRIPTION: Shows how to set bcrypt as the default password hashing algorithm in Django by modifying the `PASSWORD_HASHERS` setting. `BCryptSHA256PasswordHasher` is listed first, making it the default for new passwords, while maintaining verification support for other hashers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Asynchronous Views in Django - Python\nDESCRIPTION: This snippet demonstrates how to implement an asynchronous view in Django 3.1 using the async def syntax. It requires Python 3.6+ and Django 3.1 or higher, with the view function able to perform asynchronous tasks like awaiting asyncio calls. The input is a Django request, and the output is an HttpResponse. Performance gains are seen in ASGI mode, and usage in WSGI mode may incur penalties.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def my_view(request):\n    await asyncio.sleep(0.5)\n    return HttpResponse(\"Hello, async world!\")\n```\n\n----------------------------------------\n\nTITLE: Filtering by Inclusive Range - SQL Equivalent\nDESCRIPTION: Provides the SQL equivalent of Django's 'range' lookup, converting the filter into a BETWEEN clause for inclusive bounds. Works on any SQL database supporting standard BETWEEN syntax. Inputs are two string representations of dates; output is a selection of rows matching the range. For datetime fields, only records exactly matching the lower and upper bound times will be included.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_101\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE pub_date BETWEEN '2005-01-01' and '2005-03-31';\n```\n\n----------------------------------------\n\nTITLE: Simplified URL Routing with path() Function (Django 2.0)\nDESCRIPTION: Example of the new simplified URL routing syntax introduced in Django 2.0 using the path() function. This syntax supports type coercion and is more readable than regex-based routing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npath(\"articles/<int:year>/\", views.year_archive)\n```\n\n----------------------------------------\n\nTITLE: Using pgettext for Contextual Translations in Python\nDESCRIPTION: Demonstrates how to use pgettext() function to provide context for translations, allowing translators to give different translations for the same string in different contexts.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.translation import pgettext\n\nmonth = pgettext(\"month name\", \"May\")\n```\n\n----------------------------------------\n\nTITLE: Mixing Q Objects with Keyword Arguments in Django\nDESCRIPTION: Demonstrates the correct way to combine Q objects with keyword arguments in a Django query, where Q objects must precede keyword arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nPoll.objects.get(\n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),\n    question__startswith=\"Who\",\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySet and Returning Dictionaries (All Fields) Python\nDESCRIPTION: Filters a QuerySet and then applies values() to return dictionaries instead of model instances. By default, values() includes all fields from the model as key-value pairs in the dictionaries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.filter(name__startswith=\"Beatles\").values()\n```\n\n----------------------------------------\n\nTITLE: Creating CSRF-Enforcing Test Client in Python\nDESCRIPTION: Demonstrates how to create a test client that enforces CSRF checks for testing purposes.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.test import Client\n>>> csrf_client = Client(enforce_csrf_checks=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Model Permissions in Django Model Meta\nDESCRIPTION: Illustrates how to add extra, custom permissions to a Django model using the `permissions` attribute within its `Meta` class. Permissions are defined as a list of tuples, each containing a permission code and a human-readable name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npermissions = [(\"can_deliver_pizzas\", \"Can deliver pizzas\")]\n```\n\n----------------------------------------\n\nTITLE: Using the When Expression for Conditional Logic - Django ORM - Python\nDESCRIPTION: Demonstrates usage of the When class to construct conditional expressions within Django queries. Shows several patterns: basic field comparison, field lookup, combination with Q objects, boolean expression use, and lookup-based conditions. Assumes import of F, Q, When, Exists, OuterRef, and necessary models; examples are designed for use in annotate, filter, or within a Case clause.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import F, Q, When\n>>> # String arguments refer to fields; the following two examples are equivalent:\n>>> When(account_type=Client.GOLD, then=\"name\")\n>>> When(account_type=Client.GOLD, then=F(\"name\"))\n>>> # You can use field lookups in the condition\n>>> from datetime import date\n>>> When(\n...     registered_on__gt=date(2014, 1, 1),\n...     registered_on__lt=date(2015, 1, 1),\n...     then=\"account_type\",\n... )\n>>> # Complex conditions can be created using Q objects\n>>> When(Q(name__startswith=\"John\") | Q(name__startswith=\"Paul\"), then=\"name\")\n>>> # Condition can be created using boolean expressions.\n>>> from django.db.models import Exists, OuterRef\n>>> non_unique_account_type = (\n...     Client.objects.filter(\n...         account_type=OuterRef(\"account_type\"),\n...     )\n...     .exclude(pk=OuterRef(\"pk\"))\n...     .values(\"pk\")\n... )\n>>> When(Exists(non_unique_account_type), then=Value(\"non unique\"))\n>>> # Condition can be created using lookup expressions.\n>>> from django.db.models.lookups import GreaterThan, LessThan\n>>> When(\n...     GreaterThan(F(\"registered_on\"), date(2014, 1, 1))\n...     & LessThan(F(\"registered_on\"), date(2015, 1, 1)),\n...     then=\"account_type\",\n... )\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> When(then__exact=0, then=1)\n>>> When(Q(then=0), then=1)\n```\n\n----------------------------------------\n\nTITLE: Logging Out Users in Django\nDESCRIPTION: This code shows how to implement a logout view in Django using the logout() function, which cleans out session data for the current request. After logout, the function redirects to a success page.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import logout\n\n\ndef logout_view(request):\n    logout(request)\n    # Redirect to a success page.\n```\n\n----------------------------------------\n\nTITLE: Prefetching Related Objects Asynchronously with Django ORM in Python\nDESCRIPTION: Shows the usage of prefetch_related_objects() and its asynchronous variant aprefetch_related_objects() for prefetching related fields on an iterable of model instances. This is useful when working with model lists not obtained from querysets, such as cached instances. The input includes a list of Restaurant instances and a related lookup string, with the output being pre-populated related objects to reduce queries when accessing them.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_126\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import prefetch_related_objects\n>>> restaurants = fetch_top_restaurants_from_cache()  # A list of Restaurants\n>>> prefetch_related_objects(restaurants, \"pizzas__toppings\")\n```\n\n----------------------------------------\n\nTITLE: Subclassing Django TemplateView for Custom View (Python)\nDESCRIPTION: Illustrates creating a custom view by subclassing django.views.generic.TemplateView and overriding the template_name, then wiring it to a URL with as_view(). Requires Django and a valid template (about.html). The input is an HTTP GET request to '/about/', outputting an HTTP response with the specified template. Allows for more extensibility by overriding further methods or adding context data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# some_app/views.py\nfrom django.views.generic import TemplateView\n\n\nclass AboutView(TemplateView):\n    template_name = \"about.html\"\n```\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom django.urls import path\nfrom some_app.views import AboutView\n\nurlpatterns = [\n    path(\"about/\", AboutView.as_view()),\n]\n```\n\n----------------------------------------\n\nTITLE: Using related_name with Abstract Base Classes in Django Models\nDESCRIPTION: Example showing how to use related_name and related_query_name in abstract base classes to ensure unique reverse relations. The pattern uses '%(app_label)s' and '%(class)s' placeholders to dynamically create unique names for each child class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Base(models.Model):\n    m2m = models.ManyToManyField(\n        OtherModel,\n        related_name=\"%(app_label)s_%(class)s_related\",\n        related_query_name=\"%(app_label)s_%(class)ss\",\n    )\n\n    class Meta:\n        abstract = True\n\n\nclass ChildA(Base):\n    pass\n\n\nclass ChildB(Base):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch with Django ORM in Python\nDESCRIPTION: Demonstrates the Prefetch() object of the Django ORM used to customize prefetch_related() behavior. It allows specifying a relation lookup, an optional base queryset to filter or chain select_related(), and an optional attribute name to cache the results. This enables efficient fetching of related objects with reduced database queries and tailored filtering. Input includes a model manager call on Question objects and expected output is the related Choice objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_125\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Prefetch\n>>> Question.objects.prefetch_related(Prefetch(\"choice_set\")).get().choice_set.all()\n<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>\n# This will only execute two queries regardless of the number of Question\n# and Choice objects.\n>>> Question.objects.prefetch_related(Prefetch(\"choice_set\"))\n<QuerySet [<Question: What\\'s up?>]>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> voted_choices = Choice.objects.filter(votes__gt=0)\n>>> voted_choices\n<QuerySet [<Choice: The sky>]>\n>>> prefetch = Prefetch(\"choice_set\", queryset=voted_choices)\n>>> Question.objects.prefetch_related(prefetch).get().choice_set.all()\n<QuerySet [<Choice: The sky>]>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> prefetch = Prefetch(\"choice_set\", queryset=voted_choices, to_attr=\"voted_choices\")\n>>> Question.objects.prefetch_related(prefetch).get().voted_choices\n[<Choice: The sky>]\n>>> Question.objects.prefetch_related(prefetch).get().choice_set.all()\n<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>\n```\n\n----------------------------------------\n\nTITLE: Creating Users with UserManager in Django (Python)\nDESCRIPTION: Demonstrates creating a new user instance using the `User.objects.create_user()` helper method within a Python interactive session (pycon). It shows how to provide username, email, and password, saves the user to the database automatically, and allows for subsequent attribute updates like `last_name` followed by saving.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.auth.models import User\n>>> user = User.objects.create_user(\"john\", \"lennon@thebeatles.com\", \"johnpassword\")\n\n# At this point, user is a User object that has already been saved\n# to the database. You can continue to change its attributes\n# if you want to change other fields.\n>>> user.last_name = \"Lennon\"\n>>> user.save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic List Filters with Field Names in Django Admin\nDESCRIPTION: Demonstrates how to set up simple list filters using model field names in a Django ModelAdmin class. This example shows filtering by boolean and foreign key fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_filter = [\"is_staff\", \"company\"]\n```\n\n----------------------------------------\n\nTITLE: Using Related Fields in ModelAdmin list_display\nDESCRIPTION: Example of displaying related fields using the __ notation in list_display to show data from related models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"city__name\"]\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators to Synchronous and Asynchronous Django Views in Python\nDESCRIPTION: Shows how standard Django view decorators, like `@never_cache`, can be applied to both traditional synchronous (`def my_sync_view`) and asynchronous (`async def my_async_view`) view functions in Python. This illustrates that many existing Django decorators are compatible with the async view system.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import never_cache\n\n\n@never_cache\ndef my_sync_view(request): ...\n\n\n@never_cache\nasync def my_async_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Using Django's Bulk Create Method\nDESCRIPTION: Demonstrates how to use bulk_create() to insert multiple objects in a single database query instead of individual create() calls.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.bulk_create(\n    [\n        Entry(headline=\"This is a test\"),\n        Entry(headline=\"This is only a test\"),\n    ]\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.create(headline=\"This is a test\")\nEntry.objects.create(headline=\"This is only a test\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Backend with Authentication in Django (Python)\nDESCRIPTION: This Python snippet shows how to configure the Django `CACHES` setting for a Redis backend that requires authentication. The username and password are included in the `LOCATION` URL (redis://username:password@127.0.0.1:6379). Requires the `redis-py` library.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": \"redis://username:password@127.0.0.1:6379\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Price Directly on Model Manager (pycon)\nDESCRIPTION: A simplified version of calculating the average book price, demonstrating that calling `aggregate()` directly on the model manager (`Book.objects`) is equivalent to calling it on the full QuerySet (`Book.objects.all()`). Imports `Avg` from `django.db.models`. The output is a dictionary with the calculated average price.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Book.objects.aggregate(Avg(\"price\"))\n{'price__avg': 34.35}\n```\n\n----------------------------------------\n\nTITLE: Filtering Entries with LIKE Statements in Django ORM\nDESCRIPTION: Shows how to use LIKE statement equivalents in Django ORM, specifically for filtering entries that contain a percent sign. It also demonstrates how Django handles escaping of special characters in LIKE queries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(headline__contains=\"%\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE headline LIKE '%\\%%';\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Custom Management Commands in Django\nDESCRIPTION: Shows the directory structure required to implement a custom management command in a Django application. The custom command will be registered automatically if placed in the correct directory structure.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npolls/\n    __init__.py\n    models.py\n    management/\n        __init__.py\n        commands/\n            __init__.py\n            _private.py\n            closepoll.py\n    tests.py\n    views.py\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Classes for Required and Error Fields in Django Forms - Python\nDESCRIPTION: Demonstrates how to customize the styling of required and error fields in Django forms by setting the error_css_class and required_css_class class attributes. Requires the Django framework. Key parameters are error_css_class and required_css_class, which define CSS classes to be added to relevant form fields in the rendered HTML. Inputs are form data; outputs are HTML with proper class attributes attached to required/error fields and labels. This approach allows consistent styling for validation states and customization at the form or field level.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ContactForm(forms.Form):\n    error_css_class = \"error\"\n    required_css_class = \"required\"\n\n    # ... and the rest of your fields here\n```\n\n----------------------------------------\n\nTITLE: Applying Django Migrations\nDESCRIPTION: Example demonstrating how to apply database migrations using Django's migrate command to update the database schema.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: books\nRunning migrations:\n  Rendering model states... DONE\n  Applying books.0003_auto... OK\n```\n\n----------------------------------------\n\nTITLE: Checking User Module Permissions with ModelBackend in Django (Python)\nDESCRIPTION: Returns `True` if the `user_obj` has any permissions within the specified application label (`app_label`), otherwise `False`. The asynchronous version `ahas_module_perms()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nhas_module_perms(user_obj, app_label)\n```\n\nLANGUAGE: python\nCODE:\n```\nahas_module_perms(user_obj, app_label)\n```\n\n----------------------------------------\n\nTITLE: Using a Callable for Default Field Values\nDESCRIPTION: Demonstrates using a callable (a function `contact_default`) as the value for the `default` argument of a Django model field (`JSONField`). This pattern is necessary for mutable default values (like dictionaries or lists) to ensure that each new model instance gets a fresh copy of the default, rather than sharing the same instance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\ndef contact_default():\n    return {\"email\": \"to1@example.com\"}\n\n\ncontact_info = models.JSONField(\"ContactInfo\", default=contact_default)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Backends\nDESCRIPTION: Example configuration for the TEMPLATES setting in Django, showing how to set up multiple template backends with different directories and options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            \"/home/html/example.com\",\n            \"/home/html/default\",\n        ],\n    },\n    {\n        \"BACKEND\": \"django.template.backends.jinja2.Jinja2\",\n        \"DIRS\": [\n            \"/home/html/jinja2\",\n        ],\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Django Views\nDESCRIPTION: This code demonstrates how to check if a user is authenticated in Django views. It shows both the synchronous and asynchronous approaches using the is_authenticated attribute to distinguish between authenticated and anonymous users.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nif request.user.is_authenticated:\n    # Do something for authenticated users.\n    ...\nelse:\n    # Do something for anonymous users.\n    ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Django ORM Queries and Related Objects\nDESCRIPTION: This Python code showcases advanced Django ORM queries, including filtering, accessing related objects through foreign keys, and creating related objects. It demonstrates the power and flexibility of Django's database API.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Make sure our __str__() addition worked.\n>>> Question.objects.all()\n<QuerySet [<Question: What's up?>]>\n\n# Django provides a rich database lookup API that's entirely driven by\n# keyword arguments.\n>>> Question.objects.filter(id=1)\n<QuerySet [<Question: What's up?>]>\n>>> Question.objects.filter(question_text__startswith=\"What\")\n<QuerySet [<Question: What's up?>]>\n\n# Get the question that was published this year.\n>>> from django.utils import timezone\n>>> current_year = timezone.now().year\n>>> Question.objects.get(pub_date__year=current_year)\n<Question: What's up?>\n\n# Request an ID that doesn't exist, this will raise an exception.\n>>> Question.objects.get(id=2)\nTraceback (most recent call last):\n    ...\nDoesNotExist: Question matching query does not exist.\n\n# Lookup by a primary key is the most common case, so Django provides a\n# shortcut for primary-key exact lookups.\n# The following is identical to Question.objects.get(id=1).\n>>> Question.objects.get(pk=1)\n<Question: What's up?>\n\n# Make sure our custom method worked.\n>>> q = Question.objects.get(pk=1)\n>>> q.was_published_recently()\nTrue\n\n# Give the Question a couple of Choices. The create call constructs a new\n# Choice object, does the INSERT statement, adds the choice to the set\n# of available choices and returns the new Choice object. Django creates\n# a set (defined as \"choice_set\") to hold the \"other side\" of a ForeignKey\n# relation (e.g. a question's choice) which can be accessed via the API.\n>>> q = Question.objects.get(pk=1)\n\n# Display any choices from the related object set -- none so far.\n>>> q.choice_set.all()\n<QuerySet []>\n\n# Create three choices.\n>>> q.choice_set.create(choice_text=\"Not much\", votes=0)\n<Choice: Not much>\n>>> q.choice_set.create(choice_text=\"The sky\", votes=0)\n<Choice: The sky>\n>>> c = q.choice_set.create(choice_text=\"Just hacking again\", votes=0)\n\n# Choice objects have API access to their related Question objects.\n>>> c.question\n<Question: What's up?>\n\n# And vice versa: Question objects get access to Choice objects.\n>>> q.choice_set.all()\n<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>\n>>> q.choice_set.count()\n3\n\n# The API automatically follows relationships as far as you need.\n# Use double underscores to separate relationships.\n# This works as many levels deep as you want; there's no limit.\n# Find all Choices for any question whose pub_date is in this year\n# (reusing the 'current_year' variable we created above).\n>>> Choice.objects.filter(question__pub_date__year=current_year)\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous ORM Interface in Django\nDESCRIPTION: Shows how to use the new asynchronous ORM interface in Django 4.1. The example demonstrates filtering authors asynchronously and retrieving the first book for each author using the new 'a' prefixed methods.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nasync for author in Author.objects.filter(name__startswith=\"A\"):\n    book = await author.books.afirst()\n```\n\n----------------------------------------\n\nTITLE: Filtering by Null Values using `isnull` Lookup in Django (Python and SQL)\nDESCRIPTION: Shows how to filter a Django QuerySet for records where a specific field is NULL or NOT NULL using the `__isnull` lookup. It accepts boolean values `True` (for `IS NULL`) or `False` (for `IS NOT NULL`). Provides the Python example and the equivalent SQL `IS NULL` clause.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_122\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.filter(pub_date__isnull=True)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ... WHERE pub_date IS NULL;\n```\n\n----------------------------------------\n\nTITLE: Defining Django One-to-One and ForeignKey Models - Python\nDESCRIPTION: Defines three interconnected Django models: Place, Restaurant, and Waiter. Place and Restaurant are linked via a OneToOneField, ensuring each restaurant corresponds to one place and vice versa. Dependencies include django.db.models, and the key fields set up model metadata and string representations supporting Django admin and shell introspection. ForeignKey on Waiter establishes a many-to-one relationship to Restaurant. Inputs are determined by Django ORM operations, and outputs are Python class definitions managed via migrations. Saving an instance requires all related objects to be persisted first.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/one_to_one.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n\n    def __str__(self):\n        return f\"{self.name} the place\"\n\n\nclass Restaurant(models.Model):\n    place = models.OneToOneField(\n        Place,\n        on_delete=models.CASCADE,\n        primary_key=True,\n    )\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the restaurant\" % self.place.name\n\n\nclass Waiter(models.Model):\n    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return \"%s the waiter at %s\" % (self.name, self.restaurant)\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous View in Django\nDESCRIPTION: Example of an asynchronous view using Python's async/await syntax. It returns the current date and time as an HTML response, similar to the synchronous example but using async def.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport datetime\nfrom django.http import HttpResponse\n\n\nasync def current_datetime(request):\n    now = datetime.datetime.now()\n    html = '<html lang=\"en\"><body>It is now %s.</body></html>' % now\n    return HttpResponse(html)\n```\n\n----------------------------------------\n\nTITLE: Implementing ArticleListView using Django's ListView\nDESCRIPTION: Shows how to create a custom ListView for displaying a list of articles. It includes pagination and context customization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\nfrom django.views.generic.list import ListView\n\nfrom articles.models import Article\n\n\nclass ArticleListView(ListView):\n    model = Article\n    paginate_by = 100  # if pagination is desired\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"now\"] = timezone.now()\n        return context\n```\n\n----------------------------------------\n\nTITLE: Using commit=False with Django ModelForm save() Method\nDESCRIPTION: This example shows how to use the commit=False parameter with ModelForm's save() method to modify a model instance before saving it to the database. It also demonstrates handling many-to-many relationships in this scenario.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a form instance with POST data.\n>>> f = AuthorForm(request.POST)\n\n# Create, but don't save the new author instance.\n>>> new_author = f.save(commit=False)\n\n# Modify the author in some way.\n>>> new_author.some_field = \"some_value\"\n\n# Save the new instance.\n>>> new_author.save()\n\n# Now, save the many-to-many data for the form.\n>>> f.save_m2m()\n```\n\n----------------------------------------\n\nTITLE: Inclusion Filter 'in' and Its Usage Scenarios\nDESCRIPTION: Describes the 'in' lookup to filter records where a field's value matches any value in a provided list, tuple, or queryset. Shows example SQL translations and discusses the use of subqueries and performance considerations when handling nested queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_97\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. fieldlookup:: in\n\n``in``\n~~~~~~\n\nIn a given iterable; often a list, tuple, or queryset. It's not a common use\ncase, but strings (being iterables) are accepted.\n\nExamples::\n\n    Entry.objects.filter(id__in=[1, 3, 4])\n    Entry.objects.filter(headline__in=\"abc\")\n\nSQL equivalents:\n\n.. code-block:: sql\n\n    SELECT ... WHERE id IN (1, 3, 4);\n    SELECT ... WHERE headline IN ('a', 'b', 'c');\n\nYou can also use a queryset to dynamically evaluate the list of values\ninstead of providing a list of literal values::\n\n    inner_qs = Blog.objects.filter(name__contains=\"Chester\")\n    entries = Entry.objects.filter(blog__in=inner_qs)\n\nThis queryset will be evaluated as subselect statement:\n\n.. code-block:: sql\n\n    SELECT ... WHERE blog.id IN (SELECT id FROM ... WHERE NAME LIKE '%Chester%')\n\nIf you pass in a ``QuerySet`` resulting from ``values()`` or ``values_list()``\nas the value to an ``__in`` lookup, you need to ensure you are only extracting\none field in the result. For example, this will work (filtering on the blog\nnames)::\n\n    inner_qs = Blog.objects.filter(name__contains=\"Ch\" ).values(\"name\")\n    entries = Entry.objects.filter(blog__name__in=inner_qs)\n\nThis example will raise an exception, since the inner query is trying to\nextract two field values, where only one is expected::\n\n    # Bad code! Will raise a TypeError.\n    inner_qs = Blog.objects.filter(name__contains=\"Ch\").values(\"name\", \"id\")\n    entries = Entry.objects.filter(blog__name__in=inner_qs)\n\n.. _nested-queries-performance:\n\n.. admonition:: Performance considerations\n\n    Be cautious about using nested queries and understand your database\n    server's performance characteristics (if in doubt, benchmark!). Some\n    database backends, most notably MySQL, don't optimize nested queries very\n    well. It is more efficient, in those cases, to extract a list of values\n    and then pass that into the second query. That is, execute two queries\n    instead of one::\n\n        values = Blog.objects.filter(name__contains=\"Chester\").values_list(\"pk\", flat=True)\n        entries = Entry.objects.filter(blog__in=list(values))\n\n    Note the ``list()`` call around the Blog ``QuerySet`` to force execution of\n    the first query. Without it, a nested query would be executed, because\n    :ref:`querysets-are-lazy`.\n\n.. fieldlookup:: gt\n\n``gt``\n~~~~~~\n\nGreater than.\n\nExample::\n\n    Entry.objects.filter(id__gt=4)\n\nSQL equivalent:\n\n.. code-block:: sql\n\n    SELECT ... WHERE id > 4;\n\n.. fieldlookup:: gte\n\n``gte``\n~~~~~~~\n\nGreater than or equal to.\n\n.. fieldlookup:: lt\n\n``lt``\n~~~~~~\n\nLess than.\n\n.. fieldlookup:: lte\n\n``lte``\n~~~~~~~\n\nLess than or equal to.\n\n.. fieldlookup:: startswith\n\n``startswith``\n~~~~~~~~~~~~~~\n\nCase-sensitive starts-with.\n\nExample::\n\n    Entry.objects.filter(headline__startswith=\"Lennon\")\n\nSQL equivalent:\n\n.. code-block:: sql\n\n    SELECT ... WHERE headline LIKE 'Lennon%';\n\nSQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` acts\nlike ``istartswith`` for SQLite.\n\n.. fieldlookup:: istartswith\n\n``istartswith``\n~~~~~~~~~~~~~~~\n\nCase-insensitive starts-with.\n\nExample::\n\n    Entry.objects.filter(headline__istartswith=\"Lennon\")\n\nSQL equivalent:\n\n.. code-block:: sql\n\n    SELECT ... WHERE headline ILIKE 'Lennon%';\n\n.. admonition:: SQLite users\n\n    When using the SQLite backend and non-ASCII strings, bear in mind the\n    :ref:`database note <sqlite-string-matching>` about string comparisons.\n\n.. fieldlookup:: endswith\n\n``endswith``\n~~~~~~~~~~~~\n\nCase-sensitive ends-with.\n\nExample::\n\n    Entry.objects.filter(headline__endswith=\"Lennon\")\n\nSQL equivalent:\n\n.. code-block:: sql\n\n    SELECT ... WHERE headline LIKE '%Lennon';\n\n.. admonition:: SQLite users\n\n    SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith``\n    acts like ``iendswith`` for SQLite. Refer to the :ref:`database note\n    <sqlite-string-matching>` documentation for more.\n\n.. fieldlookup:: iendswith\n\n``iendswith``\n~~~~~~~~~~~~~\n\nCase-insensitive ends-with.\n\n```\n\n----------------------------------------\n\nTITLE: Caching Behavior in Django QuerySets\nDESCRIPTION: Illustrates the caching behavior of Django QuerySets, showing how multiple evaluations of the same QuerySet can lead to repeated database queries if not handled properly.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> print([e.headline for e in Entry.objects.all()])\n>>> print([e.pub_date for e in Entry.objects.all()])\n\n>>> queryset = Entry.objects.all()\n>>> print([p.headline for p in queryset])  # Evaluate the query set.\n>>> print([p.pub_date for p in queryset])  # Reuse the cache from the evaluation.\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Engines\nDESCRIPTION: Provides an example of how to configure Django template engines using the TEMPLATES setting in settings.py. This configuration sets up the DjangoTemplates backend with specific options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            # ... some options here ...\n        },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Objects with SQL NULL vs JSON null in Django JSONField\nDESCRIPTION: Demonstrates the difference between SQL NULL and JSON null in JSONField and how to query for each. SQL NULL is created with Python None, while JSON null is created with Value(None, JSONField()).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Max\", data=None)  # SQL NULL.\n<Dog: Max>\n>>> Dog.objects.create(name=\"Archie\", data=Value(None, JSONField()))  # JSON null.\n<Dog: Archie>\n>>> Dog.objects.filter(data=None)\n<QuerySet [<Dog: Archie>]>\n>>> Dog.objects.filter(data=Value(None, JSONField()))\n<QuerySet [<Dog: Archie>]>\n>>> Dog.objects.filter(data__isnull=True)\n<QuerySet [<Dog: Max>]>\n>>> Dog.objects.filter(data__isnull=False)\n<QuerySet [<Dog: Archie>]>\n```\n\n----------------------------------------\n\nTITLE: Using Model.refresh_from_db with a Custom QuerySet in Django (Python)\nDESCRIPTION: Example of calling `refresh_from_db` with the `from_queryset` argument in Django. This allows specifying a custom queryset, like `MyModel.active_objects.all()`, to be used for reloading the object's data. This is useful in scenarios like soft deletion where the default manager might not find the object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nobj.refresh_from_db(from_queryset=MyModel.active_objects.all())\n```\n\n----------------------------------------\n\nTITLE: Wrapping Streaming Content Generator in Django\nDESCRIPTION: Demonstrates how to properly wrap streaming content in a generator function without consuming the entire stream in memory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef wrap_streaming_content(content):\n    for chunk in content:\n        yield alter_content(chunk)\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model Choices using Enumeration Types (TextChoices)\nDESCRIPTION: Illustrates defining choices using Django's `models.TextChoices` enumeration type, providing a concise and structured way. Each enum member is defined with a value and a lazy translatable label. The enum class itself is passed to the `choices` argument of the model field. This method enhances readability and maintainability.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass Student(models.Model):\n    class YearInSchool(models.TextChoices):\n        FRESHMAN = \"FR\", _(\"Freshman\")\n        SOPHOMORE = \"SO\", _(\"Sophomore\")\n        JUNIOR = \"JR\", _(\"Junior\")\n        SENIOR = \"SR\", _(\"Senior\")\n        GRADUATE = \"GR\", _(\"Graduate\")\n\n    year_in_school = models.CharField(\n        max_length=2,\n        choices=YearInSchool,\n        default=YearInSchool.FRESHMAN,\n    )\n\n    def is_upperclass(self):\n        return self.year_in_school in {\n            self.YearInSchool.JUNIOR,\n            self.YearInSchool.SENIOR,\n        }\n```\n\n----------------------------------------\n\nTITLE: Using Vertical Radio Buttons for ForeignKey Fields - Django Admin in Python\nDESCRIPTION: Demonstrates how to set the radio_fields attribute of a Django ModelAdmin class so that a ForeignKey uses a vertical radio button group instead of the default select box. The radio_fields dict maps field names to layout style (admin.VERTICAL or admin.HORIZONTAL). Requires the target field to be a ForeignKey or have choices set. Useful for improved UX when selecting among small numbers of choices.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    radio_fields = {\"group\": admin.VERTICAL}\n```\n\n----------------------------------------\n\nTITLE: Single Object Retrieval Using get()\nDESCRIPTION: Shows how to retrieve a single object using the get() method with a primary key lookup.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> one_entry = Entry.objects.get(pk=1)\n```\n\n----------------------------------------\n\nTITLE: Using ComboField for Combined Validation in Django Forms (Python)\nDESCRIPTION: This Python console session demonstrates how to use `django.forms.ComboField` to apply multiple validation rules sequentially. It initializes a `ComboField` with a `CharField` (max length 20) and an `EmailField`. The `clean` method first successfully validates a valid email within the length limit, returning the cleaned string. It then shows a `ValidationError` being raised when the input string exceeds the `CharField`'s maximum length, even if it's a valid email format. Requires `django.forms`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_17\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import ComboField\n>>> f = ComboField(fields=[CharField(max_length=20), EmailField()])\n>>> f.clean(\"test@example.com\")\n'test@example.com'\n>>> f.clean(\"longemailaddress@example.com\")\nTraceback (most recent call last):\n...\nValidationError: ['Ensure this value has at most 20 characters (it has 28).']\n```\n\n----------------------------------------\n\nTITLE: Rendering Hidden and Visible Django Form Fields Separately\nDESCRIPTION: This snippet demonstrates how to loop over and render hidden and visible form fields separately in a Django template, including error handling for visible fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_14\n\nLANGUAGE: html+django\nCODE:\n```\n{# Include the hidden fields #}\n{% for hidden in form.hidden_fields %}\n{{ hidden }}\n{% endfor %}\n{# Include the visible fields #}\n{% for field in form.visible_fields %}\n    <div class=\"fieldWrapper\">\n        {{ field.errors }}\n        {{ field.label_tag }} {{ field }}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Objects with QuerySet in Django\nDESCRIPTION: This example shows how to retrieve all objects from a model using the all() method on the model's manager. It returns a QuerySet containing all Entry objects in the database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> all_entries = Entry.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Adding Database Table Comment in Django Model Meta (Python)\nDESCRIPTION: Defines a Django model `Answer` with a `db_table_comment` in its Meta class. This comment is added to the corresponding database table, providing documentation for direct database users.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    answer = models.TextField()\n\n    class Meta:\n        db_table_comment = \"Question answers\"\n```\n\n----------------------------------------\n\nTITLE: Limiting QuerySets with Slicing\nDESCRIPTION: Examples of using Python's slice syntax to limit QuerySet results, equivalent to SQL LIMIT and OFFSET.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.all()[:5]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.all()[5:10]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.all()[:10:2]\n```\n\n----------------------------------------\n\nTITLE: Improved Detail View Using get_object_or_404\nDESCRIPTION: Refactored detail view using Django's get_object_or_404 shortcut function for cleaner error handling.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_object_or_404, render\n\nfrom .models import Question\n\n\n# ...\ndef detail(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, \"polls/detail.html\", {\"question\": question})\n```\n\n----------------------------------------\n\nTITLE: Using SearchVector for Multi-Field Full Text Search in Django\nDESCRIPTION: Shows how to use SearchVector to search across multiple fields, including related models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchVector\n>>> Entry.objects.annotate(\n...     search=SearchVector(\"body_text\", \"blog__tagline\"),\n... ).filter(search=\"Cheese\")\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]\n```\n\n----------------------------------------\n\nTITLE: Setting Advanced Ordering with Query Expressions in Django Model Meta\nDESCRIPTION: Shows how to use Django query expressions (`F` objects) within the `ordering` attribute of a model's `Meta` class for more complex ordering logic, such as controlling the sorting of null values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F\n\nordering = [F(\"author\").asc(nulls_last=True)]\n```\n\n----------------------------------------\n\nTITLE: Processing Uploaded Files in Django\nDESCRIPTION: A function that processes an uploaded file by writing it to disk in chunks. Using chunks() method ensures that large files don't overwhelm system memory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef handle_uploaded_file(f):\n    with open(\"some/file/name.txt\", \"wb+\") as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Quarter - Django ORM (Python)\nDESCRIPTION: Shows how to retrieve date/datetime records by calendar quarter using '__quarter'. Takes an integer 1-4 representing the yearly quarter; outputs a QuerySet of records within the matching quarter. Useful for financial or seasonal reports. Handles time zone conversions per USE_TZ setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__quarter=2)\n```\n\n----------------------------------------\n\nTITLE: Adding a Database Comment to a Django Field\nDESCRIPTION: Demonstrates how to use the `db_comment` argument when defining a Django model field (`DateTimeField`) to add a comment directly to the corresponding database column. This is useful for database-level documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npub_date = models.DateTimeField(\n    db_comment=\"Date and time when the article was published\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Regex-Based Routes with re_path() in Django URLconf (Python)\nDESCRIPTION: This example uses re_path() to define URL patterns using regular expressions for more granular matching. It supports named and unnamed groups, and can include other URL modules. The route argument uses Python's re module syntax and often employs raw strings. Inputs are URLs matching the regex, and captured groups are passed as arguments to views. Requires Django and proper imports, and referenced views and included URLs must exist.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urls.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, re_path\n\nurlpatterns = [\n    re_path(r\"^index/$\", views.index, name=\"index\"),\n    re_path(r\"^bio/(?P<username>\\\\w+)/$\", views.bio, name=\"bio\"),\n    re_path(r\"^blog/\", include(\"blog.urls\")),\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic View in Django\nDESCRIPTION: Demonstrates how to create a simple View subclass that responds to GET requests with a 'Hello, World!' message.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass MyView(View):\n    def get(self, request, *args, **kwargs):\n        return HttpResponse(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationships in Django Models\nDESCRIPTION: Shows how to define and use one-to-one relationships in Django models. Demonstrates accessing related objects through the relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nclass EntryDetail(models.Model):\n    entry = models.OneToOneField(Entry, on_delete=models.CASCADE)\n    details = models.TextField()\n\n\ned = EntryDetail.objects.get(id=2)\ned.entry  # Returns the related Entry object.\n```\n\n----------------------------------------\n\nTITLE: Running Django Application with Gunicorn\nDESCRIPTION: This command starts the Gunicorn server process for a Django project. It runs one process with one thread, listening on 127.0.0.1:8000. The command should be executed from the same directory as the manage.py file to ensure the project is on the Python path.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/gunicorn.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngunicorn myproject.wsgi\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with path() in Django URLconf (Python)\nDESCRIPTION: This snippet demonstrates standard URL pattern definitions in a Django URLconf using the path() function. It shows how to capture URL parameters with or without explicit Python type converters and how to include other URL modules. Dependencies include Django 2.0+ (for path syntax), and all referenced views must be defined in your codebase. Inputs are URL paths, and outputs are matched views with URL parameters passed as arguments. The snippet requires proper imports and a valid Django project structure.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urls.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"index/\", views.index, name=\"main-view\"),\n    path(\"bio/<username>/\", views.bio, name=\"bio\"),\n    path(\"articles/<slug:title>/\", views.article, name=\"article-detail\"),\n    path(\"articles/<slug:title>/<int:section>/\", views.section, name=\"article-section\"),\n    path(\"blog/\", include(\"blog.urls\")),\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Returning Custom HTTP Status Codes in Django\nDESCRIPTION: Example showing how to return an HTTP response with a specific status code (201 Created) using the HttpResponse constructor's status parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\n\n\ndef my_view(request):\n    # ...\n\n    # Return a \"created\" (201) response code.\n    return HttpResponse(status=201)\n```\n\n----------------------------------------\n\nTITLE: Defining a SlugField in Django Models\nDESCRIPTION: Defines a Django model field for storing slugs (short labels containing letters, numbers, underscores, or hyphens), typically used in URLs. It behaves like a CharField with a default `max_length` of 50 and implies `db_index=True`. Can be automatically populated in the admin using `prepopulated_fields`. Uses `validate_slug` or `validate_unicode_slug` for validation. The `allow_unicode` parameter (default False) permits Unicode letters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n.. class:: SlugField(max_length=50, **options)\n```\n\n----------------------------------------\n\nTITLE: Rebasing and squashing commits\nDESCRIPTION: Combines multiple commits into a single, coherent commit to simplify the change history before submitting a pull request.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase -i HEAD~2\n```\n\n----------------------------------------\n\nTITLE: Extracting Date Components with Django ORM and Python\nDESCRIPTION: Demonstrates how to use the Extract function to pull specific date components such as the year from a model's datetime or date field. Dependencies include Django's Extract function and a model with datetime fields. The main parameters are the datetime or date field to extract from, the lookup_name indicating which part to extract, and optional timezone information. Output is an annotated integer field appended to the queryset, reflecting the extracted value (such as year, month, etc.).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> from django.db.models.functions import Extract\n>>> start = datetime(2015, 6, 15)\n>>> end = datetime(2015, 7, 2)\n>>> Experiment.objects.create(\n...     start_datetime=start, start_date=start.date(), end_datetime=end, end_date=end.date()\n... )\n>>> # Add the experiment start year as a field in the QuerySet.\n>>> experiment = Experiment.objects.annotate(\n```\n\n----------------------------------------\n\nTITLE: Efficiently Adding Multiple Objects to ManyToManyField\nDESCRIPTION: Demonstrates how to add multiple objects to a ManyToManyField in a single operation to reduce SQL queries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmy_band.members.add(me, my_friend)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_band.members.add(me)\nmy_band.members.add(my_friend)\n```\n\n----------------------------------------\n\nTITLE: Using ContentTypeManager's get_for_model Method in Python\nDESCRIPTION: This snippet shows how to use the get_for_model() method of ContentTypeManager to efficiently obtain the ContentType for a given model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.auth.models import User\n>>> ContentType.objects.get_for_model(User)\n<ContentType: user>\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model for Conditional Queries - Django ORM - Python\nDESCRIPTION: Defines the Client model with fields for name, registration date, and account type, offering ACCOUNT_TYPE_CHOICES using class constants. Serves as the primary model used for all conditional query examples in this documentation. Requires Django and should be placed in an app's models.py.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Client(models.Model):\n    REGULAR = \"R\"\n    GOLD = \"G\"\n    PLATINUM = \"P\"\n    ACCOUNT_TYPE_CHOICES = {\n        REGULAR: \"Regular\",\n        GOLD: \"Gold\",\n        PLATINUM: \"Platinum\",\n    }\n    name = models.CharField(max_length=50)\n    registered_on = models.DateField()\n    account_type = models.CharField(\n        max_length=1,\n        choices=ACCOUNT_TYPE_CHOICES,\n        default=REGULAR,\n    )\n```\n\n----------------------------------------\n\nTITLE: Advanced Django Cache Operations\nDESCRIPTION: Demonstrates advanced cache operations including add, get_or_set, get_many, set_many, delete, delete_many, and clear.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_32\n\nLANGUAGE: pycon\nCODE:\n```\n>>> cache.set(\"add_key\", \"Initial value\")\n>>> cache.add(\"add_key\", \"New value\")\n>>> cache.get(\"add_key\")\n'Initial value'\n\n>>> cache.get(\"my_new_key\")  # returns None\n>>> cache.get_or_set(\"my_new_key\", \"my new value\", 100)\n'my new value'\n\n>>> import datetime\n>>> cache.get_or_set(\"some-timestamp-key\", datetime.datetime.now)\ndatetime.datetime(2014, 12, 11, 0, 15, 49, 457920)\n\n>>> cache.set(\"a\", 1)\n>>> cache.set(\"b\", 2)\n>>> cache.set(\"c\", 3)\n>>> cache.get_many([\"a\", \"b\", \"c\"])\n{'a': 1, 'b': 2, 'c': 3}\n\n>>> cache.set_many({\"a\": 1, \"b\": 2, \"c\": 3})\n>>> cache.get_many([\"a\", \"b\", \"c\"])\n{'a': 1, 'b': 2, 'c': 3}\n\n>>> cache.delete(\"a\")\nTrue\n\n>>> cache.delete_many([\"a\", \"b\", \"c\"])\n\n>>> cache.clear()\n\n>>> cache.touch(\"a\", 10)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filters in Django\nDESCRIPTION: This code snippet shows how to register custom filters with Django's template library using both function and decorator syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nregister.filter(\"cut\", cut)\nregister.filter(\"lower\", lower)\n\n@register.filter(name=\"cut\")\ndef cut(value, arg):\n    return value.replace(arg, \"\")\n\n@register.filter\ndef lower(value):\n    return value.lower()\n```\n\n----------------------------------------\n\nTITLE: Creating Django TestCase Example - Python\nDESCRIPTION: Example demonstrating how to create a test case class inheriting from django.test.TestCase, showing model testing with setup and test methods for an Animal model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase\nfrom myapp.models import Animal\n\n\nclass AnimalTestCase(TestCase):\n    def setUp(self):\n        Animal.objects.create(name=\"lion\", sound=\"roar\")\n        Animal.objects.create(name=\"cat\", sound=\"meow\")\n\n    def test_animals_can_speak(self):\n        \"\"\"Animals that can speak are correctly identified\"\"\"\n        lion = Animal.objects.get(name=\"lion\")\n        cat = Animal.objects.get(name=\"cat\")\n        self.assertEqual(lion.speak(), 'The lion says \"roar\"')\n        self.assertEqual(cat.speak(), 'The cat says \"meow\"')\n```\n\n----------------------------------------\n\nTITLE: Serializing Django Form Errors as JSON in Python\nDESCRIPTION: Demonstrates serialization of form errors to JSON using the as_json() method. Returns error messages with error codes for each field. Suitable for AJAX or API responses; escaping is optional and must be handled as described if directly embedding in HTML.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> f.errors.as_json()\n{\"sender\": [{\"message\": \"Enter a valid email address.\", \"code\": \"invalid\"}],\n\"subject\": [{\"message\": \"This field is required.\", \"code\": \"required\"}]}\n```\n\n----------------------------------------\n\nTITLE: Defining Models Across Files in Django\nDESCRIPTION: This snippet shows two ways to define relationships between models in different apps: by importing the related model or using a lazy reference.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom geography.models import ZipCode\n\n\nclass Restaurant(models.Model):\n    # ...\n    zip_code = models.ForeignKey(\n        ZipCode,\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Restaurant(models.Model):\n    # ...\n    zip_code = models.ForeignKey(\n        \"geography.ZipCode\",\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Fetching the Latest Object with latest() Method in Django ORM\nDESCRIPTION: This code uses latest() to retrieve the most recent object in a model table based on one or multiple date fields, supporting an asynchronous version alatest(). It explains the use of ordering in case of multiple fields, reliance on get_latest_by model meta option, and behavior with null values. Dependencies include Django ORM and model configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_81\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.latest(\"pub_date\")\nEntry.objects.latest(\"pub_date\", \"-expire_date\")\n```\n\n----------------------------------------\n\nTITLE: Function-Based View Pagination\nDESCRIPTION: Demonstrates how to implement pagination in a function-based view using the Paginator class directly with a queryset.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.paginator import Paginator\nfrom django.shortcuts import render\n\nfrom myapp.models import Contact\n\n\ndef listing(request):\n    contact_list = Contact.objects.all()\n    paginator = Paginator(contact_list, 25)  # Show 25 contacts per page.\n\n    page_number = request.GET.get(\"page\")\n    page_obj = paginator.get_page(page_number)\n    return render(request, \"list.html\", {\"page_obj\": page_obj})\n```\n\n----------------------------------------\n\nTITLE: Translating Model Method Descriptions with @display Decorator\nDESCRIPTION: Shows how to use the @display decorator with a translatable description for a model method, which is useful for providing localized descriptions in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass MyThing(models.Model):\n    kind = models.ForeignKey(\n        ThingKind,\n        on_delete=models.CASCADE,\n        related_name=\"kinds\",\n        verbose_name=_(\"kind\"),\n    )\n\n    @admin.display(description=_(\"Is it a mouse?\"))\n    def is_mouse(self):\n        return self.kind.type == MOUSE_TYPE\n```\n\n----------------------------------------\n\nTITLE: Configuring FileField Upload Path in Django Model\nDESCRIPTION: Examples of setting the upload_to attribute for FileField. The first example uses a static path, the second uses a date-based path, and the third uses a callable function to determine the upload path dynamically based on the user ID.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Model):\n    # file will be uploaded to MEDIA_ROOT/uploads\n    upload = models.FileField(upload_to=\"uploads/\")\n    # or...\n    # file will be saved to MEDIA_ROOT/uploads/2015/01/30\n    upload = models.FileField(upload_to=\"uploads/%Y/%m/%d/\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef user_directory_path(instance, filename):\n    # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>\n    return \"user_{0}/{1}\".format(instance.user.id, filename)\n\n\nclass MyModel(models.Model):\n    upload = models.FileField(upload_to=user_directory_path)\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial Field Values for Django Forms at Instantiation in Python\nDESCRIPTION: Shows passing an 'initial' dictionary to a form constructor for setting default field values shown in unbound forms. Inputs are initial values as a dictionary; output is a Form instance with pre-populated fields for user convenience. Only specified fields receive initial values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(initial={\"subject\": \"Hi there!\"})\n```\n\n----------------------------------------\n\nTITLE: Modifying Session Data in Django Views\nDESCRIPTION: This snippet illustrates different ways to modify session data in Django views, including setting, deleting, and updating nested dictionary values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Session is modified.\nrequest.session[\"foo\"] = \"bar\"\n\n# Session is modified.\ndel request.session[\"foo\"]\n\n# Session is modified.\nrequest.session[\"foo\"] = {}\n\n# Gotcha: Session is NOT modified, because this alters\n# request.session['foo'] instead of request.session.\nrequest.session[\"foo\"][\"bar\"] = \"baz\"\n\nrequest.session.modified = True\n```\n\n----------------------------------------\n\nTITLE: Copying Django Model Instances with Inheritance\nDESCRIPTION: Demonstrates how to copy a Django model instance that uses inheritance by setting both pk and id to None in addition to the _state.adding flag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nclass ThemeBlog(Blog):\n    theme = models.CharField(max_length=200)\n\n\ndjango_blog = ThemeBlog(name=\"Django\", tagline=\"Django is easy\", theme=\"python\")\ndjango_blog.save()  # django_blog.pk == 3\n\ndjango_blog.pk = None\ndjango_blog.id = None\ndjango_blog._state.adding = True\ndjango_blog.save()  # django_blog.pk == 4\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models with ForeignKey Relationships - Python\nDESCRIPTION: Defines two Django model classes, Reporter and Article, demonstrating a many-to-one relationship via ForeignKey. Reporter includes standard string and email attributes, and Article links to Reporter with proper cascading on delete. The __str__ methods provide custom string representations, and Article is ordered by headline. Prerequisites: Django must be installed and a database configured; these classes should reside in models.py. Inputs are the model attributes, and outputs are model instances with respective relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_one.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Reporter(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    email = models.EmailField()\n\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name}\"\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateField()\n    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.headline\n\n    class Meta:\n        ordering = [\"headline\"]\n\n```\n\n----------------------------------------\n\nTITLE: Overriding a Model Record by Saving with Primary Key - Django ORM - Python\nDESCRIPTION: This snippet demonstrates how saving a Django model instance with an explicit primary key value will override the corresponding record in the database. It is useful primarily for bulk operations where primary-key collisions are not expected. Dependencies include a defined Blog model and a correctly configured Django project. Input parameters: id, name, and tagline. The output is an updated database row for the specified primary key. Potential constraint: if the primary key value already exists, the existing row will be overwritten.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nb4 = Blog(id=3, name=\"Not Cheddar\", tagline=\"Anything but cheese.\")\nb4.save()  # Overrides the previous blog with ID=3!\n```\n\n----------------------------------------\n\nTITLE: Querying Related Objects in Django ORM\nDESCRIPTION: Shows three equivalent ways to filter querysets using related objects in Django, demonstrating how to query using object instances, instance IDs, or direct ID values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(blog=b)  # Query using object instance\nEntry.objects.filter(blog=b.id)  # Query using id from instance\nEntry.objects.filter(blog=5)  # Query using id directly\n```\n\n----------------------------------------\n\nTITLE: Using URL Template Tag for Reverse URL Lookup in Django Templates\nDESCRIPTION: This snippet demonstrates how to use the url template tag in Django templates to perform reverse URL lookups. It shows both static and dynamic usage with template variables.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n<a href=\"{% url 'news-year-archive' 2012 %}\">2012 Archive</a>\n{# Or with the year in a template context variable: #}\n<ul>\n{% for yearvar in year_list %}\n<li><a href=\"{% url 'news-year-archive' yearvar %}\">{{ yearvar }} Archive</a></li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating InlineFormSet with inlineformset_factory (Django, Python)\nDESCRIPTION: The inlineformset_factory function returns an InlineFormSet class for handling forms related to a parent/child model relationship. It delegates its implementation to modelformset_factory with defaults suited for inline forms (BaseInlineFormSet, can_delete=True, extra=3) and requires specification of the parent model, the related model, and optionally fk_name for cases with multiple foreign keys. Parameters allow similar customization as the above factories. Inputs are the parent and child models and form options; output is an InlineFormSet class for managing related objects. Depends on django.forms.models.BaseInlineFormSet.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/models.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)\n```\n\n----------------------------------------\n\nTITLE: Setting and Removing HttpResponse Headers in Python\nDESCRIPTION: Shows different methods for setting and removing header fields in an HttpResponse object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> response = HttpResponse()\n>>> response.headers[\"Age\"] = 120\n>>> del response.headers[\"Age\"]\n\n>>> response = HttpResponse()\n>>> response[\"Age\"] = 120\n>>> del response[\"Age\"]\n\n>>> response = HttpResponse(headers={\"Age\": 120})\n```\n\n----------------------------------------\n\nTITLE: Creating Django ContentFile Object from String in Python\nDESCRIPTION: Demonstrates creating a `django.core.files.base.ContentFile` instance directly from a string. `ContentFile` inherits from `File` and is useful for treating string content as a file, suitable for saving to a `FileField` via `FieldFile.save()` without needing an actual file on the filesystem.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.base import ContentFile\n\nmyfile = ContentFile(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Using QuerySet Iterator with Custom Chunk Size in Django\nDESCRIPTION: This code demonstrates how to use the QuerySet iterator method with a custom chunk size to control the number of rows fetched at a time when streaming large result sets from the database.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nBook.objects.iterator(chunk_size=100)\n```\n\n----------------------------------------\n\nTITLE: Comparing POST Data with Initial Values in Django Forms - Python\nDESCRIPTION: Shows how a form's has_changed() function compares submitted POST data to the form's initial data, returning True if any values have changed. This is typically used to detect modifications on form submission. The main input is request.POST with optional initial data. Output is a boolean.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(request.POST, initial=data)\\n>>> f.has_changed()\n```\n\n----------------------------------------\n\nTITLE: Django Session Login Implementation\nDESCRIPTION: Basic implementation of a login system using Django sessions to store member ID after successful authentication.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef login(request):\n    m = Member.objects.get(username=request.POST[\"username\"])\n    if m.check_password(request.POST[\"password\"]):\n        request.session[\"member_id\"] = m.id\n        return HttpResponse(\"You're logged in.\")\n    else:\n        return HttpResponse(\"Your username and password didn't match.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Field Instances via Django _meta (Python Interactive)\nDESCRIPTION: Illustrates usage of _meta.get_fields() to fetch a tuple of all fields associated with a Django model class, optionally including hidden fields. The include_parents and include_hidden parameters control the breadth of fields included (fields from parent classes or hidden/internal fields). The output is a tuple of various field and relationship instances. Prerequisites: Django and an appropriate model. Useful for code that needs to dynamically explore all fields in models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.auth.models import User\n>>> User._meta.get_fields()\n(<ManyToOneRel: admin.logentry>,\n <django.db.models.fields.AutoField: id>,\n <django.db.models.fields.CharField: password>,\n <django.db.models.fields.DateTimeField: last_login>,\n <django.db.models.fields.BooleanField: is_superuser>,\n <django.db.models.fields.CharField: username>,\n <django.db.models.fields.CharField: first_name>,\n <django.db.models.fields.CharField: last_name>,\n <django.db.models.fields.EmailField: email>,\n <django.db.models.fields.BooleanField: is_staff>,\n <django.db.models.fields.BooleanField: is_active>,\n <django.db.models.fields.DateTimeField: date_joined>,\n <django.db.models.fields.related.ManyToManyField: groups>,\n <django.db.models.fields.related.ManyToManyField: user_permissions>)\n```\n\nLANGUAGE: pycon\nCODE:\n```\n# Also include hidden fields.\n>>> User._meta.get_fields(include_hidden=True)\n(<ManyToOneRel: auth.user_groups>,\n <ManyToOneRel: auth.user_user_permissions>,\n <ManyToOneRel: admin.logentry>,\n <django.db.models.fields.AutoField: id>,\n <django.db.models.fields.CharField: password>,\n <django.db.models.fields.DateTimeField: last_login>,\n <django.db.models.fields.BooleanField: is_superuser>,\n <django.db.models.fields.CharField: username>,\n <django.db.models.fields.CharField: first_name>,\n <django.db.models.fields.CharField: last_name>,\n <django.db.models.fields.EmailField: email>,\n <django.db.models.fields.BooleanField: is_staff>,\n <django.db.models.fields.BooleanField: is_active>,\n <django.db.models.fields.DateTimeField: date_joined>,\n <django.db.models.fields.related.ManyToManyField: groups>,\n <django.db.models.fields.related.ManyToManyField: user_permissions>)\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch with to_attr for Custom Attribute Assignment\nDESCRIPTION: Shows how to assign prefetched results to custom attributes using to_attr. This allows prefetching the same relation multiple times with different querysets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n>>> vegetarian_pizzas = Pizza.objects.filter(vegetarian=True)\n>>> Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas\", to_attr=\"menu\"),\n...     Prefetch(\"pizzas\", queryset=vegetarian_pizzas, to_attr=\"vegetarian_menu\"),\n... )\n```\n\n----------------------------------------\n\nTITLE: FormView for Handling Multiple File Uploads\nDESCRIPTION: A Class-Based View implementation that handles multiple file uploads. It overrides the form_valid method to process each uploaded file separately after form validation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.edit import FormView\nfrom .forms import FileFieldForm\n\n\nclass FileFieldFormView(FormView):\n    form_class = FileFieldForm\n    template_name = \"upload.html\"  # Replace with your template.\n    success_url = \"...\"  # Replace with your URL or reverse().\n\n    def form_valid(self, form):\n        files = form.cleaned_data[\"file_field\"]\n        for f in files:\n            ...  # Do something with each file.\n        return super().form_valid(form)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Model in Django\nDESCRIPTION: This snippet demonstrates how to create a custom user model in Django using email as the username field. It includes a custom user manager and overrides default permission methods.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.contrib.auth.models import BaseUserManager, AbstractBaseUser\n\n\nclass MyUserManager(BaseUserManager):\n    def create_user(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a User with the given email, date of\n        birth and password.\n        \"\"\"\n        if not email:\n            raise ValueError(\"Users must have an email address\")\n\n        user = self.model(\n            email=self.normalize_email(email),\n            date_of_birth=date_of_birth,\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a superuser with the given email, date of\n        birth and password.\n        \"\"\"\n        user = self.create_user(\n            email,\n            password=password,\n            date_of_birth=date_of_birth,\n        )\n        user.is_admin = True\n        user.save(using=self._db)\n        return user\n\n\nclass MyUser(AbstractBaseUser):\n    email = models.EmailField(\n        verbose_name=\"email address\",\n        max_length=255,\n        unique=True,\n    )\n    date_of_birth = models.DateField()\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n\n    objects = MyUserManager()\n\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS = [\"date_of_birth\"]\n\n    def __str__(self):\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        \"Does the user have a specific permission?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        \"Does the user have permissions to view the app `app_label`?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    @property\n    def is_staff(self):\n        \"Is the user a member of staff?\"\n        # Simplest possible answer: All admins are staff\n        return self.is_admin\n```\n\n----------------------------------------\n\nTITLE: Interpreting Failed Django Test Output\nDESCRIPTION: Illustrates the output of a failed Django test run. It provides detailed information about which test failed, including the file, line number, and assertion that caused the failure.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n======================================================================\nFAIL: test_was_published_recently_with_future_poll (polls.tests.PollMethodTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/dev/mysite/polls/tests.py\", line 16, in test_was_published_recently_with_future_poll\n    self.assertIs(future_poll.was_published_recently(), False)\nAssertionError: True is not False\n\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nFAILED (failures=1)\n```\n\n----------------------------------------\n\nTITLE: Field Lookups in Django Queries\nDESCRIPTION: Demonstrates various field lookup types including exact, contains, and case-insensitive matches.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(pub_date__lte=\"2006-01-01\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM blog_entry WHERE pub_date <= '2006-01-01';\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.get(headline__exact=\"Cat bites dog\")\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Blog.objects.get(name__iexact=\"beatles blog\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Manager subclass with custom QuerySet methods in Django\nDESCRIPTION: Shows how to use from_queryset() to create a Manager subclass that combines custom Manager methods with custom QuerySet methods. This allows for both custom Manager and QuerySet functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CustomManager(models.Manager):\n    def manager_only_method(self):\n        return\n\n\nclass CustomQuerySet(models.QuerySet):\n    def manager_and_queryset_method(self):\n        return\n\n\nclass MyModel(models.Model):\n    objects = CustomManager.from_queryset(CustomQuerySet)()\n```\n\n----------------------------------------\n\nTITLE: Associating Created Object with Request User in Django CreateView\nDESCRIPTION: Defines an `AuthorCreateView` that inherits from `LoginRequiredMixin` (to ensure the user is logged in) and `CreateView`. It specifies the `model` and editable `fields` (excluding `created_by`). The `form_valid` method is overridden to automatically set the `created_by` field of the form's instance (`form.instance`) to the currently logged-in user (`self.request.user`) before saving the object.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic.edit import CreateView\nfrom myapp.models import Author\n\n\nclass AuthorCreateView(LoginRequiredMixin, CreateView):\n    model = Author\n    fields = [\"name\"]\n\n    def form_valid(self, form):\n        form.instance.created_by = self.request.user\n        return super().form_valid(form)\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Natural Keys in Python\nDESCRIPTION: Demonstrates how to implement natural keys for Django models. It defines a custom manager with a get_by_natural_key method for more human-readable serialized data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass PersonManager(models.Manager):\n    def get_by_natural_key(self, first_name, last_name):\n        return self.get(first_name=first_name, last_name=last_name)\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    birthdate = models.DateField()\n\n    objects = PersonManager()\n\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(\n                fields=[\"first_name\", \"last_name\"],\n                name=\"unique_first_last_name\",\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Case-Insensitive Transform in Django ORM\nDESCRIPTION: Defines an UpperCase transformer that uses the SQL UPPER() function to perform case-insensitive comparisons. It sets bilateral=True to apply the transformation to both left and right-hand sides of the comparison.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Transform\n\n\nclass UpperCase(Transform):\n    lookup_name = \"upper\"\n    function = \"UPPER\"\n    bilateral = True\n```\n\n----------------------------------------\n\nTITLE: Django Polls App Directory Structure\nDESCRIPTION: Shows the directory structure created for the polls application.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npolls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance with Explicit AutoField in Django Models\nDESCRIPTION: This snippet demonstrates how to properly use multiple inheritance with Django models by defining an explicit AutoField as the primary key in the base models to avoid ID conflicts.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    article_id = models.AutoField(primary_key=True)\n    ...\n\n\nclass Book(models.Model):\n    book_id = models.AutoField(primary_key=True)\n    ...\n\n\nclass BookReview(Book, Article):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documentation of delete() and adelete() methods in Django ORM\nDESCRIPTION: Explains how delete() removes all objects in a QuerySet with cascading delete options based on ForeignKey constraints. adelete() is its asynchronous version. It returns a count and a dictionary of deletions per model. Also clarifies the transactional and signal considerations when deleting objects in bulk.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_89\n\nLANGUAGE: Python\nCODE:\n```\nPerforms an SQL delete query on all rows in the :class:`.QuerySet` and returns the number of objects deleted and a dictionary with the number of deletions per object type.\n```\n\n----------------------------------------\n\nTITLE: Handling Forms with a Function-Based View in Django\nDESCRIPTION: This snippet presents a typical Django function-based view for handling HTML forms. It checks if the request method is POST, processes the submitted form data using a `MyForm` class, validates it, redirects on success, and renders the form template with initial data for GET requests or validation errors.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\n\nfrom .forms import MyForm\n\n\ndef myview(request):\n    if request.method == \"POST\":\n        form = MyForm(request.POST)\n        if form.is_valid():\n            # <process form cleaned data>\n            return HttpResponseRedirect(\"/success/\")\n    else:\n        form = MyForm(initial={\"key\": \"value\"})\n\n    return render(request, \"form_template.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Limitations of prefetch_related with filtered queries in Django\nDESCRIPTION: Illustrates a limitation of prefetch_related() where subsequent filtered queries on related objects will ignore the prefetched cache and execute new database queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n>>> pizzas = Pizza.objects.prefetch_related(\"toppings\")\n>>> [list(pizza.toppings.filter(spicy=True)) for pizza in pizzas]\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Authentication View URLs\nDESCRIPTION: Shows how to reference specific authentication views in the URLconf and customize their behavior by passing arguments, such as changing the template name.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path(\n        \"change-password/\",\n        auth_views.PasswordChangeView.as_view(template_name=\"change-password.html\"),\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Annotated SQL Query Output Example for Custom Func - SQL\nDESCRIPTION: This SQL snippet represents the database query generated by Django ORM when annotating a field using the LOWER SQL function in an annotated queryset. It shows how the annotation produces a new result column ('field_lower') by applying LOWER(.) to the 'field' column in the 'db_table'. Serves as an illustration of the kind of SQL produced when using Func-based annotations in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ...\n    LOWER(\"db_table\".\"field\") as \"field_lower\"\n```\n\n----------------------------------------\n\nTITLE: Returning All Model Data as Dictionaries (All Fields) Python\nDESCRIPTION: Applies the values() method to a QuerySet to retrieve all data from the model's table as a list of dictionaries. Each dictionary contains a key and value for every field in the model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.values()\n```\n\n----------------------------------------\n\nTITLE: Author Total Pages Annotation\nDESCRIPTION: Demonstrates annotating authors with sum of pages across all their books using many-to-many relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nAuthor.objects.annotate(total_pages=Sum(\"book__pages\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Aware Datetime from String in Python\nDESCRIPTION: This code demonstrates how to create an aware datetime object from a string representation of a date and time, along with a specified time zone. It uses Django's dateparse utility and the zoneinfo module.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> import zoneinfo\n>>> from django.utils.dateparse import parse_datetime\n>>> naive = parse_datetime(\"2012-02-21 10:28:45\")\n>>> naive.replace(tzinfo=zoneinfo.ZoneInfo(\"Europe/Helsinki\"))\ndatetime.datetime(2012, 2, 21, 10, 28, 45, tzinfo=zoneinfo.ZoneInfo(key='Europe/Helsinki'))\n```\n\n----------------------------------------\n\nTITLE: Named URL Redirection in Django\nDESCRIPTION: Example of using redirect() with a named URL pattern and parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef my_view(request):\n    ...\n    return redirect(\"some-view-name\", foo=\"bar\")\n```\n\n----------------------------------------\n\nTITLE: Streaming Large CSV Files Using StreamingHttpResponse\nDESCRIPTION: An advanced example showing how to stream large CSV files using Django's StreamingHttpResponse. This implementation uses generators and a custom Echo class to efficiently handle large files without storing the entire content in memory.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport csv\n\nfrom django.http import StreamingHttpResponse\n\n\nclass Echo:\n    \"\"\"An object that implements just the write method of the file-like\n    interface.\n    \"\"\"\n\n    def write(self, value):\n        \"\"\"Write the value by returning it, instead of storing in a buffer.\"\"\"\n        return value\n\n\ndef some_streaming_csv_view(request):\n    \"\"\"A view that streams a large CSV file.\"\"\"\n    # Generate a sequence of rows. The range is based on the maximum number of\n    # rows that can be handled by a single sheet in most spreadsheet\n    # applications.\n    rows = ([\"Row {}\".format(idx), str(idx)] for idx in range(65536))\n    pseudo_buffer = Echo()\n    writer = csv.writer(pseudo_buffer)\n    return StreamingHttpResponse(\n        (writer.writerow(row) for row in rows),\n        content_type=\"text/csv\",\n        headers={\"Content-Disposition\": 'attachment; filename=\"somefilename.csv\"'},\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ModelForm from Article Model in Python\nDESCRIPTION: Example showing how to create a ModelForm subclass for an Article model, defining which fields to include, and demonstrating how to instantiate it for both new and existing model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms import ModelForm\n>>> from myapp.models import Article\n\n# Create the form class.\n>>> class ArticleForm(ModelForm):\n...     class Meta:\n...         model = Article\n...         fields = [\"pub_date\", \"headline\", \"content\", \"reporter\"]\n...\n\n# Creating a form to add an article.\n>>> form = ArticleForm()\n\n# Creating a form to change an existing article.\n>>> article = Article.objects.get(pk=1)\n>>> form = ArticleForm(instance=article)\n```\n\n----------------------------------------\n\nTITLE: Slicing String Fields using F() Expressions in Django\nDESCRIPTION: Demonstrates using Python's array-slicing syntax in conjunction with `F()` expressions to modify string-based, text-based, or ArrayFields directly in the database. This example replaces a writer's name with a substring of itself (characters from index 1 up to, but not including, index 5). Requires `refresh_from_db()` to see the change on the instance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> # Replacing a name with a substring of itself.\n>>> writer = Writers.objects.get(name=\"Priyansh\")\n>>> writer.name = F(\"name\")[1:5]\n>>> writer.save()\n>>> writer.refresh_from_db()\n>>> writer.name\n'riya'\n```\n\n----------------------------------------\n\nTITLE: Saving a File to a Django Model Instance\nDESCRIPTION: Shows how to save a new file to a Django model instance using the save() method of a File object. The method allows specifying the file name, content, and whether to save the model instance immediately.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/file.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> car.photo.save(\"myphoto.jpg\", content, save=False)\n>>> car.save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Index Tablespace in Django\nDESCRIPTION: Defines the default tablespace (empty string, meaning database default) for indexes on fields without a specific tablespace, applicable only if the database backend supports tablespaces.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_INDEX_TABLESPACE = ''\n```\n\n----------------------------------------\n\nTITLE: Handling Integrity Errors with Nested atomic Blocks in Django\nDESCRIPTION: An example showing how to handle database integrity errors using nested atomic blocks. This pattern allows for database operations to continue after catching specific integrity errors without rolling back the entire transaction.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import IntegrityError, transaction\n\n\n@transaction.atomic\ndef viewfunc(request):\n    create_parent()\n\n    try:\n        with transaction.atomic():\n            generate_relationships()\n    except IntegrityError:\n        handle_exception()\n\n    add_children()\n```\n\n----------------------------------------\n\nTITLE: Displaying Boolean Values with Icons in Django Admin\nDESCRIPTION: Example showing how to use the boolean parameter with admin.display decorator to display a method's boolean return value as a yes/no icon in the admin list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    birthday = models.DateField()\n\n    @admin.display(boolean=True)\n    def born_in_fifties(self):\n        return 1950 <= self.birthday.year < 1960\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"born_in_fifties\"]\n```\n\n----------------------------------------\n\nTITLE: Using AsyncClient to set HTTP headers in Django tests\nDESCRIPTION: Example showing how to initialize an AsyncClient and make a request with custom HTTP headers. This demonstrates the difference from the synchronous client where headers don't need the HTTP_ prefix.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_47\n\nLANGUAGE: pycon\nCODE:\n```\n>>> c = AsyncClient()\n>>> c.get(\"/customers/details/\", {\"name\": \"fred\", \"age\": 7}, ACCEPT=\"application/json\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Model Instance in Django Shell (pycon)\nDESCRIPTION: Shows the creation of an `Article` model instance in memory within a `pycon` session. The instance is not yet saved to the database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a1 = Article(headline=\"Django lets you build web apps easily\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in Django\nDESCRIPTION: The `DEBUG` setting is a boolean that controls debug mode. When `DEBUG` is `True`, detailed error pages are displayed, which can be useful for debugging.  It's crucial to set `DEBUG` to `False` in production. `DEBUG_PROPAGATE_EXCEPTIONS` skips Django's exception handling and allows exceptions to propagate, which can be useful for testing. Sensitive settings are excluded from the debug output as a security measure. `ALLOWED_HOSTS` is essential to configure if debug mode is off.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``False``\n\nA boolean that turns on/off debug mode.\n\nNever deploy a site into production with :setting:`DEBUG` turned on.\n\nOne of the main features of debug mode is the display of detailed error pages.\nIf your app raises an exception when :setting:`DEBUG` is ``True``, Django will\ndisplay a detailed traceback, including a lot of metadata about your\nenvironment, such as all the currently defined Django settings (from\n``settings.py``).\n\nAs a security measure, Django will *not* include settings that might be\nsensitive, such as :setting:`SECRET_KEY`. Specifically, it will exclude any\nsetting whose name includes any of the following:\n\n*   ``'API'``\n*   ``'KEY'``\n*   ``'PASS'``\n*   ``'SECRET'``\n*   ``'SIGNATURE'``\n*   ``'TOKEN'``\n\nNote that these are *partial* matches. ``'PASS'`` will also match PASSWORD,\njust as ``'TOKEN'`` will also match TOKENIZED and so on.\n\nStill, note that there are always going to be sections of your debug output\nthat are inappropriate for public consumption. File paths, configuration\noptions and the like all give attackers extra information about your server.\n\nIt is also important to remember that when running with :setting:`DEBUG`\nturned on, Django will remember every SQL query it executes. This is useful\nwhen you're debugging, but it'll rapidly consume memory on a production server.\n\nFinally, if :setting:`DEBUG` is ``False``, you also need to properly set\nthe :setting:`ALLOWED_HOSTS` setting. Failing to do so will result in all\nrequests being returned as \"Bad Request (400)\".\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``False``\n\nIf set to ``True``, Django's exception handling of view functions\n(:data:`~django.conf.urls.handler500`, or the debug view if :setting:`DEBUG`\nis ``True``) and logging of 500 responses (:ref:`django-request-logger`) is\nskipped and exceptions propagate upward.\n\nThis can be useful for some test setups. It shouldn't be used on a live site\nunless you want your web server (instead of Django) to generate \"Internal\nServer Error\" responses. In that case, make sure your server doesn't show the\nstack trace or other sensitive information in the response.\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern for a Custom View in Django\nDESCRIPTION: Shows how to set up a URL pattern for a custom View in Django's urls.py file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import MyView\n\nurlpatterns = [\n    path(\"mine/\", MyView.as_view(), name=\"my-view\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Combining Select Related and Prefetch Related for Optimization\nDESCRIPTION: Demonstrates combining select_related and prefetch_related to reduce query count. The best_pizza relationship is fetched with select_related while its toppings are prefetched, reducing the total to 2 queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n>>> Restaurant.objects.select_related(\"best_pizza\").prefetch_related(\"best_pizza__toppings\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Redis Cache Backend\nDESCRIPTION: Configuration for Redis cache backend selecting database 10 and setting a custom connection pool class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379\",\n        \"OPTIONS\": {\n            \"db\": \"10\",\n            \"pool_class\": \"redis.BlockingConnectionPool\",\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CACHES\nDESCRIPTION: This snippet shows how to configure the CACHES setting.  CACHES is a dictionary containing settings for all caches to be used with Django. This example shows a default configuration using the LocMemCache backend.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Asynchronous ORM Queries in Django using Python\nDESCRIPTION: Illustrates how to perform asynchronous database queries using Django's ORM. It shows iterating over a QuerySet asynchronously using `async for` on `Author.objects.filter()` and awaiting related object retrieval with the `a`-prefixed method `author.books.afirst()`. This pattern utilizes the async-native ORM methods introduced for improved performance in async contexts.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync for author in Author.objects.filter(name__startswith=\"A\"):\n    book = await author.books.afirst()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Admin Action in Python for Django\nDESCRIPTION: This code demonstrates how to create a custom admin action 'make_published' that updates the status of selected articles to 'published'. It uses the @admin.action decorator to provide a friendly description.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n@admin.action(description=\"Mark selected stories as published\")\ndef make_published(modeladmin, request, queryset):\n    queryset.update(status=\"p\")\n```\n\n----------------------------------------\n\nTITLE: Applying Login Required Decorator in Django Python\nDESCRIPTION: This code snippet shows how to apply the login_required decorator to a view in Django, which is mentioned as a mitigation for the security issue.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.auth.decorators.login_required\n```\n\n----------------------------------------\n\nTITLE: Overriding the save() Method in Django Models\nDESCRIPTION: Shows how to override the built-in save() method of a Django model to add custom behavior when saving an object. Includes examples of performing actions before and after saving, and preventing saving under certain conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n\n    def save(self, **kwargs):\n        do_something()\n        super().save(**kwargs)  # Call the \"real\" save() method.\n        do_something_else()\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n\n    def save(self, **kwargs):\n        if self.name == \"Yoko Ono's blog\":\n            return  # Yoko shall never have her own blog!\n        else:\n            super().save(**kwargs)  # Call the \"real\" save() method.\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Django Settings in Python\nDESCRIPTION: Example of setting basic Django configuration variables in a Python settings file. Demonstrates setting allowed hosts, debug mode, and default email.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = [\"www.example.com\"]\nDEBUG = False\nDEFAULT_FROM_EMAIL = \"webmaster@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Earliest Object with earliest() Method in Django ORM\nDESCRIPTION: This snippet details earliest() for fetching the earliest object based on specified fields, with an asynchronous variant aearliest(). It functions similarly to latest() but retrieves the first in order. Requires proper model ordering and get_latest_by configuration. Dependencies include Django ORM.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_82\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.earliest(\"pub_date\")\nEntry.objects.earliest(\"pub_date\", \"-expire_date\")\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Model Methods in Django ORM with Python\nDESCRIPTION: Provides examples of using asynchronous model and related manager methods within async functions in Python. It demonstrates creating a model instance and saving it asynchronously using `await book.asave()` and creating an instance directly with `await Book.objects.acreate()`. It also shows asynchronously setting related objects using `await book.tags.aset(tags)`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def make_book(*args, **kwargs):\n    book = Book(...)\n    await book.asave(using=\"secondary\")\n\n\nasync def make_book_with_tags(tags, *args, **kwargs):\n    book = await Book.objects.acreate(...)\n    await book.tags.aset(tags)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Custom Management Command in Django\nDESCRIPTION: Complete implementation of a custom 'closepoll' management command that handles positional arguments, accesses the database, and provides formatted output to the console.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management.base import BaseCommand, CommandError\nfrom polls.models import Question as Poll\n\n\nclass Command(BaseCommand):\n    help = \"Closes the specified poll for voting\"\n\n    def add_arguments(self, parser):\n        parser.add_argument(\"poll_ids\", nargs=\"+\", type=int)\n\n    def handle(self, *args, **options):\n        for poll_id in options[\"poll_ids\"]:\n            try:\n                poll = Poll.objects.get(pk=poll_id)\n            except Poll.DoesNotExist:\n                raise CommandError('Poll \"%s\" does not exist' % poll_id)\n\n            poll.opened = False\n            poll.save()\n\n            self.stdout.write(\n                self.style.SUCCESS('Successfully closed poll \"%s\"' % poll_id)\n            )\n```\n\n----------------------------------------\n\nTITLE: Piping Dumped Data Between Databases with django-admin - Shell\nDESCRIPTION: Shows how to use a shell pipeline to export data from one database and import it into another using dumpdata and loaddata commands chained with a pipe. The dumpdata command serializes data from a specified app and model in the 'test' database to JSON format, which is piped to loaddata for import into the 'prod' database. This technique depends on Django's manage.py or django-admin utilities and is effective for data migration or seeding environments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin dumpdata --format=json --database=test app_label.ModelName | django-admin loaddata --format=json --database=prod -\n```\n\n----------------------------------------\n\nTITLE: Conditional Update of Fields with Case Assignment - Django ORM - Python\nDESCRIPTION: Updates the account_type field for all Client objects based on registration date using a Case clause. Applies a batch update within the ORM, with When conditions for year/month-old clients and a default for recent ones. Assumes all Client instances are accessible and requires standard Django setup with models and query expressions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> a_month_ago = date.today() - timedelta(days=30)\n>>> a_year_ago = date.today() - timedelta(days=365)\n>>> # Update the account_type for each Client from the registration date\n>>> Client.objects.update(\n...     account_type=Case(\n...         When(registered_on__lte=a_year_ago, then=Value(Client.PLATINUM)),\n...         When(registered_on__lte=a_month_ago, then=Value(Client.GOLD)),\n...         default=Value(Client.REGULAR),\n...     ),\n... )\n>>> Client.objects.values_list(\"name\", \"account_type\")\n<QuerySet [(\"Jane Doe\", \"G\"), (\"James Smith\", \"R\"), (\"Jack Black\", \"P\")]> \n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Updates with F() Expressions in Django\nDESCRIPTION: Explains how to use `F()` expressions with the `update()` method on a QuerySet to efficiently modify field values for multiple objects directly in the database with a single SQL query. This example increments the `stories_filed` count for reporters named 'Tintin'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nreporter = Reporters.objects.filter(name=\"Tintin\")\nreporter.update(stories_filed=F(\"stories_filed\") + 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship in Django Model - Python\nDESCRIPTION: Shows how to declare a symmetric many-to-many relationship between models using Django's ManyToManyField. Models Pizza and Topping are defined; Pizza includes a ManyToManyField to Topping. This sets up bidirectional relationships and enables access to related-manager methods on both sides. Dependencies include Django's ORM. Inputs are the model and field declarations, outputs are models ready for further relationship manipulation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Topping(models.Model):\n    # ...\n    pass\n\nclass Pizza(models.Model):\n    toppings = models.ManyToManyField(Topping)\n```\n\n----------------------------------------\n\nTITLE: Commenting Out Code Blocks in Django Templates\nDESCRIPTION: Demonstrates the `{% comment %}` tag to ignore a section of the template during rendering. An optional note can be added within the opening tag for documentation purposes. Nested `comment` tags are not allowed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n<p>Rendered text with {{ pub_date|date:\"c\" }}</p>\n{% comment \"Optional note\" %}\n    <p>Commented out text with {{ create_date|date:\"c\" }}</p>\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: Raising a Fully Specified ValidationError in Django - Python\nDESCRIPTION: Provides a comprehensive example of raising a ValidationError in Django, combining translation, error code, and parameterized message for best reuse and override. This should be used inside custom field or form cleaning methods for robust and maintainable validation logic. It expects a value to substitute into the message, and requires Django forms and translation framework as dependencies.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nraise ValidationError(\n    _(\\\"Invalid value: %(value)s\\\"),\n    code=\\\"invalid\\\",\n    params={\\\"value\\\": \\\"42\\\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating and Displaying Errors in Django Template\nDESCRIPTION: This snippet uses a Django template for loop to iterate over an 'errors' collection and display each error as a list item. It's commonly used in form validation or error handling contexts to present user-friendly error messages.\nSOURCE: https://github.com/django/django/blob/main/django/forms/jinja2/django/forms/errors/list/text.txt#2025-04-23_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% for error in errors %}* {{ error }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Parsing 'as' Syntax in a Django Tag Compilation Function (Python)\nDESCRIPTION: This Python function `do_current_time` is a refactored compilation function for a Django template tag that supports the `as var_name` syntax. It splits the token contents and uses a regular expression (`re.search`) to parse the arguments, extracting the format string and the target variable name specified after 'as'. It includes error handling for incorrect arguments or invalid syntax and instantiates `CurrentTimeNode3` with the extracted format string and variable name.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\n\ndef do_current_time(parser, token):\n    # This version uses a regular expression to parse tag contents.\n    try:\n        # Splitting by None == splitting by spaces.\n        tag_name, arg = token.contents.split(None, 1)\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            \"%r tag requires arguments\" % token.contents.split()[0]\n        )\n    m = re.search(r\"(.*?) as (\\w+)\", arg)\n    if not m:\n        raise template.TemplateSyntaxError(\"%r tag had invalid arguments\" % tag_name)\n    format_string, var_name = m.groups()\n    if not (format_string[0] == format_string[-1] and format_string[0] in ('\"', \"'\")):\n        raise template.TemplateSyntaxError(\n            \"%r tag's argument should be in quotes\" % tag_name\n        )\n    return CurrentTimeNode3(format_string[1:-1], var_name)\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminEmailHandler with a Custom Email Backend in Django Settings\nDESCRIPTION: This snippet demonstrates how to override the default email backend used by `AdminEmailHandler`. By specifying the `email_backend` parameter within the handler's configuration in the `LOGGING` setting, a different backend (in this case, `django.core.mail.backends.filebased.EmailBackend`) can be used instead of the one defined in `settings.EMAIL_BACKEND`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"handlers\": {\n    \"mail_admins\": {\n        \"level\": \"ERROR\",\n        \"class\": \"django.utils.log.AdminEmailHandler\",\n        \"email_backend\": \"django.core.mail.backends.filebased.EmailBackend\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Default AdminSite in URLconf (Python)\nDESCRIPTION: This snippet demonstrates how to register the default Django AdminSite instance at the URL '/admin/' in the project's URLconf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\n# urls.py\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Django ListView for Publisher Model in Python\nDESCRIPTION: Implements `PublisherListView` by subclassing Django's generic `ListView`. It specifies the `Publisher` model using the `model` attribute, causing the view to automatically retrieve all `Publisher` objects and pass them to a template for rendering. This is a minimal example of using `ListView`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom django.views.generic import ListView\nfrom books.models import Publisher\n\n\nclass PublisherListView(ListView):\n    model = Publisher\n```\n\n----------------------------------------\n\nTITLE: Author Average Book Rating\nDESCRIPTION: Shows how to calculate average rating across all books by an author.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nAuthor.objects.aggregate(average_rating=Avg(\"book__rating\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Formset View in Django\nDESCRIPTION: A view function that handles both GET and POST requests for managing related Book objects for an Author using Django's inline formset. The function creates, validates, and saves the formset, then returns either a redirect on success or renders the form template.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndef manage_books(request, author_id):\n    author = Author.objects.get(pk=author_id)\n    BookInlineFormSet = inlineformset_factory(Author, Book, fields=[\"title\"])\n    if request.method == \"POST\":\n        formset = BookInlineFormSet(request.POST, request.FILES, instance=author)\n        if formset.is_valid():\n            formset.save()\n            # Do something. Should generally end with a redirect. For example:\n            return HttpResponseRedirect(author.get_absolute_url())\n    else:\n        formset = BookInlineFormSet(instance=author)\n    return render(request, \"manage_books.html\", {\"formset\": formset})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Django Model in Python\nDESCRIPTION: Defines a simple 'Book' model with 'title' and 'author' character fields. This model serves as the basis for subsequent examples demonstrating manager customization. By default, it will have an 'objects' manager providing access to all 'Book' instances (e.g., 'Book.objects.all()').\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Composite Primary Key using Django (Python)\nDESCRIPTION: Shows how to define a Django model with a composite primary key using CompositePrimaryKey on two fields, tenant_id and id. The snippet includes all necessary import statements, model declaration, and field definitions needed to create a TenantUser model. Prerequisites: Django >= 5.2 (for CompositePrimaryKey support). The class TenantUser resulting from this code allows Django to treat tenant_id and id together as the primary key.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass TenantUser(models.Model):\n    pk = models.CompositePrimaryKey(\"tenant_id\", \"id\")\n    tenant_id = models.IntegerField()\n    id = models.IntegerField()\n```\n\n----------------------------------------\n\nTITLE: Accessing Choice Display Values in Django\nDESCRIPTION: Python console example showing how to access and display the human-readable value for a choice field using the get_FOO_display() method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Person(name=\"Fred Flintstone\", shirt_size=\"L\")\n>>> p.save()\n>>> p.shirt_size\n'L'\n>>> p.get_shirt_size_display()\n'Large'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Storage Engine on MySQL Connect in Django using Python\nDESCRIPTION: This snippet shows how to configure Django's MySQL backend to set the default storage engine to INNODB for each new connection using the 'init_command' option under DATABASES. This should be added only during initial table creation and removed after, as it adds overhead to every new database connection. Requires Django with mysqlclient installed. Limitation: Unnecessary after initial table creation to avoid performance impact.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n\"OPTIONS\": {\n    \"init_command\": \"SET default_storage_engine=INNODB\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URLs for Static Files Development View (Python)\nDESCRIPTION: This Python snippet demonstrates how to add a URL pattern to your Django project's `urlpatterns` to enable the static files development view (`views.serve`). This view should only be used when `settings.DEBUG` is `True` as it's inefficient and insecure for production. It uses `re_path` to match URLs starting with the value of `settings.STATIC_URL` (assumed to be `/static/` here) and passes the remaining path to the `views.serve` function. Requires `django.conf.settings`, `django.contrib.staticfiles.views`, and `django.urls.re_path`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.contrib.staticfiles import views\nfrom django.urls import re_path\n\nif settings.DEBUG:\n    urlpatterns += [\n        re_path(r\"^static/(?P<path>.*)$\", views.serve),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Django Per-View Cache Decorator\nDESCRIPTION: Example of using the cache_page decorator to cache a view's response and configuring URL patterns with cached views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_page\n\n@cache_page(60 * 15)\ndef my_view(request): ...\n\nurlpatterns = [\n    path(\"foo/<int:code>/\", my_view),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Serialization Module in Django Settings (Python)\nDESCRIPTION: This snippet shows how to configure the SERIALIZATION_MODULES setting in Django to add a custom YAML serializer. It requires a valid import path to the YAML serializer module, allowing you to extend the framework's serialization capabilities. The setting is a dictionary mapping format names to import paths, enabling Django to use additional serialization formats beyond those built in. Input: none directly (just settings); Output: configuration enabling Django to use 'yaml' serialization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nSERIALIZATION_MODULES = {\"yaml\": \"path.to.yaml_serializer\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django TemplateView in URLconf (Python)\nDESCRIPTION: Shows how to add a Django TemplateView directly to the URL patterns by calling as_view() with overridden attributes. Requires Django installed and a valid template (about.html). Parameters include template_name, specifying which template to render. Expected input is an HTTP request to the '/about/' route; returns an HTTP response rendering the template. This approach is best for simple, mostly-unmodified generic views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    path(\"about/\", TemplateView.as_view(template_name=\"about.html\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Basic ListView Implementation in Django\nDESCRIPTION: Simple example showing how to create a ListView for displaying books ordered by publication date\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import ListView\nfrom books.models import Book\n\n\nclass BookListView(ListView):\n    queryset = Book.objects.order_by(\"-publication_date\")\n    context_object_name = \"book_list\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Signal Receiver in Django\nDESCRIPTION: Implementation of an asynchronous signal receiver function using async/await syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def my_callback(sender, **kwargs):\n    await asyncio.sleep(5)\n    print(\"Request finished!\")\n```\n\n----------------------------------------\n\nTITLE: Basic Savepoint Handling with Nested Atomic Blocks\nDESCRIPTION: Illustrates how savepoints work with on_commit callbacks in nested atomic blocks. Both callbacks will be executed when the outer transaction commits successfully.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nwith transaction.atomic():  # Outer atomic, start a new transaction\n    transaction.on_commit(foo)\n\n    with transaction.atomic():  # Inner atomic block, create a savepoint\n        transaction.on_commit(bar)\n\n# foo() and then bar() will be called when leaving the outermost block\n```\n\n----------------------------------------\n\nTITLE: Querying for Missing Keys with isnull in Django JSONField\nDESCRIPTION: Demonstrates how to query for objects where a specific key is missing in the JSONField data using the isnull lookup.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Shep\", data={\"breed\": \"collie\"})\n<Dog: Shep>\n>>> Dog.objects.filter(data__owner__isnull=True)\n<QuerySet [<Dog: Shep>]>\n```\n\n----------------------------------------\n\nTITLE: Simulating User Login with Django Test Client\nDESCRIPTION: Demonstrates how to simulate a user login using the Django test client's login method. The example shows logging in with a username and password for the standard ModelBackend authentication.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> c = Client()\n>>> c.login(username=\"fred\", password=\"secret\")\n\n# Now you can access a view that's only available to logged-in users.\n```\n\n----------------------------------------\n\nTITLE: Customizing id Attribute Format in Django Forms with auto_id=\"id_for_%s\" - Python\nDESCRIPTION: Shows how to customize the format of id attributes in rendered HTML by setting auto_id to a format string on form instantiation. Inputs are a ContactForm with auto_id set to 'id_for_%s'. Outputs are HTML blocks with id attributes constructed from the specified format. Facilitates integration into projects with specific id naming conventions that differ from Django's defaults.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(auto_id=\"id_for_%s\")\n>>> print(f)\n<div><label for=\"id_for_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div>\n<div><label for=\"id_for_message\">Message:</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div>\n<div><label for=\"id_for_sender\">Sender:</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div>\n<div><label for=\"id_for_cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div>\n```\n\n----------------------------------------\n\nTITLE: Assigning a Custom Form to ModelAdmin Python\nDESCRIPTION: This snippet shows how to assign a custom Django form (`MyArticleAdminForm`) to a `ModelAdmin` subclass (`ArticleAdmin`) using the `form` attribute. This allows for custom validation logic and form modifications specific to the admin interface for the associated model. The custom form must be a subclass of `django.forms.ModelForm`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleAdmin(admin.ModelAdmin):\n    form = MyArticleAdminForm\n```\n\n----------------------------------------\n\nTITLE: Custom Inline Management in Django ModelAdmin\nDESCRIPTION: Example of custom inline model management in Django admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    inlines = [MyInline, SomeOtherInline]\n```\n\n----------------------------------------\n\nTITLE: Creating a Manager from a custom QuerySet in Django\nDESCRIPTION: Shows how to create a custom Manager instance by using the as_manager() method on a custom QuerySet class. This technique allows QuerySet methods to be available at the Manager level.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    ...\n    people = PersonQuerySet.as_manager()\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom JSON Encoder for JsonResponse - Django - Python\nDESCRIPTION: This snippet shows how to customize the JSON encoding process for a JsonResponse in Django by specifying a custom encoder class via the 'encoder' parameter. Replace MyJSONEncoder with your own encoder subclassing DjangoJSONEncoder or another JSON encoder. All 'data' supplied will be serialized using the provided encoder. This is useful for complex serialization or supporting data types not handled by the default encoder.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> response = JsonResponse(data, encoder=MyJSONEncoder)\n```\n\n----------------------------------------\n\nTITLE: Customizing BoundField CSS Classes in Django Forms\nDESCRIPTION: This snippet demonstrates how to add a custom CSS class to all form fields by overriding the BoundField class. It includes a custom WrappedBoundField class and shows how to use it in a UserForm.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass WrappedBoundField(BoundField):\n    def css_classes(self, extra_classes=None):\n        parent_css_classes = super().css_classes(extra_classes)\n        return f\"field-class {parent_css_classes}\".strip()\n\n\nclass UserForm(forms.Form):\n    bound_field_class = WrappedBoundField\n    name = CharField()\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test Method\nDESCRIPTION: This command executes a specific test method from a test class in Django's test suite, in this case the test_lazy_objects method from the TranslationTests class in the i18n module.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ./runtests.py --settings=path.to.settings i18n.tests.TranslationTests.test_lazy_objects\n```\n\n----------------------------------------\n\nTITLE: Setting Widget Arguments and Choices in Django Forms Using Python\nDESCRIPTION: Illustrates how to supply additional arguments and choices to widgets, such as limiting date select options and populating multiple choice selections. Assumes Django; the code shows how to configure widgets via their arguments and the choices parameter. Inputs include constants for years and color choices; outputs are form fields configured with the respective widgets and attribute values. Limitations depend on available widget options.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\nBIRTH_YEAR_CHOICES = [\"1980\", \"1981\", \"1982\"]\nFAVORITE_COLORS_CHOICES = {\n    \"blue\": \"Blue\",\n    \"green\": \"Green\",\n    \"black\": \"Black\",\n}\n\n\nclass SimpleForm(forms.Form):\n    birth_year = forms.DateField(\n        widget=forms.SelectDateWidget(years=BIRTH_YEAR_CHOICES)\n    )\n    favorite_colors = forms.MultipleChoiceField(\n        required=False,\n        widget=forms.CheckboxSelectMultiple,\n        choices=FAVORITE_COLORS_CHOICES,\n    )\n```\n\n----------------------------------------\n\nTITLE: Using assertTemplateUsed as a Context Manager in Django Tests\nDESCRIPTION: Demonstrates how to use the assertTemplateUsed method as a context manager to verify template usage during rendering operations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertTemplateUsed(\"index.html\"):\n    render_to_string(\"index.html\")\nwith self.assertTemplateUsed(template_name=\"index.html\"):\n    render_to_string(\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Handling Savepoint Rollbacks with on_commit Callbacks\nDESCRIPTION: Demonstrates how on_commit callbacks are discarded when a savepoint is rolled back due to an exception, while callbacks registered in the outer transaction are still executed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nwith transaction.atomic():  # Outer atomic, start a new transaction\n    transaction.on_commit(foo)\n\n    try:\n        with transaction.atomic():  # Inner atomic block, create a savepoint\n            transaction.on_commit(bar)\n            raise SomeError()  # Raising an exception - abort the savepoint\n    except SomeError:\n        pass\n\n# foo() will be called, but not bar()\n```\n\n----------------------------------------\n\nTITLE: Calling Custom QuerySet Methods from the Manager in Python\nDESCRIPTION: Demonstrates how to make custom methods defined on a 'QuerySet' subclass ('PersonQuerySet') directly callable from the associated 'Manager' ('PersonManager'). This requires defining corresponding methods ('authors', 'editors') on the manager that retrieve the custom queryset using 'get_queryset()' and then call the respective methods on it. This avoids needing to chain '.get_queryset()' explicitly in user code (e.g., 'Person.people.authors()').\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PersonQuerySet(models.QuerySet):\n    def authors(self):\n        return self.filter(role=\"A\")\n\n    def editors(self):\n        return self.filter(role=\"E\")\n\n\nclass PersonManager(models.Manager):\n    def get_queryset(self):\n        return PersonQuerySet(self.model, using=self._db)\n\n    def authors(self):\n        return self.get_queryset().authors()\n\n    def editors(self):\n        return self.get_queryset().editors()\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    role = models.CharField(max_length=1, choices={\"A\": _(\"Author\"), \"E\": _(\"Editor\")})\n    people = PersonManager()\n```\n\n----------------------------------------\n\nTITLE: Selective Field Update Using update_fields Argument - Django ORM - Python\nDESCRIPTION: This example illustrates how to update only specific fields of a Django model instance by passing update_fields to save(). The update_fields parameter takes an iterable of field names, which restricts the database update to only those columns. Dependencies: a Product model and Django environment. Input: the field(s) to update (here, 'name'); output: the specified field is updated, while others remain unchanged. Using update_fields can improve efficiency and prevent unwanted side effects on other fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nproduct.name = \"Name changed again\"\nproduct.save(update_fields=[\"name\"])\n```\n\n----------------------------------------\n\nTITLE: Defining USE_I18N setting\nDESCRIPTION: This setting controls whether Django's translation system is enabled. Setting it to False disables translation for performance optimization. It is related to LANGUAGE_CODE and USE_TZ settings. The default value is True.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_60\n\n\n\n----------------------------------------\n\nTITLE: Querying Spatial Touch in Django ORM\nDESCRIPTION: Example of using the 'touches' lookup to find geometries that spatially touch a given geometry across different spatial database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__touches=geom)\n```\n\n----------------------------------------\n\nTITLE: Defining an IntegerField in Django Models\nDESCRIPTION: Defines a Django model field for storing integers. Values from -2147483648 to 2147483647 are safe across all Django-supported databases. Uses `MinValueValidator` and `MaxValueValidator` based on database limits. The default form widget is `NumberInput` unless `localize` is True, in which case it's `TextInput`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n.. class:: IntegerField(**options)\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Django Model Objects\nDESCRIPTION: This example demonstrates how to create and save a Blog object to the database. It instantiates a Blog object with name and tagline parameters, then calls the save() method to persist it in the database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from blog.models import Blog\n>>> b = Blog(name=\"Beatles Blog\", tagline=\"All the latest Beatles news.\")\n>>> b.save()\n```\n\n----------------------------------------\n\nTITLE: Handling Client Disconnects in Asynchronous Django Views using Python\nDESCRIPTION: Demonstrates how to catch the `asyncio.CancelledError` within an asynchronous Django view (`async def my_view`) using a try/except block. This handles cases where the client disconnects before the view finishes processing a potentially long-running request. Catching this specific error allows for necessary cleanup operations before re-raising the exception to ensure proper request termination.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def my_view(request):\n    try:\n        # Do some work\n        ...\n    except asyncio.CancelledError:\n        # Handle disconnect\n        raise\n```\n\n----------------------------------------\n\nTITLE: Dynamic Ordering in Django ModelAdmin\nDESCRIPTION: Implementation of get_ordering method to provide different ordering of list results based on the current user's permissions, showing more advanced ordering for superusers.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    def get_ordering(self, request):\n        if request.user.is_superuser:\n            return [\"name\", \"rank\"]\n        else:\n            return [\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Primary Key Field in Django\nDESCRIPTION: This setting, `DEFAULT_AUTO_FIELD`, specifies the default primary key field type for models that do not define a primary key. The current default is `django.db.models.AutoField`\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'``:class:`django.db.models.AutoField`\\ ``'``\n\nDefault primary key field type to use for models that don't have a field with\n:attr:`primary_key=True <django.db.models.Field.primary_key>`.\n```\n\n----------------------------------------\n\nTITLE: Using QuerySet.defer() to optimize data retrieval in Django ORM\nDESCRIPTION: This snippet illustrates how to defer loading of specific fields or related model fields in Django QuerySets using the defer() method. It supports deferring multiple fields, chaining calls, and deferring fields in related models with double-underscore notation. Passing None clears deferred fields, loading all data immediately. Dependencies include Django ORM, and the method helps optimize database queries by delaying loading expensive or large fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_57\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.defer(\"headline\", \"body\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.defer(\"body\").filter(rating=5).defer(\"headline\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nBlog.objects.select_related().defer(\"entry__headline\", \"entry__body\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nmy_queryset.defer(None)\n```\n\n----------------------------------------\n\nTITLE: Validating a Required Django CharField\nDESCRIPTION: Illustrates the default behavior of a Django `CharField` where `required` is True. Calling the `clean()` method with an empty value (like `\"\"` or `None`) raises a `ValidationError`. Non-empty values, including those converted from other types like integers or booleans, are accepted.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> f = forms.CharField()\n>>> f.clean(\"foo\")\n'foo'\n>>> f.clean(\"\")\nTraceback (most recent call last):\n...\nValidationError: ['This field is required.']\n>>> f.clean(None)\nTraceback (most recent call last):\n...\nValidationError: ['This field is required.']\n>>> f.clean(0)\n'0'\n>>> f.clean(True)\n'True'\n>>> f.clean(False)\n'False'\n```\n\n----------------------------------------\n\nTITLE: Has_key Lookup for JSONField in Django\nDESCRIPTION: Demonstrates the has_key lookup which returns objects where the given key exists in the top-level of the JSONField data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\n<Dog: Rufus>\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\n<Dog: Meg>\n>>> Dog.objects.filter(data__has_key=\"owner\")\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Handling in Django View\nDESCRIPTION: This Python code defines a view function to handle the voting process. It retrieves the selected choice, increments the vote count, and redirects to the results page.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\n\nfrom .models import Choice, Question\n\n\ndef vote(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = question.choice_set.get(pk=request.POST[\"choice\"])\n    except (KeyError, Choice.DoesNotExist):\n        # Redisplay the question voting form.\n        return render(\n            request,\n            \"polls/detail.html\",\n            {\n                \"question\": question,\n                \"error_message\": \"You didn't select a choice.\",\n            },\n        )\n    else:\n        selected_choice.votes = F(\"votes\") + 1\n        selected_choice.save()\n        # Always return an HttpResponseRedirect after successfully dealing\n        # with POST data. This prevents data from being posted twice if a\n        # user hits the Back button.\n        return HttpResponseRedirect(reverse(\"polls:results\", args=(question.id,)))\n```\n\n----------------------------------------\n\nTITLE: Rendering Formsets in Django Templates\nDESCRIPTION: Shows how to render formsets in Django templates, including the management form and individual form fields. It demonstrates both manual rendering and using the formset's built-in rendering methods.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">\n    {{ formset.management_form }}\n    <table>\n        {% for form in formset %}\n        {{ form }}\n        {% endfor %}\n    </table>\n</form>\n```\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">\n    <table>\n        {{ formset }}\n    </table>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Index Lookup in Django JSONField\nDESCRIPTION: Shows how to use numeric keys as array indices when querying JSONField data. This allows accessing elements within JSON arrays by their position.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.filter(data__owner__other_pets__0__name=\"Fishy\")\n<QuerySet [<Dog: Rufus>]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Validators in Django Settings\nDESCRIPTION: Example configuration for enabling password validation in Django using the AUTH_PASSWORD_VALIDATORS setting. This setup includes four built-in validators with custom options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n        \"OPTIONS\": {\n            \"min_length\": 9,\n        },\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Preserving Model State During Transaction Rollback in Django\nDESCRIPTION: Example showing how to manually revert a model's field values when a transaction rollback occurs. This prevents inconsistent model state since Django doesn't automatically revert field values on rollback.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import DatabaseError, transaction\n\nobj = MyModel(active=False)\nobj.active = True\ntry:\n    with transaction.atomic():\n        obj.save()\nexcept DatabaseError:\n    obj.active = False\n\nif obj.active:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Deconstruct Method for a Custom Django Field\nDESCRIPTION: This example shows how to implement the deconstruct method for a custom HandField that forces a specific max_length. The deconstruct method is used for serialization during model migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass HandField(models.Field):\n    def __init__(self, *args, **kwargs):\n        kwargs[\"max_length\"] = 104\n        super().__init__(*args, **kwargs)\n\n    def deconstruct(self):\n        name, path, args, kwargs = super().deconstruct()\n        del kwargs[\"max_length\"]\n        return name, path, args, kwargs\n```\n\n----------------------------------------\n\nTITLE: Annotating QuerySet with Calculated Fields using F Expressions - Django ORM - Python\nDESCRIPTION: This snippet demonstrates how to use Django's F expressions to annotate a queryset, adding a calculated field 'chairs_needed' by subtracting one model field from another (num_chairs from num_employees). F expressions allow referencing model fields directly in queries, enabling database-side computations for efficient and atomic updates. No external dependencies are required beyond Django's ORM, and num_employees and num_chairs must be numeric fields within the Company model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncompany = Company.objects.annotate(chairs_needed=F(\"num_employees\") - F(\"num_chairs\"))\n```\n\n----------------------------------------\n\nTITLE: Combining QuerySets with AND Operator in Django ORM (Python)\nDESCRIPTION: Demonstrates how to combine two Django QuerySets using the & (AND) operator, illustrating equivalence to chained filter calls. Both versions produce querysets filtered by x=1 and y=2. Requires a Django model named Model. Inputs are filter keyword arguments; output is a filtered QuerySet.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nModel.objects.filter(x=1) & Model.objects.filter(y=2)\nModel.objects.filter(x=1).filter(y=2)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Querying in Django ORM\nDESCRIPTION: Showcases how to perform asynchronous queries using Django's ORM, including asynchronous iteration and method calls.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nasync for entry in Authors.objects.filter(name__startswith=\"A\"):\n    ...\n\nuser = await User.objects.filter(username=my_input).afirst()\n```\n\n----------------------------------------\n\nTITLE: Setting Session Values in Django Views\nDESCRIPTION: Example of setting a value in the session dictionary using the __setitem__ method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrequest.session['fav_color'] = 'blue'\n```\n\n----------------------------------------\n\nTITLE: Using a Model Formset in a Django View\nDESCRIPTION: Shows how to use a model formset in a Django view to manage Author instances. It handles both GET and POST requests, creates the formset, and saves the data if valid.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import modelformset_factory\nfrom django.shortcuts import render\nfrom myapp.models import Author\n\n\ndef manage_authors(request):\n    AuthorFormSet = modelformset_factory(Author, fields=[\"name\", \"title\"])\n    if request.method == \"POST\":\n        formset = AuthorFormSet(request.POST, request.FILES)\n        if formset.is_valid():\n            formset.save()\n            # do something.\n    else:\n        formset = AuthorFormSet()\n    return render(request, \"manage_authors.html\", {\"formset\": formset})\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart HTML/Text Email with Django EmailMultiAlternatives\nDESCRIPTION: Shows how to send a multipart email containing both HTML and plain text versions using EmailMultiAlternatives. This approach allows rendering email content from templates and adding custom headers to the email.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.template.loader import render_to_string\n\n# First, render the plain text content.\ntext_content = render_to_string(\n    \"templates/emails/my_email.txt\",\n    context={\"my_variable\": 42},\n)\n\n# Secondly, render the HTML content.\nhtml_content = render_to_string(\n    \"templates/emails/my_email.html\",\n    context={\"my_variable\": 42},\n)\n\n# Then, create a multipart email instance.\nmsg = EmailMultiAlternatives(\n    \"Subject here\",\n    text_content,\n    \"from@example.com\",\n    [\"to@example.com\"],\n    headers={\"List-Unsubscribe\": \"<mailto:unsub@example.com>\"},\n)\n\n# Lastly, attach the HTML content to the email instance and send.\nmsg.attach_alternative(html_content, \"text/html\")\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Admin URLs (Python)\nDESCRIPTION: Standard configuration for a Django project's `urls.py` file to include the URLs for the built-in Django admin application. This makes the admin interface accessible at the specified path (e.g., `/admin/`). Requires `django.contrib.admin` and `django.urls.path`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring scrypt as the Default Hasher in Django (Python)\nDESCRIPTION: Illustrates configuring scrypt as the default password hasher by placing `ScryptPasswordHasher` first in the `PASSWORD_HASHERS` list in Django settings. This requires OpenSSL 1.1+ and makes scrypt the default for new passwords, while preserving verification for other listed hashers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Model Validation Example in Django\nDESCRIPTION: Shows how to perform basic model validation using full_clean() method and handle ValidationError exceptions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\n\ntry:\n    article.full_clean()\nexcept ValidationError as e:\n    # Do something based on the errors contained in e.message_dict.\n    # Display them to a user, or handle them programmatically.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining a ForeignKey with Custom Related Names in Django\nDESCRIPTION: This snippet demonstrates how to define a ForeignKey in Django with custom related_name and related_query_name attributes. It shows how these attributes affect reverse relationships and queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nuser = models.ForeignKey(\n    User,\n    on_delete=models.CASCADE,\n    related_name=\"+\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Tag(models.Model):\n    article = models.ForeignKey(\n        Article,\n        on_delete=models.CASCADE,\n        related_name=\"tags\",\n        related_query_name=\"tag\",\n    )\n    name = models.CharField(max_length=255)\n\n\n# That's now the name of the reverse filter\nArticle.objects.filter(tag__name=\"important\")\n```\n\n----------------------------------------\n\nTITLE: Defining YearMixin Class in Django\nDESCRIPTION: YearMixin class provides functionality for retrieving and parsing the year component of a date. It includes methods for getting the year format, retrieving the year value, and navigating to next and previous years.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass YearMixin:\n    year_format = '%Y'\n    year = None\n\n    def get_year_format(self):\n        return self.year_format\n\n    def get_year(self):\n        # Implementation details omitted\n        pass\n\n    def get_next_year(self, date):\n        # Implementation details omitted\n        pass\n\n    def get_previous_year(self, date):\n        # Implementation details omitted\n        pass\n```\n\n----------------------------------------\n\nTITLE: Overriding the default Manager in a child class in Django\nDESCRIPTION: Shows how to override the default Manager in a child class while still inheriting the Manager from the abstract base class. This allows customizing the default Manager behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass ChildB(AbstractBase):\n    # ...\n    # An explicit default manager.\n    default_manager = OtherManager()\n```\n\n----------------------------------------\n\nTITLE: Defining LOGIN_URL setting\nDESCRIPTION: This setting specifies the URL or named URL pattern for login redirects when using login_required, LoginRequiredMixin, AccessMixin, or LoginRequiredMiddleware. The default value is '/accounts/login/'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_72\n\n\n\n----------------------------------------\n\nTITLE: Limiting Maximum Instantiated Forms with absolute_max\nDESCRIPTION: Shows how to protect against memory exhaustion attacks by limiting the maximum number of forms that can be instantiated using the absolute_max parameter in formset_factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms.formsets import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> ArticleFormSet = formset_factory(ArticleForm, absolute_max=1500)\n>>> data = {\n...     \"form-TOTAL_FORMS\": \"1501\",\n...     \"form-INITIAL_FORMS\": \"0\",\n... }\n>>> formset = ArticleFormSet(data)\n>>> len(formset.forms)\n1500\n>>> formset.is_valid()\nFalse\n>>> formset.non_form_errors()\n['Please submit at most 1000 forms.']\n```\n\n----------------------------------------\n\nTITLE: Custom Formset Validation Implementation\nDESCRIPTION: Implements custom validation to ensure unique article titles in a formset\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\nfrom django.forms import BaseFormSet\nfrom django.forms import formset_factory\nfrom myapp.forms import ArticleForm\n\nclass BaseArticleFormSet(BaseFormSet):\n    def clean(self):\n        \"\"\"Checks that no two articles have the same title.\"\"\"\n        if any(self.errors):\n            # Don't bother validating the formset unless each form is valid on its own\n            return\n        titles = set()\n        for form in self.forms:\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            title = form.cleaned_data.get(\"title\")\n            if title in titles:\n                raise ValidationError(\"Articles in a set must have distinct titles.\")\n            titles.add(title)\n```\n\n----------------------------------------\n\nTITLE: Configuring STATICFILES_DIRS in Django Settings\nDESCRIPTION: Defines additional directories for Django to look for static files outside of app-specific static folders.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n    \"/var/www/static/\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using fixtures in Django TestCase\nDESCRIPTION: This snippet demonstrates how to use fixtures in a Django TestCase subclass to load initial data for tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.test import TestCase\nfrom myapp.models import Animal\n\n\nclass AnimalTestCase(TestCase):\n    fixtures = [\"mammals.json\", \"birds\"]\n\n    def setUp(self):\n        # Test definitions as before.\n        call_setup_methods()\n\n    def test_fluffy_animals(self):\n        # A test that uses the fixtures.\n        call_some_test_code()\n```\n\n----------------------------------------\n\nTITLE: Complete Form Field Loop with Help Text in Django\nDESCRIPTION: Demonstrates how to loop through form fields while including error messages, labels, and help text\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n{% for field in form %}\n    <div class=\"fieldWrapper\">\n        {{ field.errors }}\n        {{ field.label_tag }} {{ field }}\n        {% if field.help_text %}\n          <p class=\"help\" id=\"{{ field.auto_id }}_helptext\">\n            {{ field.help_text|safe }}\n          </p>\n        {% endif %}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing AppConfig Ready Method in Django\nDESCRIPTION: Example of implementing the ready() method in a Django AppConfig subclass to perform initialization tasks like registering signals. Shows how to import models and connect signals safely during application initialization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\nfrom django.db.models.signals import pre_save\n\n\nclass RockNRollConfig(AppConfig):\n    # ...\n\n    def ready(self):\n        # importing model classes\n        from .models import MyModel  # or...\n\n        MyModel = self.get_model(\"MyModel\")\n\n        # registering signals with the model's string label\n        pre_save.connect(receiver, sender=\"app_label.MyModel\")\n```\n\n----------------------------------------\n\nTITLE: Defining MonthMixin Class in Django\nDESCRIPTION: MonthMixin class provides functionality for retrieving and parsing the month component of a date. It includes methods for getting the month format, retrieving the month value, and navigating to next and previous months.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MonthMixin:\n    month_format = '%b'\n    month = None\n\n    def get_month_format(self):\n        return self.month_format\n\n    def get_month(self):\n        # Implementation details omitted\n        pass\n\n    def get_next_month(self, date):\n        # Implementation details omitted\n        pass\n\n    def get_previous_month(self, date):\n        # Implementation details omitted\n        pass\n```\n\n----------------------------------------\n\nTITLE: Filtering Blog Entries with Primary Key in Django ORM\nDESCRIPTION: Demonstrates how to filter blog entries using the primary key (pk) field in Django ORM. It shows equivalent ways to filter across joins using id and pk lookups.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> Blog.objects.filter(pk__gt=14)\n\n>>> Entry.objects.filter(blog__id__exact=3)  # Explicit form\n>>> Entry.objects.filter(blog__id=3)  # __exact is implied\n>>> Entry.objects.filter(blog__pk=3)  # __pk implies __id__exact\n```\n\n----------------------------------------\n\nTITLE: Multi-Database ModelAdmin Implementation\nDESCRIPTION: Custom ModelAdmin class that supports operations on multiple databases in Django's admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass MultiDBModelAdmin(admin.ModelAdmin):\n    using = \"other\"\n\n    def save_model(self, request, obj, form, change):\n        obj.save(using=self.using)\n\n    def delete_model(self, request, obj):\n        obj.delete(using=self.using)\n\n    def get_queryset(self, request):\n        return super().get_queryset(request).using(self.using)\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        return super().formfield_for_foreignkey(\n            db_field, request, using=self.using, **kwargs\n        )\n\n    def formfield_for_manytomany(self, db_field, request, **kwargs):\n        return super().formfield_for_manytomany(\n            db_field, request, using=self.using, **kwargs\n        )\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Objects in Django Models\nDESCRIPTION: Demonstrates how to access related objects through foreign key relationships in Django models. Shows forward and reverse access, as well as caching behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_60\n\nLANGUAGE: pycon\nCODE:\n```\n>>> e = Entry.objects.get(id=2)\n>>> e.blog  # Returns the related Blog object.\n\n>>> e = Entry.objects.get(id=2)\n>>> e.blog = some_blog\n>>> e.save()\n\n>>> e = Entry.objects.get(id=2)\n>>> e.blog = None\n>>> e.save()  # \"UPDATE blog_entry SET blog_id = NULL ...;\"\n\n>>> e = Entry.objects.get(id=2)\n>>> print(e.blog)  # Hits the database to retrieve the associated Blog.\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n\n>>> e = Entry.objects.select_related().get(id=2)\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n```\n\n----------------------------------------\n\nTITLE: Adding Related Objects with add() Method in Django ORM - Python\nDESCRIPTION: Illustrates the use of the add() method of RelatedManager to associate an existing related object with a parent in a one-to-many relationship. The example fetches Blog and Entry instances, then links Entry to Blog via b.entry_set.add(e). Assumes models and relationships as previously defined. Inputs are the fetched ORM instances; output is a database update associating the records. Requires Django models and a configured database backend.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> b = Blog.objects.get(id=1)\n>>> e = Entry.objects.get(id=234)\n>>> b.entry_set.add(e)  # Associates Entry e with Blog b.\n```\n\n----------------------------------------\n\nTITLE: Custom Intermediary Model for ManyToManyField in Django\nDESCRIPTION: This snippet demonstrates how to use a custom intermediary model for a many-to-many relationship in Django. It shows how to specify the through and through_fields attributes to handle complex relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n\n\nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(\n        Person,\n        through=\"Membership\",\n        through_fields=(\"group\", \"person\"),\n    )\n\n\nclass Membership(models.Model):\n    group = models.ForeignKey(Group, on_delete=models.CASCADE)\n    person = models.ForeignKey(Person, on_delete=models.CASCADE)\n    inviter = models.ForeignKey(\n        Person,\n        on_delete=models.CASCADE,\n        related_name=\"membership_invites\",\n    )\n    invite_reason = models.CharField(max_length=64)\n```\n\n----------------------------------------\n\nTITLE: Applying Lookups Directly in Django ORM Queries (Python)\nDESCRIPTION: Shows usage of custom lookups (like LessThan) as direct query expressions or annotations within Django ORM. Requires Django ORM, model definitions (e.g., Book, F), and the custom lookup class. Accepts a left-hand side expression and a right-hand side value. Output is a filtered QuerySet or annotated QuerySet.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/lookups.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBook.objects.filter(LessThan(F(\"word_count\"), 7500))\n```\n\nLANGUAGE: python\nCODE:\n```\nBook.objects.annotate(is_short_story=LessThan(F(\"word_count\"), 7500))\n```\n\n----------------------------------------\n\nTITLE: Creating GEOS Geometry Objects from Different Formats\nDESCRIPTION: Examples of creating GEOSGeometry objects using different input formats including WKT, HEX, WKB, and GeoJSON. Shows how to use the GEOSGeometry constructor with various spatial data formats.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.geos import GEOSGeometry\n>>> pnt = GEOSGeometry(\"POINT(5 23)\")  # WKT\n>>> pnt = GEOSGeometry(\"010100000000000000000014400000000000003740\")  # HEX\n>>> pnt = GEOSGeometry(\n...     memoryview(\n...         b\"\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14@\\x00\\x00\\x00\\x00\\x00\\x007@\"\n...     )\n... )  # WKB\n>>> pnt = GEOSGeometry(\n...     '{ \"type\": \"Point\", \"coordinates\": [ 5.000000, 23.000000 ] }'\n... )  # GeoJSON\n```\n\n----------------------------------------\n\nTITLE: Comparing View Functions in Django Test Client Response\nDESCRIPTION: Shows how to verify which view function served a response by using resolver_match.func. Includes examples for both function-based views and class-based views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# my_view here is a function based view.\nself.assertEqual(response.resolver_match.func, my_view)\n\n# Class-based views need to compare the view_class, as the\n# functions generated by as_view() won't be equal.\nself.assertIs(response.resolver_match.func.view_class, MyView)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Fixture Usage in Django TestCase Classes (Python)\nDESCRIPTION: Demonstrates specifying the 'fixtures' class attribute in a Django TestCase to load pre-defined database data during test execution. Requires Django (django.test) and a corresponding fixture file in the expected location. 'fixtures' should be a list of fixture names ('fixture-label'), leading to automatic loading into the test database at setup. Inputs: fixture file(s) referenced by label. Outputs: database state matches contents of fixtures for each test method. Designed for use within Django's test framework, and fixture data should be serialized appropriately.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyTestCase(TestCase):\n    fixtures = [\"fixture-label\"]\n```\n\n----------------------------------------\n\nTITLE: Defining DayMixin Class in Django\nDESCRIPTION: DayMixin class provides functionality for retrieving and parsing the day component of a date. It includes methods for getting the day format, retrieving the day value, and navigating to next and previous days.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass DayMixin:\n    day_format = '%d'\n    day = None\n\n    def get_day_format(self):\n        return self.day_format\n\n    def get_day(self):\n        # Implementation details omitted\n        pass\n\n    def get_next_day(self, date):\n        # Implementation details omitted\n        pass\n\n    def get_previous_day(self, date):\n        # Implementation details omitted\n        pass\n```\n\n----------------------------------------\n\nTITLE: Accessing Primary Key Fields via Django _meta.pk_fields (Python Interactive)\nDESCRIPTION: Demonstrates the retrieval of fields that make up the primary key of a Django model via the _meta.pk_fields attribute. Shows results for a model with a composite primary key (TenantUser) and a standard single-field primary key (User). Prerequisite: Django >= 5.2 and appropriate model definitions. Returns a list of Field instances corresponding to the primary key component fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> TenantUser._meta.pk_fields\n[\n    <django.db.models.fields.IntegerField: tenant_id>,\n    <django.db.models.fields.IntegerField: id>\n]\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> User._meta.pk_fields\n[<django.db.models.fields.AutoField: id>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PBKDF2 Hasher with Increased Iterations (Python)\nDESCRIPTION: Defines a custom Django password hasher by subclassing `PBKDF2PasswordHasher`. It overrides the `iterations` attribute, multiplying the default value by 100 to increase the work factor and enhance security against brute-force attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.hashers import PBKDF2PasswordHasher\n\n\nclass MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):\n    \"\"\"\n    A subclass of PBKDF2PasswordHasher that uses 100 times more iterations.\n    \"\"\"\n\n    iterations = PBKDF2PasswordHasher.iterations * 100\n```\n\n----------------------------------------\n\nTITLE: Defining Database Indexes in Django Model Meta\nDESCRIPTION: Provides an example of defining database indexes on a Django model using the `indexes` attribute within the `Meta` class. This involves creating instances of `models.Index` specifying the fields to be indexed and optionally a name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Customer(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n\n    class Meta:\n        indexes = [\n            models.Index(fields=[\"last_name\", \"first_name\"]),\n            models.Index(fields=[\"first_name\"], name=\"first_name_idx\"),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Australian Cities\nDESCRIPTION: Example demonstrating how to calculate distances between geographic points using the Distance function in Django GIS, specifically measuring distances from Hobart to other Australian cities.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.db.models.functions import Distance\n>>> pnt = AustraliaCity.objects.get(name=\"Hobart\").point\n>>> for city in AustraliaCity.objects.annotate(distance=Distance(\"point\", pnt)):\n...     print(city.name, city.distance)\n...\nWollongong 990071.220408 m\nShellharbour 972804.613941 m\nThirroul 1002334.36351 m\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthorCreateView using Django's CreateView\nDESCRIPTION: Example of implementing an AuthorCreateView class using Django's CreateView, specifying the model and fields to be used in the form.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.edit import CreateView\nfrom myapp.models import Author\n\n\nclass AuthorCreateView(CreateView):\n    model = Author\n    fields = [\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing AbsoluteValue Transformer in Django\nDESCRIPTION: Creates an AbsoluteValue transformer that applies the ABS() SQL function to a field. It registers the transformer with IntegerField, allowing it to be chained with other lookups.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Transform\n\n\nclass AbsoluteValue(Transform):\n    lookup_name = \"abs\"\n    function = \"ABS\"\n\nfrom django.db.models import IntegerField\n\nIntegerField.register_lookup(AbsoluteValue)\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Profile Data in Django\nDESCRIPTION: Demonstrates how to access data from a related profile model using Django's standard related model conventions. This example shows accessing an Employee's department through a User instance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> u = User.objects.get(username=\"fsmith\")\n>>> freds_department = u.employee.department\n```\n\n----------------------------------------\n\nTITLE: Removing Many-to-Many Relationships in Django\nDESCRIPTION: This snippet demonstrates how to remove many-to-many relationships using the remove() and clear() methods. It shows how these methods affect the intermediate model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> Membership.objects.create(\n...     person=ringo,\n...     group=beatles,\n...     date_joined=date(1968, 9, 4),\n...     invite_reason=\"You've been gone for a month and we miss you.\",\n... )\n>>> beatles.members.all()\n<QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>, <Person: Ringo Starr>]>\n>>> # This deletes both of the intermediate model instances for Ringo Starr\n>>> beatles.members.remove(ringo)\n>>> beatles.members.all()\n<QuerySet [<Person: Paul McCartney>]>\n\n>>> # Beatles have broken up\n>>> beatles.members.clear()\n>>> # Note that this deletes the intermediate model instances\n>>> Membership.objects.all()\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Defining and Querying JSONField on Django Models - Python\nDESCRIPTION: This snippet demonstrates using the new JSONField model field introduced in Django 3.1, applicable to all supported database backends. It shows how to declare a model with a JSONField, create records, and filter data using advanced JSON lookups. Dependencies include Django 3.1+ and a compatible database backend. Inputs include complex JSON data, and outputs are model instances. Migration is needed if transitioning from the older contrib.postgres JSONField.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass ContactInfo(models.Model):\n    data = models.JSONField()\n\n\nContactInfo.objects.create(\n    data={\n        \"name\": \"John\",\n        \"cities\": [\"London\", \"Cambridge\"],\n        \"pets\": {\"dogs\": [\"Rufus\", \"Meg\"]},\n    }\n)\nContactInfo.objects.filter(\n    data__name=\"John\",\n    data__pets__has_key=\"dogs\",\n    data__cities__contains=\"London\",\n).delete()\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization with ngettext in Django\nDESCRIPTION: Demonstrates how to implement pluralization using Django's ngettext function. It handles singular and plural forms based on a count variable.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.utils.translation import ngettext\n\n\ndef hello_world(request, count):\n    page = ngettext(\n        \"there is %(count)d object\",\n        \"there are %(count)d objects\",\n        count,\n    ) % {\n        \"count\": count,\n    }\n    return HttpResponse(page)\n```\n\n----------------------------------------\n\nTITLE: Applying distinct() on Multiple Related Fields (PostgreSQL) Python\nDESCRIPTION: Applies DISTINCT ON (fields) for multiple related fields on PostgreSQL. Requires order_by() to list these fields first in the same order. Filters results to the first row for each unique combination of the specified related fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.order_by(\"blog__name\", \"mod_date\").distinct(\"blog__name\", \"mod_date\")\n```\n\n----------------------------------------\n\nTITLE: Clearing All M2M Relationships via Reverse Manager (pycon)\nDESCRIPTION: Demonstrates using the `clear()` method on the reverse relationship manager (`p2.article_set`) to remove all relationships associated with `p2` from the `Article` side. It verifies that `p2` no longer has any related articles.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_25\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p2.article_set.clear()\n>>> p2.article_set.all()\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Documentation of update() and aupdate() methods in Django ORM\nDESCRIPTION: Details the update() method for performing bulk SQL updates on a QuerySet, modifying specified fields instantly. aupdate() is its asynchronous version. Notes restrictions such as updates only on main table fields, inability to update related models directly, and the effect on signal emissions. Usage examples include batch updating fields across multiple records.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\nPerforms an SQL update query for the specified fields, and returns the number of rows matched\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Related Objects in Django ORM\nDESCRIPTION: Demonstrates how to access a related object through a one-to-one relationship using Django's ORM. Shows both retrieval and assignment of related objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\ne = Entry.objects.get(id=2)\ne.entrydetail  # returns the related EntryDetail object\n\ne.entrydetail = ed\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Model with Relative ForeignKey - Django Models - Python\nDESCRIPTION: Illustrates an abstract model (AbstractCar) with a ForeignKey defined as a string literal to 'Manufacturer'. This enables flexible reuse in other Django apps. The class Meta sets abstract=True, making the model not directly mapped to a database table. Requires django.db.models. Inputs are string model references; this is intended for inheritance by concrete models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\n\\n\\nclass AbstractCar(models.Model):\\n    manufacturer = models.ForeignKey(\"Manufacturer\", on_delete=models.CASCADE)\\n\\n    class Meta:\\n        abstract = True\n```\n\n----------------------------------------\n\nTITLE: Decorator-based ModelAdmin Registration\nDESCRIPTION: Shows how to use the @register decorator to register models with ModelAdmin classes, including an example with multiple models and custom admin site.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom .models import Author, Editor, Reader\nfrom myproject.admin_site import custom_admin_site\n\n\n@admin.register(Author, Reader, Editor, site=custom_admin_site)\nclass PersonAdmin(admin.ModelAdmin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Case Expression for Conditional Annotations - Django ORM - Python\nDESCRIPTION: Illustrates using the Case expression to implement if/elif/else style branching in queryset annotations. Demonstrates assigning discounts based on account type, where Case receives multiple When objects for each account type and provides a default value. Requires Django, imports of Case, When, and Value, and shows inputs/outputs for annotated fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>>\n>>> from datetime import date, timedelta\n>>> from django.db.models import Case, Value, When\n>>> Client.objects.create(\n...     name=\"Jane Doe\",\n...     account_type=Client.REGULAR,\n...     registered_on=date.today() - timedelta(days=36),\n... )\n>>> Client.objects.create(\n...     name=\"James Smith\",\n...     account_type=Client.GOLD,\n...     registered_on=date.today() - timedelta(days=5),\n... )\n>>> Client.objects.create(\n...     name=\"Jack Black\",\n...     account_type=Client.PLATINUM,\n...     registered_on=date.today() - timedelta(days=10 * 365),\n... )\n>>> # Get the discount for each Client based on the account type\n>>> Client.objects.annotate(\n...     discount=Case(\n...         When(account_type=Client.GOLD, then=Value(\"5%\")),\n...         When(account_type=Client.PLATINUM, then=Value(\"10%\")),\n...         default=Value(\"0%\"),\n...     ),\n... ).values_list(\"name\", \"discount\")\n<QuerySet [(\"Jane Doe\", \"0%\"), (\"James Smith\", \"5%\"), (\"Jack Black\", \"10%\")]> \n```\n\n----------------------------------------\n\nTITLE: Querying Related Objects in Django Models\nDESCRIPTION: Shows how to query related objects using the reverse relation manager in Django models. Demonstrates filtering, counting, and overriding the default manager name.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_61\n\nLANGUAGE: pycon\nCODE:\n```\n>>> b = Blog.objects.get(id=1)\n>>> b.entry_set.all()  # Returns all Entry objects related to Blog.\n\n# b.entry_set is a Manager that returns QuerySets.\n>>> b.entry_set.filter(headline__contains=\"Lennon\")\n>>> b.entry_set.count()\n\n>>> b = Blog.objects.get(id=1)\n>>> b.entries.all()  # Returns all Entry objects related to Blog.\n\n# b.entries is a Manager that returns ``QuerySet`` instances.\n>>> b.entries.filter(headline__contains=\"Lennon\")\n>>> b.entries.count()\n```\n\n----------------------------------------\n\nTITLE: Supporting HTTP HEAD and GET Methods with Django ListView (Python)\nDESCRIPTION: Demonstrates a subclass of ListView (BookListView) supporting both GET (list objects) and custom HEAD method that returns the Last-Modified header based on the latest Book. Requires Django and a Book model with publication_date. GET returns a rendered template list; HEAD returns an empty response with HTTP-compliant date header showing the latest update. Extends default ListView to handle API-like requirements efficiently.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom books.views import BookListView\n\nurlpatterns = [\n    path(\"books/\", BookListView.as_view()),\n]\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views.generic import ListView\nfrom books.models import Book\n\n\nclass BookListView(ListView):\n    model = Book\n\n    def head(self, *args, **kwargs):\n        last_book = self.get_queryset().latest(\"publication_date\")\n        response = HttpResponse(\n            # RFC 1123 date format.\n            headers={\n                \"Last-Modified\": last_book.publication_date.strftime(\n                    \"%a, %d %b %Y %H:%M:%S GMT\"\n                )\n            },\n        )\n        return response\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Label and id Generation in Django Forms with auto_id=True - Python\nDESCRIPTION: Demonstrates how setting auto_id=True on a Django form instance includes label elements and uses field names for id attributes in the rendered HTML. Inputs are a form created with auto_id=True. Outputs are HTML markup with proper association between label for attributes and field ids. This maintains accessibility and usability for assistive devices, following Django's default rendering conventions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(auto_id=True)\n>>> print(f)\n<div><label for=\"subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"subject\"></div>\n<div><label for=\"message\">Message:</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"message\"></textarea></div>\n<div><label for=\"sender\">Sender:</label><input type=\"email\" name=\"sender\" required id=\"sender\"></div>\n<div><label for=\"cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"cc_myself\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring raw_id_fields in TabularInline\nDESCRIPTION: Example showing how to use raw_id_fields in an InlineModelAdmin to replace the default select dropdown with an Input widget for a ForeignKey or ManyToManyField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nclass BookInline(admin.TabularInline):\n    model = Book\n    raw_id_fields = [\"pages\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Django UpdateView Class\nDESCRIPTION: Defines the UpdateView class in Django, used for updating existing objects. It includes a list of attributes and methods specific to this view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclass UpdateView():\n    # Attributes and methods listed in the documentation\n```\n\n----------------------------------------\n\nTITLE: Filtering by Minute - SQL Equivalent\nDESCRIPTION: Maps Django's minute field filtering to SQL using EXTRACT; compares the minute part of time/datetime fields to provided values. Takes integer inputs representing minute values (0-59). Outputs all records matching the requested minute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_119\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE EXTRACT('minute' FROM timestamp) = '29';\nSELECT ... WHERE EXTRACT('minute' FROM time) = '46';\n```\n\n----------------------------------------\n\nTITLE: YearArchiveView URL Configuration\nDESCRIPTION: URL pattern configuration for the yearly article archive view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import ArticleYearArchiveView\n\nurlpatterns = [\n    path(\"<int:year>/\", ArticleYearArchiveView.as_view(), name=\"article_year_archive\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Django URL Pattern Configuration\nDESCRIPTION: Example URLconf showing basic URL pattern mapping using path() with both static and dynamic URL parameters. Demonstrates how to capture integer and slug values from URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"articles/2003/\", views.special_case_2003),\n    path(\"articles/<int:year>/\", views.year_archive),\n    path(\"articles/<int:year>/<int:month>/\", views.month_archive),\n    path(\"articles/<int:year>/<int:month>/<slug:slug>/\", views.article_detail),\n]\n```\n\n----------------------------------------\n\nTITLE: Database-agnostic Field Implementation in Django\nDESCRIPTION: Example of a MyDateField that handles database differences by checking the connection vendor and returning the appropriate column type for each supported database.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyDateField(models.Field):\n    def db_type(self, connection):\n        if connection.vendor == \"mysql\":\n            return \"datetime\"\n        else:\n            return \"timestamp\"\n```\n\n----------------------------------------\n\nTITLE: Declaratively Specifying Field Validators in Django ModelForm\nDESCRIPTION: This snippet demonstrates how to declaratively specify validators for a field in a Django ModelForm. It defines the 'slug' field with a custom validator function.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import CharField, ModelForm\nfrom myapp.models import Article\n\n\nclass ArticleForm(ModelForm):\n    slug = CharField(validators=[validate_slug])\n\n    class Meta:\n        model = Article\n        fields = [\"pub_date\", \"headline\", \"content\", \"reporter\", \"slug\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token-Based Authentication Backend in Django (Python)\nDESCRIPTION: This code provides a template for creating a Django authentication backend that authenticates users based on a token. It subclasses BaseBackend and implements the authenticate method with a token parameter, allowing credentials to be checked via an alternative to username/password. The backend is intended to be added to AUTHENTICATION_BACKENDS, and it integrates with Django's authentication subsystem. Dependencies include Django's authentication system.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.backends import BaseBackend\n\n\nclass MyBackend(BaseBackend):\n    def authenticate(self, request, token=None):\n        # Check the token and return a user.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining Forms with Custom Widgets Using Django Forms in Python\nDESCRIPTION: Demonstrates how to specify a different widget for a form field by passing a widget class as an argument in the field constructor. Requires Django; dependencies include django.forms. The code defines a form with three fields, substituting the default widget for one field with Textarea, showing how to customize input element rendering. Inputs are form field specifications; outputs are a Django form instance using the designated widgets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass CommentForm(forms.Form):\n    name = forms.CharField()\n    url = forms.URLField()\n    comment = forms.CharField(widget=forms.Textarea)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Transform with Django Field Types\nDESCRIPTION: Demonstrates how to register the UpperCase transform with CharField and TextField, allowing case-insensitive queries on these field types.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import CharField, TextField\n\nCharField.register_lookup(UpperCase)\nTextField.register_lookup(UpperCase)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Widget Directly with Custom Attributes Using Django Forms in Python\nDESCRIPTION: Exemplifies creating a widget instance with specific HTML attributes and rendering it with values, showing direct usage of the widget rendering API. Requires Django (forms.TextInput) and demonstrates how to instantiate a widget and render an HTML input tag. Inputs are widget attributes and rendering parameters; output is a string of HTML representing a form field rendered by the widget. Shows conditional boolean attribute rendering in output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\n>>> name = forms.TextInput(attrs={\"size\": 10, \"title\": \"Your name\"})\n>>> name.render(\"name\", \"A name\")\n'<input title=\"Your name\" type=\"text\" name=\"name\" value=\"A name\" size=\"10\">'\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relationships in Django Models\nDESCRIPTION: Example of defining a many-to-many relationship between Pizza and Topping models using the ManyToManyField. The relationship is defined on the Pizza model, following the convention of placing it on the model that will be edited in forms.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Topping(models.Model):\n    # ...\n    pass\n\n\nclass Pizza(models.Model):\n    # ...\n    toppings = models.ManyToManyField(Topping)\n```\n\n----------------------------------------\n\nTITLE: Applying FilteredRelation for Conditional JOINs in Django ORM with Python\nDESCRIPTION: Illustrates the use of FilteredRelation() to create conditional JOIN annotations in Django querysets. By providing a relation name and a Q condition, it allows annotating filtered related objects for further queryset filtering. The example finds restaurants having vegetarian pizzas with 'mozzarella' in their name, improving query performance over filtering directly in the WHERE clause. Limitations include incompatibility with QuerySet.only(), prefetch_related(), and generic foreign keys inherited from parents.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_127\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import FilteredRelation, Q\n>>> Restaurant.objects.annotate(\n...     pizzas_vegetarian=FilteredRelation(\n...         \"pizzas\",\n...         condition=Q(pizzas__vegetarian=True),\n...     ),\n... ).filter(pizzas_vegetarian__name__icontains=\"mozzarella\")\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Restaurant.objects.filter(\n...     pizzas__vegetarian=True,\n...     pizzas__name__icontains=\"mozzarella\",\n... )\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text Email with Django send_mail()\nDESCRIPTION: Demonstrates how to send a basic plain text email using Django's send_mail() function. This function provides a straightforward way to send emails by specifying subject, message content, sender, and recipient list.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\n\nsend_mail(\n    \"Subject here\",\n    \"Here is the message.\",\n    \"from@example.com\",\n    [\"to@example.com\"],\n    fail_silently=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model with Proper Field Naming Conventions\nDESCRIPTION: Shows the correct way to name fields in a Django model using lowercase and underscores. This naming convention aligns with Python's PEP 8 style guide and Django's conventions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    first_name = models.CharField(max_length=20)\n    last_name = models.CharField(max_length=40)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Validation in a ModelForm Python\nDESCRIPTION: This Python code defines a custom `ModelForm` (`MyArticleAdminForm`) intended for use with a Django `ModelAdmin`. It includes a custom validation method `clean_name` for the 'name' field. This method contains the logic to validate the data entered for the 'name' field and must return the cleaned data. This allows for validation beyond the standard model field validators.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nclass MyArticleAdminForm(forms.ModelForm):\n    def clean_name(self):\n        # do something that validates your data\n        return self.cleaned_data[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Validating Bound Django Forms and Retrieving Errors in Python\nDESCRIPTION: Demonstrates calling is_valid() on a bound Django form to perform data validation, showing results both for valid and invalid input. Also illustrates accessing the 'errors' attribute to view validation error messages. Input is a data dictionary; output is a Boolean for validity and a dictionary of error lists keyed by field name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\n...     \"subject\": \"hello\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"foo@example.com\",\n...     \"cc_myself\": True,\n... }\n>>> f = ContactForm(data)\n>>> f.is_valid()\nTrue\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\n...     \"subject\": \"\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"invalid email address\",\n...     \"cc_myself\": True,\n... }\n>>> f = ContactForm(data)\n>>> f.is_valid()\nFalse\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> f.errors\n{'sender': ['Enter a valid email address.'], 'subject': ['This field is required.']}\n```\n\n----------------------------------------\n\nTITLE: Class-Based View with CSRF-Protected File Upload\nDESCRIPTION: Implementation of a file upload view using class-based approach with CSRF protection and proper upload handler modification.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.decorators import method_decorator\nfrom django.views import View\nfrom django.views.decorators.csrf import csrf_exempt, csrf_protect\n\n\n@method_decorator(csrf_exempt, name=\"dispatch\")\nclass UploadFileView(View):\n    def setup(self, request, *args, **kwargs):\n        request.upload_handlers.insert(0, ProgressBarUploadHandler(request))\n        super().setup(request, *args, **kwargs)\n\n    @method_decorator(csrf_protect)\n    def post(self, request, *args, **kwargs):\n        # Process request\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Field Validation with Field-Specific Errors in Django Python\nDESCRIPTION: This snippet demonstrates an alternative approach to cross-field validation within the form's `clean()` method. Instead of raising a general `ValidationError`, it uses `self.add_error()` to associate the error message with specific fields (`cc_myself` and `subject`) if the validation condition (cc_myself is True but 'help' is not in the subject) fails. This results in error messages being displayed next to the respective fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ContactForm(forms.Form):\n    # Everything as before.\n    ...\n\n    def clean(self):\n        cleaned_data = super().clean()\n        cc_myself = cleaned_data.get(\"cc_myself\")\n        subject = cleaned_data.get(\"subject\")\n\n        if cc_myself and subject and \"help\" not in subject:\n            msg = \"Must put 'help' in subject when cc'ing yourself.\"\n            self.add_error(\"cc_myself\", msg)\n            self.add_error(\"subject\", msg)\n```\n\n----------------------------------------\n\nTITLE: Manual Field Rendering Template with Django\nDESCRIPTION: Shows detailed manual rendering of form fields with error handling and custom labels\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n{{ form.non_field_errors }}\n<div class=\"fieldWrapper\">\n    {{ form.subject.errors }}\n    <label for=\"{{ form.subject.id_for_label }}\">Email subject:</label>\n    {{ form.subject }}\n</div>\n<div class=\"fieldWrapper\">\n    {{ form.message.errors }}\n    <label for=\"{{ form.message.id_for_label }}\">Your message:</label>\n    {{ form.message }}\n</div>\n<div class=\"fieldWrapper\">\n    {{ form.sender.errors }}\n    <label for=\"{{ form.sender.id_for_label }}\">Your email address:</label>\n    {{ form.sender }}\n</div>\n<div class=\"fieldWrapper\">\n    {{ form.cc_myself.errors }}\n    <label for=\"{{ form.cc_myself.id_for_label }}\">CC yourself?</label>\n    {{ form.cc_myself }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including URLconf Module with Namespace in Django's Root URLconf\nDESCRIPTION: Demonstrates how to include a URLconf module in the root URLconf, which will use the app_name defined in the included module as the namespace.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"polls/\", include(\"polls.urls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Person Model in Django\nDESCRIPTION: A simple example model that defines a Person with first_name and last_name fields. This demonstrates the basic structure of a Django model that maps to a database table.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n```\n\n----------------------------------------\n\nTITLE: Including Subtemplates Dynamically - HTML+Django Template - html+django\nDESCRIPTION: Shows how to use the 'include' tag for template composition, with examples including constant and variable template names, passing extra context, and context isolation using 'only'. Pre-requisites include defined subtemplate files and available context variables (e.g., 'person', 'greeting'). Inputs are the template paths and context; output is rendered HTML with included content, demonstrating flexible partial rendering strategies.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_22\n\nLANGUAGE: html+django\nCODE:\n```\n{% include \"foo/bar.html\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% include template_name %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% include \"name_snippet.html\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{{ greeting }}, {{ person|default:\"friend\" }}!\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% include \"name_snippet.html\" with greeting=\"Hi\" only %}\n```\n\n----------------------------------------\n\nTITLE: Using LoginRequiredMixin in Django Class-Based Views\nDESCRIPTION: Shows how to use the LoginRequiredMixin with class-based views to require authentication. This mixin provides similar functionality to the login_required decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.mixins import LoginRequiredMixin\n\nclass MyView(LoginRequiredMixin, View):\n    login_url = \"/login/\"\n    redirect_field_name = \"redirect_to\"\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Context to a Django DetailView in Python\nDESCRIPTION: Shows how to add additional data to the template context for a generic `DetailView`. The `PublisherDetailView` subclasses `DetailView`, specifies the `Publisher` model, and overrides the `get_context_data` method. Inside the method, it first calls the superclass's `get_context_data` to retrieve the default context (containing the specific publisher object), then adds a new key `\"book_list\"` containing a QuerySet of all `Book` objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import DetailView\nfrom books.models import Book, Publisher\n\n\nclass PublisherDetailView(DetailView):\n    model = Publisher\n\n    def get_context_data(self, **kwargs):\n        # Call the base implementation first to get a context\n        context = super().get_context_data(**kwargs)\n        # Add in a QuerySet of all the books\n        context[\"book_list\"] = Book.objects.all()\n        return context\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Method to Django Model\nDESCRIPTION: This Python code demonstrates how to add a custom method to a Django model. The was_published_recently method checks if a question was published within the last day, using Python's datetime module and Django's timezone utilities.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom django.db import models\nfrom django.utils import timezone\n\n\nclass Question(models.Model):\n    # ...\n    def was_published_recently(self):\n        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Aggregates (Avg, Max, Min) in One Call (pycon)\nDESCRIPTION: Shows how to compute multiple aggregate values (average, maximum, and minimum price) in a single `aggregate()` call. This is achieved by passing multiple aggregation functions (`Avg`, `Max`, `Min` imported from `django.db.models`) as separate arguments to `aggregate()`. The result is a single dictionary containing all computed values, keyed by automatically generated names.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Avg, Max, Min\n>>> Book.objects.aggregate(Avg(\"price\"), Max(\"price\"), Min(\"price\"))\n{'price__avg': 34.35, 'price__max': Decimal('81.20'), 'price__min': Decimal('12.99')}\n```\n\n----------------------------------------\n\nTITLE: Basic QuerySet Filtering in Django\nDESCRIPTION: Demonstrates lazy evaluation of QuerySets by stacking multiple filters that only execute when the QuerySet is evaluated.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> q = Entry.objects.filter(headline__startswith=\"What\")\n>>> q = q.filter(pub_date__lte=datetime.date.today())\n>>> q = q.exclude(body_text__icontains=\"food\")\n>>> print(q)\n```\n\n----------------------------------------\n\nTITLE: Django Admin Choice Registration\nDESCRIPTION: Shows how to register the Choice model with the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom .models import Choice, Question\n\n# ...\nadmin.site.register(Choice)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with authenticate() in Django (Python)\nDESCRIPTION: Demonstrates using the `django.contrib.auth.authenticate()` function to verify user credentials (username and password). It takes credentials as keyword arguments, checks them against configured authentication backends, and returns the User object if valid, otherwise returns None. The optional `request` argument can be passed to backends.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import authenticate\n\nuser = authenticate(username=\"john\", password=\"secret\")\nif user is not None:\n    # A backend authenticated the credentials\n    ...\nelse:\n    # No backend authenticated the credentials\n    ...\n```\n\n----------------------------------------\n\nTITLE: Processing Django Formset with Ordering\nDESCRIPTION: Demonstrates how to process a Django formset with ordering capability. Shows how the ORDER field affects the order of forms when accessed through ordered_forms.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_19\n\nLANGUAGE: pycon\nCODE:\n```\n>>> data = {\n...     \"form-TOTAL_FORMS\": \"3\",\n...     \"form-INITIAL_FORMS\": \"2\",\n...     \"form-0-title\": \"Article #1\",\n...     \"form-0-pub_date\": \"2008-05-10\",\n...     \"form-0-ORDER\": \"2\",\n...     \"form-1-title\": \"Article #2\",\n...     \"form-1-pub_date\": \"2008-05-11\",\n...     \"form-1-ORDER\": \"1\",\n...     \"form-2-title\": \"Article #3\",\n...     \"form-2-pub_date\": \"2008-05-01\",\n...     \"form-2-ORDER\": \"0\",\n... }\n\n>>> formset = ArticleFormSet(\n...     data,\n...     initial=[\n...         {\"title\": \"Article #1\", \"pub_date\": datetime.date(2008, 5, 10)},\n...         {\"title\": \"Article #2\", \"pub_date\": datetime.date(2008, 5, 11)},\n...     ],\n... )\n>>> for form in formset.ordered_forms:\n...     print(form.cleaned_data)\n...\n{'title': 'Article #3', 'pub_date': datetime.date(2008, 5, 1), 'ORDER': 0}\n{'title': 'Article #2', 'pub_date': datetime.date(2008, 5, 11), 'ORDER': 1}\n{'title': 'Article #1', 'pub_date': datetime.date(2008, 5, 10), 'ORDER': 2}\n```\n\n----------------------------------------\n\nTITLE: Counting Records Using Django ORM's count() Method\nDESCRIPTION: This snippet explains the usage of the count() method in Django's QuerySet to efficiently obtain the total number of matching records in the database, avoiding loading entire objects into memory. It also mentions the asynchronous variant acount() and compares count() with len() for performance considerations. Dependencies include the Django ORM and a configured database connection.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_78\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.count()\nEntry.objects.filter(headline__contains=\"Lennon\").count()\n```\n\n----------------------------------------\n\nTITLE: Good Practice: Using `get_absolute_url` in Django Templates (HTML+Django)\nDESCRIPTION: Shows the recommended practice for generating object URLs in Django templates by calling the object's `get_absolute_url` method within the `href` attribute. This makes the template resilient to changes in the URL structure defined within the model method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_27\n\nLANGUAGE: html+django\nCODE:\n```\n<a href=\"{{ object.get_absolute_url }}\">{{ object.name }}</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Fields in values() (Reverse Relation) Python\nDESCRIPTION: Shows how to access fields from related models (like Entry via the reverse relation from Blog) directly within the values() call using double underscore notation. Be aware this can multiply result rows if the relation is OneToMany or ManyToMany.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.values(\"name\", \"entry__headline\")\n```\n\n----------------------------------------\n\nTITLE: Django SingleObjectMixin Class Definition\nDESCRIPTION: Class that provides functionality for looking up a single object associated with the current HTTP request. Includes methods for querying objects, handling slugs, and managing context data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-single-object.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SingleObjectMixin:\n    model = None\n    queryset = None\n    slug_field = 'slug'\n    slug_url_kwarg = 'slug'\n    pk_url_kwarg = 'pk'\n    context_object_name = None\n    query_pk_and_slug = False\n```\n\n----------------------------------------\n\nTITLE: Custom Model Validation in Django Article Class\nDESCRIPTION: Demonstrates implementing custom validation logic in a model's clean() method to validate publication dates based on article status.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass Article(models.Model):\n    ...\n\n    def clean(self):\n        # Don't allow draft entries to have a pub_date.\n        if self.status == \"draft\" and self.pub_date is not None:\n            raise ValidationError(_(\"Draft entries may not have a publication date.\"))\n        # Set the pub_date for published items if it hasn't been set already.\n        if self.status == \"published\" and self.pub_date is None:\n            self.pub_date = datetime.date.today()\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelChoiceField with Custom to_field_name in Django\nDESCRIPTION: Example of configuring a ModelChoiceField to use a specific field (name) as the value for each option in the select widget.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# to_field_name provided\nfield2 = forms.ModelChoiceField(queryset=..., to_field_name=\"name\")\n```\n\n----------------------------------------\n\nTITLE: Generating Random UUIDs in Django with PostgreSQL\nDESCRIPTION: Demonstrates the usage of the RandomUUID function to update Article objects with version 4 UUIDs. This function is specific to PostgreSQL and available from django.contrib.postgres.functions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/functions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.functions import RandomUUID\n>>> Article.objects.update(uuid=RandomUUID())\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Default Ordering in Django Model Meta\nDESCRIPTION: Demonstrates how to set the default ordering for querysets using the `ordering` attribute within a model's `Meta` class. It shows examples for ascending order, descending order (using '-'), and multi-field ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nordering = [\"-order_date\"]\n```\n\nLANGUAGE: python\nCODE:\n```\nordering = [\"pub_date\"]\n```\n\nLANGUAGE: python\nCODE:\n```\nordering = [\"-pub_date\"]\n```\n\nLANGUAGE: python\nCODE:\n```\nordering = [\"-pub_date\", \"author\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Views with RequestFactory in Django\nDESCRIPTION: This snippet demonstrates how to use RequestFactory to test a view function in Django. It shows how to create GET requests, simulate logged-in and anonymous users, and test both function-based and class-based views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import AnonymousUser, User\nfrom django.test import RequestFactory, TestCase\n\nfrom .views import MyView, my_view\n\n\nclass SimpleTest(TestCase):\n    def setUp(self):\n        # Every test needs access to the request factory.\n        self.factory = RequestFactory()\n        self.user = User.objects.create_user(\n            username=\"jacob\", email=\"jacob@…\", password=\"top_secret\"\n        )\n\n    def test_details(self):\n        # Create an instance of a GET request.\n        request = self.factory.get(\"/customer/details\")\n\n        # Recall that middleware are not supported. You can simulate a\n        # logged-in user by setting request.user manually.\n        request.user = self.user\n\n        # Or you can simulate an anonymous user by setting request.user to\n        # an AnonymousUser instance.\n        request.user = AnonymousUser()\n\n        # Test my_view() as if it were deployed at /customer/details\n        response = my_view(request)\n        # Use this syntax for class-based views.\n        response = MyView.as_view()(request)\n        self.assertEqual(response.status_code, 200)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'fully_gt' Lookup in Django Python\nDESCRIPTION: Uses the `fully_gt` lookup (`__fully_gt`, SQL operator `>>`) on the `ages` field. This query finds `Event` objects where the entire `ages` range is strictly greater than (comes entirely after) the specified `NumericRange(11, 15)`. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__fully_gt=NumericRange(11, 15))\n<QuerySet [<Event: Pub trip>]>\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Databases with Empty Default Configuration\nDESCRIPTION: Terminal commands showing how to run migrations when using a configuration with an empty default database. In this case, you must always specify a database name when running migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py migrate --database=users\n$ ./manage.py migrate --database=customers\n```\n\n----------------------------------------\n\nTITLE: Using truncatechars_html Filter in Django Templates\nDESCRIPTION: Demonstrates the usage of the truncatechars_html filter, which truncates a string after a certain number of characters while being aware of HTML tags. It closes any open tags after truncation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_94\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|truncatechars_html:7 }}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Requirements for Multiple Media Types in Django\nDESCRIPTION: Example showing how to specify different CSS files for different output media types in a widget's Media class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Media:\n    css = {\n        \"screen\": [\"pretty.css\"],\n        \"print\": [\"newspaper.css\"],\n    }\n```\n\n----------------------------------------\n\nTITLE: Using blocktranslate tag with trimmed option in Django templates\nDESCRIPTION: Demonstrates how to use the trimmed option with the {% blocktranslate %} tag to remove unnecessary whitespace and newlines.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_27\n\nLANGUAGE: html+django\nCODE:\n```\n{% blocktranslate trimmed %}\n  First sentence.\n  Second paragraph.\n{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Signing and Unsigning Complex Data Structures in Django\nDESCRIPTION: Demonstrates the use of sign_object() and unsign_object() methods, as well as dumps() and loads() functions, to protect complex data structures like dictionaries and lists.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core import signing\n>>> signer = signing.TimestampSigner()\n>>> value = signer.sign_object({\"foo\": \"bar\"})\n>>> value\n'eyJmb28iOiJiYXIifQ:1stLrZ:_QiOBHafwucBF9FyAr54qEs84ZO1UdsO1XiTJCvvdno'\n>>> signer.unsign_object(value)\n{'foo': 'bar'}\n>>> value = signing.dumps({\"foo\": \"bar\"})\n>>> value\n'eyJmb28iOiJiYXIifQ:1stLsC:JItq2ZVjmAK6ivrWI-v1Gk1QVf2hOF52oaEqhZHca7I'\n>>> signing.loads(value)\n{'foo': 'bar'}\n\n>>> from django.core import signing\n>>> value = signing.dumps((\"a\", \"b\", \"c\"))\n>>> signing.loads(value)\n['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DateSelectorWidget using MultiWidget in Python\nDESCRIPTION: Presents a complete example of subclassing `forms.MultiWidget` to create a `DateSelectorWidget`. It defines the `__init__` method to set up `Select` widgets for day, month, and year using predefined choices. It implements `decompress` to split a date value (handling both `datetime.date` objects and string representations like 'YYYY-MM-DD'). It also overrides `value_from_datadict` to combine the selected values from the subwidgets back into a single 'YYYY-MM-DD' string suitable for processing by a `DateField`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom django import forms\n\n\nclass DateSelectorWidget(forms.MultiWidget):\n    def __init__(self, attrs=None):\n        days = {day: day for day in range(1, 32)}\n        months = {month: month for month in range(1, 13)}\n        years = {year: year for year in [2018, 2019, 2020]}\n        widgets = [\n            forms.Select(attrs=attrs, choices=days),\n            forms.Select(attrs=attrs, choices=months),\n            forms.Select(attrs=attrs, choices=years),\n        ]\n        super().__init__(widgets, attrs)\n\n    def decompress(self, value):\n        if isinstance(value, date):\n            return [value.day, value.month, value.year]\n        elif isinstance(value, str):\n            year, month, day = value.split(\"-\")\n            return [day, month, year]\n        return [None, None, None]\n\n    def value_from_datadict(self, data, files, name):\n        day, month, year = super().value_from_datadict(data, files, name)\n        # DateField expects a single string that it can parse into a date.\n        return \"{}-{}-{}\".format(year, month, day)\n```\n\n----------------------------------------\n\nTITLE: Using Model.refresh_from_db in Django Tests (Python)\nDESCRIPTION: Illustrates the use of `obj.refresh_from_db()` within a test method in Django. After performing a database update using `MyModel.objects.filter(...).update()`, the in-memory object `obj` still holds the old value. Calling `refresh_from_db()` updates the object's fields from the database, allowing assertions like `self.assertEqual(obj.val, 2)` to pass.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_update_result(self):\n    obj = MyModel.objects.create(val=1)\n    MyModel.objects.filter(pk=obj.pk).update(val=F(\"val\") + 1)\n    # At this point obj.val is still 1, but the value in the database\n    # was updated to 2. The object's updated value needs to be reloaded\n    # from the database.\n    obj.refresh_from_db()\n    self.assertEqual(obj.val, 2)\n```\n\n----------------------------------------\n\nTITLE: Casting Field Types in Django ORM with Python\nDESCRIPTION: This snippet illustrates how to use the Cast function from django.db.models.functions to convert the data type of a field within an ORM query. Dependencies include Django's ORM and the FloatField class. The key parameter is the field name (\\\"age\\\") to cast and the output_field (FloatField()), resulting in the column value being available as a float. The output of author.age_as_float will be a floating-point number even if the original field was an integer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Cast\n>>> Author.objects.create(age=25, name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(\n...     age_as_float=Cast(\"age\", output_field=FloatField()),\n... ).get()\n>>> print(author.age_as_float)\n25.0\n```\n\n----------------------------------------\n\nTITLE: Sorting by Related Fields in Django ModelAdmin\nDESCRIPTION: Example showing how to configure sorting for a column that displays data from a related model, using the ordering parameter with a lookup to the related field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass Blog(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(Person, on_delete=models.CASCADE)\n\n\nclass BlogAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"author\", \"author_first_name\"]\n\n    @admin.display(ordering=\"author__first_name\")\n    def author_first_name(self, obj):\n        return obj.author.first_name\n```\n\n----------------------------------------\n\nTITLE: Creating Language Message Files with Django\nDESCRIPTION: Shell commands for creating and managing translation message files using Django's makemessages command.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemessages -l de\n```\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemessages -l de -e txt\n```\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemessages -l de -e html,txt -e xml\n```\n\n----------------------------------------\n\nTITLE: Subclassing ModelForm Meta Class in Django\nDESCRIPTION: This snippet demonstrates how to subclass the Meta inner class of a parent ModelForm to modify the fields or exclude lists. It creates a new form that inherits from EnhancedArticleForm and excludes the 'body' field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass RestrictedArticleForm(EnhancedArticleForm):\n    class Meta(ArticleForm.Meta):\n        exclude = [\"body\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Permissions with ModelBackend in Django (Python)\nDESCRIPTION: Returns the set of permission strings the `user_obj` has via their group memberships. Returns an empty set if the user is anonymous or inactive (`is_active` is False). The asynchronous version `aget_group_permissions()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_group_permissions(user_obj, obj=None)\n```\n\nLANGUAGE: python\nCODE:\n```\naget_group_permissions(user_obj, obj=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom COALESCE Expression in Django\nDESCRIPTION: Complete implementation of a custom COALESCE SQL function as a Django query expression. The implementation includes initialization, validation, expression resolution, and SQL generation with vendor-specific handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport copy\nfrom django.db.models import Expression\n\n\nclass Coalesce(Expression):\n    template = \"COALESCE( %(expressions)s )\"\n\n    def __init__(self, expressions, output_field):\n        super().__init__(output_field=output_field)\n        if len(expressions) < 2:\n            raise ValueError(\"expressions must have at least 2 elements\")\n        for expression in expressions:\n            if not hasattr(expression, \"resolve_expression\"):\n                raise TypeError(\"%r is not an Expression\" % expression)\n        self.expressions = expressions\n\n    def resolve_expression(\n        self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False\n    ):\n        c = self.copy()\n        c.is_summary = summarize\n        for pos, expression in enumerate(self.expressions):\n            c.expressions[pos] = expression.resolve_expression(\n                query, allow_joins, reuse, summarize, for_save\n            )\n        return c\n\n    def as_sql(self, compiler, connection, template=None):\n        sql_expressions, sql_params = [], []\n        for expression in self.expressions:\n            sql, params = compiler.compile(expression)\n            sql_expressions.append(sql)\n            sql_params.extend(params)\n        template = template or self.template\n        data = {\"expressions\": \",\".join(sql_expressions)}\n        return template % data, sql_params\n\n\n    def as_oracle(self, compiler, connection):\n        \"\"\"\n        Example of vendor specific handling (Oracle in this case).\n        Let's make the function name lowercase.\n        \"\"\"\n        return self.as_sql(compiler, connection, template=\"coalesce( %(expressions)s )\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Labels, Help Texts, and Error Messages in Django ModelForm\nDESCRIPTION: This example shows how to customize the labels, help texts, and error messages for fields in a Django ModelForm. It uses the labels, help_texts, and error_messages attributes of the inner Meta class to provide custom strings for the 'name' field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = [\"name\", \"title\", \"birth_date\"]\n        labels = {\n            \"name\": _(\"Writer\"),\n        }\n        help_texts = {\n            \"name\": _(\"Some useful help text.\"),\n        }\n        error_messages = {\n            \"name\": {\n                \"max_length\": _(\"This writer's name is too long.\"),\n            },\n        }\n```\n\n----------------------------------------\n\nTITLE: Naming a Cycle Tag and Reusing its Value (Django)\nDESCRIPTION: Shows how to name a `{% cycle %}` tag using the `as` keyword (e.g., `as rowcolors`). This allows referencing the *current* value of the cycle elsewhere in the template using the assigned variable name (`rowcolors`) without advancing the cycle. Advancing the cycle requires another `{% cycle rowcolors %}` call.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% cycle 'row1' 'row2' as rowcolors %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n<tr>\n    <td class=\"{% cycle 'row1' 'row2' as rowcolors %}\">...</td>\n    <td class=\"{{ rowcolors }}\">...</td>\n</tr>\n<tr>\n    <td class=\"{% cycle rowcolors %}\">...</td>\n    <td class=\"{{ rowcolors }}\">...</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'upper_inf' Lookup in Django Python\nDESCRIPTION: Uses the `upper_inf` lookup (`__upper_inf`) on the `ages` field. This query retrieves `Event` objects where the `ages` range has an unbounded (infinite) upper bound (`None` in the Python representation). Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_34\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__upper_inf=True)\n<QuerySet [<Event: Pub trip>]>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form in Django\nDESCRIPTION: Defines a simple ArticleForm using Django's forms module, with title and publication date fields that will be used as the basis for formset examples.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\n>>> class ArticleForm(forms.Form):\n...     title = forms.CharField()\n...     pub_date = forms.DateField()\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions with ModelBackend in Django (Python)\nDESCRIPTION: Checks if the `user_obj` has a specific permission string (`perm`) using `get_all_permissions` within the `ModelBackend`. Returns `False` if the user is inactive (`is_active` is False). The asynchronous version `ahas_perm()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhas_perm(user_obj, perm, obj=None)\n```\n\nLANGUAGE: python\nCODE:\n```\nahas_perm(user_obj, perm, obj=None)\n```\n\n----------------------------------------\n\nTITLE: Using Index Transforms with ArrayField in Django\nDESCRIPTION: Demonstrates how to use index transforms with ArrayField in Django. This example shows querying for posts based on specific positions in the tags array.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> Post.objects.create(name=\"First post\", tags=[\"thoughts\", \"django\"])\n>>> Post.objects.create(name=\"Second post\", tags=[\"thoughts\"])\n\n>>> Post.objects.filter(tags__0=\"thoughts\")\n<QuerySet [<Post: First post>, <Post: Second post>]>\n\n>>> Post.objects.filter(tags__1__iexact=\"Django\")\n<QuerySet [<Post: First post>]>\n\n>>> Post.objects.filter(tags__276=\"javascript\")\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Adding __str__ Methods to Django Models\nDESCRIPTION: This Python code shows how to add __str__ methods to Django models to provide a more meaningful string representation of model instances. It's useful for debugging and in the Django admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\n```\n\n----------------------------------------\n\nTITLE: File Upload with ModelForm in Django\nDESCRIPTION: A view function that handles file uploads using a ModelForm. This approach automatically saves the uploaded file to the location specified by the FileField's upload_to parameter when form.save() is called.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\nfrom .forms import ModelFormWithFileField\n\n\ndef upload_file(request):\n    if request.method == \"POST\":\n        form = ModelFormWithFileField(request.POST, request.FILES)\n        if form.is_valid():\n            # file is saved\n            form.save()\n            return HttpResponseRedirect(\"/success/url/\")\n    else:\n        form = ModelFormWithFileField()\n    return render(request, \"upload.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Paginating Related Objects with ListView and SingleObjectMixin in Django (Python)\nDESCRIPTION: Implements a class-based view to show paginated lists of books for a specific Publisher, combining ListView with SingleObjectMixin to manage both contexts. Requires ListView and SingleObjectMixin from django.views.generic and Publisher from books.models. Uses get() to retrieve the Publisher instance and assigns it to self.object, overrides get_queryset() to fetch the related books, and ensures context contains the publisher. Pagination is controlled with paginate_by, and a custom template can be specified.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import ListView\\nfrom django.views.generic.detail import SingleObjectMixin\\nfrom books.models import Publisher\\n\\n\\nclass PublisherDetailView(SingleObjectMixin, ListView):\\n    paginate_by = 2\\n    template_name = \\\"books/publisher_detail.html\\\"\\n\\n    def get(self, request, *args, **kwargs):\\n        self.object = self.get_object(queryset=Publisher.objects.all())\\n        return super().get(request, *args, **kwargs)\\n\\n    def get_context_data(self, **kwargs):\\n        context = super().get_context_data(**kwargs)\\n        context[\\\"publisher\\\"] = self.object\\n        return context\\n\\n    def get_queryset(self):\\n        return self.object.book_set.all()\n```\n\n----------------------------------------\n\nTITLE: Implementing DeleteView in Django\nDESCRIPTION: Example showing how to create a DeleteView subclass for the Author model. The view specifies the model to operate on and defines a success URL to redirect to after deletion.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse_lazy\nfrom django.views.generic.edit import DeleteView\nfrom myapp.models import Author\n\n\nclass AuthorDeleteView(DeleteView):\n    model = Author\n    success_url = reverse_lazy(\"author-list\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Permissions for a Task Model in Django\nDESCRIPTION: Demonstrates how to add custom permissions to a Django model using the permissions Meta attribute. These permissions ('change_task_status' and 'close_task') define actions users can perform with Task instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Task(models.Model):\n    ...\n\n    class Meta:\n        permissions = [\n            (\"change_task_status\", \"Can change the status of tasks\"),\n            (\"close_task\", \"Can remove a task by setting its status as closed\"),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Date Value - Django ORM (Python)\nDESCRIPTION: Shows how to filter records where a datetime field is cast to date, using '__date' lookup in Django. Requires the Entry model, Django ORM, and the datetime module. Accepts a date object as input and yields results where the pub_date matches or is compared to a specific date. Useful for date-based filtering on DateTimeField attributes, with additional timezone consideration if USE_TZ is True.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__date=datetime.date(2005, 1, 1))\nEntry.objects.filter(pub_date__date__gt=datetime.date(2005, 1, 1))\n```\n\n----------------------------------------\n\nTITLE: Using translate tag in Django templates\nDESCRIPTION: Demonstrates how to use the {% translate %} tag to translate constant strings or variable content in Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_19\n\nLANGUAGE: html+django\nCODE:\n```\n<title>{% translate \"This is the title.\" %}</title>\n<title>{% translate myvar %}</title>\n```\n\n----------------------------------------\n\nTITLE: ListView Pagination Implementation\nDESCRIPTION: Shows how to implement pagination in a Django ListView class by setting the paginate_by attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import ListView\n\nfrom myapp.models import Contact\n\n\nclass ContactListView(ListView):\n    paginate_by = 2\n    model = Contact\n```\n\n----------------------------------------\n\nTITLE: Storing a generated Manager class in Django\nDESCRIPTION: Demonstrates how to store the Manager class generated from from_queryset() in a variable for reuse. This approach allows the custom Manager to be used in multiple model classes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nMyManager = CustomManager.from_queryset(CustomQuerySet)\n\n\nclass MyModel(models.Model):\n    objects = MyManager()\n```\n\n----------------------------------------\n\nTITLE: Multi-Database TabularInline Implementation\nDESCRIPTION: Custom InlineModelAdmin class for handling inline models with multiple databases in Django's admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MultiDBTabularInline(admin.TabularInline):\n    using = \"other\"\n\n    def get_queryset(self, request):\n        return super().get_queryset(request).using(self.using)\n\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        return super().formfield_for_foreignkey(\n            db_field, request, using=self.using, **kwargs\n        )\n\n    def formfield_for_manytomany(self, db_field, request, **kwargs):\n        return super().formfield_for_manytomany(\n            db_field, request, using=self.using, **kwargs\n        )\n```\n\n----------------------------------------\n\nTITLE: Using IntegerChoices in a Django Model\nDESCRIPTION: Illustrates defining integer-based choices within a Django model using the `IntegerChoices` class. A `Card` model is defined with a `Suit` enumeration (`IntegerChoices`) where members have integer values. This enum is then used as the `choices` option for an `IntegerField`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Card(models.Model):\n    class Suit(models.IntegerChoices):\n        DIAMOND = 1\n        SPADE = 2\n        HEART = 3\n        CLUB = 4\n\n    suit = models.IntegerField(choices=Suit)\n```\n\n----------------------------------------\n\nTITLE: Customizing Success Messages with ModelForms in Django\nDESCRIPTION: Shows how to override the get_success_message method to access fields from the saved object in a ModelForm when using SuccessMessageMixin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages.views import SuccessMessageMixin\nfrom django.views.generic.edit import CreateView\nfrom myapp.models import ComplicatedModel\n\n\nclass ComplicatedCreateView(SuccessMessageMixin, CreateView):\n    model = ComplicatedModel\n    success_url = \"/success/\"\n    success_message = \"%(calculated_field)s was created successfully\"\n\n    def get_success_message(self, cleaned_data):\n        return self.success_message % dict(\n            cleaned_data,\n            calculated_field=self.object.calculated_field,\n        )\n```\n\n----------------------------------------\n\nTITLE: Manual Model Instance Creation with File Upload\nDESCRIPTION: A view function that manually creates a model instance with an uploaded file. It demonstrates how to assign a file from request.FILES to a model's FileField.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\nfrom .forms import UploadFileForm\nfrom .models import ModelWithFileField\n\n\ndef upload_file(request):\n    if request.method == \"POST\":\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            instance = ModelWithFileField(file_field=request.FILES[\"file\"])\n            instance.save()\n            return HttpResponseRedirect(\"/success/url/\")\n    else:\n        form = UploadFileForm()\n    return render(request, \"upload.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Querying Django Models and Related Objects\nDESCRIPTION: This snippet demonstrates how to query Django models (Publication and Article) and access related objects. It shows the use of the all() method and how to navigate relationships between models.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n<QuerySet [<Publication: Highlights for Children>, <Publication: The Python Journal>]>\n>>> Article.objects.all()\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA finds intelligent life on Earth>, <Article: NASA uses Python>, <Article: Oxygen-free diet works wonders>]>\n>>> a2.publications.all()\n<QuerySet [<Publication: The Python Journal>]>\n```\n\n----------------------------------------\n\nTITLE: Django Primary Key Lookups\nDESCRIPTION: Examples of using the pk lookup shortcut for querying by primary key in different ways.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> Blog.objects.get(id__exact=14)  # Explicit form\n>>> Blog.objects.get(id=14)  # __exact is implied\n>>> Blog.objects.get(pk=14)  # pk implies id__exact\n>>> Blog.objects.filter(pk__in=[1, 4, 7])\n```\n\n----------------------------------------\n\nTITLE: Combining Q Objects with Negation in Django\nDESCRIPTION: Demonstrates how to use the negation (~) operator with Q objects to create complex queries combining normal and NOT conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nQ(question__startswith=\"Who\") | ~Q(pub_date__year=2005)\n```\n\n----------------------------------------\n\nTITLE: Basic Paginator Usage in Python\nDESCRIPTION: Demonstrates basic usage of Django's Paginator class with a simple list of items, showing core pagination operations like accessing pages and checking page boundaries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.paginator import Paginator\n>>> objects = [\"john\", \"paul\", \"george\", \"ringo\"]\n>>> p = Paginator(objects, 2)\n\n>>> p.count\n4\n>>> p.num_pages\n2\n>>> type(p.page_range)\n<class 'range_iterator'>\n>>> p.page_range\nrange(1, 3)\n\n>>> page1 = p.page(1)\n>>> page1\n<Page 1 of 2>\n>>> page1.object_list\n['john', 'paul']\n\n>>> page2 = p.page(2)\n>>> page2.object_list\n['george', 'ringo']\n>>> page2.has_next()\nFalse\n>>> page2.has_previous()\nTrue\n>>> page2.has_other_pages()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Equivalent Manual Form Implementation in Python\nDESCRIPTION: Shows how to manually create form classes equivalent to the ModelForm examples, illustrating the underlying form definitions that Django would generate automatically.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass AuthorForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    title = forms.CharField(\n        max_length=3,\n        widget=forms.Select(choices=TITLE_CHOICES),\n    )\n    birth_date = forms.DateField(required=False)\n\n\nclass BookForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    authors = forms.ModelMultipleChoiceField(queryset=Author.objects.all())\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiWidget with a List in Python REPL\nDESCRIPTION: Demonstrates initializing a `MultiWidget` instance using a list of `TextInput` widgets in a Python interactive console (`pycon`). It shows how the `render` method generates HTML input elements with default numerical suffixes (`_0`, `_1`) for the `name` attribute based on the list structure.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import MultiWidget, TextInput\n>>> widget = MultiWidget(widgets=[TextInput, TextInput])\n>>> widget.render(\"name\", [\"john\", \"paul\"])\n'<input type=\"text\" name=\"name_0\" value=\"john\"><input type=\"text\" name=\"name_1\" value=\"paul\">'\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Raw SQL Query with Manager.raw()\nDESCRIPTION: Example of using the raw() method to execute a basic SQL query that returns all Person objects. This demonstrates the simplest use case of raw SQL queries returning model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> for p in Person.objects.raw(\"SELECT * FROM myapp_person\"):\n...     print(p)\n...\nJohn Smith\nJane Jones\n```\n\n----------------------------------------\n\nTITLE: Setting Singular Verbose Name in Django Model Meta\nDESCRIPTION: Illustrates how to set a custom, human-readable singular name for a Django model using the `verbose_name` attribute within its `Meta` class. This name is used in Django's admin interface and other places where the model is displayed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nverbose_name = \"pizza\"\n```\n\n----------------------------------------\n\nTITLE: Emulating SQL Conditional Aggregation with CASE - SQL\nDESCRIPTION: Shows an alternative SQL technique for performing conditional aggregation on databases that do not support FILTER WHERE. Uses CASE expressions inside count functions to sum values for each account type. Output columns reflect count per account_type as before.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(CASE WHEN account_type=1 THEN id ELSE null) as regular,\n       count(CASE WHEN account_type=2 THEN id ELSE null) as gold,\n       count(CASE WHEN account_type=3 THEN id ELSE null) as platinum\nFROM clients;\n```\n\n----------------------------------------\n\nTITLE: Accessing Proxy Models in Django Shell\nDESCRIPTION: This snippet demonstrates how instances created from a parent model are accessible through its proxy model and vice versa. It shows that both models operate on the same database table.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Person.objects.create(first_name=\"foobar\")\n>>> MyPerson.objects.get(first_name=\"foobar\")\n<MyPerson: foobar>\n```\n\n----------------------------------------\n\nTITLE: Cache Versioning in Django\nDESCRIPTION: Demonstrates how to use cache versioning to manage different versions of cached data. Shows setting and retrieving cached values with specific versions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_35\n\nLANGUAGE: pycon\nCODE:\n```\n>>> # Set version 2 of a cache key\n>>> cache.set(\"my_key\", \"hello world!\", version=2)\n>>> # Get the default version (assuming version=1)\n>>> cache.get(\"my_key\")\nNone\n>>> # Get version 2 of the same key\n>>> cache.get(\"my_key\", version=2)\n'hello world!'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Django Template Filter for Business Hours\nDESCRIPTION: This snippet shows how to create a custom Django template filter that checks if a given datetime is within business hours. It uses the expects_localtime flag to handle time zone conversions properly.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n@register.filter(expects_localtime=True)\ndef businesshours(value):\n    try:\n        return 9 <= value.hour < 17\n    except AttributeError:\n        return \"\"\n```\n\n----------------------------------------\n\nTITLE: Using bulk_create in Django\nDESCRIPTION: Illustrates how to efficiently insert multiple objects into the database using bulk_create().  Highlights the caveats, including the absence of save() method calls and signal emissions.  Shows usage with batch_size and a generator to avoid memory issues. Requires an 'Entry' model with at least a 'headline' field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nobjs = Entry.objects.bulk_create(\n    [\n        Entry(headline=\"This is a test\"),\n        Entry(headline=\"This is only a test\"),\n    ]\n)\n\nfrom itertools import islice\n\nbatch_size = 100\nobjs = (Entry(headline=\"Test %s\" % i) for i in range(1000))\nwhile True:\n    batch = list(islice(objs, batch_size))\n    if not batch:\n        break\n    Entry.objects.bulk_create(batch, batch_size)\n```\n\n----------------------------------------\n\nTITLE: Returning All Model Data as Dictionaries (Specific Fields) Python\nDESCRIPTION: Applies the values() method with specific field names as positional arguments. Returns a QuerySet yielding dictionaries containing only the specified field keys and their corresponding values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.values(\"id\", \"name\")\n```\n\n----------------------------------------\n\nTITLE: Using atomic Context Manager for Transaction Management in Django\nDESCRIPTION: Example demonstrating how to use atomic as a context manager to create a transaction block within a function. This allows for more fine-grained control over transaction boundaries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import transaction\n\n\ndef viewfunc(request):\n    # This code executes in autocommit mode (Django's default).\n    do_stuff()\n\n    with transaction.atomic():\n        # This code executes inside a transaction.\n        do_more_stuff()\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding M2M Relationship from Reverse Side (pycon)\nDESCRIPTION: Uses the `create()` method on the reverse relationship manager (`p2.article_set`) to create a new `Article` instance and simultaneously add it to the relationship with `p2`. It then verifies the relationship from both the `Publication` and the new `Article`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> new_article = p2.article_set.create(headline=\"Oxygen-free diet works wonders\")\n>>> p2.article_set.all()\n<QuerySet [<Article: NASA finds intelligent life on Earth>, <Article: Oxygen-free diet works wonders>]>\n>>> a5 = p2.article_set.all()[1]\n>>> a5.publications.all()\n<QuerySet [<Publication: Science News>]>\n```\n\n----------------------------------------\n\nTITLE: Annotating QuerySet with Custom SQL Function Using Func - Django ORM - Python\nDESCRIPTION: This snippet annotates a queryset with a computed field, using Django's Func expression to apply a database function (in this case LOWER for string case conversion) to an existing model field. The output field is added as 'field_lower' to each model instance. Dependencies include django.db.models.F and Func. The function parameter determines the SQL function applied.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F, Func\n\nqueryset.annotate(field_lower=Func(F(\"field\"), function=\"LOWER\"))\n```\n\n----------------------------------------\n\nTITLE: Using Static Template Tag in Django HTML\nDESCRIPTION: Demonstrates how to use the static template tag to build URLs for static files in Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load static %}\n<img src=\"{% static 'my_app/example.jpg' %}\" alt=\"My image\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Based Middleware in Django\nDESCRIPTION: A template for creating class-based middleware in Django. This pattern shows how to structure a middleware as a class with __init__ and __call__ methods. The class initializes with a get_response callable and processes each request in its __call__ method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SimpleMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n        # One-time configuration and initialization.\n\n    def __call__(self, request):\n        # Code to be executed for each request before\n        # the view (and later middleware) are called.\n\n        response = self.get_response(request)\n\n        # Code to be executed for each request/response after\n        # the view is called.\n\n        return response\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key to User Model in Django\nDESCRIPTION: Example of defining a foreign key relationship to the user model using settings.AUTH_USER_MODEL instead of directly referencing User model. This ensures compatibility with custom user models.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.db import models\n\n\nclass Article(models.Model):\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Cache in Django\nDESCRIPTION: Setting up a file-based cache backend in Django settings. This configuration stores each cache value as a separate file in the specified directory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"/var/tmp/django_cache\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Formatting in Django ModelAdmin list_display\nDESCRIPTION: Example showing how to use format_html to display formatted HTML in the admin list_display, customizing the display of a model's data with color formatting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db import models\nfrom django.utils.html import format_html\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    color_code = models.CharField(max_length=6)\n\n    @admin.display\n    def colored_name(self):\n        return format_html(\n            '<span style=\"color: #{};\">{} {}</span>',\n            self.color_code,\n            self.first_name,\n            self.last_name,\n        )\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"first_name\", \"last_name\", \"colored_name\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up InlineModelAdmin with TabularInline\nDESCRIPTION: Example demonstrating how to configure the Django admin to allow inline editing of Book models on the Author admin page using TabularInline.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom myapp.models import Author, Book\n\n\nclass BookInline(admin.TabularInline):\n    model = Book\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    inlines = [\n        BookInline,\n    ]\n\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n----------------------------------------\n\nTITLE: Using urlencode Filter in Django Templates\nDESCRIPTION: Shows how to use the urlencode filter to escape a value for use in a URL. An optional argument can be provided to specify characters that should not be escaped.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_99\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|urlencode }}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|urlencode:\"\" }}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Django Forms\nDESCRIPTION: This section demonstrates how to handle file uploads in Django forms. It includes examples of form HTML, binding file data to a form, and using request.FILES in views.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"/foo/\">\n```\n\nLANGUAGE: python\nCODE:\n```\n# Bound form with an image field\n>>> from django.core.files.uploadedfile import SimpleUploadedFile\n>>> data = {\n...     \"subject\": \"hello\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"foo@example.com\",\n...     \"cc_myself\": True,\n... }\n>>> file_data = {\"mugshot\": SimpleUploadedFile(\"face.jpg\", b\"file data\")}\n>>> f = ContactFormWithMugshot(data, file_data)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Bound form with an image field, data from the request\n>>> f = ContactFormWithMugshot(request.POST, request.FILES)\n```\n\n----------------------------------------\n\nTITLE: Using a Context-Aware Inclusion Tag Template in Django\nDESCRIPTION: Shows the template used by the context-aware inclusion tag, which uses variables provided by the tag function.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\nJump directly to <a href=\"{{ link }}\">{{ title }}</a>.\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One User Relationships - Django Models - Python\nDESCRIPTION: Defines a Django model called MySpecialUser that establishes two OneToOneField relationships with the User model using settings.AUTH_USER_MODEL. Demonstrates customizing the reverse accessor name using related_name. Required dependencies are django.conf.settings and django.db.models. Inputs include references to user models as foreign keys. Outputs are MySpecialUser instances with direct relations to User objects. The snippet shows how to link profile and supervisor relations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\\nfrom django.db import models\\n\\n\\nclass MySpecialUser(models.Model):\\n    user = models.OneToOneField(\\n        settings.AUTH_USER_MODEL,\\n        on_delete=models.CASCADE,\\n    )\\n    supervisor = models.OneToOneField(\\n        settings.AUTH_USER_MODEL,\\n        on_delete=models.CASCADE,\\n        related_name=\"supervisor_of\",\\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining a TimeField in Django Models\nDESCRIPTION: Defines a Django model field for storing time, represented in Python by a `datetime.time` instance. Supports the same auto-population options as `DateField`: `auto_now` (update on save) and `auto_now_add` (set on creation). The default form widget is `TimeInput`, with added JavaScript shortcuts in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n.. class:: TimeField(auto_now=False, auto_now_add=False, **options)\n```\n\n----------------------------------------\n\nTITLE: Serializing Database State in Django\nDESCRIPTION: The serialize_db_to_string function serializes the database state to an in-memory JSON string. This is useful for restoring database state between tests when transactions are not supported or serialized_rollback is enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nserialize_db_to_string()\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Form with Error Messages and ARIA Attributes\nDESCRIPTION: Example HTML output of a rendered Django form with validation errors. Shows how Django automatically adds aria-invalid and aria-describedby attributes to associate error messages with form inputs for accessibility.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <label for=\"id_subject\">Subject:</label>\n  <ul class=\"errorlist\" id=\"id_subject_error\"><li>This field is required.</li></ul>\n  <input type=\"text\" name=\"subject\" maxlength=\"100\" required aria-invalid=\"true\" aria-describedby=\"id_subject_error\" id=\"id_subject\">\n</div>\n<div>\n  <label for=\"id_message\">Message:</label>\n  <textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_message\">Hi there</textarea>\n</div>\n<div>\n  <label for=\"id_sender\">Sender:</label>\n  <ul class=\"errorlist\" id=\"id_sender_error\"><li>Enter a valid email address.</li></ul>\n  <input type=\"email\" name=\"sender\" value=\"invalid email address\" maxlength=\"320\" required aria-invalid=\"true\" aria-describedby=\"id_sender_error\" id=\"id_sender\">\n</div>\n<div>\n    <label for=\"id_cc_myself\">Cc myself:</label>\n    <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\" checked>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Multidimensional Arrays with SimpleArrayField in Django Forms\nDESCRIPTION: Shows how to use SimpleArrayField for creating multidimensional arrays in Django forms. It demonstrates chaining SimpleArrayFields with a custom delimiter for 2D data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/forms.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> from django.contrib.postgres.forms import SimpleArrayField\n\n>>> class GridForm(forms.Form):\n...     places = SimpleArrayField(SimpleArrayField(IntegerField()), delimiter=\"|\")\n...\n\n>>> form = GridForm({\"places\": \"1,2|2,1|4,3\"})\n>>> form.is_valid()\nTrue\n>>> form.cleaned_data\n{'places': [[1, 2], [2, 1], [4, 3]]}\n```\n\n----------------------------------------\n\nTITLE: TimeField Truncation Example in Django\nDESCRIPTION: Demonstrates using TruncHour with TimeFields to group and count experiments by hour.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import UTC, datetime\n>>> from django.db.models import Count, TimeField\n>>> from django.db.models.functions import TruncHour\n>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=UTC)\n>>> start2 = datetime(2014, 6, 15, 14, 40, 2, 123, tzinfo=UTC)\n>>> start3 = datetime(2015, 12, 31, 17, 5, 27, 999, tzinfo=UTC)\n>>> Experiment.objects.create(start_datetime=start1, start_time=start1.time())\n>>> Experiment.objects.create(start_datetime=start2, start_time=start2.time())\n>>> Experiment.objects.create(start_datetime=start3, start_time=start3.time())\n>>> experiments_per_hour = (\n...     Experiment.objects.annotate(\n...         hour=TruncHour(\"start_datetime\", output_field=TimeField()),\n...     )\n...     .values(\"hour\")\n...     .annotate(experiments=Count(\"id\"))\n... )\n```\n\n----------------------------------------\n\nTITLE: Using ModelForm Factory Function in Django\nDESCRIPTION: This snippet demonstrates how to use the modelform_factory function to create a ModelForm dynamically. It creates a form for the Book model with specified fields and then modifies it to use a Textarea widget for the 'title' field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import modelform_factory\nfrom myapp.models import Book\nBookForm = modelform_factory(Book, fields=[\"author\", \"title\"])\n\nfrom django.forms import Textarea\nForm = modelform_factory(Book, form=BookForm, widgets={\"title\": Textarea()})\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Zone Selection View in Django\nDESCRIPTION: A view function that handles both displaying a form for time zone selection and processing the form submission to update the user's time zone preference in the session.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import redirect, render\n\n# Prepare a map of common locations to timezone choices you wish to offer.\ncommon_timezones = {\n    \"London\": \"Europe/London\",\n    \"Paris\": \"Europe/Paris\",\n    \"New York\": \"America/New_York\",\n}\n\n\ndef set_timezone(request):\n    if request.method == \"POST\":\n        request.session[\"django_timezone\"] = request.POST[\"timezone\"]\n        return redirect(\"/\")\n    else:\n        return render(request, \"template.html\", {\"timezones\": common_timezones})\n```\n\n----------------------------------------\n\nTITLE: Fixed Parameter Database Type Field in Django\nDESCRIPTION: Example of a field with hardcoded parameters, showing a less flexible approach to custom field implementation where the column length is fixed in the code.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# This is a silly example of hardcoded parameters.\nclass CharMaxlength25Field(models.Field):\n    def db_type(self, connection):\n        return \"char(25)\"\n\n\n# In the model:\nclass MyModel(models.Model):\n    # ...\n    my_field = CharMaxlength25Field()\n```\n\n----------------------------------------\n\nTITLE: Creating Model Formset Factory in Python\nDESCRIPTION: Demonstrates how to create a model formset factory for the Author model, specifying fields to include or exclude.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import modelformset_factory\n>>> from myapp.models import Author\n>>> AuthorFormSet = modelformset_factory(Author, fields=[\"name\", \"title\"])\n\n>>> AuthorFormSet = modelformset_factory(Author, exclude=[\"birth_date\"])\n```\n\n----------------------------------------\n\nTITLE: Customizing Context Variable Name in Django ListView using Python\nDESCRIPTION: Demonstrates customizing the template context variable name in a `ListView` subclass. By setting the `context_object_name` attribute to `\"my_favorite_publishers\"`, the list of `Publisher` objects will be available in the template under this custom name instead of the default `object_list` or the model-derived `publisher_list`. This improves template readability.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom django.views.generic import ListView\nfrom books.models import Publisher\n\n\nclass PublisherListView(ListView):\n    model = Publisher\n    context_object_name = \"my_favorite_publishers\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Y Coordinate of a Point Geometry in Python\nDESCRIPTION: Shows how to get the Y coordinate of a Point `OGRGeometry` ('POINT (1 2)') by accessing its `.y` attribute. It returns the floating-point value of the Y coordinate.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT (1 2)\").y\n2.0\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Manager to a Django Model (Python)\nDESCRIPTION: This snippet shows how to declare a custom manager by adding a Manager instance with a user-defined name (here, 'people') to a Django model. By explicitly assigning a custom manager on the model class, the default 'objects' manager will not appear. Dependencies include Django framework and a valid project setup. Input: none directly, but you must use this class in a Django app. Output: the model will have 'people' as the manager for query operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/class.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\n\\n\\nclass Person(models.Model):\\n    # Add manager with another name\\n    people = models.Manager()\n```\n\n----------------------------------------\n\nTITLE: Rendered Script Object HTML Output\nDESCRIPTION: Shows how the Script object media definition is rendered as HTML\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.example.com/something.min.js\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Session Engine for Database-Backed Sessions\nDESCRIPTION: Configuration setting to enable database-backed sessions in Django. This requires adding the sessions app to INSTALLED_APPS and running migrations to create the database table.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n'django.contrib.sessions'\n```\n\n----------------------------------------\n\nTITLE: Updating Django URL Configuration for App Namespace\nDESCRIPTION: Example of updating URL configuration to use the new app_name attribute instead of explicitly setting the namespace in the include() function. This change simplifies URL configuration in Django 1.9.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# mysite/urls.py\nurlpatterns = [url(r\"^polls/\", include(\"polls.urls\", namespace=\"polls\")), ...]\n\n# polls/urls.py\napp_name = \"polls\"  # added\nurlpatterns = [...]\n```\n\n----------------------------------------\n\nTITLE: Filtering Django QuerySets with Basic Text Matching\nDESCRIPTION: Demonstrates how to perform a simple text-based search on Django models using the contains lookup. This example searches for authors whose names contain a specific substring.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> Author.objects.filter(name__contains=\"Terry\")\n[<Author: Terry Gilliam>, <Author: Terry Jones>]\n```\n\n----------------------------------------\n\nTITLE: Django Admin Display Decorator Usage\nDESCRIPTION: Demonstrates how to use the admin.display decorator to customize the display of model methods in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass Question(models.Model):\n    # ...\n    @admin.display(\n        boolean=True,\n        ordering=\"pub_date\",\n        description=\"Published recently?\",\n    )\n    def was_published_recently(self):\n        now = timezone.now()\n        return now - datetime.timedelta(days=1) <= self.pub_date <= now\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Creation Form with Django\nDESCRIPTION: Example of extending UserCreationForm to work with a custom user model that is a subclass of AbstractUser. Adds custom fields while maintaining the base functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.forms import UserCreationForm\nfrom myapp.models import CustomUser\n\n\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta(UserCreationForm.Meta):\n        model = CustomUser\n        fields = UserCreationForm.Meta.fields + (\"custom_field\",)\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Headers in Django Request\nDESCRIPTION: Example of accessing HTTP headers through the request.headers dictionary-like object. This shows how headers can be accessed case-insensitively using dictionary syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> request.headers\n{'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6', ...}\n\n>>> \"User-Agent\" in request.headers\nTrue\n>>> \"user-agent\" in request.headers\nTrue\n\n>>> request.headers[\"User-Agent\"]\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)\n>>> request.headers[\"user-agent\"]\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)\n\n>>> request.headers.get(\"User-Agent\")\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)\n>>> request.headers.get(\"user-agent\")\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Many-to-Many Relationships - Django Models - Python\nDESCRIPTION: Illustrates defining a model ('Manufacturer') that includes a recursive (self-referencing) ManyToManyField to itself. Specifies symmetrical=False to allow directed relationships (e.g., supplier relationships that are not mutual). Dependencies are django.db.models. Input is the Manufacturer model name as a string; the output is a Django model with recursive suppliers links.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\n\\n\\nclass Manufacturer(models.Model):\\n    name = models.TextField()\\n    suppliers = models.ManyToManyField(\"self\", symmetrical=False)\n```\n\n----------------------------------------\n\nTITLE: Cascade Deletion in Django with Foreign Keys\nDESCRIPTION: Shows how Django's cascade deletion works by default, where deleting a model instance also deletes related objects with foreign keys pointing to it.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nb = Blog.objects.get(pk=1)\n# This will delete the Blog and all of its Entry objects.\nb.delete()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SimpleListFilter in Django Admin\nDESCRIPTION: Demonstrates how to create a custom list filter by subclassing SimpleListFilter. This example filters people by the decade they were born in, implementing lookups and queryset methods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\nfrom django.contrib import admin\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass DecadeBornListFilter(admin.SimpleListFilter):\n    # Human-readable title which will be displayed in the\n    # right admin sidebar just above the filter options.\n    title = _(\"decade born\")\n\n    # Parameter for the filter that will be used in the URL query.\n    parameter_name = \"decade\"\n\n    def lookups(self, request, model_admin):\n        \"\"\"\n        Returns a list of tuples. The first element in each\n        tuple is the coded value for the option that will\n        appear in the URL query. The second element is the\n        human-readable name for the option that will appear\n        in the right sidebar.\n        \"\"\"\n        return [\n            (\"80s\", _(\"in the eighties\")),\n            (\"90s\", _(\"in the nineties\")),\n        ]\n\n    def queryset(self, request, queryset):\n        \"\"\"\n        Returns the filtered queryset based on the value\n        provided in the query string and retrievable via\n        `self.value()`.\n        \"\"\"\n        # Compare the requested value (either '80s' or '90s')\n        # to decide how to filter the queryset.\n        if self.value() == \"80s\":\n            return queryset.filter(\n                birthday__gte=date(1980, 1, 1),\n                birthday__lte=date(1989, 12, 31),\n            )\n        if self.value() == \"90s\":\n            return queryset.filter(\n                birthday__gte=date(1990, 1, 1),\n                birthday__lte=date(1999, 12, 31),\n            )\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_filter = [DecadeBornListFilter]\n```\n\n----------------------------------------\n\nTITLE: Rendering Variables in Django Templates\nDESCRIPTION: Demonstrates how to output variables in a Django template using double curly braces. Variables are replaced with their values from the context during rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nMy first name is {{ first_name }}. My last name is {{ last_name }}.\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: has_any_keys Lookup (Python)\nDESCRIPTION: Demonstrates retrieving objects with any matching keys from a list using 'has_any_keys' (SQL ?| operator) on an HStoreField. Dependencies: Django and PostgreSQL with hstore. Input is a list of keys to match; output lists objects whose hstore dict has at least one of the provided keys.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"owner\": \"Bob\"})\\n>>> Dog.objects.create(name=\"Fred\", data={})\\n\\n>>> Dog.objects.filter(data__has_any_keys=[\"owner\", \"breed\"])\\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Many-to-Many Relationships with Intermediate Model in Django\nDESCRIPTION: This snippet demonstrates creating Person and Group objects, establishing many-to-many relationships using a Membership intermediate model, and querying the relationships. It shows how to create, add, and remove memberships, as well as perform filtered queries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> ringo = Person.objects.create(name=\"Ringo Starr\")\n>>> paul = Person.objects.create(name=\"Paul McCartney\")\n>>> beatles = Group.objects.create(name=\"The Beatles\")\n>>> m1 = Membership(\n...     person=ringo,\n...     group=beatles,\n...     date_joined=date(1962, 8, 16),\n...     invite_reason=\"Needed a new drummer.\",\n... )\n>>> m1.save()\n>>> beatles.members.all()\n<QuerySet [<Person: Ringo Starr>]>\n>>> ringo.group_set.all()\n<QuerySet [<Group: The Beatles>]>\n>>> m2 = Membership.objects.create(\n...     person=paul,\n...     group=beatles,\n...     date_joined=date(1960, 8, 1),\n...     invite_reason=\"Wanted to form a band.\",\n... )\n>>> beatles.members.all()\n<QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>]>\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Sessions\nDESCRIPTION: Setting the SESSION_ENGINE to use file-based session storage where session data is stored in files on the server's filesystem.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"django.contrib.sessions.backends.file\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Natural Key in Django Model\nDESCRIPTION: Demonstrates how to add a natural_key() method to a Django model class for serialization purposes. The method returns a tuple representing the natural key.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    birthdate = models.DateField()\n\n    objects = PersonManager()\n\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(\n                fields=[\"first_name\", \"last_name\"],\n                name=\"unique_first_last_name\",\n            ),\n        ]\n\n    def natural_key(self):\n        return (self.first_name, self.last_name)\n```\n\n----------------------------------------\n\nTITLE: Django Test Client URL Path Examples - Python\nDESCRIPTION: Shows correct and incorrect ways to specify URLs when using Django's test client.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> c.get(\"/login/\")\n\n>>> c.get(\"https://www.example.com/login/\")\n```\n\n----------------------------------------\n\nTITLE: Excluding Django Objects with Multiple Conditions (AND) using Python and SQL\nDESCRIPTION: Shows how to use the `exclude()` method in Python with multiple keyword arguments to filter out objects matching all conditions (logical AND). The corresponding SQL uses `WHERE NOT (...)` to negate the combined conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3), headline=\"Hello\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ...\nWHERE NOT (pub_date > '2005-1-3' AND headline = 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Using BoolOr Aggregate with Django Models\nDESCRIPTION: Shows how to use the BoolOr aggregate function with Django models. The example uses a Comment model and demonstrates aggregating boolean fields and conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Q\n>>> from django.contrib.postgres.aggregates import BoolOr\n>>> Comment.objects.aggregate(boolor=BoolOr(\"published\"))\n{'boolor': True}\n>>> Comment.objects.aggregate(boolor=BoolOr(Q(rank__gt=2)))\n{'boolor': False}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Unbound Django Forms in Python\nDESCRIPTION: Demonstrates creation of an unbound Django form by calling the constructor without arguments. No dependencies beyond Django's forms framework. Takes no input; outputs a Form instance in an unbound state, suitable for rendering blank forms but not data validation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm()\n```\n\n----------------------------------------\n\nTITLE: Applying Filters in Django Templates\nDESCRIPTION: Demonstrates the use of filters in Django templates to transform variable values. Includes examples of built-in filters like 'title' and 'date'.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{ django|title }}\n```\n\nLANGUAGE: html\nCODE:\n```\n{{ my_date|date:\"Y-m-d\" }}\n```\n\n----------------------------------------\n\nTITLE: Using Left Function in Django Models\nDESCRIPTION: Demonstrates using the Left function to get the leftmost characters of a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Left\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(first_initial=Left(\"name\", 1)).get()\n>>> print(author.first_initial)\nM\n```\n\n----------------------------------------\n\nTITLE: Uploading a File Using Django Test Client POST Method\nDESCRIPTION: Shows how to upload a file using the Django test client's POST method. The example demonstrates opening a file and submitting it along with other form data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> c = Client()\n>>> with open(\"wishlist.doc\", \"rb\") as fp:\n...     c.post(\"/customers/wishes/\", {\"name\": \"fred\", \"attachment\": fp})\n...\n```\n\n----------------------------------------\n\nTITLE: Using Complex Expressions for Database Defaults\nDESCRIPTION: Illustrates setting a complex database-computed default value using `db_default`. This example defines a `DateField` named `month_due` whose default value is calculated by the database using functions like `TruncMonth` and `Now`, along with a `timedelta`, effectively setting the default to the first day of the month 90 days from the current date.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nfrom django.db import models\nfrom django.db.models.functions import Now, TruncMonth\n\nmonth_due = models.DateField(\n    db_default=TruncMonth(\n        Now() + timedelta(days=90),\n        output_field=models.DateField(),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom InlineFormSet\nDESCRIPTION: Demonstrates how to use a custom InlineFormSet when creating an inline formset using inlineformset_factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms import inlineformset_factory\n>>> BookFormSet = inlineformset_factory(\n...     Author, Book, fields=[\"title\"], formset=CustomInlineFormSet\n... )\n>>> author = Author.objects.get(name=\"Mike Royko\")\n>>> formset = BookFormSet(instance=author)\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Unique Constraints with Expressions in Python\nDESCRIPTION: Demonstrates creating a `UniqueConstraint` based on a database function or expression using the positional `*expressions` argument. This example enforces uniqueness on the lowercased 'name' field (in descending order) combined with the 'category' field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import UniqueConstraint\nfrom django.db.models.functions import Lower\n\nUniqueConstraint(Lower(\"name\").desc(), \"category\", name=\"unique_lower_name_category\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Page of Paginated Results in Django\nDESCRIPTION: Demonstrates how to access the final page of paginated results using the 'last' keyword as the page value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-multiple-object.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/objects/?page=last\n```\n\n----------------------------------------\n\nTITLE: Signing Objects with Django's Signer Class\nDESCRIPTION: Shows how to sign and unsign complex data structures like dictionaries using the sign_object() and unsign_object() methods of the Signer class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> signed_obj = signer.sign_object({\"message\": \"Hello!\"})\n>>> signed_obj\n'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'\n>>> obj = signer.unsign_object(signed_obj)\n>>> obj\n{'message': 'Hello!'}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment and Installing Documentation Dependencies\nDESCRIPTION: Instructions for creating a virtual environment, activating it, and installing the required dependencies for building Django's documentation locally.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m venv .venv\n$ source .venv/bin/activate\n$ python -m pip install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configurable Parameter Field Implementation in Django\nDESCRIPTION: A more flexible approach to custom field implementation allowing the max_length parameter to be specified at field instantiation time rather than hardcoded.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# This is a much more flexible example.\nclass BetterCharField(models.Field):\n    def __init__(self, max_length, *args, **kwargs):\n        self.max_length = max_length\n```\n\n----------------------------------------\n\nTITLE: Configuring STATIC_URL in Django Settings\nDESCRIPTION: Defines the URL prefix for static files in the Django settings file.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSTATIC_URL = \"static/\"\n```\n\n----------------------------------------\n\nTITLE: Removing M2M Relationship via Forward Manager (pycon)\nDESCRIPTION: Demonstrates removing a specific many-to-many relationship using the `remove()` method on the forward relationship manager (`a4.publications.remove(p2)`). It verifies the removal by checking the related sets from both sides.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a4.publications.remove(p2)\n>>> p2.article_set.all()\n<QuerySet [<Article: Oxygen-free diet works wonders>]>\n>>> a4.publications.all()\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Django Formsets with Unique Prefixes\nDESCRIPTION: Creates and renders two different formsets (ArticleFormSet and BookFormSet) with distinct prefixes to avoid field name conflicts. The prefixes 'articles' and 'books' ensure unique HTML name/id attributes for each formset's fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\narticle_formset = ArticleFormSet(prefix=\"articles\")\nbook_formset = BookFormSet(prefix=\"books\")\nreturn render(\n    request,\n    \"manage_articles.html\",\n    {\n        \"article_formset\": article_formset,\n        \"book_formset\": book_formset,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Selenium tests with Django LiveServerTestCase\nDESCRIPTION: This code snippet shows how to set up a Selenium test using Django's LiveServerTestCase. It includes fixture loading, WebDriver setup, and a sample login test.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.firefox.webdriver import WebDriver\n\n\nclass MySeleniumTests(StaticLiveServerTestCase):\n    fixtures = [\"user-data.json\"]\n\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        cls.selenium = WebDriver()\n        cls.selenium.implicitly_wait(10)\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.selenium.quit()\n        super().tearDownClass()\n\n    def test_login(self):\n        self.selenium.get(f\"{self.live_server_url}/login/\")\n        username_input = self.selenium.find_element(By.NAME, \"username\")\n        username_input.send_keys(\"myuser\")\n        password_input = self.selenium.find_element(By.NAME, \"password\")\n        password_input.send_keys(\"secret\")\n        self.selenium.find_element(By.XPATH, '//input[@value=\"Log in\"]').click()\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS and Atom Feed Classes in Django - Python\nDESCRIPTION: This code defines two Django feed classes to serve both RSS and Atom versions of site news feeds, demonstrating inheritance and feed type specification. It requires django.contrib.syndication.views.Feed, a model named NewsItem with a pub_date field, and django.utils.feedgenerator.Atom1Feed. The 'RssSiteNewsFeed' outputs the latest NewsItems in RSS with hardcoded metadata; 'AtomSiteNewsFeed' subclasses it to use Atom and sets a subtitle. Inputs are database items retrieved via ORM; the output is an RSS or Atom feed for URLs configured for each class.\n\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom policebeat.models import NewsItem\nfrom django.utils.feedgenerator import Atom1Feed\n\nclass RssSiteNewsFeed(Feed):\n    title = \"Police beat site news\"\n    link = \"/sitenews/\"\n    description = \"Updates on changes and additions to police beat central.\"\n\n    def items(self):\n        return NewsItem.objects.order_by(\"-pub_date\")[:5]\n\nclass AtomSiteNewsFeed(RssSiteNewsFeed):\n    feed_type = Atom1Feed\n    subtitle = RssSiteNewsFeed.description\n```\n\n----------------------------------------\n\nTITLE: Configuring CACHES with LOCATION\nDESCRIPTION: This snippet demonstrates setting the LOCATION parameter within the CACHES settings.  The LOCATION parameter specifies the location for the cache, depending on the chosen backend.  This example shows setting the location for a file-based cache.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"/var/tmp/django_cache\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Value Display for a ModelAdmin\nDESCRIPTION: Example showing how to set a custom empty value display at the ModelAdmin level, affecting all fields in that admin view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    empty_value_display = \"unknown\"\n```\n\n----------------------------------------\n\nTITLE: Django Admin Inline Related Objects\nDESCRIPTION: Demonstrates how to add inline related objects using StackedInline for editing Choices within the Question admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom .models import Choice, Question\n\n\nclass ChoiceInline(admin.StackedInline):\n    model = Choice\n    extra = 3\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"], \"classes\": [\"collapse\"]}),\n    ]\n    inlines = [ChoiceInline]\n\n\nadmin.site.register(Question, QuestionAdmin)\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relationships with Intermediate Models in Django\nDESCRIPTION: Example demonstrating how to define a many-to-many relationship with an intermediate model to store additional relationship data. Shows a Person-Group relationship with a Membership intermediate model that includes extra fields for date_joined and invite_reason.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n    def __str__(self):\n        return self.name\n\n\nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, through=\"Membership\")\n\n    def __str__(self):\n        return self.name\n\n\nclass Membership(models.Model):\n    person = models.ForeignKey(Person, on_delete=models.CASCADE)\n    group = models.ForeignKey(Group, on_delete=models.CASCADE)\n    date_joined = models.DateField()\n    invite_reason = models.CharField(max_length=64)\n\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(\n                fields=[\"person\", \"group\"], name=\"unique_person_group\"\n            )\n        ]\n```\n\n----------------------------------------\n\nTITLE: Defining WSGI_APPLICATION setting\nDESCRIPTION: This setting specifies the Python path to the WSGI application object. It is used by Django's built-in servers. It usually points to a callable in the wsgi.py file created by django-admin startproject. If not set, django.core.wsgi.get_wsgi_application() is used.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Setting Permissions on a Django Group - Django ORM - Python\nDESCRIPTION: These code lines demonstrate how to manipulate the permissions assigned to a Django Group model instance using the provided manager methods. Requires Django’s ORM and an instantiated Group object and one or more Permission instances. 'set' assigns a full list of permissions, 'add' increases permissions, 'remove' decreases them, and 'clear' wipes all permissions from the group; all methods operate on Python iterables of Permission objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngroup.permissions.set([permission_list])\ngroup.permissions.add(permission, permission, ...)\ngroup.permissions.remove(permission, permission, ...)\ngroup.permissions.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Files Using Python's CSV Library in Django Views\nDESCRIPTION: A complete example demonstrating how to generate a CSV file in a Django view using Python's csv module. The code creates an HttpResponse with appropriate CSV headers and uses csv.writer to write rows to the response.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nfrom django.http import HttpResponse\n\n\ndef some_view(request):\n    # Create the HttpResponse object with the appropriate CSV header.\n    response = HttpResponse(\n        content_type=\"text/csv\",\n        headers={\"Content-Disposition\": 'attachment; filename=\"somefilename.csv\"'},\n    )\n\n    writer = csv.writer(response)\n    writer.writerow([\"First row\", \"Foo\", \"Bar\", \"Baz\"])\n    writer.writerow([\"Second row\", \"A\", \"B\", \"C\", '\"Testing\"', \"Here's a quote\"])\n\n    return response\n```\n\n----------------------------------------\n\nTITLE: Using Enum Functional API with TextChoices/IntegerChoices\nDESCRIPTION: Demonstrates creating Django choice enumerations using the Enum Functional API with `TextChoices` and `IntegerChoices`. It shows how `MedalType` (`TextChoices`) and `Place` (`IntegerChoices`) can be defined concisely, with labels automatically generated from the provided names. The resulting `.choices` attribute is shown for each.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> MedalType = models.TextChoices(\"MedalType\", \"GOLD SILVER BRONZE\")\n>>> MedalType.choices\n[('GOLD', 'Gold'), ('SILVER', 'Silver'), ('BRONZE', 'Bronze')]\n>>> Place = models.IntegerChoices(\"Place\", \"FIRST SECOND THIRD\")\n>>> Place.choices\n[(1, 'First'), (2, 'Second'), (3, 'Third')]\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-One Relationships in Django Models\nDESCRIPTION: Code examples demonstrating how to define a many-to-one relationship using ForeignKey. Shows both standard naming conventions and custom field naming options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Manufacturer(models.Model):\n    # ...\n    pass\n\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)\n    # ...\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Car(models.Model):\n    company_that_makes_it = models.ForeignKey(\n        Manufacturer,\n        on_delete=models.CASCADE,\n    )\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Annotating QuerySet with Arithmetic and Aggregation (Count) - Django ORM - Python\nDESCRIPTION: This snippet shows how to annotate a Django queryset with a computed field by combining arithmetic expressions and an aggregate (Count). The example calculates 'managers_required' for each Company by dividing 'num_employees' by 4 and adding the count of managers, in a single database query. It depends on django.db.models.Count and assumes appropriate numeric and related fields exist. The output is a queryset where each Company includes the computed 'managers_required' attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Count\n\nCompany.objects.annotate(\n    managers_required=(Count(\"num_employees\") / 4) + Count(\"num_managers\")\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Django Test Client Example\nDESCRIPTION: A complete example of a Django unit test class that demonstrates setting up and using the test client to check response status and context data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom django.test import Client\n\n\nclass SimpleTest(unittest.TestCase):\n    def setUp(self):\n        # Every test needs a client.\n        self.client = Client()\n\n    def test_details(self):\n        # Issue a GET request.\n        response = self.client.get(\"/customer/details/\")\n\n        # Check that the response is 200 OK.\n        self.assertEqual(response.status_code, 200)\n\n        # Check that the rendered context contains 5 customers.\n        self.assertEqual(len(response.context[\"customers\"]), 5)\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering a Basic Django Form with Help Text in Python\nDESCRIPTION: Shows how to define a simple `UserForm` using `django.forms.Form` and a `CharField` with a `help_text`. It then demonstrates instantiating the form and printing its default HTML representation, which includes the label, help text div, and input field with `aria-describedby` automatically pointing to the help text ID.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class UserForm(forms.Form):\n...     username = forms.CharField(max_length=255, help_text=\"e.g., user@example.com\")\n...\n>>> f = UserForm()\n>>> print(f)\n<div>\n<label for=\"id_username\">Username:</label>\n<div class=\"helptext\" id=\"id_username_helptext\">e.g., user@example.com</div>\n<input type=\"text\" name=\"username\" maxlength=\"255\" required aria-describedby=\"id_username_helptext\" id=\"id_username\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model Field with `choices` (Python)\nDESCRIPTION: Example of a Django model (`Person`) defining a `CharField` (`shirt_size`) with the `choices` attribute set using a dictionary. This allows storing a short code (e.g., 'L') while providing human-readable options ('Large') accessible via the auto-generated `get_FOO_display()` method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    SHIRT_SIZES = {\n        \"S\": \"Small\",\n        \"M\": \"Medium\",\n        \"L\": \"Large\",\n    }\n    name = models.CharField(max_length=60)\n    shirt_size = models.CharField(max_length=2, choices=SHIRT_SIZES)\n```\n\n----------------------------------------\n\nTITLE: Defining `etag` and `last_modified` Decorator Signatures in Python\nDESCRIPTION: Shows the function signatures for the shortcut decorators `django.views.decorators.http.etag` and `django.views.decorators.http.last_modified`. The `etag` decorator takes an `etag_func`, and `last_modified` takes a `last_modified_func`, allowing conditional processing based on only one of these values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\netag(etag_func)\nlast_modified(last_modified_func)\n```\n\n----------------------------------------\n\nTITLE: Integrating Profile Models with Django Admin\nDESCRIPTION: Shows how to add a profile model's fields to the user page in the Django admin using StackedInline and a custom UserAdmin class. This approach allows editing both User and Employee models in the same admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.models import User\n\nfrom my_user_profile_app.models import Employee\n\n\n# Define an inline admin descriptor for Employee model\n# which acts a bit like a singleton\nclass EmployeeInline(admin.StackedInline):\n    model = Employee\n    can_delete = False\n    verbose_name_plural = \"employee\"\n\n\n# Define a new User admin\nclass UserAdmin(BaseUserAdmin):\n    inlines = [EmployeeInline]\n\n\n# Re-register UserAdmin\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)\n```\n\n----------------------------------------\n\nTITLE: Combining QuerySets with OR Operator in Django ORM (Python)\nDESCRIPTION: Illustrates combining two Django QuerySets using the | (OR) operator, as well as constructing the same logic with Q objects. Requires importing Q from django.db.models. Inputs are filter conditions; outputs are QuerySets matching either condition.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nModel.objects.filter(x=1) | Model.objects.filter(y=2)\nfrom django.db.models import Q\n\nModel.objects.filter(Q(x=1) | Q(y=2))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom QuerySet with Manager Integration in Django 1.7\nDESCRIPTION: Example of creating a custom QuerySet with chainable methods that can be used directly as a Manager using the new as_manager() class method, allowing DRY code organization for model queries.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass FoodQuerySet(models.QuerySet):\n    def pizzas(self):\n        return self.filter(kind=\"pizza\")\n\n    def vegetarian(self):\n        return self.filter(vegetarian=True)\n\n\nclass Food(models.Model):\n    kind = models.CharField(max_length=50)\n    vegetarian = models.BooleanField(default=False)\n    objects = FoodQuerySet.as_manager()\n\n\nFood.objects.pizzas().vegetarian()\n```\n\n----------------------------------------\n\nTITLE: Decorating Individual Class-Based View Instances in URLconf (Python/Django)\nDESCRIPTION: This example demonstrates how to apply decorators to individual instances of class-based views in the URLconf. It shows login_required and permission_required decorators being applied to TemplateView and VoteView respectively.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required, permission_required\nfrom django.views.generic import TemplateView\n\nfrom .views import VoteView\n\nurlpatterns = [\n    path(\"about/\", login_required(TemplateView.as_view(template_name=\"secret.html\"))),\n    path(\"vote/\", permission_required(\"polls.can_vote\")(VoteView.as_view())),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Base HTML Template with Django Template Language\nDESCRIPTION: This snippet demonstrates how to create a base HTML template using Django's template language. It includes the use of static files, template blocks for title and content, and shows the basic structure of a reusable base template.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n<html lang=\"en\">\n<head>\n    <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n    <img src=\"{% static 'images/sitelogo.png' %}\" alt=\"Logo\">\n    {% block content %}{% endblock %}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Template with Inheritance in Django\nDESCRIPTION: Shows how to create a base 'skeleton' template that defines blocks for child templates to override. This example creates a two-column page layout with placeholders for title, sidebar, and content.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block sidebar %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Class-Based Views with Success Messages in Django\nDESCRIPTION: Example of using SuccessMessageMixin with a CreateView to automatically add success messages when a form is successfully processed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages.views import SuccessMessageMixin\nfrom django.views.generic.edit import CreateView\nfrom myapp.models import Author\n\n\nclass AuthorCreateView(SuccessMessageMixin, CreateView):\n    model = Author\n    success_url = \"/success/\"\n    success_message = \"%(name)s was created successfully\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Author CRUD Views in Django\nDESCRIPTION: Sets up URL patterns in `urls.py` using `django.urls.path`. It maps specific URL paths to the previously defined class-based views (`AuthorCreateView`, `AuthorUpdateView`, `AuthorDeleteView`) using their `.as_view()` method. Named URL patterns (`author-add`, `author-update`, `author-delete`) are defined for easy referencing.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom myapp.views import AuthorCreateView, AuthorDeleteView, AuthorUpdateView\n\nurlpatterns = [\n    # ...\n    path(\"author/add/\", AuthorCreateView.as_view(), name=\"author-add\"),\n    path(\"author/<int:pk>/\", AuthorUpdateView.as_view(), name=\"author-update\"),\n    path(\"author/<int:pk>/delete/\", AuthorDeleteView.as_view(), name=\"author-delete\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Admin for Many-to-Many Relationship\nDESCRIPTION: Sets up an admin interface for Group model with an inline for the many-to-many relationship to Person. Uses Group.members.through to access the auto-generated intermediate model and excludes the members field to avoid duplicate widgets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom myapp.models import Group\n\n\nclass MembershipInline(admin.TabularInline):\n    model = Group.members.through\n\n\nclass GroupAdmin(admin.ModelAdmin):\n    inlines = [\n        MembershipInline,\n    ]\n    exclude = [\"members\"]\n\n\nadmin.site.register(Group, GroupAdmin)\n```\n\n----------------------------------------\n\nTITLE: Action Decorator Usage in Django Admin\nDESCRIPTION: Examples of using the @admin.action decorator to configure custom actions with permissions and descriptions\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@admin.action(\n    permissions=[\"publish\"],\n    description=\"Mark selected stories as published\",\n)\ndef make_published(self, request, queryset):\n    queryset.update(status=\"p\")\n\n@admin.action\ndef make_inactive(self, request, queryset):\n    queryset.update(is_active=False)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response from Django Test Client\nDESCRIPTION: Demonstrates how to parse JSON response content using the json() method of the Response object. This example shows accessing a JSON value with a key of 'name' from the response data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> response = client.get(\"/foo/\")\n>>> response.json()[\"name\"]\n'Arthur'\n```\n\n----------------------------------------\n\nTITLE: Defining Author Model in Django\nDESCRIPTION: Example of defining an Author model in Django with a name field and a get_absolute_url method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.urls import reverse\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=200)\n\n    def get_absolute_url(self):\n        return reverse(\"author-detail\", kwargs={\"pk\": self.pk})\n```\n\n----------------------------------------\n\nTITLE: Declaring Always-computed Model Fields with GeneratedField in Django - Python\nDESCRIPTION: Demonstrates how to use Django 5.0's `GeneratedField` to create a model field whose value is always derived from other fields at the database level. Requires import of `F` expressions and a supporting database backend. Key parameters include `expression` (computation formula), `output_field` (type of computed field), and `db_persist` (whether to store computed value physically). Input: an instance of model Square; output: area is always the square of side. Limitations: Behavior and support may vary by backend.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\\nfrom django.db.models import F\\n\\n\\nclass Square(models.Model):\\n    side = models.IntegerField()\\n    area = models.GeneratedField(\\n        expression=F(\\\"side\\\") * F(\\\"side\\\"),\\n        output_field=models.BigIntegerField(),\\n        db_persist=True,\\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Formset Validation Example\nDESCRIPTION: Demonstrates invalid formset due to missing management data\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndata = {\n    \"form-0-title\": \"Test\",\n    \"form-0-pub_date\": \"\",\n}\nformset = ArticleFormSet(data)\nformset.is_valid()\nFalse\n```\n\n----------------------------------------\n\nTITLE: Overriding get_formset_kwargs in ModelAdmin Python\nDESCRIPTION: This snippet demonstrates overriding the `get_formset_kwargs` method in a Django `ModelAdmin` subclass. The purpose is to customize the keyword arguments passed to the formset's constructor, specifically adding the current `request` object into the `form_kwargs` dictionary, making it accessible within the formset's forms. It utilizes dictionary unpacking (`**`) to merge the parent class's kwargs with the custom ones.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_formset_kwargs(self, request, obj, inline, prefix):\n        return {\n            **super().get_formset_kwargs(request, obj, inline, prefix),\n            \"form_kwargs\": {\"request\": request},\n        }\n```\n\n----------------------------------------\n\nTITLE: Using AsWKT to Convert Geometry to WKT in Django ORM (Python)\nDESCRIPTION: This Python code snippet demonstrates how to use the GeoDjango `AsWKT` database function within a Django ORM query. It annotates a `City` model instance with a new field 'wkt', which contains the Well-Known Text (WKT) representation of the 'point' geometry field for the specified city ('Chelyabinsk'). Requires a Django project with GeoDjango enabled and a `City` model having 'point' and 'name' fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> City.objects.annotate(wkt=AsWKT(\"point\")).get(name=\"Chelyabinsk\").wkt\n'POINT (55.137555 61.451728)'\n```\n\n----------------------------------------\n\nTITLE: Using TrigramSimilarity for Fuzzy Text Matching\nDESCRIPTION: Demonstrates how to use TrigramSimilarity to find matching records based on text similarity. This example searches for authors with names similar to a test string, filtering by a similarity threshold.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.postgres.search import TrigramSimilarity\n>>> Author.objects.create(name=\"Katy Stevens\")\n>>> Author.objects.create(name=\"Stephen Keats\")\n>>> test = \"Katie Stephens\"\n>>> Author.objects.annotate(\n...     similarity=TrigramSimilarity(\"name\", test),\n... ).filter(\n...     similarity__gt=0.3\n... ).order_by(\"-similarity\")\n[<Author: Katy Stevens>, <Author: Stephen Keats>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Router for Multiple Databases in Django\nDESCRIPTION: A router class that controls database cache operations when using multiple databases. This router directs read operations to a replica database and write operations to a primary database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass CacheRouter:\n    \"\"\"A router to control all database cache operations\"\"\"\n\n    def db_for_read(self, model, **hints):\n        \"All cache read operations go to the replica\"\n        if model._meta.app_label == \"django_cache\":\n            return \"cache_replica\"\n        return None\n\n    def db_for_write(self, model, **hints):\n        \"All cache write operations go to primary\"\n        if model._meta.app_label == \"django_cache\":\n            return \"cache_primary\"\n        return None\n\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        \"Only install the cache model on primary\"\n        if app_label == \"django_cache\":\n            return db == \"cache_primary\"\n        return None\n```\n\n----------------------------------------\n\nTITLE: Updating Foreign Key Fields in Bulk with Django\nDESCRIPTION: Demonstrates how to update a foreign key field for multiple objects in a single database operation using the QuerySet update method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n>>> b = Blog.objects.get(pk=1)\n\n# Change every Entry so that it belongs to this Blog.\n>>> Entry.objects.update(blog=b)\n```\n\n----------------------------------------\n\nTITLE: Filtered Book Price Average\nDESCRIPTION: Shows how to combine filtering and aggregation to get average price for specific books.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nBook.objects.filter(name__startswith=\"Django\").aggregate(Avg(\"price\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Models in Django\nDESCRIPTION: This snippet demonstrates how to create geographic models in Django using GeoDjango. It defines two models: Zipcode with a polygon field and Elevation with a raster field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/model-api.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.gis.db import models\n\n\nclass Zipcode(models.Model):\n    code = models.CharField(max_length=5)\n    poly = models.PolygonField()\n\n\nclass Elevation(models.Model):\n    name = models.CharField(max_length=100)\n    rast = models.RasterField()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HttpRequest.get_preferred_type Usage in Django (Python)\nDESCRIPTION: Shows sample cases for content negotiation using get_preferred_type(), based on the Accept header of the incoming HTTP request. Inputs: list of acceptable media types; outputs: matched preferred media type string or None. Examples assume certain Accept headers are set by the client, and demonstrate how the method chooses the most appropriate type.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> request.get_preferred_type([\"text/html\", \"application/json\"])\n\"text/html\"\n>>> request.get_preferred_type([\"application/json\", \"text/plain\"])\n\"application/json\"\n>>> request.get_preferred_type([\"application/xml\", \"text/plain\"])\nNone\n\n```\n\n----------------------------------------\n\nTITLE: Using Callable Functions in Django ModelAdmin list_display\nDESCRIPTION: Example showing how to use a callable function with the admin.display decorator in list_display to create custom display columns.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@admin.display(description=\"Name\")\ndef upper_case_name(obj):\n    return f\"{obj.first_name} {obj.last_name}\".upper()\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [upper_case_name]\n```\n\n----------------------------------------\n\nTITLE: Has_keys Lookup for JSONField in Django\nDESCRIPTION: Shows the has_keys lookup which returns objects where all the given keys exist in the top-level of the JSONField data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\n<Dog: Rufus>\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\n<Dog: Meg>\n>>> Dog.objects.filter(data__has_keys=[\"breed\", \"owner\"])\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Price Across All Books using aggregate() (pycon)\nDESCRIPTION: Shows how to calculate the average value of the `price` field across all `Book` objects in the database. It appends the `aggregate()` method to the `QuerySet` returned by `Book.objects.all()` and uses the `Avg` aggregation function imported from `django.db.models`. The result is a dictionary where the key is automatically generated (`price__avg`) and the value is the computed average.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Avg\n>>> Book.objects.all().aggregate(Avg(\"price\"))\n{'price__avg': 34.35}\n```\n\n----------------------------------------\n\nTITLE: Defining an Author Model with get_absolute_url in Django\nDESCRIPTION: Defines an `Author` model using `django.db.models.Model`. It includes a `name` CharField. Crucially, it implements the `get_absolute_url` method, which uses `django.urls.reverse` to return the URL for the detail view of a specific author instance, identified by its primary key (`pk`). This method is often used by generic views for redirection after successful updates or creations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.urls import reverse\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=200)\n\n    def get_absolute_url(self):\n        return reverse(\"author-detail\", kwargs={\"pk\": self.pk})\n```\n\n----------------------------------------\n\nTITLE: Django Session Comment Handling Example\nDESCRIPTION: Shows how to implement a basic comment system using Django sessions to prevent multiple submissions from the same user.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef post_comment(request, new_comment):\n    if request.session.get(\"has_commented\", False):\n        return HttpResponse(\"You've already commented.\")\n    c = comments.Comment(comment=new_comment)\n    c.save()\n    request.session[\"has_commented\"] = True\n    return HttpResponse(\"Thanks for your comment!\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Site in a Django View (Python)\nDESCRIPTION: Shows the common pattern of retrieving the current `Site` object within a Django view function using `Site.objects.get_current()`. This approach involves a potential database hit (or cache lookup) within the view. Depends on `django.contrib.sites.models.Site`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.models import Site\n\n\ndef my_view(request):\n    site = Site.objects.get_current()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Model.refresh_from_db with select_related in Django (Python)\nDESCRIPTION: Demonstrates using the `from_queryset` argument with `refresh_from_db` to include `select_related('related_field')` in the reloading query. This pre-fetches the specified related object, ensuring it remains cached on the instance after the refresh, which would otherwise clear cached relations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nobj.refresh_from_db(from_queryset=MyModel.objects.select_related(\"related_field\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Restrictions in Python\nDESCRIPTION: Example of subclassing AuthenticationForm to implement custom login restrictions based on username and active status.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nclass PickyAuthenticationForm(AuthenticationForm):\n    def confirm_login_allowed(self, user):\n        if not user.is_active:\n            raise ValidationError(\n                _(\"This account is inactive.\"),\n                code=\"inactive\",\n            )\n        if user.username.startswith(\"b\"):\n            raise ValidationError(\n                _(\"Sorry, accounts starting with 'b' aren't welcome here.\"),\n                code=\"no_b_users\",\n            )\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Admin Action with ModelAdmin in Django\nDESCRIPTION: This snippet shows how to register the custom 'make_published' action with the ArticleAdmin class. It also sets up list_display and ordering options for the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom myapp.models import Article\n\n@admin.action(description=\"Mark selected stories as published\")\ndef make_published(modeladmin, request, queryset):\n    queryset.update(status=\"p\")\n\nclass ArticleAdmin(admin.ModelAdmin):\n    list_display = [\"title\", \"status\"]\n    ordering = [\"title\"]\n    actions = [make_published]\n\nadmin.site.register(Article, ArticleAdmin)\n```\n\n----------------------------------------\n\nTITLE: Filtering on Annotations\nDESCRIPTION: Demonstrates filtering QuerySets based on annotation values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nBook.objects.annotate(num_authors=Count(\"authors\")).filter(num_authors__gt=1)\n```\n\n----------------------------------------\n\nTITLE: Using isolate_apps Decorator for Model Definition Testing in Django\nDESCRIPTION: This code snippet illustrates how to use the isolate_apps decorator in a Django test case. It demonstrates defining test models with automatic and explicit app label assignment within an isolated environment.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.test import SimpleTestCase\nfrom django.test.utils import isolate_apps\n\n\nclass TestModelDefinition(SimpleTestCase):\n    @isolate_apps(\"app_label\", \"other_app_label\")\n    def test_model_definition(self):\n        # This model automatically receives app_label='app_label'\n        class TestModel(models.Model):\n            pass\n\n        class OtherAppModel(models.Model):\n            class Meta:\n                app_label = \"other_app_label\"\n\n        ...\n```\n\n----------------------------------------\n\nTITLE: Applying striptags Filter in Django Templates\nDESCRIPTION: The striptags filter attempts to strip all HTML tags from the input. Note that it doesn't guarantee HTML-safe output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_88\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|striptags }}\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized View Decorators from Middleware\nDESCRIPTION: Similar to decorator_from_middleware but returns a function that accepts arguments to be passed to the middleware class, allowing for customizable middleware-based decorators like cache_page.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndecorator_from_middleware_with_args(middleware_class)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Minute - Django ORM (Python)\nDESCRIPTION: Filters QuerySets to match specific minute values or ranges in datetime and time fields, using the '__minute' lookup. Inputs are integers from 0 to 59; outputs are QuerySets filtered for the minute component. Works on DateTimeField or TimeField, chaining range queries where needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_118\n\nLANGUAGE: python\nCODE:\n```\nEvent.objects.filter(timestamp__minute=29)\nEvent.objects.filter(time__minute=46)\nEvent.objects.filter(timestamp__minute__gte=29)\n```\n\n----------------------------------------\n\nTITLE: Using a Callable for Dynamic Initial Field Values\nDESCRIPTION: Illustrates setting the `initial` argument of a Django form field (`DateField`) to a callable (e.g., `datetime.date.today`). The callable is executed only when the unbound form is rendered, allowing for dynamic initial values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import datetime\n>>> class DateForm(forms.Form):\n...     day = forms.DateField(initial=datetime.date.today)\n...\n>>> print(DateForm())\n<div><label for=\"id_day\">Day:</label><input type=\"text\" name=\"day\" value=\"2023-02-11\" required id=\"id_day\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Labels in a Django Form\nDESCRIPTION: Demonstrates defining a Django `Form` (`CommentForm`) and using the `label` argument within field definitions (`CharField`, `URLField`) to specify human-friendly labels. The example prints the rendered HTML of the form, showing the custom labels.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField(label=\"Your name\")\n...     url = forms.URLField(label=\"Your website\", required=False)\n...     comment = forms.CharField()\n...\n>>> f = CommentForm(auto_id=False)\n>>> print(f)\n<div>Your name:<input type=\"text\" name=\"name\" required></div>\n<div>Your website:<input type=\"url\" name=\"url\"></div>\n<div>Comment:<input type=\"text\" name=\"comment\" required></div>\n```\n\n----------------------------------------\n\nTITLE: Using Cycle Tag for Alternating Values in a Loop (Django)\nDESCRIPTION: Illustrates the basic usage of the `{% cycle %}` tag within a `{% for %}` loop to alternate between string literals ('row1', 'row2'). This is commonly used for applying alternating CSS classes to table rows or list items.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% for o in some_list %}\n    <tr class=\"{% cycle 'row1' 'row2' %}\">\n        ...\n    </tr>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Host with Unix Socket\nDESCRIPTION: Example showing how to configure the `HOST` setting within the MySQL database configuration dictionary in Django to use a Unix socket for connection instead of a network host and port. This is done by providing a path starting with a forward slash ('/').\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"HOST\": \"/var/run/mysql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local-memory Cache in Django\nDESCRIPTION: Setting up an in-memory cache backend in Django settings. This provides speed advantages but is per-process and generally not suitable for production environments.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"unique-snowflake\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom User Model with Django Admin\nDESCRIPTION: Shows how to register a custom User model with Django's admin interface using the UserAdmin class. This enables administration of the custom user model through Django's admin site.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin\nfrom .models import User\n\nadmin.site.register(User, UserAdmin)\n```\n\n----------------------------------------\n\nTITLE: Client-side Caching for i18n JavaScript Catalog in Django\nDESCRIPTION: Demonstrates how to implement client-side caching for the JavaScriptCatalog view using conditional decorators in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\nfrom django.views.decorators.http import last_modified\nfrom django.views.i18n import JavaScriptCatalog\n\nlast_modified_date = timezone.now()\n\nurlpatterns = [\n    path(\n        \"jsi18n/\",\n        last_modified(lambda req, **kw: last_modified_date)(\n            JavaScriptCatalog.as_view()\n        ),\n        name=\"javascript-catalog\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Backend in Django\nDESCRIPTION: Sets the backend used for sending emails, defaulting to the standard SMTP backend ('django.core.mail.backends.smtp.EmailBackend'). Other backends (e.g., console, file, in-memory) can be specified.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n```\n\n----------------------------------------\n\nTITLE: Defining models with foreign key relationships in Django\nDESCRIPTION: Shows how to define Django models with ForeignKey relationships that can be used with select_related() to optimize database queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass City(models.Model):\n    # ...\n    pass\n\n\nclass Person(models.Model):\n    # ...\n    hometown = models.ForeignKey(\n        City,\n        on_delete=models.SET_NULL,\n        blank=True,\n        null=True,\n    )\n\n\nclass Book(models.Model):\n    # ...\n    author = models.ForeignKey(Person, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Superuser\nDESCRIPTION: This console command creates a superuser for the Django admin interface. It prompts for a username, email address, and password.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigram Similarity Search with PostgreSQL in Django\nDESCRIPTION: Demonstrates how to use PostgreSQL's trigram similarity comparison to find similar names based on letter sequences. This method compares combinations of three letters between search and source strings.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Author.objects.filter(name__unaccent__lower__trigram_similar=\"Hélène\")\n[<Author: Helen Mirren>, <Author: Hélène Joy>]\n```\n\n----------------------------------------\n\nTITLE: Configuring INSTALLED_APPS for Django Auth (Python)\nDESCRIPTION: Specifies the required applications within the `INSTALLED_APPS` setting in `settings.py` to enable Django's authentication framework. `django.contrib.auth` provides the core auth system, and `django.contrib.contenttypes` enables model-associated permissions. This configuration is typically included by default when starting a new Django project.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# settings.py\nINSTALLED_APPS = [\n    # ...\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Registering a Django Template Tag via Function Call (Python)\nDESCRIPTION: This Python code demonstrates registering a custom Django template tag using the `tag()` method of a `Library` instance (named `register`). It associates the tag name 'current_time' (a string) with its corresponding compilation function `do_current_time`.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nregister.tag(\"current_time\", do_current_time)\n```\n\n----------------------------------------\n\nTITLE: Converting Distance Units in GeoDjango\nDESCRIPTION: Shows how to convert distances between different units by accessing unit attributes of Distance objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(d1.mi)  # Converting 5 kilometers to miles\n3.10685596119\n>>> print(d2.km)  # Converting 5 miles to kilometers\n8.04672\n```\n\n----------------------------------------\n\nTITLE: Following nested foreign keys with select_related in Django\nDESCRIPTION: Demonstrates how to use select_related() to follow nested foreign key relationships, reducing multiple database queries into a single query with JOINs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# Hits the database with joins to the author and hometown tables.\nb = Book.objects.select_related(\"author__hometown\").get(id=4)\np = b.author  # Doesn't hit the database.\nc = p.hometown  # Doesn't hit the database.\n\n# Without select_related()...\nb = Book.objects.get(id=4)  # Hits the database.\np = b.author  # Hits the database.\nc = p.hometown  # Hits the database.\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs for Django's set_language view\nDESCRIPTION: Shows how to include Django's built-in set_language view in URLconf to enable language switching functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\npath(\"i18n/\", include(\"django.conf.urls.i18n\")),\n```\n\n----------------------------------------\n\nTITLE: Using SearchQuery with Different Search Types in Django\nDESCRIPTION: Shows various ways to use SearchQuery with different search types, including 'plain', 'phrase', 'raw', and 'websearch'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchQuery\n>>> SearchQuery(\"red tomato\")  # two keywords\n>>> SearchQuery(\"tomato red\")  # same results as above\n>>> SearchQuery(\"red tomato\", search_type=\"phrase\")  # a phrase\n>>> SearchQuery(\"tomato red\", search_type=\"phrase\")  # a different phrase\n>>> SearchQuery(\"'tomato' & ('red' | 'green')\", search_type=\"raw\")  # boolean operators\n>>> SearchQuery(\n...     \"'tomato' ('red' OR 'green')\", search_type=\"websearch\"\n... )  # websearch operators\n```\n\n----------------------------------------\n\nTITLE: Using cached attributes vs callable attributes in Django ORM\nDESCRIPTION: Demonstrates the difference between accessing cached attributes and callable attributes in Django ORM. Non-callable attributes are cached after first access, while callable attributes trigger database queries on each call.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> entry = Entry.objects.get(id=1)\n>>> entry.blog  # Blog object is retrieved at this point\n>>> entry.blog  # cached version, no DB access\n```\n\n----------------------------------------\n\nTITLE: Using blocktranslate tag with pluralization in Django templates\nDESCRIPTION: Demonstrates how to use the {% blocktranslate %} tag with pluralization in Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_25\n\nLANGUAGE: html+django\nCODE:\n```\n{% blocktranslate count counter=list|length %}\nThere is only one {{ name }} object.\n{% plural %}\nThere are {{ counter }} {{ name }} objects.\n{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Sending Mass Emails with Django send_mass_mail()\nDESCRIPTION: Demonstrates how to send multiple emails efficiently using a single connection with send_mass_mail(). This example sends two different messages to two different sets of recipients.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessage1 = (\n    \"Subject here\",\n    \"Here is the message\",\n    \"from@example.com\",\n    [\"first@example.com\", \"other@example.com\"],\n)\nmessage2 = (\n    \"Another Subject\",\n    \"Here is another message\",\n    \"from@example.com\",\n    [\"second@test.com\"],\n)\nsend_mass_mail((message1, message2), fail_silently=False)\n```\n\n----------------------------------------\n\nTITLE: Reversible Data Changes with RunSQL in Django (Python)\nDESCRIPTION: Shows how to make a migration operation reversible by supplying both SQL and reverse_sql for RunSQL. When rolling back, the specified reverse SQL will delete the inserted data. Useful for robust migration practices. Requirements: Django migrations; Inputs: SQL and reverse SQL as lists of tuples.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmigrations.RunSQL(\n    sql=[(\"INSERT INTO musician (name) VALUES (%s);\", [\"Reinhardt\"])],\n    reverse_sql=[(\"DELETE FROM musician where name=%s;\", [\"Reinhardt\"])],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Upper Function in Django ORM\nDESCRIPTION: Demonstrates converting text to uppercase in the database\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Upper\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(name_upper=Upper(\"name\")).get()\n>>> print(author.name_upper)\nMARGARET SMITH\n```\n\n----------------------------------------\n\nTITLE: Configuring Django settings for Daphne integration\nDESCRIPTION: Django settings configuration to enable Daphne integration with the runserver command. Adds daphne to INSTALLED_APPS and configures the ASGI_APPLICATION setting to point to the project's ASGI application.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/daphne.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    \"daphne\",\n    ...,\n]\n\nASGI_APPLICATION = \"myproject.asgi.application\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Objects as a Dictionary with in_bulk() Method\nDESCRIPTION: This snippet demonstrates using in_bulk() to retrieve model instances by a list of field values, returned as a dictionary mapping values to objects. It supports custom field lookups via the field_name parameter and includes examples with primary key and slug fields. It handles empty input lists gracefully and mentions the async in_bulk() variant. Dependencies include Django ORM and model definitions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_79\n\nLANGUAGE: Python\nCODE:\n```\nBlog.objects.in_bulk([1])\nBlog.objects.in_bulk([1, 2])\nBlog.objects.in_bulk([])\nBlog.objects.in_bulk()\nBlog.objects.in_bulk([\"beatles_blog\"], field_name=\"slug\")\nBlog.objects.distinct(\"name\").in_bulk(field_name=\"name\")\n```\n\n----------------------------------------\n\nTITLE: Saving Objects in Model Formset in Python\nDESCRIPTION: Demonstrates how to save data from a model formset to the database, including options for not saving immediately or handling many-to-many relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_26\n\nLANGUAGE: pycon\nCODE:\n```\n# Create a formset instance with POST data.\n>>> formset = AuthorFormSet(request.POST)\n\n# Assuming all is valid, save the data.\n>>> instances = formset.save()\n```\n\nLANGUAGE: pycon\nCODE:\n```\n# don't save to the database\n>>> instances = formset.save(commit=False)\n>>> for instance in instances:\n...     # do something with instance\n...     instance.save()\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Base Classes in Django Models\nDESCRIPTION: Shows how to create an abstract base class in Django models to share common fields and behavior across multiple model classes without creating a database table for the base class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n\n\nclass Student(CommonInfo):\n    home_group = models.CharField(max_length=5)\n```\n\n----------------------------------------\n\nTITLE: Multiple Field Validation Errors in Django\nDESCRIPTION: Shows how to raise validation errors for multiple fields simultaneously using a dictionary of ValidationError objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nraise ValidationError(\n    {\n        \"title\": ValidationError(_(\"Missing title.\"), code=\"required\"),\n        \"pub_date\": ValidationError(_(\"Invalid date.\"), code=\"invalid\"),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating and Querying Author Ratings in Django ORM\nDESCRIPTION: This snippet demonstrates how to use the annotate() method to calculate the average rating for each author's books, and then use values() to return the author's name and average rating. The order of annotate() and values() is significant in determining the grouping and output.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Author.objects.annotate(average_rating=Avg(\"book__rating\")).values(\n...     \"name\", \"average_rating\"\n... )\n```\n\n----------------------------------------\n\nTITLE: Documentation of exists() and aexists() methods in Django ORM\nDESCRIPTION: Describes how exists() checks if a QuerySet contains any objects, returning True or False swiftly by performing a minimal query. aexists() performs the same asynchronously. Useful for large QuerySets when verifying data presence without retrieving all objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_86\n\nLANGUAGE: Python\nCODE:\n```\nReturns ``True`` if the :class:`.QuerySet` contains any results, and ``False`` if not.\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in Django\nDESCRIPTION: Example configuration for the `DATABASES` setting in Django to use an SQLite database. It sets the `ENGINE` to the SQLite backend and the `NAME` to the desired database file path. This is the simplest database setup.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": \"mydatabase\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Relationship to ManyToManyField in Django (pycon)\nDESCRIPTION: Associates an existing `Publication` instance (`p1`) with an existing `Article` instance (`a1`) using the `add()` method on the `ManyToManyField` manager (`publications`).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a1.publications.add(p1)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing for a Django Class-Based View in Python\nDESCRIPTION: Defines a URL pattern using `django.urls.path` to route requests to the `/publishers/` URL to the `PublisherListView`. It calls the `.as_view()` class method on `PublisherListView` to get a callable view function suitable for Django's URL dispatcher.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom django.urls import path\nfrom books.views import PublisherListView\n\nurlpatterns = [\n    path(\"publishers/\", PublisherListView.as_view()),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a JSONField in Django Models\nDESCRIPTION: Defines a field for storing JSON encoded data, represented in Python using native types (dict, list, str, int, float, bool, None). Supported on MariaDB, MySQL, Oracle, PostgreSQL, and SQLite (with JSON1 extension). Allows specifying custom `encoder` (JSONEncoder subclass) and `decoder` (JSONDecoder subclass) for serialization/deserialization. Requires callable defaults (e.g., `dict`) to avoid shared mutable instances. B-tree indexing (`db_index=True` or `Index`) is generally not optimal; GinIndex is recommended for PostgreSQL. Uses `jsonb` type on PostgreSQL. Oracle does not support storing JSON scalar values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n.. class:: JSONField(encoder=None, decoder=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom RedirectView in Django\nDESCRIPTION: Demonstrates how to create a RedirectView subclass that performs a custom action before redirecting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_object_or_404\nfrom django.views.generic.base import RedirectView\n\nfrom articles.models import Article\n\n\nclass ArticleCounterRedirectView(RedirectView):\n    permanent = False\n    query_string = True\n    pattern_name = \"article-detail\"\n\n    def get_redirect_url(self, *args, **kwargs):\n        article = get_object_or_404(Article, pk=kwargs[\"pk\"])\n        article.update_counter()\n        return super().get_redirect_url(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configuring App Directories Template Loader in Django\nDESCRIPTION: Demonstrates how to enable the app_directories loader which looks for templates in the 'templates' subdirectory of each installed app.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"APP_DIRS\": True,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Class-Based View with a Class Attribute in Django\nDESCRIPTION: This example demonstrates defining a class attribute (`greeting`) within a class-based view (`GreetingView`). The `get` method accesses this attribute using `self.greeting` to customize the `HttpResponse`. This showcases how class attributes can be used for configuration within views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass GreetingView(View):\n    greeting = \"Good Day\"\n\n    def get(self, request):\n        return HttpResponse(self.greeting)\n```\n\n----------------------------------------\n\nTITLE: Customizing Django's test client\nDESCRIPTION: This code shows how to customize Django's test client by subclassing Client and using the client_class attribute in a TestCase.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.test import Client, TestCase\n\n\nclass MyTestClient(Client):\n    # Specialized methods for your environment\n    ...\n\n\nclass MyTest(TestCase):\n    client_class = MyTestClient\n\n    def test_my_stuff(self):\n        # Here self.client is an instance of MyTestClient...\n        call_some_test_code()\n```\n\n----------------------------------------\n\nTITLE: Publisher Book Count Annotation\nDESCRIPTION: Shows how to annotate publishers with their total book count using reverse relationship traversal.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Avg, Count, Min, Sum\nPublisher.objects.annotate(Count(\"book\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AdminSite Subclass (Python)\nDESCRIPTION: This code shows how to create a custom AdminSite subclass with a custom site header and register a model with it.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_79\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom .models import MyModel\n\n\nclass MyAdminSite(admin.AdminSite):\n    site_header = \"Monty Python administration\"\n\n\nadmin_site = MyAdminSite(name=\"myadmin\")\nadmin_site.register(MyModel)\n```\n\n----------------------------------------\n\nTITLE: Testing Email Content with EmailMultiAlternatives\nDESCRIPTION: Example showing how to test email content using the body_contains method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef test_contains_email_content(self):\n    subject = \"Hello World\"\n    from_email = \"from@example.com\"\n    to = \"to@example.com\"\n    msg = EmailMultiAlternatives(subject, \"I am content.\", from_email, [to])\n    msg.attach_alternative(\"<p>I am content.</p>\", \"text/html\")\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch with Custom QuerySet for Ordering\nDESCRIPTION: Shows how to use Prefetch with a custom queryset to control ordering of the prefetched results. This example orders the toppings by name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n>>> Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas__toppings\", queryset=Toppings.objects.order_by(\"name\"))\n... )\n```\n\n----------------------------------------\n\nTITLE: Exploring Layer and Field Metadata with GeoDjango GDAL in Python\nDESCRIPTION: Illustrates how to explore metadata for a shapefile using GeoDjango's GDAL Layer object in Python. Snippets show retrieving layer count, accessing the first layer, examining geometry types, counts, allowable fields, OGR field types, attribute field names, and the associated spatial reference (including PROJ string). Requires GeoDjango and a properly loaded DataSource object. Outputs include metadata about the shapefile and format of fields supported by the data layer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> print(len(ds))\n1\n>>> lyr = ds[0]\n>>> print(lyr)\nTM_WORLD_BORDERS-0.3\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(lyr.geom_type)\nPolygon\n>>> print(len(lyr))\n246\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> srs = lyr.srs\n>>> print(srs)\nGEOGCS[\"WGS 84\",\nDATUM[\"WGS_1984\",\n    SPHEROID[\"WGS 84\",6378137,298.257223563,\n        AUTHORITY[\"EPSG\",\"7030\"]],\n    AUTHORITY[\"EPSG\",\"6326\"]],\nPRIMEM[\"Greenwich\",0,\n    AUTHORITY[\"EPSG\",\"8901\"]],\nUNIT[\"degree\",0.0174532925199433,\n    AUTHORITY[\"EPSG\",\"9122\"]],\nAXIS[\"Latitude\",NORTH],\nAXIS[\"Longitude\",EAST],\nAUTHORITY[\"EPSG\",\"4326\"]]\n>>> srs.proj  # PROJ representation\n'+proj=longlat +datum=WGS84 +no_defs'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> print(lyr.fields)\n['FIPS', 'ISO2', 'ISO3', 'UN', 'NAME', 'AREA', 'POP2005', 'REGION', 'SUBREGION', 'LON', 'LAT']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> [fld.__name__ for fld in lyr.field_types]\n['OFTString', 'OFTString', 'OFTString', 'OFTInteger', 'OFTString', 'OFTInteger', 'OFTInteger64', 'OFTInteger', 'OFTInteger', 'OFTReal', 'OFTReal']\n```\n\n----------------------------------------\n\nTITLE: Returning Related Model Data as Dictionaries (FK by Field Name) Python\nDESCRIPTION: Uses values() specifying a ForeignKey field name directly ('blog'). The resulting dictionary uses the field name ('blog') as the key, storing the primary key of the related object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.values(\"blog\")\n```\n\n----------------------------------------\n\nTITLE: Database Type Conversion Methods in Django Field\nDESCRIPTION: Methods for converting between Python values and database values, including get_prep_value for query preparation and from_db_value for database loading.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\ndef get_prep_value(self, value):\n    # Convert value for query parameter\n    return prepared_value\n\ndef get_db_prep_value(self, value, connection, prepared=False):\n    if prepared:\n        return value\n    return self.get_prep_value(value)\n\ndef from_db_value(self, value, expression, connection):\n    # Convert database value to Python object\n    return python_value\n```\n\n----------------------------------------\n\nTITLE: Running Django inspectdb Utility via Shell\nDESCRIPTION: This code snippet demonstrates how to run the Django inspectdb management command from the shell to automatically generate model definitions by introspecting an existing database's schema. It requires an initialized Django project and access credentials for the database already specified in the settings. Expected output is direct to the console, unless redirected; the standard input is not used.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py inspectdb\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionManagementError Exception in Django (Python)\nDESCRIPTION: Defines the `TransactionManagementError` exception class, located within the `django.db.transaction` module. This exception is raised to indicate any problems encountered during database transaction handling in Django applications.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. exception:: TransactionManagementError\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Django Template Filter with Auto-escaping\nDESCRIPTION: This snippet demonstrates how to create a custom Django template filter that emphasizes the first character of a string. It handles auto-escaping properly by using the needs_autoescape flag and conditional_escape function.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django import template\nfrom django.utils.html import conditional_escape\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()\n\n\n@register.filter(needs_autoescape=True)\ndef initial_letter_filter(text, autoescape=True):\n    first, other = text[0], text[1:]\n    if autoescape:\n        esc = conditional_escape\n    else:\n        esc = lambda x: x\n    result = \"<strong>%s</strong>%s\" % (esc(first), esc(other))\n    return mark_safe(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Backend in Django Settings\nDESCRIPTION: Example configuration for the file-based email backend with a specified file path.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"django.core.mail.backends.filebased.EmailBackend\"\nEMAIL_FILE_PATH = \"/tmp/app-messages\"  # change this to a proper location\n```\n\n----------------------------------------\n\nTITLE: Prefetching Foreign Key Relationships with Nested Fields\nDESCRIPTION: Shows how to prefetch a foreign key relationship (best_pizza) and its related toppings. This will result in 3 database queries - one for restaurants, one for best pizzas, and one for toppings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n>>> Restaurant.objects.prefetch_related(\"best_pizza__toppings\")\n```\n\n----------------------------------------\n\nTITLE: Using SearchVector for Multi-field PostgreSQL Search in Django\nDESCRIPTION: Demonstrates how to use SearchVector to search across multiple fields and related models in Django with PostgreSQL. This enables more comprehensive search capabilities by combining different text sources.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.annotate(\n...     search=SearchVector(\"blog__tagline\", \"body_text\"),\n... ).filter(search=\"cheese\")\n[\n    <Entry: Cheese on Toast recipes>,\n    <Entry: Pizza Recipes>,\n    <Entry: Dairy farming in Argentina>,\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Autocomplete ForeignKey in Django Admin - Python\nDESCRIPTION: The example shows configuration of autocomplete_fields in a Django ModelAdmin to use Select2-powered asynchronous search widgets for a ForeignKey relationship. It also demonstrates ordering and search_fields setup in the related model's ModelAdmin, as required for search functionality. Dependencies include Django and Select2 integration in the admin. Autocomplete improves admin performance and usability for tables with large numbers of related records.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass QuestionAdmin(admin.ModelAdmin):\n    ordering = [\"date_created\"]\n    search_fields = [\"question_text\"]\n\n\nclass ChoiceAdmin(admin.ModelAdmin):\n    autocomplete_fields = [\"question\"]\n```\n\n----------------------------------------\n\nTITLE: Performing Reverse URL Lookup in Django Python Code\nDESCRIPTION: This snippet shows how to use the reverse() function in Django Python code to perform a reverse URL lookup. It demonstrates redirecting to a URL based on a dynamic year value.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\n\n\ndef redirect_to_year(request):\n    # ...\n    year = 2006\n    # ...\n    return HttpResponseRedirect(reverse(\"news-year-archive\", args=(year,)))\n```\n\n----------------------------------------\n\nTITLE: Using a Database Query Blocker Wrapper in a Django View (Python)\nDESCRIPTION: This snippet demonstrates how to use the previously defined 'blocker' function as a context manager with Django's connection.execute_wrapper in a view. By wrapping the render operation, it ensures that no SQL queries are executed while rendering the template, typically after prefetching all necessary data. Dependencies are the Django ORM, connection management, and the shortcuts render function.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import connection\nfrom django.shortcuts import render\n\n\ndef my_view(request):\n    context = {...}  # Code to generate context with all data.\n    template_name = ...\n    with connection.execute_wrapper(blocker):\n        return render(request, template_name, context)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Path in Linux Environment\nDESCRIPTION: Sets the LD_LIBRARY_PATH environment variable to include /usr/local/lib for GeoDjango library access.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport LD_LIBRARY_PATH=/usr/local/lib\n```\n\n----------------------------------------\n\nTITLE: Creating, Modifying, and Deleting Redirects using Django's Python API\nDESCRIPTION: This snippet demonstrates how to use Django's database API to create, change, and delete redirects programmatically. It shows interactions with the Redirect model, including creating a new redirect, modifying an existing one, and deleting a redirect.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/redirects.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.conf import settings\n>>> from django.contrib.redirects.models import Redirect\n>>> # Add a new redirect.\n>>> redirect = Redirect.objects.create(\n...     site_id=1,\n...     old_path=\"/contact-us/\",\n...     new_path=\"/contact/\",\n... )\n>>> # Change a redirect.\n>>> redirect.new_path = \"/contact-details/\"\n>>> redirect.save()\n>>> redirect\n<Redirect: /contact-us/ ---> /contact-details/>\n>>> # Delete a redirect.\n>>> Redirect.objects.filter(site_id=1, old_path=\"/contact-us/\").delete()\n(1, {'redirects.Redirect': 1})\n```\n\n----------------------------------------\n\nTITLE: Using templatetag in Django Templates\nDESCRIPTION: Demonstrates how to use the templatetag tag to output template syntax characters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_44\n\nLANGUAGE: html+django\nCODE:\n```\nThe {% templatetag openblock %} characters open a block.\n```\n\n----------------------------------------\n\nTITLE: Setting DJANGO_SETTINGS_MODULE in WSGI Application\nDESCRIPTION: Example of setting the DJANGO_SETTINGS_MODULE environment variable in a WSGI application using Python's os.environ.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"\n```\n\n----------------------------------------\n\nTITLE: Basic Django Serialization\nDESCRIPTION: Basic example of serializing Django model data using the serializers module.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import serializers\n\ndata = serializers.serialize(\"xml\", SomeModel.objects.all())\n```\n\n----------------------------------------\n\nTITLE: Using QuerySet difference method in Django\nDESCRIPTION: Shows how to use the EXCEPT SQL operator through Django's QuerySet.difference() method to keep only elements present in one QuerySet but not in others.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> qs1.difference(qs2, qs3)\n```\n\n----------------------------------------\n\nTITLE: Combining Date and Time Filters for Full Datetime Representation - HTML+Django\nDESCRIPTION: Shows how to combine 'date' and 'time' template filters to display a complete datetime in Django templates. This pattern is useful for rendering both date and time parts of a variable. Inputs are datetime objects; outputs are concatenated strings. This requires the presence of both filters and a context variable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_54\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|date:\"D d M Y\" }} {{ value|time:\"H:i\" }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ModelChoiceField with Custom Labels in Django\nDESCRIPTION: Example of subclassing ModelChoiceField to provide customized string representations of model objects by overriding the label_from_instance method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import ModelChoiceField\n\n\nclass MyModelChoiceField(ModelChoiceField):\n    def label_from_instance(self, obj):\n        return \"My Object #%i\" % obj.id\n```\n\n----------------------------------------\n\nTITLE: Accessing BoundField Data and Errors in Django Forms\nDESCRIPTION: Examples of how to access field data and validation errors from BoundField objects in Django forms.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> unbound_form = ContactForm()\n>>> print(unbound_form[\"subject\"].data)\nNone\n>>> bound_form = ContactForm(data={\"subject\": \"My Subject\"})\n>>> print(bound_form[\"subject\"].data)\nMy Subject\n\n>>> data = {\"subject\": \"hi\", \"message\": \"\", \"sender\": \"\", \"cc_myself\": \"\"}\n>>> f = ContactForm(data, auto_id=False)\n>>> print(f[\"message\"])\n<input type=\"text\" name=\"message\" required aria-invalid=\"true\">\n>>> f[\"message\"].errors\n['This field is required.']\n>>> print(f[\"message\"].errors)\n<ul class=\"errorlist\"><li>This field is required.</li></ul>\n>>> f[\"subject\"].errors\n[]\n>>> print(f[\"subject\"].errors)\n\n>>> str(f[\"subject\"].errors)\n''\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings in Django for GeoDjango\nDESCRIPTION: Sets up the database connection settings in the Django project's settings.py file for use with GeoDjango and PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"geodjango\",\n        \"USER\": \"geo\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Count Operations at Different Levels in Django\nDESCRIPTION: Demonstrates performance differences between counting items at database, Python, and template levels. Shows how database-level operations are typically faster than higher-level abstractions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# QuerySet operation on the database\n# fast, because that's what databases are good at\nmy_bicycles.count()\n\n# counting Python objects\n# slower, because it requires a database query anyway, and processing\n# of the Python objects\nlen(my_bicycles)\n```\n\nLANGUAGE: html\nCODE:\n```\n<!--\nDjango template filter\nslower still, because it will have to count them in Python anyway,\nand because of template language overheads\n-->\n{{ my_bicycles|length }}\n```\n\n----------------------------------------\n\nTITLE: Converting ManyToManyField to Through Model\nDESCRIPTION: Shows how to change a ManyToManyField to use a through model while preserving existing relations. Uses SeparateDatabaseAndState to rename tables and adds new fields to the through model.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"core\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.SeparateDatabaseAndState(\n            database_operations=[\n                # Old table name from checking with sqlmigrate, new table\n                # name from AuthorBook._meta.db_table.\n                migrations.RunSQL(\n                    sql=\"ALTER TABLE core_book_authors RENAME TO core_authorbook\",\n                    reverse_sql=\"ALTER TABLE core_authorbook RENAME TO core_book_authors\",\n                ),\n            ],\n            state_operations=[\n                migrations.CreateModel(\n                    name=\"AuthorBook\",\n                    fields=[\n                        (\n                            \"id\",\n                            models.AutoField(\n                                auto_created=True,\n                                primary_key=True,\n                                serialize=False,\n                                verbose_name=\"ID\",\n                            ),\n                        ),\n                        (\n                            \"author\",\n                            models.ForeignKey(\n                                on_delete=django.db.models.deletion.DO_NOTHING,\n                                to=\"core.Author\",\n                            ),\n                        ),\n                        (\n                            \"book\",\n                            models.ForeignKey(\n                                on_delete=django.db.models.deletion.DO_NOTHING,\n                                to=\"core.Book\",\n                            ),\n                        ),\n                    ],\n                ),\n                migrations.AlterField(\n                    model_name=\"book\",\n                    name=\"authors\",\n                    field=models.ManyToManyField(\n                        to=\"core.Author\",\n                        through=\"core.AuthorBook\",\n                    ),\n                ),\n            ],\n        ),\n        migrations.AddField(\n            model_name=\"authorbook\",\n            name=\"is_primary\",\n            field=models.BooleanField(default=False),\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Effect of Deleting an Object on M2M Relationship (pycon)\nDESCRIPTION: Shows the impact of deleting a `Publication` instance (`p1`) using `delete()`. Subsequent queries show the deleted publication is removed from the list of all publications, and articles previously related to it (`a1`) no longer list it in their `publications`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1.delete()\n>>> Publication.objects.all()\n<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>]>\n>>> a1 = Article.objects.get(pk=1)\n>>> a1.publications.all()\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Weekday - Django ORM (Python)\nDESCRIPTION: Filters by day-of-week using '__week_day', where integer input of 1=Sunday through 7=Saturday. Inputs are integers; outputs are QuerySets including all records matching the specified weekday. Handles any month/year; chaining of range lookups is supported. Weekdays are based on Django's internal mapping.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__week_day=2)\nEntry.objects.filter(pub_date__week_day__gte=2)\n```\n\n----------------------------------------\n\nTITLE: Documentation of last() and alast() methods in Django ORM\nDESCRIPTION: Provides details about retrieving the last object in a QuerySet using the last() method and its asynchronous version alast(). These methods return the last element based on the queryset's ordering, with alast() performing asynchronously. They depend on the QuerySet being ordered or default ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_84\n\nLANGUAGE: Python\nCODE:\n```\n works like :meth:`first()`, but returns the last object in the queryset.\n```\n\n----------------------------------------\n\nTITLE: Accessing Cleaned Data Directly in Form Clean Method Python\nDESCRIPTION: This snippet shows an alternative way to access cleaned data within the form's `clean` method, particularly useful if the parent form's `clean` method might not return the `cleaned_data` dictionary. It calls `super().clean()` without assigning its return value and then accesses the cleaned data directly via `self.cleaned_data`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef clean(self):\n    super().clean()\n    cc_myself = self.cleaned_data.get(\"cc_myself\")\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests\nDESCRIPTION: Shows how to use the test command to run tests for Django apps. It includes options for failing fast, specifying a test runner, and suppressing user prompts.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin test [test_label [test_label ...]]\n```\n\n----------------------------------------\n\nTITLE: Mixing Strings and Variables in the Cycle Tag (Django)\nDESCRIPTION: Illustrates the flexibility of the `{% cycle %}` tag by mixing string literals ('row1', 'row3') and template variables (`rowvalue2`) as arguments for the cycle sequence.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% for o in some_list %}\n    <tr class=\"{% cycle 'row1' rowvalue2 'row3' %}\">\n        ...\n    </tr>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Price with Custom Alias using aggregate() (pycon)\nDESCRIPTION: Demonstrates how to assign a custom name ('average_price') to the result of an aggregation function (`Avg(\"price\")`) within the `aggregate()` clause. This provides a more descriptive key in the resulting dictionary. Requires importing `Avg` from `django.db.models`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Book.objects.aggregate(average_price=Avg(\"price\"))\n{'average_price': 34.35}\n```\n\n----------------------------------------\n\nTITLE: Configuring Language-Specific Search in Django with PostgreSQL\nDESCRIPTION: Shows how to specify a different search configuration for language-specific searches.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchQuery, SearchVector\n>>> Entry.objects.annotate(\n...     search=SearchVector(\"body_text\", config=\"french\"),\n... ).filter(search=SearchQuery(\"œuf\", config=\"french\"))\n[<Entry: Pain perdu>]\n```\n\n----------------------------------------\n\nTITLE: Generating Date List in Django BaseDateListView\nDESCRIPTION: The get_date_list method returns a list of dates for which the queryset contains entries. It uses the QuerySet.dates() method and allows customization of date_type and ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_date_list(queryset, date_type=None, ordering='ASC'):\n    Returns the list of dates of type ``date_type`` for which ``queryset``\n    contains entries. For example, ``get_date_list(qs, 'year')`` will\n    return the list of years for which ``qs`` has entries. If\n    ``date_type`` isn't provided, the result of\n    :meth:`~BaseDateListView.get_date_list_period` is used. ``date_type``\n    and ``ordering`` are passed to\n    :meth:`QuerySet.dates()<django.db.models.query.QuerySet.dates>`.\n```\n\n----------------------------------------\n\nTITLE: Defining a GenericIPAddressField in Django Models\nDESCRIPTION: Defines a Django model field for storing IPv4 or IPv6 addresses as strings (e.g., `192.0.2.30` or `2a02:42fe::4`). Accepts `protocol` ('both', 'IPv4', 'IPv6') and `unpack_ipv4` (boolean) options to control validation and formatting. IPv6 normalization follows RFC 4291#section-2.2. Requires null=True if blank=True is used. Uses `TextInput` as the default form widget.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n.. class:: GenericIPAddressField(protocol='both', unpack_ipv4=False, **options)\n```\n\n----------------------------------------\n\nTITLE: Creating a FileField Form in Django\nDESCRIPTION: Defines a Django form containing a FileField for handling file uploads. This form allows users to input a title (as a CharField) and upload a file.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass UploadFileForm(forms.Form):\n    title = forms.CharField(max_length=50)\n    file = forms.FileField()\n```\n\n----------------------------------------\n\nTITLE: Using Email Backend as Context Manager\nDESCRIPTION: Demonstrates how to use Django's email backend as a context manager to send multiple emails using the same connection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\n\nwith mail.get_connection() as connection:\n    mail.EmailMessage(\n        subject1,\n        body1,\n        from1,\n        [to1],\n        connection=connection,\n    ).send()\n    mail.EmailMessage(\n        subject2,\n        body2,\n        from2,\n        [to2],\n        connection=connection,\n    ).send()\n```\n\n----------------------------------------\n\nTITLE: Working with ImageField Attributes in Django Shell\nDESCRIPTION: Interactive code example showing how to access various attributes of an ImageField, including name, path, and URL. This demonstrates how Django provides easy access to file metadata.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> car = Car.objects.get(name=\"57 Chevy\")\n>>> car.photo\n<ImageFieldFile: cars/chevy.jpg>\n>>> car.photo.name\n'cars/chevy.jpg'\n>>> car.photo.path\n'/media/cars/chevy.jpg'\n>>> car.photo.url\n'https://media.example.com/cars/chevy.jpg'\n```\n\n----------------------------------------\n\nTITLE: Using Sin Function in Django Models\nDESCRIPTION: Shows how to calculate sine values and register Sin as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Sin\n>>> Vector.objects.create(x=5.4, y=-2.3)\n>>> vector = Vector.objects.annotate(x_sin=Sin(\"x\"), y_sin=Sin(\"y\")).get()\n>>> vector.x_sin, vector.y_sin\n(-0.7727644875559871, -0.7457052121767203)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Sin\n>>> FloatField.register_lookup(Sin)\n>>> # Get vectors whose sin() is less than 0\n>>> vectors = Vector.objects.filter(x__sin__lt=0, y__sin__lt=0)\n```\n\n----------------------------------------\n\nTITLE: Squashing Migrations in Django\nDESCRIPTION: Demonstrates the command to squash multiple migrations into a single migration. This helps optimize and simplify the migration history of a Django project.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py squashmigrations myapp 0004\n```\n\n----------------------------------------\n\nTITLE: Adding Password Reset to Admin Site (Python)\nDESCRIPTION: This code demonstrates how to add password reset functionality to the Django admin site by including additional URL patterns in the URLconf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_83\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.auth import views as auth_views\n\npath(\n    \"admin/password_reset/\",\n    auth_views.PasswordResetView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"admin_password_reset\",\n),\npath(\n    \"admin/password_reset/done/\",\n    auth_views.PasswordResetDoneView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"password_reset_done\",\n),\npath(\n    \"reset/<uidb64>/<token>/\",\n    auth_views.PasswordResetConfirmView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"password_reset_confirm\",\n),\npath(\n    \"reset/done/\",\n    auth_views.PasswordResetCompleteView.as_view(\n        extra_context={\"site_header\": admin.site.site_header}\n    ),\n    name=\"password_reset_complete\",\n),\n```\n\n----------------------------------------\n\nTITLE: Defining UniqueConstraint Treating NULLs as Not Distinct in Python (PostgreSQL 15+)\nDESCRIPTION: Demonstrates how to create a `UniqueConstraint` where NULL values are considered equal (not distinct) using `nulls_distinct=False`. This ensures only one row can have a NULL value in the constrained column(s). This feature requires PostgreSQL 15 or newer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import UniqueConstraint\n\nUniqueConstraint(name=\"ordering\", fields=[\"ordering\"], nulls_distinct=False)\n```\n\n----------------------------------------\n\nTITLE: Mitigating DoS in django.utils.html.urlize() (Python)\nDESCRIPTION: The urlize and urlizetrunc template filters were vulnerable to denial-of-service attacks with inputs containing many brackets. This affects the django.utils.html.urlize() function.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.html.urlize()\n```\n\n----------------------------------------\n\nTITLE: Instantiating FilePathField with Matching and Recursion in Django (Python)\nDESCRIPTION: Provides an example of initializing a `FilePathField` with specific `path`, `match`, and `recursive` options. It clarifies that the `match` regular expression (`\"foo.*\"`) is applied only to the base filename, not the full path, meaning it would match `/home/images/foo.png` but not `/home/images/foo/bar.png`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nFilePathField(path=\"/home/images\", match=\"foo.*\", recursive=True)\n```\n\n----------------------------------------\n\nTITLE: Applying CSRF Protection to a View in Django\nDESCRIPTION: This snippet shows how to use the csrf_protect decorator to apply CSRF protection to a specific view function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/csrf.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_protect\n\n\n@csrf_protect\ndef my_view(request):\n    c = {}\n    # ...\n    return render(request, \"a_template.html\", c)\n```\n\n----------------------------------------\n\nTITLE: Full ModelForm Example with Author and Book Models in Python\nDESCRIPTION: Comprehensive example demonstrating model definitions with different field types, corresponding ModelForm subclasses, and equivalent manual form class implementations for comparison.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.forms import ModelForm\n\nTITLE_CHOICES = {\n    \"MR\": \"Mr.\",\n    \"MRS\": \"Mrs.\",\n    \"MS\": \"Ms.\",\n}\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    title = models.CharField(max_length=3, choices=TITLE_CHOICES)\n    birth_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author)\n\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = [\"name\", \"title\", \"birth_date\"]\n\n\nclass BookForm(ModelForm):\n    class Meta:\n        model = Book\n        fields = [\"name\", \"authors\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom HandField in Django\nDESCRIPTION: This code defines a custom Django model field called HandField. It subclasses models.Field and sets a fixed max_length of 104 characters to store 52 card values and their suits.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass HandField(models.Field):\n    description = \"A hand of cards (bridge style)\"\n\n    def __init__(self, *args, **kwargs):\n        kwargs[\"max_length\"] = 104\n        super().__init__(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Migration in Django\nDESCRIPTION: Demonstrates how to create an empty migration file using Django's management command. This is useful for creating custom migrations or data migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py makemigrations --empty yourappname\n```\n\n----------------------------------------\n\nTITLE: Testing Language Override in Django\nDESCRIPTION: A test method that demonstrates using translation.override to test language-specific content in a response.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef test_language_using_override(self):\n    with translation.override(\"fr\"):\n        response = self.client.get(\"/\")\n    self.assertEqual(response.content, b\"Bienvenue sur mon site.\")\n```\n\n----------------------------------------\n\nTITLE: Custom Settings-Based Authentication Backend Implementation in Django (Python)\nDESCRIPTION: This code snippet defines a full-featured Django authentication backend class, SettingsBackend, which authenticates users whose credentials match values set in the project's settings (ADMIN_LOGIN and ADMIN_PASSWORD). If authentication succeeds and the user does not yet exist, it creates a superuser Django User object. The backend is fully compatible with Django's authentication and permission model, and depends on django.contrib.auth, django.conf.settings, and django.contrib.auth.hashers modules. Key parameters include username and password, and the backend provides implementations for both authenticate and get_user methods. Inputs are the credentials and user ID; output is an authenticated User object or None.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.contrib.auth.backends import BaseBackend\nfrom django.contrib.auth.hashers import check_password\nfrom django.contrib.auth.models import User\n\n\nclass SettingsBackend(BaseBackend):\n    \"\"\"\n    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.\n\n    Use the login name and a hash of the password. For example:\n\n    ADMIN_LOGIN = 'admin'\n    ADMIN_PASSWORD = 'pbkdf2_sha256$30000$Vo0VlMnkR4Bk$qEvtdyZRWTcOsCnI/oQ7fVOu1XAURIZYoOZ3iq8Dr4M='\n    \"\"\"\n\n    def authenticate(self, request, username=None, password=None):\n        login_valid = settings.ADMIN_LOGIN == username\n        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)\n        if login_valid and pwd_valid:\n            try:\n                user = User.objects.get(username=username)\n            except User.DoesNotExist:\n                # Create a new user. There's no need to set a password\n                # because only the password from settings.py is checked.\n                user = User(username=username)  # is_active defaults to True.\n                user.is_staff = True\n                user.is_superuser = True\n                user.save()\n            return user\n        return None\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n\n```\n\n----------------------------------------\n\nTITLE: Creating Model with File Outside Request Context\nDESCRIPTION: A Django management command that creates a model with a file field outside the request context. It uses ContentFile to create a file object from binary content.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management.base import BaseCommand\nfrom django.core.files.base import ContentFile\n\n\nclass MyCommand(BaseCommand):\n    def handle(self, *args, **options):\n        content_file = ContentFile(b\"Hello world!\", name=\"hello-world.txt\")\n        instance = ModelWithFileField(file_field=content_file)\n        instance.save()\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Django Objects Efficiently with F()\nDESCRIPTION: Shows how to apply an `F()` expression using `update()` on a QuerySet without prior filtering, thereby updating a field for all objects in the table (in this case, incrementing `stories_filed` for all reporters). This is significantly faster than iterating and saving each object individually.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nReporter.objects.update(stories_filed=F(\"stories_filed\") + 1)\n```\n\n----------------------------------------\n\nTITLE: Complete Upload Handler Replacement in Django\nDESCRIPTION: Shows how to completely replace the default upload handlers with a custom handler list.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrequest.upload_handlers = [ProgressBarUploadHandler(request)]\n```\n\n----------------------------------------\n\nTITLE: Using urlizetrunc Filter in Django Templates\nDESCRIPTION: Shows how to use the urlizetrunc filter, which converts URLs and email addresses into clickable links and truncates URLs longer than the specified character limit.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_101\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|urlizetrunc:15 }}\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Querysets in Django Aggregation\nDESCRIPTION: These snippets demonstrate how aggregation behaves with empty querysets. The first example shows the default behavior of returning None, while the second shows how to use the default parameter to return a specific value (0 in this case) when the queryset is empty.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_27\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Sum\n>>> Book.objects.filter(name__contains=\"web\").aggregate(Sum(\"price\"))\n{\"price__sum\": None}\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Book.objects.filter(name__contains=\"web\").aggregate(Sum(\"price\", default=0))\n{\"price__sum\": Decimal(\"0\")}\n```\n\n----------------------------------------\n\nTITLE: Resetting Primary Key Sequences in Django TransactionTestCase\nDESCRIPTION: This example shows how to use the reset_sequences attribute in TransactionTestCase to ensure primary key sequences are reset before each test run, which can be useful for tests that depend on specific primary key values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass TestsThatDependsOnPrimaryKeySequences(TransactionTestCase):\n    reset_sequences = True\n\n    def test_animal_pk(self):\n        lion = Animal.objects.create(name=\"lion\", sound=\"roar\")\n        # lion.pk is guaranteed to always be 1\n        self.assertEqual(lion.pk, 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Language with Cookies in Django Tests\nDESCRIPTION: Shows how to set the language for a test client request using cookies when LocaleMiddleware is enabled. This example sets the language to French.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\n\n\ndef test_language_using_cookie(self):\n    self.client.cookies.load({settings.LANGUAGE_COOKIE_NAME: \"fr\"})\n    response = self.client.get(\"/\")\n    self.assertEqual(response.content, b\"Bienvenue sur mon site.\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Class-Based View Handling GET Requests in Django\nDESCRIPTION: This snippet demonstrates the class-based view equivalent for handling a GET request. It defines a class `MyView` inheriting from `django.views.View`. The logic specific to the GET method is encapsulated within the `get` method of the class, eliminating the need for conditional checks on the request method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass MyView(View):\n    def get(self, request):\n        # <view logic>\n        return HttpResponse(\"result\")\n```\n\n----------------------------------------\n\nTITLE: Recording User Interest with SingleObjectMixin and View in Django (Python)\nDESCRIPTION: Implements a Django class-based view that uses SingleObjectMixin to retrieve a specific Author instance from the URL and responds to POST requests by recording the user's interest. Requires Django's HTTP and URL handling modules, the View and SingleObjectMixin from django.views, and an Author model from books.models. Handles authentication, object retrieval via get_object(), and redirects on success; designed for extensibility in how interest is recorded.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseForbidden, HttpResponseRedirect\\nfrom django.urls import reverse\\nfrom django.views import View\\nfrom django.views.generic.detail import SingleObjectMixin\\nfrom books.models import Author\\n\\n\\nclass RecordInterestView(SingleObjectMixin, View):\\n    \\\"\\\"\\\"Records the current user's interest in an author.\\\"\\\"\\\"\\n\\n    model = Author\\n\\n    def post(self, request, *args, **kwargs):\\n        if not request.user.is_authenticated:\\n            return HttpResponseForbidden()\\n\\n        # Look up the author we're interested in.\\n        self.object = self.get_object()\\n        # Actually record interest somehow here!\\n\\n        return HttpResponseRedirect(\\n            reverse(\\\"author-detail\\\", kwargs={\\\"pk\\\": self.object.pk})\\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating Q Objects for Complex Queries in Django\nDESCRIPTION: Shows how to create Q objects to encapsulate complex query conditions that can be combined with logical operators for advanced filtering.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Q\n\nQ(question__startswith=\"What\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Existing AppConfig\nDESCRIPTION: Example showing how to customize an existing application's configuration by subclassing its AppConfig.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# anthology/apps.py\n\nfrom rock_n_roll.apps import RockNRollConfig\n\n\nclass JazzManoucheConfig(RockNRollConfig):\n    verbose_name = \"Jazz Manouche\"\n\n\n# anthology/settings.py\n\nINSTALLED_APPS = [\n    \"anthology.apps.JazzManoucheConfig\",\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Reverse M2M Querying with '__in' Lookup (pycon)\nDESCRIPTION: Shows reverse many-to-many querying using the `__in` lookup. It filters `Publication` objects based on whether they are related to `Article` objects within the specified list (using IDs `[1, 2]` or instances `[a1, a2]`). `distinct()` ensures unique `Publication` results.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_16\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Publication.objects.filter(article__in=[1, 2]).distinct()\n<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>\n>>> Publication.objects.filter(article__in=[a1, a2]).distinct()\n<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>\n```\n\n----------------------------------------\n\nTITLE: Sending HTML and Text Email with EmailMultiAlternatives\nDESCRIPTION: Example demonstrating how to send an email with both HTML and plain text content using EmailMultiAlternatives.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMultiAlternatives\n\nsubject = \"hello\"\nfrom_email = \"from@example.com\"\nto = \"to@example.com\"\ntext_content = \"This is an important message.\"\nhtml_content = \"<p>This is an <strong>important</strong> message.</p>\"\nmsg = EmailMultiAlternatives(subject, text_content, from_email, [to])\nmsg.attach_alternative(html_content, \"text/html\")\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Using defer() and only() QuerySet methods in Django\nDESCRIPTION: Demonstrates how to use the new queryset methods defer() and only() to selectively retrieve fields from the database, improving performance for large text fields or expensive processing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.defer()\nQuerySet.only()\n```\n\n----------------------------------------\n\nTITLE: Disabling Variable Auto-Escaping with Django `safe` Filter\nDESCRIPTION: Demonstrates using the `safe` template filter in Django to render a variable's content directly without HTML escaping. This is useful when the variable `data` contains pre-formatted HTML or non-HTML text that should not be escaped. The first line shows default escaping, the second shows escaping disabled.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_15\n\nLANGUAGE: html+django\nCODE:\n```\nThis will be escaped: {{ data }}\nThis will not be escaped: {{ data|safe }}\n```\n\n----------------------------------------\n\nTITLE: Using Foreign Key Values Directly\nDESCRIPTION: Shows how to access foreign key values directly instead of retrieving the whole related object, reducing unnecessary object instantiation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nentry.blog_id\n```\n\nLANGUAGE: python\nCODE:\n```\nentry.blog.id\n```\n\n----------------------------------------\n\nTITLE: Basic Translation with gettext in Django View\nDESCRIPTION: Demonstrates how to mark a string for translation using Django's gettext function, imported as the alias '_' for convenience. This is the standard way to make strings translatable in Django applications.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.utils.translation import gettext as _\n\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n```\n\n----------------------------------------\n\nTITLE: Defining a DateField in Django models\nDESCRIPTION: Example of defining a DateField with auto_now and auto_now_add options. These options automatically set the field to the current date on save or create operations respectively.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nDateField(auto_now=False, auto_now_add=False, **options)\n```\n\n----------------------------------------\n\nTITLE: Custom Search Implementation in Django ModelAdmin\nDESCRIPTION: Implementation of get_search_results method to extend the default search functionality by also allowing searches on integer fields like 'age', combining results from the default search and the custom numeric search.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"age\"]\n    search_fields = [\"name\"]\n\n    def get_search_results(self, request, queryset, search_term):\n        queryset, may_have_duplicates = super().get_search_results(\n            request,\n            queryset,\n            search_term,\n        )\n        try:\n            search_term_as_int = int(search_term)\n        except ValueError:\n            pass\n        else:\n            queryset |= self.model.objects.filter(age=search_term_as_int)\n        return queryset, may_have_duplicates\n```\n\n----------------------------------------\n\nTITLE: Django Test Client POST Request - Python\nDESCRIPTION: Shows how to make POST requests with form data using Django's test client.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Client()\n>>> c.post(\"/login/\", {\"name\": \"fred\", \"passwd\": \"secret\"})\n```\n\n----------------------------------------\n\nTITLE: Format of Stored Password String in Django\nDESCRIPTION: Illustrates the format in which Django stores user passwords in the database. The string contains the algorithm name, the number of iterations (work factor), a random salt, and the resulting hash, all separated by dollar signs ($).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<algorithm>$<iterations>$<salt>$<hash>\n```\n\n----------------------------------------\n\nTITLE: Data Migration between Django Models\nDESCRIPTION: Demonstrates how to migrate data from an old model to a new model using a forward migration operation. Includes handling for cases where the old app may not be installed.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\ndef forwards(apps, schema_editor):\n    try:\n        OldModel = apps.get_model(\"old_app\", \"OldModel\")\n    except LookupError:\n        # The old app isn't installed.\n        return\n\n    NewModel = apps.get_model(\"new_app\", \"NewModel\")\n    NewModel.objects.bulk_create(\n        NewModel(new_attribute=old_object.old_attribute)\n        for old_object in OldModel.objects.all()\n    )\n\n\nclass Migration(migrations.Migration):\n    operations = [\n        migrations.RunPython(forwards, migrations.RunPython.noop),\n    ]\n    dependencies = [\n        (\"myapp\", \"0123_the_previous_migration\"),\n        (\"new_app\", \"0001_initial\"),\n    ]\n\n    if global_apps.is_installed(\"old_app\"):\n        dependencies.append((\"old_app\", \"0001_initial\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Data with RunPython in Django (Python)\nDESCRIPTION: Shows how to use RunPython to initialize data for a new model via custom Python code within a migration file. The functions create Country objects using historical model instances, ensuring that reversibility is provided by the reverse_func. Suitable for creating data migrations while maintaining compatibility with versioned model states. Requirements: Django migrations, historical model API.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\n\ndef forwards_func(apps, schema_editor):\n    # We get the model from the versioned app registry;\n    # if we directly import it, it'll be the wrong version\n    Country = apps.get_model(\"myapp\", \"Country\")\n    db_alias = schema_editor.connection.alias\n    Country.objects.using(db_alias).bulk_create(\n        [\n            Country(name=\"USA\", code=\"us\"),\n            Country(name=\"France\", code=\"fr\"),\n        ]\n    )\n\n\ndef reverse_func(apps, schema_editor):\n    # forwards_func() creates two Country instances,\n    # so reverse_func() should delete them.\n    Country = apps.get_model(\"myapp\", \"Country\")\n    db_alias = schema_editor.connection.alias\n    Country.objects.using(db_alias).filter(name=\"USA\", code=\"us\").delete()\n    Country.objects.using(db_alias).filter(name=\"France\", code=\"fr\").delete()\n\n\nclass Migration(migrations.Migration):\n    dependencies = []\n\n    operations = [\n        migrations.RunPython(forwards_func, reverse_func),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget Overrides in Django ModelAdmin\nDESCRIPTION: Example showing how to use formfield_overrides to replace default TextField widget with a custom RichTextEditorWidget in Django admin. The dictionary key is the field class itself, not a string, with values passed to the form field's __init__() method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db import models\n\n# Import our custom widget and our model from where they're defined\nfrom myapp.models import MyModel\nfrom myapp.widgets import RichTextEditorWidget\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.TextField: {\"widget\": RichTextEditorWidget},\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Messages in Django Views\nDESCRIPTION: Examples of adding different types of messages in Django views using shortcut methods\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmessages.debug(request, \"%s SQL statements were executed.\" % count)\nmessages.info(request, \"Three credits remain in your account.\")\nmessages.success(request, \"Profile details updated.\")\nmessages.warning(request, \"Your account expires in three days.\")\nmessages.error(request, \"Document deleted.\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User with Email Authentication\nDESCRIPTION: Example of create_user method implementation for a custom user model using email as the username field with additional required fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef create_user(self, email, date_of_birth, password=None):\n    # create user here\n    ...\n```\n\n----------------------------------------\n\nTITLE: Grouping URL Patterns with Common Prefixes in Django\nDESCRIPTION: This snippet illustrates how to group URL patterns with common prefixes in Django's URLconf. It demonstrates a technique to reduce redundancy in URL patterns by using nested includes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import include, path\nfrom . import views\n\nurlpatterns = [\n    path(\n        \"<page_slug>-<page_id>/\",\n        include(\n            [\n                path(\"history/\", views.history),\n                path(\"edit/\", views.edit),\n                path(\"discuss/\", views.discuss),\n                path(\"permissions/\", views.permissions),\n            ]\n        ),\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Hierarchy in Django\nDESCRIPTION: Demonstrates how to set up logger hierarchies with propagation control for different application components.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"loggers\": {\n    \"my_app\": {\n        # ...\n    },\n    \"my_app.views\": {\n        # ...\n    },\n    \"my_app.views.private\": {\n        # ...\n        \"propagate\": False,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using third-party decorators with async tests in Django\nDESCRIPTION: Example showing how to correctly use third-party decorators that aren't async-compatible by wrapping the test method with async_to_sync inside the decorator chain.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import async_to_sync\nfrom django.test import TestCase\n\n\nclass MyTests(TestCase):\n    @mock.patch(...)\n    @async_to_sync\n    async def test_my_thing(self): ...\n```\n\n----------------------------------------\n\nTITLE: Evaluating QuerySet Results with iterator() for Memory Efficiency\nDESCRIPTION: This snippet describes the iterator() method, which evaluates a QuerySet and returns an iterator over the results, bypassing internal caching for improved performance with large datasets. It mentions asynchronous iterator aiterator() and considerations with database-specific streaming capabilities, including PostgreSQL and Oracle. Dependencies include Django ORM and database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_80\n\nLANGUAGE: Python\nCODE:\n```\nfor obj in Entry.objects.iterator(chunk_size=100):\n    process(obj)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom X-Frame-Options Value in Django Settings\nDESCRIPTION: This code demonstrates how to set a custom value for the X-Frame-Options header using the X_FRAME_OPTIONS setting in Django. In this case, it's set to SAMEORIGIN.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nX_FRAME_OPTIONS = \"SAMEORIGIN\"\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Manager Method for Model Creation in Django (Python)\nDESCRIPTION: Illustrates creating a custom `BookManager` with a `create_book` method for the `Book` model. This approach centralizes creation logic within the manager, leveraging the manager's `create` method and allowing for additional operations before returning the instance. It's often preferred over `__init__` overriding or simple classmethods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BookManager(models.Manager):\n    def create_book(self, title):\n        book = self.create(title=title)\n        # do something with the book\n        return book\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n\n    objects = BookManager()\n\n\nbook = Book.objects.create_book(\"Pride and Prejudice\")\n```\n\n----------------------------------------\n\nTITLE: Caching Template Fragment with Language-specific Content in Django\nDESCRIPTION: Shows how to cache a template fragment with language-specific content using the {% cache %} tag and translation variables.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_26\n\nLANGUAGE: html+django\nCODE:\n```\n{% load i18n %}\n{% load cache %}\n\n{% get_current_language as LANGUAGE_CODE %}\n\n{% cache 600 welcome LANGUAGE_CODE %}\n    {% translate \"Welcome to example.com\" %}\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Using the Default Filter in HTML+Django Template\nDESCRIPTION: This snippet demonstrates the `default` template filter. `{{ value|default:\"nothing\" }}` displays the variable `value`. However, if `value` evaluates to False (e.g., it's an empty string, None, zero, or an empty list) or is not present in the context, it displays the specified default string \"nothing\" instead. This is useful for providing fallback content.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|default:\"nothing\" }}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Inclusion Tag in Django\nDESCRIPTION: Demonstrates how to create an inclusion tag that renders a template with a list of choices for a Poll object. The tag function returns a dictionary used as the template context.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef show_results(poll):\n    choices = poll.choice_set.all()\n    return {\"choices\": choices}\n\n# Here, register is a django.template.Library instance, as before\n@register.inclusion_tag(\"results.html\")\ndef show_results(poll): ...\n```\n\n----------------------------------------\n\nTITLE: Defining TodayArchiveView Class in Django\nDESCRIPTION: Declaration of the TodayArchiveView class, which is a specialized version of DayArchiveView for displaying today's archive. It inherits similar attributes and methods as DayArchiveView.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass TodayArchiveView():\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Related Django Model Instances - Pycon\nDESCRIPTION: Demonstrates the creation and access patterns of Places and Restaurants using the Django ORM in an interactive Python session. It covers instantiation, assignment, and reverse relationship access via attributes and shows how relationships handle missing associations and attribute checks. Django must be properly configured, and the models must be migrated before executing these commands. Outputs include instantiated objects and printed representations; exceptions are managed explicitly where missing relationships are accessed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/one_to_one.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1 = Place(name=\"Demon Dogs\", address=\"944 W. Fullerton\")\n>>> p1.save()\n>>> p2 = Place(name=\"Ace Hardware\", address=\"1013 N. Ashland\")\n>>> p2.save()\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)\n>>> r.save()\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r.place\n<Place: Demon Dogs the place>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1.restaurant\n<Restaurant: Demon Dogs the restaurant>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.core.exceptions import ObjectDoesNotExist\n>>> try:\n...     p2.restaurant\n... except ObjectDoesNotExist:\n...     print(\"There is no restaurant here.\")\n...\nThere is no restaurant here.\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> hasattr(p2, \"restaurant\")\nFalse\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r.place = p2\n>>> r.save()\n>>> p2.restaurant\n<Restaurant: Ace Hardware the restaurant>\n>>> r.place\n<Place: Ace Hardware the place>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1.restaurant = r\n>>> p1.restaurant\n<Restaurant: Demon Dogs the restaurant>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p3 = Place(name=\"Demon Dogs\", address=\"944 W. Fullerton\")\n>>> Restaurant.objects.create(place=p3, serves_hot_dogs=True, serves_pizza=False)\nTraceback (most recent call last):\n...\nValueError: save() prohibited to prevent data loss due to unsaved related object 'place'.\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Restaurant.objects.all()\n<QuerySet [<Restaurant: Demon Dogs the restaurant>, <Restaurant: Ace Hardware the restaurant>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Place.objects.order_by(\"name\")\n<QuerySet [<Place: Ace Hardware the place>, <Place: Demon Dogs the place>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Restaurant.objects.get(place=p1)\n<Restaurant: Demon Dogs the restaurant>\n>>> Restaurant.objects.get(place__pk=1)\n<Restaurant: Demon Dogs the restaurant>\n>>> Restaurant.objects.filter(place__name__startswith=\"Demon\")\n<QuerySet [<Restaurant: Demon Dogs the restaurant>]>\n>>> Restaurant.objects.exclude(place__address__contains=\"Ashland\")\n<QuerySet [<Restaurant: Demon Dogs the restaurant>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Place.objects.get(pk=1)\n<Place: Demon Dogs the place>\n>>> Place.objects.get(restaurant__place=p1)\n<Place: Demon Dogs the place>\n>>> Place.objects.get(restaurant=r)\n<Place: Demon Dogs the place>\n>>> Place.objects.get(restaurant__place__name__startswith=\"Demon\")\n<Place: Demon Dogs the place>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p2.delete()\n(2, {'one_to_one.Restaurant': 1, 'one_to_one.Place': 1})\n>>> Restaurant.objects.all()\n<QuerySet [<Restaurant: Demon Dogs the restaurant>]>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> w = r.waiter_set.create(name=\"Joe\")\n>>> w\n<Waiter: Joe the waiter at Demon Dogs the restaurant>\n\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Waiter.objects.filter(restaurant__place=p1)\n<QuerySet [<Waiter: Joe the waiter at Demon Dogs the restaurant>]>\n>>> Waiter.objects.filter(restaurant__place__name__startswith=\"Demon\")\n<QuerySet [<Waiter: Joe the waiter at Demon Dogs the restaurant>]>\n\n```\n\n----------------------------------------\n\nTITLE: Defining a SmallAutoField in Django Models\nDESCRIPTION: Defines a Django model field similar to `AutoField` (an auto-incrementing primary key), but with a smaller value range. Values from 1 to 32767 are safe across all Django-supported databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n.. class:: SmallAutoField(**options)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by ISO Weekday - Django ORM (Python)\nDESCRIPTION: Uses '__iso_week_day' to filter by ISO 8601 weekday, where 1 is Monday and 7 is Sunday. Requires Django ORM and valid date/datetime fields. Inputs must be integers between 1 and 7. Outputs QuerySets for the specified ISO weekday; other filtering can be chained (e.g., ranges).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__iso_week_day=1)\nEntry.objects.filter(pub_date__iso_week_day__gte=1)\n```\n\n----------------------------------------\n\nTITLE: Using format_lazy for String Formatting with Lazy Translations\nDESCRIPTION: Shows how to use format_lazy() to perform string formatting with lazy translation objects, ensuring that translations are only processed when the resulting string is used.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.text import format_lazy\nfrom django.utils.translation import gettext_lazy\n\n...\nname = gettext_lazy(\"John Lennon\")\ninstrument = gettext_lazy(\"guitar\")\nresult = format_lazy(\"{name}: {instrument}\", name=name, instrument=instrument)\n```\n\n----------------------------------------\n\nTITLE: Getting Date List Period in Django BaseDateListView\nDESCRIPTION: The get_date_list_period method returns the aggregation period for date_list. By default, it returns the date_list_period attribute of the class.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_date_list_period():\n    Returns the aggregation period for ``date_list``. Returns\n    :attr:`~BaseDateListView.date_list_period` by default.\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Django Templates\nDESCRIPTION: Shows how to include single-line comments in Django templates using the {# #} syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{# this won't be rendered #}\n```\n\n----------------------------------------\n\nTITLE: Excluding Extra Fields from Cleaned Data in Django Forms - Python\nDESCRIPTION: Shows that extra (undefined) keys in the input data to a Django Form are not included in cleaned_data. Only fields defined in the form are accessible after validation. Inputs are arbitrary data with extra keys. Output is cleaned_data with only declared fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\\n...     \\\"subject\\\": \\\"hello\\\",\\n...     \\\"message\\\": \\\"Hi there\\\",\\n...     \\\"sender\\\": \\\"foo@example.com\\\",\\n...     \\\"cc_myself\\\": True,\\n...     \\\"extra_field_1\\\": \\\"foo\\\",\\n...     \\\"extra_field_2\\\": \\\"bar\\\",\\n...     \\\"extra_field_3\\\": \\\"baz\\\",\\n... }\\n>>> f = ContactForm(data)\\n>>> f.is_valid()\\nTrue\\n>>> f.cleaned_data  # Doesn't contain extra_field_1, etc.\\n{'cc_myself': True, 'message': 'Hi there', 'sender': 'foo@example.com', 'subject': 'hello'}\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of db_default Referencing Another Field\nDESCRIPTION: Shows an incorrect attempt to set a database default using `db_default` that references another field (`start`) via `F()`. This is explicitly mentioned as invalid because database defaults cannot reference other fields or models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.db.models import F\n\n# This is invalid\nend = models.IntegerField(db_default=F(\"start\") + 50)\n```\n\n----------------------------------------\n\nTITLE: Using `reverse` with Positional Arguments in a Django View (Python)\nDESCRIPTION: Shows how to use `django.urls.reverse` within a Django view function (`myview`) to generate a URL for redirection. It passes a positional argument (`[1945]`) via the `args` parameter to the `reverse` function for the URL pattern named \"arch-summary\". This generates a URL like '/archive/summary/1945/' (assuming a suitable pattern) and uses it in an `HttpResponseRedirect`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse\n\n\ndef myview(request):\n    return HttpResponseRedirect(reverse(\"arch-summary\", args=[1945]))\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Configuration for Publisher Books\nDESCRIPTION: URL pattern configuration for dynamic publisher filtering\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom books.views import PublisherBookListView\n\nurlpatterns = [\n    path(\"books/<publisher>/\", PublisherBookListView.as_view()),\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Label and id Generation in Django Forms with auto_id=False - Python\nDESCRIPTION: Illustrates the effect of setting auto_id to False in the Django Form constructor, which suppresses the rendering of <label> tags and id attributes in generated HTML. The input is a Form instance created with auto_id=False. Outputs are HTML fragments for each field without label tags or id attributes. Useful for cases where custom markup handling is required, or when default Django accessibility behaviors are not desired.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(auto_id=False)\n>>> print(f)\n<div>Subject:<input type=\"text\" name=\"subject\" maxlength=\"100\" required></div>\n<div>Message:<textarea name=\"message\" cols=\"40\" rows=\"10\" required></textarea></div>\n<div>Sender:<input type=\"email\" name=\"sender\" required></div>\n<div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div>\n```\n\n----------------------------------------\n\nTITLE: Adding Database-Generated Annotations with raw()\nDESCRIPTION: Example of using raw SQL to include database-generated values (like age calculations in PostgreSQL) in query results, which can be accessed as model attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> people = Person.objects.raw(\"SELECT *, age(birth_date) AS age FROM myapp_person\")\n>>> for p in people:\n...     print(\"%s is %s.\" % (p.first_name, p.age))\n...\nJohn is 37.\nJane is 42.\n...\n```\n\n----------------------------------------\n\nTITLE: Using admin_urlname Filter in Django Templates\nDESCRIPTION: Demonstrates the use of the admin_urlname filter in Django templates to easily reverse admin URLs for add and delete actions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_87\n\nLANGUAGE: html+django\nCODE:\n```\n{% load admin_urls %}\n<a href=\"{% url opts|admin_urlname:'add' %}\">Add user</a>\n<a href=\"{% url opts|admin_urlname:'delete' user.pk %}\">Delete this user</a>\n```\n\n----------------------------------------\n\nTITLE: Named Tuple Result Fetching Function\nDESCRIPTION: Function to convert database cursor results into named tuples, providing both attribute-based and index-based access to results.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import namedtuple\n\ndef namedtuplefetchall(cursor):\n    \"\"\"\n    Return all rows from a cursor as a namedtuple.\n    Assume the column names are unique.\n    \"\"\"\n    desc = cursor.description\n    nt_result = namedtuple(\"Result\", [col[0] for col in desc])\n    return [nt_result(*row) for row in cursor.fetchall()]\n```\n\n----------------------------------------\n\nTITLE: Using `get_FOO_display()` for Choice Fields (Pycon)\nDESCRIPTION: Demonstrates the usage of the automatically generated `get_FOO_display()` method in a Python interactive console (`pycon`). After creating and saving a `Person` instance (defined previously) with a `shirt_size`, it shows retrieving the stored value ('L') and the corresponding human-readable display value ('Large') using `p.get_shirt_size_display()`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_29\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = Person(name=\"Fred Flintstone\", shirt_size=\"L\")\n>>> p.save()\n>>> p.shirt_size\n'L'\n>>> p.get_shirt_size_display()\n'Large'\n```\n\n----------------------------------------\n\nTITLE: SQL Representation of AND Combination (SQL)\nDESCRIPTION: Shows the SQL equivalent of combining two query conditions with the AND operator. The statement is a simple SELECT with WHERE conditions for both x=1 and y=2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE x=1 AND y=2\n```\n\n----------------------------------------\n\nTITLE: Extracting DateTime Components with Django ORM - Python\nDESCRIPTION: Shows how to extract time-based parts (hour, minute, second) and all date parts from DateTimeField using Django ORM. This requires Django and the Experiment model with DateTimeField fields. Outputs a dictionary with all extracted values. Inputs must be timezone-aware where appropriate; limitations relate to database and Django's timezone configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> from datetime import UTC, datetime\\n>>> from django.db.models.functions import (\\n...     ExtractDay,\\n...     ExtractHour,\\n...     ExtractMinute,\\n...     ExtractMonth,\\n...     ExtractQuarter,\\n...     ExtractSecond,\\n...     ExtractWeek,\\n...     ExtractIsoWeekDay,\\n...     ExtractWeekDay,\\n...     ExtractIsoYear,\\n...     ExtractYear,\\n... )\\n>>> start_2015 = datetime(2015, 6, 15, 23, 30, 1, tzinfo=UTC)\\n>>> end_2015 = datetime(2015, 6, 16, 13, 11, 27, tzinfo=UTC)\\n>>> Experiment.objects.create(\\n...     start_datetime=start_2015,\\n...     start_date=start_2015.date(),\\n...     end_datetime=end_2015,\\n...     end_date=end_2015.date(),\\n... )\\n>>> Experiment.objects.annotate(\\n...     year=ExtractYear(\"start_datetime\"),\\n...     isoyear=ExtractIsoYear(\"start_datetime\"),\\n...     quarter=ExtractQuarter(\"start_datetime\"),\\n...     month=ExtractMonth(\"start_datetime\"),\\n...     week=ExtractWeek(\"start_datetime\"),\\n...     day=ExtractDay(\"start_datetime\"),\\n...     weekday=ExtractWeekDay(\"start_datetime\"),\\n...     isoweekday=ExtractIsoWeekDay(\"start_datetime\"),\\n...     hour=ExtractHour(\"start_datetime\"),\\n...     minute=ExtractMinute(\"start_datetime\"),\\n...     second=ExtractSecond(\"start_datetime\"),\\n... ).values(\\n...     \"year\",\\n...     \"isoyear\",\\n...     \"month\",\\n...     \"week\",\\n...     \"day\",\\n...     \"weekday\",\\n...     \"isoweekday\",\\n...     \"hour\",\\n...     \"minute\",\\n...     \"second\",\\n... ).get(\\n...     end_datetime__year=ExtractYear(\"start_datetime\")\\n... )\\n{'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25,\\n 'day': 15, 'weekday': 2, 'isoweekday': 1, 'hour': 23, 'minute': 30,\\n 'second': 1}\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Formset with Data\nDESCRIPTION: Shows how to initialize a formset with pre-existing data by passing a list of dictionaries to the initial parameter, which populates the first form and displays additional empty forms.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import datetime\n>>> from django.forms import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> ArticleFormSet = formset_factory(ArticleForm, extra=2)\n>>> formset = ArticleFormSet(\n...     initial=[\n...         {\n...             \"title\": \"Django is now open source\",\n...             \"pub_date\": datetime.date.today(),\n...         }\n...     ]\n... )\n\n>>> for form in formset:\n...     print(form)\n...\n<div><label for=\"id_form-0-title\">Title:</label><input type=\"text\" name=\"form-0-title\" value=\"Django is now open source\" id=\"id_form-0-title\"></div>\n<div><label for=\"id_form-0-pub_date\">Pub date:</label><input type=\"text\" name=\"form-0-pub_date\" value=\"2023-02-11\" id=\"id_form-0-pub_date\"></div>\n<div><label for=\"id_form-1-title\">Title:</label><input type=\"text\" name=\"form-1-title\" id=\"id_form-1-title\"></div>\n<div><label for=\"id_form-1-pub_date\">Pub date:</label><input type=\"text\" name=\"form-1-pub_date\" id=\"id_form-1-pub_date\"></div>\n<div><label for=\"id_form-2-title\">Title:</label><input type=\"text\" name=\"form-2-title\" id=\"id_form-2-title\"></div>\n<div><label for=\"id_form-2-pub_date\">Pub date:</label><input type=\"text\" name=\"form-2-pub_date\" id=\"id_form-2-pub_date\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Annotated Expression in values() with Related Lookups Python\nDESCRIPTION: An alternative syntax to achieve the same result as the previous example. Uses a keyword argument in values() with an explicit annotation expression referencing a related field and applying a transform before the aggregation is performed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.values(entry__authors__name__lower=Lower(\"entry__authors__name\")).annotate(\n...     entries=Count(\"entry\")\n... )\n```\n\n----------------------------------------\n\nTITLE: Subclassing Forms in Django\nDESCRIPTION: This section demonstrates how to subclass forms in Django to share fields and create more specialized forms. It includes examples of single inheritance and multiple inheritance using forms as mixins.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n>>> class ContactFormWithPriority(ContactForm):\n...     priority = forms.CharField()\n...\n>>> f = ContactFormWithPriority(auto_id=False)\n>>> print(f)\n<div>Subject:<input type=\"text\" name=\"subject\" maxlength=\"100\" required></div>\n<div>Message:<textarea name=\"message\" cols=\"40\" rows=\"10\" required></textarea></div>\n<div>Sender:<input type=\"email\" name=\"sender\" required></div>\n<div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div>\n<div>Priority:<input type=\"text\" name=\"priority\" required></div>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\n>>> class PersonForm(forms.Form):\n...     first_name = forms.CharField()\n...     last_name = forms.CharField()\n...\n>>> class InstrumentForm(forms.Form):\n...     instrument = forms.CharField()\n...\n>>> class BeatleForm(InstrumentForm, PersonForm):\n...     haircut_type = forms.CharField()\n...\n>>> b = BeatleForm(auto_id=False)\n>>> print(b)\n<div>First name:<input type=\"text\" name=\"first_name\" required></div>\n<div>Last name:<input type=\"text\" name=\"last_name\" required></div>\n<div>Instrument:<input type=\"text\" name=\"instrument\" required></div>\n<div>Haircut type:<input type=\"text\" name=\"haircut_type\" required></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Response Mixin in Django\nDESCRIPTION: Mixin class for adding JSON response capabilities to views with data transformation handling.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import JsonResponse\n\n\nclass JSONResponseMixin:\n    def render_to_json_response(self, context, **response_kwargs):\n        return JsonResponse(self.get_data(context), **response_kwargs)\n\n    def get_data(self, context):\n        return context\n```\n\n----------------------------------------\n\nTITLE: Using select_related with filtering in Django\nDESCRIPTION: Demonstrates how to use select_related() with queryset filters to efficiently retrieve related objects, showing that the order of operations doesn't affect the outcome.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\n\n# Find all the blogs with entries scheduled to be published in the future.\nblogs = set()\n\nfor e in Entry.objects.filter(pub_date__gt=timezone.now()).select_related(\"blog\"):\n    # Without select_related(), this would make a database query for each\n    # loop iteration in order to fetch the related blog for each entry.\n    blogs.add(e.blog)\n```\n\n----------------------------------------\n\nTITLE: Recommended vs Not Recommended Prefetch Related Patterns\nDESCRIPTION: Compares recommended and not recommended patterns when filtering prefetch results. Using to_attr is clearer than storing filtered results in the related manager's cache.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\n>>> queryset = Pizza.objects.filter(vegetarian=True)\n>>>\n>>> # Recommended:\n>>> restaurants = Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas\", queryset=queryset, to_attr=\"vegetarian_pizzas\")\n... )\n>>> vegetarian_pizzas = restaurants[0].vegetarian_pizzas\n>>>\n>>> # Not recommended:\n>>> restaurants = Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas\", queryset=queryset),\n... )\n>>> vegetarian_pizzas = restaurants[0].pizzas.all()\n```\n\n----------------------------------------\n\nTITLE: Specifying Widgets for Model Formset in Python\nDESCRIPTION: Demonstrates how to specify custom widgets for fields in a model formset factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> AuthorFormSet = modelformset_factory(\n...     Author,\n...     fields=[\"name\", \"title\"],\n...     widgets={\"name\": Textarea(attrs={\"cols\": 80, \"rows\": 20})},\n... )\n```\n\n----------------------------------------\n\nTITLE: Proper Comment and Extends Ordering in Django Templates\nDESCRIPTION: Demonstrates that comments can precede extends tags in Django templates while maintaining proper style. This shows the correct ordering of template elements.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{# This is a comment #}\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h1 class=\"font-semibold text-xl\">\n    {{ pages.title }}\n  </h1>\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Installing Argon2 Support for Django (Bash)\nDESCRIPTION: Command to install the `argon2-cffi` library, which is required to use the Argon2 password hashing algorithm with Django. Using `django[argon2]` ensures compatibility with Django's specified version.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install django[argon2]\n```\n\n----------------------------------------\n\nTITLE: Generating .po File Entries for Translations\nDESCRIPTION: Example of how Django generates .po file entries for various types of translatable strings in templates.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_31\n\nLANGUAGE: po\nCODE:\n```\n#. Translators: View verb\n# path/to/template/file.html:10\nmsgid \"View\"\nmsgstr \"\"\n\n#. Translators: Short intro blurb\n# path/to/template/file.html:13\nmsgid \"\"\n\"A multiline translatable\"\n\"literal.\"\nmsgstr \"\"\n\n# ...\n\n#. Translators: Label of a button that triggers search\n# path/to/template/file.html:100\nmsgid \"Go\"\nmsgstr \"\"\n\n#. Translators: This is a text of the base template\n# path/to/template/file.html:103\nmsgid \"Ambiguous translatable block of text\"\nmsgstr \"\"\n```\n\n----------------------------------------\n\nTITLE: Querying with Trigram Similarity in Django\nDESCRIPTION: Demonstrates how to use the trigram_similar lookup in Django to perform trigram similarity searches on City names. This lookup requires the 'django.contrib.postgres' app and the pg_trgm PostgreSQL extension.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/lookups.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> City.objects.filter(name__trigram_similar=\"Middlesborough\")\n['<City: Middlesbrough>']\n```\n\n----------------------------------------\n\nTITLE: Filtering Many-to-Many Fields in Django ModelAdmin\nDESCRIPTION: This method shows how to customize the formfield for many-to-many fields in the admin interface, filtering the queryset based on the current user.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_manytomany(self, db_field, request, **kwargs):\n        if db_field.name == \"cars\":\n            kwargs[\"queryset\"] = Car.objects.filter(owner=request.user)\n        return super().formfield_for_manytomany(db_field, request, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Django DeleteView Class\nDESCRIPTION: Defines the DeleteView class in Django, used for deleting objects. It provides a list of attributes and methods available for this view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclass DeleteView():\n    # Attributes and methods listed in the documentation\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Cross-App Model Access in Django Migrations\nDESCRIPTION: Shows how to properly set up dependencies when a migration in one app needs to access models from another app. This ensures all required models are available during migration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"app1\", \"0001_initial\"),\n        # added dependency to enable using models from app2 in move_m1\n        (\"app2\", \"0004_foobar\"),\n    ]\n\n    operations = [\n        migrations.RunPython(move_m1),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Custom View in Django Admin Action\nDESCRIPTION: This code demonstrates how to create an admin action that redirects to a custom view. It passes the selected object IDs and content type as GET parameters to the custom export view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.http import HttpResponseRedirect\n\ndef export_selected_objects(modeladmin, request, queryset):\n    selected = queryset.values_list(\"pk\", flat=True)\n    ct = ContentType.objects.get_for_model(queryset.model)\n    return HttpResponseRedirect(\n        \"/export/?ct=%s&ids=%s\"\n        % (\n            ct.pk,\n            \",\".join(str(pk) for pk in selected),\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding M2M Relationship from the Reverse Side (pycon)\nDESCRIPTION: Demonstrates adding a relationship from the 'other' side (the model without the `ManyToManyField`). It creates and saves a new `Article` (`a4`), then adds it to a `Publication`'s (`p2`) related set using `p2.article_set.add(a4)`. It confirms the relationship exists from both sides.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a4 = Article(headline=\"NASA finds intelligent life on Earth\")\n>>> a4.save()\n>>> p2.article_set.add(a4)\n>>> p2.article_set.all()\n<QuerySet [<Article: NASA finds intelligent life on Earth>]>\n>>> a4.publications.all()\n<QuerySet [<Publication: Science News>]>\n```\n\n----------------------------------------\n\nTITLE: Invalidating Cached Template Fragment in Django\nDESCRIPTION: Shows how to invalidate a cached template fragment using the make_template_fragment_key function and the cache.delete method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_29\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.core.cache import cache\n>>> from django.core.cache.utils import make_template_fragment_key\n# cache key for {% cache 500 sidebar username %}\n>>> key = make_template_fragment_key(\"sidebar\", [username])\n>>> cache.delete(key)  # invalidates cached template fragment\nTrue\n```\n\n----------------------------------------\n\nTITLE: Deploying Class-Based View in URL Pattern using as_view() Method in Python\nDESCRIPTION: This snippet demonstrates how to deploy a class-based view into a URL pattern using the as_view() classmethod. It shows how to pass arguments to the view, which will be assigned to the instance servicing the request.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path(\"view/\", MyView.as_view(size=42)),\n]\n```\n\n----------------------------------------\n\nTITLE: Extending a Base Template in Django\nDESCRIPTION: Demonstrates how to create a child template that extends a base template. This example overrides the title and content blocks to create a blog page.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block title %}My amazing blog{% endblock %}\n\n{% block content %}\n{% for entry in blog_entries %}\n    <h2>{{ entry.title }}</h2>\n    <p>{{ entry.body }}</p>\n{% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone Aware Current Time in Django\nDESCRIPTION: This snippet demonstrates how to properly get the current time when Django's time zone support is enabled (USE_TZ=True), resulting in a time-zone-aware datetime object.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\n\nnow = timezone.now()\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Unique Constraints with Django ORM in Python\nDESCRIPTION: This code snippet demonstrates how to define a Django model with functional unique constraints using the new 'expressions' positional argument of UniqueConstraint, enabled in Django 4.0. It requires Django 4.0+, and additionally imports Lower from django.db.models.functions to perform case-insensitive uniqueness enforcement on first_name and descending last_name fields. The 'constraints' option in the inner Meta class specifies a UniqueConstraint that applies Lower() to both fields, enforcing uniqueness on those expressions. Inputs are model field values; the output is a DB table schema enforcing this constraint. Limitations include the need for database backend support for the given expressions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.db.models import UniqueConstraint\nfrom django.db.models.functions import Lower\n\n\nclass MyModel(models.Model):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n\n    class Meta:\n        constraints = [\n            UniqueConstraint(\n                Lower(\"first_name\"),\n                Lower(\"last_name\").desc(),\n                name=\"first_last_name_unique\",\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Defining Orderable Related Objects with `order_with_respect_to` in Django (Python)\nDESCRIPTION: Shows how to make related objects (`Answer`) orderable with respect to a parent object (`Question`) using the `order_with_respect_to` Meta option set to the `ForeignKey` field ('question'). This is useful when the order of related items matters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    text = models.TextField()\n    # ...\n\n\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    # ...\n\n    class Meta:\n        order_with_respect_to = \"question\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Context Variable in a Django Template Tag (Python)\nDESCRIPTION: This Python code defines `CurrentTimeNode2`, a Django template Node class that sets a variable in the template context instead of outputting directly. The `render` method calculates the current time, formats it according to `self.format_string`, and assigns the result to the context dictionary using the hardcoded key 'current_time'. It returns an empty string, as is standard practice for context-setting tags.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom django import template\n\n\nclass CurrentTimeNode2(template.Node):\n    def __init__(self, format_string):\n        self.format_string = format_string\n\n    def render(self, context):\n        context[\"current_time\"] = datetime.datetime.now().strftime(self.format_string)\n        return \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Property-based Admin Display\nDESCRIPTION: Demonstrates the traditional way of setting up admin display properties using the property() function instead of decorators.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ndef my_property(self):\n    return self.first_name + \" \" + self.last_name\n\nmy_property.short_description = \"Full name of the person\"\nmy_property.admin_order_field = \"last_name\"\nmy_property.boolean = False\n\nfull_name = property(my_property)\n```\n\n----------------------------------------\n\nTITLE: Using pgettext_lazy for Model Field Help Text in Django\nDESCRIPTION: Shows how to use pgettext_lazy() to provide translatable help text for a model field with context, which is useful for lazy loading of translations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\nfrom django.utils.translation import pgettext_lazy\n\n\nclass MyThing(models.Model):\n    name = models.CharField(\n        help_text=pgettext_lazy(\"help text for MyThing model\", \"This is the help text\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Improper Block Tag Closure in Django Templates\nDESCRIPTION: Shows improper closure of block tags in Django templates where the block name is missing from the endblock tag. This is presented as an anti-pattern when blocks span multiple lines.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{% block header %}\n\n  Code goes here\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using assertHTMLEqual in Django Tests\nDESCRIPTION: Demonstrates how to use the assertHTMLEqual method to compare HTML strings based on semantic rather than syntactic differences, ignoring whitespace and attribute ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nself.assertHTMLEqual(\n    \"<p>Hello <b>&#x27;world&#x27;!</p>\",\n    \"\"\"<p>\n        Hello   <b>&#39;world&#39;! </b>\n    </p>\"\"\",\n)\nself.assertHTMLEqual(\n    '<input type=\"checkbox\" checked=\"checked\" id=\"id_accept_terms\" />',\n    '<input id=\"id_accept_terms\" type=\"checkbox\" checked>',\n)\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 encoding in Apache environment\nDESCRIPTION: Configuration to fix UnicodeEncodeError when uploading or writing files with non-ASCII characters by setting the appropriate language and locale environment variables in Apache.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LANG='en_US.UTF-8'\nexport LC_ALL='en_US.UTF-8'\n```\n\n----------------------------------------\n\nTITLE: Subclassing PostgreSQL Backend to Modify Features in Django (Python)\nDESCRIPTION: Provides an example (`mysite/mydbengine/base.py`) of subclassing the built-in PostgreSQL `DatabaseWrapper` and `DatabaseFeatures` classes. This allows overriding specific backend behaviors, such as changing the `allows_group_by_selected_pks_on_model` feature.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.backends.postgresql import base, features\n\n\nclass DatabaseFeatures(features.DatabaseFeatures):\n    def allows_group_by_selected_pks_on_model(self, model):\n        return True\n\n\nclass DatabaseWrapper(base.DatabaseWrapper):\n    features_class = DatabaseFeatures\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model with IntegerRangeField in Python\nDESCRIPTION: Defines a Django model named `Event` using the ORM. It includes a `CharField` for `name`, an `IntegerRangeField` named `ages` provided by `django.contrib.postgres.fields` to store integer ranges, and a standard `DateTimeField` for `start`. The `__str__` method returns the event name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.fields import IntegerRangeField\nfrom django.db import models\n\n\nclass Event(models.Model):\n    name = models.CharField(max_length=200)\n    ages = IntegerRangeField()\n    start = models.DateTimeField()\n\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Displaying Messages with Level Checking in Templates\nDESCRIPTION: Enhanced template code that checks message levels to add conditional content\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% if messages %}\n<ul class=\"messages\">\n    {% for message in messages %}\n    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>\n        {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Important: {% endif %}\n        {{ message }}\n    </li>\n    {% endfor %}\n</ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Lazy String Formatting with Translation Support - Django - Python\nDESCRIPTION: Shows how to use format_lazy from django.utils.text along with pgettext_lazy to create lazily formatted URL patterns that can include translated strings. Requires django.utils.text.format_lazy, django.utils.translation.pgettext_lazy, and Django path and as_view utilities. Accepts a format string and lazy translation objects, outputs a lazily evaluated string (e.g., for URL patterns). Inputs: format_string, args, and kwargs; Outputs: lazy formatted string, facilitating i18n. Useful for building translation-aware URL patterns.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.text import format_lazy\nfrom django.utils.translation import pgettext_lazy\n\nurlpatterns = [\n    path(\n        format_lazy(\"{person}/<int:pk>/\", person=pgettext_lazy(\"URL\", \"person\")),\n        PersonDetailView.as_view(),\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Pagination Template Implementation\nDESCRIPTION: Django template code showing how to implement pagination navigation controls with previous/next links and page information.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/pagination.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% for contact in page_obj %}\n    {# Each \"contact\" is a Contact model object. #}\n    {{ contact.full_name|upper }}<br>\n    ...\n{% endfor %}\n\n<div class=\"pagination\">\n    <span class=\"step-links\">\n        {% if page_obj.has_previous %}\n            <a href=\"?page=1\">&laquo; first</a>\n            <a href=\"?page={{ page_obj.previous_page_number }}\">previous</a>\n        {% endif %}\n\n        <span class=\"current\">\n            Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.\n        </span>\n\n        {% if page_obj.has_next %}\n            <a href=\"?page={{ page_obj.next_page_number }}\">next</a>\n            <a href=\"?page={{ page_obj.paginator.num_pages }}\">last &raquo;</a>\n        {% endif %}\n    </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Saving Objects to Different Databases in Django\nDESCRIPTION: Examples of saving Person objects to multiple databases while handling primary key conflicts. Shows two approaches: clearing the primary key and using force_insert.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Person(name=\"Fred\")\n>>> p.save(using=\"first\")\n>>> p.pk = None  # Clear the primary key.\n>>> p.save(using=\"second\")  # Write a completely new object.\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Person(name=\"Fred\")\n>>> p.save(using=\"first\")\n>>> p.save(using=\"second\", force_insert=True)\n```\n\n----------------------------------------\n\nTITLE: Settings Override Decorator in Django Tests\nDESCRIPTION: Shows how to use the override_settings decorator to modify settings at the method or class level in Django tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase, override_settings\n\n\nclass LoginTestCase(TestCase):\n    @override_settings(LOGIN_URL=\"/other/login/\")\n    def test_login(self):\n        response = self.client.get(\"/sekrit/\")\n        self.assertRedirects(response, \"/other/login/?next=/sekrit/\")\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Below Overlap in PostGIS\nDESCRIPTION: Example of using the 'overlaps_below' lookup to find geometries whose bounding box overlaps or is below a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__overlaps_below=geom)\n```\n\n----------------------------------------\n\nTITLE: Defining a Geographic Model in GeoDjango\nDESCRIPTION: Creates a Django model class 'WorldBorder' with fields corresponding to attributes in the world borders shapefile, including a MultiPolygonField for storing geographic data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.gis.db import models\n\n\nclass WorldBorder(models.Model):\n    # Regular Django fields corresponding to the attributes in the\n    # world borders shapefile.\n    name = models.CharField(max_length=50)\n    area = models.IntegerField()\n    pop2005 = models.IntegerField(\"Population 2005\")\n    fips = models.CharField(\"FIPS Code\", max_length=2, null=True)\n    iso2 = models.CharField(\"2 Digit ISO\", max_length=2)\n    iso3 = models.CharField(\"3 Digit ISO\", max_length=3)\n    un = models.IntegerField(\"United Nations Code\")\n    region = models.IntegerField(\"Region Code\")\n    subregion = models.IntegerField(\"Sub-Region Code\")\n    lon = models.FloatField()\n    lat = models.FloatField()\n\n    # GeoDjango-specific: a geometry field (MultiPolygonField)\n    mpoly = models.MultiPolygonField()\n\n    # Returns the string representation of the model.\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Model Instance in Django 3.0\nDESCRIPTION: Demonstrates how to update an existing model instance with a specific primary key value in Django 3.0, using update_or_create() or filter().update() methods instead of save().\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> MyModel.objects.update_or_create(pk=existing_pk, defaults={\"name\": \"new name\"})\n>>> MyModel.objects.filter(pk=existing_pk).update(name=\"new name\")\n```\n\n----------------------------------------\n\nTITLE: Implementing PermissionRequiredMixin in Django Class-Based Views\nDESCRIPTION: Demonstrates the use of PermissionRequiredMixin in a class-based view to check for user permissions. It shows how to specify single or multiple required permissions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.mixins import PermissionRequiredMixin\n\nclass MyView(PermissionRequiredMixin, View):\n    permission_required = \"polls.add_choice\"\n    # Or multiple of permissions:\n    permission_required = [\"polls.view_choice\", \"polls.change_choice\"]\n```\n\n----------------------------------------\n\nTITLE: Annotating Stores with Min/Max Book Prices Across Relationships (pycon)\nDESCRIPTION: Demonstrates performing aggregations on fields of a related model using `annotate()`. This example queries `Store` objects and annotates each store with the minimum (`Min`) and maximum (`Max`) price found among its associated `Book` objects. It uses the double underscore notation (`books__price`) to traverse the `books` ManyToManyField relationship and access the `price` field on the `Book` model. Requires importing `Max` and `Min` from `django.db.models`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Max, Min\n>>> Store.objects.annotate(min_price=Min(\"books__price\"), max_price=Max(\"books__price\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Shell Auto-Imports\nDESCRIPTION: This snippet demonstrates how to create a custom shell command by subclassing django.core.management.commands.shell.Command and overriding the get_auto_imports() method to add URL-related functions to the shell namespace.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-shell.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management.commands import shell\n\n\nclass Command(shell.Command):\n    def get_auto_imports(self):\n        return super().get_auto_imports() + [\n            \"django.urls.reverse\",\n            \"django.urls.resolve\",\n        ]\n```\n\n----------------------------------------\n\nTITLE: Customizing Changelist Formset in Django ModelAdmin\nDESCRIPTION: This method demonstrates how to use a custom formset for the changelist page in the admin interface by overriding the get_changelist_formset method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import BaseModelFormSet\n\n\nclass MyAdminFormSet(BaseModelFormSet):\n    pass\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_changelist_formset(self, request, **kwargs):\n        kwargs[\"formset\"] = MyAdminFormSet\n        return super().get_changelist_formset(request, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Updating Related Objects in Django\nDESCRIPTION: Shows how to filter objects based on related fields and update only the columns in the model's main table using QuerySet update.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n>>> b = Blog.objects.get(pk=1)\n\n# Update all the headlines belonging to this Blog.\n>>> Entry.objects.filter(blog=b).update(headline=\"Everything is the same\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Zone Middleware in Django\nDESCRIPTION: A middleware class that activates the appropriate time zone for each request based on a value stored in the user's session. This allows for per-user time zone settings.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport zoneinfo\n\nfrom django.utils import timezone\n\n\nclass TimezoneMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        tzname = request.session.get(\"django_timezone\")\n        if tzname:\n            timezone.activate(zoneinfo.ZoneInfo(tzname))\n        else:\n            timezone.deactivate()\n        return self.get_response(request)\n```\n\n----------------------------------------\n\nTITLE: Defining a Contact Form in Django\nDESCRIPTION: Demonstrates creating a more complex form with multiple field types including CharField, TextField, EmailField, and BooleanField. Shows how to specify widgets and validation options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100)\n    message = forms.CharField(widget=forms.Textarea)\n    sender = forms.EmailField()\n    cc_myself = forms.BooleanField(required=False)\n```\n\n----------------------------------------\n\nTITLE: Combining Transforms, Related Lookups, and Aggregation in values() Python\nDESCRIPTION: Demonstrates a complex example using values() with a transform applied to a field on a related model via lookups, combined with aggregation. Groups by the transformed related field and counts entries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.db.models import CharField, Count\n>>> from django.db.models.functions import Lower\n>>> CharField.register_lookup(Lower)\n>>> Blog.objects.values(\"entry__authors__name__lower\").annotate(entries=Count(\"entry\"))\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Author Creation Form in Django\nDESCRIPTION: Example of an HTML template for rendering an author creation form in Django, including CSRF token and form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Save\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Contact Form in Django\nDESCRIPTION: Defines a simple `ContactForm` class inheriting from `django.forms.Form`. It includes a `name` CharField and a `message` CharField using a Textarea widget. It also includes a placeholder `send_email` method intended to process the cleaned form data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ContactForm(forms.Form):\n    name = forms.CharField()\n    message = forms.CharField(widget=forms.Textarea)\n\n    def send_email(self):\n        # send email using the self.cleaned_data dictionary\n        pass\n```\n\n----------------------------------------\n\nTITLE: Serializing Non-Dict Objects in JsonResponse - Django - Python\nDESCRIPTION: This snippet illustrates passing a non-dictionary object (such as a list) to the Django JsonResponse constructor by setting the 'safe' parameter to False. This bypasses the default type check. The resulting instance is a valid JsonResponse and can return any JSON-serializable data, though using dicts is generally encouraged for extensibility and forward compatibility.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> response = JsonResponse([1, 2, 3], safe=False)\n```\n\n----------------------------------------\n\nTITLE: Subclassing Abstract Model to Define Relationships - Django Models - Python\nDESCRIPTION: Shows how to create a Manufacturer model and subclass AbstractCar as Car in a different Django app/module. This pattern demonstrates how foreign key relationships on abstract models are resolved to concrete classes in the current module. Requires django.db.models and an import from products.models. Inputs include reusing an abstract model and linking to a locally-defined Manufacturer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\nfrom products.models import AbstractCar\\n\\n\\nclass Manufacturer(models.Model):\\n    name = models.TextField()\\n\\n\\nclass Car(AbstractCar):\\n    pass\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Source using `queryset` in Django DetailView (Python)\nDESCRIPTION: Introduces the `queryset` attribute as an alternative to the `model` attribute for specifying the data source in Django's generic views, using `DetailView` as an example. While the `model` attribute implies fetching all objects of that type (filtering happens later based on URL kwargs), `queryset` allows providing a specific, potentially pre-filtered, QuerySet directly to the view. The snippet shows the class structure but doesn't define a specific queryset.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import DetailView\nfrom books.models import Publisher\n\n\nclass PublisherDetailView(DetailView):\n    queryset = ...\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of Objects in a Django Template\nDESCRIPTION: An HTML+Django template example (implicitly `books/publisher_list.html`) for rendering a list of publisher objects provided by the `PublisherListView`. It extends a `base.html` template and uses a `{% for %}` loop to iterate over the `object_list` context variable (containing the publishers) and displays each publisher's name in an unordered list.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h2>Publishers</h2>\n    <ul>\n        {% for publisher in object_list %}\n            <li>{{ publisher.name }}</li>\n        {% endfor %}\n    </ul>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type and Content-Disposition Headers in Django HttpResponse\nDESCRIPTION: This snippet demonstrates how to set the Content-Type and Content-Disposition headers in a Django HttpResponse to serve a file attachment, specifically a Microsoft Excel spreadsheet.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> response = HttpResponse(\n...     my_data,\n...     headers={\n...         \"Content-Type\": \"application/vnd.ms-excel\",\n...         \"Content-Disposition\": 'attachment; filename=\"foo.xls\"',\n...     },\n... )\n```\n\n----------------------------------------\n\nTITLE: Setting Data Upload Limits in Django\nDESCRIPTION: These settings define the limits for data uploads to prevent denial-of-service attacks. `DATA_UPLOAD_MAX_MEMORY_SIZE` limits the size of request bodies before raising a `RequestDataTooBig` exception. `DATA_UPLOAD_MAX_NUMBER_FIELDS` sets the maximum number of parameters received via GET or POST before `TooManyFields` exception. `DATA_UPLOAD_MAX_NUMBER_FILES` limits the number of files uploaded via POST before `TooManyFiles` is raised.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``2621440`` (i.e. 2.5 MB).\n\nThe maximum size in bytes that a request body may be before a\n:exc:`~django.core.exceptions.SuspiciousOperation` (``RequestDataTooBig``) is\nraised. The check is done when accessing ``request.body`` or ``request.POST``\nand is calculated against the total request size excluding any file upload\ndata. You can set this to ``None`` to disable the check. Applications that are\nexpected to receive unusually large form posts should tune this setting.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``1000``\n\nThe maximum number of parameters that may be received via GET or POST before a\n:exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFields``) is\nraised. You can set this to ``None`` to disable the check. Applications that\nare expected to receive an unusually large number of form fields should tune\nthis setting.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``100``\n\nThe maximum number of files that may be received via POST in a\n``multipart/form-data`` encoded request before a\n:exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFiles``) is\nraised. You can set this to ``None`` to disable the check. Applications that\nare expected to receive an unusually large number of file fields should tune\nthis setting.\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Settings for Project-Level Overrides\nDESCRIPTION: This snippet shows how to configure Django settings to enable template overriding at the project level. It includes setting up INSTALLED_APPS with the app whose templates you want to override and configuring the TEMPLATES setting with the project's templates directory.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/overriding-templates.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nINSTALLED_APPS = [\n    ...,\n    \"blog\",\n    ...,\n]\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        # ...\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Using staff_member_required Decorator for Admin Views in Python\nDESCRIPTION: Demonstrates the use of the @staff_member_required decorator to enforce authorization on admin views, redirecting to login if the user is not a staff member.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.admin.views.decorators import staff_member_required\n\n\n@staff_member_required\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Defining Django's Default Logging Configuration (Python)\nDESCRIPTION: This Python dictionary defines the default logging configuration used by Django, accessible as `django.utils.log.DEFAULT_LOGGING`. It utilizes Python's `logging.config.dictConfig` format. It sets up filters (`RequireDebugFalse`, `RequireDebugTrue`), formatters (`django.server`), handlers (`console`, `django.server`, `mail_admins` using `logging.StreamHandler` and `django.utils.log.AdminEmailHandler`), and loggers (`django`, `django.server`). This configuration dictates how log messages are processed based on level and the `DEBUG` setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"filters\": {\n        \"require_debug_false\": {\n            \"()\": \"django.utils.log.RequireDebugFalse\",\n        },\n        \"require_debug_true\": {\n            \"()\": \"django.utils.log.RequireDebugTrue\",\n        },\n    },\n    \"formatters\": {\n        \"django.server\": {\n            \"()\": \"django.utils.log.ServerFormatter\",\n            \"format\": \"[{server_time}] {message}\",\n            \"style\": \"{\",\n        }\n    },\n    \"handlers\": {\n        \"console\": {\n            \"level\": \"INFO\",\n            \"filters\": [\"require_debug_true\"],\n            \"class\": \"logging.StreamHandler\",\n        },\n        \"django.server\": {\n            \"level\": \"INFO\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"django.server\",\n        },\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        },\n    },\n    \"loggers\": {\n        \"django\": {\n            \"handlers\": [\"console\", \"mail_admins\"],\n            \"level\": \"INFO\",\n        },\n        \"django.server\": {\n            \"handlers\": [\"django.server\"],\n            \"level\": \"INFO\",\n            \"propagate\": False,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Nested/Directory Fixtures Using django-admin (Shell)\nDESCRIPTION: Provides an example of loading a fixture from a nested directory path using Django's management command. Dependencies: Django; the referenced JSON file (foo/bar/mydata.json) must be in a supported fixture directory or specified path. Input: relative/absolute path to fixture file; Output: corresponding fixture loaded into the database as JSON.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin loaddata foo/bar/mydata.json\n```\n\n----------------------------------------\n\nTITLE: Resetting Query List in Django\nDESCRIPTION: This snippet demonstrates how to manually clear the query list in Django using the reset_queries() function.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import reset_queries\n\nreset_queries()\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Authentication URLs\nDESCRIPTION: Demonstrates how to include Django's built-in authentication URLs in a project's URLconf, providing paths for login, logout, and password management views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path(\"accounts/\", include(\"django.contrib.auth.urls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Multi-table Inheritance in Django Models\nDESCRIPTION: Example of multi-table inheritance where each model has its own database table. The child class (Restaurant) automatically gets a OneToOneField linking it to the parent class (Place) with all parent fields available.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n\n\nclass Restaurant(Place):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Containing Geometry in Django\nDESCRIPTION: Demonstrates using the bbcontains spatial lookup to filter Zipcode objects whose polygon bounding box contains a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__bbcontains=geom)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Colors with Environment Variables in Shell\nDESCRIPTION: Shows how to use the DJANGO_COLORS environment variable to customize the color scheme used by Django management commands, overriding specific error and notice colors.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nexport DJANGO_COLORS=\"light;error=yellow/blue,blink;notice=magenta\"\n```\n\n----------------------------------------\n\nTITLE: Using Named resetcycle in Django Templates\nDESCRIPTION: This example shows how to reset specific named cycle tags. In this case, only the 'tick' cycle is reset when an item's category changes, while the 'stripe' cycle continues uninterrupted.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_41\n\nLANGUAGE: html+django\nCODE:\n```\n{% for item in list %}\n    <p class=\"{% cycle 'odd' 'even' as stripe %} {% cycle 'major' 'minor' 'minor' 'minor' 'minor' as tick %}\">\n        {{ item.data }}\n    </p>\n    {% ifchanged item.category %}\n        <h1>{{ item.category }}</h1>\n        {% if not forloop.first %}{% resetcycle tick %}{% endif %}\n    {% endifchanged %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Firstof Tag for Conditional Output (Django)\nDESCRIPTION: Shows the `{% firstof %}` tag, which outputs the value of the first variable in the provided list (`var1`, `var2`, `var3`) that evaluates to True in a boolean context (i.e., exists, is not empty, not False, not zero). If all variables evaluate to False, nothing is output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_15\n\nLANGUAGE: html+django\nCODE:\n```\n{% firstof var1 var2 var3 %}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Template Origin Class\nDESCRIPTION: Class definition for Origin which contains metadata about template sources including name, template_name, and loader attributes. Used to track template source information and manage template loading in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass Origin(name, template_name=None, loader=None):\\n    name  # The path to the template as returned by the template loader\\n    template_name  # The relative path to the template\\n    loader  # The template loader instance\n```\n\n----------------------------------------\n\nTITLE: Nesting Django `autoescape` Tags for Granular Control\nDESCRIPTION: Illustrates nesting the `autoescape` tag in Django templates. It shows disabling auto-escaping for a larger block (`{% autoescape off %}`) and then re-enabling it for a specific subsection using `{% autoescape on %}` within that block. This allows fine-grained control over escaping behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_18\n\nLANGUAGE: html+django\nCODE:\n```\nAuto-escaping is on by default. Hello {{ name }}\n\n{% autoescape off %}\n    This will not be auto-escaped: {{ data }}.\n\n    Nor this: {{ other_data }}\n    {% autoescape on %}\n        Auto-escaping applies again: {{ name }}\n    {% endautoescape %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Database Connection Signal\nDESCRIPTION: Demonstrates how to access the 'connection_created' signal from Django's database backends signals module. This signal is sent when a database connection is initiated.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.backends.signals.connection_created\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Field Validation with Non-Field Errors in Django Python\nDESCRIPTION: This snippet demonstrates cross-field validation using the form's `clean()` method. It checks if the `cc_myself` field is True and if the `subject` field does not contain the word 'help'. If both conditions are met, it raises a `ValidationError`, which results in a non-field error displayed at the top of the form. It calls `super().clean()` first to ensure parent validation logic runs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.core.exceptions import ValidationError\n\n\nclass ContactForm(forms.Form):\n    # Everything as before.\n    ...\n\n    def clean(self):\n        cleaned_data = super().clean()\n        cc_myself = cleaned_data.get(\"cc_myself\")\n        subject = cleaned_data.get(\"subject\")\n\n        if cc_myself and subject:\n            # Only do something if both fields are valid so far.\n            if \"help\" not in subject:\n                raise ValidationError(\n                    \"Did not send for 'help' in the subject despite CC'ing yourself.\"\n                )\n```\n\n----------------------------------------\n\nTITLE: Disabling View on Site Button in Django Admin\nDESCRIPTION: Example of setting view_on_site to False in a ModelAdmin class to disable the 'View on site' button that would normally appear in the admin interface for models with a get_absolute_url method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    view_on_site = False\n```\n\n----------------------------------------\n\nTITLE: Creating GeometryCollection Objects in Python using GEOS\nDESCRIPTION: Shows how to instantiate GeometryCollection objects by passing in other GEOSGeometry objects as arguments or as a sequence.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_17\n\nLANGUAGE: pycon\nCODE:\n```\n>>> poly = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))\n>>> gc = GeometryCollection(Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly)\n>>> gc = GeometryCollection((Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly))\n```\n\n----------------------------------------\n\nTITLE: Creating a GiST Index in Django with PostgreSQL\nDESCRIPTION: Creates a GiST (Generalized Search Tree) index with options for buffering and fill factor. Useful for spatial data and other complex data types.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGistIndex(*expressions, buffering=None, fillfactor=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Resolving a URL Path to a View using `resolve` in Django (Python)\nDESCRIPTION: Conceptual Python code showing how to use `django.urls.resolve` to find the view function and associated metadata for a given URL path ('/some/path/'). The function returns a `ResolverMatch` object if a match is found, allowing access to details like the URL pattern name (`match.url_name`). Raises `Resolver404` if no match exists.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Resolve a URL\nmatch = resolve(\"/some/path/\")\n# Print the URL pattern that matches the URL\nprint(match.url_name)\n```\n\n----------------------------------------\n\nTITLE: Defining PASSWORD_RESET_TIMEOUT setting\nDESCRIPTION: This setting specifies the validity duration of a password reset link, in seconds. It is used by the PasswordResetConfirmView. The default is 259200 (3 days).  Reducing this timeout doesn't impact brute-force attack resistance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: Creating and Adding Multiple M2M Relationships in Django (pycon)\nDESCRIPTION: Creates a new `Article` instance (`a2`), saves it, and then adds multiple `Publication` instances (`p1`, `p2`, `p3`) to its `publications` field using the `add()` method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a2 = Article(headline=\"NASA uses Python\")\n>>> a2.save()\n>>> a2.publications.add(p1, p2)\n>>> a2.publications.add(p3)\n```\n\n----------------------------------------\n\nTITLE: Django Template Radio Button Iteration Example\nDESCRIPTION: Demonstrates how to iterate over radio buttons in a Django template for more granular control over markup generation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_16\n\nLANGUAGE: Django Template\nCODE:\n```\n<fieldset>\n    <legend>{{ myform.beatles.label }}</legend>\n    {% for radio in myform.beatles %}\n    <div class=\"myradio\">\n        {{ radio }}\n    </div>\n    {% endfor %}\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: Using cached_property Decorator in Django Models\nDESCRIPTION: Illustrates the use of the @cached_property decorator from django.utils.functional to cache the result of a method in a Django model. This can improve performance by avoiding repeated expensive computations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.functional import cached_property\n\n\nclass Person(models.Model):\n    @cached_property\n    def friends(self): ...\n```\n\n----------------------------------------\n\nTITLE: Custom Form Renderer Configuration in Python\nDESCRIPTION: Demonstrates how to create a custom form renderer class and configure it in Django settings\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms.renderers import TemplatesSetting\n\n\nclass CustomFormRenderer(TemplatesSetting):\n    form_template_name = \"form_snippet.html\"\n\n\nFORM_RENDERER = \"project.settings.CustomFormRenderer\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Django for Standalone Usage\nDESCRIPTION: Demonstrates the complete process of configuring Django settings and calling django.setup() for standalone Django usage in a Python script.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport django\nfrom django.conf import settings\nfrom myapp import myapp_defaults\n\nsettings.configure(default_settings=myapp_defaults, DEBUG=True)\ndjango.setup()\n\n# Now this script or any imported module can use any part of Django it needs.\nfrom myapp import models\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateView Class in Django\nDESCRIPTION: Renders a template with a given context. Extends View with template rendering capabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TemplateView():\n    # Attributes\n    content_type\n    extra_context\n    http_method_names\n    response_class\n    template_engine\n    template_name\n\n    # Methods\n    as_view()\n    dispatch()\n    get()\n    get_context_data()\n    head()\n    http_method_not_allowed()\n    render_to_response()\n    setup()\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting QueryDict Values in Python\nDESCRIPTION: Demonstrates how to access the last value for a key and set a new value in a mutable QueryDict.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> q = QueryDict(\"a=1&a=2&a=3\", mutable=True)\n>>> q.__getitem__(\"a\")\n'3'\n>>> q.__setitem__(\"b\", [])\n>>> q.__getitem__(\"b\")\n[]\n```\n\n----------------------------------------\n\nTITLE: Using time Filter in Django Templates\nDESCRIPTION: The time filter formats a time according to the given format, which can be a predefined format or a custom one. It accepts timezone-related format specifiers for timezone-aware datetime objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_89\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|time:\"H:i\" }}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|time:\"H\\h i\\m\" }}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|time:\"TIME_FORMAT\" }}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|time }}\n```\n\n----------------------------------------\n\nTITLE: Reversing Django Admin URLs with Keyword Arguments (Pycon)\nDESCRIPTION: Pycon example illustrating the use of `django.urls.reverse` with keyword arguments (`kwargs`). It reverses the namespaced URL \"admin:app_list\", passing `app_label` as 'auth', resulting in the path '/admin/auth/'. Demonstrates passing `kwargs` instead of `args`; both cannot be used simultaneously.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> reverse(\"admin:app_list\", kwargs={\"app_label\": \"auth\"})\n'/admin/auth/'\n```\n\n----------------------------------------\n\nTITLE: String Containment Filters 'contains' and 'icontains'\nDESCRIPTION: Explains the 'contains' lookup for case-sensitive substring matching and 'icontains' for case-insensitive matching, including their SQL counterparts. Notes differences in behavior with SQLite regarding case sensitivity.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_96\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. fieldlookup:: contains\n\n``contains``\n~~~~~~~~~~~~\n\nCase-sensitive containment test.\n\nExample::\n\n    Entry.objects.get(headline__contains=\"Lennon\")\n\nSQL equivalent:\n\n.. code-block:: sql\n\n    SELECT ... WHERE headline LIKE '%Lennon%';\n\nNote this will match the headline ``'Lennon honored today'`` but not ``'lennon\nhonored today'``.\n\n.. admonition:: SQLite users\n\n    SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains``\n    acts like ``icontains`` for SQLite. See the :ref:`database note\n    <sqlite-string-matching>` for more information.\n\n.. fieldlookup:: icontains\n\n``icontains``\n~~~~~~~~~~~~~\n\nCase-insensitive containment test.\n\nExample::\n\n    Entry.objects.get(headline__icontains=\"Lennon\")\n\nSQL equivalent:\n\n.. code-block:: sql\n\n    SELECT ... WHERE headline ILIKE '%Lennon%';\n\n.. admonition:: SQLite users\n\n    When using the SQLite backend and non-ASCII strings, bear in mind the\n    :ref:`database note <sqlite-string-matching>` about string comparisons.\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Emails with Django EmailMessage\nDESCRIPTION: This snippet demonstrates how to send multiple emails using Django's EmailMessage class and a single connection. It shows the creation of email objects and sending them in a batch, followed by manually closing the connection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"Hello\",\n\"Body goes here\",\n\"from@example.com\",\n[\"to2@example.com\"],\n)\nemail3 = mail.EmailMessage(\n    \"Hello\",\n    \"Body goes here\",\n    \"from@example.com\",\n    [\"to3@example.com\"],\n)\n\n# Send the two emails in a single call -\nconnection.send_messages([email2, email3])\n# The connection was already open so send_messages() doesn't close it.\n# We need to manually close the connection.\nconnection.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Choices with Tuples in Django Models\nDESCRIPTION: Example showing how to define choice options for a field using tuples, and how to access the display value of a choice field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    SHIRT_SIZES = {\n        \"S\": \"Small\",\n        \"M\": \"Medium\",\n        \"L\": \"Large\",\n    }\n    name = models.CharField(max_length=60)\n    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)\n```\n\n----------------------------------------\n\nTITLE: Rendering Object Details in DateDetailView Template (Django, HTML+django)\nDESCRIPTION: This template snippet demonstrates how to display the title attribute of the object provided by Django's DateDetailView. It uses the double-curly-brace Django template syntax to insert the value, assuming the context variable 'object' is available. Inputs are context dictionaries from the DateDetailView, and output is the rendered HTML page. No additional dependencies are required, but this template should be named according to the default suffix (e.g., article_detail.html) unless otherwise configured.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n<h1>{{ object.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using functools.partial with on_commit for Parameterized Callbacks\nDESCRIPTION: Shows how to register callbacks with parameters by using functools.partial to bind specific arguments to the callback function before registering it with Django's on_commit.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import partial\n\nfor user in users:\n    transaction.on_commit(partial(send_invite_email, user=user))\n```\n\n----------------------------------------\n\nTITLE: Using Repeat Function in Django ORM\nDESCRIPTION: Shows how to repeat a text field value multiple times\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Repeat\n>>> Author.objects.create(name=\"John\", alias=\"j\")\n>>> Author.objects.update(name=Repeat(\"name\", 3))\n1\n>>> print(Author.objects.get(alias=\"j\").name)\nJohnJohnJohn\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Storage with Settings in Django\nDESCRIPTION: Demonstrates how to properly initialize a custom storage class by retrieving options from Django settings, ensuring it can be instantiated without arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-file-storage.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.core.files.storage import Storage\n\n\nclass MyStorage(Storage):\n    def __init__(self, option=None):\n        if not option:\n            option = settings.CUSTOM_STORAGE_OPTIONS\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for a Poll Application\nDESCRIPTION: This code snippet defines two Django models: Question and Choice. The Question model has fields for question text and publication date, while the Choice model has fields for choice text, votes, and a foreign key to Question.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n----------------------------------------\n\nTITLE: Customizing Static Files Storage Permissions in Django\nDESCRIPTION: This snippet demonstrates how to create a custom StaticFilesStorage subclass to set custom file and directory permissions for collected static files. It overrides the __init__ method to set custom permission modes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.staticfiles import storage\n\n\nclass MyStaticFilesStorage(storage.StaticFilesStorage):\n    def __init__(self, *args, **kwargs):\n        kwargs[\"file_permissions_mode\"] = 0o640\n        kwargs[\"directory_permissions_mode\"] = 0o760\n        super().__init__(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Minimum Length Password Validator in Python for Django\nDESCRIPTION: This code snippet demonstrates how to create a custom password validator in Django that checks for a minimum password length. It implements the required 'validate' and 'get_help_text' methods, and includes an optional 'min_length' parameter that defaults to 8 characters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext as _\n\n\nclass MinimumLengthValidator:\n    def __init__(self, min_length=8):\n        self.min_length = min_length\n\n    def validate(self, password, user=None):\n        if len(password) < self.min_length:\n            raise ValidationError(\n                _(\"This password must contain at least %(min_length)d characters.\"),\n                code=\"password_too_short\",\n                params={\"min_length\": self.min_length},\n            )\n\n    def get_help_text(self):\n        return _(\n            \"Your password must contain at least %(min_length)d characters.\"\n            % {\"min_length\": self.min_length}\n        )\n```\n\n----------------------------------------\n\nTITLE: Settings Override in Django Test Cases\nDESCRIPTION: Shows how to temporarily override Django settings within a test case using the settings() context manager.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase\n\n\nclass LoginTestCase(TestCase):\n    def test_login(self):\n        # First check for the default behavior\n        response = self.client.get(\"/sekrit/\")\n        self.assertRedirects(response, \"/accounts/login/?next=/sekrit/\")\n\n        # Then override the LOGIN_URL setting\n        with self.settings(LOGIN_URL=\"/other/login/\"):\n            response = self.client.get(\"/sekrit/\")\n            self.assertRedirects(response, \"/other/login/?next=/sekrit/\")\n```\n\n----------------------------------------\n\nTITLE: Redirecting Output from Django Management Commands\nDESCRIPTION: Demonstrates how to redirect the output of a Django management command to a file using the stdout parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"/path/to/command_output\", \"w\") as f:\n    management.call_command(\"dumpdata\", stdout=f)\n```\n\n----------------------------------------\n\nTITLE: Combining Filters and get_or_create() with Q Objects in Django ORM (Python)\nDESCRIPTION: Demonstrates using filter() with Q objects to broaden retrieval parameters before calling get_or_create(), allowing flexible matching and controlled creation. Useful where multiple potential first names exist. Requires Person model and Q import.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Q\n\nobj, created = Person.objects.filter(\n    Q(first_name=\"Bob\") | Q(first_name=\"Robert\"),\n).get_or_create(last_name=\"Marley\", defaults={\"first_name\": \"Bob\"})\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure Call Example\nDESCRIPTION: Example of calling an Oracle stored procedure using Django's database cursor.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE \"TEST_PROCEDURE\"(v_i INTEGER, v_text NVARCHAR2(10)) AS\n    p_i INTEGER;\n    p_text NVARCHAR2(10);\nBEGIN\n    p_i := v_i;\n    p_text := v_text;\n    ...\nEND;\n```\n\nLANGUAGE: python\nCODE:\n```\nwith connection.cursor() as cursor:\n    cursor.callproc(\"test_procedure\", [1, \"test\"])\n```\n\n----------------------------------------\n\nTITLE: Workaround: Using ForeignObject for Referencing Composite Primary Keys - Python\nDESCRIPTION: Demonstrates a workaround for referencing models with composite primary keys using Django's internal ForeignObject. The model Foo includes fields for the components of the composite key and uses ForeignObject to set up the link. This avoids the use of ForeignKey, which does not support composite primary keys. Dependencies: Django internal API, which may change without notice; ForeignObject is not covered by Django's stable API policy. Key parameters: from_fields/to_fields specify correspondence between model and composite key fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Foo(models.Model):\n    item_order_id = models.IntegerField()\n    item_product_id = models.CharField(max_length=20)\n    item = models.ForeignObject(\n        OrderLineItem,\n        on_delete=models.CASCADE,\n        from_fields=(\"item_order_id\", \"item_product_id\"),\n        to_fields=(\"order_id\", \"product_id\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Commenting in Django Templates\nDESCRIPTION: Demonstrates how to use inline comments in Django templates using the {# #} syntax. Comments can contain any template code and are limited to single lines.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{# greeting #}hello\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{# {% if foo %}bar{% else %} #}\n```\n\n----------------------------------------\n\nTITLE: Querying Current Time with Now() in Django ORM - Python\nDESCRIPTION: Shows filtering records against the database server's current date and time using Now(). Requires Django ORM and a model with a published DateTimeField. The filter returns objects published on or before the current timestamp; database-specific differences in retrieving current time are handled by Django under the hood.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.db.models.functions import Now\\n>>> Article.objects.filter(published__lte=Now())\\n<QuerySet [<Article: How to Django>]>\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Form for Formset in Python\nDESCRIPTION: Shows how to create a custom model form with custom validation and use it in a model formset factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass AuthorForm(forms.ModelForm):\n    class Meta:\n        model = Author\n        fields = [\"name\", \"title\"]\n\n    def clean_name(self):\n        # custom validation for the name field\n        ...\n```\n\nLANGUAGE: python\nCODE:\n```\nAuthorFormSet = modelformset_factory(Author, form=AuthorForm)\n```\n\n----------------------------------------\n\nTITLE: Counting Formset Errors with total_error_count\nDESCRIPTION: Demonstrates using the total_error_count method to determine how many validation errors exist across all forms in the formset, which can differ from the length of the errors list.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> # Using the previous example\n>>> formset.errors\n[{}, {'pub_date': ['This field is required.']}]\n>>> len(formset.errors)\n2\n>>> formset.total_error_count()\n1\n```\n\n----------------------------------------\n\nTITLE: Explicit Primary Key Assignment in Django\nDESCRIPTION: Shows how to explicitly set an auto-incrementing primary key value before saving an object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> b3 = Blog(id=3, name=\"Cheddar Talk\", tagline=\"Thoughts on cheese.\")\n>>> b3.id  # Returns 3.\n>>> b3.save()\n>>> b3.id  # Returns 3.\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Callback with on_commit in Django\nDESCRIPTION: Demonstrates how to register a simple callback function that will be executed after the current database transaction is successfully committed, using Django's transaction.on_commit() feature.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import transaction\n\n\ndef send_welcome_email(): ...\n\n\ntransaction.on_commit(send_welcome_email)\n```\n\n----------------------------------------\n\nTITLE: Time Zone Selection Form Template in Django\nDESCRIPTION: A Django template snippet that renders a form allowing users to select their preferred time zone. It highlights the currently active time zone and submits the selection to the set_timezone view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% load tz %}\n{% get_current_timezone as TIME_ZONE %}\n<form action=\"{% url 'set_timezone' %}\" method=\"POST\">\n    {% csrf_token %}\n    <label for=\"timezone\">Time zone:</label>\n    <select name=\"timezone\">\n        {% for city, tz in timezones.items %}\n        <option value=\"{{ tz }}\"{% if tz == TIME_ZONE %} selected{% endif %}>{{ city }}</option>\n        {% endfor %}\n    </select>\n    <input type=\"submit\" value=\"Set\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Language with HTTP Headers in Django Tests\nDESCRIPTION: Demonstrates how to set the language for a test client request using the Accept-Language HTTP header. This example sets the preferred language to French.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef test_language_using_header(self):\n    response = self.client.get(\"/\", headers={\"accept-language\": \"fr\"})\n    self.assertEqual(response.content, b\"Bienvenue sur mon site.\")\n```\n\n----------------------------------------\n\nTITLE: Working with Proxy Model Permissions in Django\nDESCRIPTION: This example illustrates how permissions work with proxy models in Django. It defines a base model and a proxy model with custom permissions, then demonstrates permission checking behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    class Meta:\n        permissions = [(\"can_eat_pizzas\", \"Can eat pizzas\")]\n\n\nclass Student(Person):\n    class Meta:\n        proxy = True\n        permissions = [(\"can_deliver_pizzas\", \"Can deliver pizzas\")]\n```\n\n----------------------------------------\n\nTITLE: Min Validation Example\nDESCRIPTION: Shows validation of minimum number of forms in a formset\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import formset_factory\nfrom myapp.forms import ArticleForm\nArticleFormSet = formset_factory(ArticleForm, min_num=3, validate_min=True)\ndata = {\n    \"form-TOTAL_FORMS\": \"2\",\n    \"form-INITIAL_FORMS\": \"0\",\n    \"form-0-title\": \"Test\",\n    \"form-0-pub_date\": \"1904-06-16\",\n    \"form-1-title\": \"Test 2\",\n    \"form-1-pub_date\": \"1912-06-23\",\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Daphne with a Django ASGI application\nDESCRIPTION: Command to start the Daphne server with a Django ASGI application. This command should be run from the same directory as manage.py to ensure the project is on the Python path.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/daphne.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndaphne myproject.asgi:application\n```\n\n----------------------------------------\n\nTITLE: Auto-Incrementing Primary Key Example in Django\nDESCRIPTION: Demonstrates how auto-incrementing primary keys work when saving new objects to the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> b2 = Blog(name=\"Cheddar Talk\", tagline=\"Thoughts on cheese.\")\n>>> b2.id  # Returns None, because b2 doesn't have an ID yet.\n>>> b2.save()\n>>> b2.id  # Returns the ID of your new object.\n```\n\n----------------------------------------\n\nTITLE: Simplified Field Group Rendering in Django Forms - HTML+Django template\nDESCRIPTION: Illustrates the new Django 5.0 `as_field_group` method for rendering full form fields as a single template block in the HTML+Django template language. This approach significantly reduces template verbosity and leverages the `django/forms/field.html` template. Requires Django 5.0+. The inputs are `BoundField` objects (name, email, password). Outputs fully composed field HTML in a concise form.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: HTML+Django template\nCODE:\n```\n<form>\\n...\\n<div>\\n  {{ form.name.as_field_group }}\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">{{ form.email.as_field_group }}</div>\\n    <div class=\\\"col\\\">{{ form.password.as_field_group }}</div>\\n  </div>\\n</div>\\n...\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for RedirectViews in Django\nDESCRIPTION: Shows how to set up URL patterns for custom and built-in RedirectViews in Django's urls.py file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom django.views.generic.base import RedirectView\n\nfrom article.views import ArticleCounterRedirectView, ArticleDetailView\n\nurlpatterns = [\n    path(\n        \"counter/<int:pk>/\",\n        ArticleCounterRedirectView.as_view(),\n        name=\"article-counter\",\n    ),\n    path(\"details/<int:pk>/\", ArticleDetailView.as_view(), name=\"article-detail\"),\n    path(\n        \"go-to-django/\",\n        RedirectView.as_view(url=\"https://www.djangoproject.com/\"),\n        name=\"go-to-django\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Fixtures into the Database Using django-admin (Shell)\nDESCRIPTION: Shows how to use the 'django-admin loaddata' management command to load serialized fixture data into the project's default database. Dependencies: Django installed and configured; referenced fixture files must exist and be accessible. Key parameter: <fixture label> specifies the base name of the fixture file (without extension if you want automatic type detection). Input: fixture label (required). Output: database populated with fixture's contents if loading succeeds. Limitations: errors occur if fixture not found or incompatible with serialization format.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin loaddata <fixture label>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Methods on Django Models in Python\nDESCRIPTION: Provides a Python code example showing how to define a simple custom method (`foo`) on a Django model class (`Task`). Methods defined like this within the model's Python code can be accessed from within Django templates, as shown in the subsequent example.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass Task(models.Model):\n    def foo(self):\n        return \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Sending Separate Emails to Multiple Recipients with Django\nDESCRIPTION: Demonstrates how to send separate emails to different recipients using send_mass_mail(). Each recipient receives their own email without seeing other recipients.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndatatuple = (\n    (\"Subject\", \"Message.\", \"from@example.com\", [\"john@example.com\"]),\n    (\"Subject\", \"Message.\", \"from@example.com\", [\"jane@example.com\"]),\n)\nsend_mass_mail(datatuple)\n```\n\n----------------------------------------\n\nTITLE: Using values() for Grouping and Aggregation (Implicit) Python\nDESCRIPTION: Illustrates using values() with a field and an aggregate expression. This implicitly groups the results by the field(s) provided as positional arguments to values() that appear before the aggregate, and then applies the aggregation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.db.models import Count\n>>> Blog.objects.values(\"entry__authors\", entries=Count(\"entry\"))\n```\n\n----------------------------------------\n\nTITLE: Django Date Field Operations\nDESCRIPTION: Examples of performing date comparisons and operations using F-expressions and timedelta.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import timedelta\n>>> Entry.objects.filter(mod_date__gt=F(\"pub_date\") + timedelta(days=3))\n```\n\n----------------------------------------\n\nTITLE: Locking Rows for Update in Django\nDESCRIPTION: This snippet demonstrates the use of the `select_for_update()` method, which applies row-level locking.  It supports options to handle lock contention via `nowait` and `skip_locked`. It also handles locking related objects via the `of` parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_59\n\nLANGUAGE: pycon\nCODE:\n```\nfrom django.db import transaction\n\nentries = Entry.objects.select_for_update().filter(author=request.user)\nwith transaction.atomic():\n    for entry in entries:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with File Fields in Django\nDESCRIPTION: Example of a Car model with ImageField and FileField for storing photos and specifications. The fields use the 'upload_to' parameter to specify where files should be stored relative to MEDIA_ROOT.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Car(models.Model):\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    photo = models.ImageField(upload_to=\"cars\")\n    specs = models.FileField(upload_to=\"specs\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Inline Formset in Python\nDESCRIPTION: Demonstrates how to create an inline formset for related Book objects belonging to an Author using inlineformset_factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms import inlineformset_factory\n>>> BookFormSet = inlineformset_factory(Author, Book, fields=[\"title\"])\n>>> author = Author.objects.get(name=\"Mike Royko\")\n>>> formset = BookFormSet(instance=author)\n```\n\n----------------------------------------\n\nTITLE: Raw Database Cursor Usage with Multiple Databases\nDESCRIPTION: Example of using raw database cursors with multiple databases using django.db.connections.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import connections\n\nwith connections[\"my_db_alias\"].cursor() as cursor:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Saving an Existing File to a Django FileField\nDESCRIPTION: Code example demonstrating how to save an existing file from disk to a Django FileField. It uses pathlib.Path and django.core.files.File to handle the file operations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> from django.core.files import File\n>>> path = Path(\"/some/external/specs.pdf\")\n>>> car = Car.objects.get(name=\"57 Chevy\")\n>>> with path.open(mode=\"rb\") as f:\n...     car.specs = File(f, name=path.name)\n...     car.save()\n...\n```\n\n----------------------------------------\n\nTITLE: Customizing ModelForm in Django Admin\nDESCRIPTION: Illustrates how to provide a custom ModelForm for use in the admin interface, overriding default form behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.contrib import admin\nfrom myapp.models import Person\n\n\nclass PersonForm(forms.ModelForm):\n    class Meta:\n        model = Person\n        exclude = [\"name\"]\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    exclude = [\"age\"]\n    form = PersonForm\n```\n\n----------------------------------------\n\nTITLE: Applying Permission Required Decorator in Django\nDESCRIPTION: Demonstrates the use of the @permission_required decorator to restrict access to a view based on user permissions. It shows how to specify the required permission and an optional login URL.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.decorators import permission_required\n\n@permission_required(\"polls.add_choice\", login_url=\"/loginpage/\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Using user_passes_test Decorator in Django\nDESCRIPTION: Shows how to use the user_passes_test decorator to restrict access based on a custom test function. The decorator redirects users who don't pass the test.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.decorators import user_passes_test\n\ndef email_check(user):\n    return user.email.endswith(\"@example.com\")\n\n@user_passes_test(email_check)\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Aggregation Example\nDESCRIPTION: Shows how to use conditional aggregation with filter argument to count books meeting specific criteria.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nhighly_rated = Count(\"book\", filter=Q(book__rating__gte=7))\nAuthor.objects.annotate(num_books=Count(\"book\"), highly_rated_books=highly_rated)\n```\n\n----------------------------------------\n\nTITLE: Getting Session Values with Default (Sync)\nDESCRIPTION: Example of retrieving a value from the session with a default fallback using the get method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfav_color = request.session.get('fav_color', 'red')\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Custom Django Template Filters (`humanize`)\nDESCRIPTION: Illustrates how to load a custom template tag/filter library (in this case, `humanize`) using the `{% load %}` tag in a Django template. After loading, filters provided by that library (e.g., `intcomma` for adding commas to integers) become available for use. Requires the corresponding app (`django.contrib.humanize`) to be in the project's `INSTALLED_APPS` setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_29\n\nLANGUAGE: html+django\nCODE:\n```\n{% load humanize %}\n\n{{ 45000|intcomma }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Person Model with Admin Display Properties\nDESCRIPTION: Shows how to set up a Person model with custom admin display properties and PersonAdmin configuration for list display.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n\n    @property\n    @admin.display(\n        ordering=\"last_name\",\n        description=\"Full name of the person\",\n        boolean=False,\n    )\n    def full_name(self):\n        return self.first_name + \" \" + self.last_name\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"full_name\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Settings for App-Level Overrides\nDESCRIPTION: This snippet demonstrates how to configure Django settings to enable template overriding from an app's template directory. The key setting is APP_DIRS set to True, which tells Django to look for templates within app directories.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/overriding-templates.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        # ...\n        \"APP_DIRS\": True,\n        # ...\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Applying CSRF Protection to Cached Views in Python\nDESCRIPTION: Shows how to use the csrf_protect decorator with cache_page for views that require CSRF protection and caching.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.csrf import csrf_protect\n\n\n@cache_page(60 * 15)\n@csrf_protect\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Updating Session Authentication Hash in Django\nDESCRIPTION: Shows how to use the update_session_auth_hash function to update the session hash after a password change, preventing the user from being logged out.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import update_session_auth_hash\n\ndef password_change(request):\n    if request.method == \"POST\":\n        form = PasswordChangeForm(user=request.user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            update_session_auth_hash(request, form.user)\n    else:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring STATICFILES_DIRS with Namespace Prefixes in Python\nDESCRIPTION: Configures static file directories with optional prefixes to create namespaces for specific file collections. This allows referencing files with a namespace prefix in templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nSTATICFILES_DIRS = [\n    # ...\n    (\"downloads\", \"/opt/webfiles/stats\"),\n]\n```\n\n----------------------------------------\n\nTITLE: URL Reversal with Language Activation in Django\nDESCRIPTION: Demonstration of using reverse() function with language activation to generate language-specific URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.urls import reverse\n>>> from django.utils.translation import activate\n\n>>> activate(\"en\")\n>>> reverse(\"news:category\", kwargs={\"slug\": \"recent\"})\n'/en/news/category/recent/'\n\n>>> activate(\"nl\")\n>>> reverse(\"news:category\", kwargs={\"slug\": \"recent\"})\n'/nl/nieuws/categorie/recent/'\n```\n\n----------------------------------------\n\nTITLE: Using stringfilter Decorator for String-Only Filters\nDESCRIPTION: This example demonstrates how to use the stringfilter decorator to ensure a filter only receives string input.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\nfrom django.template.defaultfilters import stringfilter\n\nregister = template.Library()\n\n@register.filter\n@stringfilter\ndef lower(value):\n    return value.lower()\n```\n\n----------------------------------------\n\nTITLE: Importing Django Settings in Python Code\nDESCRIPTION: Demonstrates how to import and use Django settings in Python code, including a conditional statement based on the DEBUG setting.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\n\nif settings.DEBUG:\n    # Do something\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Model Methods in Django ModelAdmin list_display\nDESCRIPTION: Example showing how to use model methods with the admin.display decorator in list_display to display calculated data in the admin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db import models\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n    birthday = models.DateField()\n\n    @admin.display(description=\"Birth decade\")\n    def decade_born_in(self):\n        decade = self.birthday.year // 10 * 10\n        return f\"{decade}'s\"\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"decade_born_in\"]\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to WKB in Django\nDESCRIPTION: Example demonstrating conversion of a geometric point to Well-Known Binary (WKB) format using the AsWKB function in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> bytes(City.objects.annotate(wkb=AsWKB(\"point\")).get(name=\"Chelyabinsk\").wkb)\nb'\\x01\\x01\\x00\\x00\\x00]3\\xf9f\\x9b\\x91K@\\x00X\\x1d9\\xd2\\xb9N@'\n```\n\n----------------------------------------\n\nTITLE: Filtering Queryset in Django BaseDateListView\nDESCRIPTION: The get_dated_queryset method filters the queryset using provided lookup arguments. It enforces restrictions such as allow_empty and allow_future on the queryset.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_dated_queryset(**lookup):\n    Returns a queryset, filtered using the query arguments defined by\n    ``lookup``. Enforces any restrictions on the queryset, such as\n    ``allow_empty`` and ``allow_future``.\n```\n\n----------------------------------------\n\nTITLE: Direct URL Redirection in Django\nDESCRIPTION: Examples of using redirect() with hardcoded URLs, both relative and absolute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_view(request):\n    ...\n    return redirect(\"/some/url/\")\n\ndef my_view(request):\n    ...\n    return redirect(\"https://example.com/\")\n```\n\n----------------------------------------\n\nTITLE: Appending Static File URLs in Django (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the `staticfiles_urlpatterns` helper function from `django.contrib.staticfiles.urls` within a Django URL configuration file (`urls.py`). It appends the necessary URL pattern(s) for serving static files to the existing `urlpatterns` list. This functionality is intended solely for development environments where the `DEBUG` setting is `True` and the `STATIC_URL` setting is a relative path (not empty or a full URL). Appropriate configuration of `STATICFILES_DIRS` is also necessary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n# ... the rest of your URLconf here ...\n\nurlpatterns += staticfiles_urlpatterns()\n```\n\n----------------------------------------\n\nTITLE: Applying the `last_modified` Decorator to a Django View in Python\nDESCRIPTION: Illustrates using the `@last_modified` decorator as a shortcut when only the last modified time needs to be checked. It applies the decorator with the `latest_entry` function directly to the `front_page` view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@last_modified(latest_entry)\ndef front_page(request, blog_id): ...\n```\n\n----------------------------------------\n\nTITLE: Defining Database-computed Default Field Values in Django Models - Python\nDESCRIPTION: Showcases the use of the `db_default` parameter on Django model fields to specify a database-side computed default in Python. Requires Django 5.0. Imports are from `django.db` and `django.db.models.functions`. Key parameters: `db_default` can be a static value or database function (e.g., Now, Pi). Inputs: new model instance creation; outputs: fields that default at the database layer if not set when saved. Limitations: Only supported by databases and Django 5.0+; behaviors may vary by backend.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\\nfrom django.db.models.functions import Now, Pi\\n\\n\\nclass MyModel(models.Model):\\n    age = models.IntegerField(db_default=18)\\n    created = models.DateTimeField(db_default=Now())\\n    circumference = models.FloatField(db_default=2 * Pi())\n```\n\n----------------------------------------\n\nTITLE: Using dictsort Template Filter in Django\nDESCRIPTION: The dictsort template filter in Django is used to sort dictionaries. It has been updated to use a restricted resolution logic that doesn't call methods or allow indexing on dictionaries, to prevent potential information disclosure.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndictsort\n```\n\n----------------------------------------\n\nTITLE: Creating Custom FieldListFilter with Custom Separator in Django Admin\nDESCRIPTION: Demonstrates how to create a custom FieldListFilter that uses a custom separator for multiple values in the query string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass FilterWithCustomSeparator(admin.FieldListFilter):\n    # custom list separator that should be used to separate values.\n    list_separator = \"|\"\n\n    def __init__(self, field, request, params, model, model_admin, field_path):\n        self.lookup_kwarg = \"%s__in\" % field_path\n        super().__init__(field, request, params, model, model_admin, field_path)\n\n    def expected_parameters(self):\n        return [self.lookup_kwarg]\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Constraint Names in Abstract Base Classes using Python\nDESCRIPTION: Demonstrates how to define constraints in abstract base classes with dynamically generated names to avoid collisions in subclasses. It uses `%(app_label)s` and `%(class)s` placeholders within the `name` parameter, which are replaced by the concrete model's app label and class name respectively. This example uses a `CheckConstraint`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import Q, CheckConstraint\n\nCheckConstraint(condition=Q(age__gte=18), name='%(app_label)s_%(class)s_is_adult')\n```\n\n----------------------------------------\n\nTITLE: Example of Extracting Source Expressions in Django\nDESCRIPTION: Simple example showing how to retrieve the source expressions from a Django query expression, specifically a Sum function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> Sum(F(\"foo\")).get_source_expressions()\n[F('foo')]\n```\n\n----------------------------------------\n\nTITLE: Creating GDALRaster Objects in Python\nDESCRIPTION: Demonstrates various ways to create GDALRaster objects, including from a file path, from a dictionary defining a new raster, and from bytes representing a raster file. Shows how to access basic properties of the raster.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_32\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.gdal import GDALRaster\n>>> rst = GDALRaster(\"/path/to/your/raster.tif\", write=False)\n>>> rst.name\n'/path/to/your/raster.tif'\n>>> rst.width, rst.height  # This file has 163 x 174 pixels\n(163, 174)\n>>> rst = GDALRaster(\n...     {  # Creates an in-memory raster\n...         \"srid\": 4326,\n...         \"width\": 4,\n...         \"height\": 4,\n...         \"datatype\": 1,\n...         \"bands\": [\n...             {\n...                 \"data\": (2, 3),\n...                 \"offset\": (1, 1),\n...                 \"size\": (2, 2),\n...                 \"shape\": (2, 1),\n...                 \"nodata_value\": 5,\n...             }\n...         ],\n...     }\n... )\n>>> rst.srs.srid\n4326\n>>> rst.width, rst.height\n(4, 4)\n>>> rst.bands[0].data()\narray([[5, 5, 5, 5],\n       [5, 2, 3, 5],\n       [5, 2, 3, 5],\n       [5, 5, 5, 5]], dtype=uint8)\n>>> rst_file = open(\"/path/to/your/raster.tif\", \"rb\")\n>>> rst_bytes = rst_file.read()\n>>> rst = GDALRaster(rst_bytes)\n>>> rst.is_vsi_based\nTrue\n>>> rst.name  # Stored in a random path in the vsimem filesystem.\n'/vsimem/da300bdb-129d-49a8-b336-e410a9428dad'\n```\n\n----------------------------------------\n\nTITLE: Serializing with Natural Keys in Django\nDESCRIPTION: Shows how to use the serializers.serialize() function with natural keys by setting use_natural_foreign_keys and use_natural_primary_keys parameters to True.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> serializers.serialize(\n...     \"json\",\n...     [book1, book2],\n...     indent=2,\n...     use_natural_foreign_keys=True,\n...     use_natural_primary_keys=True,\n... )\n```\n\n----------------------------------------\n\nTITLE: Querying with Unaccent Lookup in Django\nDESCRIPTION: Demonstrates the use of the unaccent lookup in Django for accent-insensitive searches on City names and User first names. This lookup requires the 'django.contrib.postgres' app and the unaccent PostgreSQL extension.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/lookups.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> City.objects.filter(name__unaccent=\"México\")\n['<City: Mexico>']\n\n>>> User.objects.filter(first_name__unaccent__startswith=\"Jerem\")\n['<User: Jeremy>', '<User: Jérémy>', '<User: Jérémie>', '<User: Jeremie>']\n```\n\n----------------------------------------\n\nTITLE: Path Lookup in Django JSONField\nDESCRIPTION: Demonstrates how to chain multiple keys together to form a path lookup for accessing nested data in a JSONField. This enables querying by nested properties within JSON objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.filter(data__owner__name=\"Bob\")\n<QuerySet [<Dog: Rufus>]>\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Managers to a Django Proxy Model\nDESCRIPTION: This example shows how to add new managers to a proxy model without replacing the existing default manager. It creates an abstract base class with the new manager and inherits from both the primary model and this abstract class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# Create an abstract class for the new manager.\nclass ExtraManagers(models.Model):\n    secondary = NewManager()\n\n    class Meta:\n        abstract = True\n\n\nclass MyPerson(Person, ExtraManagers):\n    class Meta:\n        proxy = True\n```\n\n----------------------------------------\n\nTITLE: Using get_list_or_404() in Django\nDESCRIPTION: Example of using get_list_or_404() to retrieve a filtered list of objects or raise Http404.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_list_or_404\n\n\ndef my_view(request):\n    my_objects = get_list_or_404(MyModel, published=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Hash Index in Django with PostgreSQL\nDESCRIPTION: Creates a Hash index with an option for fill factor. Useful for equality comparisons on large tables.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nHashIndex(*expressions, fillfactor=None, **options)\n```\n\n----------------------------------------\n\nTITLE: QuerySet Explain Method and Usage in Django\nDESCRIPTION: Describes the 'explain()' method, which outputs the database query plan, detailing execution strategies like indexes and joins for performance analysis. Includes examples for PostgreSQL and notes on supported formats and flags, highlighting compatibility and potential impact on database state.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_92\n\nLANGUAGE: python\nCODE:\n```\n.. method:: explain(format=None, **options)\n.. method:: aexplain(format=None, **options)\n\n*Asynchronous version*: ``aexplain()``\n\nReturns a string of the ``QuerySet``’s execution plan, which details how the\ndatabase would execute the query, including any indexes or joins that would be\nused. Knowing these details may help you improve the performance of slow\nqueries.\n\nFor example, when using PostgreSQL:\n\n.. code-block:: pycon\n\n    >>> print(Blog.objects.filter(title=\"My Blog\").explain())\n    Seq Scan on blog  (cost=0.00..35.50 rows=10 width=12)\n      Filter: (title = 'My Blog'::bpchar)\n\nThe output differs significantly between databases.\n\n``explain()`` is supported by all built-in database backends except Oracle\nbecause an implementation there isn't straightforward.\n\nThe ``format`` parameter changes the output format from the databases's\ndefault, which is usually text-based. PostgreSQL supports ``'TEXT'``,\n``'JSON'``, ``'YAML'``, and ``'XML'`` formats. MariaDB and MySQL support\n``'TEXT'`` (also called ``'TRADITIONAL'``) and ``'JSON'`` formats. MySQL\n8.0.16+ also supports an improved ``'TREE'`` format, which is similar to\nPostgreSQL's ``'TEXT'`` output and is used by default, if supported.\n\nSome databases accept flags that can return more information about the query.\nPass these flags as keyword arguments. For example, when using PostgreSQL:\n\n.. code-block:: pycon\n\n    >>> print(Blog.objects.filter(title=\"My Blog\").explain(verbose=True, analyze=True))\n    Seq Scan on public.blog  (cost=0.00..35.50 rows=10 width=12) (actual time=0.004..0.004 rows=10 loops=1)\n      Output: id, title\n      Filter: (blog.title = 'My Blog'::bpchar)\n    Planning time: 0.064 ms\n    Execution time: 0.058 ms\n\nOn some databases, flags may cause the query to be executed which could have\nadverse effects on your database. For example, the ``ANALYZE`` flag supported\nby MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes to data if\nthere are triggers or if a function is called, even for a ``SELECT`` query.\n\n.. versionchanged:: 5.2\n\n    Support for the ``memory`` and ``serialize`` options on PostgreSQL 17+ was\n    added.\n```\n\n----------------------------------------\n\nTITLE: Using Chr Function in Django Models\nDESCRIPTION: Demonstrates using the Chr function to convert numbers to characters\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Chr\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.filter(name__startswith=Chr(ord(\"M\"))).get()\n>>> print(author.name)\nMargaret Smith\n```\n\n----------------------------------------\n\nTITLE: Chaining order_by() After values() Python\nDESCRIPTION: Demonstrates chaining the order_by() method after values(). Both methods affect the QuerySet evaluation and ordering, but the preferred Django style is to place SQL-affecting methods like order_by() before output-affecting methods like values().\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nBlog.objects.values().order_by(\"id\")\n```\n\n----------------------------------------\n\nTITLE: Lazy Translation for Model Field Help Text in Django\nDESCRIPTION: Demonstrates how to use gettext_lazy() to provide translatable help text for a model field, ensuring that translations are only processed when needed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass MyThing(models.Model):\n    name = models.CharField(help_text=_(\"This is the help text\"))\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Isolation Level in Django Settings\nDESCRIPTION: Example showing how to configure a custom isolation level for PostgreSQL connections in Django. This allows for higher transaction isolation levels like SERIALIZABLE when needed for specific application requirements.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.backends.postgresql.psycopg_any import IsolationLevel\n\nDATABASES = {\n    # ...\n    \"OPTIONS\": {\n        \"isolation_level\": IsolationLevel.SERIALIZABLE,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Django Settings Configuration Status\nDESCRIPTION: Example of checking if Django settings are already configured before calling configure(), using the settings.configured property.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\n\nif not settings.configured:\n    settings.configure(myapp_defaults, DEBUG=True)\n```\n\n----------------------------------------\n\nTITLE: Class-level Middleware Settings Modification in Django\nDESCRIPTION: Demonstrates applying the modify_settings decorator at the class level to modify middleware settings for all test methods.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase, modify_settings\n\n\n@modify_settings(\n    MIDDLEWARE={\n        \"append\": \"django.middleware.cache.FetchFromCacheMiddleware\",\n        \"prepend\": \"django.middleware.cache.UpdateCacheMiddleware\",\n    }\n)\nclass MiddlewareTestCase(TestCase):\n    def test_cache_middleware(self):\n        response = self.client.get(\"/\")\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Model Instances in Django Shell (pycon)\nDESCRIPTION: Demonstrates creating instances of the `Publication` model and saving them to the database using the `save()` method within a Python interactive console session (`pycon`). This prepares data for subsequent many-to-many relationship examples.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1 = Publication(title=\"The Python Journal\")\n>>> p1.save()\n>>> p2 = Publication(title=\"Science News\")\n>>> p2.save()\n>>> p3 = Publication(title=\"Science Weekly\")\n>>> p3.save()\n```\n\n----------------------------------------\n\nTITLE: Exploring GDAL Data Source with Python Console\nDESCRIPTION: Example showing how to inspect a shapefile's properties using Django's GDAL DataSource API, including examining fields, features, geometry type and spatial reference system.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.gdal import DataSource\n>>> ds = DataSource(\"test_poly.shp\")\n>>> layer = ds[0]\n>>> print(layer.fields)  # Exploring the fields in the layer, we only want the 'str' field.\n['float', 'int', 'str']\n>>> print(len(layer))  # getting the number of features in the layer (should be 3)\n3\n>>> print(layer.geom_type)  # Should be 'Polygon'\nPolygon\n>>> print(layer.srs)  # WGS84 in WKT\nGEOGCS[\"GCS_WGS_1984\",\n    DATUM[\"WGS_1984\",\n        SPHEROID[\"WGS_1984\",6378137,298.257223563]],\n    PRIMEM[\"Greenwich\",0],\n    UNIT[\"Degree\",0.017453292519943295]]\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Properly Containing Geometry in Django\nDESCRIPTION: Shows how to use the contains_properly spatial lookup to filter Zipcode objects whose polygon contains a given geometry without touching its boundary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__contains_properly=geom)\n```\n\n----------------------------------------\n\nTITLE: Fixing unquoted table names in Subquery SQL with OuterRef in Django\nDESCRIPTION: Addresses an issue where table names in Subquery SQL were left unquoted when using OuterRef. This fix is related to ticket #28689 and improves SQL generation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nSubquery\n```\n\nLANGUAGE: Python\nCODE:\n```\nOuterRef\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'overlap' Lookup in Django Python\nDESCRIPTION: Uses the `overlap` lookup (`__overlap`, SQL operator `&&`) to query the `ages` `IntegerRangeField`. This finds `Event` objects where the `ages` range shares any point in common (overlaps) with the specified `NumericRange(8, 12)`. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__overlap=NumericRange(8, 12))\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Secure Email Handling Example in Django\nDESCRIPTION: Example showing proper email validation using Django forms before sending email\nSOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.core.mail import send_mail\nfrom django.http import JsonResponse\n\n\nclass EmailForm(forms.Form):\n    email = forms.EmailField()\n\n\ndef my_proof_of_concept(request):\n    form = EmailForm(request.GET)\n    if form.is_valid():\n        send_mail(\n            \"Email subject\",\n            \"Email body\",\n            form.cleaned_data[\"email\"],\n            [\"admin@example.com\"],\n        )\n        return JsonResponse(status=200)\n    return JsonResponse(form.errors, status=400)\n```\n\n----------------------------------------\n\nTITLE: Primary Key Behavior with Save Operation in Django\nDESCRIPTION: Python console example demonstrating what happens when changing the primary key value of an existing object and saving it - a new object is created instead of updating the existing one.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> fruit = Fruit.objects.create(name=\"Apple\")\n>>> fruit.name = \"Pear\"\n>>> fruit.save()\n>>> Fruit.objects.values_list(\"name\", flat=True)\n<QuerySet ['Apple', 'Pear']>\n```\n\n----------------------------------------\n\nTITLE: Translation without Alias in Django View\nDESCRIPTION: Shows translation using the full gettext function name without an alias. This approach is identical in functionality to using the '_' alias but is more verbose.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.utils.translation import gettext\n\n\ndef my_view(request):\n    output = gettext(\"Welcome to my site.\")\n    return HttpResponse(output)\n```\n\n----------------------------------------\n\nTITLE: Querying and Deleting Django Model Instances\nDESCRIPTION: This snippet demonstrates how to query a Django model and delete specific instances using the ORM. It filters choices based on text content and then deletes the filtered results.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> c = q.choice_set.filter(choice_text__startswith=\"Just hacking\")\n>>> c.delete()\n```\n\n----------------------------------------\n\nTITLE: Defining USE_X_FORWARDED_PORT setting\nDESCRIPTION: This setting enables the use of the X-Forwarded-Port header. It should be enabled when a proxy sets this header. USE_X_FORWARDED_HOST takes priority.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: Specifying Default Ordering Fields with `get_latest_by` in Django Model Meta (Python)\nDESCRIPTION: Illustrates how to use the `get_latest_by` Meta option in a Django model. It can specify a single field (like `order_date`) or a list of fields (like `['-priority', 'order_date']`) to determine the default ordering used by the `latest()` and `earliest()` methods on the model's manager. A leading hyphen indicates descending order.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Latest by ascending order_date.\nget_latest_by = \"order_date\"\n\n# Latest by priority descending, order_date ascending.\nget_latest_by = [\"-priority\", \"order_date\"]\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tests with Tox\nDESCRIPTION: This snippet shows how to install Tox and use it to run Django's automated test suite. Tox runs tests in isolated environments and includes checks for code formatting, import sorting, and documentation spelling.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install tox\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model Choices using a Sequence of Iterables\nDESCRIPTION: Illustrates defining field choices using a sequence (like a list) of two-item iterables (like tuples). The first item in each tuple is the value stored in the database, and the second is the human-readable display name. This sequence is assigned to the `choices` field option.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nYEAR_IN_SCHOOL_CHOICES = [\n    (\"FR\", \"Freshman\"),\n    (\"SO\", \"Sophomore\"),\n    (\"JR\", \"Junior\"),\n    (\"SR\", \"Senior\"),\n    (\"GR\", \"Graduate\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Using atomic Decorator for Transaction Management in Django\nDESCRIPTION: Example showing how to use the atomic decorator to wrap a view function in a transaction. This ensures all database operations in the function are executed in a single transaction.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import transaction\n\n\n@transaction.atomic\ndef viewfunc(request):\n    # This code executes inside a transaction.\n    do_stuff()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Field Instance via Django _meta (Python Interactive)\nDESCRIPTION: Demonstrates how to use the _meta.get_field() method to retrieve a single field instance (including related fields) by name from a Django model class. Shows cases for a direct model field, a related model field, and an illustration of raising a FieldDoesNotExist exception for unknown names. Requires Django and an existing model (e.g., User) to be present in the environment. The parameter field_name specifies the name of the field or related accessor; the result is either a field/relationship object or raises an exception.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/meta.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.auth.models import User\n\n# A field on the model\n>>> User._meta.get_field(\"username\")\n<django.db.models.fields.CharField: username>\n\n# A field from another model that has a relation with the current model\n>>> User._meta.get_field(\"logentry\")\n<ManyToOneRel: admin.logentry>\n\n# A non existent field\n>>> User._meta.get_field(\"does_not_exist\")\nTraceback (most recent call last):\n    ...\nFieldDoesNotExist: User has no field named 'does_not_exist'\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Queries with raw()\nDESCRIPTION: Example of using the params argument to safely pass parameters to a raw SQL query, which prevents SQL injection attacks by properly escaping values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> lname = \"Doe\"\n>>> Person.objects.raw(\"SELECT * FROM myapp_person WHERE last_name = %s\", [lname])\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Radio Buttons\nDESCRIPTION: Shows the final HTML output generated by Django when rendering radio buttons with labels and required attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<fieldset>\n    <legend>Radio buttons</legend>\n    <div class=\"myradio\">\n        <label for=\"id_beatles_0\"><input id=\"id_beatles_0\" name=\"beatles\" type=\"radio\" value=\"john\" required> John</label>\n    </div>\n    <div class=\"myradio\">\n        <label for=\"id_beatles_1\"><input id=\"id_beatles_1\" name=\"beatles\" type=\"radio\" value=\"paul\" required> Paul</label>\n    </div>\n    <div class=\"myradio\">\n        <label for=\"id_beatles_2\"><input id=\"id_beatles_2\" name=\"beatles\" type=\"radio\" value=\"george\" required> George</label>\n    </div>\n    <div class=\"myradio\">\n```\n\n----------------------------------------\n\nTITLE: Interpolating Strings with ngettext in JavaScript\nDESCRIPTION: Demonstrates using ngettext and interpolate functions in JavaScript to handle pluralization and string formatting for internationalization.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  count: 10,\n  total: 50\n};\n\nconst formats = ngettext(\n    'Total: %(total)s, there is %(count)s object',\n    'there are %(count)s of a total of %(total)s objects',\n    data.count\n);\nconst string = interpolate(formats, data, true);\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Project Dependencies\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the Django project. It includes conditional dependencies based on the Python version and operating system.\nSOURCE: https://github.com/django/django/blob/main/tests/requirements/py3.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiosmtpd >= 1.4.5\nasgiref >= 3.8.1\nargon2-cffi >= 23.1.0\nbcrypt >= 4.1.1\nblack >= 25.1.0\ndocutils >= 0.19\ngeoip2 >= 4.8.0\njinja2 >= 2.11.0\nnumpy >= 1.26.0; python_version < '3.14'\nPillow >= 10.1.0; sys.platform != 'win32' or python_version < '3.14'\n# pylibmc/libmemcached can't be built on Windows.\npylibmc; sys_platform != 'win32'\npymemcache >= 3.4.0\npywatchman; sys_platform != 'win32'\nPyYAML >= 6.0.2\nredis >= 5.1.0\nselenium >= 4.23.0\nsqlparse >= 0.5.0\ntblib >= 3.0.0\ntzdata\ncolorama >= 0.4.6; sys_platform == 'win32'\n```\n\n----------------------------------------\n\nTITLE: Validating an Invalid Formset\nDESCRIPTION: Shows formset validation with invalid data, demonstrating how errors are returned for each form in the formset and how to access individual form errors.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\n...     \"form-TOTAL_FORMS\": \"2\",\n...     \"form-INITIAL_FORMS\": \"0\",\n...     \"form-0-title\": \"Test\",\n...     \"form-0-pub_date\": \"1904-06-16\",\n...     \"form-1-title\": \"Test\",\n...     \"form-1-pub_date\": \"\",  # <-- this date is missing but required\n... }\n>>> formset = ArticleFormSet(data)\n>>> formset.is_valid()\nFalse\n>>> formset.errors\n[{}, {'pub_date': ['This field is required.']}]\n```\n\n----------------------------------------\n\nTITLE: Configuring URL for ArticleDetailView in Django\nDESCRIPTION: Shows how to set up a URL pattern for the ArticleDetailView, using a slug field for article identification.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom article.views import ArticleDetailView\n\nurlpatterns = [\n    path(\"<slug:slug>/\", ArticleDetailView.as_view(), name=\"article-detail\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Including All Fields in Django ModelForm\nDESCRIPTION: This example shows how to create a ModelForm that includes all fields from the model using the special '__all__' value. This approach should only be used when security concerns have been addressed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import ModelForm\n\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = \"__all__\"\n```\n\n----------------------------------------\n\nTITLE: Correctly Escaping Sequence Elements with Auto-escaping Off\nDESCRIPTION: Shows the proper method to escape each element in a sequence (`my_list`) when auto-escaping is disabled. The `escapeseq` filter is applied first to ensure individual elements are escaped before the `join` filter concatenates them.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n    {{ my_list|escapeseq|join:\", \" }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Inheriting and Customizing Django ModelForm\nDESCRIPTION: This example shows how to inherit from a ModelForm and add custom validation. It creates a new form class that extends ArticleForm and adds a custom clean method for the 'pub_date' field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass EnhancedArticleForm(ArticleForm):\n    def clean_pub_date(self): ...\n```\n\n----------------------------------------\n\nTITLE: Forcing INSERT on Parent Models using force_insert - Django ORM - Python\nDESCRIPTION: These examples show how to use the force_insert parameter when saving Django model instances, especially with multi-table inheritance. Providing a tuple of parent classes or models.Model forces the ORM to execute SQL INSERTs for child and parent models. Prerequisites: multi-table-inherited models (e.g., Restaurant, Place, Rating) and correct project setup. Key parameters: pk, name, and rating. This method is intended for advanced use cases; forcing insertions outside ordinary use can cause complexity or errors if not handled carefully.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nRestaurant(pk=1, name=\"Bob's Cafe\").save(force_insert=(Place,))\n```\n\nLANGUAGE: python\nCODE:\n```\nRestaurant(pk=1, name=\"Bob's Cafe\", rating=4).save(force_insert=(Place, Rating))\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URL Patterns\nDESCRIPTION: This snippet demonstrates how to configure URL patterns in Django, mapping URL paths to corresponding view functions for handling requests.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"articles/<int:year>/\", views.year_archive),\n    path(\"articles/<int:year>/<int:month>/\", views.month_archive),\n    path(\"articles/<int:year>/<int:month>/<int:pk>/\", views.article_detail),\n]\n```\n\n----------------------------------------\n\nTITLE: Running makemessages with Custom File Extensions - Shell\nDESCRIPTION: Demonstrates using the django-admin makemessages command to generate translation message files for a specific locale and custom file extension. This example targets German (de) and searches files with the 'xhtml' extension. Proper project structure and marked translation strings are prerequisites. The generated files allow for subsequent compilemessages step to enable internationalization support.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemessages --locale=de --extension xhtml\n```\n\n----------------------------------------\n\nTITLE: Django QuerySet Select For Update Method\nDESCRIPTION: Method for locking database rows that had a bug when using proxy model related fields in the 'of' argument\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.10.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nselect_for_update()\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties of Lazy-Loaded GEOSGeometry Objects (Python)\nDESCRIPTION: Illustrates the concept of lazy geometries in GeoDjango. Accessing the geometry field (`sm.mpoly`) on a retrieved model instance triggers the creation of a `GEOSGeometry` object. This snippet then shows how to access various representations (WKT, WKB, GeoJSON) of this loaded geometry object. Requires the `WorldBorder` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_17\n\nLANGUAGE: pycon\nCODE:\n```\n>>> sm = WorldBorder.objects.get(name=\"San Marino\")\n>>> sm.mpoly\n<MultiPolygon object at 0x24c6798>\n>>> sm.mpoly.wkt  # WKT\nMULTIPOLYGON (((12.4157980000000006 43.9579540000000009, 12.4505540000000003 43.9797209999999978, ...\n>>> sm.mpoly.wkb  # WKB (as Python binary buffer)\n<read-only buffer for 0x1fe2c70, size -1, offset 0 at 0x2564c40>\n>>> sm.mpoly.geojson  # GeoJSON\n'{ \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ 12.415798, 43.957954 ], [ 12.450554, 43.979721 ], ...`\n```\n\n----------------------------------------\n\nTITLE: Querying Strict Below Spatial Relationship in PostGIS\nDESCRIPTION: Example of using the 'strictly_below' lookup to find geometries whose bounding box is strictly below a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__strictly_below=geom)\n```\n\n----------------------------------------\n\nTITLE: Basic ModelAdmin Registration in Django\nDESCRIPTION: Shows how to create and register a basic ModelAdmin class for the Author model with Django's admin site.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom myapp.models import Author\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: has_key Lookup (Python)\nDESCRIPTION: Illustrates the use of the 'has_key' lookup on HStoreField, which filters all objects where a specific key exists in the hstore dict (SQL ? operator). Requires Django model with HStoreField and PostgreSQL backend. Input parameter is the name of the key to check; output is a QuerySet listing matching model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n\\n>>> Dog.objects.filter(data__has_key=\"owner\")\\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Using prefetch_related to optimize many-to-many queries in Django\nDESCRIPTION: Demonstrates how to use prefetch_related() to efficiently fetch related objects in many-to-many relationships, reducing multiple queries to just two.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n>>> Pizza.objects.all()\n[\"Hawaiian (ham, pineapple)\", \"Seafood (prawns, smoked salmon)\"...\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Pizza.objects.prefetch_related(\"toppings\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Django View with Database Query\nDESCRIPTION: Creates an index view that queries the database for the latest 5 questions and returns them as a comma-separated string in an HTTP response.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    output = \", \".join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model Choices within the Model Class (Best Practice)\nDESCRIPTION: Illustrates the recommended practice of defining choices as constants directly inside the model class. This keeps the choice definitions logically grouped with the model that uses them and allows easy referencing (e.g., `Student.FRESHMAN`). It also shows defining a dictionary mapping these constants to human-readable names for the `choices` option and setting a `default` value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Student(models.Model):\n    FRESHMAN = \"FR\"\n    SOPHOMORE = \"SO\"\n    JUNIOR = \"JR\"\n    SENIOR = \"SR\"\n    GRADUATE = \"GR\"\n    YEAR_IN_SCHOOL_CHOICES = {\n        FRESHMAN: \"Freshman\",\n        SOPHOMORE: \"Sophomore\",\n        JUNIOR: \"Junior\",\n        SENIOR: \"Senior\",\n        GRADUATE: \"Graduate\",\n    }\n    year_in_school = models.CharField(\n        max_length=2,\n        choices=YEAR_IN_SCHOOL_CHOICES,\n        default=FRESHMAN,\n    )\n\n    def is_upperclass(self):\n        return self.year_in_school in {self.JUNIOR, self.SENIOR}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic list_display in Django ModelAdmin\nDESCRIPTION: Shows how to set up list_display attribute to control which fields are displayed on the admin change list page, displaying first_name and last_name columns.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlist_display = [\"first_name\", \"last_name\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context-aware Simple Django Template Tag\nDESCRIPTION: This snippet shows how to create a simple Django template tag that accesses the current context. It uses the takes_context parameter to receive the context as an argument.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n@register.simple_tag(takes_context=True)\ndef current_time(context, format_string):\n    timezone = context[\"timezone\"]\n    return your_get_current_time_method(timezone, format_string)\n```\n\n----------------------------------------\n\nTITLE: Flexible Choices Declarations for Model Fields in Django 5.0 - Python\nDESCRIPTION: Illustrates the enhanced support in Django 5.0 for specifying model field choices as mappings, callables, or enums directly in Python, not just iterables of 2-tuples. Inputs can be dictionaries, enums (without .choices), or callable returning valid choices. Used for drop-down/radio field population and validation in forms and models. Key parameters: `choices` (mapping, callable, direct enum/subclass). Outputs: standardized 2-tuple list for rendering and validation. Limitations: Requires Django 5.0 or greater.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\\n\\nMedal = models.TextChoices(\\\"Medal\\\", \\\"GOLD SILVER BRONZE\\\")\\n\\nSPORT_CHOICES = {  # Using a mapping instead of a list of 2-tuples.\\n    \\\"Martial Arts\\\": {\\\"judo\\\": \\\"Judo\\\", \\\"karate\\\": \\\"Karate\\\"},\\n    \\\"Racket\\\": {\\\"badminton\\\": \\\"Badminton\\\", \\\"tennis\\\": \\\"Tennis\\\"},\\n    \\\"unknown\\\": \\\"Unknown\\\",\\n}\\n\\n\\ndef get_scores():\\n    return [(i, str(i)) for i in range(10)]\\n\\n\\nclass Winner(models.Model):\\n    name = models.CharField(...)\\n    medal = models.CharField(..., choices=Medal)  # Using `.choices` not required.\\n    sport = models.CharField(..., choices=SPORT_CHOICES)\\n    score = models.IntegerField(choices=get_scores)  # A callable is allowed.\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryDict in Python\nDESCRIPTION: Creates a QueryDict object based on a query string. The resulting dictionary will have multiple values per key where applicable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> QueryDict(\"a=1&a=2&c=3\")\n<QueryDict: {'a': ['1', '2'], 'c': ['3']}>\n```\n\n----------------------------------------\n\nTITLE: URL Configuration with Namespacing\nDESCRIPTION: Configures URL patterns with application namespace for the polls app to avoid naming conflicts.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"<int:question_id>/\", views.detail, name=\"detail\"),\n    path(\"<int:question_id>/results/\", views.results, name=\"results\"),\n    path(\"<int:question_id>/vote/\", views.vote, name=\"vote\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Basic DateTime Truncation Example in Django\nDESCRIPTION: Demonstrates using Django's Trunc function to group experiment data by day and count experiments per day.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> from django.db.models import Count, DateTimeField\n>>> from django.db.models.functions import Trunc\n>>> Experiment.objects.create(start_datetime=datetime(2015, 6, 15, 14, 30, 50, 321))\n>>> Experiment.objects.create(start_datetime=datetime(2015, 6, 15, 14, 40, 2, 123))\n>>> Experiment.objects.create(start_datetime=datetime(2015, 12, 25, 10, 5, 27, 999))\n>>> experiments_per_day = (\n...     Experiment.objects.annotate(\n...         start_day=Trunc(\"start_datetime\", \"day\", output_field=DateTimeField())\n...     )\n...     .values(\"start_day\")\n...     .annotate(experiments=Count(\"id\"))\n... )\n>>> for exp in experiments_per_day:\n...     print(exp[\"start_day\"], exp[\"experiments\"])\n...\n2015-06-15 00:00:00 2\n2015-12-25 00:00:00 1\n```\n\n----------------------------------------\n\nTITLE: Performing GeoDjango Distance Queries with Raster Bands in Python\nDESCRIPTION: Demonstrates a distance query where one side of the comparison is a raster object. The example filters `SouthTexasCity` objects based on their distance from a raster (`rst`). It specifically uses a 3-tuple `(rst, 2, D(km=7))` with the `distance_gte` lookup to specify that the third band (index 2) of the raster `rst` should be used for the distance calculation, filtering for results at least 7 km away.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(rst, 2, D(km=7)))\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with if Tag in Django Templates\nDESCRIPTION: The if tag evaluates conditions and renders content based on the result. It supports boolean operators, comparison operators, and filters for complex conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_19\n\nLANGUAGE: html+django\nCODE:\n```\n{% if athlete_list %}\n    Number of athletes: {{ athlete_list|length }}\n{% elif athlete_in_locker_room_list %}\n    Athletes should be out of the locker room soon!\n{% else %}\n    No athletes.\n{% endif %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% if athlete_list and coach_list %}\n    Both athletes and coaches are available.\n{% endif %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% if somevar == \"x\" %}\n  This appears if variable somevar equals the string \"x\"\n{% endif %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% if messages|length >= 100 %}\n   You have lots of messages today!\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic STATICFILES_DIRS Setting in Python\nDESCRIPTION: Sets up multiple directories where Django will look for static files when using FileSystemFinder. These paths should use Unix-style forward slashes, even on Windows systems.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nSTATICFILES_DIRS = [\n    \"/home/special.polls.com/polls/static\",\n    \"/home/polls.com/polls/static\",\n    \"/opt/webfiles/common\",\n]\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Values for Django ModelForm\nDESCRIPTION: This example shows how to provide initial values for a Django ModelForm that override both the form field defaults and the values from an attached model instance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\narticle = Article.objects.get(pk=1)\narticle.headline\n'My headline'\nform = ArticleForm(initial={\"headline\": \"Initial headline\"}, instance=article)\nform[\"headline\"].value()\n'Initial headline'\n```\n\n----------------------------------------\n\nTITLE: Defining DetailView Class in Django\nDESCRIPTION: Displays details of a single object. Handles retrieval of the object and rendering of the template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass DetailView():\n    # Attributes\n    content_type\n    context_object_name\n    extra_context\n    http_method_names\n    model\n    pk_url_kwarg\n    query_pk_and_slug\n    queryset\n    response_class\n    slug_field\n    slug_url_kwarg\n    template_engine\n    template_name\n    template_name_field\n    template_name_suffix\n\n    # Methods\n    as_view()\n    dispatch()\n    get()\n    get_context_data()\n    get_object()\n    head()\n    http_method_not_allowed()\n    render_to_response()\n    setup()\n```\n\n----------------------------------------\n\nTITLE: Initializing Django in Standalone Scripts\nDESCRIPTION: Demonstrates how to properly initialize Django in standalone scripts to avoid calling django.setup() multiple times. This is important when reusable application logic is placed in standalone scripts.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    import django\n\n    django.setup()\n```\n\n----------------------------------------\n\nTITLE: Creating a File Object in Django\nDESCRIPTION: Example showing how to manually create a Django File object from a Python file object. This demonstrates basic file handling but notes that files need to be closed manually.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.files import File\n\n# Create a Python file object using open()\n>>> f = open(\"/path/to/hello.world\", \"w\")\n>>> myfile = File(f)\n```\n\n----------------------------------------\n\nTITLE: Converting Datetime to Local Time Zone in Django\nDESCRIPTION: This snippet shows how to convert a datetime object to the current time zone in Django. It uses Django's timezone utilities to activate a specific time zone and convert a datetime object to that time zone.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.utils import timezone\n>>> timezone.activate(zoneinfo.ZoneInfo(\"Asia/Singapore\"))\n# For this example, we set the time zone to Singapore, but here's how\n# you would obtain the current time zone in the general case.\n>>> current_tz = timezone.get_current_timezone()\n>>> local = paris.astimezone(current_tz)\n>>> local\ndatetime.datetime(2012, 3, 3, 8, 30, tzinfo=zoneinfo.ZoneInfo(key='Asia/Singapore'))\n>>> local.date()\ndatetime.date(2012, 3, 3)\n```\n\n----------------------------------------\n\nTITLE: Prefetch Related Lookup Ordering Examples and Pitfalls\nDESCRIPTION: Illustrates the importance of lookup ordering in prefetch_related. Shows working examples and common errors that can occur when lookups are improperly ordered.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\n>>> prefetch_related(\"pizzas__toppings\", \"pizzas\")\n\n>>> prefetch_related(\"pizzas__toppings\", Prefetch(\"pizzas\", queryset=Pizza.objects.all()))\n\n>>> prefetch_related(\"pizza_list__toppings\", Prefetch(\"pizzas\", to_attr=\"pizza_list\"))\n```\n\n----------------------------------------\n\nTITLE: Defining StepValueValidator in Django\nDESCRIPTION: Validator class that ensures a value is an integral multiple of a step size, with optional offset. Raises ValidationError if the value doesn't match the step pattern.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nStepValueValidator(limit_value, message=None, offset=None)\n```\n\n----------------------------------------\n\nTITLE: Advanced Django Logging Configuration\nDESCRIPTION: Complex logging setup with multiple formatters, filters, and handlers. Includes console logging, admin email notifications, and custom formatting options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"verbose\": {\n            \"format\": \"{levelname} {asctime} {module} {process:d} {thread:d} {message}\",\n            \"style\": \"{\",\n        },\n        \"simple\": {\n            \"format\": \"{levelname} {message}\",\n            \"style\": \"{\",\n        },\n    },\n    \"filters\": {\n        \"special\": {\n            \"()\": \"project.logging.SpecialFilter\",\n            \"foo\": \"bar\",\n        },\n        \"require_debug_true\": {\n            \"()\": \"django.utils.log.RequireDebugTrue\",\n        },\n    },\n    \"handlers\": {\n        \"console\": {\n            \"level\": \"INFO\",\n            \"filters\": [\"require_debug_true\"],\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"simple\",\n        },\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n            \"filters\": [\"special\"],\n        },\n    },\n    \"loggers\": {\n        \"django\": {\n            \"handlers\": [\"console\"],\n            \"propagate\": True,\n        },\n        \"django.request\": {\n            \"handlers\": [\"mail_admins\"],\n            \"level\": \"ERROR\",\n            \"propagate\": False,\n        },\n        \"myproject.custom\": {\n            \"handlers\": [\"console\", \"mail_admins\"],\n            \"level\": \"INFO\",\n            \"filters\": [\"special\"],\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Manager in Django Models\nDESCRIPTION: This snippet demonstrates how to access a model's Manager (objects) to create QuerySets. It shows that Manager is accessible through the model class but not through model instances, enforcing separation between table-level and record-level operations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> Blog.objects\n<django.db.models.manager.Manager object at ...>\n>>> b = Blog(name=\"Foo\", tagline=\"Bar\")\n>>> b.objects\nTraceback:\n    ...\nAttributeError: \"Manager isn't accessible via Blog instances.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Settings in Django (Python)\nDESCRIPTION: This Python dictionary demonstrates how to configure specific settings for the test database within the main `DATABASES` configuration in a Django project. It shows setting a custom `NAME` ('mytestdatabase') for the test database associated with the 'default' database alias, overriding the default naming convention ('test_' + DATABASE_NAME). This configuration resides within the `TEST` dictionary nested inside a specific database connection's settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"USER\": \"mydatabaseuser\",\n        \"NAME\": \"mydatabase\",\n        \"TEST\": {\n            \"NAME\": \"mytestdatabase\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-Escaped String Literals as Django Filter Arguments\nDESCRIPTION: Illustrates that string literals provided as arguments to Django template filters (like `default`) are inserted directly without any automatic HTML escaping. They act as if passed through the `safe` filter. Template authors are responsible for ensuring literals are correctly escaped if needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_22\n\nLANGUAGE: html+django\nCODE:\n```\n{{ data|default:\"This is a string literal.\" }}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Django Settings in Module-Level Code\nDESCRIPTION: Illustrates an incorrect way of using Django settings at the module level, which can cause issues with manual configuration. This example shows why lazy loading or indirection should be used instead.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.urls import get_callable\n\ndefault_foo_view = get_callable(settings.FOO_VIEW)\n```\n\n----------------------------------------\n\nTITLE: Example Input: List of Tuples for Dictsort Index Sort - Python\nDESCRIPTION: Contains a list of tuples, each with two elements: a string and a value. Use as input for the dictsort index demonstration. Outputs a reordered list according to the string component. Standalone Python; no dependencies.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n[\n    (\"a\", \"42\"),\n    (\"c\", \"string\"),\n    (\"b\", \"foo\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Auto-Escaping in Custom Template Tag Renderer\nDESCRIPTION: This snippet demonstrates how to handle auto-escaping when creating a new context for sub-rendering in a custom template tag.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template import Context\n\n\ndef render(self, context):\n    # ...\n    new_context = Context({\"var\": obj}, autoescape=context.autoescape)\n    # ... Do something with new_context ...\n```\n\n----------------------------------------\n\nTITLE: Using CSRF Protection in Jinja2 Templates\nDESCRIPTION: Demonstrates how to include CSRF protection in Jinja2 templates using the csrf_input context variable.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{{ csrf_input }}\n```\n\n----------------------------------------\n\nTITLE: Non-form Error HTML Rendering\nDESCRIPTION: Shows how non-form errors are rendered in HTML with a special 'nonform' class\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"errorlist nonform\">\n    <li>Articles in a set must have distinct titles.</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: DateTime Complex Truncation in Django\nDESCRIPTION: Advanced example showing multiple truncation operations with different precisions and timezone handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import UTC, date, datetime\n>>> from django.db.models import Count\n>>> from django.db.models.functions import (\n...     TruncDate,\n...     TruncDay,\n...     TruncHour,\n...     TruncMinute,\n...     TruncSecond,\n... )\n>>> import zoneinfo\n>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=UTC)\n>>> Experiment.objects.create(start_datetime=start1, start_date=start1.date())\n>>> melb = zoneinfo.ZoneInfo(\"Australia/Melbourne\")\n>>> Experiment.objects.annotate(\n...     date=TruncDate(\"start_datetime\"),\n...     day=TruncDay(\"start_datetime\", tzinfo=melb),\n...     hour=TruncHour(\"start_datetime\", tzinfo=melb),\n...     minute=TruncMinute(\"start_datetime\"),\n...     second=TruncSecond(\"start_datetime\"),\n... ).values(\"date\", \"day\", \"hour\", \"minute\", \"second\").get()\n```\n\n----------------------------------------\n\nTITLE: Using get_media_prefix Template Tag\nDESCRIPTION: Shows how to use the get_media_prefix template tag to access the MEDIA_URL setting. This example stores the media URL in a data attribute for potential JavaScript use, with proper escaping.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_110\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n<body data-media-url=\"{% get_media_prefix %}\">\n```\n\n----------------------------------------\n\nTITLE: Creating a GIN Index in Django with PostgreSQL\nDESCRIPTION: Creates a GIN (Generalized Inverted Index) with options for fast updates and pending list limit. Useful for full-text search and indexing array or JSON data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGinIndex(*expressions, fastupdate=None, gin_pending_list_limit=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Returning Related Model Data as Dictionaries (Default FK) Python\nDESCRIPTION: Uses values() on a model with a ForeignKey. By default, values() represents ForeignKey fields with a key ending in '_id' (e.g., 'blog_id'), storing the primary key of the related object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.values()\n```\n\n----------------------------------------\n\nTITLE: Using OpClass for Custom Operator Classes in Django Indexes\nDESCRIPTION: Represents an expression with a custom operator class for use in functional indexes, unique constraints, or exclusion constraints. Requires 'django.contrib.postgres' in INSTALLED_APPS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nOpClass(expression, name)\n```\n\nLANGUAGE: python\nCODE:\n```\nIndex(\n    OpClass(Lower(\"username\"), name=\"varchar_pattern_ops\"),\n    name=\"lower_username_idx\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nUniqueConstraint(\n    OpClass(Upper(\"description\"), name=\"text_pattern_ops\"),\n    name=\"upper_description_unique\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nExclusionConstraint(\n    name=\"exclude_overlapping_ops\",\n    expressions=[\n        (OpClass(\"circle\", name=\"circle_ops\"), RangeOperators.OVERLAPS),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Poll Results in Django View\nDESCRIPTION: This Python code defines a view function to display the results of a poll. It retrieves the question object and renders it using a template.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_object_or_404, render\n\n\ndef results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, \"polls/results.html\", {\"question\": question})\n```\n\n----------------------------------------\n\nTITLE: Using get_or_create with ManyToManyField\nDESCRIPTION: Illustrates using get_or_create through a ManyToManyField, which restricts queries within the relation's context.  Shows potential integrity problems if not used consistently due to uniqueness constraints in the database and the isolated scope of the get_or_create call. Requires Chapter and Book models to be defined with a ManyToMany relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nbook = Book.objects.create(title=\"Ulysses\")\nbook.chapters.get_or_create(title=\"Telemachus\")\nbook.chapters.get_or_create(title=\"Telemachus\")\nChapter.objects.create(title=\"Chapter 1\")\nbook.chapters.get_or_create(title=\"Chapter 1\")\n# Raises IntegrityError\n```\n\n----------------------------------------\n\nTITLE: Defining a Function-Based View Handling GET Requests in Django\nDESCRIPTION: This snippet shows a simple Django function-based view. It checks if the incoming request method is GET using conditional branching (`if request.method == \"GET\"`) and returns a basic `HttpResponse` if it is. This illustrates the traditional way of handling different HTTP methods within a single function.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\n\ndef my_view(request):\n    if request.method == \"GET\":\n        # <view logic>\n        return HttpResponse(\"result\")\n```\n\n----------------------------------------\n\nTITLE: Querying ContentType for User Model in Python\nDESCRIPTION: This snippet demonstrates how to lookup the ContentType for the User model and use it to query for a specific user or access the User model class.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.contenttypes.models import ContentType\n>>> user_type = ContentType.objects.get(app_label=\"auth\", model=\"user\")\n>>> user_type\n<ContentType: user>\n\n>>> user_type.model_class()\n<class 'django.contrib.auth.models.User'>\n>>> user_type.get_object_for_this_type(username=\"Guido\")\n<User: Guido>\n```\n\n----------------------------------------\n\nTITLE: Documenting Django Model Example - Python\nDESCRIPTION: Example showing how to properly document a Django model class with docstrings and help_text. The example demonstrates documenting model relationships and field descriptions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/admindocs.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BlogEntry(models.Model):\n    \"\"\"\n    Stores a single blog entry, related to :model:`blog.Blog` and\n    :model:`auth.User`.\n    \"\"\"\n\n    slug = models.SlugField(help_text=\"A short label, generally used in URLs.\")\n    author = models.ForeignKey(\n        User,\n        models.SET_NULL,\n        blank=True,\n        null=True,\n    )\n    blog = models.ForeignKey(Blog, models.CASCADE)\n    ...\n\n    def publish(self):\n        \"\"\"Makes the blog entry live on the site.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using select_for_update with 'self' in multi-table inheritance\nDESCRIPTION: Example of a fixed bug where using 'self' in the 'of' argument with select_for_update() could cause data loss with multi-table inheritance by locking the parent model instead of the queryset's model.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.15.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nselect_for_update()\n```\n\n----------------------------------------\n\nTITLE: Creating a GIN Index for Search Vectors in Django\nDESCRIPTION: Demonstrates how to create a GIN index on a search vector to improve search performance. This is useful when searching across many records as it significantly speeds up search operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nGinIndex(\n    SearchVector(\"body_text\", \"headline\", config=\"english\"),\n    name=\"search_vector_idx\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminEmailHandler with HTML Emails in Django Settings\nDESCRIPTION: This configuration snippet shows how to set up the `AdminEmailHandler` in Django's `LOGGING` setting. It specifies the handler's level as `ERROR` and enables HTML attachments in the error emails by setting `include_html` to `True`. This provides a richer context, similar to the debug page when `DEBUG` is `True`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"handlers\": {\n    \"mail_admins\": {\n        \"level\": \"ERROR\",\n        \"class\": \"django.utils.log.AdminEmailHandler\",\n        \"include_html\": True,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Distance Objects in Python with GeoDjango\nDESCRIPTION: Demonstrates creating Distance objects using different units (kilometers and miles) and shows the string representation of these objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.measure import D, Distance\n>>> d1 = Distance(km=5)\n>>> print(d1)\n5.0 km\n>>> d2 = D(mi=5)  # `D` is an alias for `Distance`\n>>> print(d2)\n5.0 mi\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Mappings in Django\nDESCRIPTION: Demonstrates how to configure logger mappings to process records and forward them to handlers.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"loggers\": {\n    \"\": {\n        \"level\": \"DEBUG\",\n        \"handlers\": [\"file\"],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Django Test Client Query Parameters - Python\nDESCRIPTION: Demonstrates making GET requests with query parameters using Django's test client.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Client()\n>>> c.get(\"/customers/details/\", query_params={\"name\": \"fred\", \"age\": 7})\n```\n\n----------------------------------------\n\nTITLE: Formatting Localized Dates with Predefined Format in Django Templates - HTML+Django\nDESCRIPTION: Demonstrates using the \"date\" filter with a predefined format specifier (SHORT_DATE_FORMAT). This requires Django, with locale support enabled and LANGUAGE_CODE set for the desired localization. The template variable value must be a datetime object. Output is a locale-formatted date string; e.g., in the 'es' locale the formatting will adjust automatically.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_52\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|date:\"SHORT_DATE_FORMAT\" }}\n```\n\n----------------------------------------\n\nTITLE: Using Custom UserCreationForm in Django Admin (Django Python)\nDESCRIPTION: This code demonstrates how to integrate a custom user creation form (`MyUserCreationForm`) into the Django admin interface. It defines a custom `UserAdmin` class that specifies `MyUserCreationForm` as its `add_form`, then unregisters the default `User` admin and registers the `User` model with the custom admin class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.models import User\n\n\nclass UserAdmin(BaseUserAdmin):\n    add_form = MyUserCreationForm\n\n\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)\n```\n\n----------------------------------------\n\nTITLE: Installing Daphne via pip\nDESCRIPTION: Command to install the Daphne ASGI server using pip. This installs the Daphne package which provides the necessary server functionality for running Django as an ASGI application.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/daphne.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install daphne\n```\n\n----------------------------------------\n\nTITLE: Creating QueryDict from Keys in Python\nDESCRIPTION: Uses the fromkeys class method to create a new QueryDict with specified keys and a default value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> QueryDict.fromkeys([\"a\", \"a\", \"b\"], value=\"val\")\n<QueryDict: {'a': ['val', 'val'], 'b': ['val']}>\n```\n\n----------------------------------------\n\nTITLE: FormMixin Class Definition in Django\nDESCRIPTION: A mixin class that provides form creation and display functionality. Includes methods for handling form initialization, processing, and success/error handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FormMixin:\n    initial = {}\n    form_class = None\n    success_url = None\n    prefix = None\n\n    def get_initial(self):\n        return self.initial.copy()\n\n    def get_form_class(self):\n        return self.form_class\n\n    def get_form(self, form_class=None):\n        if form_class is None:\n            form_class = self.get_form_class()\n        return form_class(**self.get_form_kwargs())\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: has_keys Lookup (Python)\nDESCRIPTION: Shows filtering with 'has_keys', which returns all objects whose hstore dict contains all keys from a list (SQL ?& operator). Requires Django and HStoreField, with PostgreSQL. Input is a list of required keys; output is a QuerySet of fully matching model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n\\n>>> Dog.objects.filter(data__has_keys=[\"breed\", \"owner\"])\\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'startswith' Lookup in Django Python\nDESCRIPTION: Shows how to use the `startswith` lookup (`__startswith`) on the `ages` field. This query filters `Event` objects whose `ages` range has a lower bound equal to the specified value (21 in this case). Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_28\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__startswith=21)\n<QuerySet [<Event: Pub trip>]>\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters with Django Test Client POST Method\nDESCRIPTION: Shows how to include query parameters when making a POST request using the Django test client. The example demonstrates sending form data and query parameters in the same request.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> c.post(\n...     \"/login/\", {\"name\": \"fred\", \"passwd\": \"secret\"}, query_params={\"visitor\": \"true\"}\n... )\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Validator to a Django Model Field (Python)\nDESCRIPTION: Shows how to attach a callable validator to a Django model IntegerField via the 'validators' list. This example adds the custom 'validate_even' function to enforce even integers at the model layer. Dependency: Django's ORM. The model field 'even_field' will only accept even integers; invalid input triggers a ValidationError. Expects 'validate_even' to be defined/imported.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\n\\nclass MyModel(models.Model):\\n    even_field = models.IntegerField(validators=[validate_even])\n```\n\n----------------------------------------\n\nTITLE: ModelAdmin with Custom Field Display\nDESCRIPTION: Shows how to customize field display in the admin interface with list_display and custom view methods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"title\", \"view_birth_date\"]\n\n    @admin.display(empty_value=\"???\")\n    def view_birth_date(self, obj):\n        return obj.birth_date\n```\n\n----------------------------------------\n\nTITLE: Importing Database Exceptions\nDESCRIPTION: Shows how to import database exceptions from the django.db module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import Error, InterfaceError, DatabaseError, DataError, OperationalError, IntegrityError, InternalError, ProgrammingError, NotSupportedError\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Views for Author Model using Django Generic Views\nDESCRIPTION: Demonstrates the creation of Create, Update, and Delete views for the `Author` model using Django's generic class-based views (`CreateView`, `UpdateView`, `DeleteView`). These views automatically handle `ModelForm` creation and processing based on the specified `model` and `fields`. `AuthorDeleteView` explicitly defines a `success_url` using `reverse_lazy` for redirection after deletion.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse_lazy\nfrom django.views.generic.edit import CreateView, DeleteView, UpdateView\nfrom myapp.models import Author\n\n\nclass AuthorCreateView(CreateView):\n    model = Author\n    fields = [\"name\"]\n\n\nclass AuthorUpdateView(UpdateView):\n    model = Author\n    fields = [\"name\"]\n\n\nclass AuthorDeleteView(DeleteView):\n    model = Author\n    success_url = reverse_lazy(\"author-list\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Custom Formset in Django\nDESCRIPTION: Demonstrates how to create a custom formset with a base formset class that passes custom parameters to individual forms. It shows the usage of formset_factory and get_form_kwargs method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import BaseFormSet\nfrom django.forms import formset_factory\n\nclass BaseArticleFormSet(BaseFormSet):\n    def get_form_kwargs(self, index):\n        kwargs = super().get_form_kwargs(index)\n        kwargs[\"custom_kwarg\"] = index\n        return kwargs\n\nArticleFormSet = formset_factory(MyArticleForm, formset=BaseArticleFormSet)\nformset = ArticleFormSet()\n```\n\n----------------------------------------\n\nTITLE: Custom Path Converter Implementation\nDESCRIPTION: Example of creating and registering a custom path converter for handling four-digit year values in URLs. Includes regex pattern matching and value conversion methods.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass FourDigitYearConverter:\n    regex = \"[0-9]{4}\"\n\n    def to_python(self, value):\n        return int(value)\n\n    def to_url(self, value):\n        return \"%04d\" % value\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, register_converter\n\nfrom . import converters, views\n\nregister_converter(converters.FourDigitYearConverter, \"yyyy\")\n\nurlpatterns = [\n    path(\"articles/2003/\", views.special_case_2003),\n    path(\"articles/<yyyy:year>/\", views.year_archive),\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Fields in save() Method with update_fields\nDESCRIPTION: Demonstrates how to update a field value in the save() method while ensuring it's included in the update_fields argument if specified. This is useful for maintaining consistency when using update_fields for optimization.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\nfrom django.utils.text import slugify\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.TextField()\n\n    def save(self, **kwargs):\n        self.slug = slugify(self.name)\n        if (\n            update_fields := kwargs.get(\"update_fields\")\n        ) is not None and \"name\" in update_fields:\n            kwargs[\"update_fields\"] = {\"slug\"}.union(update_fields)\n        super().save(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Disabling Parent Ordering in Child Models with Django Meta\nDESCRIPTION: Example showing how to explicitly disable ordering inherited from a parent model by setting an empty ordering list in the child model's Meta class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass ChildModel(ParentModel):\n    # ...\n    class Meta:\n        # Remove parent's ordering effect\n        ordering = []\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn with Gunicorn\nDESCRIPTION: Command to install Uvicorn along with Gunicorn and the Uvicorn worker for production deployment.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install uvicorn uvicorn-worker gunicorn\n```\n\n----------------------------------------\n\nTITLE: Writing Geometry Objects to WKB in Python using GEOS\nDESCRIPTION: Shows how to use the WKBWriter class to convert a GEOSGeometry object to Well-Known Binary (WKB) format.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_23\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import Point, WKBWriter\n>>> pnt = Point(1, 1)\n>>> wkb_w = WKBWriter()\n>>> wkb_w.write(pnt)\n<read-only buffer for 0x103a898f0, size -1, offset 0 at 0x103a89930>\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'isempty' Lookup in Django Python\nDESCRIPTION: Uses the `isempty` lookup (`__isempty`) on the `ages` field. This query checks for `Event` objects where the `ages` range is empty (contains no points). Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_30\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__isempty=True)\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Combining QuerySets with XOR Operator in Django ORM (Python)\nDESCRIPTION: Demonstrates how to use the ^ (XOR) operator between Django QuerySets and with Q objects to match rows where only one of the conditions is true. Requires importing Q from django.db.models. Applicable when needing exclusive filtering between conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nModel.objects.filter(x=1) ^ Model.objects.filter(y=2)\nfrom django.db.models import Q\n\nModel.objects.filter(Q(x=1) ^ Q(y=2))\n```\n\n----------------------------------------\n\nTITLE: Allowed F-string Usage in Django\nDESCRIPTION: Shows proper f-string usage in Django code with simple variable and property access. These examples demonstrate acceptable f-string patterns according to Django coding conventions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Allowed\nf\"hello {user}\"\nf\"hello {user.name}\"\nf\"hello {self.user.name}\"\n```\n\n----------------------------------------\n\nTITLE: Template with Namespaced URL Tag\nDESCRIPTION: Updated template using namespaced URL tag for linking to the detail view.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n<li><a href=\"{% url 'polls:detail' question.id %}\">{{ question.question_text }}</a></li>\n```\n\n----------------------------------------\n\nTITLE: Excluding Objects Based on M2M Relationship (pycon)\nDESCRIPTION: Demonstrates using the `exclude()` method to retrieve `Article` objects that are *not* related to a specific `Publication` instance (`p2`).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_17\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.exclude(publications=p2)\n<QuerySet [<Article: Django lets you build web apps easily>]>\n```\n\n----------------------------------------\n\nTITLE: Checking for Changed Data in Django Forms - Python\nDESCRIPTION: Demonstrates using the has_changed() method to detect if form data deviates from initial values. By comparing provided data against initial values, it determines if the user modified any field. Requires Django's forms API and an example ContactForm; main parameter is the data dictionary. Output is a boolean indicating if changes occurred.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\\n...     \\\"subject\\\": \\\"hello\\\",\\n...     \\\"message\\\": \\\"Hi there\\\",\\n...     \\\"sender\\\": \\\"foo@example.com\\\",\\n...     \\\"cc_myself\\\": True,\\n... }\\n>>> f = ContactForm(data, initial=data)\\n>>> f.has_changed()\\nFalse\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Admin for Foreign Key Relationship\nDESCRIPTION: Sets up an admin interface with FriendshipInline to display related Friendship objects on the Person admin page. The explicit fk_name parameter specifies which foreign key to use for the inline.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom myapp.models import Friendship, Person\n\n\nclass FriendshipInline(admin.TabularInline):\n    model = Friendship\n    fk_name = \"to_person\"\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    inlines = [\n        FriendshipInline,\n    ]\n\n\nadmin.site.register(Person, PersonAdmin)\n```\n\n----------------------------------------\n\nTITLE: Defining AUTHENTICATION_BACKENDS setting\nDESCRIPTION: This setting specifies the authentication backend classes to use for user authentication. It is a list of strings that represent authentication backend classes. Refer to the authentication backends documentation for more details. The default value is ['django.contrib.auth.backends.ModelBackend'].\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: RST Documentation for Django Issue Reporting\nDESCRIPTION: ReStructuredText formatted documentation explaining Django's bug reporting and feature request guidelines, including security reporting procedures, best practices for bug reports, UI/UX considerations, and decision-making processes.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/bugs-and-features.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n======================================\nReporting bugs and requesting features\n======================================\n\n.. Important::\n\n    Please report security issues **only** to\n    security@djangoproject.com.  This is a private list only open to\n    long-time, highly trusted Django developers, and its archives are\n    not public. For further details, please see :doc:`our security\n    policies </internals/security>`.\n```\n\n----------------------------------------\n\nTITLE: Basic Model Definition with Many-to-Many and Foreign Key Relationships in Django\nDESCRIPTION: Defines a Restaurant model with a many-to-many relationship to Pizza (pizzas) and a foreign key to Pizza (best_pizza). Used to demonstrate prefetch_related operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nclass Restaurant(models.Model):\n    pizzas = models.ManyToManyField(Pizza, related_name=\"restaurants\")\n    best_pizza = models.ForeignKey(\n        Pizza, related_name=\"championed_by\", on_delete=models.CASCADE\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic for Authenticated User in Django (Python)\nDESCRIPTION: Demonstrates using the is_authenticated attribute on request.user to differentiate between logged-in and anonymous users. No external dependencies beyond Django's authentication system are required. Inputs: None directly, output: Custom logic can be added for each user type; illustrated as comments in the snippet.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif request.user.is_authenticated:\n    ...  # Do something for logged-in users.\nelse:\n    ...  # Do something for anonymous users.\n\n```\n\n----------------------------------------\n\nTITLE: Using the filesizeformat Filter in HTML+Django Template\nDESCRIPTION: This snippet demonstrates the `filesizeformat` template filter. `{{ value|filesizeformat }}` takes a numeric value (representing bytes) and formats it into a human-readable string representing the file size, using units like KB, MB, etc. For example, if `value` is 123456789, the filter outputs `117.7 MB`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|filesizeformat }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django App Settings\nDESCRIPTION: Example of INSTALLED_APPS configuration showing how to explicitly specify an application configuration class.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    \"polls.apps.PollsAppConfig\",\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Reverse M2M Querying in Django (pycon)\nDESCRIPTION: Demonstrates querying from the model that *doesn't* define the `ManyToManyField` (`Publication`) to filter based on attributes of the related model (`Article`). It shows filtering by the `Publication`'s own ID/PK and by attributes of related articles (`article__headline__startswith`, `article__id`, `article__pk`, `article` object instance).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Publication.objects.filter(id=1)\n<QuerySet [<Publication: The Python Journal>]>\n>>> Publication.objects.filter(pk=1)\n<QuerySet [<Publication: The Python Journal>]>\n\n>>> Publication.objects.filter(article__headline__startswith=\"NASA\")\n<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>\n\n>>> Publication.objects.filter(article__id=1)\n<QuerySet [<Publication: The Python Journal>]>\n>>> Publication.objects.filter(article__pk=1)\n<QuerySet [<Publication: The Python Journal>]>\n>>> Publication.objects.filter(article=1)\n<QuerySet [<Publication: The Python Journal>]>\n>>> Publication.objects.filter(article=a1)\n<QuerySet [<Publication: The Python Journal>]>\n```\n\n----------------------------------------\n\nTITLE: Aggregating across Django Generic Relations (Python)\nDESCRIPTION: Demonstrates how to perform database aggregation (specifically, counting related objects) across a GenericRelation using Django's ORM. This example counts the total number of 'tags' (representing TaggedItem objects linked via a GenericRelation) associated with all Bookmark objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Bookmark.objects.aggregate(Count(\"tags\"))\n{'tags__count': 3}\n```\n\n----------------------------------------\n\nTITLE: Customizing Deletion Widget in Django Formset\nDESCRIPTION: Shows how to customize the widget used for deletion in a Django formset by setting the deletion_widget attribute or overriding the get_deletion_widget method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import BaseFormSet, formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     deletion_widget = HiddenInput\n...\n\n>>> ArticleFormSet = formset_factory(\n...     ArticleForm, formset=BaseArticleFormSet, can_delete=True\n... )\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import BaseFormSet, formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     def get_deletion_widget(self):\n...         return HiddenInput(attrs={\"class\": \"deletion\"})\n...\n\n>>> ArticleFormSet = formset_factory(\n...     ArticleForm, formset=BaseArticleFormSet, can_delete=True\n... )\n```\n\n----------------------------------------\n\nTITLE: Customizing ModelForm Field with Model Attributes in Django\nDESCRIPTION: This example shows how to maintain model field attributes when declaratively defining a form field in a Django ModelForm. It explicitly sets the max_length, required, and help_text attributes for the 'headline' field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleForm(ModelForm):\n    headline = MyFormField(\n        max_length=200,\n        required=False,\n        help_text=\"Use puns liberally\",\n    )\n\n    class Meta:\n        model = Article\n        fields = [\"headline\", \"content\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Prefetch Related Usage with Related Fields\nDESCRIPTION: Demonstrates how to prefetch pizzas and their toppings in a single query. This will result in 3 database queries - one for restaurants, one for pizzas, and one for toppings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n>>> Restaurant.objects.prefetch_related(\"pizzas__toppings\")\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Service and Password Files in Django Settings\nDESCRIPTION: Configuration example showing how to use PostgreSQL service names and password files in Django's database settings. This approach allows database connection information to be stored in separate configuration files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"OPTIONS\": {\n            \"service\": \"my_service\",\n            \"passfile\": \".my_pgpass\",\n        },\n    }\n}\n```\n\nLANGUAGE: text\nCODE:\n```\n[my_service]\nhost=localhost\nuser=USER\ndbname=NAME\nport=5432\n```\n\nLANGUAGE: text\nCODE:\n```\nlocalhost:5432:NAME:USER:PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Adding Field-Specific Cleaning Logic in Django Python\nDESCRIPTION: This snippet shows how to add validation specific to the `recipients` field within the `ContactForm`. It defines a `clean_recipients` method that checks if the email address 'fred@example.com' is present in the cleaned data for the `recipients` field. If not, it raises a `ValidationError`. This method is automatically called during the form's validation process.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.core.exceptions import ValidationError\n\n\nclass ContactForm(forms.Form):\n    # Everything as before.\n    ...\n\n    def clean_recipients(self):\n        data = self.cleaned_data[\"recipients\"]\n        if \"fred@example.com\" not in data:\n            raise ValidationError(\"You have forgotten about Fred!\")\n\n        # Always return a value to use as the new cleaned data, even if\n        # this method didn't change it.\n        return data\n```\n\n----------------------------------------\n\nTITLE: Managing User Group Associations in Django (Python)\nDESCRIPTION: Shows the methods available on the `groups` many-to-many manager of a User object (`myuser`) for managing its group memberships. It demonstrates setting all groups (`set`), adding one or more groups (`add`), removing groups (`remove`), and clearing all group associations (`clear`).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmyuser.groups.set([group_list])\nmyuser.groups.add(group, group, ...)\nmyuser.groups.remove(group, group, ...)\nmyuser.groups.clear()\n```\n\n----------------------------------------\n\nTITLE: Django Test Client Redirect Following - Python\nDESCRIPTION: Demonstrates following redirects and accessing the redirect chain using Django's test client.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> response = c.get(\"/redirect_me/\", follow=True)\n>>> response.redirect_chain\n[('http://testserver/next/', 302), ('http://testserver/final/', 302)]\n```\n\n----------------------------------------\n\nTITLE: ModelFormMixin Class Definition in Django\nDESCRIPTION: A mixin for handling ModelForm operations, combining form processing with model instance management. Provides methods for form validation and model saving.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ModelFormMixin(FormMixin):\n    model = None\n    fields = None\n    success_url = None\n\n    def get_form_class(self):\n        if self.form_class:\n            return self.form_class\n        else:\n            return model_forms.modelform_factory(self.model, fields=self.fields)\n```\n\n----------------------------------------\n\nTITLE: Viewing Raw SQL Queries in Django\nDESCRIPTION: This snippet demonstrates how to view the raw SQL queries that Django is running. It requires setting DEBUG to True and uses the connection.queries attribute to display executed SQL statements and their execution times.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db import connection\n>>> connection.queries\n[{'sql': 'SELECT polls_polls.id, polls_polls.question, polls_polls.pub_date FROM polls_polls',\n'time': '0.002'}]\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Cache Operations in Django\nDESCRIPTION: Shows how to use asynchronous variants of cache methods, which are prefixed with 'a'. Demonstrates setting and checking for a cache key asynchronously.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_38\n\nLANGUAGE: pycon\nCODE:\n```\n>>> await cache.aset(\"num\", 1)\n>>> await cache.ahas_key(\"num\")\nTrue\n```\n\n----------------------------------------\n\nTITLE: Parsing Dates with Django's parse_date\nDESCRIPTION: Parses an ISO 8601 formatted date string and returns a datetime.date object. Returns None if the string is not well-formatted, and raises ValueError if well-formatted but invalid.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparse_date(value)\n```\n\n----------------------------------------\n\nTITLE: Chaining order_by() Before values() (Preferred Style) Python\nDESCRIPTION: Demonstrates chaining the order_by() method before values(). This is the preferred Django style, placing methods that affect the database query (like order_by()) before methods that affect the output format (like values()).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nBlog.objects.order_by(\"id\").values()\n```\n\n----------------------------------------\n\nTITLE: Applying the `condition` Decorator to a Django View in Python\nDESCRIPTION: Demonstrates applying the `@condition` decorator from `django.views.decorators.http` to a Django view function (`front_page`). It specifies the `latest_entry` function as the `last_modified_func` to enable conditional processing based on the resource's last modification time, potentially returning a 304 Not Modified response.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.http import condition\n\n\n@condition(last_modified_func=latest_entry)\ndef front_page(request, blog_id): ...\n```\n\n----------------------------------------\n\nTITLE: Class-level Settings Override in Django Tests\nDESCRIPTION: Demonstrates applying the override_settings decorator at the class level to modify settings for all test methods in a TestCase.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase, override_settings\n\n\n@override_settings(LOGIN_URL=\"/other/login/\")\nclass LoginTestCase(TestCase):\n    def test_login(self):\n        response = self.client.get(\"/sekrit/\")\n        self.assertRedirects(response, \"/other/login/?next=/sekrit/\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic CheckConstraint in Python\nDESCRIPTION: Provides an example of a `CheckConstraint` used within a Django model's `Meta.constraints`. It enforces the condition that the 'age' field must be greater than or equal to 18 using a `Q` object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import Q, CheckConstraint\n\nCheckConstraint(condition=Q(age__gte=18), name='age_gte_18')\n```\n\n----------------------------------------\n\nTITLE: Using distance_lt Filter in GeoDjango\nDESCRIPTION: Example of using the distance_lt lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is less than the specified distance (5 meters).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__distance_lt=(geom, D(m=5)))\n```\n\n----------------------------------------\n\nTITLE: Retrieving objects by unique indexed columns in Django\nDESCRIPTION: Demonstrates retrieving objects using a unique, indexed column (id) which is more efficient than using non-indexed columns. The database can use the index to quickly locate the record.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> entry = Entry.objects.get(id=10)\n```\n\n----------------------------------------\n\nTITLE: Defining USE_TZ setting\nDESCRIPTION: This setting specifies whether datetimes will be timezone-aware. If True, Django uses timezone-aware datetimes internally. If False, Django uses naive datetimes in local time, except when parsing ISO 8601 formatted strings. It is related to TIME_ZONE and USE_I18N settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Serving Static Files with static() in Django URLconf (Python)\nDESCRIPTION: This snippet shows how to serve static or media files during development using the static() helper function. It appends URL patterns for the MEDIA_URL, mapping to files under MEDIA_ROOT. This method is only suitable for development/debug mode and should not be used in production. Requires Django settings to define MEDIA_URL and MEDIA_ROOT, and proper importing from django.conf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urls.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n```\n\n----------------------------------------\n\nTITLE: Getting Full URL for Django Model Object\nDESCRIPTION: This code snippet demonstrates how to get the full URL (including domain) for a Django model object using the sites framework.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.sites.models import Site\n>>> obj = MyModel.objects.get(id=3)\n>>> obj.get_absolute_url()\n'/mymodel/objects/3/'\n>>> Site.objects.get_current().domain\n'example.com'\n>>> \"https://%s%s\" % (Site.objects.get_current().domain, obj.get_absolute_url())\n'https://example.com/mymodel/objects/3/'\n```\n\n----------------------------------------\n\nTITLE: Raising Multiple ValidationError Instances in Django - Python\nDESCRIPTION: Demonstrates how to raise multiple validation errors at once by passing a list to ValidationError, using recommended patterns (with individual ValidationError instances, codes, and params) and alternate patterns (plain strings). Useful in form field validation where multiple issues must be reported together. Requires Django forms and translation framework, and enhances error reporting through field or form cleaning methods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Good\nraise ValidationError(\n    [\n        ValidationError(_(\"Error 1\"), code=\"error1\"),\n        ValidationError(_(\"Error 2\"), code=\"error2\"),\n    ]\n)\n\n# Bad\nraise ValidationError(\n    [\n        _(\\\"Error 1\\\"),\n        _(\\\"Error 2\\\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Django Sitemap in URLconf (Python)\nDESCRIPTION: This code snippet shows how to activate sitemap generation in a Django project by adding a URL pattern to the URLconf. It maps the '/sitemap.xml' path to the sitemap view function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sitemaps.views import sitemap\n\npath(\n    \"sitemap.xml\",\n    sitemap,\n    {\"sitemaps\": sitemaps},\n    name=\"django.contrib.sitemaps.views.sitemap\",\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to URL Slugs - Django - Python\nDESCRIPTION: Demonstrates the usage of django.utils.text.slugify to convert strings into URL-usable slugs. Handles both ASCII and Unicode modes, replacing invalid characters and whitespace. Requires django.utils.text.slugify. Parameters: value (string to slugify), allow_unicode (bool). Output: slugified string in lowercase, with non-slug characters stripped or transformed. Limitation: only supports Unicode slugs if allow_unicode=True.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_33\n\nLANGUAGE: pycon\nCODE:\n```\n>>> slugify(\" Joel is a slug \")\n'joel-is-a-slug'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> slugify(\"你好 World\", allow_unicode=True)\n'你好-world'\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection Pools in Django Settings - Python\nDESCRIPTION: This example demonstrates how to enable and configure connection pooling for PostgreSQL in a Django project. The snippet is to be added to the DATABASES section of Django’s Python settings file, specifying the 'pool' key within 'OPTIONS' to customize pool parameters like min_size, max_size, and timeout. A dependency on the 'psycopg' package is required. Inputs include dictionary entries for the database configuration, and outputs are managed automatically at runtime. The snippet assumes correct database modules and may not handle missing dependencies or be compatible with earlier Django versions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\\n    \\\"default\\\": {\\n        \\\"ENGINE\\\": \\\"django.db.backends.postgresql\\\",\\n        # ...\\n        \\\"OPTIONS\\\": {\\n            \\\"pool\\\": {\\n                \\\"min_size\\\": 2,\\n                \\\"max_size\\\": 4,\\n                \\\"timeout\\\": 10,\\n            }\\n        },\\n    },\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Readonly Fields and Display Methods - Django Admin in Python\nDESCRIPTION: Illustrates defining readonly_fields in ModelAdmin, including a custom display method that uses format_html_join and mark_safe to render a computed address report with HTML line breaks. The readonly field presents non-editable data in the admin, which may be sourced from model methods or admin methods. Requires Django and optional use of django.utils.html and django.utils.safestring. Handles presentation of computed data and includes a fallback message if the address is unavailable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.utils.html import format_html_join\nfrom django.utils.safestring import mark_safe\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    readonly_fields = [\"address_report\"]\n\n    # description functions like a model field's verbose_name\n    @admin.display(description=\"Address\")\n    def address_report(self, instance):\n        # assuming get_full_address() returns a list of strings\n        # for each line of the address and you want to separate each\n        # line by a linebreak\n        return format_html_join(\n            mark_safe(\"<br>\"),\n            \"{}\",\n            ((line,) for line in instance.get_full_address()),\n        ) or mark_safe(\"<span class='errors'>I can't determine this address.</span>\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Field with Default Validators in Django - Python\nDESCRIPTION: Defines a custom SlugField as a subclass of CharField in Django, assigning Django's built-in validate_slug to its default_validators. Shows how to associate field validation logic using validators to enforce character rules. Dependencies include django.core.validators and django.forms.CharField, with 'validate_slug' ensuring only valid slugs are permitted. Input is string data for the field, output validation errors raised if the check fails.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import validators\nfrom django.forms import CharField\n\n\nclass SlugField(CharField):\n    default_validators = [validators.validate_slug]\n```\n\n----------------------------------------\n\nTITLE: Illustrating ValueError on M2M Add Before Save (pycon)\nDESCRIPTION: Demonstrates that attempting to add a related object to a `ManyToManyField` (`publications`) before the parent object (`a1`) has been saved results in a `ValueError`. Django requires the parent object to have a primary key (ID) before relationships can be established.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a1.publications.add(p1)\nTraceback (most recent call last):\n...\nValueError: \"<Article: Django lets you build web apps easily>\" needs to have a value for field \"id\" before this many-to-many relationship can be used.\n```\n\n----------------------------------------\n\nTITLE: Setting X-Frame-Options Per View in Django\nDESCRIPTION: These examples demonstrate how to use the xframe_options_deny and xframe_options_sameorigin decorators to set specific X-Frame-Options headers for individual views in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views.decorators.clickjacking import xframe_options_deny\nfrom django.views.decorators.clickjacking import xframe_options_sameorigin\n\n\n@xframe_options_deny\ndef view_one(request):\n    return HttpResponse(\"I won't display in any frame!\")\n\n\n@xframe_options_sameorigin\ndef view_two(request):\n    return HttpResponse(\"Display in a frame if it's from the same origin as me.\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple File Extensions with makemessages - Shell\nDESCRIPTION: Shows two approaches for specifying multiple file extensions when extracting translation strings using the django-admin makemessages command. Extensions may be provided as a comma-separated list or by repeating the --extension flag, allowing fine-grained selection of source files. This enhances flexibility when projects utilize diverse template or script file types.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemessages --locale=de --extension=html,txt --extension xml\n```\n\n----------------------------------------\n\nTITLE: Using JSON Response Mixin with Django CreateView\nDESCRIPTION: Demonstrates using the previously defined `JsonableResponseMixin` with a standard `CreateView` for the `Author` model. By inheriting from both `JsonableResponseMixin` and `CreateView`, the `AuthorCreateView` gains the ability to respond with JSON for API-like interactions while still handling standard HTML form submissions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass AuthorCreateView(JsonableResponseMixin, CreateView):\n    model = Author\n    fields = [\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Annotating QuerySet with Window Function (Average) - Django ORM - Python\nDESCRIPTION: Demonstrates Django's Window annotation to calculate the average rating for movies grouped by studio and genre and ordered by release year. Requires Django models named 'Movie' and respective fields ('rating', 'studio', 'genre', 'released__year'). The call returns a QuerySet where each movie entry is annotated with 'avg_rating', representing the peer-average in its group. The partitions and ordering enable meaningful peer comparison.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Avg, F, Window\n>>> Movie.objects.annotate(\n...     avg_rating=Window(\n...         expression=Avg(\"rating\"),\n...         partition_by=[F(\"studio\"), F(\"genre\")],\n...         order_by=\"released__year\",\n...     ),\n... )\n```\n\n----------------------------------------\n\nTITLE: Adding PostGIS Extension using Django Migration in Python\nDESCRIPTION: Django migration code to add the PostGIS extension to a database. This is an alternative method to enable PostGIS if the database user doesn't have superuser privileges.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/postgis.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.operations import CreateExtension\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    operations = [CreateExtension(\"postgis\"), ...]\n```\n\n----------------------------------------\n\nTITLE: Using vary_on_headers with Multiple Headers\nDESCRIPTION: Shows how to use vary_on_headers with multiple header parameters to make caching mechanisms vary on both User-Agent and Cookie. This creates separate cache entries for each unique combination of these headers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n@vary_on_headers(\"User-Agent\", \"Cookie\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Routers in Django\nDESCRIPTION: This setting, `DATABASE_ROUTERS`, specifies a list of routers used to determine which database to use for database queries in a multi-database configuration.  It defaults to an empty list, indicating no custom routing is in effect.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``[]`` (Empty list)\n\nThe list of routers that will be used to determine which database\nto use when performing a database query.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to Django Admin Base Template\nDESCRIPTION: Demonstration of using the extrabody block to add custom JavaScript that shows an alert when the admin page loads.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_77\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends 'admin/base.html' %}\n\n{% block extrabody %}\n    {{ block.super }}\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            window.alert('Welcome!');\n        });\n    </script>\n{% endblock extrabody %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Form Fields with CSS Classes - Django Forms - HTML\nDESCRIPTION: Displays the HTML output after rendering a form using a customized BoundField as defined in the previous Python snippet. Shows HTML <div> blocks with applied 'custom' CSS classes on form fields. This output is generated by Django's template rendering system using defined form and field attributes; dependencies are the CustomForm and CustomBoundField Python definitions. Inputs are form field values; outputs are HTML div, label, and input elements; potential limitations may occur on browsers lacking support for advanced input types or CSS classes.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"custom\">\n  <label for=\"id_name\">Your Name:</label>\n  <input type=\"text\" name=\"name\" class=\"name-input-class\" maxlength=\"100\" id=\"id_name\">\n</div>\n\n<div class=\"custom\">\n  <label for=\"id_email\">Your Email:</label>\n  <input type=\"email\" name=\"email\" maxlength=\"320\" required=\"\" id=\"id_email\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing Custom SQL Query with Django Connection\nDESCRIPTION: Example of executing a custom SQL query using Django's database connection. Shows how to update and select data using parameterized queries with cursor execution and result fetching.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import connection\n\ndef my_custom_sql(self):\n    with connection.cursor() as cursor:\n        cursor.execute(\"UPDATE bar SET foo = 1 WHERE baz = %s\", [self.baz])\n        cursor.execute(\"SELECT foo FROM bar WHERE baz = %s\", [self.baz])\n        row = cursor.fetchone()\n\n    return row\n```\n\n----------------------------------------\n\nTITLE: Applying title Filter in Django Templates\nDESCRIPTION: The title filter converts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_92\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|title }}\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Bytestrings with smart_bytes\nDESCRIPTION: Returns a bytestring version of an arbitrary object, encoded as specified. Can optionally skip conversion of non-string-like objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsmart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Template Inheritance\nDESCRIPTION: Displays a sample directory structure to provide context for the relative path examples used with the `{% extends %}` tag. It shows the location of `template.html` relative to potential parent templates (`base1.html`, `base2.html`, `base3.html`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ndir1/\n    template.html\n    base2.html\n    my/\n        base3.html\nbase1.html\n```\n\n----------------------------------------\n\nTITLE: Defining USE_X_FORWARDED_HOST setting\nDESCRIPTION: This setting determines whether to use the X-Forwarded-Host header. It should be enabled if a proxy setting this header is in use, and it takes priority over USE_X_FORWARDED_PORT. The header can include the port number, and in this case, USE_X_FORWARDED_PORT shouldn't be used.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Checking if Formset Data Has Changed\nDESCRIPTION: Shows how to check if any form data in the formset has been changed from its initial state using the has_changed() method, useful for determining if any user input has occurred.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\n...     \"form-TOTAL_FORMS\": \"1\",\n...     \"form-INITIAL_FORMS\": \"0\",\n...     \"form-0-title\": \"\",\n...     \"form-0-pub_date\": \"\",\n... }\n>>> formset = ArticleFormSet(data)\n>>> formset.has_changed()\nFalse\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Engine with Custom Libraries\nDESCRIPTION: Demonstrates initializing the Django `Engine` with a custom `libraries` dictionary. This dictionary maps desired template tag library labels (e.g., 'myapp_tags') to the dotted Python path of the module containing the tags ('path.to.myapp.tags'). This allows loading these custom tags using `{% load myapp_tags %}` in templates. It also shows aliasing an existing library ('admin.urls').\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEngine(\n    libraries={\n        \"myapp_tags\": \"path.to.myapp.tags\",\n        \"admin.urls\": \"django.contrib.admin.templatetags.admin_urls\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Facets for Django Admin Model - Python\nDESCRIPTION: This Python snippet shows how to configure a Django ModelAdmin to always show facet counts, bypassing the need for a query parameter. It demonstrates setting the show_facets attribute to admin.ShowFacets.ALWAYS on a custom ModelAdmin subclass. Requires Django installed and the admin app enabled; admin.ShowFacets enum is available in recent Django versions. Takes no direct parameters, but should be added to the relevant ModelAdmin for the model needing persistent facets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    ...\n    # Have facets always shown for this model admin.\n    show_facets = admin.ShowFacets.ALWAYS\n```\n\n----------------------------------------\n\nTITLE: Correcting JSONField CheckConstraints Validation in Django 4.2\nDESCRIPTION: Fixes a regression that caused incorrect validation of CheckConstraints on __isnull lookups against JSONField.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCheckConstraints\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Logger in Django\nDESCRIPTION: Shows how to import logging and create a basic logger instance using __name__ for module-level logging.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger(__name__)\n```\n\n----------------------------------------\n\nTITLE: Using captureOnCommitCallbacks in Django Tests\nDESCRIPTION: A partial example showing the TestCase.captureOnCommitCallbacks method usage for testing transaction.on_commit callbacks.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\nfrom django.test import TestCase\n\n\nclass ContactTests(TestCase):\n    def test_post(self):\n```\n\n----------------------------------------\n\nTITLE: Using patch_vary_headers Utility Function\nDESCRIPTION: Demonstrates direct modification of the Vary header using patch_vary_headers utility function, which adds or sets headers that a response varies on. This example adds the Cookie header to the response's Vary header.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.utils.cache import patch_vary_headers\n\n\ndef my_view(request):\n    ...\n    response = render(request, \"template_name\", context)\n    patch_vary_headers(response, [\"Cookie\"])\n    return response\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Role in Django Settings\nDESCRIPTION: Code snippet demonstrating how to specify a different role for database connections in Django settings. This allows an application to assume a specific role after connecting to the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        # ...\n        \"OPTIONS\": {\n            \"assume_role\": \"my_application_role\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom System Check Function in Python\nDESCRIPTION: Provides a template for creating a custom Django system check function. The function must accept `app_configs` (a list of applications to inspect, or None for all) and `**kwargs`. It should perform validation logic and return a list of `Error` or other `CheckMessage` instances if issues are found, or an empty list otherwise. The `@register()` decorator is used to register the check with the framework.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.checks import Error, register\n\n\n@register()\ndef example_check(app_configs, **kwargs):\n    errors = []\n    # ... your check logic here\n    if check_failed:\n        errors.append(\n            Error(\n                \"an error\",\n                hint=\"A hint.\",\n                obj=checked_object,\n                id=\"myapp.E001\",\n            )\n        )\n    return errors\n```\n\n----------------------------------------\n\nTITLE: Querying Articles for Current Site in Django View\nDESCRIPTION: This code snippet demonstrates how to query articles associated with the current site in a Django view function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.shortcuts import get_current_site\n\n\ndef article_detail(request, article_id):\n    try:\n        a = Article.objects.get(id=article_id, sites__id=get_current_site(request).id)\n    except Article.DoesNotExist:\n        raise Http404(\"Article does not exist on this site\")\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'lower_inf' Lookup in Django Python\nDESCRIPTION: Shows the `lower_inf` lookup (`__lower_inf`) used with the `ages` field. This query finds `Event` objects where the `ages` range has an unbounded (infinite) lower bound. Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_32\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__lower_inf=True)\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Defining Range Operator Constants in Python\nDESCRIPTION: Defines a Python class `RangeOperators` that holds string constants representing the standard PostgreSQL range operators (e.g., `@>`, `<`, `&&`). This class serves as a convenient way to refer to these operators programmatically, potentially reducing typos compared to using raw strings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nclass RangeOperators:\n    EQUAL = \"=\"\n    NOT_EQUAL = \"<>\"\n    CONTAINS = \"@>\"\n    CONTAINED_BY = \"<@\"\n    OVERLAPS = \"&&\"\n    FULLY_LT = \"<<\"\n    FULLY_GT = \">>\"\n    NOT_LT = \"&>\"\n    NOT_GT = \"&<\"\n    ADJACENT_TO = \"-|\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CSV Deserializer in Python\nDESCRIPTION: Defines a custom CSV deserializer class that extends Django's base deserializer. It reads CSV data and converts it back into model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Deserializer(serializers.python.Deserializer):\n    def __init__(self, stream_or_string, **options):\n        if isinstance(stream_or_string, bytes):\n            stream_or_string = stream_or_string.decode()\n        if isinstance(stream_or_string, str):\n            stream_or_string = stream_or_string.splitlines()\n        try:\n            objects = csv.DictReader(stream_or_string)\n        except Exception as exc:\n            raise DeserializationError() from exc\n        super().__init__(objects, **options)\n\n    def _handle_object(self, obj):\n        try:\n            model_fields = apps.get_model(obj[\"model\"])._meta.fields\n            obj[\"fields\"] = {\n                field.name: obj[field.name]\n                for field in model_fields\n                if field.name in obj\n            }\n            yield from super()._handle_object(obj)\n        except (GeneratorExit, DeserializationError):\n            raise\n        except Exception as exc:\n            raise DeserializationError(f\"Error deserializing object: {exc}\") from exc\n```\n\n----------------------------------------\n\nTITLE: Tagging Tests in Django Test Framework\nDESCRIPTION: Demonstrates how to apply tags to test methods and classes for selectively running tests using the tag decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import tag\n\n\nclass SampleTestCase(TestCase):\n    @tag(\"fast\")\n    def test_fast(self): ...\n\n    @tag(\"slow\")\n    def test_slow(self): ...\n\n    @tag(\"slow\", \"core\")\n    def test_slow_but_core(self): ...\n```\n\n----------------------------------------\n\nTITLE: Exempting a View from CSRF Protection in Django\nDESCRIPTION: This snippet demonstrates how to use the csrf_exempt decorator to mark a view as being exempt from CSRF protection.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/csrf.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\n\n\n@csrf_exempt\ndef my_view(request):\n    return HttpResponse(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Customizing View on Site URL in Django Admin\nDESCRIPTION: Example of implementing a custom view_on_site method in a ModelAdmin class that returns a specific URL based on the model instance's properties, allowing for custom 'View on site' links.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import reverse\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    def view_on_site(self, obj):\n        url = reverse(\"person-detail\", kwargs={\"slug\": obj.slug})\n        return \"https://example.com\" + url\n```\n\n----------------------------------------\n\nTITLE: Using never_cache Decorator to Prevent Caching\nDESCRIPTION: Demonstrates the never_cache decorator which adds headers to prevent caching of the response by browsers or other caches. Useful for dynamic content that should always be fetched fresh.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import never_cache\n\n\n@never_cache\ndef myview(request): ...\n```\n\n----------------------------------------\n\nTITLE: Using SHA1 Hash Function in Django ORM\nDESCRIPTION: Demonstrates generating SHA1 hash of a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import SHA1\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(name_sha1=SHA1(\"name\")).get()\n>>> print(author.name_sha1)\nb87efd8a6c991c390be5a68e8a7945a7851c7e5c\n```\n\n----------------------------------------\n\nTITLE: Implementing Separate Detail and Form Views in Django\nDESCRIPTION: Alternative implementation using separate DetailView and FormView classes with shared template and model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.views.generic import DetailView\nfrom books.models import Author\n\n\nclass AuthorInterestForm(forms.Form):\n    message = forms.CharField()\n\n\nclass AuthorDetailView(DetailView):\n    model = Author\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"form\"] = AuthorInterestForm()\n        return context\n```\n\n----------------------------------------\n\nTITLE: Querying for Users with Weak Password Hashes (Django Python)\nDESCRIPTION: This script demonstrates how to use the Django ORM to identify users whose passwords might be stored using weak hashing algorithms (unsalted MD5/SHA1, salted MD5/SHA1, crypt) that were removed from the default `PASSWORD_HASHERS` setting in Django 1.10. It checks password field prefixes and length after registering the `Length` lookup for `CharField`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\n# Unsalted MD5/SHA1:\nUser.objects.filter(password__startswith=\"md5$$\")\nUser.objects.filter(password__startswith=\"sha1$$\")\n# Salted MD5/SHA1:\nUser.objects.filter(password__startswith=\"md5$\").exclude(password__startswith=\"md5$$\")\nUser.objects.filter(password__startswith=\"sha1$\").exclude(password__startswith=\"sha1$$\")\n# Crypt hasher:\nUser.objects.filter(password__startswith=\"crypt$$\")\n\nfrom django.db.models import CharField\nfrom django.db.models.functions import Length\n\nCharField.register_lookup(Length)\n# Unsalted MD5 passwords might not have an 'md5$$' prefix:\nUser.objects.filter(password__length=32)\n```\n\n----------------------------------------\n\nTITLE: Defining the `condition` Decorator Signature in Python\nDESCRIPTION: Shows the signature of the `django.views.decorators.http.condition` decorator. It accepts optional `etag_func` and `last_modified_func` arguments, which are functions used to compute the ETag and last modified time for a resource, respectively. These functions receive the request object and the view's arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncondition(etag_func=None, last_modified_func=None)\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates with render_to_string()\nDESCRIPTION: Example of using render_to_string() to load and render a template with context data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template.loader import render_to_string\n\nrendered = render_to_string(\"my_template.html\", {\"foo\": \"bar\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing ContactFormView using Django's FormView\nDESCRIPTION: Example of implementing a ContactFormView class using Django's FormView, specifying template, form class, success URL, and form_valid method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.forms import ContactForm\nfrom django.views.generic.edit import FormView\n\n\nclass ContactFormView(FormView):\n    template_name = \"contact.html\"\n    form_class = ContactForm\n    success_url = \"/thanks/\"\n\n    def form_valid(self, form):\n        # This method is called when valid form data has been POSTed.\n        # It should return an HttpResponse.\n        form.send_email()\n        return super().form_valid(form)\n```\n\n----------------------------------------\n\nTITLE: Using a Django Tag with 'as' Syntax for Context Variable (HTML+Django)\nDESCRIPTION: This Django template snippet shows an improved usage pattern for a context-setting tag (`current_time`). The `as my_current_time` clause allows the template author to specify the name of the variable (`my_current_time`) where the tag's result should be stored in the context. This avoids hardcoding variable names and potential conflicts.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_35\n\nLANGUAGE: html+django\nCODE:\n```\n{% current_time \"%Y-%m-%d %I:%M %p\" as my_current_time %}\n<p>The current time is {{ my_current_time }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Writing a Data Migration in Django\nDESCRIPTION: Illustrates how to write a data migration that combines 'first_name' and 'last_name' fields into a new 'name' field. Uses RunPython operation to execute custom Python code during migration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\n\ndef combine_names(apps, schema_editor):\n    # We can't import the Person model directly as it may be a newer\n    # version than this migration expects. We use the historical version.\n    Person = apps.get_model(\"yourappname\", \"Person\")\n    for person in Person.objects.all():\n        person.name = f\"{person.first_name} {person.last_name}\"\n        person.save()\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"yourappname\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.RunPython(combine_names),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Recommended Pluralization Approach in Django\nDESCRIPTION: Demonstrates the recommended approach for handling pluralization in Django. This method works correctly across different languages with varying pluralization rules.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ntext = ngettext(\n    \"There is %(count)d %(name)s object available.\",\n    \"There are %(count)d %(name)s objects available.\",\n    count,\n) % {\n    \"count\": count,\n    \"name\": Report._meta.verbose_name,\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database for Form Field Choices in Django (Discouraged)\nDESCRIPTION: This snippet demonstrates a common mistake where a database query is executed during module import to populate form field choices. This approach is discouraged as it can slow down project startup and potentially cache stale data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass LocationForm(forms.Form):\n    country = forms.ChoiceField(choices=[c.name for c in Country.objects.all()])\n```\n\n----------------------------------------\n\nTITLE: Using Named Endblock Tags in Django Templates\nDESCRIPTION: Demonstrates how to use named endblock tags for improved readability in larger templates. This helps identify which block is being closed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{% block content %}\n...\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Adding translator comments in Django templates\nDESCRIPTION: Demonstrates how to add comments for translators in Django templates using both the {% comment %} tag and one-line comment constructs.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_29\n\nLANGUAGE: html+django\nCODE:\n```\n{% comment %}Translators: View verb{% endcomment %}\n{% translate \"View\" %}\n\n{% comment %}Translators: Short intro blurb{% endcomment %}\n<p>{% blocktranslate %}A multiline translatable\nliteral.{% endblocktranslate %}</p>\n\n{# Translators: Label of a button that triggers search #}\n<button type=\"submit\">{% translate \"Go\" %}</button>\n\n{# Translators: This is a text of the base template #}\n```\n\n----------------------------------------\n\nTITLE: Using formfield_callback in Django ModelForm\nDESCRIPTION: This example shows how to use the formfield_callback attribute in a Django ModelForm to customize field creation. It defines a custom function that returns a special field for the 'slug' field and uses default behavior for other fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import ModelForm\nfrom myapp.models import Article\n\n\ndef formfield_for_dbfield(db_field, **kwargs):\n    if db_field.name == \"slug\":\n        return MySlugFormField()\n    return db_field.formfield(**kwargs)\n\n\nclass ArticleForm(ModelForm):\n    class Meta:\n        model = Article\n        fields = [\"pub_date\", \"headline\", \"content\", \"reporter\", \"slug\"]\n        formfield_callback = formfield_for_dbfield\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Render Callback for Django TemplateResponse\nDESCRIPTION: This code snippet shows how to define a post-render callback function for a TemplateResponse. This allows for operations that must be performed on a fully rendered response, such as caching.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template.response import TemplateResponse\n\n\ndef my_render_callback(response):\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Email Operations in Django\nDESCRIPTION: Specifies a timeout duration in seconds (None by default, meaning no timeout) for blocking email operations like the SMTP connection attempt.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_TIMEOUT = None\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: contained_by Lookup (Python)\nDESCRIPTION: Demonstrates use of the 'contained_by' lookup for HStoreField, returning objects whose key-value pairs all exist within the provided dictionary (SQL <@ operator). This is the inverse of 'contains'. Depends on the Django ORM and HStoreField with PostgreSQL. Inputs are dicts representing supersets; outputs are QuerySets with subset matches.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\", \"owner\": \"Bob\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n>>> Dog.objects.create(name=\"Fred\", data={})\\n\\n>>> Dog.objects.filter(data__contained_by={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n<QuerySet [<Dog: Meg>, <Dog: Fred>]>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.filter(data__contained_by={\"breed\": \"collie\"})\\n<QuerySet [<Dog: Fred>]>\n```\n\n----------------------------------------\n\nTITLE: Updating a Django Model Field using Python Logic\nDESCRIPTION: Illustrates a standard Python approach to incrementing a model field. This involves retrieving the object, modifying the attribute value in Python memory, and then saving the object back to the database. This method can be less efficient and potentially prone to race conditions in concurrent environments compared to using F() expressions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Tintin filed a news story!\nreporter = Reporters.objects.get(name=\"Tintin\")\nreporter.stories_filed += 1\nreporter.save()\n```\n\n----------------------------------------\n\nTITLE: Filtering and Ordering with Collation in Django ORM with Python\nDESCRIPTION: These snippets demonstrate using the Collate function to filter or order by fields using a specified collation, useful for case-insensitive or locale-aware queries in Django. Required dependencies: the Collate function and optionally Value for explicit value wrapping. Parameters include the value, field name, and the collation name. Outputs are querysets filtered or ordered according to the collation, such as case-insensitive matches or custom alphabetic ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Author.objects.filter(name=Collate(Value(\"john\"), \"nocase\"))\n<QuerySet [<Author: John>, <Author: john>]>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Author.objects.order_by(Collate(\"name\", \"et-x-icu\"))\n<QuerySet [<Author: Ursula>, <Author: Veronika>, <Author: Ülle>]>\n```\n\n----------------------------------------\n\nTITLE: Validating URL Safety in Django\nDESCRIPTION: Introduces a new utility function 'is_safe_url' in Django 1.3.5 for validating user-supplied redirect targets. This function checks if a URL is relative or matches a given hostname to prevent redirects to arbitrary third-party sites.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.http.is_safe_url\n```\n\n----------------------------------------\n\nTITLE: Defining RedirectCycleError Exception in Django Tests (Python)\nDESCRIPTION: Defines the `RedirectCycleError` exception class, part of the `django.test.client` module. This exception is raised by the Django test client when it detects a redirection loop or a chain of redirects that exceeds a predefined limit during test execution.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. exception:: client.RedirectCycleError\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to KML in Django\nDESCRIPTION: Example showing conversion of a polygon to Keyhole Markup Language (KML) format using the AsKML function in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = Zipcode.objects.annotate(kml=AsKML(\"poly\"))\n>>> print(qs[0].kml)\n<Polygon><outerBoundaryIs><LinearRing><coordinates>-103.04135,36.217596,0 ...\n-103.04135,36.217596,0</coordinates></LinearRing></outerBoundaryIs></Polygon>\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Time - Django ORM (Python)\nDESCRIPTION: Demonstrates filtering of datetime fields by specific time values or ranges using '__time' and 'range' lookups in Django. Inputs are datetime.time objects; outputs are QuerySets matching the time criteria. Requires datetime module and Django ORM; supports timezone-aware filtering when applicable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__time=datetime.time(14, 30))\nEntry.objects.filter(pub_date__time__range=(datetime.time(8), datetime.time(17)))\n```\n\n----------------------------------------\n\nTITLE: Registering Models in Django Admin\nDESCRIPTION: This Python code registers the Question model in the Django admin interface, making it accessible and editable through the admin site.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Question Publication Tests\nDESCRIPTION: Test methods to verify was_published_recently() behavior for old and recent questions.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_was_published_recently_with_old_question(self):\n    \"\"\"\n    was_published_recently() returns False for questions whose pub_date\n    is older than 1 day.\n    \"\"\"\n    time = timezone.now() - datetime.timedelta(days=1, seconds=1)\n    old_question = Question(pub_date=time)\n    self.assertIs(old_question.was_published_recently(), False)\n\n\ndef test_was_published_recently_with_recent_question(self):\n    \"\"\"\n    was_published_recently() returns True for questions whose pub_date\n    is within the last day.\n    \"\"\"\n    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)\n    recent_question = Question(pub_date=time)\n    self.assertIs(recent_question.was_published_recently(), True)\n```\n\n----------------------------------------\n\nTITLE: Updating Boolean Fields with Logical Negation of F Expression - Django ORM - Python\nDESCRIPTION: This snippet shows how to logically negate a BooleanField using the ~ operator on an F expression. It updates the 'is_active' field for all Company objects by flipping its current boolean value. This operation is performed in the database for efficiency and atomicity, and requires that 'is_active' be a BooleanField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F\n\nCompany.objects.update(is_active=~F(\"is_active\"))\n```\n\n----------------------------------------\n\nTITLE: Loading Fixtures from stdin with django-admin loaddata - Shell\nDESCRIPTION: Demonstrates how to load fixtures from standard input in JSON format using the django-admin loaddata command with --format=json and the '-' argument. Django requires the --format option to properly parse the incoming data. This is suitable when streaming serialized data directly, such as in CI pipelines or via shell redirections. The command expects a valid Django fixture structure in the provided format.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin loaddata --format=json -\n```\n\n----------------------------------------\n\nTITLE: Defining `__str__` Method for a Django Model (Python)\nDESCRIPTION: Shows how to define the `__str__` method on a Django model (`Person`) to provide a human-readable string representation, typically used in the Django admin and templates. It imports `models` from `django.db` and returns a formatted string of the person's first and last names.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name}\"\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Linking Related Object - Django Model save() - Python\nDESCRIPTION: Shows how to manually create and link a related object by explicitly constructing the Entry, setting its foreign key, and saving with force_insert=True. Equivalent to using RelatedManager's create(), but more verbose. Inputs are field values and parent instance; output is a saved Entry linked to a Blog. Demonstrates how direct instantiation can replicate RelatedManager functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> b = Blog.objects.get(id=1)\n>>> e = Entry(blog=b, headline=\"Hello\", body_text=\"Hi\", pub_date=datetime.date(2005, 1, 1))\n>>> e.save(force_insert=True)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom MultiEmailField in Django Python\nDESCRIPTION: This snippet defines a custom Django form field `MultiEmailField` that inherits from `forms.Field`. It implements `to_python` to split a comma-separated string into a list of emails and `validate` to ensure each item in the list is a valid email address using Django's `validate_email` validator. This allows the field to handle multiple email inputs separated by commas.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.core.validators import validate_email\n\n\nclass MultiEmailField(forms.Field):\n    def to_python(self, value):\n        \"\"\"Normalize data to a list of strings.\"\"\"\n        # Return an empty list if no input was given.\n        if not value:\n            return []\n        return value.split(\",\")\n\n    def validate(self, value):\n        \"\"\"Check if value consists only of valid emails.\"\"\"\n        # Use the parent's handling of required fields, etc.\n        super().validate(value)\n        for email in value:\n            validate_email(email)\n```\n\n----------------------------------------\n\nTITLE: Parsing Durations with Django's parse_duration\nDESCRIPTION: Parses a string and returns a datetime.timedelta object. Accepts formats like \"DD HH:MM:SS.uuuuuu\", ISO 8601 duration format (e.g., P4DT1H15M20S), or PostgreSQL day-time interval format.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nparse_duration(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django PyLibMC Cache Backend\nDESCRIPTION: Configuration for PyLibMC memcached backend with binary protocol, SASL authentication, and ketama behavior mode enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.memcached.PyLibMCCache\",\n        \"LOCATION\": \"127.0.0.1:11211\",\n        \"OPTIONS\": {\n            \"binary\": True,\n            \"username\": \"user\",\n            \"password\": \"pass\",\n            \"behaviors\": {\n                \"ketama\": True,\n            },\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Django Tag with Template Variables (HTML+Django)\nDESCRIPTION: This Django template snippet demonstrates how to use a custom template tag named `format_time`. It passes a template variable `blog_entry.date_updated` and a static string literal `\"%Y-%m-%d %I:%M %p\"` (the desired format) as arguments to the tag.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_30\n\nLANGUAGE: html+django\nCODE:\n```\n<p>This post was last updated at {% format_time blog_entry.date_updated \"%Y-%m-%d %I:%M %p\" %}.</p>\n```\n\n----------------------------------------\n\nTITLE: Defining FileExtensionValidator in Django\nDESCRIPTION: Validator class that checks if a file's extension is in an allowed list. Raises ValidationError if the file extension is not allowed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nFileExtensionValidator(allowed_extensions, message, code)\n```\n\n----------------------------------------\n\nTITLE: Basic Django Model Filtering\nDESCRIPTION: Examples of basic model filtering using related fields and handling null values in queries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nBlog.objects.filter(entry__authors__name=\"Lennon\")\n\nBlog.objects.filter(entry__authors__name__isnull=True)\n\nBlog.objects.filter(entry__authors__isnull=False, entry__authors__name__isnull=True)\n```\n\n----------------------------------------\n\nTITLE: Increasing SQLite Timeout via Django Database OPTIONS - Python\nDESCRIPTION: Shows how to increase the SQLite connection timeout in Django by adding a \"timeout\" key to the OPTIONS dictionary. Ensures Python's SQLite wrapper waits longer before raising \"database is locked\" errors. Prerequisite: Django project using SQLite. Input: timeout value in seconds. Output: Database connection will use specified timeout when waiting for locks. Applies only to the SQLite backend.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n\"OPTIONS\": {\n    # ...\n    \"timeout\": 20,\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Indexes in Django Models\nDESCRIPTION: Demonstrates how to create functional indexes on expressions and database functions using the new expressions argument of Index().\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\nfrom django.db.models import F, Index, Value\nfrom django.db.models.functions import Lower, Upper\n\n\nclass MyModel(models.Model):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    height = models.IntegerField()\n    weight = models.IntegerField()\n\n    class Meta:\n        indexes = [\n            Index(\n                Lower(\"first_name\"),\n                Upper(\"last_name\").desc(),\n                name=\"first_last_name_idx\",\n            ),\n            Index(\n                F(\"height\") / (F(\"weight\") + Value(5)),\n                name=\"calc_idx\",\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Using escapejs Filter in Django Templates\nDESCRIPTION: Example of using the escapejs filter to safely embed JavaScript values from Django template variables.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_69\n\nLANGUAGE: html+django\nCODE:\n```\n<script>\nlet myValue = '{{ value|escapejs }}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Paginated Results via Query String in Django\nDESCRIPTION: Shows the URL format for accessing a specific page of results using the 'page' query string parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-multiple-object.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/objects/?page=3\n```\n\n----------------------------------------\n\nTITLE: Using regroup Tag in Django Templates\nDESCRIPTION: This snippet demonstrates the regroup tag which groups a list of objects by a common attribute. In this example, cities are grouped by country and displayed in a hierarchical list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_35\n\nLANGUAGE: html+django\nCODE:\n```\n{% regroup cities by country as country_list %}\n\n<ul>\n{% for country in country_list %}\n    <li>{{ country.grouper }}\n    <ul>\n        {% for city in country.list %}\n          <li>{{ city.name }}: {{ city.population }}</li>\n        {% endfor %}\n    </ul>\n    </li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing DecimalField in Django Model\nDESCRIPTION: Examples of initializing DecimalField with different precision settings. The first example stores numbers up to 999.99 with 2 decimal places, while the second stores numbers up to approximately one billion with 10 decimal places.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmodels.DecimalField(..., max_digits=5, decimal_places=2)\n```\n\nLANGUAGE: python\nCODE:\n```\nmodels.DecimalField(..., max_digits=19, decimal_places=10)\n```\n\n----------------------------------------\n\nTITLE: Creating Area Objects from Distance Multiplication\nDESCRIPTION: Shows how multiplying two Distance objects creates an Area object with squared units.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> a = d1 * d2  # Returns an Area object.\n>>> print(a)\n40.2336 sq_km\n```\n\n----------------------------------------\n\nTITLE: Demonstrating '__isnull=True' Lookup with JSONField in Django - Markdown\nDESCRIPTION: This snippet shows the usage of the '__isnull=True' lookup in the context of key transforms on the JSONField model field in Django's ORM. There are no dependencies other than Django's ORM and the target database (Oracle/SQLite). The snippet is meant for documentation, illustrating filter syntax developers may use; its purpose in the changelog is to clarify the resolved bug context.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n__isnull=True\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Fixtures in a Django TestCase (Python)\nDESCRIPTION: Demonstrates specifying multiple fixtures in the 'fixtures' attribute of a Django TestCase class to ensure they are loaded in order at test setup. Requires Django and all listed fixture files ('mammals', 'birds', 'insects') to be present. Input: ordered list of fixtures; Output: test database pre-populated with the combined data from all specified fixtures.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass AnimalTestCase(TestCase):\n    fixtures = [\"mammals\", \"birds\", \"insects\"]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pluralization Implementation in Django\nDESCRIPTION: Shows an incorrect approach to pluralization that won't work correctly for all languages. This example highlights why you shouldn't implement your own singular-or-plural logic.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.translation import ngettext\nfrom myapp.models import Report\n\ncount = Report.objects.count()\nif count == 1:\n    name = Report._meta.verbose_name\nelse:\n    name = Report._meta.verbose_name_plural\n\ntext = ngettext(\n    \"There is %(count)d %(name)s available.\",\n    \"There are %(count)d %(name)s available.\",\n    count,\n) % {\"count\": count, \"name\": name}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom iTunes RSS Feed Generator in Django\nDESCRIPTION: This snippet shows how to start implementing a custom iTunes RSS feed generator by subclassing Rss201rev2Feed and overriding the root_attributes method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass iTunesFeed(Rss201rev2Feed):\n    def root_attributes(self):\n        attrs = super().root_attributes()\n        attrs[\"xmlns:itunes\"] = \"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n        return attrs\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Covering Geometry in Django\nDESCRIPTION: Demonstrates using the covers spatial lookup to filter Zipcode objects whose polygon completely covers a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__covers=geom)\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Django Context Against Dictionary (Python)\nDESCRIPTION: This test case shows a pattern for asserting Context contents during unit tests, verifying that Context.flatten() returns a dictionary matching the expected structure, including Django's default built-ins. It uses unittest.TestCase for test method structure. Inputs are context variable assignments; output is assertion with expected dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass ContextTest(unittest.TestCase):\n    def test_against_dictionary(self):\n        c1 = Context()\n        c1[\"update\"] = \"value\"\n        self.assertEqual(\n            c1.flatten(),\n            {\n                \"True\": True,\n                \"None\": None,\n                \"False\": False,\n                \"update\": \"value\",\n            },\n        )\n```\n\n----------------------------------------\n\nTITLE: Conditional Discount Based on Registration Date - Django ORM - Python\nDESCRIPTION: Queries for clients and annotates a discount field based on registration date, calculating thresholds for a month and year. Demonstrates ordered evaluation of When objects in a Case clause, providing discounts for early registrants. Requires imports of date, timedelta, Case, When, and Value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> a_month_ago = date.today() - timedelta(days=30)\n>>> a_year_ago = date.today() - timedelta(days=365)\n>>> # Get the discount for each Client based on the registration date\n>>> Client.objects.annotate(\n...     discount=Case(\n...         When(registered_on__lte=a_year_ago, then=Value(\"10%\")),\n...         When(registered_on__lte=a_month_ago, then=Value(\"5%\")),\n...         default=Value(\"0%\"),\n...     )\n... ).values_list(\"name\", \"discount\")\n<QuerySet [(\"Jane Doe\", \"5%\"), (\"James Smith\", \"0%\"), (\"Jack Black\", \"10%\")]> \n```\n\n----------------------------------------\n\nTITLE: Defining RedirectView Class in Django\nDESCRIPTION: Redirects to a given URL. Supports permanent and temporary redirects with optional query string handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RedirectView():\n    # Attributes\n    http_method_names\n    pattern_name\n    permanent\n    query_string\n    url\n\n    # Methods\n    as_view()\n    delete()\n    dispatch()\n    get()\n    head()\n    http_method_not_allowed()\n    options()\n    post()\n    put()\n    setup()\n```\n\n----------------------------------------\n\nTITLE: Defining GeoDjango Module Documentation in reStructuredText\nDESCRIPTION: Module directive that defines the Django GIS extensions module namespace and provides a synopsis of its purpose.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. module:: django.contrib.gis\n    :synopsis: Geographic Information System (GIS) extensions for Django\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthorUpdateView using Django's UpdateView\nDESCRIPTION: Example of implementing an AuthorUpdateView class using Django's UpdateView, specifying the model, fields, and custom template name suffix.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.edit import UpdateView\nfrom myapp.models import Author\n\n\nclass AuthorUpdateView(UpdateView):\n    model = Author\n    fields = [\"name\"]\n    template_name_suffix = \"_update_form\"\n```\n\n----------------------------------------\n\nTITLE: Committing changes to a branch\nDESCRIPTION: Records changes made to files in the repository. Multiple commits can be made as work progresses on the ticket.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Performing Coordinate Transformation in Python\nDESCRIPTION: Shows how to use the CoordTransform class to transform geometries from one coordinate system to another. In this example, it transforms geometries from WGS84 to NAD83 coordinate system.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_31\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ct = CoordTransform(SpatialReference(\"WGS84\"), SpatialReference(\"NAD83\"))\n>>> for feat in layer:\n...     geom = feat.geom  # getting clone of feature geometry\n...     geom.transform(ct)  # transforming\n```\n\n----------------------------------------\n\nTITLE: Getting Email Connection with Arguments in Django 1.2+ (Python)\nDESCRIPTION: This snippet shows how to pass additional configuration arguments (like hostname and port) directly to `get_connection()` when obtaining an email connection. These arguments are passed to the backend's constructor.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nconnection = get_connection(\n    \"django.core.mail.backends.smtp.EmailBackend\", hostname=\"localhost\", port=1234\n)\n```\n\n----------------------------------------\n\nTITLE: Rebasing on upstream changes\nDESCRIPTION: Updates the local branch with changes from the upstream Django repository, placing local commits on top of the latest upstream commits.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Creating Related Objects in a Transaction with Django\nDESCRIPTION: This snippet demonstrates creating related objects within a transaction atomic block in Django. It shows how foreign key constraints may need to be deferred to allow creation of objects with circular dependencies.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import transaction\n\nwith transaction.atomic():\n    Book.objects.create(author_id=1)\n    Author.objects.create(id=1)\n```\n\n----------------------------------------\n\nTITLE: Disabling Django Logging Configuration\nDESCRIPTION: Example showing how to disable Django's automatic logging configuration and implement manual configuration using Python's logging module.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLOGGING_CONFIG = None\n\nimport logging.config\n\nlogging.config.dictConfig(...)\n```\n\n----------------------------------------\n\nTITLE: Applying safe and safeseq Filters in Django Templates\nDESCRIPTION: The safe filter marks a string as not requiring further HTML escaping. The safeseq filter applies the safe filter to each element of a sequence.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_84\n\nLANGUAGE: html+django\nCODE:\n```\n{{ var|safe|escape }}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{{ some_list|safeseq|join:\", \" }}\n```\n\n----------------------------------------\n\nTITLE: Configuring DEBUG Setting in Django\nDESCRIPTION: Demonstrates the importance of setting DEBUG to False in production environments to prevent access to the technical 500 debug page, which could potentially expose sensitive information.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDEBUG = True\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional (Partial) Indexes with Django ORM (Python)\nDESCRIPTION: Demonstrates defining a partial index by passing a Q object to the 'condition' parameter, limiting the index to rows matching the given filter. This is especially useful for optimizing queries targeting table subsets. The example requires an import of Q from django.db.models; note that support varies across databases, with PostgreSQL enforcing 'IMMUTABLE' for any function and other backends ignoring the argument.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncondition=Q(pages__gt=400)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Node to Discard Content in Django (Python)\nDESCRIPTION: This Python snippet defines the `CommentNode` class for a simple Django template tag intended to discard content (similar to `{% comment %}`). Its `render` method simply returns an empty string, effectively removing any content parsed between the tag's start and end blocks from the final rendered output.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass CommentNode(template.Node):\n    def render(self, context):\n        return \"\"\n```\n\n----------------------------------------\n\nTITLE: Using truncatechars Filter in Django Templates\nDESCRIPTION: The truncatechars filter truncates a string if it is longer than the specified number of characters, ending with an ellipsis.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_93\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|truncatechars:7 }}\n```\n\n----------------------------------------\n\nTITLE: Persistence of F() Assignments Across Multiple Saves\nDESCRIPTION: Illustrates that `F()` objects assigned to model fields remain attached to the model instance after `save()` and will be re-applied on subsequent `save()` calls. In this example, `stories_filed` is incremented twice. To avoid this behavior, the model object should be reloaded after saving, for instance, using `refresh_from_db()`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreporter = Reporters.objects.get(name=\"Tintin\")\nreporter.stories_filed = F(\"stories_filed\") + 1\nreporter.save()\n\nreporter.name = \"Tintin Jr.\"\nreporter.save()\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Django Objects with QuerySet update\nDESCRIPTION: Shows how to update multiple Django model instances at once using the QuerySet update() method with a filter condition.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n# Update all the headlines with pub_date in 2007.\nEntry.objects.filter(pub_date__year=2007).update(headline=\"Everything is the same\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Django Template Filter Combining Built-in Filters\nDESCRIPTION: This example shows how to create a custom Django template filter that combines the urlize and linebreaksbr built-in filters. It demonstrates proper handling of auto-escaping when reusing built-in filters.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.template.defaultfilters import linebreaksbr, urlize\n\n\n@register.filter(needs_autoescape=True)\ndef urlize_and_linebreaks(text, autoescape=True):\n    return linebreaksbr(urlize(text, autoescape=autoescape), autoescape=autoescape)\n```\n\n----------------------------------------\n\nTITLE: Using transaction context managers in Django 1.3\nDESCRIPTION: Demonstrates how to use transaction management functions as context managers in Python 2.5 and above. This allows for cleaner and more Pythonic transaction handling.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nwith transaction.autocommit():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Method in Django View\nDESCRIPTION: Example of how to check the HTTP method used in a request and perform different actions based on whether it's a GET or POST request. The request.method attribute is guaranteed to be uppercase.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif request.method == \"GET\":\n    do_something()\nelif request.method == \"POST\":\n    do_something_else()\n```\n\n----------------------------------------\n\nTITLE: Using non_atomic_requests Decorator in Django\nDESCRIPTION: Examples showing how to use the non_atomic_requests decorator to exclude specific views from the ATOMIC_REQUESTS setting. Demonstrates basic usage and specifying a particular database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import transaction\n\n\n@transaction.non_atomic_requests\ndef my_view(request):\n    do_stuff()\n\n\n@transaction.non_atomic_requests(using=\"other\")\ndef my_other_view(request):\n    do_stuff_on_the_other_database()\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Action as ModelAdmin Method in Django\nDESCRIPTION: This code demonstrates how to implement the 'make_published' action as a method of the ArticleAdmin class. It also shows how to use the message_user method to display a success message after the action is performed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import messages\nfrom django.utils.translation import ngettext\n\nclass ArticleAdmin(admin.ModelAdmin):\n    ...\n\n    actions = [\"make_published\"]\n\n    @admin.action(description=\"Mark selected stories as published\")\n    def make_published(self, request, queryset):\n        updated = queryset.update(status=\"p\")\n        self.message_user(\n            request,\n            ngettext(\n                \"%d story was successfully marked as published.\",\n                \"%d stories were successfully marked as published.\",\n                updated,\n            )\n            % updated,\n            messages.SUCCESS,\n        )\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Emails with Connection Reuse\nDESCRIPTION: Demonstrates how to send multiple emails efficiently by reusing an email connection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\n\nconnection = mail.get_connection()  # Use default email connection\nmessages = get_notification_email()\nconnection.send_messages(messages)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Backend with Replication in Django (Python)\nDESCRIPTION: This Python snippet configures the Django `CACHES` setting to use multiple Redis servers in a replication setup. The first server in the `LOCATION` list acts as the leader (for writes), and the others act as read replicas. Read operations are distributed randomly among replicas. Requires the `redis-py` library.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": [\n            \"redis://127.0.0.1:6379\",  # leader\n            \"redis://127.0.0.1:6378\",  # read-replica 1\n            \"redis://127.0.0.1:6377\",  # read-replica 2\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-database Testing with TransactionTestCase in Django\nDESCRIPTION: Example showing how to configure TransactionTestCase to flush multiple test databases after test execution. Uses the databases attribute to specify which databases should be flushed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass TestMyViews(TransactionTestCase):\n    databases = {\"default\", \"other\"}\n\n    def test_index_page_view(self):\n        call_some_test_code()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Sitemap Index with Custom URL Name in Django URLs\nDESCRIPTION: This Python code illustrates how to configure sitemap index and individual sitemap views in `urls.py` when applying caching and using a custom URL name for the sitemap view. It uses the `cache_page` decorator to cache both the index and sitemap views for 86400 seconds (24 hours). Crucially, it passes `sitemap_url_name='sitemaps'` to the `views.index` configuration, which matches the `name='sitemaps'` assigned to the individual sitemap URL pattern. This allows the index view to correctly generate URLs for the cached sitemap sections.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sitemaps import views as sitemaps_views\nfrom django.views.decorators.cache import cache_page\n\nurlpatterns = [\n    path(\n        \"sitemap.xml\",\n        cache_page(86400)(sitemaps_views.index),\n        {\"sitemaps\": sitemaps, \"sitemap_url_name\": \"sitemaps\"},\n    ),\n    path(\n        \"sitemap-<section>.xml\",\n        cache_page(86400)(sitemaps_views.sitemap),\n        {\"sitemaps\": sitemaps},\n        name=\"sitemaps\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Reversing Admin URLs in Python\nDESCRIPTION: Shows how to use Django's URL reversing system to get a reference to the Change view for a particular Choice object in the default admin. Demonstrates the use of the reverse function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_85\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.urls import reverse\n>>> c = Choice.objects.get(...)\n>>> change_url = reverse(\"admin:polls_choice_change\", args=(c.id,))\n```\n\n----------------------------------------\n\nTITLE: Citing Django in APA Style\nDESCRIPTION: This snippet demonstrates how to cite Django in APA style for academic or publication purposes. It includes the software name, version, release year, and official website.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/general.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDjango (Version 1.5) [Computer Software]. (2013). Retrieved from https://www.djangoproject.com/.\n```\n\n----------------------------------------\n\nTITLE: Using Django StringAgg and ArrayAgg Aggregates\nDESCRIPTION: Demonstrates the usage of `StringAgg` to concatenate values from `field1` with a semicolon delimiter, and `ArrayAgg` to collect values from `field2` (numeric) and `field1` (string) into arrays using the Django ORM's `aggregate` method on a `TestModel` queryset.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> TestModel.objects.aggregate(result=StringAgg(\"field1\", delimiter=\";\"))\n{'result': 'foo;bar;test'}\n>>> TestModel.objects.aggregate(result=ArrayAgg(\"field2\"))\n{'result': [1, 2, 3]}\n>>> TestModel.objects.aggregate(result=ArrayAgg(\"field1\"))\n{'result': ['foo', 'bar', 'test']}\n```\n\n----------------------------------------\n\nTITLE: Filtered ListView for Publisher-Specific Books\nDESCRIPTION: Implementation of ListView with a filtered queryset for showing books from a specific publisher\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import ListView\nfrom books.models import Book\n\n\nclass AcmeBookListView(ListView):\n    context_object_name = \"book_list\"\n    queryset = Book.objects.filter(publisher__name=\"ACME Publishing\")\n    template_name = \"books/acme_list.html\"\n```\n\n----------------------------------------\n\nTITLE: Using Extent3D Aggregation in GeoDjango\nDESCRIPTION: Example of using the Extent3D aggregate function to get the 3D bounding box (as a 6-tuple) of city polygons filtered by name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = City.objects.filter(name__in=(\"Houston\", \"Dallas\")).aggregate(Extent3D(\"poly\"))\n>>> print(qs[\"poly__extent3d\"])\n(-96.8016128540039, 29.7633724212646, 0, -95.3631439208984, 32.782058715820, 0)\n```\n\n----------------------------------------\n\nTITLE: Non-Atomic Migration Class\nDESCRIPTION: Example of creating a Django migration class that runs outside of a transaction by setting atomic=False.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    atomic = False\n```\n\n----------------------------------------\n\nTITLE: Implementing ArticleDetailView using Django's DetailView\nDESCRIPTION: Demonstrates how to create a custom DetailView for displaying article details. It includes context customization to add the current time.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\nfrom django.views.generic.detail import DetailView\n\nfrom articles.models import Article\n\n\nclass ArticleDetailView(DetailView):\n    model = Article\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"now\"] = timezone.now()\n        return context\n```\n\n----------------------------------------\n\nTITLE: Directly Using String Interpolation in ValidationError - Python\nDESCRIPTION: Shows a shortcut, less recommended pattern, for raising ValidationError using direct string interpolation. Used at the end of the validation chain (such as in Form.clean()), where error message customization is not required. Requires Django's translation utility (_) and outputs a localized string, but is less reusable and may not work optimally with error serialization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nValidationError(_(\"Invalid value: %s\") % value)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Initial Form Field Values in Django - Python\nDESCRIPTION: This snippet illustrates how Django Form's get_initial_for_field method fetches the initial value for a field, especially when the field's initial value is a callable (such as uuid.uuid4). It shows that BoundField.initial provides caching, causing repeated accesses to return the same value, whereas get_initial_for_field re-evaluates the callable each time. Requires Django's forms module and Python's uuid library. Input is a form field and its field_name; output is the initial value, which may vary for callables.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import uuid\\n>>> class UUIDCommentForm(CommentForm):\\n...     identifier = forms.UUIDField(initial=uuid.uuid4)\\n...\\n>>> f = UUIDCommentForm()\\n>>> f.get_initial_for_field(f.fields[\\\"identifier\\\"], \\\"identifier\\\")\\nUUID('972ca9e4-7bfe-4f5b-af7d-07b3aa306334')\\n>>> f.get_initial_for_field(f.fields[\\\"identifier\\\"], \\\"identifier\\\")\\nUUID('1b411fab-844e-4dec-bd4f-e9b0495f04d0')\\n>>> # Using BoundField.initial, for comparison\\n>>> f[\\\"identifier\\\"].initial\\nUUID('28a09c59-5f00-4ed9-9179-a3b074fa9c30')\\n>>> f[\\\"identifier\\\"].initial\\nUUID('28a09c59-5f00-4ed9-9179-a3b074fa9c30')\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Django View\nDESCRIPTION: A view function that processes file uploads using a form. It validates the form data and passes the uploaded file to a handler function when valid. The function demonstrates proper binding of file data to a form.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\nfrom .forms import UploadFileForm\n\n# Imaginary function to handle an uploaded file.\nfrom somewhere import handle_uploaded_file\n\n\ndef upload_file(request):\n    if request.method == \"POST\":\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_uploaded_file(request.FILES[\"file\"])\n            return HttpResponseRedirect(\"/success/url/\")\n    else:\n        form = UploadFileForm()\n    return render(request, \"upload.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Overriding change_view in ModelAdmin to Add Extra Context Python\nDESCRIPTION: This snippet illustrates overriding the `change_view` method within a Django `ModelAdmin` subclass. The primary goal is to add extra context data (`osm_data` obtained from `get_osm_info`) to the template context used for rendering the model instance editing page. It ensures existing `extra_context` is preserved and calls the parent class's `change_view` method with the augmented context. It also specifies a custom template `change_form_template`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    # A template for a very customized change view:\n    change_form_template = \"admin/myapp/extras/openstreetmap_change_form.html\"\n\n    def get_osm_info(self):\n        # ...\n        pass\n\n    def change_view(self, request, object_id, form_url=\"\", extra_context=None):\n        extra_context = extra_context or {}\n        extra_context[\"osm_data\"] = self.get_osm_info()\n        return super().change_view(\n            request,\n            object_id,\n            form_url,\n            extra_context=extra_context,\n        )\n```\n\n----------------------------------------\n\nTITLE: Optimizing QuerySet Evaluation with Caching\nDESCRIPTION: Demonstrates the optimal approach for evaluating a QuerySet once and reusing its results, minimizing database queries through result cache reuse.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmembers = group.members.all()\n\nif display_group_members:\n    if members:\n        if current_user in members:\n            print(\"You and\", len(members) - 1, \"other users are members of this group.\")\n        else:\n            print(\"There are\", len(members), \"members in this group.\")\n\n        for member in members:\n            print(member.username)\n    else:\n        print(\"There are no members in this group.\")\n```\n\n----------------------------------------\n\nTITLE: Creating String Template in Django\nDESCRIPTION: Shows how to manually create a Django template using a string\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template import Template\n\nt2 = Template(\"This is a string template.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing db_type Method for Custom Django Field\nDESCRIPTION: This snippet shows how to implement the db_type method for a custom Django field. It returns a SQL column type based on the field's max_length attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef db_type(self, connection):\n    return \"char(%s)\" % self.max_length\n```\n\n----------------------------------------\n\nTITLE: Apache configuration for serving Django and static files\nDESCRIPTION: Complete Apache configuration for serving both Django application via mod_wsgi and static files (robots.txt, favicon.ico, static and media directories) from the same Apache VirtualHost.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_5\n\nLANGUAGE: apache\nCODE:\n```\nAlias /robots.txt /path/to/mysite.com/static/robots.txt\nAlias /favicon.ico /path/to/mysite.com/static/favicon.ico\n\nAlias /media/ /path/to/mysite.com/media/\nAlias /static/ /path/to/mysite.com/static/\n\n<Directory /path/to/mysite.com/static>\nRequire all granted\n</Directory>\n\n<Directory /path/to/mysite.com/media>\nRequire all granted\n</Directory>\n\nWSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py\n\n<Directory /path/to/mysite.com/mysite>\n<Files wsgi.py>\nRequire all granted\n</Files>\n</Directory>\n```\n\n----------------------------------------\n\nTITLE: Model Field Choices with Enums and Nested Groups in Django - Python (Legacy Style)\nDESCRIPTION: Shows the classical method of specifying choices for Django model fields in Python, using either enums or lists of 2-tuples (possibly grouped). Demonstrates use of `TextChoices` for enumerations and nested groupings for selection fields (e.g., sport categories). Used in class `Winner`. Inputs: Enums or lists of value-label tuples; outputs: drop-down or radio widgets for forms, and field validation in models.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\\n\\nMedal = models.TextChoices(\\\"Medal\\\", \\\"GOLD SILVER BRONZE\\\")\\n\\nSPORT_CHOICES = [\\n    (\\\"Martial Arts\\\", [(\\\"judo\\\", \\\"Judo\\\"), (\\\"karate\\\", \\\"Karate\\\")]),\\n    (\\\"Racket\\\", [(\\\"badminton\\\", \\\"Badminton\\\"), (\\\"tennis\\\", \\\"Tennis\\\")]),\\n    (\\\"unknown\\\", \\\"Unknown\\\"),\\n]\\n\\n\\nclass Winner(models.Model):\\n    name = models.CharField(...)\\n    medal = models.CharField(..., choices=Medal.choices)\\n    sport = models.CharField(..., choices=SPORT_CHOICES)\n```\n\n----------------------------------------\n\nTITLE: Basic Template Variable Lookup Example in Django\nDESCRIPTION: Demonstrates dictionary, attribute and list-index lookups in Django templates using different data structures.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.template import Context, Template\n>>> t = Template(\"My name is {{ person.first_name }}.\")\n>>> d = {\"person\": {\"first_name\": \"Joe\", \"last_name\": \"Johnson\"}}\n>>> t.render(Context(d))\n\"My name is Joe.\"\n\n>>> class PersonClass:\n...     pass\n...\n>>> p = PersonClass()\n>>> p.first_name = \"Ron\"\n>>> p.last_name = \"Nasty\"\n>>> t.render(Context({\"person\": p}))\n\"My name is Ron.\"\n\n>>> t = Template(\"The first stooge in the list is {{ stooges.0 }}.\")\n>>> c = Context({\"stooges\": [\"Larry\", \"Curly\", \"Moe\"]})\n>>> t.render(c)\n\"The first stooge in the list is Larry.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Model in Django\nDESCRIPTION: Demonstrates how to create a custom User model by subclassing AbstractUser. This approach allows for a custom user model that behaves identically to the default but can be extended with additional fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import AbstractUser\n\n\nclass User(AbstractUser):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring URL for ArticleListView in Django\nDESCRIPTION: Demonstrates how to set up a URL pattern for the ArticleListView.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom article.views import ArticleListView\n\nurlpatterns = [\n    path(\"\", ArticleListView.as_view(), name=\"article-list\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Dates and Times - now Tag in HTML+Django Template - html+django\nDESCRIPTION: Demonstrates the 'now' tag for outputting the current date/time in custom or predefined Django formats, with examples of escaping and variable assignment. Accepts a format string plus optional 'as variable'. Dependency on Django's time formatting and localization. Inputs are format specifier strings; outputs localized time strings to the template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_25\n\nLANGUAGE: html+django\nCODE:\n```\nIt is {% now \"jS F Y H:i\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\nIt is the {% now \"jS \\o\\f F\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\nIt is {% now \"SHORT_DATETIME_FORMAT\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% now \"Y\" as current_year %}\n{% blocktranslate %}Copyright {{ current_year }}{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Using Django Command-Line Utilities\nDESCRIPTION: Shows the basic usage syntax for django-admin, manage.py, and python -m django commands. These utilities are used for various administrative tasks in Django projects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ django-admin <command> [options]\n$ manage.py <command> [options]\n$ python -m django <command> [options]\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Expression Source Methods in Django\nDESCRIPTION: Basic implementation of getter and setter methods for source expressions in a Django query expression class.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef get_source_expressions(self):\n    return self.expressions\n\n\ndef set_source_expressions(self, expressions):\n    self.expressions = expressions\n```\n\n----------------------------------------\n\nTITLE: Using Sqrt Function in Django Models\nDESCRIPTION: Demonstrates calculating square roots and registering Sqrt as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Sqrt\n>>> Vector.objects.create(x=4.0, y=12.0)\n>>> vector = Vector.objects.annotate(x_sqrt=Sqrt(\"x\"), y_sqrt=Sqrt(\"y\")).get()\n>>> vector.x_sqrt, vector.y_sqrt\n(2.0, 3.46410)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Sqrt\n>>> FloatField.register_lookup(Sqrt)\n>>> # Get vectors whose sqrt() is less than 5\n>>> vectors = Vector.objects.filter(x__sqrt__lt=5, y__sqrt__lt=5)\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelChoiceField with Custom Empty Labels in Django\nDESCRIPTION: Examples of how to customize the empty label in a ModelChoiceField or disable it completely by setting empty_label to None.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# A custom empty label\nfield1 = forms.ModelChoiceField(queryset=..., empty_label=\"(Nothing)\")\n\n# No empty label\nfield2 = forms.ModelChoiceField(queryset=..., empty_label=None)\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML in Variables with Escape Filter in Django Templates - HTML+Django\nDESCRIPTION: Illustrates the use of the 'escape' filter to HTML-escape a variable's output in a Django template. Used inside an autoescape off block for demonstration. Input is any string variable (e.g., title); output is the HTML-escaped string. Ensures variables are safely displayed without rendering as HTML.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_68\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n    {{ title|escape }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Session Data Outside of Views in Django\nDESCRIPTION: This snippet demonstrates how to create, save, and retrieve session data using the SessionStore API outside of Django views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.sessions.backends.db import SessionStore\n>>> s = SessionStore()\n>>> # stored as seconds since epoch since datetimes are not serializable in JSON.\n>>> s[\"last_login\"] = 1376587691\n>>> s.create()\n>>> s.session_key\n'2b1189a188b44ad18c35e113ac6ceead'\n>>> s = SessionStore(session_key=\"2b1189a188b44ad18c35e113ac6ceead\")\n>>> s[\"last_login\"]\n1376587691\n```\n\n----------------------------------------\n\nTITLE: Making Middleware Compatible with Both Sync and Async\nDESCRIPTION: A decorator that marks middleware as compatible with both synchronous and asynchronous code. Requires implementing request type detection to be used effectively.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsync_and_async_middleware(middleware)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Django Polls App\nDESCRIPTION: This snippet defines the URL patterns for a Django polls application. It maps URLs to corresponding views, including class-based views for index, detail, and results pages, and a function-based view for voting.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.IndexView.as_view(), name=\"index\"),\n    path(\"<int:pk>/\", views.DetailView.as_view(), name=\"detail\"),\n    path(\"<int:pk>/results/\", views.ResultsView.as_view(), name=\"results\"),\n    path(\"<int:question_id>/vote/\", views.vote, name=\"vote\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Changing User Passwords Programmatically in Django (Python)\nDESCRIPTION: Illustrates how to change a user's password programmatically in a Python interactive session (pycon). It involves retrieving the User object using `User.objects.get()`, calling the `set_password()` method with the new password (which handles hashing), and saving the updated user object.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.auth.models import User\n>>> u = User.objects.get(username=\"john\")\n>>> u.set_password(\"new password\")\n>>> u.save()\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Month - Django ORM (Python)\nDESCRIPTION: Shows how to filter date/datetime fields by month, or greater-or-equal, using '__month' in Django queries. Inputs are integers 1-12; outputs are QuerySets with records matching the month value. Valid for DateField or DateTimeField; works with time zones if enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__month=12)\nEntry.objects.filter(pub_date__month__gte=6)\n```\n\n----------------------------------------\n\nTITLE: Popping Session Values (Sync)\nDESCRIPTION: Example of retrieving and removing a value from the session using the pop method with a default fallback.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfav_color = request.session.pop('fav_color', 'blue')\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests for Django System Checks Raising Errors in Python\nDESCRIPTION: Shows how to perform integration testing for system checks using `django.test.SimpleTestCase` and `django.core.management.call_command`. This example tests a built-in check for `SITE_ID` by using `override_settings` to set an invalid value and asserting that `call_command('check')` raises a `SystemCheckError` with the expected error message.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management import call_command\nfrom django.core.management.base import SystemCheckError\nfrom django.test import SimpleTestCase, modify_settings, override_settings\n\n\nclass SystemCheckIntegrationTest(SimpleTestCase):\n    @override_settings(SITE_ID=\"non_integer\")\n    @modify_settings(INSTALLED_APPS={\"prepend\": \"django.contrib.sites\"})\n    def test_non_integer_site_id(self):\n        message = \"(sites.E101) The SITE_ID setting must be an integer.\"\n        with self.assertRaisesMessage(SystemCheckError, message):\n            call_command(\"check\")\n```\n\n----------------------------------------\n\nTITLE: Enabling LoginRequiredMiddleware in Django Settings (Python)\nDESCRIPTION: This configuration snippet shows how to add the `LoginRequiredMiddleware` to the `MIDDLEWARE` list in a Django project's settings. It is crucial to place it *after* `AuthenticationMiddleware` to ensure the user information is available.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    \"...\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.auth.middleware.LoginRequiredMiddleware\",\n    \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Django's default test client in TestCase\nDESCRIPTION: This snippet demonstrates how to use Django's default test client in a TestCase subclass, which provides the client as self.client.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.test import TestCase\n\n\nclass SimpleTest(TestCase):\n    def test_details(self):\n        response = self.client.get(\"/customer/details/\")\n        self.assertEqual(response.status_code, 200)\n\n    def test_index(self):\n        response = self.client.get(\"/customer/index/\")\n        self.assertEqual(response.status_code, 200)\n```\n\n----------------------------------------\n\nTITLE: Django Session Logout Implementation\nDESCRIPTION: Simple logout functionality that removes the member_id from the session.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef logout(request):\n    try:\n        del request.session[\"member_id\"]\n    except KeyError:\n        pass\n    return HttpResponse(\"You're logged out.\")\n```\n\n----------------------------------------\n\nTITLE: Using vary_on_cookie Decorator in Django\nDESCRIPTION: Demonstrates the vary_on_cookie decorator which is a convenience shortcut for vary_on_headers(\"Cookie\"). This makes the cache vary based on the Cookie header, common for user-specific content.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n@vary_on_cookie\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom TemplateView in Django\nDESCRIPTION: Demonstrates how to create a TemplateView subclass that adds custom context data for rendering a template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.base import TemplateView\n\nfrom articles.models import Article\n\n\nclass HomePageView(TemplateView):\n    template_name = \"home.html\"\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"latest_articles\"] = Article.objects.all()[:5]\n        return context\n```\n\n----------------------------------------\n\nTITLE: Setting Session Values (Async)\nDESCRIPTION: Example of setting a value in the session dictionary using the asynchronous aset method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nawait request.session.aset('fav_color', 'red')\n```\n\n----------------------------------------\n\nTITLE: Creating a New Django Project\nDESCRIPTION: Demonstrates using the startproject command to create a new Django project. It includes an example of specifying a custom directory for the project.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startproject myproject /Users/jezdez/Code/myproject_repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Attributes via as_view() in Django URLconf\nDESCRIPTION: This snippet shows an alternative way to configure class attributes for a class-based view. The `greeting` attribute of `GreetingView` is overridden by passing it as a keyword argument to the `as_view()` method directly within the URL configuration (`urls.py`). This configuration happens once when URLs are imported.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path(\"about/\", GreetingView.as_view(greeting=\"G'day\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Conditional Filtering with Case in Django ORM - Python\nDESCRIPTION: Uses Case within a filter clause to combine conditional cutoff dates for different account types. Finds clients matching a conditional filter based on their registration date and account_type, using When expressions for each account type. Requires Django, date handling utilities, and builds on the previously defined Client model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> a_month_ago = date.today() - timedelta(days=30)\n>>> a_year_ago = date.today() - timedelta(days=365)\n>>> Client.objects.filter(\n...     registered_on__lte=Case(\n...         When(account_type=Client.GOLD, then=a_month_ago),\n...         When(account_type=Client.PLATINUM, then=a_year_ago),\n...     ),\n... ).values_list(\"name\", \"account_type\")\n<QuerySet [(\"Jack Black\", \"P\")]> \n```\n\n----------------------------------------\n\nTITLE: Using values() with Annotation Expressions Python\nDESCRIPTION: Uses values() with a keyword argument to include an annotated expression in the result dictionaries. The expression, often using a database function like Lower(), is calculated and included with the specified keyword name as the dictionary key.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.db.models.functions import Lower\n>>> Blog.objects.values(lower_name=Lower(\"name\"))\n```\n\n----------------------------------------\n\nTITLE: Defining AUTH_PASSWORD_VALIDATORS setting\nDESCRIPTION: This setting is a list of password validator classes. The default value is an empty list, meaning no validators are used by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_76\n\n\n\n----------------------------------------\n\nTITLE: Connecting Signal Handler to Settings Change in Django\nDESCRIPTION: Example showing how to register a callback function to be notified of Django settings changes using AppConfig.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\nfrom django.core.signals import setting_changed\n\n\ndef my_callback(sender, **kwargs):\n    print(\"Setting changed!\")\n\n\nclass MyAppConfig(AppConfig):\n    ...\n\n    def ready(self):\n        setting_changed.connect(my_callback)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Question QuerySet Filter\nDESCRIPTION: Updated get_queryset method to filter out future questions using timezone-aware comparison.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_queryset(self):\n    \"\"\"\n    Return the last five published questions (not including those set to be\n    published in the future).\n    \"\"\"\n    return Question.objects.filter(pub_date__lte=timezone.now()).order_by(\"-pub_date\")[\n        :5\n    ]\n```\n\n----------------------------------------\n\nTITLE: Ordered Book Query by Author Count\nDESCRIPTION: Example of ordering books based on an annotation of author count.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nBook.objects.annotate(num_authors=Count(\"authors\")).order_by(\"num_authors\")\n```\n\n----------------------------------------\n\nTITLE: Defining Database Constraints in Django Model Meta\nDESCRIPTION: Demonstrates defining database constraints on a Django model using the `constraints` attribute within the `Meta` class. This example uses `models.CheckConstraint` with a `Q` object to ensure the 'age' field meets a specific condition.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Customer(models.Model):\n    age = models.IntegerField()\n\n    class Meta:\n        constraints = [\n            models.CheckConstraint(condition=models.Q(age__gte=18), name=\"age_gte_18\"),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Disabling Block Auto-Escaping with Django `autoescape` Tag\nDESCRIPTION: Demonstrates using the `{% autoescape off %}` template tag in Django to disable HTML auto-escaping for an entire block of template content. Any variables rendered within this block, like `{{ name }}`, will not be escaped.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_17\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n    Hello {{ name }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Translation with Named Placeholders in Django\nDESCRIPTION: Demonstrates using named-string interpolation with Django's translation system. This approach allows translators to reorder placeholder text for different languages.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef my_view(request, m, d):\n    output = _(\"Today is %(month)s %(day)s.\") % {\"month\": m, \"day\": d}\n    return HttpResponse(output)\n```\n\n----------------------------------------\n\nTITLE: Defining Topping and Pizza Models for Relationship Example in Django\nDESCRIPTION: Example models for demonstrating relationship choices between Pizza and Topping in Django, used to showcase ModelChoiceField customization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(decimal_places=2, max_digits=6)\n\n    def __str__(self):\n        return self.name\n\n\nclass Pizza(models.Model):\n    topping = models.ForeignKey(Topping, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields from a Django Form Instance - Python\nDESCRIPTION: Shows how to access the fields attribute of a Django Form instance, allowing iteration over field objects and accessing individual fields. Changing field attributes enables dynamic customization of form rendering. Prerequisite is a form instance 'f'. Outputs are the field objects themselves.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> for row in f.fields.values():\\n...     print(row)\\n...\\n<django.forms.fields.CharField object at 0x7ffaac632510>\\n<django.forms.fields.URLField object at 0x7ffaac632f90>\\n<django.forms.fields.CharField object at 0x7ffaac3aa050>\\n>>> f.fields[\\\"name\\\"]\\n<django.forms.fields.CharField object at 0x7ffaac6324d0>\n```\n\n----------------------------------------\n\nTITLE: Using annotate() after values() for Aggregation Python\nDESCRIPTION: Shows applying annotate() after values(). This approach groups the results by the fields specified in the values() call and then applies the aggregation across those groups. This often yields different results compared to applying the aggregate within the values() call itself.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.values(\"entry__authors\").annotate(entries=Count(\"entry\"))\n```\n\n----------------------------------------\n\nTITLE: Using Count with Distinct in M2M Queries (pycon)\nDESCRIPTION: Illustrates how the `count()` method on a QuerySet interacts with `distinct()` when querying across many-to-many relationships. It shows the count before and after applying `distinct()` to get the number of unique articles matching the criteria.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(publications__title__startswith=\"Science\").count()\n2\n\n>>> Article.objects.filter(publications__title__startswith=\"Science\").distinct().count()\n1\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Template View in Django\nDESCRIPTION: View class combining JSONResponseMixin with TemplateView for JSON responses.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import TemplateView\n\n\nclass JSONView(JSONResponseMixin, TemplateView):\n    def render_to_response(self, context, **response_kwargs):\n        return self.render_to_json_response(context, **response_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Foreign Key Model in Django\nDESCRIPTION: Defines a TaggedItem model that can create generic relationships to any model using ContentType and GenericForeignKey fields. Includes an index for performance optimization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass TaggedItem(models.Model):\n    tag = models.SlugField()\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveBigIntegerField()\n    content_object = GenericForeignKey(\"content_type\", \"object_id\")\n\n    def __str__(self):\n        return self.tag\n\n    class Meta:\n        indexes = [\n            models.Index(fields=[\"content_type\", \"object_id\"]),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Sending Site-Specific Email Using Django Templates\nDESCRIPTION: This code snippet shows how to send a site-specific email using Django's template system for more flexibility in email content.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\nfrom django.template import loader\n\n\ndef register_for_newsletter(request):\n    # Check form values, etc., and subscribe the user.\n    # ...\n\n    subject = loader.get_template(\"alerts/subject.txt\").render({})\n    message = loader.get_template(\"alerts/message.txt\").render({})\n    send_mail(subject, message, \"editor@ljworld.com\", [user.email])\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for ArticleDetailView in Django\nDESCRIPTION: Provides an example of an HTML template for displaying article details, including usage of context variables.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ object.headline }}</h1>\n<p>{{ object.content }}</p>\n<p>Reporter: {{ object.reporter }}</p>\n<p>Published: {{ object.pub_date|date }}</p>\n<p>Date: {{ now|date }}</p>\n```\n\n----------------------------------------\n\nTITLE: PO File Handling Enhancement in Django 3.0.5\nDESCRIPTION: Added support for processing .po files that contain different plural equations for the same language, improving internationalization capabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.po\n```\n\n----------------------------------------\n\nTITLE: Manually Selecting Databases for Django QuerySets\nDESCRIPTION: Examples of how to manually select a specific database for Django QuerySets using the using() method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# This will run on the 'default' database.\nAuthor.objects.all()\n\n# So will this.\nAuthor.objects.using(\"default\")\n\n# This will run on the 'other' database.\nAuthor.objects.using(\"other\")\n```\n\n----------------------------------------\n\nTITLE: Filtering DetailView Queryset in Django Python\nDESCRIPTION: This snippet shows how to override the `get_queryset` method in a Django generic `DetailView`. The purpose is to exclude any 'Question' objects whose publication date (`pub_date`) is in the future, ensuring only published questions are accessible via this view. It filters the `Question` model objects where `pub_date` is less than or equal to the current time using `timezone.now()`.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. code-block:: python\n    :caption: ``polls/views.py``\n\n    class DetailView(generic.DetailView):\n        ...\n\n        def get_queryset(self):\n            \"\"\"\n            Excludes any questions that aren't published yet.\n            \"\"\"\n            return Question.objects.filter(pub_date__lte=timezone.now())\n```\n\n----------------------------------------\n\nTITLE: System Check Configuration for Database Tables in Django Models\nDESCRIPTION: Modification allowing multiple models to use the same db_table name when database routers are configured. This relaxes a system check that was added in Django 2.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb_table = \"shared_table\"  # Now allowed for multiple models when using database routers\n```\n\n----------------------------------------\n\nTITLE: Piping Django Command Output to Black Formatter\nDESCRIPTION: Shows how to pipe the output of a Django management command to the 'black' code formatter using standard shell piping.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin inspectdb | black -\n```\n\n----------------------------------------\n\nTITLE: Providing Default Value Only When Variable is None in Django Templates - HTML+Django\nDESCRIPTION: Shows use of the 'default_if_none' filter, which returns a default only if the variable is None. Requires Django template environment. Key constraint: default is not used for empty strings, only actual Python None values. Input is any variable, output is the variable or the default string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_56\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|default_if_none:\"nothing\" }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Question Detail View with 404 Handling\nDESCRIPTION: Creates a view function that displays details for a specific question, implementing error handling for non-existent questions using Http404 exception.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import Http404\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\n# ...\ndef detail(request, question_id):\n    try:\n        question = Question.objects.get(pk=question_id)\n    except Question.DoesNotExist:\n        raise Http404(\"Question does not exist\")\n    return render(request, \"polls/detail.html\", {\"question\": question})\n```\n\n----------------------------------------\n\nTITLE: Django Settings Changes\nDESCRIPTION: Examples of deprecated Django settings that will be removed and their replacements.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Old settings to be removed\nAUTH_PROFILE_MODULE = 'accounts.UserProfile'\nIGNORABLE_404_STARTS = '/media/'\nIGNORABLE_404_ENDS = '.php'\nCACHE_BACKEND = 'memcached://127.0.0.1:11211/'\n\n# New settings format\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n        'LOCATION': '127.0.0.1:11211',\n    }\n}\nIGNORABLE_404_URLS = ['/media/', '.php']\n```\n\n----------------------------------------\n\nTITLE: Defining Django ArchiveIndexView Class\nDESCRIPTION: Defines the ArchiveIndexView class in Django, used for displaying archives of objects. It includes a comprehensive list of attributes and methods for this view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nclass ArchiveIndexView():\n    # Attributes and methods listed in the documentation\n```\n\n----------------------------------------\n\nTITLE: Inherited Model Definition\nDESCRIPTION: Example of model inheritance using Django's multi-table inheritance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n\n\nclass Restaurant(Place):\n    serves_hot_dogs = models.BooleanField(default=False)\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Frame-Options Header in Django\nDESCRIPTION: Sets the default value for X_FRAME_OPTIONS to 'DENY' to enhance security by preventing clickjacking attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nX_FRAME_OPTIONS = 'DENY'\n```\n\n----------------------------------------\n\nTITLE: Instantiating GEOS MultiLineString Collections in Python\nDESCRIPTION: Shows two equivalent methods for creating a `MultiLineString` geometry collection. The first approach passes individual `LineString` objects (`ls1`, `ls2`) as separate arguments to the constructor. The second approach passes a single sequence (a list in this case) containing the `LineString` objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ls1 = LineString((0, 0), (1, 1))\n>>> ls2 = LineString((2, 2), (3, 3))\n>>> mls = MultiLineString(ls1, ls2)\n>>> mls = MultiLineString([ls1, ls2])\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Email Template for Password Reset in Django\nDESCRIPTION: This snippet shows a sample Django template for generating the email body for password reset. It includes placeholders for the user's email, domain, and a URL for password reset confirmation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_35\n\nLANGUAGE: html\nCODE:\n```\nSomeone asked for password reset for email {{ email }}. Follow the link below:\n{{ protocol}}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}\n```\n\n----------------------------------------\n\nTITLE: Importing Django Core Exceptions\nDESCRIPTION: Shows how to import Django's core exception classes from the django.core.exceptions module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import AppRegistryNotReady, ObjectDoesNotExist, ObjectNotUpdated, EmptyResultSet, FullResultSet, FieldDoesNotExist, MultipleObjectsReturned, SuspiciousOperation, PermissionDenied, ViewDoesNotExist, MiddlewareNotUsed, ImproperlyConfigured, FieldError, ValidationError\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload Field Implementation in Django\nDESCRIPTION: Custom form field and widget implementation for handling multiple file uploads in a single field. The code creates a MultipleFileInput widget that allows multiple file selection and a MultipleFileField that properly validates multiple files.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass MultipleFileInput(forms.ClearableFileInput):\n    allow_multiple_selected = True\n\n\nclass MultipleFileField(forms.FileField):\n    def __init__(self, *args, **kwargs):\n        kwargs.setdefault(\"widget\", MultipleFileInput())\n        super().__init__(*args, **kwargs)\n\n    def clean(self, data, initial=None):\n        single_file_clean = super().clean\n        if isinstance(data, (list, tuple)):\n            result = [single_file_clean(d, initial) for d in data]\n        else:\n            result = [single_file_clean(data, initial)]\n        return result\n\n\nclass FileFieldForm(forms.Form):\n    file_field = MultipleFileField()\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Feed URLs for Atom and RSS - Python\nDESCRIPTION: This snippet demonstrates configuring Django URL patterns to serve RSS and Atom feeds by mapping URLs to their respective Feed class instances. Dependencies include Django's URL utilities and the feed classes previously defined (AtomSiteNewsFeed and RssSiteNewsFeed). Each path associates a URL endpoint with a feed instance, enabling users to access news feeds in both Atom and RSS formats. The input is HTTP requests to the corresponding endpoints; the output is XML responses for each feed type.\n\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\nfrom myproject.feeds import AtomSiteNewsFeed, RssSiteNewsFeed\n\nurlpatterns = [\n    # ...\n    path(\"sitenews/rss/\", RssSiteNewsFeed()),\n    path(\"sitenews/atom/\", AtomSiteNewsFeed()),\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Login Behavior to a Django Class-Based View (Python)\nDESCRIPTION: This snippet illustrates how to apply the `@login_required` decorator with custom parameters (`login_url`, `redirect_field_name`) to a class-based view (`BookMetrics`). It uses `@method_decorator` to apply the login requirement check specifically to the view's `dispatch` method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@method_decorator(\n    login_required(login_url=\"/books/login/\", redirect_field_name=\"redirect_to\"),\n    name=\"dispatch\",\n)\nclass BookMetrics(View):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Inheriting Meta Options from Multiple Abstract Base Classes in Django Models\nDESCRIPTION: This example demonstrates how to properly inherit Meta options from multiple abstract base classes in Django. It shows the creation of abstract models with different Meta options and a child class that explicitly inherits those options through Meta class inheritance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n        ordering = [\"name\"]\n\n\nclass Unmanaged(models.Model):\n    class Meta:\n        abstract = True\n        managed = False\n\n\nclass Student(CommonInfo, Unmanaged):\n    home_group = models.CharField(max_length=5)\n\n    class Meta(CommonInfo.Meta, Unmanaged.Meta):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Security Fix Reference for django.utils.http.limited_parse_qsl()\nDESCRIPTION: Documentation of security fix preventing the use of semicolon as query parameter separator in parse_qsl() to prevent web cache poisoning attacks. The fix was backported from Python's urllib.parse.parse_qsl implementation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.19.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.http.limited_parse_qsl()\n```\n\n----------------------------------------\n\nTITLE: Efficiently Removing Multiple Objects from ManyToManyField\nDESCRIPTION: Demonstrates how to remove multiple objects from a ManyToManyField in a single operation to reduce SQL queries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmy_band.members.remove(me, my_friend)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_band.members.remove(me)\nmy_band.members.remove(my_friend)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Django Template Tag for Current Time\nDESCRIPTION: This example demonstrates how to create a simple Django template tag that returns the current time formatted according to a given format string. It uses the simple_tag decorator for easy implementation.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport datetime\nfrom django import template\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef current_time(format_string):\n    return datetime.datetime.now().strftime(format_string)\n```\n\n----------------------------------------\n\nTITLE: Displaying Messages in Django Templates\nDESCRIPTION: Django template code for displaying messages with their associated tags as CSS classes\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% if messages %}\n<ul class=\"messages\">\n    {% for message in messages %}\n    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n    {% endfor %}\n</ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Instantiating GEOS Polygon Objects with Rings in Python\nDESCRIPTION: Shows two equivalent ways to instantiate a `Polygon` object having an exterior ring and one interior ring (a hole). The first method uses sequences of coordinate tuples directly for both the exterior and interior rings. The second method uses pre-constructed `LinearRing` objects for the exterior and interior boundaries. Both approaches result in the same `Polygon` geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ext_coords = ((0, 0), (0, 1), (1, 1), (1, 0), (0, 0))\n>>> int_coords = ((0.4, 0.4), (0.4, 0.6), (0.6, 0.6), (0.6, 0.4), (0.4, 0.4))\n>>> poly = Polygon(ext_coords, int_coords)\n>>> poly = Polygon(LinearRing(ext_coords), LinearRing(int_coords))\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Django\nDESCRIPTION: Example configuration for the `DATABASES` setting to connect to a PostgreSQL database. It requires specifying the database `ENGINE`, `NAME`, `USER`, `PASSWORD`, `HOST`, and `PORT` for connection details. This is a common configuration for production environments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"mydatabase\",\n        \"USER\": \"mydatabaseuser\",\n        \"PASSWORD\": \"mypassword\",\n        \"HOST\": \"127.0.0.1\",\n        \"PORT\": \"5432\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Music-related Models with ForeignKey Relationship\nDESCRIPTION: Example of more complex model definitions with a relationship between Musician and Album models. Shows the use of different field types including ForeignKey for establishing relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Musician(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    instrument = models.CharField(max_length=100)\n\n\nclass Album(models.Model):\n    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    release_date = models.DateField()\n    num_stars = models.IntegerField()\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'fully_lt' Lookup in Django Python\nDESCRIPTION: Employs the `fully_lt` lookup (`__fully_lt`, SQL operator `<<`) on the `ages` field. This query retrieves `Event` objects where the entire `ages` range is strictly less than (comes entirely before) the provided `NumericRange(11, 15)`. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_23\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__fully_lt=NumericRange(11, 15))\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Adding Built-in Template Tags/Filters to Django Engine\nDESCRIPTION: Illustrates how to add custom template tag modules to the list of built-in libraries when configuring the Django `Engine`. By providing a list of dotted Python paths to the `builtins` parameter (e.g., `['myapp.builtins']`), the tags and filters defined in those modules become available in all templates without needing an explicit `{% load %}` tag.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nEngine(\n    builtins=[\"myapp.builtins\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject Prefix in Django\nDESCRIPTION: Specifies a prefix ('[Django] ' by default, including the space) added to the subject line of emails sent via mail_admins or mail_managers.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_SUBJECT_PREFIX = '[Django] '\n```\n\n----------------------------------------\n\nTITLE: Configuring ADMINS\nDESCRIPTION: This snippet shows an example configuration for the ADMINS setting. The ADMINS setting specifies a list of email addresses that receive error notifications when DEBUG is False and AdminEmailHandler is configured in LOGGING.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nADMINS = [\"john@example.com\", '\"Ng, Mary\" <mary@example.com>']\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates with Django's render() Function\nDESCRIPTION: Example showing how to use Django's render() shortcut to render a template with context data and custom MIME type.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\n\ndef my_view(request):\n    # View code here...\n    return render(\n        request,\n        \"myapp/index.html\",\n        {\n            \"foo\": \"bar\",\n        },\n        content_type=\"application/xhtml+xml\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Writing Commit Message for Django Contribution\nDESCRIPTION: Demonstrates the format for writing a commit message when contributing to Django. The message should follow commit message guidelines and include a reference to the fixed issue number.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nFixed #99999 -- Added a shortcut function to make toast.\n```\n\n----------------------------------------\n\nTITLE: Using makemessages with symlinks in Django\nDESCRIPTION: Example of using the Django makemessages command with the symlinks option. This allows the command to follow symbolic links to directories when looking for translation strings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin makemessages --locale=de --symlinks\n```\n\n----------------------------------------\n\nTITLE: Exempting a View from X-Frame-Options in Django\nDESCRIPTION: This snippet shows how to use the xframe_options_exempt decorator to prevent the X-Frame-Options header from being set for a specific view. This allows the page to be loaded in a frame on any site.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views.decorators.clickjacking import xframe_options_exempt\n\n\n@xframe_options_exempt\ndef ok_to_load_in_a_frame(request):\n    return HttpResponse(\"This page is safe to load in a frame on any site.\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Class Attributes via Subclassing in Django\nDESCRIPTION: This snippet illustrates overriding a class attribute inherited from a parent view class. The `MorningGreetingView` class inherits from `GreetingView` and overrides the `greeting` attribute with a new value, demonstrating standard Python inheritance for view customization.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MorningGreetingView(GreetingView):\n    greeting = \"Morning to ya\"\n```\n\n----------------------------------------\n\nTITLE: Exempting a Django View from Login Requirement (Python)\nDESCRIPTION: This snippet demonstrates how to use the `@login_not_required` decorator from `django.contrib.auth.decorators` to mark a specific view (`contact_us`) as public. This allows unauthenticated users to access the view even if the `LoginRequiredMiddleware` is enabled globally.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_not_required\n\n\n@login_not_required\ndef contact_us(request): ...\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Extent Attribute in Python\nDESCRIPTION: Shows how to retrieve the spatial extent (xmin, ymin, xmax, ymax) of a GDALRaster using the `extent` attribute. It also demonstrates how changes to the raster's origin attribute dynamically affect the calculated extent.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_43\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.extent\n(0.0, -20.0, 10.0, 0.0)\n>>> rst.origin.x = 100\n>>> rst.extent\n(100.0, -20.0, 110.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Validating Unbound Django Forms and Checking Errors in Python\nDESCRIPTION: Demonstrates that calling is_valid() on an unbound Django form always returns False and the 'errors' attribute is an empty dictionary. No external dependencies beyond Django; inputs are none, and outputs are a Boolean and an empty error dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm()\n>>> f.is_valid()\nFalse\n>>> f.errors\n{}\n```\n\n----------------------------------------\n\nTITLE: Post-Migrate Signal Handler Registration\nDESCRIPTION: Example of registering a callback function for the post_migrate signal in a Django AppConfig.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\nfrom django.db.models.signals import post_migrate\n\n\ndef my_callback(sender, **kwargs):\n    # Your specific logic here\n    pass\n\n\nclass MyAppConfig(AppConfig):\n    ...\n\n    def ready(self):\n        post_migrate.connect(my_callback, sender=self)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Managers with Reverse Relations in Django 1.7\nDESCRIPTION: Example showing how to specify a custom manager when traversing a reverse relationship between models, allowing more control over reverse relation queries.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass Blog(models.Model):\n    pass\n\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog)\n\n    objects = models.Manager()  # Default Manager\n    entries = EntryManager()  # Custom Manager\n\n\nb = Blog.objects.get(id=1)\nb.entry_set(manager=\"entries\").all()\n```\n\n----------------------------------------\n\nTITLE: Manual Object Retrieval with Error Handling\nDESCRIPTION: Equivalent example showing manual object retrieval and 404 handling without the shortcut.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import Http404\n\n\ndef my_view(request):\n    try:\n        obj = MyModel.objects.get(pk=1)\n    except MyModel.DoesNotExist:\n        raise Http404(\"No MyModel matches the given query.\")\n```\n\n----------------------------------------\n\nTITLE: Using distance_lte Filter in GeoDjango\nDESCRIPTION: Example of using the distance_lte lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is less than or equal to the specified distance (5 meters).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__distance_lte=(geom, D(m=5)))\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for ArticleListView in Django\nDESCRIPTION: Provides an example of an HTML template for displaying a list of articles, including handling of empty lists.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-display.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Articles</h1>\n<ul>\n{% for article in object_list %}\n    <li>{{ article.pub_date|date }} - {{ article.headline }}</li>\n{% empty %}\n    <li>No articles yet.</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Decorating the dispatch Method in a Class-Based View (Python/Django)\nDESCRIPTION: This code shows how to apply a decorator to every instance of a class-based view by decorating the dispatch method. It uses method_decorator to transform a function decorator into a method decorator applied to the dispatch method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\nfrom django.views.generic import TemplateView\n\n\nclass ProtectedView(TemplateView):\n    template_name = \"secret.html\"\n\n    @method_decorator(login_required)\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Directories in Django Settings\nDESCRIPTION: Shows how to configure the TEMPLATES setting with DIRS option to specify template directories for the Django template system.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            \"/home/html/templates/lawrence.com\",\n            \"/home/html/templates/default\",\n        ],\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'adjacent_to' Lookup in Django Python\nDESCRIPTION: Demonstrates the `adjacent_to` lookup (`__adjacent_to`, SQL operator `-|-`) on the `ages` field. This query finds `Event` objects where the `ages` range shares a boundary point with (is adjacent to) the given `NumericRange(10, 21)`. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_27\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__adjacent_to=NumericRange(10, 21))\n<QuerySet [<Event: Soft play>, <Event: Pub trip>]>\n```\n\n----------------------------------------\n\nTITLE: Using json_script Filter\nDESCRIPTION: Shows how to safely output Python objects as JSON in a script tag for JavaScript use.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_73\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|json_script:\"hello-data\" }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Method for Model Constraints (Python)\nDESCRIPTION: Model constraints (`django.db.models.constraints`) now implement a `check()` method. This method is automatically registered with the Django check framework, allowing for validation of constraint definitions during system checks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nConstraints.check()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template Tag Function in Python\nDESCRIPTION: This snippet shows the structure of a custom template tag function that accepts arguments and keyword arguments. It demonstrates how to handle the passed parameters within the function.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef my_tag(a, b, *args, **kwargs):\n    warning = kwargs[\"warning\"]\n    profile = kwargs[\"profile\"]\n    ...\n    return ...\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Namespaces in Django Root URLconf\nDESCRIPTION: This snippet demonstrates how to set up URL namespaces in Django's root URLconf. It shows including application URLs with different namespaces to create separate instances of the same application.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"author-polls/\", include(\"polls.urls\", namespace=\"author-polls\")),\n    path(\"publisher-polls/\", include(\"polls.urls\", namespace=\"publisher-polls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Extracting with Explicit Timezone in Django ORM - Python\nDESCRIPTION: Illustrates extraction of date/time components using the tzinfo parameter directly in the Extract functions. This requires zoneinfo and the Django model. The explicit tzinfo argument overrides any active Django timezone for precise localization and is needed when extracting according to a specific timezone context.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> import zoneinfo\\n>>> melb = zoneinfo.ZoneInfo(\"Australia/Melbourne\")\\n>>> Experiment.objects.annotate(\\n...     day=ExtractDay(\"start_datetime\", tzinfo=melb),\\n...     weekday=ExtractWeekDay(\"start_datetime\", tzinfo=melb),\\n...     isoweekday=ExtractIsoWeekDay(\"start_datetime\", tzinfo=melb),\\n...     hour=ExtractHour(\"start_datetime\", tzinfo=melb),\\n... ).values(\"day\", \"weekday\", \"isoweekday\", \"hour\").get(\\n...     end_datetime__year=ExtractYear(\"start_datetime\"),\\n... )\\n{'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Outputting an Atom 1.0 Feed in Django\nDESCRIPTION: This snippet demonstrates how to create an Atom 1.0 feed using Django's feedgenerator module, add an item to it, and print it to standard output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.utils import feedgenerator\n>>> from datetime import datetime\n>>> f = feedgenerator.Atom1Feed(\n...     title=\"My Blog\",\n...     link=\"https://www.example.com/\",\n...     description=\"In which I write about what I ate today.\",\n...     language=\"en\",\n...     author_name=\"Myself\",\n...     feed_url=\"https://example.com/atom.xml\",\n... )\n>>> f.add_item(\n...     title=\"Hot dog today\",\n...     link=\"https://www.example.com/entries/1/\",\n...     pubdate=datetime.now(),\n...     description=\"<p>Today I had a Vienna Beef hot dog. It was pink, plump and perfect.</p>\",\n... )\n>>> print(f.writeString(\"UTF-8\"))\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"en\">\n...\n</feed>\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Form as HTML Unordered List\nDESCRIPTION: Demonstrates the output of the as_ul() method, which renders form fields as a series of <li> tags without the enclosing <ul> tags.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_24\n\nLANGUAGE: HTML\nCODE:\n```\n<li><label for=\"id_subject\">Subject:</label> <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></li>\n<li><label for=\"id_message\">Message:</label> <input type=\"text\" name=\"message\" id=\"id_message\" required></li>\n<li><label for=\"id_sender\">Sender:</label> <input type=\"email\" name=\"sender\" id=\"id_sender\" required></li>\n<li><label for=\"id_cc_myself\">Cc myself:</label> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></li>\n```\n\n----------------------------------------\n\nTITLE: Using URLValidator class reference in Django\nDESCRIPTION: Reference to the URLValidator class that had security vulnerability on Python 3.9.5+ where it didn't prohibit newlines and tabs, potentially enabling header injection attacks if used outside form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.22.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.validators.URLValidator\n```\n\n----------------------------------------\n\nTITLE: Updating Django Source Code with Git\nDESCRIPTION: Command to pull the latest changes from the Django Git repository to update the local codebase\nSOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Fixture for Django Person Model\nDESCRIPTION: Example JSON fixture demonstrating how to define initial data for a Person model with two records. Shows the structure for model name, primary key, and field values.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/initial-data.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering by Minute using SQL EXTRACT\nDESCRIPTION: Shows the SQL equivalent for filtering based on the minute component of a timestamp field. This corresponds to Django's `__minute` lookup. Note that the exact SQL syntax may vary across different database engines. When Django's `USE_TZ` setting is True, datetime fields are converted to the current time zone before filtering, requiring time zone definitions in the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_120\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ... WHERE EXTRACT('minute' FROM timestamp) >= '29';\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom HttpResponse Subclass with HTTPStatus - Django - Python\nDESCRIPTION: This snippet demonstrates how to define a custom HttpResponse subclass (HttpResponseNoContent) in Django by specifying a custom HTTP status code using Python's http.HTTPStatus module. It requires importing HTTPStatus from the standard library and HttpResponse from django.http. The example shows how to set the status_code attribute directly within the new class, which will then be used for responses instantiated from this subclass.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom http import HTTPStatus\nfrom django.http import HttpResponse\n\n\nclass HttpResponseNoContent(HttpResponse):\n    status_code = HTTPStatus.NO_CONTENT\n```\n\n----------------------------------------\n\nTITLE: Defining BaseDateListView Class in Django\nDESCRIPTION: BaseDateListView is a base class that provides common behavior for all date-based views. It is not meant to be instantiated directly but serves as a parent class for other date-based views.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BaseDateListView:\n    # Implementation details omitted\n    pass\n```\n\n----------------------------------------\n\nTITLE: Django Fixture Directory Configuration\nDESCRIPTION: Sets `FIXTURE_DIRS` as a list of directories for Django to search for fixture data files, supplementing each application's `fixtures` directory. Defaults to an empty list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\nFIXTURE_DIRS\n----------------\n\nDefault: `[]` (Empty list)\n\nList of directories searched for :ref:`fixture <fixtures-explanation>` files,\nin addition to the `fixtures` directory of each application, in search order.\n\nNote that these paths should use Unix-style forward slashes, even on Windows.\n\nSee :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`.\n```\n\n----------------------------------------\n\nTITLE: Defining Disallowed User Agents in Django\nDESCRIPTION: Provides a list (empty by default) of compiled regular expression objects for User-Agent strings forbidden from accessing any page. This requires the CommonMiddleware to be active.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nDISALLOWED_USER_AGENTS = []\n```\n\n----------------------------------------\n\nTITLE: Preserving Text Space with spaceless Tag in Django Templates\nDESCRIPTION: This snippet shows that the spaceless tag only removes space between tags, not space between tags and text. The whitespace around the word 'Hello' is preserved in this example.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_43\n\nLANGUAGE: html+django\nCODE:\n```\n{% spaceless %}\n    <strong>\n        Hello\n    </strong>\n{% endspaceless %}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template Tag in Django Template\nDESCRIPTION: This example demonstrates how to use a custom template tag in a Django template, passing both positional and keyword arguments to the tag.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_20\n\nLANGUAGE: html+django\nCODE:\n```\n{% my_tag 123 \"abcd\" book.title warning=message|lower profile=user.profile %}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time Zone in Templates\nDESCRIPTION: Demonstrates retrieving the current time zone name using the get_current_timezone template tag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% get_current_timezone as TIME_ZONE %}\n```\n\n----------------------------------------\n\nTITLE: Registering URL for RecordInterestView in Django (Python)\nDESCRIPTION: Defines a URL pattern in Django that routes requests for a specific author's interest page to the RecordInterestView class-based view. Uses Django's path function from django.urls and imports the custom view from books.views. Expects 'pk' as a URL parameter for identifying the Author instance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\\nfrom books.views import RecordInterestView\\n\\nurlpatterns = [\\n    # ...\\n    path(\\n        \\\"author/<int:pk>/interest/\\\",\\n        RecordInterestView.as_view(),\\n        name=\\\"author-interest\\\",\\n    ),\\n]\n```\n\n----------------------------------------\n\nTITLE: Using Geometric Methods on GEOSGeometry Objects (Python)\nDESCRIPTION: Demonstrates using methods provided by the GEOS library directly on `GEOSGeometry` objects in Python. The example shows creating a `Point` object and then using the `contains` method on both the point and a retrieved `MultiPolygon` (`sm.mpoly`) to check for spatial containment. Requires `django.contrib.gis.geos.Point` and a model instance `sm` with a geometry field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pnt = Point(12.4604, 43.9420)\n>>> sm.mpoly.contains(pnt)\nTrue\n>>> pnt.contains(sm.mpoly)\nFalse\n```\n\n----------------------------------------\n\nTITLE: Querying Django Models in Python Shell\nDESCRIPTION: This Python code demonstrates how to interact with Django models using the Python shell. It shows creating, saving, and querying Question objects, as well as accessing and modifying their attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# No questions are in the system yet.\n>>> Question.objects.all()\n<QuerySet []>\n\n# Create a new Question.\n# Support for time zones is enabled in the default settings file, so\n# Django expects a datetime with tzinfo for pub_date. Use timezone.now()\n# instead of datetime.datetime.now() and it will do the right thing.\n>>> from django.utils import timezone\n>>> q = Question(question_text=\"What's new?\", pub_date=timezone.now())\n\n# Save the object into the database. You have to call save() explicitly.\n>>> q.save()\n\n# Now it has an ID.\n>>> q.id\n1\n\n# Access model field values via Python attributes.\n>>> q.question_text\n\"What's new?\"\n>>> q.pub_date\ndatetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.UTC)\n\n# Change values by changing the attributes, then calling save().\n>>> q.question_text = \"What's up?\"\n>>> q.save()\n\n# objects.all() displays all the questions in the database.\n>>> Question.objects.all()\n<QuerySet [<Question: Question object (1)>]>\n```\n\n----------------------------------------\n\nTITLE: Using Django's Database Routing in Interactive Examples\nDESCRIPTION: Interactive examples demonstrating how Django's database routing works with the configured routers in practice.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# This retrieval will be performed on the 'auth_db' database\nfred = User.objects.get(username=\"fred\")\nfred.first_name = \"Frederick\"\n\n# This save will also be directed to 'auth_db'\nfred.save()\n\n# These retrieval will be randomly allocated to a replica database\ndna = Person.objects.get(name=\"Douglas Adams\")\n\n# A new object has no database allocation when created\nmh = Book(title=\"Mostly Harmless\")\n\n# This assignment will consult the router, and set mh onto\n# the same database as the author object\nmh.author = dna\n\n# This save will force the 'mh' instance onto the primary database...\nmh.save()\n\n# ... but if we re-retrieve the object, it will come back on a replica\nmh = Book.objects.get(title=\"Mostly Harmless\")\n```\n\n----------------------------------------\n\nTITLE: Using F Expressions for Field Updates in Django\nDESCRIPTION: Demonstrates how to use Django's F expressions to update a field based on its current value, useful for incrementing counters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.update(number_of_pingbacks=F(\"number_of_pingbacks\") + 1)\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Full Text Search in Django with PostgreSQL\nDESCRIPTION: Demonstrates how to use the 'search' lookup to perform a basic full text search against a single database column.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(body_text__search=\"Cheese\")\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]\n```\n\n----------------------------------------\n\nTITLE: Connecting to User Model Signals in Django\nDESCRIPTION: Example of connecting to signals sent by the user model using settings.AUTH_USER_MODEL. This ensures the signal connection works with custom user models.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\n\n\ndef post_save_receiver(sender, instance, created, **kwargs):\n    pass\n\n\npost_save.connect(post_save_receiver, sender=settings.AUTH_USER_MODEL)\n```\n\n----------------------------------------\n\nTITLE: Switching Language in Django Template\nDESCRIPTION: Demonstrates how to switch languages within a Django template using the language tag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n{% load i18n %}\n\n{% get_current_language as LANGUAGE_CODE %}\n<!-- Current language: {{ LANGUAGE_CODE }} -->\n<p>{% translate \"Welcome to our page\" %}</p>\n\n{% language 'en' %}\n    {% get_current_language as LANGUAGE_CODE %}\n    <!-- Current language: {{ LANGUAGE_CODE }} -->\n    <p>{% translate \"Welcome to our page\" %}</p>\n{% endlanguage %}\n```\n\n----------------------------------------\n\nTITLE: Copying Django Model Instances with One-to-One Relations\nDESCRIPTION: Demonstrates how to handle one-to-one relationships when copying Django model instances to avoid constraint violations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ndetail = EntryDetail.objects.all()[0]\ndetail.pk = None\ndetail._state.adding = True\ndetail.entry = entry\ndetail.save()\n```\n\n----------------------------------------\n\nTITLE: Defining DecimalValidator in Django\nDESCRIPTION: Validator class that enforces constraints on decimal numbers including maximum digits and decimal places. Raises ValidationError for violations of digit constraints.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDecimalValidator(max_digits, decimal_places)\n```\n\n----------------------------------------\n\nTITLE: Creating Automated Test for Django Question Model\nDESCRIPTION: This code snippet shows how to create an automated test for the Question model in Django. It tests the was_published_recently() method to ensure it returns False for questions with future publication dates.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom django.test import TestCase\nfrom django.utils import timezone\n\nfrom .models import Question\n\n\nclass QuestionModelTests(TestCase):\n    def test_was_published_recently_with_future_question(self):\n        \"\"\"\n        was_published_recently() returns False for questions whose pub_date\n        is in the future.\n        \"\"\"\n        time = timezone.now() + datetime.timedelta(days=30)\n        future_question = Question(pub_date=time)\n        self.assertIs(future_question.was_published_recently(), False)\n```\n\n----------------------------------------\n\nTITLE: Using Coalesce Function with Django QuerySet\nDESCRIPTION: Example showing how to use the Coalesce function with Django QuerySet to provide fallback values for company taglines.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F, Value, CharField\nqs = Company.objects.annotate(\n    tagline=Coalesce(\n        [F(\"motto\"), F(\"ticker_name\"), F(\"description\"), Value(\"No Tagline\")],\n        output_field=CharField(),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Password Hasher Runtime Hardening Method Reference\nDESCRIPTION: Reference to the new BasePasswordHasher.harden_runtime() method introduced to mitigate timing attacks in password verification by equalizing runtime between existing passwords with different work factors.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBasePasswordHasher.harden_runtime()\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Intersection in Django ORM\nDESCRIPTION: Example of using the 'intersects' lookup to find geometries that spatially intersect with a given geometry across different spatial database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__intersects=geom)\n```\n\n----------------------------------------\n\nTITLE: Using LPad Function in Django Models\nDESCRIPTION: Shows how to left-pad text fields with the LPad function\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Value\n>>> from django.db.models.functions import LPad\n>>> Author.objects.create(name=\"John\", alias=\"j\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Select Widget for ModelChoiceField in Django\nDESCRIPTION: Example of a custom Select widget that adds data attributes to option elements based on model instance properties, used with ModelChoiceField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ToppingSelect(forms.Select):\n    def create_option(\n        self, name, value, label, selected, index, subindex=None, attrs=None\n    ):\n        option = super().create_option(\n            name, value, label, selected, index, subindex, attrs\n        )\n        if value:\n            option[\"attrs\"][\"data-price\"] = value.instance.price\n        return option\n\n\nclass PizzaForm(forms.ModelForm):\n    class Meta:\n        model = Pizza\n        fields = [\"topping\"]\n        widgets = {\"topping\": ToppingSelect}\n```\n\n----------------------------------------\n\nTITLE: Creating ModelForm Class with modelform_factory (Django, Python)\nDESCRIPTION: The modelform_factory function returns a ModelForm class customized for a given Django model. It requires a model and can take optional arguments to specify included or excluded model fields, custom widgets, field classes, labels, help texts, error messages, and a formfield_callback for advanced customization. The fields to include must be provided explicitly, either via function arguments or within a Meta class; otherwise, ImproperlyConfigured will be raised. Inputs include the model and configuration options, and the output is a dynamic ModelForm class tailored to the specified model and options. Requires Django's django.forms.models module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/models.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None)\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Form in Django Templates\nDESCRIPTION: Example of a simple HTML form in a Django template that collects a user's name. The form uses the POST method and includes a text input field and submit button, with optional pre-filling from a context variable.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/your-name/\" method=\"post\">\n    <label for=\"your_name\">Your name: </label>\n    <input id=\"your_name\" type=\"text\" name=\"your_name\" value=\"{{ current_name }}\">\n    <input type=\"submit\" value=\"OK\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Q Objects with AND and OR Conditions in Django\nDESCRIPTION: Shows how to pass multiple Q objects to a lookup function to create complex AND and OR conditions in a single query.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nPoll.objects.get(\n    Q(question__startswith=\"Who\"),\n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Field Indexes with Custom Order Using Django ORM (Python)\nDESCRIPTION: Shows how to define an index by specifying a list of field names with explicit sorting using Django's ORM. The 'fields' keyword takes a list where field names prefixed by a hyphen indicate descending order. Dependencies include the correct field names defined in the model; this produces SQL indexes with custom column orders. Limitations include database backend restrictions (some databases may not support descending indexes or specific ordering).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nIndex(fields=['headline', '-pub_date'])\n```\n\n----------------------------------------\n\nTITLE: Setting Email Content Type in Django\nDESCRIPTION: Example showing how to change the content subtype of an EmailMessage from plain text to HTML.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmsg = EmailMessage(subject, html_content, from_email, [to])\nmsg.content_subtype = \"html\"  # Main content is now text/html\nmsg.send()\n```\n\n----------------------------------------\n\nTITLE: Base Field Attribute Modification Impact in Django Forms - Python\nDESCRIPTION: Shows that altering a Form class's base_fields attribute affects all future instances of that Form in the Python process. Adjusting label_suffix here permanently changes the display for subsequent forms. Requires understanding of class vs. instance attribute behavior. Output is HTML with updated label suffix.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> f.base_fields[\\\"subject\\\"].label_suffix = \\\"?\\\"\\n>>> another_f = ContactForm(auto_id=False)\\n>>> another_f.as_div().split(\\\"</div>\\\")[0]\\n'<div><label for=\\\"id_subject\\\">Subject?</label><input type=\\\"text\\\" name=\\\"subject\\\" maxlength=\\\"100\\\" required id=\\\"id_subject\\\">'\n```\n\n----------------------------------------\n\nTITLE: Serializing GeoDjango Models to GeoJSON in Python\nDESCRIPTION: This snippet demonstrates how to use the GeoJSON serializer to serialize City objects. It specifies a custom geometry field and limits the properties to only include the 'name' field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/serializers.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.serializers import serialize\nfrom my_app.models import City\n\nserialize(\"geojson\", City.objects.all(), geometry_field=\"point\", fields=[\"name\"])\n```\n\n----------------------------------------\n\nTITLE: Installing tblib Package for Parallel Test Execution in Python\nDESCRIPTION: Command to install the tblib package, which is required for displaying tracebacks correctly when running tests in parallel.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install tblib\n```\n\n----------------------------------------\n\nTITLE: Using HttpResponse class reference in Django\nDESCRIPTION: Reference to Django's HttpResponse class which provides protection against header injection by prohibiting newlines in HTTP headers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.22.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.http.HttpResponse\n```\n\n----------------------------------------\n\nTITLE: Setting Number Formatting in Django\nDESCRIPTION: These settings are related to number formatting. `DECIMAL_SEPARATOR` specifies the character used as the decimal separator, with the default being a dot (`.`). Locale-specific formatting takes precedence.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'.'`` (Dot)\n\nDefault decimal separator used when formatting decimal numbers.\n\nNote that the locale-dictated format has higher precedence and will be applied\ninstead.\n```\n\n----------------------------------------\n\nTITLE: Querying Django Application Registry\nDESCRIPTION: Example showing how to access the Django application registry to get configuration information.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.apps import apps\n>>> apps.get_app_config(\"admin\").verbose_name\n'Administration'\n```\n\n----------------------------------------\n\nTITLE: Using patch_cache_control Function in Django's cache Utils\nDESCRIPTION: The patch_cache_control function modifies the Cache-Control header of HTTP responses by adding keyword arguments to it. Parameter names are converted to lowercase with hyphens, and boolean True values are added as flags.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npatch_cache_control(response, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating OR Conditions with Q Objects in Django\nDESCRIPTION: Uses Django's Q objects to create an OR condition in a database query, which allows for more complex queries than standard keyword arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nQ(question__startswith=\"Who\") | Q(question__startswith=\"What\")\n```\n\n----------------------------------------\n\nTITLE: Implementing XSS-Vulnerable Greeting Tag - Python\nDESCRIPTION: Example showing a simple_tag implementation that is vulnerable to XSS attacks in older Django versions due to lack of escaping.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@register.simple_tag(takes_context=True)\ndef greeting(context):\n    return \"Hello {0}!\".format(context[\"request\"].user.first_name)\n```\n\n----------------------------------------\n\nTITLE: Excluding Django Objects with Chained Conditions (OR equivalent) using Python and SQL\nDESCRIPTION: Demonstrates chaining `exclude()` calls in Python to filter out objects matching *any* of the specified conditions (equivalent to OR logic for exclusion). Each `exclude` call translates to a separate `AND NOT` condition in the resulting SQL.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3)).exclude(headline=\"Hello\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ...\nWHERE NOT pub_date > '2005-1-3'\nAND NOT headline = 'Hello'\n```\n\n----------------------------------------\n\nTITLE: Automatic Primary Key Field Definition in Django\nDESCRIPTION: Example showing the automatic primary key field that Django adds to models by default if no primary key is explicitly defined.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nid = models.BigAutoField(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Structuring a Django Project with a Reusable App\nDESCRIPTION: Shows the directory structure of a Django project with a reusable 'polls' app. This structure demonstrates how to organize files for both the project and the reusable application.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndjangotutorial/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n    polls/\n        __init__.py\n        admin.py\n        apps.py\n        migrations/\n            __init__.py\n            0001_initial.py\n        models.py\n        static/\n            polls/\n                images/\n                    background.png\n                style.css\n        templates/\n            polls/\n                detail.html\n                index.html\n                results.html\n        tests.py\n        urls.py\n        views.py\n    templates/\n        admin/\n            base_site.html\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Feed with Explicit MIME Type Stylesheet\nDESCRIPTION: This snippet shows how to specify the MIME type of a stylesheet URL using Django's Stylesheet class when the extension doesn't allow for automatic detection.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.utils.feedgenerator import Stylesheet\n\n\nclass FeedWithHardcodedStylesheet(Feed):\n    stylesheets = [\n        Stylesheet(\"https://example.com/rss_stylesheet\", mimetype=\"text/xsl\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Django Shell Standard Input Example\nDESCRIPTION: Example demonstrating how to pass code to Django shell via standard input.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ django-admin shell <<EOF\\n> import django\\n> print(django.__version__)\\n> EOF\n```\n\n----------------------------------------\n\nTITLE: Optimizing ManyToManyField Serialization in Django 4.2.2\nDESCRIPTION: Addresses a regression that caused unnecessary selection of non-nullable ManyToManyField without a natural key during serialization.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nManyToManyField\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Explicit Many-to-Many Intermediary Model\nDESCRIPTION: Creates Person, Group, and Membership models where Membership serves as an explicit intermediary model with additional fields like date_joined and invite_reason. Includes a unique constraint on person-group combinations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n\nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, through=\"Membership\")\n\n\nclass Membership(models.Model):\n    person = models.ForeignKey(Person, on_delete=models.CASCADE)\n    group = models.ForeignKey(Group, on_delete=models.CASCADE)\n    date_joined = models.DateField()\n    invite_reason = models.CharField(max_length=64)\n\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(\n                fields=[\"person\", \"group\"], name=\"unique_person_group\"\n            )\n        ]\n```\n\n----------------------------------------\n\nTITLE: Setting Request Encoding in Django View\nDESCRIPTION: Example of setting custom encoding for form data processing in a Django view\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef some_view(request):\n    # We know that the data must be encoded as KOI8-R (for some reason).\n    request.encoding = \"koi8-r\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: UUID Field Migration Implementation\nDESCRIPTION: Collection of migrations demonstrating how to add a unique UUID field to existing models.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations, models\nimport uuid\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"myapp\", \"0005_populate_uuid_values\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"mymodel\",\n            name=\"uuid\",\n            field=models.UUIDField(default=uuid.uuid4, unique=True),\n        ),\n    ]\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\nimport uuid\n\ndef gen_uuid(apps, schema_editor):\n    MyModel = apps.get_model(\"myapp\", \"MyModel\")\n    for row in MyModel.objects.all():\n        row.uuid = uuid.uuid4()\n        row.save(update_fields=[\"uuid\"])\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"myapp\", \"0004_add_uuid_field\"),\n    ]\n\n    operations = [\n        migrations.RunPython(gen_uuid, reverse_code=migrations.RunPython.noop),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Constraint Classes Conventionally in Python\nDESCRIPTION: Shows the standard convention for importing and referencing Django model constraint classes. It advises importing `models` from `django.db` and then accessing constraints like `models.CheckConstraint` or `models.UniqueConstraint`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n# Refer to constraints as models.<Foo>Constraint\n# e.g., models.CheckConstraint, models.UniqueConstraint\n```\n\n----------------------------------------\n\nTITLE: Creating and Serving In-Memory Raster using Django HttpResponse\nDESCRIPTION: This example shows how to create a raster in GDAL's virtual memory filesystem and serve it as a file in a Django HttpResponse. It creates a 6x6 raster with custom properties and band data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nrst = GDALRaster(\n    {\n        \"name\": \"/vsimem/temporarymemfile\",\n        \"driver\": \"tif\",\n        \"width\": 6,\n        \"height\": 6,\n        \"srid\": 3086,\n        \"origin\": [500000, 400000],\n        \"scale\": [100, -100],\n        \"bands\": [{\"data\": range(36), \"nodata_value\": 99}],\n    }\n)\nHttpResponse(rast.vsi_buffer, \"image/tiff\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget for ModelForm Field in Django\nDESCRIPTION: This snippet demonstrates how to override the default widget for a CharField in a Django ModelForm. It uses the widgets attribute of the inner Meta class to specify a Textarea widget for the 'name' field of an Author model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import ModelForm, Textarea\nfrom myapp.models import Author\n\n\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        fields = [\"name\", \"title\", \"birth_date\"]\n        widgets = {\n            \"name\": Textarea(attrs={\"cols\": 80, \"rows\": 20}),\n        }\n```\n\n----------------------------------------\n\nTITLE: Calling Parent's render_to_response Method in Django View\nDESCRIPTION: This snippet demonstrates how to call the parent class's render_to_response method in a Django class-based view. It uses the super() function to access the parent class's implementation, passing the context dictionary as an argument.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nsuper().render_to_response(context)\n```\n\n----------------------------------------\n\nTITLE: Registering GeoDjango Model with GISModelAdmin (Python)\nDESCRIPTION: Shows how to register a GeoDjango model (`WorldBorder`) in `admin.py` using `admin.GISModelAdmin` instead of the standard `ModelAdmin`. This provides an enhanced admin interface for geometry fields, typically including an OpenStreetMap base layer for better context. Requires `django.contrib.gis.admin`, the model definition, and installation of PROJ datum shifting files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nadmin.site.register(WorldBorder, admin.GISModelAdmin)\n```\n\n----------------------------------------\n\nTITLE: Using wordwrap Filter in Django Templates\nDESCRIPTION: Shows how to use the wordwrap filter, which wraps words at a specified line length.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_103\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|wordwrap:5 }}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models with ManyToManyField in Python\nDESCRIPTION: Defines two Django models, `Publication` and `Article`. The `Article` model uses `models.ManyToManyField(Publication)` to establish a many-to-many relationship, allowing an article to be associated with multiple publications and a publication to contain multiple articles. Both models include basic fields, `Meta` options for ordering, and `__str__` methods for representation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Publication(models.Model):\n    title = models.CharField(max_length=30)\n\n    class Meta:\n        ordering = [\"title\"]\n\n    def __str__(self):\n        return self.title\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100)\n    publications = models.ManyToManyField(Publication)\n\n    class Meta:\n        ordering = [\"headline\"]\n\n    def __str__(self):\n        return self.headline\n```\n\n----------------------------------------\n\nTITLE: Using Model Formset in Python\nDESCRIPTION: Shows how to instantiate and print a model formset created from the Author model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> formset = AuthorFormSet()\n>>> print(formset)\n<input type=\"hidden\" name=\"form-TOTAL_FORMS\" value=\"1\" id=\"id_form-TOTAL_FORMS\"><input type=\"hidden\" name=\"form-INITIAL_FORMS\" value=\"0\" id=\"id_form-INITIAL_FORMS\"><input type=\"hidden\" name=\"form-MIN_NUM_FORMS\" value=\"0\" id=\"id_form-MIN_NUM_FORMS\"><input type=\"hidden\" name=\"form-MAX_NUM_FORMS\" value=\"1000\" id=\"id_form-MAX_NUM_FORMS\">\n<div><label for=\"id_form-0-name\">Name:</label><input id=\"id_form-0-name\" type=\"text\" name=\"form-0-name\" maxlength=\"100\"></div>\n<div><label for=\"id_form-0-title\">Title:</label><select name=\"form-0-title\" id=\"id_form-0-title\">\n<option value=\"\" selected>---------</option>\n<option value=\"MR\">Mr.</option>\n<option value=\"MRS\">Mrs.</option>\n<option value=\"MS\">Ms.</option>\n</select><input type=\"hidden\" name=\"form-0-id\" id=\"id_form-0-id\"></div>\n```\n\n----------------------------------------\n\nTITLE: Class Method 'as_manager()' in Django ORM\nDESCRIPTION: Defines the 'as_manager()' class method which returns a Manager instance that copies QuerySet methods, enabling custom query managers. It clarifies that this method does not have an async variant because it does not perform a query execution.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_91\n\nLANGUAGE: Python\nCODE:\n```\n.. classmethod:: as_manager()\n\nClass method that returns an instance of :class:`~django.db.models.Manager`\nwith a copy of the ``QuerySet``’s methods. See\n:ref:`create-manager-with-queryset-methods` for more details.\n\nNote that unlike the other entries in this section, this does not have an\nasynchronous variant as it does not execute a query.\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Backend with IP/Port in Django (Python)\nDESCRIPTION: This Python snippet shows how to configure the Django `CACHES` setting to use a single Memcached instance running on localhost (127.0.0.1) port 11211. It specifies the `PyMemcacheCache` backend, which requires the `pymemcache` Python library.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.memcached.PyMemcacheCache\",\n        \"LOCATION\": \"127.0.0.1:11211\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Insecure SQL Query Example in Django\nDESCRIPTION: Example showing unsafe handling of user input in raw SQL queries\nSOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import HttpResponse\nfrom .models import MyModel\n\n\ndef my_proof_of_concept(request):\n    query = request.GET.get(\"query\", \"\")\n    q = MyModel.objects.extra(select={\"id\": query})\n    return HttpResponse(q.values())\n```\n\n----------------------------------------\n\nTITLE: Uploading an In-Memory Image File Using Django Test Client\nDESCRIPTION: Demonstrates how to create and upload an in-memory image file using Django's test client. The example creates a BytesIO object with GIF image data and sets a name attribute for validation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from io import BytesIO\n>>> img = BytesIO(\n...     b\"GIF89a\\x01\\x00\\x01\\x00\\x00\\x00\\x00!\\xf9\\x04\\x01\\x00\\x00\\x00\"\n...     b\"\\x00,\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x02\\x01\\x00\\x00\"\n... )\n>>> img.name = \"myimage.gif\"\n```\n\n----------------------------------------\n\nTITLE: Removing M2M Relationship via Reverse Manager (pycon)\nDESCRIPTION: Demonstrates removing a specific many-to-many relationship using the `remove()` method on the reverse relationship manager (`p2.article_set.remove(a5)`). It verifies the removal by checking the related sets from both sides.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_23\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p2.article_set.remove(a5)\n>>> p2.article_set.all()\n<QuerySet []>\n>>> a5.publications.all()\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Artist-Album-Song Models with Restricted Deletion\nDESCRIPTION: Example showing complex deletion behavior with RESTRICT and CASCADE options in related models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nclass Artist(models.Model):\n    name = models.CharField(max_length=10)\n\n\nclass Album(models.Model):\n    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)\n\n\nclass Song(models.Model):\n    artist = models.ForeignKey(Artist, on_delete=models.CASCADE)\n    album = models.ForeignKey(Album, on_delete=models.RESTRICT)\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Disjoint from Geometry in Django\nDESCRIPTION: Illustrates using the disjoint spatial lookup to filter Zipcode objects whose polygon is spatially disjoint from a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__disjoint=geom)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Results with Multiple Annotations (pycon)\nDESCRIPTION: Illustrates a potential issue where combining multiple `Count` aggregations using `annotate()` on different related fields (`authors`, `store`) can yield incorrect results. This occurs because the underlying SQL uses JOINs, which can multiply counts if an object is related to multiple objects in both relationships being counted. The example first shows the correct, individual counts and then the inflated counts resulting from the combined annotation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> book = Book.objects.first()\n>>> book.authors.count()\n2\n>>> book.store_set.count()\n3\n>>> q = Book.objects.annotate(Count(\"authors\"), Count(\"store\"))\n>>> q[0].authors__count\n6\n>>> q[0].store__count\n6\n```\n\n----------------------------------------\n\nTITLE: Using cache_control Decorator with Private Cache\nDESCRIPTION: Shows how to use the cache_control decorator to mark a response as private, preventing it from being stored in public caches. Useful for views that return user-specific or sensitive information.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_control\n\n\n@cache_control(private=True)\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Implementing value_to_string method for HandField in Django\nDESCRIPTION: This snippet shows how to implement the value_to_string method for a custom HandField in Django. It demonstrates how to convert the field's value to a string representation using existing conversion methods.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass HandField(models.Field):\n    # ...\n\n    def value_to_string(self, obj):\n        value = self.value_from_object(obj)\n        return self.get_prep_value(value)\n```\n\n----------------------------------------\n\nTITLE: Using ngettext_lazy for Plural Translations in Django Forms\nDESCRIPTION: Demonstrates how to use ngettext_lazy() for pluralized translations in a Django form, allowing for dynamic pluralization based on a number argument.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom django import forms\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import ngettext_lazy\n\n\nclass MyForm(forms.Form):\n    error_message = ngettext_lazy(\n        \"You only provided %(num)d argument\",\n        \"You only provided %(num)d arguments\",\n        \"num\",\n    )\n\n    def clean(self):\n        # ...\n        if error:\n            raise ValidationError(self.error_message % {\"num\": number})\n```\n\n----------------------------------------\n\nTITLE: Defining URL Pattern in Django URLconf\nDESCRIPTION: Shows how to define a URL pattern in Django's URLconf with a client ID parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\npath(\"client/<int:id>/\", app_views.client, name=\"app-views-client\")\n```\n\n----------------------------------------\n\nTITLE: DateField Truncation Example in Django\nDESCRIPTION: Shows how to use TruncYear and TruncMonth with DateFields, including timezone handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import UTC, datetime\n>>> from django.db.models import Count\n>>> from django.db.models.functions import TruncMonth, TruncYear\n>>> start1 = datetime(2014, 6, 15, 14, 30, 50, 321, tzinfo=UTC)\n>>> start2 = datetime(2015, 6, 15, 14, 40, 2, 123, tzinfo=UTC)\n>>> start3 = datetime(2015, 12, 31, 17, 5, 27, 999, tzinfo=UTC)\n>>> Experiment.objects.create(start_datetime=start1, start_date=start1.date())\n>>> Experiment.objects.create(start_datetime=start2, start_date=start2.date())\n>>> Experiment.objects.create(start_datetime=start3, start_date=start3.date())\n>>> experiments_per_year = (\n...     Experiment.objects.annotate(year=TruncYear(\"start_date\"))\n...     .values(\"year\")\n...     .annotate(experiments=Count(\"id\"))\n... )\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Check in Django View\nDESCRIPTION: Demonstrates a custom authentication check in a Django view function. This example checks if the user's email ends with a specific domain.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.shortcuts import redirect\n\ndef my_view(request):\n    if not request.user.email.endswith(\"@example.com\"):\n        return redirect(\"/login/?next=%s\" % request.path)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Django Admin Tabular Inline Configuration\nDESCRIPTION: Shows how to use TabularInline for a more compact display of inline related objects.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ChoiceInline(admin.TabularInline): ...\n```\n\n----------------------------------------\n\nTITLE: Parameterized Insert with Variable Substitution Using RunSQL in Django (Python)\nDESCRIPTION: Demonstrates parameterized execution with variable substitution in a migration using RunSQL. This approach uses placeholders (%s) and supplies parameter values, which is recommended for dynamic and safe value insertion. Dependencies: Django migrations; Inputs: SQL with placeholders, parameter list; Output: Executes the insert using the supplied parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmigrations.RunSQL([(\"INSERT INTO musician (name) VALUES (%s);\", [\"Reinhardt\"])])\n```\n\n----------------------------------------\n\nTITLE: Conditional Action Enablement in Django Admin\nDESCRIPTION: Implementation of conditional action enabling/disabling based on user attributes using get_actions method override\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    ...\n\n    def get_actions(self, request):\n        actions = super().get_actions(request)\n        if request.user.username[0].upper() != \"J\":\n            if \"delete_selected\" in actions:\n                del actions[\"delete_selected\"]\n        return actions\n```\n\n----------------------------------------\n\nTITLE: Ordering QuerySets by F Expression with Nulls Handling - Django ORM - Python\nDESCRIPTION: This snippet demonstrates how to order a queryset using F expressions in Django while controlling the position of null values using the 'nulls_last' keyword argument on .desc(). This ensures a database sort operation that places records with null values in 'last_contacted' after those with non-null values, regardless of the backend's default null ordering. Requires Django 3.1 or later, and assumes the model has a 'last_contacted' field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F\n\nCompany.objects.order_by(F(\"last_contacted\").desc(nulls_last=True))\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Keyword Arguments for Django Form Fields\nDESCRIPTION: Shows the correct way to initialize a Django form field (`forms.IntegerField`) using keyword arguments (`max_value=25, min_value=10`) for optional parameters. This explicit syntax is required in Django 2.0+ to improve code readability and prevent errors.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nforms.IntegerField(max_value=25, min_value=10)\n```\n\n----------------------------------------\n\nTITLE: Reverse M2M Relationship Modification\nDESCRIPTION: Shows how to remove a pizza from a topping's related set using the reverse relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> t.pizza_set.remove(p)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync/Async Compatible Django Middleware\nDESCRIPTION: Example of creating middleware that supports both synchronous and asynchronous requests using the sync_and_async_middleware decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import iscoroutinefunction\nfrom django.utils.decorators import sync_and_async_middleware\n\n@sync_and_async_middleware\ndef simple_middleware(get_response):\n    # One-time configuration and initialization goes here.\n    if iscoroutinefunction(get_response):\n\n        async def middleware(request):\n            # Do something here!\n            response = await get_response(request)\n            return response\n\n    else:\n\n        def middleware(request):\n            # Do something here!\n            response = get_response(request)\n            return response\n\n    return middleware\n```\n\n----------------------------------------\n\nTITLE: Using FilePathField in Django Models\nDESCRIPTION: FilePathField is one of the model field classes that has been updated to convert arguments to the correct types before querying, addressing MySQL typecasting issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import FilePathField\n```\n\n----------------------------------------\n\nTITLE: Using django.utils.html.remove_tags Function\nDESCRIPTION: The remove_tags template filter is now available as a standard Python function in django.utils.html module.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.html.remove_tags()\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple `get_absolute_url` Method (Python)\nDESCRIPTION: Provides a basic example of implementing the `get_absolute_url` method on a Django model. This version constructs the URL string directly using the instance's `id`, which may not be the most portable approach compared to using `django.urls.reverse`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef get_absolute_url(self):\n    return \"/people/%i/\" % self.id\n```\n\n----------------------------------------\n\nTITLE: Writing Conditional Expressions - HTML+Django Template - html+django\nDESCRIPTION: Illustrates the correct structuring of logical operations using Django's template 'if' tag, highlighting operator precedence rules. Shows how combined conditions should be constructed using logical 'and' and 'or' within a single tag. No dependencies are required; snippet is meant to clarify best practices for template logic. The input is template context variables and the output is conditional block rendering without support for chained comparisons.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_20\n\nLANGUAGE: html+django\nCODE:\n```\n{% if a > b > c %}  (WRONG)\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% if a > b and b > c %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Number Formatting\nDESCRIPTION: This snippet shows Django settings for configuring number formatting when USE_L10N is off. It demonstrates how to set decimal and thousand separators.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nUSE_L10N = False\nUSE_THOUSAND_SEPARATOR = True\nDECIMAL_SEPARATOR = \",\"\nTHOUSAND_SEPARATOR = \".\"\n```\n\n----------------------------------------\n\nTITLE: Defining DateMixin Class in Django\nDESCRIPTION: DateMixin class provides common behavior for all date-based views. It includes attributes and methods for specifying the date field, controlling the display of future dates, and retrieving date-related information.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DateMixin:\n    date_field = None\n    allow_future = False\n\n    def get_date_field(self):\n        return self.date_field\n\n    def get_allow_future(self):\n        return self.allow_future\n```\n\n----------------------------------------\n\nTITLE: Vulnerable QuerySet.order_by() Usage Example in Django 3.1.12\nDESCRIPTION: Demonstration of the security vulnerability where unsanitized user input in QuerySet.order_by() could lead to SQL injection. This issue was present in Django 3.1.12 and fixed in 3.1.13.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.13.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.order_by()\n```\n\n----------------------------------------\n\nTITLE: Defining ExclusionConstraint in Django Model\nDESCRIPTION: Example of using ExclusionConstraint to restrict overlapping reservations in the same room, excluding canceled reservations. It demonstrates the use of expressions, operators, and conditions in the constraint definition.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/constraints.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.postgres.constraints import ExclusionConstraint\nfrom django.contrib.postgres.fields import DateTimeRangeField, RangeOperators\nfrom django.db import models\nfrom django.db.models import Q\n\n\nclass Room(models.Model):\n    number = models.IntegerField()\n\n\nclass Reservation(models.Model):\n    room = models.ForeignKey(\"Room\", on_delete=models.CASCADE)\n    timespan = DateTimeRangeField()\n    cancelled = models.BooleanField(default=False)\n\n    class Meta:\n        constraints = [\n            ExclusionConstraint(\n                name=\"exclude_overlapping_reservations\",\n                expressions=[\n                    (\"timespan\", RangeOperators.OVERLAPS),\n                    (\"room\", RangeOperators.EQUAL),\n                ],\n                condition=Q(cancelled=False),\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Using dictsort with regroup Tag in Django Templates\nDESCRIPTION: This snippet demonstrates sorting data before regrouping by using the dictsort filter. This is useful when the input data is not already sorted according to the grouping attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_37\n\nLANGUAGE: html+django\nCODE:\n```\n{% regroup cities|dictsort:\"country\" by country as country_list %}\n```\n\n----------------------------------------\n\nTITLE: Django PostgreSQL Array Field Configuration\nDESCRIPTION: Reference to SplitArrayField and ArrayField with BooleanField, which was fixed to correctly preserve boolean values after the first True value.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nArrayField(BooleanField())\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializer for Decimal in Django Migrations\nDESCRIPTION: This snippet demonstrates how to create a custom serializer for the Decimal type in Django migrations. It defines a DecimalSerializer class and registers it with the MigrationWriter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom decimal import Decimal\n\nfrom django.db.migrations.serializer import BaseSerializer\nfrom django.db.migrations.writer import MigrationWriter\n\n\nclass DecimalSerializer(BaseSerializer):\n    def serialize(self):\n        return repr(self.value), {\"from decimal import Decimal\"}\n\n\nMigrationWriter.register_serializer(Decimal, DecimalSerializer)\n```\n\n----------------------------------------\n\nTITLE: Configuring LoginView URL in Django\nDESCRIPTION: Example of how to customize the LoginView template in a Django URLconf. This snippet shows how to use a custom template for the login view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\npath(\"accounts/login/\", auth_views.LoginView.as_view(template_name=\"myapp/login.html\")),\n```\n\n----------------------------------------\n\nTITLE: Configuring PASSWORD_HASHERS in Django Settings\nDESCRIPTION: This settings configuration specifies the password hashers Django should use, placing the default PBKDF2PasswordHasher first followed by a custom wrapped MD5 hasher for backward compatibility with legacy passwords.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"accounts.hashers.PBKDF2WrappedMD5PasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Fields in Django ModelForm\nDESCRIPTION: This example demonstrates how to create a ModelForm that excludes specific fields from the model. The form will include all fields except those listed in the exclude attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass PartialAuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        exclude = [\"title\"]\n```\n\n----------------------------------------\n\nTITLE: Identifying Django's Vendored Six Library\nDESCRIPTION: This snippet refers to the specific Python module path where Django includes its vendored (bundled) version of the 'six' compatibility library. In Django 1.6.9, this library was upgraded to version 1.9.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.six\n```\n\n----------------------------------------\n\nTITLE: Ranking Search Results with SearchRank in Django\nDESCRIPTION: Shows how to use SearchRank to order search results by relevancy.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector\n>>> vector = SearchVector(\"body_text\")\n>>> query = SearchQuery(\"cheese\")\n>>> Entry.objects.annotate(rank=SearchRank(vector, query)).order_by(\"-rank\")\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]\n```\n\n----------------------------------------\n\nTITLE: Starting the Django Management Shell (Console)\nDESCRIPTION: Shows the command used to launch the interactive Django management shell. This shell provides an environment to execute Python and Django commands, often used for testing ORM queries or interacting with models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Filtering by Second using `second` Lookup in Django (Python and SQL)\nDESCRIPTION: Illustrates filtering Django QuerySets based on the second component of datetime or time fields using the `__second` lookup. Supports exact matches (e.g., `__second=31`) or comparisons (e.g., `__second__gte=31`). Includes Python examples and the corresponding SQL `EXTRACT` equivalents. Requires time zone definitions in the database when `USE_TZ` is `True` for datetime fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_121\n\nLANGUAGE: Python\nCODE:\n```\nEvent.objects.filter(timestamp__second=31)\nEvent.objects.filter(time__second=2)\nEvent.objects.filter(timestamp__second__gte=31)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ... WHERE EXTRACT('second' FROM timestamp) = '31';\nSELECT ... WHERE EXTRACT('second' FROM time) = '2';\nSELECT ... WHERE EXTRACT('second' FROM timestamp) >= '31';\n```\n\n----------------------------------------\n\nTITLE: Querying ArrayField with Contains Lookup in Django\nDESCRIPTION: Demonstrates how to use the 'contains' lookup with ArrayField in Django. This example shows querying for posts that have specific tags using the contains lookup.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Post.objects.create(name=\"First post\", tags=[\"thoughts\", \"django\"])\n>>> Post.objects.create(name=\"Second post\", tags=[\"thoughts\"])\n>>> Post.objects.create(name=\"Third post\", tags=[\"tutorial\", \"django\"])\n\n>>> Post.objects.filter(tags__contains=[\"thoughts\"])\n<QuerySet [<Post: First post>, <Post: Second post>]>\n\n>>> Post.objects.filter(tags__contains=[\"django\"])\n<QuerySet [<Post: First post>, <Post: Third post>]>\n\n>>> Post.objects.filter(tags__contains=[\"django\", \"thoughts\"])\n<QuerySet [<Post: First post>]>\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch Object for Basic Prefetching in Django\nDESCRIPTION: Demonstrates the basic usage of the Prefetch object which is equivalent to string-based lookups. This provides more control over the prefetching operation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Prefetch\n>>> Restaurant.objects.prefetch_related(Prefetch(\"pizzas__toppings\"))\n```\n\n----------------------------------------\n\nTITLE: Inspecting ForeignKey References with F Expressions - Django ORM - Python (pycon)\nDESCRIPTION: This interactive shell snippet illustrates that referencing a ForeignKey field with an F expression assigns the related object's primary key (not the model instance) to the annotated field. Demonstrates that direct access to the related field yields the model instance, whereas the F-based annotation gives you the PK. Useful in cases where you need just the identifier without triggering a join to fetch the related object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> car = Company.objects.annotate(built_by=F(\"manufacturer\"))[0]\n>>> car.manufacturer\n<Manufacturer: Toyota>\n>>> car.built_by\n3\n```\n\n----------------------------------------\n\nTITLE: Prefetching Django GenericForeignKey Relationships with GenericPrefetch (Python)\nDESCRIPTION: Illustrates the use of `GenericPrefetch` to efficiently prefetch related objects through a `GenericForeignKey` when those objects might belong to different models (ContentTypes). The example sets up `Bookmark`, `Animal`, and `TaggedItem` objects, then uses `GenericPrefetch` with specific querysets for `Bookmark` and `Animal` to optimize the retrieval of `TaggedItem` objects along with their related `content_object`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.contenttypes.prefetch import GenericPrefetch\n>>> bookmark = Bookmark.objects.create(url=\"https://www.djangoproject.com/\")\n>>> animal = Animal.objects.create(name=\"lion\", weight=100)\n>>> TaggedItem.objects.create(tag=\"great\", content_object=bookmark)\n>>> TaggedItem.objects.create(tag=\"awesome\", content_object=animal)\n>>> prefetch = GenericPrefetch(\n...     \"content_object\", [Bookmark.objects.all(), Animal.objects.only(\"name\")]\n... )\n>>> TaggedItem.objects.prefetch_related(prefetch).all()\n<QuerySet [<TaggedItem: Great>, <TaggedItem: Awesome>]>\n```\n\n----------------------------------------\n\nTITLE: Caching Template Fragment with Variable Timeout in Django\nDESCRIPTION: Illustrates how to use a variable for the cache timeout in the {% cache %} tag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_27\n\nLANGUAGE: html+django\nCODE:\n```\n{% cache 600 sidebar %} ... {% endcache %}\n{% cache my_timeout sidebar %} ... {% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Function with Warning in Python\nDESCRIPTION: Shows how to implement a deprecated function that raises a warning while maintaining backwards compatibility.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport warnings\nfrom django.utils.deprecation import RemovedInDjangoXXWarning\n\n# RemovedInDjangoXXWarning.\ndef old_private_helper():\n    # Helper function that is only used in foo().\n    pass\n\ndef foo():\n    warnings.warn(\n        \"foo() is deprecated.\",\n        category=RemovedInDjangoXXWarning,\n        stacklevel=2,\n    )\n    old_private_helper()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using yesno Filter in Django Templates\nDESCRIPTION: Demonstrates the yesno filter, which maps values for True, False, and optionally None to specified strings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_104\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|yesno:\"yeah,no,maybe\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining URL Patterns with Default View Arguments in Django\nDESCRIPTION: This snippet demonstrates how to define URL patterns in Django's URLconf, including a pattern with a default argument for the view function. It shows both the URLconf setup and the corresponding view function definition.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# URLconf\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"blog/\", views.page),\n    path(\"blog/page<int:num>/\", views.page),\n]\n\n\n# View (in blog/views.py)\ndef page(request, num=1):\n    # Output the appropriate page of blog entries, according to num.\n    ...\n```\n\n----------------------------------------\n\nTITLE: Reversing URLs by Name or Callable in Django Python\nDESCRIPTION: Demonstrates two ways to use the `django.urls.reverse` function: reversing a URL using its defined name (\"news-archive\") and reversing using the callable view object (`views.archive`). Reversing by name is generally preferred, especially for namespaced views. Requires a defined URL pattern in `urls.py` named \"news-archive\" pointing to `news.views.archive`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# using the named URL\nreverse(\"news-archive\")\n\n# passing a callable object\n# (This is discouraged because you can't reverse namespaced views this way.)\nfrom news import views\n\nreverse(views.archive)\n```\n\n----------------------------------------\n\nTITLE: Using raw() Method in Django QuerySets\nDESCRIPTION: The raw() method allows developers to supply raw SQL. Users are advised to perform appropriate manual type conversions before executing queries to prevent MySQL typecasting issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nModel.objects.raw('SELECT * FROM myapp_model')\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Detail View in Django\nDESCRIPTION: DetailView implementation with JSON response capability using JSONResponseMixin.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.detail import BaseDetailView\n\n\nclass JSONDetailView(JSONResponseMixin, BaseDetailView):\n    def render_to_response(self, context, **response_kwargs):\n        return self.render_to_json_response(context, **response_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Documentation of contains() and acontains() methods in Django ORM\nDESCRIPTION: Covers how contains() checks if a specific object is in a QuerySet, returning True or False efficiently. The asynchronous contains() acontains() performs the same check without explicit iteration. This is optimal for membership testing in large datasets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_87\n\nLANGUAGE: Python\nCODE:\n```\nReturns ``True`` if the :class:`.QuerySet` contains ``obj``, and ``False`` if not.\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Django Model (Example for pre_init)\nDESCRIPTION: This snippet demonstrates the creation of an instance of a hypothetical Django `Question` model. It passes keyword arguments `question_text` and `pub_date` (using `timezone.now()`). This specific example is used in the documentation to illustrate the values of `sender`, `args`, and `kwargs` that would be sent to a `pre_init` signal handler upon this model's instantiation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nq = Question(question_text=\"What's new?\", pub_date=timezone.now())\n```\n\n----------------------------------------\n\nTITLE: Annotating Books with Custom Author Count Alias using annotate() (pycon)\nDESCRIPTION: Shows how to provide a custom alias (`num_authors`) for an annotation created with `annotate()`. Instead of the default `authors__count`, the calculated count of authors for each book can be accessed using `book_instance.num_authors`. Requires importing `Count` from `django.db.models`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> q = Book.objects.annotate(num_authors=Count(\"authors\"))\n>>> q[0].num_authors\n2\n>>> q[1].num_authors\n1\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Formsets in a Django View\nDESCRIPTION: Illustrates how to use multiple formsets in a single Django view by using prefixes to avoid name clashing. It shows the creation and processing of two different formsets.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import formset_factory\nfrom django.shortcuts import render\nfrom myapp.forms import ArticleForm, BookForm\n\ndef manage_articles(request):\n    ArticleFormSet = formset_factory(ArticleForm)\n    BookFormSet = formset_factory(BookForm)\n    if request.method == \"POST\":\n        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=\"articles\")\n        book_formset = BookFormSet(request.POST, request.FILES, prefix=\"books\")\n        if article_formset.is_valid() and book_formset.is_valid():\n            # do something with the cleaned_data on the formsets.\n            pass\n    else:\n        # Handle GET request\n```\n\n----------------------------------------\n\nTITLE: Using textContent Instead of innerHTML in JavaScript for XSS Prevention (Django Admin)\nDESCRIPTION: Details the fix for an XSS vulnerability in Django's admin add/change related popup. Unsafe usage of `Element.innerHTML` was replaced with `Element.textContent` to prevent arbitrary script execution by treating content as plain text. This change enhances security and was also applied to the debug view.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.14.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nElement.innerHTML\n```\n\nLANGUAGE: javascript\nCODE:\n```\nElement.textContent\n```\n\n----------------------------------------\n\nTITLE: Creating ModelFormSet Class with modelformset_factory (Django, Python)\nDESCRIPTION: The modelformset_factory function returns a FormSet class for a specified Django model, leveraging ModelForm logic. It accepts arguments to define the underlying form, model fields, widgets, field classes, and additional formset behaviors like extra forms, ordering, deletion, maximum and minimum forms, validation, and rendering options. Many arguments are passed through to modelform_factory and formset_factory, supporting flexible configuration. Inputs include model, form, fields, widgets, and advanced formset options; the output is a dynamically generated ModelFormSet class. Requires django.forms.models and django.forms.formsets components.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/models.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmodelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing Image URL in Django Template\nDESCRIPTION: Demonstrates how to access the URL of an uploaded image in a Django template using the 'url' attribute of an ImageField.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/usage.txt#2025-04-23_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{{ object.mug_shot.url }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Feed with Multiple Stylesheets\nDESCRIPTION: This snippet shows how to combine multiple stylesheets for a Django feed, using both simple URL strings and the Stylesheet class for more complex configurations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.utils.feedgenerator import Stylesheet\n\n\nclass MultiStylesheetFeed(Feed):\n    stylesheets = [\n        \"/stylesheet1.xsl\",\n        Stylesheet(\"/stylesheet2.xsl\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Escaping percent signs in translation strings in Python\nDESCRIPTION: Demonstrates how to handle percent signs in translation strings that are incorrectly detected as Python format strings by escaping them with a double percent sign.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext as _\n\noutput = _(\"10%% interest\")\n```\n\n----------------------------------------\n\nTITLE: Django Internal IPs List\nDESCRIPTION: Lists `INTERNAL_IPS`, a list of IP addresses as strings that are considered internal. They enable debug context variables, admin bookmarklets, and internal email marking.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\nINTERNAL_IPS\n----------------\n\nDefault: `[]` (Empty list)\n\nA list of IP addresses, as strings, that:\n\n* Allow the :func:`~django.template.context_processors.debug` context processor\nto add some variables to the template context.\n* Can use the :ref:`admindocs bookmarklets <admindocs-bookmarklets>` even if\nnot logged in as a staff user.\n* Are marked as \"internal\" (as opposed to \"EXTERNAL\") in\n:class:`~django.utils.log.AdminEmailHandler` emails.\n```\n\n----------------------------------------\n\nTITLE: Defining ModelForm with Explicit Fields in Django\nDESCRIPTION: This snippet demonstrates how to define a ModelForm that explicitly lists all fields to be used, addressing a security concern in Django 1.6. It uses the special value '__all__' to include all model fields.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nclass MyModelForm(ModelForm):\n    class Meta:\n        fields = \"__all__\"\n        model = MyModel\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Forms as HTML with Data Binding - Python\nDESCRIPTION: Demonstrates how a Django Form renders as HTML using its __str__ method, both in the unbound state (no data) and bound state (with initial values populated in HTML). Data passed to the form influences the rendered HTML attributes. Output is the HTML string for the form.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm()\\n>>> print(f)\\n<div><label for=\"id_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\"></div>\\n<div><label for=\"id_message\">Message:</label><input type=\"text\" name=\"message\" required id=\"id_message\"></div>\\n<div><label for=\"id_sender\">Sender:</label><input type=\"email\" name=\"sender\" required id=\"id_sender\"></div>\\n<div><label for=\"id_cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></div>\\n\\n>>> data = {\\n...     \"subject\": \"hello\",\\n...     \"message\": \"Hi there\",\\n...     \"sender\": \"foo@example.com\",\\n...     \"cc_myself\": True,\\n... }\\n>>> f = ContactForm(data)\\n>>> print(f)\\n<div><label for=\"id_subject\">Subject:</label><input type=\"text\" name=\"subject\" value=\"hello\" maxlength=\"100\" required id=\"id_subject\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Extent Aggregation in GeoDjango\nDESCRIPTION: Example of using the Extent aggregate function to get the bounding box (as a 4-tuple) of city polygons filtered by name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = City.objects.filter(name__in=(\"Houston\", \"Dallas\")).aggregate(Extent(\"poly\"))\n>>> print(qs[\"poly__extent\"])\n(-96.8016128540039, 29.7633724212646, -95.3631439208984, 32.782058715820)\n```\n\n----------------------------------------\n\nTITLE: Publisher Oldest Book Aggregation\nDESCRIPTION: Example of finding the oldest publication date across all books for each publisher.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nPublisher.objects.aggregate(oldest_pubdate=Min(\"book__pubdate\"))\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a Formset\nDESCRIPTION: Shows how to instantiate a formset and iterate through its forms, displaying the HTML for each form which includes properly named input fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> formset = ArticleFormSet()\n>>> for form in formset:\n...     print(form)\n...\n<div><label for=\"id_form-0-title\">Title:</label><input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\"></div>\n<div><label for=\"id_form-0-pub_date\">Pub date:</label><input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\"></div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Loop Length in Templates (Django Template Language)\nDESCRIPTION: Within a `{% for %}` loop in Django templates, the new `forloop.length` variable provides the total number of items in the sequence being iterated over.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_11\n\nLANGUAGE: django\nCODE:\n```\nforloop.length\n```\n\n----------------------------------------\n\nTITLE: Applying timesince Filter in Django Templates\nDESCRIPTION: The timesince filter formats a date as the time since that date. It can take an optional argument for the comparison point.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_90\n\nLANGUAGE: html+django\nCODE:\n```\n{{ blog_date|timesince:comment_date }}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Model with ForeignKey to Site in Django\nDESCRIPTION: This code snippet defines an Article model with a foreign key relationship to the Site model, allowing an article to be associated with a single site.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.models import Site\nfrom django.db import models\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=200)\n    # ...\n    site = models.ForeignKey(Site, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Example GeoJSON Output from Django Serializer\nDESCRIPTION: This snippet shows the expected GeoJSON output from the serialization of City objects. It includes a single feature with geometry and properties.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/serializers.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"id\": 1,\n            \"geometry\": {\"type\": \"Point\", \"coordinates\": [-87.650175, 41.850385]},\n            \"properties\": {\"name\": \"Chicago\"},\n        }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Substr Function in Django ORM\nDESCRIPTION: Example of extracting a substring from a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n>>> # Set the alias to the first 5 characters of the name as lowercase\n>>> from django.db.models.functions import Lower, Substr\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> Author.objects.update(alias=Lower(Substr(\"name\", 1, 5)))\n1\n>>> print(Author.objects.get(name=\"Margaret Smith\").alias)\nmarga\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Model with Identifier Field in Django\nDESCRIPTION: Example of customizing a user model by setting the USERNAME_FIELD to a custom identifier field. This shows how to specify a field other than username as the unique identifier.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass MyUser(AbstractBaseUser):\n    identifier = models.CharField(max_length=40, unique=True)\n    ...\n    USERNAME_FIELD = \"identifier\"\n```\n\n----------------------------------------\n\nTITLE: Defining a SmallIntegerField in Django Models\nDESCRIPTION: Defines a Django model field like `IntegerField`, but supporting a smaller range of values. Values from -32768 to 32767 are safe across all Django-supported databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n.. class:: SmallIntegerField(**options)\n```\n\n----------------------------------------\n\nTITLE: Changing User Password in Django\nDESCRIPTION: Example of using the Django changepassword command to change a user's password.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_25\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin changepassword ringo\n```\n\n----------------------------------------\n\nTITLE: Adding a Column and Updating Migration State Using RunSQL in Django (Python)\nDESCRIPTION: Illustrates usage of RunSQL with state_operations, where the SQL command alters the schema and state_operations updates Django's migration state via an AddField operation. Ensures schema and migration state stay synchronized. Dependencies: Django.db.models; Inputs: SQL alteration, corresponding state operations; Output: Adds a column in database and migration state.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmigrations.RunSQL(\n    \"ALTER TABLE musician ADD COLUMN name varchar(255) NOT NULL;\",\n    state_operations=[\n        migrations.AddField(\n            \"musician\",\n            \"name\",\n            models.CharField(max_length=255),\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorator to Disable Signal Handlers During Fixture Loading (Python)\nDESCRIPTION: Defines a reusable decorator ('disable_for_loaddata') to wrap Django signal handlers, automatically skipping execution when called with 'raw=True' during fixture deserialization. Dependencies: functools.wraps, Django signals, and any model signal handlers requiring this pattern. Key usage: apply '@disable_for_loaddata' above signal handler definitions. Inputs: arbitrary signal arguments; Output: signal handler deactivated during fixture loading, active otherwise.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\n\n\ndef disable_for_loaddata(signal_handler):\n    \"\"\"\n    Decorator that turns off signal handlers when loading fixture data.\n    \"\"\"\n\n    @wraps(signal_handler)\n    def wrapper(*args, **kwargs):\n        if kwargs[\"raw\"]:\n            return\n        signal_handler(*args, **kwargs)\n\n    return wrapper\n\n\n@disable_for_loaddata\ndef my_handler(**kwargs): ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Behavior for a Django Function View (Python)\nDESCRIPTION: This example shows how to apply the `@login_required` decorator to a function-based view (`book_dashboard`) while specifying a custom login URL (`/books/login/`) and a custom redirect field name (`redirect_to`). This overrides the default settings or the behavior of `LoginRequiredMiddleware` for this specific view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\nfrom django.views.generic import View\n\n\n@login_required(login_url=\"/books/login/\", redirect_field_name=\"redirect_to\")\ndef book_dashboard(request): ...\n```\n\n----------------------------------------\n\nTITLE: Applying a Query Logger Wrapper and Reviewing the Log in Django (Python)\nDESCRIPTION: This snippet demonstrates the instantiation and use of the QueryLogger class as a context-managed wrapper around arbitrary query-generating code (e.g., do_queries()). After exiting the context, the log entries are printed. This approach isolates query logging to critical code paths and avoids affecting unrelated parts of the application.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import connection\n\nql = QueryLogger()\nwith connection.execute_wrapper(ql):\n    do_queries()\n# Now we can print the log.\nprint(ql.queries)\n```\n\n----------------------------------------\n\nTITLE: Rendered Output Showing Inherited `autoescape off` in Django\nDESCRIPTION: Displays the final rendered HTML output resulting from the interaction between `base.html` (with `autoescape off`) and `child.html`. It shows that the `greeting` variable, assumed to contain `<b>Hello!</b>`, is rendered as raw HTML because the `autoescape off` setting was inherited from the base template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_21\n\nLANGUAGE: html+django\nCODE:\n```\n<h1>This &amp; that</h1>\n<b>Hello!</b>\n```\n\n----------------------------------------\n\nTITLE: Proper Spacing in Django Template Expressions\nDESCRIPTION: Shows proper spacing in Django template expressions with single spaces between tokens except around dots for attribute access and pipes for filters. This demonstrates correct template syntax formatting.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{% if user.name|lower == \"admin\" %}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Template Operation Prevention\nDESCRIPTION: Example showing how to prevent unsafe operations in templates using alters_data attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\nI will now delete this valuable data. {{ data.delete }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Admin Theme Colors\nDESCRIPTION: Example of adding custom theme colors to Django admin by overriding the base.html template and defining CSS variables for primary, secondary, and link colors.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_76\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends 'admin/base.html' %}\n\n{% block extrastyle %}{{ block.super }}\n<style>\nhtml[data-theme=\"light\"], :root {\n  --primary: #9774d5;\n  --secondary: #785cab;\n  --link-fg: #7c449b;\n  --link-selected-fg: #8f5bb2;\n}\n</style>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Testing Django User Authentication Properties\nDESCRIPTION: Code demonstrates testing User.is_authenticated and User.is_anonymous properties for set membership, which was fixed in ticket #27309.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nUser.is_authenticated\nUser.is_anonymous\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Documentation Format\nDESCRIPTION: Documentation formatting using reStructuredText markup for Django's contribution guidelines. Includes sections on submitting changes, claiming tickets, contribution style, and deprecation procedures.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n========================\nSubmitting contributions\n========================\n\nWe're always grateful for contributions to Django's code. Indeed, bug reports\nwith associated contributions will get fixed *far* more quickly than those\nwithout a solution.\n```\n\n----------------------------------------\n\nTITLE: Installing ReportLab with pip\nDESCRIPTION: Command to install the ReportLab PDF library using pip package manager.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-pdf.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install reportlab\n```\n\n----------------------------------------\n\nTITLE: Setting DJANGO_SETTINGS_MODULE in Windows Command Prompt\nDESCRIPTION: Example of setting the DJANGO_SETTINGS_MODULE environment variable and running django-admin in a Windows command prompt.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_3\n\nLANGUAGE: doscon\nCODE:\n```\nset DJANGO_SETTINGS_MODULE=mysite.settings\ndjango-admin runserver\n```\n\n----------------------------------------\n\nTITLE: Test Tag Inheritance in Django Tests\nDESCRIPTION: Demonstrates how tags are inherited in Django's test framework when subclassing test cases and defining methods with their own tags.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n@tag(\"foo\")\nclass SampleTestCaseChild(SampleTestCase):\n    @tag(\"bar\")\n    def test(self): ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Backend for Foobar in Python\nDESCRIPTION: A complete example of implementing a custom template backend for a fictional 'foobar' template system in Django. The implementation includes the required BaseEngine subclass, template handling methods, and template rendering functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-backend.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template import TemplateDoesNotExist, TemplateSyntaxError\nfrom django.template.backends.base import BaseEngine\nfrom django.template.backends.utils import csrf_input_lazy, csrf_token_lazy\n\nimport foobar\n\n\nclass FooBar(BaseEngine):\n    # Name of the subdirectory containing the templates for this engine\n    # inside an installed application.\n    app_dirname = \"foobar\"\n\n    def __init__(self, params):\n        params = params.copy()\n        options = params.pop(\"OPTIONS\").copy()\n        super().__init__(params)\n\n        self.engine = foobar.Engine(**options)\n\n    def from_string(self, template_code):\n        try:\n            return Template(self.engine.from_string(template_code))\n        except foobar.TemplateCompilationFailed as exc:\n            raise TemplateSyntaxError(exc.args)\n\n    def get_template(self, template_name):\n        try:\n            return Template(self.engine.get_template(template_name))\n        except foobar.TemplateNotFound as exc:\n            raise TemplateDoesNotExist(exc.args, backend=self)\n        except foobar.TemplateCompilationFailed as exc:\n            raise TemplateSyntaxError(exc.args)\n\n\nclass Template:\n    def __init__(self, template):\n        self.template = template\n\n    def render(self, context=None, request=None):\n        if context is None:\n            context = {}\n        if request is not None:\n            context[\"request\"] = request\n            context[\"csrf_input\"] = csrf_input_lazy(request)\n            context[\"csrf_token\"] = csrf_token_lazy(request)\n        return self.template.render(context)\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Django Models\nDESCRIPTION: This SQL code represents the database schema that Django would generate for the Question and Choice models. It shows the CREATE TABLE statements for both models, including field definitions and primary keys.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n--\n-- Create model Question\n--\nCREATE TABLE \"polls_question\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"question_text\" varchar(200) NOT NULL,\n    \"pub_date\" timestamp with time zone NOT NULL\n);\n--\n-- Create model Choice\n--\nCREATE TABLE \"polls_choice\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex Feed with Dynamic Content in Django\nDESCRIPTION: This example shows how to create a more complex feed that generates content dynamically based on URL parameters. It demonstrates the use of get_object() method and customizing feed attributes with methods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\n\n\nclass BeatFeed(Feed):\n    description_template = \"feeds/beat_description.html\"\n\n    def get_object(self, request, beat_id):\n        return Beat.objects.get(pk=beat_id)\n\n    def title(self, obj):\n        return \"Police beat central: Crimes for beat %s\" % obj.beat\n\n    def link(self, obj):\n        return obj.get_absolute_url()\n\n    def description(self, obj):\n        return \"Crimes recently reported in police beat %s\" % obj.beat\n\n    def items(self, obj):\n        return Crime.objects.filter(beat=obj).order_by(\"-crime_date\")[:30]\n```\n\n----------------------------------------\n\nTITLE: Valid date format example\nDESCRIPTION: Example of a legitimate date format string that should be used with the date template filter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.7.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"j/m/Y\"\n```\n\n----------------------------------------\n\nTITLE: Creating Django Model Instances with Range Data in Python\nDESCRIPTION: Demonstrates creating instances of the `Event` model using the Django ORM within a Python interactive console (`pycon`). It initializes two `Event` objects: 'Soft play' with an age range of 0 to 10 (exclusive upper bound) and 'Pub trip' with an age range starting from 21 (inclusive lower bound, unbounded upper). Requires `datetime`, `django.utils.timezone`, and the previously defined `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_17\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import datetime\n>>> from django.utils import timezone\n>>> now = timezone.now()\n>>> Event.objects.create(name=\"Soft play\", ages=(0, 10), start=now)\n>>> Event.objects.create(\n...     name=\"Pub trip\", ages=(21, None), start=now - datetime.timedelta(days=1)\n... )\n```\n\n----------------------------------------\n\nTITLE: Applying slugify Filter in Django Templates\nDESCRIPTION: The slugify filter converts a string to ASCII, converts spaces to hyphens, removes non-alphanumeric characters, and converts to lowercase.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_86\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|slugify }}\n```\n\n----------------------------------------\n\nTITLE: Bad Practice: Hardcoding URLs in Django Templates (HTML+Django)\nDESCRIPTION: Illustrates an undesirable way to generate URLs within Django templates by hardcoding the path structure and embedding the object's `id`. This approach is brittle and difficult to maintain if URL structures change.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_26\n\nLANGUAGE: html+django\nCODE:\n```\n<!-- BAD template code. Avoid! -->\n<a href=\"/people/{{ object.id }}/\">{{ object.name }}</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Django View for Polls Index\nDESCRIPTION: Creates a view function that retrieves the latest 5 questions and renders them using a template. Uses Django's render shortcut function to combine template with context data.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    context = {\"latest_question_list\": latest_question_list}\n    return render(request, \"polls/index.html\", context)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Result Fetching Function\nDESCRIPTION: Function to convert database cursor results into a list of dictionaries, where each dictionary maps column names to values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef dictfetchall(cursor):\n    \"\"\"\n    Return all rows from a cursor as a dict.\n    Assume the column names are unique.\n    \"\"\"\n    columns = [col[0] for col in cursor.description]\n    return [dict(zip(columns, row)) for row in cursor.fetchall()]\n```\n\n----------------------------------------\n\nTITLE: Defining a GeoDjango Model with a Projected PointField in Python\nDESCRIPTION: Defines a Django model named `SouthTexasCity` using `django.contrib.gis.db.models`. It includes a `CharField` for the city name and a `PointField` to store geographic coordinates using the projected SRID 32140 (suitable for South Texas), with units in meters. This model structure allows for storing and querying spatial data specific to that region.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis.db import models\n\n\nclass SouthTexasCity(models.Model):\n    name = models.CharField(max_length=30)\n    # A projected coordinate system (only valid for South Texas!)\n    # is used, units are in meters.\n    point = models.PointField(srid=32140)\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Model with Custom Ordering in Django\nDESCRIPTION: This example shows how to use a proxy model to define a different default ordering on a model. The OrderedPerson proxy will return results ordered by last_name while the original Person model remains unordered.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nclass OrderedPerson(Person):\n    class Meta:\n        ordering = [\"last_name\"]\n        proxy = True\n```\n\n----------------------------------------\n\nTITLE: Using SearchVectorField for Efficient Text Search\nDESCRIPTION: Shows how to use a SearchVectorField for faster text search operations by pre-computing and storing search vectors in the database. This avoids recalculating vectors during each query.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Entry.objects.update(search_vector=SearchVector(\"body_text\"))\n>>> Entry.objects.filter(search_vector=\"cheese\")\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]\n```\n\n----------------------------------------\n\nTITLE: Adding Deletion Capability to Django Formset\nDESCRIPTION: Demonstrates how to add deletion capability to a Django formset using can_delete=True. Shows the HTML output and how to process deleted forms.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> ArticleFormSet = formset_factory(ArticleForm, can_delete=True)\n>>> formset = ArticleFormSet(\n...     initial=[\n...         {\"title\": \"Article #1\", \"pub_date\": datetime.date(2008, 5, 10)},\n...         {\"title\": \"Article #2\", \"pub_date\": datetime.date(2008, 5, 11)},\n...     ]\n... )\n>>> for form in formset:\n...     print(form)\n...\n<div><label for=\"id_form-0-title\">Title:</label><input type=\"text\" name=\"form-0-title\" value=\"Article #1\" id=\"id_form-0-title\"></div>\n<div><label for=\"id_form-0-pub_date\">Pub date:</label><input type=\"text\" name=\"form-0-pub_date\" value=\"2008-05-10\" id=\"id_form-0-pub_date\"></div>\n<div><label for=\"id_form-0-DELETE\">Delete:</label><input type=\"checkbox\" name=\"form-0-DELETE\" id=\"id_form-0-DELETE\"></div>\n<div><label for=\"id_form-1-title\">Title:</label><input type=\"text\" name=\"form-1-title\" value=\"Article #2\" id=\"id_form-1-title\"></div>\n<div><label for=\"id_form-1-pub_date\">Pub date:</label><input type=\"text\" name=\"form-1-pub_date\" value=\"2008-05-11\" id=\"id_form-1-pub_date\"></div>\n<div><label for=\"id_form-1-DELETE\">Delete:</label><input type=\"checkbox\" name=\"form-1-DELETE\" id=\"id_form-1-DELETE\"></div>\n<div><label for=\"id_form-2-title\">Title:</label><input type=\"text\" name=\"form-2-title\" id=\"id_form-2-title\"></div>\n<div><label for=\"id_form-2-pub_date\">Pub date:</label><input type=\"text\" name=\"form-2-pub_date\" id=\"id_form-2-pub_date\"></div>\n<div><label for=\"id_form-2-DELETE\">Delete:</label><input type=\"checkbox\" name=\"form-2-DELETE\" id=\"id_form-2-DELETE\"></div>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> data = {\n...     \"form-TOTAL_FORMS\": \"3\",\n...     \"form-INITIAL_FORMS\": \"2\",\n...     \"form-0-title\": \"Article #1\",\n...     \"form-0-pub_date\": \"2008-05-10\",\n...     \"form-0-DELETE\": \"on\",\n...     \"form-1-title\": \"Article #2\",\n...     \"form-1-pub_date\": \"2008-05-11\",\n...     \"form-1-DELETE\": \"\",\n...     \"form-2-title\": \"\",\n...     \"form-2-pub_date\": \"\",\n...     \"form-2-DELETE\": \"\",\n... }\n\n>>> formset = ArticleFormSet(\n...     data,\n...     initial=[\n...         {\"title\": \"Article #1\", \"pub_date\": datetime.date(2008, 5, 10)},\n...         {\"title\": \"Article #2\", \"pub_date\": datetime.date(2008, 5, 11)},\n...     ],\n... )\n>>> [form.cleaned_data for form in formset.deleted_forms]\n[{'title': 'Article #1', 'pub_date': datetime.date(2008, 5, 10), 'DELETE': True}]\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding M2M Related Object in One Step (pycon)\nDESCRIPTION: Uses the `create()` method on the `ManyToManyField` manager (`a2.publications`) to create a new `Publication` instance and immediately associate it with the `Article` (`a2`) in a single operation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> new_publication = a2.publications.create(title=\"Highlights for Children\")\n```\n\n----------------------------------------\n\nTITLE: Using SchemaEditor Context Manager in Django (Python)\nDESCRIPTION: This snippet demonstrates how to obtain a backend-specific SchemaEditor instance using the connection.schema_editor() context manager in Django. It shows usage for running schema operations such as delete_model within a transactionally safe block. The approach ensures that resources are properly managed and that SQL operations are deferred or grouped as needed. The context manager pattern is a prerequisite for custom schema operations or backend extensions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/schema-editor.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nwith connection.schema_editor() as schema_editor:\\n    schema_editor.delete_model(MyModel)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Grouped Django Model Choices using a Dictionary\nDESCRIPTION: Demonstrates how to structure choices into named groups using a nested dictionary. The top-level keys are the group names, and the values are dictionaries representing the choices within that group. Ungrouped options can also be included at the top level.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMEDIA_CHOICES = {\n    \"Audio\": {\n        \"vinyl\": \"Vinyl\",\n        \"cd\": \"CD\",\n    },\n    \"Video\": {\n        \"vhs\": \"VHS Tape\",\n        \"dvd\": \"DVD\",\n    },\n    \"unknown\": \"Unknown\",\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Class-Based View in Django\nDESCRIPTION: This snippet demonstrates how to test a class-based view in Django outside of the request/response cycle. It shows how to instantiate the view, set it up with a request, and test its get_context_data method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import RequestFactory, TestCase\nfrom .views import HomeView\n\n\nclass HomePageTest(TestCase):\n    def test_environment_set_in_context(self):\n        request = RequestFactory().get(\"/\")\n        view = HomeView()\n        view.setup(request)\n\n        context = view.get_context_data()\n        self.assertIn(\"environment\", context)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Queryset in a Model Formset\nDESCRIPTION: Shows how to use a custom queryset when creating a model formset in a view. It filters Authors whose names start with 'O' and passes the queryset to the formset.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import modelformset_factory\nfrom django.shortcuts import render\nfrom myapp.models import Author\n\n\ndef manage_authors(request):\n    AuthorFormSet = modelformset_factory(Author, fields=[\"name\", \"title\"])\n    queryset = Author.objects.filter(name__startswith=\"O\")\n    if request.method == \"POST\":\n        formset = AuthorFormSet(\n            request.POST,\n            request.FILES,\n            queryset=queryset,\n        )\n        if formset.is_valid():\n            formset.save()\n            # Do something.\n    else:\n        formset = AuthorFormSet(queryset=queryset)\n    return render(request, \"manage_authors.html\", {\"formset\": formset})\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Date Range - Django ORM (Python)\nDESCRIPTION: Illustrates filtering Entry objects within an inclusive date range using the 'range' lookup in Django ORM. Requires an Entry model and the datetime module. Expected inputs are two date objects (start and end); output is a QuerySet containing records whose pub_date falls within the specified dates. Best used for date, number, or character fields; ensure consistent types to avoid unexpected results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nstart_date = datetime.date(2005, 1, 1)\nend_date = datetime.date(2005, 3, 31)\nEntry.objects.filter(pub_date__range=(start_date, end_date))\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting the SRID of a GEOSGeometry Point in Python\nDESCRIPTION: This snippet demonstrates how to interact with the `srid` property of a Django `GEOSGeometry` object. It first creates a `Point` object without an SRID, prints its default `srid` value (None), then assigns the WGS84 SRID (4326) to it, and finally confirms the assignment by printing the `srid` again. This requires the `Point` class from Django's GIS module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pnt = Point(5, 23)\n>>> print(pnt.srid)\nNone\n>>> pnt.srid = 4326\n>>> pnt.srid\n4326\n```\n\n----------------------------------------\n\nTITLE: Defining CreateView Class in Django\nDESCRIPTION: Displays a form for creating a new object, handles form submission, and saves the new object. Combines form and model handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CreateView():\n    # Attributes\n    content_type\n    context_object_name\n    extra_context\n    fields\n    form_class\n    http_method_names\n\n    # Methods not explicitly listed in the snippet\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Authentication Method in Release Notes\nDESCRIPTION: Code reference to the Django authentication method that had a regression causing crashes when authentication backends don't consistently handle request parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n``contrib.auth.authenticate()``\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern for a Class-Based View in Django\nDESCRIPTION: This snippet shows how to configure a URL pattern in Django's `urls.py` to point to a class-based view. It uses the `as_view()` class method on the view class (`MyView`). `as_view()` returns a callable view function that Django's URL resolver can use to handle requests matching the specified path.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom django.urls import path\nfrom myapp.views import MyView\n\nurlpatterns = [\n    path(\"about/\", MyView.as_view()),\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing Slicing of Subwidgets in `BoundField` in Django\nDESCRIPTION: Mentions a bugfix (:ticket:`26267`) in Django 1.8.10 that restored the expected behavior allowing slicing operations on subwidgets within a `BoundField` instance.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nBoundField\n```\n\n----------------------------------------\n\nTITLE: Django Branch Pattern\nDESCRIPTION: Pattern used for stable branch names in Django's version control system.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_4\n\nLANGUAGE: git\nCODE:\n```\nstable/A.B.x\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Contained by Geometry in Django\nDESCRIPTION: Illustrates using the contained spatial lookup to filter Zipcode objects whose polygon bounding box is completely contained by a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__contained=geom)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Remote Usernames in RemoteUserBackend (Python)\nDESCRIPTION: A method hook in `RemoteUserBackend` used to perform any necessary cleaning on the `username` obtained from the external source (e.g., stripping LDAP DN information) before using it to get or create a user object. It should return the cleaned username.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclean_username(username)\n```\n\n----------------------------------------\n\nTITLE: Defining a Sitemap for Static Views in Django\nDESCRIPTION: This Python snippet defines a custom `Sitemap` class named `StaticViewSitemap` in a `sitemaps.py` file. It's designed for generating sitemap entries for static views (views not tied to database models). The `items` method returns a list of URL names (strings) corresponding to these static views. The `location` method uses `django.urls.reverse` to generate the actual URL for each named item. Default `priority` and `changefreq` values are also set for all URLs generated by this sitemap.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# sitemaps.py\nfrom django.contrib import sitemaps\nfrom django.urls import reverse\n\n\nclass StaticViewSitemap(sitemaps.Sitemap):\n    priority = 0.5\n    changefreq = \"daily\"\n\n    def items(self):\n        return [\"main\", \"about\", \"license\"]\n\n    def location(self, item):\n        return reverse(item)\n```\n\n----------------------------------------\n\nTITLE: Using UserPassesTestMixin in Django Class-Based Views\nDESCRIPTION: Shows how to use the UserPassesTestMixin with class-based views to implement custom access checks. The test_func method must be overridden to provide the test logic.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.mixins import UserPassesTestMixin\n\nclass MyView(UserPassesTestMixin, View):\n    def test_func(self):\n        return self.request.user.email.endswith(\"@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Error Responses in Django\nDESCRIPTION: Example showing how to return HTTP error responses using HttpResponse subclasses. It demonstrates returning a 404 Not Found response conditionally.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import HttpResponse, HttpResponseNotFound\n\n\ndef my_view(request):\n    # ...\n    if foo:\n        return HttpResponseNotFound(\"<h1>Page not found</h1>\")\n    else:\n        return HttpResponse(\"<h1>Page was found</h1>\")\n```\n\n----------------------------------------\n\nTITLE: Defining YearArchiveView Class in Django\nDESCRIPTION: Class definition for YearArchiveView, a generic date-based view for displaying yearly archives. It includes various attributes and methods for customizing the view's behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass YearArchiveView():\n    # Attributes and methods listed in the documentation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Enabling Explicit TLS for SMTP Connection in Django\nDESCRIPTION: Specifies whether to use an explicit TLS (secure) connection (False by default) when communicating with the SMTP server, typically on port 587. Mutually exclusive with EMAIL_USE_SSL.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_USE_TLS = False\n```\n\n----------------------------------------\n\nTITLE: Using Radians Function in Django Models\nDESCRIPTION: Shows how to convert degrees to radians and register Radians as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Radians\n>>> Vector.objects.create(x=-90, y=180)\n>>> vector = Vector.objects.annotate(x_r=Radians(\"x\"), y_r=Radians(\"y\")).get()\n>>> vector.x_r, vector.y_r\n(-1.5707963267948966, 3.141592653589793)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Radians\n>>> FloatField.register_lookup(Radians)\n>>> # Get vectors whose radians are less than 1\n>>> vectors = Vector.objects.filter(x__radians__lt=1, y__radians__lt=1)\n```\n\n----------------------------------------\n\nTITLE: Applying WSGI Middleware in Django's wsgi.py File\nDESCRIPTION: This snippet demonstrates how to wrap Django's application object with WSGI middleware by importing a custom HelloWorld middleware application and applying it to the default Django application in the wsgi.py file.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom helloworld.wsgi import HelloWorldApplication\n\napplication = HelloWorldApplication(application)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by ISO Week Number - Django ORM (Python)\nDESCRIPTION: Performs Django ORM queries to match date/datetime fields for week numbers using the ISO-8601 standard ('__week'). Inputs are integers from 1 to 52 or 53; outputs are QuerySets for matching week numbers, with start and end range supported. No direct SQL equivalent; relies on backend-specific implementation. Handles timezone conversion if enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__week=52)\nEntry.objects.filter(pub_date__week__gte=32, pub_date__week__lte=38)\n```\n\n----------------------------------------\n\nTITLE: Moving Objects Between Databases in Django\nDESCRIPTION: Example showing the process of moving a Django model instance from one database to another using the save() method with the using parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\np = Person(name=\"Fred\")\np.save(using=\"first\")  # (statement 1)\np.save(using=\"second\")  # (statement 2)\n```\n\n----------------------------------------\n\nTITLE: Isolating Apps for Testing in Django\nDESCRIPTION: Demonstrates the use of the isolate_apps decorator to create isolated model registries for testing. This allows creation of temporary models that are cleanly deleted after tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.test import SimpleTestCase\nfrom django.test.utils import isolate_apps\n\n\nclass MyModelTests(SimpleTestCase):\n    @isolate_apps(\"app_label\")\n    def test_model_definition(self):\n        class TestModel(models.Model):\n            pass\n\n        ...\n```\n\nLANGUAGE: python\nCODE:\n```\nwith isolate_apps(\"app_label\"):\n\n    class TestModel(models.Model):\n        pass\n\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n@isolate_apps(\"app_label\", attr_name=\"apps\")\nclass TestModelDefinition(SimpleTestCase):\n    def test_model_definition(self):\n        class TestModel(models.Model):\n            pass\n\n        self.assertIs(self.apps.get_model(\"app_label\", \"TestModel\"), TestModel)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass TestModelDefinition(SimpleTestCase):\n    @isolate_apps(\"app_label\", kwarg_name=\"apps\")\n    def test_model_definition(self, apps):\n        class TestModel(models.Model):\n            pass\n\n        self.assertIs(apps.get_model(\"app_label\", \"TestModel\"), TestModel)\n```\n\n----------------------------------------\n\nTITLE: Loading Templates from Subdirectories\nDESCRIPTION: Example of loading a template from a subdirectory using get_template().\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nget_template(\"news/story_detail.html\")\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Receiver Function in Django\nDESCRIPTION: Example of a basic signal receiver function that handles HTTP request completion notifications.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef my_callback(sender, **kwargs):\n    print(\"Request finished!\")\n```\n\n----------------------------------------\n\nTITLE: Using get_or_create with exact lookups in Django\nDESCRIPTION: Demonstrates how to use 'defaults__exact' for exact lookups with the get_or_create() method in Django when dealing with a field named 'defaults'. This is important to avoid conflicts when using the 'defaults' parameter for specifying default values during object creation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nFoo.objects.get_or_create(defaults__exact=\"bar\", defaults={\"defaults\": \"baz\"})\n```\n\n----------------------------------------\n\nTITLE: Constructing Path to Django Built-in Form Templates in Python\nDESCRIPTION: This Python snippet demonstrates how to dynamically determine the filesystem path to Django's built-in form templates (standard or Jinja2). This is useful when configuring the `DIRS` option in the `TEMPLATES` setting, especially when using the `TemplatesSetting` renderer without relying on `APP_DIRS=True`. It requires the `django` package.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/renderers.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport django\n\ndjango.__path__[0] + \"/forms/templates\"  # or '/forms/jinja2'\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models with ManyToManyField\nDESCRIPTION: This snippet defines two Django models, `Topping` and `Pizza`, using the `django.db.models` API. The `Pizza` model includes a `ManyToManyField` named `toppings` that establishes a many-to-many relationship with the `Topping` model. This model setup serves as the context for explaining the `m2m_changed` signal.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Topping(models.Model):\n    # ...\n    pass\n\n\nclass Pizza(models.Model):\n    # ...\n    toppings = models.ManyToManyField(Topping)\n```\n\n----------------------------------------\n\nTITLE: Basic Console Logging Configuration in Django\nDESCRIPTION: A basic logging configuration that outputs all warning-level and higher messages to the console. This setup configures the root logger with a console handler.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n        },\n    },\n    \"root\": {\n        \"handlers\": [\"console\"],\n        \"level\": \"WARNING\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Django's TimestampSigner for Time-Limited Signatures\nDESCRIPTION: Illustrates the use of TimestampSigner, a subclass of Signer that includes a timestamp in the signature, allowing for time-limited signature validation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import timedelta\n>>> from django.core.signing import TimestampSigner\n>>> signer = TimestampSigner()\n>>> value = signer.sign(\"hello\")\n>>> value\n'hello:1stLqR:_rvr4oXCgT4HyfwjXaU39QvTnuNuUthFRCzNOy4Hqt0'\n>>> signer.unsign(value)\n'hello'\n>>> signer.unsign(value, max_age=10)\nSignatureExpired: Signature age 15.5289158821 > 10 seconds\n>>> signer.unsign(value, max_age=20)\n'hello'\n>>> signer.unsign(value, max_age=timedelta(seconds=20))\n'hello'\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model Choices using a Dictionary (Mapping)\nDESCRIPTION: Demonstrates defining field choices using a Python dictionary where keys are the database values and values are the human-readable names. This structure is passed to the `choices` argument of a model field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nYEAR_IN_SCHOOL_CHOICES = {\n    \"FR\": \"Freshman\",\n    \"SO\": \"Sophomore\",\n    \"JR\": \"Junior\",\n    \"SR\": \"Senior\",\n    \"GR\": \"Graduate\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Message with Django Messages Framework (Python)\nDESCRIPTION: This snippet demonstrates the current, recommended way to add user messages using the `django.contrib.messages` framework introduced before Django 1.2 but made standard then. It uses the `add_message` function, requiring the request object, message level, and message text.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import messages\n\nmessages.add_message(request, messages.INFO, \"a message\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Initial QuerySet and Using Multiple Managers in Python\nDESCRIPTION: Shows how to modify the base QuerySet returned by a manager by overriding the 'get_queryset()' method. A custom 'DahlBookManager' is created to return only books authored by 'Roald Dahl'. The 'Book' model is then equipped with both the default manager ('objects') and the custom, filtered manager ('dahl_objects'), allowing queries like 'Book.objects.all()' and 'Book.dahl_objects.all()'.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# First, define the Manager subclass.\nclass DahlBookManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().filter(author=\"Roald Dahl\")\n\n\n# Then hook it into the Book model explicitly.\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.CharField(max_length=50)\n\n    objects = models.Manager()  # The default manager.\n    dahl_objects = DahlBookManager()  # The Dahl-specific manager.\n```\n\n----------------------------------------\n\nTITLE: Creating ContentFile Objects in Python with Django\nDESCRIPTION: Demonstrates how to create ContentFile objects with string and byte content using Django's core.files.base module. ContentFile inherits from File but operates on string content rather than actual files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/file.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.base import ContentFile\n\nf1 = ContentFile(\"esta frase está en español\")\nf2 = ContentFile(b\"these are bytes\")\n```\n\n----------------------------------------\n\nTITLE: Custom Form Class in Django ModelAdmin\nDESCRIPTION: Example of customizing form class based on user permissions by overriding get_form method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_form(self, request, obj=None, **kwargs):\n        if request.user.is_superuser:\n            kwargs[\"form\"] = MySuperuserForm\n        return super().get_form(request, obj, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: keys Lookup with ArrayField Overlap (Python)\nDESCRIPTION: Demonstrates using the 'keys' transform in conjunction with an ArrayField lookup like 'overlap', retrieving objects where the array of dict keys has at least one element in common with a provided list (uses SQL akeys() and array overlap). Supported in Django HStoreField on PostgreSQL. Input: list of keys to overlap-match; output: QuerySet of matching objects. Limitation: key order is unreliable and suited mainly for array operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"toy\": \"bone\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n\\n>>> Dog.objects.filter(data__keys__overlap=[\"breed\", \"toy\"])\\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Validation in Django\nDESCRIPTION: Demonstrates how to create a custom cache backend with custom key validation logic by subclassing a built-in backend and overriding the validate_key method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.cache.backends.locmem import LocMemCache\n\n\nclass CustomLocMemCache(LocMemCache):\n    def validate_key(self, key):\n        \"\"\"Custom validation, raising exceptions or warnings as needed.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using Model Fields in ModelAdmin list_display\nDESCRIPTION: Example of using model field names in the list_display attribute to display those fields in the admin change list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"first_name\", \"last_name\"]\n```\n\n----------------------------------------\n\nTITLE: Django Default Language Code Setting\nDESCRIPTION: Specifies `LANGUAGE_CODE`, the default language for the Django project, typically in locale format such as 'en-us'. Defaults to `'en-us'`, serving as the fallback language and influencing translation behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\nLANGUAGE_CODE\n-----------------\n\nDefault: `'en-us'`\n\nA string representing the language code for this installation. This should be in\nstandard :term:`language ID format <language code>`. For example, U.S. English\nis `'en-us'`. See also the `list of language identifiers`_ and\n:doc:`/topics/i18n/index`.\n\nIt serves three purposes:\n\n* If the locale middleware isn't in use, it decides which translation is served\nto all users.\n* If the locale middleware is active, it provides a fallback language in case the\nuser's preferred language can't be determined or is not supported by the\nwebsite. It also provides the fallback translation when a translation for a\ngiven literal doesn't exist for the user's preferred language.\n* If localization is explicitly disabled via the :tfilter:`unlocalize` filter\nor the :ttag:`{% localize off %}<localize>` tag, it provides fallback\nlocalization formats which will be applied instead. See\n:ref:`controlling localization in templates <topic-l10n-templates>` for\ndetails.\n\nSee :ref:`how-django-discovers-language-preference` for more details.\n\n_`list of language identifiers`: http://www.i18nguy.com/unicode/language-identifiers.html\n```\n\n----------------------------------------\n\nTITLE: Running Django with Uvicorn\nDESCRIPTION: Command to start a Django application using Uvicorn ASGI server. The server will listen on 127.0.0.1:8000 and requires the project to be in the Python path.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m uvicorn myproject.asgi:application\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Tag Renderer in Python\nDESCRIPTION: This class defines the Node subclass for the 'current_time' custom tag. It includes the __init__ method to store the format string and the render method to generate the output.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom django import template\n\n\nclass CurrentTimeNode(template.Node):\n    def __init__(self, format_string):\n        self.format_string = format_string\n\n    def render(self, context):\n        return datetime.datetime.now().strftime(self.format_string)\n```\n\n----------------------------------------\n\nTITLE: Using Savepoints in Django Transaction\nDESCRIPTION: Demonstrates the use of savepoints within an atomic transaction block to perform partial rollbacks. Shows how to create, commit, and rollback to savepoints while handling database operations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import transaction\n\n# open a transaction\n@transaction.atomic\ndef viewfunc(request):\n    a.save()\n    # transaction now contains a.save()\n\n    sid = transaction.savepoint()\n\n    b.save()\n    # transaction now contains a.save() and b.save()\n\n    if want_to_keep_b:\n        transaction.savepoint_commit(sid)\n        # open transaction still contains a.save() and b.save()\n    else:\n        transaction.savepoint_rollback(sid)\n        # open transaction now contains only a.save()\n```\n\n----------------------------------------\n\nTITLE: Attaching Files in Django EmailMessage\nDESCRIPTION: Example showing how to attach a file to an EmailMessage using the attach_file method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmessage.attach_file(\"/images/weather_map.png\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Form as HTML Paragraphs\nDESCRIPTION: Shows the output of the as_p() method, which renders form fields as a series of <p> tags.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_23\n\nLANGUAGE: HTML\nCODE:\n```\n<p><label for=\"id_subject\">Subject:</label> <input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></p>\n<p><label for=\"id_message\">Message:</label> <input type=\"text\" name=\"message\" id=\"id_message\" required></p>\n<p><label for=\"id_sender\">Sender:</label> <input type=\"email\" name=\"sender\" id=\"id_sender\" required></p>\n<p><label for=\"id_cc_myself\">Cc myself:</label> <input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></p>\n```\n\n----------------------------------------\n\nTITLE: Custom Languages Configuration in Django Settings\nDESCRIPTION: Example of restricting available languages using the LANGUAGES setting with translation-aware language names\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nLANGUAGES = [\n    (\"de\", _(\"German\")),\n    (\"en\", _(\"English\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Serving Django in a subdirectory with mod_wsgi daemon mode\nDESCRIPTION: Configuration for serving a Django application in a subdirectory (e.g., /mysite) when using mod_wsgi daemon mode, by specifying the process group in the WSGIScriptAlias directive.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\nWSGIScriptAlias /mysite /path/to/mysite.com/mysite/wsgi.py process-group=example.com\n```\n\n----------------------------------------\n\nTITLE: Django Admin Fieldset Configuration\nDESCRIPTION: Demonstrates how to organize form fields into fieldsets for better organization in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"]}),\n    ]\n\n\nadmin.site.register(Question, QuestionAdmin)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Reverse Managers in Django Models\nDESCRIPTION: Demonstrates how to use a custom reverse manager for related objects in Django models. Shows syntax for specifying a different manager and calling custom methods.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Entry(models.Model):\n    # ...\n    objects = models.Manager()  # Default Manager\n    entries = EntryManager()  # Custom Manager\n\n\nb = Blog.objects.get(id=1)\nb.entry_set(manager=\"entries\").all()\n\nb.entry_set(manager=\"entries\").is_published()\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request Scheme in Django\nDESCRIPTION: Demonstrates how to access the HTTP request scheme in Django, which was affected by the security fix. The fix ensures correct detection of HTTPS when using a reverse-proxy.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.http.HttpRequest.scheme\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Backend in Django (Python)\nDESCRIPTION: This Python snippet configures the Django `CACHES` setting to use Redis as the cache backend. It specifies the `RedisCache` backend and the location of the Redis server using a URL format (redis://127.0.0.1:6379). Requires the `redis-py` library.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit FieldListFilter in Django Admin\nDESCRIPTION: Shows how to use an explicit FieldListFilter class for a specific field in the list_filter configuration of a Django ModelAdmin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_filter = [\n        (\"is_staff\", admin.BooleanFieldListFilter),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Image Field Validation and Inspection in Django Forms - Python\nDESCRIPTION: This Python interactive shell session demonstrates how to validate a Django form with an uploaded image, access the image field from the form's cleaned_data, and inspect its properties such as width, height, format, and raw data. This snippet relies on Django's forms system, the Pillow (PIL) library for image processing, and assumes a form with an ImageField ('img') has already been populated and validated. It illustrates typical behaviors (including errors) when accessing closed image file fields and direct PIL image loading.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> form.is_valid()\nTrue\n>>> image_field = form.cleaned_data[\"img\"]\n>>> image_field.image\n<PIL.PngImagePlugin.PngImageFile image mode=RGBA size=191x287 at 0x7F5985045C18>\n>>> image_field.image.width\n191\n>>> image_field.image.height\n287\n>>> image_field.image.format\n'PNG'\n>>> image_field.image.getdata()\n# Raises AttributeError: 'NoneType' object has no attribute 'seek'.\n>>> image = Image.open(image_field)\n>>> image.getdata()\n<ImagingCore object at 0x7f5984f874b0>\n```\n\n----------------------------------------\n\nTITLE: Disallowed F-string Patterns in Django\nDESCRIPTION: Shows improper f-string usage in Django code with function calls and complex expressions inside the braces. These patterns should be avoided according to Django coding standards.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Disallowed\nf\"hello {get_user()}\"\nf\"you are {user.age * 365.25} days old\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostGIS Version in Django Settings\nDESCRIPTION: Example of manually setting the PostGIS version to avoid automatic version detection query during initialization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOSTGIS_VERSION = (X, Y, Z)\n```\n\n----------------------------------------\n\nTITLE: Managing GDALRaster Metadata\nDESCRIPTION: Demonstrates how to set, update and remove metadata for a GDALRaster object. Shows metadata dictionary manipulation including setting values to None to remove items.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.metadata\n{}\n>>> rst.metadata = {\"DEFAULT\": {\"OWNER\": \"Django\", \"VERSION\": \"1.0\"}}\n>>> rst.metadata\n{'DEFAULT': {'OWNER': 'Django', 'VERSION': '1.0'}}\n>>> rst.metadata = {\"DEFAULT\": {\"OWNER\": None, \"VERSION\": \"2.0\"}}\n>>> rst.metadata\n{'DEFAULT': {'VERSION': '2.0'}}\n```\n\n----------------------------------------\n\nTITLE: Admin Empty Field List Filter\nDESCRIPTION: Fixed crash in admin EmptyFieldListFilter when used with GenericRelation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.admin.EmptyFieldListFilter\n```\n\n----------------------------------------\n\nTITLE: Simplified ModelAdmin Registration\nDESCRIPTION: Demonstrates how to register a model with the admin site without defining a custom ModelAdmin class when default interface is sufficient.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom myapp.models import Author\n\nadmin.site.register(Author)\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiWidget with a Dictionary in Python REPL\nDESCRIPTION: Shows how to initialize `MultiWidget` with a dictionary to assign custom suffixes (or no suffix using an empty string key) to the `name` attribute of subwidgets. The `render` method output reflects these custom suffixes ('name' and 'name_last').\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> widget = MultiWidget(widgets={\"\": TextInput, \"last\": TextInput})\n>>> widget.render(\"name\", [\"john\", \"paul\"])\n'<input type=\"text\" name=\"name\" value=\"john\"><input type=\"text\" name=\"name_last\" value=\"paul\">'\n```\n\n----------------------------------------\n\nTITLE: Defining an ImageField in Django Models\nDESCRIPTION: Defines a Django model field for image uploads, inheriting from `FileField` but adding image validation. Optionally populates `height_field` and `width_field` model fields with image dimensions upon saving. Requires the Pillow library. Stored as a `varchar` column (default max length 100, configurable via `max_length`). Uses `ClearableFileInput` as the default form widget.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n.. class:: ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options)\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Literal Percent Signs\nDESCRIPTION: Examples showing how to handle literal percent signs in SQL queries, both with and without parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncursor.execute(\"SELECT foo FROM bar WHERE baz = '30%'\")\ncursor.execute(\"SELECT foo FROM bar WHERE baz = '30%%' AND id = %s\", [self.id])\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Form Field Value in Template\nDESCRIPTION: Shows how to access and display the value of a form field in a Django template.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{{ field.value }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Z Coordinates of a LineString Geometry in Python\nDESCRIPTION: Demonstrates getting a list of Z coordinates from a 3D LineString `OGRGeometry` ('LINESTRING (1 2 3,4 5 6)') via the `.z` attribute. It returns a list of Z values or `None` if the LineString is 2D.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_23\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"LINESTRING (1 2 3,4 5 6)\").z\n[3.0, 6.0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache mod_wsgi for GeoDjango Deployment\nDESCRIPTION: Example configuration for Apache's mod_wsgi to ensure thread safety when deploying GeoDjango applications. It recommends setting the 'threads' attribute to 1 and increasing the number of processes instead.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/deployment.txt#2025-04-23_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nWSGIDaemonProcess threads=1\n```\n\n----------------------------------------\n\nTITLE: Feed Enclosure Configuration in Django\nDESCRIPTION: Methods and attributes for configuring feed enclosures, including URLs, lengths, and MIME types.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nitem_enclosures = []  # Hard-coded enclosure list\n\nitem_enclosure_url = \"/foo/bar.mp3\"  # Hard-coded enclosure link.\n\nitem_enclosure_length = 32000  # Hard-coded enclosure length.\n\ndef item_enclosures(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns a list of\n    django.utils.feedgenerator.Enclosure objects.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using `resolve` to Prevent 404 Errors Before Redirecting in Django (Python)\nDESCRIPTION: Demonstrates a practical use case for `django.urls.resolve` within a Django view. Before performing an `HttpResponseRedirect` based on the HTTP referer, the code resolves the target URL's path using `resolve`. It then attempts to call the resolved view function (`view`) with the extracted arguments and the current request object. If this call raises an `Http404` exception, it safely redirects to the root ('/') instead, preventing a potential redirect to a non-existent page. Requires `urllib.parse.urlsplit`, `django.urls.resolve`, `django.http.Http404`, and `django.http.HttpResponseRedirect`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.parse import urlsplit\nfrom django.urls import resolve\nfrom django.http import Http404, HttpResponseRedirect\n\n\ndef myview(request):\n    next = request.META.get(\"HTTP_REFERER\", None) or \"/\"\n    response = HttpResponseRedirect(next)\n\n    # modify the request and response as required, e.g. change locale\n    # and set corresponding locale cookie\n\n    view, args, kwargs = resolve(urlsplit(next).path)\n    kwargs[\"request\"] = request\n    try:\n        view(*args, **kwargs)\n    except Http404:\n        return HttpResponseRedirect(\"/\")\n    return response\n```\n\n----------------------------------------\n\nTITLE: Determining Bound and Unbound State of Django Forms in Python\nDESCRIPTION: Shows how to check if a Django form instance is bound or unbound by accessing its 'is_bound' attribute. Assumes Django form class and instance exist; takes no parameters beyond the form instance and returns a Boolean indicating binding state. Highlights that passing an empty dictionary results in a bound form.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm()\n>>> f.is_bound\nFalse\n>>> f = ContactForm({\"subject\": \"hello\"})\n>>> f.is_bound\nTrue\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm({})\n>>> f.is_bound\nTrue\n```\n\n----------------------------------------\n\nTITLE: Overriding BoundField Class at Project Level in Django\nDESCRIPTION: This snippet shows how to override the BoundField class at the project level by defining a custom FORM_RENDERER setting. It includes code for both the renderer and the settings file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n# mysite/renderers.py\nfrom django.forms.renderers import DjangoTemplates\n\nfrom .forms import CustomBoundField\n\n\nclass CustomRenderer(DjangoTemplates):\n    bound_field_class = CustomBoundField\n```\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nFORM_RENDERER = \"mysite.renderers.CustomRenderer\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Login URL for login_required in Django\nDESCRIPTION: Demonstrates how to specify a custom login URL for the login_required decorator. This overrides the default LOGIN_URL setting.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required\n\n@login_required(login_url=\"/accounts/login/\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Annotating with Type Casting Using ExpressionWrapper - Django ORM - Python\nDESCRIPTION: This snippet shows how to wrap a Django F expression computation in an ExpressionWrapper to enforce a specific output_field (here, DateTimeField). This approach is necessary when combining fields of different types (such as a datetime and a timedelta), or if the resulting field requires explicit typing. Requires importing DateTimeField, ExpressionWrapper, and F from django.db.models, and is intended for use when annotating querysets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import DateTimeField, ExpressionWrapper, F\n\nTicket.objects.annotate(\n    expires=ExpressionWrapper(\n        F(\"active_at\") + F(\"duration\"), output_field=DateTimeField()\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for method_decorator with Variable Assignment\nDESCRIPTION: Another approach to applying method_decorator to login_required in Django 1.2, using a variable to store the decorated method.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.decorators import method_decorator\n\nlogin_required_m = method_decorator(login_required)\n\n\nclass MyClass(object):\n    @login_required_m\n    def my_view(self, request):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Sending Site-Specific Email in Django View\nDESCRIPTION: This code snippet demonstrates how to send a site-specific email in a Django view function, using the current site's name and domain.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.shortcuts import get_current_site\nfrom django.core.mail import send_mail\n\n\ndef register_for_newsletter(request):\n    # Check form values, etc., and subscribe the user.\n    # ...\n\n    current_site = get_current_site(request)\n    send_mail(\n        \"Thanks for subscribing to %s alerts\" % current_site.name,\n        \"Thanks for your subscription. We appreciate it.\\n\\n-The %s team.\"\n        % (current_site.name,),\n        \"editor@%s\" % current_site.domain,\n        [user.email],\n    )\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Book Objects with Django ORM (pycon)\nDESCRIPTION: Demonstrates how to retrieve all objects for the `Book` model using `Book.objects.all()`. This forms a basic `QuerySet` representing all books, which can subsequently be used as a base for aggregation operations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Book.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Customizing Choice Fields in Django ModelAdmin\nDESCRIPTION: This method demonstrates how to override the default formfield for choice fields in the admin interface, providing different choices based on user permissions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_choice_field(self, db_field, request, **kwargs):\n        if db_field.name == \"status\":\n            kwargs[\"choices\"] = [\n                (\"accepted\", \"Accepted\"),\n                (\"denied\", \"Denied\"),\n            ]\n            if request.user.is_superuser:\n                kwargs[\"choices\"].append((\"ready\", \"Ready for deployment\"))\n        return super().formfield_for_choice_field(db_field, request, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Assigning Composite Tuple to pk and Accessing Related Fields - Pycon\nDESCRIPTION: Illustrates manual assignment of a composite primary key tuple to a model instance (OrderLineItem), and how this assignment reflects on the instance and its fields. Demonstrates that assigning a tuple to pk automatically sets values in the constituent fields. Assumes models are set up for composite primary keys; executed within the Django shell.\nInputs: tuple for pk; outputs: tuple pk and corresponding field values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> item = OrderLineItem(pk=(2, \"B142C\"))\n>>> item.pk\n(2, \"B142C\")\n>>> item.product_id\n2\n>>> item.order_id\n\"B142C\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Django Test Runner for Reusable Applications\nDESCRIPTION: This code shows how to set up a custom test runner script (runtests.py) for running tests in a reusable Django application, including setting up the Django environment and running the tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport os\nimport sys\n\nimport django\nfrom django.conf import settings\nfrom django.test.utils import get_runner\n\nif __name__ == \"__main__\":\n    os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"tests.test_settings\"\n    django.setup()\n    TestRunner = get_runner(settings)\n    test_runner = TestRunner()\n    failures = test_runner.run_tests([\"tests\"])\n    sys.exit(bool(failures))\n```\n\n----------------------------------------\n\nTITLE: Defining a Deferrable UniqueConstraint in Python\nDESCRIPTION: Demonstrates how to make a `UniqueConstraint` deferrable, meaning its enforcement is postponed until the end of the database transaction. It uses the `deferrable` parameter with `Deferrable.DEFERRED`. Note that support depends on the database backend.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import Deferrable, UniqueConstraint\n\nUniqueConstraint(\n    name=\"unique_order\",\n    fields=[\"order\"],\n    deferrable=Deferrable.DEFERRED,\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Relationships with DE-9IM in Django ORM\nDESCRIPTION: Example of using the 'relate' lookup with DE-9IM intersection pattern to define specific geometric relationships in PostGIS, MariaDB, and SpatiaLite.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__relate=(geom, \"T*T***FF*\"))\n```\n\n----------------------------------------\n\nTITLE: Annotating Multiple Window Functions for Group Statistics - Django ORM - Python\nDESCRIPTION: Shows how to annotate a QuerySet with multiple window functions (average, max, and min ratings) using a shared partition and ordering specification abstracted into a Python dictionary. Requires Django and a 'Movie' model with appropriate fields. This approach avoids repetition and adds 'avg_rating', 'best', and 'worst' fields to each movie object, reflecting statistics relative to each movie's peer group.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Avg, F, Max, Min, Window\n>>> window = {\n...     \"partition_by\": [F(\"studio\"), F(\"genre\")],\n...     \"order_by\": \"released__year\",\n... }\n>>> Movie.objects.annotate(\n...     avg_rating=Window(\n...         expression=Avg(\"rating\"),\n...         **window,\n...     ),\n...     best=Window(\n...         expression=Max(\"rating\"),\n...         **window,\n...     ),\n...     worst=Window(\n...         expression=Min(\"rating\"),\n...         **window,\n...     ),\n... )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Language Info in Django Template\nDESCRIPTION: Shows how to retrieve and display information about a specific language using the get_language_info tag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n{% get_language_info for LANGUAGE_CODE as lang %}\n{% get_language_info for \"pl\" as lang %}\n\nLanguage code: {{ lang.code }}<br>\nName of language: {{ lang.name_local }}<br>\nName in English: {{ lang.name }}<br>\nBi-directional: {{ lang.bidi }}\nName in the active language: {{ lang.name_translated }}\n```\n\n----------------------------------------\n\nTITLE: Manually Escaping HTML in Django Template String Literals\nDESCRIPTION: Demonstrates the correct way to include characters that have special meaning in HTML (like '<') within a string literal filter argument in Django templates. Since literals aren't auto-escaped, manual escaping (e.g., using `&lt;`) is required if the literal itself should represent escaped HTML.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_23\n\nLANGUAGE: html+django\nCODE:\n```\n{{ data|default:\"3 &lt; 2\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Model with Status Choices in Python\nDESCRIPTION: This snippet defines an Article model with a title, body, and status field. The status field uses predefined choices for draft, published, and withdrawn states.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nSTATUS_CHOICES = {\n    \"d\": \"Draft\",\n    \"p\": \"Published\",\n    \"w\": \"Withdrawn\",\n}\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    status = models.CharField(max_length=1, choices=STATUS_CHOICES)\n\n    def __str__(self):\n        return self.title\n```\n\n----------------------------------------\n\nTITLE: Using Mod Function in Django Models\nDESCRIPTION: Shows how to use the Mod function to calculate the remainder between two vector coordinates\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Mod\n>>> Vector.objects.create(x=5.4, y=2.3)\n>>> vector = Vector.objects.annotate(mod=Mod(\"x\", \"y\")).get()\n>>> vector.mod\n0.8\n```\n\n----------------------------------------\n\nTITLE: Granting Superuser Privileges to Existing User\nDESCRIPTION: SQL command to grant superuser privileges to an existing PostgreSQL user.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_4\n\nLANGUAGE: psql\nCODE:\n```\npostgres# ALTER ROLE <user_name> SUPERUSER;\n```\n\n----------------------------------------\n\nTITLE: Destroying Test Database in Django\nDESCRIPTION: The destroy_test_db function destroys the test database and restores the original database name. If keepdb is True, it only closes the connection without destroying the database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndestroy_test_db(old_database_name, verbosity=1, keepdb=False)\n```\n\n----------------------------------------\n\nTITLE: Using naturaltime Filter in Django Template\nDESCRIPTION: Demonstrates the naturaltime filter, which converts datetime values to human-readable time differences.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_5\n\nLANGUAGE: django\nCODE:\n```\n{{ datetime|naturaltime }} becomes now.\n{{ datetime|naturaltime }} becomes 29 seconds ago.\n{{ datetime|naturaltime }} becomes a minute ago.\n{{ datetime|naturaltime }} becomes 4 minutes ago.\n{{ datetime|naturaltime }} becomes 59 minutes ago.\n{{ datetime|naturaltime }} becomes an hour ago.\n{{ datetime|naturaltime }} becomes 2 hours ago.\n{{ datetime|naturaltime }} becomes 1 day, 2 hours ago.\n{{ datetime|naturaltime }} becomes 30 seconds from now.\n{{ datetime|naturaltime }} becomes a minute from now.\n{{ datetime|naturaltime }} becomes 4 minutes from now.\n{{ datetime|naturaltime }} becomes an hour from now.\n{{ datetime|naturaltime }} becomes 2 hours from now.\n{{ datetime|naturaltime }} becomes 1 day from now.\n{{ datetime|naturaltime }} becomes 1 week, 2 days from now.\n```\n\n----------------------------------------\n\nTITLE: Using database cursors as context managers in Django 1.7+\nDESCRIPTION: This snippet demonstrates how to use a database cursor as a context manager within Django 1.7+, enhancing resource management by automatically handling cursor closing. It replaces the traditional try-finally pattern for cleaner code. No external dependencies beyond Django are required.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nwith connection.cursor() as c:\n    c.execute(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Storage in Django Settings\nDESCRIPTION: Example of setting a custom message storage backend in Django settings.py\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMESSAGE_STORAGE = \"django.contrib.messages.storage.cookie.CookieStorage\"\n```\n\n----------------------------------------\n\nTITLE: Extending Meta Options in Django Model Inheritance\nDESCRIPTION: Demonstrates how to extend the Meta options of an abstract base class in a child class, allowing for customization of metadata while inheriting from the parent.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass CommonInfo(models.Model):\n    # ...\n    class Meta:\n        abstract = True\n        ordering = [\"name\"]\n\n\nclass Student(CommonInfo):\n    # ...\n    class Meta(CommonInfo.Meta):\n        db_table = \"student_info\"\n```\n\n----------------------------------------\n\nTITLE: Querying for BCrypt Passwords in Django User Model - Django ORM - Python\nDESCRIPTION: This code snippet demonstrates how to query the Django User model for users whose passwords are encrypted using the legacy BCryptPasswordHasher. It requires Django's authentication system and the database to be set up. The variable 'User' is set to the active user model, and a query is performed to filter users with passwords starting with 'bcrypt$$'. The result is a queryset containing all such users, allowing further processing or migration. The approach is specific to data migration and audit tasks, and depends on the authentication backend configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\nUser.objects.filter(password__startswith=\"bcrypt$$\")\n```\n\n----------------------------------------\n\nTITLE: Checking for Session Keys in Django Views\nDESCRIPTION: Example of checking if a key exists in the session dictionary using the __contains__ method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n'fav_color' in request.session\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Cleaning a Django EmailField\nDESCRIPTION: Demonstrates how to directly instantiate a Django `EmailField` and use its `clean()` method. The method validates the input value, returning the cleaned value if valid or raising a `ValidationError` if invalid. This example shows both a valid email and an invalid string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> f = forms.EmailField()\n>>> f.clean(\"foo@example.com\")\n'foo@example.com'\n>>> f.clean(\"invalid email address\")\nTraceback (most recent call last):\n...\nValidationError: ['Enter a valid email address.']\n```\n\n----------------------------------------\n\nTITLE: Documentation Content Structure in reStructuredText\nDESCRIPTION: Main structural elements of the contribution guide documentation including section headers and admonitions, written in reStructuredText markup language.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/new-contributors.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n===========================\nAdvice for new contributors\n===========================\n\n.. admonition:: Get up and running!\n\n    If you are new to contributing to Django, the :doc:`/intro/contributing`\n    tutorial will give you an introduction to the tools and the workflow.\n```\n\n----------------------------------------\n\nTITLE: Querying Database with Specific Alias in Django\nDESCRIPTION: This snippet demonstrates the use of the `using()` method in Django's QuerySet API. It allows specifying the database alias against which a query should be executed, enabling interaction with multiple databases configured in the project.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_58\n\nLANGUAGE: pycon\nCODE:\n```\n# queries the database with the 'default' alias.\n>>> Entry.objects.all()\n\n# queries the database with the 'backup' alias\n>>> Entry.objects.using(\"backup\")\n```\n\n----------------------------------------\n\nTITLE: Django Template Filter Usage with Length Comparison\nDESCRIPTION: Examples showing the recommended way to check length in Django templates using the length filter with comparison operators instead of the deprecated length_is filter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% if value|length == 4 %}…{% endif %}\n{% if value|length == 4 %}True{% else %}False{% endif %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% if value|length_is:4 %}…{% endif %}\n{{ value|length_is:4 }}\n```\n\n----------------------------------------\n\nTITLE: Showing Error Messages to Unauthenticated Users in Django\nDESCRIPTION: This code demonstrates how to display an error message to unauthenticated users trying to access a protected view, rather than redirecting them to a login page.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\n\ndef my_view(request):\n    if not request.user.is_authenticated:\n        # Code incomplete in the original document\n```\n\n----------------------------------------\n\nTITLE: Legacy Primary Key Field Introspection in Single-Field Models - Pycon\nDESCRIPTION: Demonstrates the legacy approach to retrieving the primary key field in models with a single-field primary key by inspecting the 'primary_key' attribute. Provided for comparison with newer composite key approaches; relies on looping through a model's fields in _meta.get_fields() and checking the primary_key attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pk_field = None\n>>> for field in Product._meta.get_fields():\n...     if field.primary_key:\n...         pk_field = field\n...         break\n...\n>>> pk_field\n<django.db.models.fields.AutoField: id>\n```\n\n----------------------------------------\n\nTITLE: Querying with Trigram Word Similarity in Django\nDESCRIPTION: Shows how to use the trigram_word_similar lookup in Django for trigram word similarity searches on Sentence objects. This lookup requires the 'django.contrib.postgres' app and the pg_trgm PostgreSQL extension.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/lookups.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Sentence.objects.filter(name__trigram_word_similar=\"Middlesborough\")\n['<Sentence: Gumby rides on the path of Middlesbrough>']\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Host for Email in Django\nDESCRIPTION: Defines the hostname or IP address ('localhost' by default) of the SMTP server used for sending emails.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_HOST = 'localhost'\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Containment in Django ORM\nDESCRIPTION: Example of using the 'within' lookup to find geometries that are spatially within a given geometry across different spatial database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__within=geom)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HttpRequest.get_signed_cookie Usage in Django (Python)\nDESCRIPTION: Presents interactive shell examples of using get_signed_cookie() for various scenarios: retrieving, missing, wrong salt, and expired cookies. Requires that signed cookies are previously set using Django's signing mechanism. Inputs: cookie key, salt, max_age, and default; outputs: cookie value or exceptions/return values for error cases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> request.get_signed_cookie(\"name\")\n'Tony'\n>>> request.get_signed_cookie(\"name\", salt=\"name-salt\")\n'Tony' # assuming cookie was set using the same salt\n>>> request.get_signed_cookie(\"nonexistent-cookie\")\nKeyError: 'nonexistent-cookie'\n>>> request.get_signed_cookie(\"nonexistent-cookie\", False)\nFalse\n>>> request.get_signed_cookie(\"cookie-that-was-tampered-with\")\nBadSignature: ...\n>>> request.get_signed_cookie(\"name\", max_age=60)\nSignatureExpired: Signature age 1677.3839159 > 60 seconds\n>>> request.get_signed_cookie(\"name\", False, max_age=60)\nFalse\n\n```\n\n----------------------------------------\n\nTITLE: Combining Media Objects Example\nDESCRIPTION: Demonstrates how to combine two widget Media objects and their resulting output\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class CalendarWidget(forms.TextInput):\n...     class Media:\n...         css = {\n...             \"all\": [\"pretty.css\"],\n...         }\n...         js = [\"animations.js\", \"actions.js\"]\n...\n\n>>> class OtherWidget(forms.TextInput):\n...     class Media:\n...         js = [\"whizbang.js\"]\n...\n\n>>> w1 = CalendarWidget()\n>>> w2 = OtherWidget()\n>>> print(w1.media + w2.media)\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://static.example.com/actions.js\"></script>\n<script src=\"https://static.example.com/whizbang.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using LPad Function in Django ORM\nDESCRIPTION: Demonstrates using the LPad function to pad a string field with a specified character from the left side\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> Author.objects.update(name=LPad(\"name\", 8, Value(\"abc\")))\n1\n>>> print(Author.objects.get(alias=\"j\").name)\nabcaJohn\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Exact Match 'iexact' and Usage Notes\nDESCRIPTION: Describes 'iexact' for case-insensitive exact matching, with examples demonstrating its use and corresponding SQL 'ILIKE' syntax. Highlights SQLite's limitations with non-ASCII case insensitivity and mentions related caveats.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_95\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. fieldlookup:: iexact\n\n``iexact``\n~~~~~~~~~~\n\nCase-insensitive exact match. If the value provided for comparison is ``None``,\nit will be interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more\ndetails).\n\nExample::\n\n    Blog.objects.get(name__iexact=\"beatles blog\")\n    Blog.objects.get(name__iexact=None)\n\nSQL equivalents:\n\n.. code-block:: sql\n\n    SELECT ... WHERE name ILIKE 'beatles blog';\n    SELECT ... WHERE name IS NULL;\n\nNote the first query will match ``'Beatles Blog'``, ``'beatles blog'``,\n``'BeAtLes BLoG'``, etc.\n\n.. admonition:: SQLite users\n\n    When using the SQLite backend and non-ASCII strings, bear in mind the\n    :ref:`database note <sqlite-string-matching>` about string comparisons.\n    SQLite does not do case-insensitive matching for non-ASCII strings.\n```\n\n----------------------------------------\n\nTITLE: Dynamic Publisher ListView Implementation\nDESCRIPTION: ListView with custom get_queryset and get_context_data methods for dynamic publisher filtering\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_object_or_404\nfrom django.views.generic import ListView\nfrom books.models import Book, Publisher\n\n\nclass PublisherBookListView(ListView):\n    template_name = \"books/books_by_publisher.html\"\n\n    def get_queryset(self):\n        self.publisher = get_object_or_404(Publisher, name=self.kwargs[\"publisher\"])\n        return Book.objects.filter(publisher=self.publisher)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"publisher\"] = self.publisher\n        return context\n```\n\n----------------------------------------\n\nTITLE: Using Async Streaming Generator in a Django View\nDESCRIPTION: Defines an asynchronous Django view function `my_streaming_view` that takes a request object. It returns a `StreamingHttpResponse`, initializing it with the result of calling the `streaming_response` asynchronous generator function. This demonstrates how to connect the disconnect-handling generator to an actual HTTP response.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nasync def my_streaming_view(request):\n    return StreamingHttpResponse(streaming_response())\n```\n\n----------------------------------------\n\nTITLE: Creating HStore Extension in Django Migration\nDESCRIPTION: Demonstrates how to create an HStore extension in a PostgreSQL database using a Django migration file. This operation should be performed before any CreateModel or AddField operations involving HStoreField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/operations.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.operations import HStoreExtension\n\n\nclass Migration(migrations.Migration):\n    ...\n\n    operations = [HStoreExtension(), ...]\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Voting in Django Template\nDESCRIPTION: This snippet shows how to create an HTML form in a Django template to allow users to vote on poll choices. It includes radio buttons for each choice and uses CSRF protection.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"{% url 'polls:vote' question.id %}\" method=\"post\">\n{% csrf_token %}\n<fieldset>\n    <legend><h1>{{ question.question_text }}</h1></legend>\n    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n    {% for choice in question.choice_set.all %}\n        <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\">\n        <label for=\"choice{{ forloop.counter }}\">{{ choice.choice_text }}</label><br>\n    {% endfor %}\n</fieldset>\n<input type=\"submit\" value=\"Vote\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Direct Serializer Usage\nDESCRIPTION: Example of using a serializer object directly with file output support.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nXMLSerializer = serializers.get_serializer(\"xml\")\nxml_serializer = XMLSerializer()\nxml_serializer.serialize(queryset)\ndata = xml_serializer.getvalue()\n```\n\n----------------------------------------\n\nTITLE: Defining GeoDjango Documentation Table of Contents\nDESCRIPTION: Table of contents directive that structures the documentation hierarchy with a maximum depth of 2 levels, listing all major GeoDjango documentation sections.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    tutorial\n    install/index\n    model-api\n    db-api\n    forms-api\n    geoquerysets\n    functions\n    measure\n    geos\n    gdal\n    geoip2\n    utils\n    commands\n    admin\n    feeds\n    sitemaps\n    testing\n    deployment\n```\n\n----------------------------------------\n\nTITLE: Using ArrayAgg Aggregate in Django QuerySet\nDESCRIPTION: Demonstrates how to use the ArrayAgg aggregate function in a Django QuerySet to concatenate field values into an array. The example shows aggregating 'somefield' into an array named 'arr'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> SomeModel.objects.aggregate(arr=ArrayAgg(\"somefield\"))\n{'arr': [0, 1, 2]}\n```\n\n----------------------------------------\n\nTITLE: Author Detail View URL Configuration\nDESCRIPTION: URL pattern setup for the custom author detail view\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom books.views import AuthorDetailView\n\nurlpatterns = [\n    path(\"authors/<int:pk>/\", AuthorDetailView.as_view(), name=\"author-detail\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for migration crash on altering primary key type\nDESCRIPTION: This snippet references a Django ticket number for a duplicate operation regression that caused a migration crash when altering a primary key type for a concrete parent model referenced by a foreign key in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33462`\n```\n\n----------------------------------------\n\nTITLE: Deprecating Old {% cycle %} Tag Syntax in Django Templates\nDESCRIPTION: The old comma-separated syntax for the {% cycle %} template tag is deprecated in Django 1.9. This syntax caused parsing issues with the current syntax and will be removed in Django 1.10.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% cycle row1,row2,row3 %}\n```\n\n----------------------------------------\n\nTITLE: Model-Specific Signal Handler in Django\nDESCRIPTION: Example of connecting a signal handler to receive notifications only from a specific model class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom myapp.models import MyModel\n\n\n@receiver(pre_save, sender=MyModel)\ndef my_handler(sender, **kwargs): ...\n```\n\n----------------------------------------\n\nTITLE: Handling Auto-incrementing Primary Keys in PostgreSQL\nDESCRIPTION: Example demonstrating the issue with manually specifying values for auto-incrementing primary keys in PostgreSQL, which can cause sequence conflicts.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.auth.models import User\n>>> User.objects.create(username=\"alice\", pk=1)\n<User: alice>\n>>> # The sequence hasn't been updated; its next value is 1.\n>>> User.objects.create(username=\"bob\")\nIntegrityError: duplicate key value violates unique constraint\n\"auth_user_pkey\" DETAIL:  Key (id)=(1) already exists.\n```\n\n----------------------------------------\n\nTITLE: Configuring GenericSitemap in Django URLs\nDESCRIPTION: This Python code snippet demonstrates how to configure a sitemap using `GenericSitemap` within a Django `urls.py` file. It defines an `info_dict` specifying the queryset (`Entry.objects.all()`) and the date field (`pub_date`) to use for generating sitemap items and their last modification dates. A URL pattern for `sitemap.xml` is created, using the `sitemap` view and passing a dictionary containing the configured `GenericSitemap` instance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sitemaps import GenericSitemap\nfrom django.contrib.sitemaps.views import sitemap\nfrom django.urls import path\nfrom blog.models import Entry\n\ninfo_dict = {\n    \"queryset\": Entry.objects.all(),\n    \"date_field\": \"pub_date\",\n}\n\nurlpatterns = [\n    # some generic view using info_dict\n    # ...\n    # the sitemap\n    path(\n        \"sitemap.xml\",\n        sitemap,\n        {\"sitemaps\": {\"blog\": GenericSitemap(info_dict, priority=0.6)}},\n        name=\"django.contrib.sitemaps.views.sitemap\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Release Notes for Django Feature in reStructuredText\nDESCRIPTION: This snippet updates the release notes for Django 2.2 to include information about the new 'make_toast()' function in the shortcuts module.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:mod:`django.shortcuts`\n~~~~~~~~~~~~~~~~~~~~~~~\n\n* The new :func:`django.shortcuts.make_toast` function returns ``'toast'``.\n```\n\n----------------------------------------\n\nTITLE: Configuring ABSOLUTE_URL_OVERRIDES\nDESCRIPTION: This snippet demonstrates how to configure the ABSOLUTE_URL_OVERRIDES setting. This setting allows users to override the get_absolute_url() methods on a per-installation basis, mapping model names to functions that return URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nABSOLUTE_URL_OVERRIDES = {\n    \"blogs.blog\": lambda o: \"/blogs/%s/\" % o.slug,\n    \"news.story\": lambda o: \"/stories/%s/%s/\" % (o.pub_year, o.slug),\n}\n```\n\n----------------------------------------\n\nTITLE: Potential Vulnerability in django.utils.html.strip_tags (Python)\nDESCRIPTION: The strip_tags() function was vulnerable to a denial-of-service attack with certain inputs containing nested incomplete HTML entities. This affected the striptags template filter. The function has been modified to avoid recursive calls to HTMLParser.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.html.strip_tags\n```\n\n----------------------------------------\n\nTITLE: Installing SpatiaLite on macOS using Homebrew\nDESCRIPTION: This shell script uses Homebrew to install SpatiaLite and its dependencies on macOS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ brew update\n$ brew install spatialite-tools\n$ brew install gdal\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Deprecation Checks in Django\nDESCRIPTION: Shows how to add system check attributes to a custom model field for deprecation and removal. This helps manage the deprecation lifecycle of custom fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass IPAddressField(Field):\n    system_check_deprecated_details = {\n        \"msg\": (\n            \"IPAddressField has been deprecated. Support for it (except \"\n            \"in historical migrations) will be removed in Django 1.9.\"\n        ),\n        \"hint\": \"Use GenericIPAddressField instead.\",  # optional\n        \"id\": \"fields.W900\",  # pick a unique ID for your field.\n    }\n\nclass IPAddressField(Field):\n    system_check_removed_details = {\n        \"msg\": (\n            \"IPAddressField has been removed except for support in \"\n            \"historical migrations.\"\n        ),\n        \"hint\": \"Use GenericIPAddressField instead.\",\n        \"id\": \"fields.E900\",  # pick a unique ID for your field.\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Union Aggregation in GeoDjango\nDESCRIPTION: Examples of using the Union aggregate function to create a geometric union of all Zipcode polygons, including a more efficient approach with spatial filtering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> u = Zipcode.objects.aggregate(Union(poly))  # This may take a long time.\n>>> u = Zipcode.objects.filter(poly__within=bbox).aggregate(\n...     Union(poly)\n... )  # A more sensible approach.\n```\n\n----------------------------------------\n\nTITLE: Using BoolAnd Aggregate with Django Models\nDESCRIPTION: Illustrates the usage of BoolAnd aggregate function with Django models. The example uses a Comment model and demonstrates aggregating boolean fields and conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Q\n>>> from django.contrib.postgres.aggregates import BoolAnd\n>>> Comment.objects.aggregate(booland=BoolAnd(\"published\"))\n{'booland': False}\n>>> Comment.objects.aggregate(booland=BoolAnd(Q(rank__lt=100)))\n{'booland': True}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Exception Reporter in Django View\nDESCRIPTION: Shows how to set a custom exception reporter for a specific view, allowing granular control over which reporter to use within any given view.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef my_view(request):\n    if request.user.is_authenticated:\n        request.exception_reporter_class = CustomExceptionReporter()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Mixin for JSON Responses in Django Form Views\nDESCRIPTION: Defines a `JsonableResponseMixin` intended to be used with Django's object-based form views (like `CreateView`). It overrides `form_invalid` and `form_valid`. If the request accepts `text/html`, it returns the default response. Otherwise, it returns a `JsonResponse`: `form.errors` with status 400 for invalid forms, and a dictionary containing the object's primary key (`pk`) for valid forms. It calls `super().form_valid(form)` to ensure the default processing (like saving the object) still occurs.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import JsonResponse\nfrom django.views.generic.edit import CreateView\nfrom myapp.models import Author\n\n\nclass JsonableResponseMixin:\n    \"\"\"\n    Mixin to add JSON support to a form.\n    Must be used with an object-based FormView (e.g. CreateView)\n    \"\"\"\n\n    def form_invalid(self, form):\n        response = super().form_invalid(form)\n        if self.request.accepts(\"text/html\"):\n            return response\n        else:\n            return JsonResponse(form.errors, status=400)\n\n    def form_valid(self, form):\n        # We make sure to call the parent's form_valid() method because\n        # it might do some processing (in the case of CreateView, it will\n        # call form.save() for example).\n        response = super().form_valid(form)\n        if self.request.accepts(\"text/html\"):\n            return response\n        else:\n            data = {\n                \"pk\": self.object.pk,\n            }\n            return JsonResponse(data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Formset from a Form Class\nDESCRIPTION: Demonstrates how to create a formset factory from an existing form class using Django's formset_factory function, which allows for creating multiple instances of the same form.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms import formset_factory\n>>> ArticleFormSet = formset_factory(ArticleForm)\n```\n\n----------------------------------------\n\nTITLE: Using Model.refresh_from_db with select_for_update in Django (Python)\nDESCRIPTION: Illustrates calling `refresh_from_db` with the `from_queryset` argument set to `MyModel.objects.select_for_update()`. This acquires a row-level lock on the corresponding database record before reloading the model's values, which persists until the end of the current transaction.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nobj.refresh_from_db(from_queryset=MyModel.objects.select_for_update())\n```\n\n----------------------------------------\n\nTITLE: Creating ContactForm in Django\nDESCRIPTION: Example of creating a ContactForm class in Django with name and message fields, and a send_email method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ContactForm(forms.Form):\n    name = forms.CharField()\n    message = forms.CharField(widget=forms.Textarea)\n\n    def send_email(self):\n        # send email using the self.cleaned_data dictionary\n        pass\n```\n\n----------------------------------------\n\nTITLE: If/Elif Equivalent of the Firstof Tag (Django)\nDESCRIPTION: Provides the equivalent logic of the `{% firstof var1 var2 var3 %}` tag using standard `{% if %}` and `{% elif %}` tags. This clarifies the behavior of `firstof` by showing its conditional structure.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_16\n\nLANGUAGE: html+django\nCODE:\n```\n{% if var1 %}\n    {{ var1 }}\n{% elif var2 %}\n    {{ var2 }}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelChoiceField with Default and Custom to_field_name in Django\nDESCRIPTION: Examples showing how to configure ModelChoiceField with a default to_field_name (using primary key) and with a custom field name for option values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# No custom to_field_name\nfield1 = forms.ModelChoiceField(queryset=...)\n```\n\n----------------------------------------\n\nTITLE: Initializing Django EmailMessage\nDESCRIPTION: Example of creating an EmailMessage instance with various parameters including subject, body, sender, recipients, BCC, reply-to headers, and custom headers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import EmailMessage\n\nemail = EmailMessage(\n    \"Hello\",\n    \"Body goes here\",\n    \"from@example.com\",\n    [\"to1@example.com\", \"to2@example.com\"],\n    [\"bcc@example.com\"],\n    reply_to=[\"another@example.com\"],\n    headers={\"Message-ID\": \"foo\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Django Cache Operations\nDESCRIPTION: Shows basic cache operations including setting, getting, and checking for existence of cache keys.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_31\n\nLANGUAGE: pycon\nCODE:\n```\n>>> cache.set(\"my_key\", \"hello, world!\", 30)\n\n>>> cache.get(\"my_key\")\n'hello, world!'\n\n>>> # Wait 30 seconds for 'my_key' to expire...\n>>> cache.get(\"my_key\")\nNone\n\n>>> sentinel = object()\n>>> cache.get(\"my_key\", sentinel) is sentinel\nFalse\n>>> # Wait 30 seconds for 'my_key' to expire...\n>>> cache.get(\"my_key\", sentinel) is sentinel\nTrue\n\n>>> cache.get(\"my_key\", \"has expired\")\n'has expired'\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Routers in Django Settings\nDESCRIPTION: Example of configuring the DATABASE_ROUTERS setting in Django to use the AuthRouter and PrimaryReplicaRouter classes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_ROUTERS = [\"path.to.AuthRouter\", \"path.to.PrimaryReplicaRouter\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Actions in Django ModelAdmin\nDESCRIPTION: Examples showing different ways to disable actions in Django admin, including global action disabling and model-specific configurations\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Globally disable delete selected\nadmin.site.disable_action(\"delete_selected\")\n\n# This ModelAdmin will not have delete_selected available\nclass SomeModelAdmin(admin.ModelAdmin):\n    actions = [\"some_other_action\"]\n    ...\n\n# This one will\nclass AnotherModelAdmin(admin.ModelAdmin):\n    actions = [\"delete_selected\", \"a_third_action\"]\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Django INSTALLED_APPS Setting\nDESCRIPTION: This code snippet shows how to add the polls app to the INSTALLED_APPS setting in the Django project's settings.py file. This is necessary to include the app in the project.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    \"polls.apps.PollsConfig\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\n```\n\n----------------------------------------\n\nTITLE: Processing Form Data in a Django View\nDESCRIPTION: Illustrates how to handle form data in a Django view. This view processes both GET and POST requests, validates form data, and redirects after successful submission.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\n\nfrom .forms import NameForm\n\n\ndef get_name(request):\n    # if this is a POST request we need to process the form data\n    if request.method == \"POST\":\n        # create a form instance and populate it with data from the request:\n        form = NameForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required\n            # ...\n            # redirect to a new URL:\n            return HttpResponseRedirect(\"/thanks/\")\n\n    # if a GET (or any other method) we'll create a blank form\n    else:\n        form = NameForm()\n\n    return render(request, \"name.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Creating an SP-GiST Index in Django with PostgreSQL\nDESCRIPTION: Creates an SP-GiST (Space-Partitioned Generalized Search Tree) index with an option for fill factor. Useful for non-balanced data structures like quadtrees or k-d trees.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nSpGistIndex(*expressions, fillfactor=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Using ModelChoiceField for Form Field Choices in Django (Recommended)\nDESCRIPTION: This snippet shows the recommended approach to handle form field choices that depend on database queries. It uses ModelChoiceField, which defers the database query until it's actually needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass LocationForm(forms.Form):\n    country = forms.ModelChoiceField(queryset=Country.objects.all())\n```\n\n----------------------------------------\n\nTITLE: Running Django Makemigrations Command\nDESCRIPTION: Example showing how to create new database migrations using Django's makemigrations command. The command scans model changes and generates migration files.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py makemigrations\nMigrations for 'books':\n  books/migrations/0003_auto.py:\n    ~ Alter field author on book\n```\n\n----------------------------------------\n\nTITLE: Defining a CharField in Django models\nDESCRIPTION: Example of defining a CharField with max_length and db_collation options. The max_length is required for most databases except PostgreSQL and SQLite. db_collation allows specifying a custom database collation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nCharField(max_length=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Returning TemplateResponse Directly from Django View (Python)\nDESCRIPTION: This code snippet shows a Django view function (`blog_index`) that directly returns a `TemplateResponse` object. It imports `TemplateResponse` and initializes it with the request object, the template name \"entry_list.html\", and a context dictionary containing all `Entry` objects (assuming `Entry` is a defined Django model). This serves as a concise way to render a template with context, acting as an alternative to `django.shortcuts.render()`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template.response import TemplateResponse\n\n\ndef blog_index(request):\n    return TemplateResponse(\n        request, \"entry_list.html\", {\"entries\": Entry.objects.all()}\n    )\n```\n\n----------------------------------------\n\nTITLE: Specifying Order in Aggregates (Python)\nDESCRIPTION: The `django.db.models.Aggregate` class now accepts an `order_by` keyword argument. This allows developers to specify the ordering of elements within the set being aggregated, influencing the result of certain aggregate functions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAggregate(order_by=...)\n```\n\n----------------------------------------\n\nTITLE: Modifying Middleware Settings in Django Tests\nDESCRIPTION: Demonstrates how to modify middleware settings in tests using the modify_settings context manager to append, prepend, or remove middleware classes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase\n\n\nclass MiddlewareTestCase(TestCase):\n    def test_cache_middleware(self):\n        with self.modify_settings(\n            MIDDLEWARE={\n                \"append\": \"django.middleware.cache.FetchFromCacheMiddleware\",\n                \"prepend\": \"django.middleware.cache.UpdateCacheMiddleware\",\n                \"remove\": [\n                    \"django.contrib.sessions.middleware.SessionMiddleware\",\n                    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n                    \"django.contrib.messages.middleware.MessageMiddleware\",\n                ],\n            }\n        ):\n            response = self.client.get(\"/\")\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Django Cache Name Method Removal\nDESCRIPTION: Removal of cache name retrieval method from FieldCacheMixin class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nget_cache_name()\n```\n\n----------------------------------------\n\nTITLE: Running Django JavaScript Tests with HTTP Server\nDESCRIPTION: Command to start a simple HTTP server for running Django JavaScript tests with code coverage in a browser. This is necessary when measuring code coverage for the tests.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Limiting Editable Objects in Model Formset in Python\nDESCRIPTION: Shows how to limit the number of editable objects in a model formset using max_num and extra parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_27\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Author.objects.order_by(\"name\")\n<QuerySet [<Author: Charles Baudelaire>, <Author: Paul Verlaine>, <Author: Walt Whitman>]>\n\n>>> AuthorFormSet = modelformset_factory(Author, fields=[\"name\"], max_num=1)\n>>> formset = AuthorFormSet(queryset=Author.objects.order_by(\"name\"))\n>>> [x.name for x in formset.get_queryset()]\n['Charles Baudelaire', 'Paul Verlaine', 'Walt Whitman']\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> AuthorFormSet = modelformset_factory(Author, fields=[\"name\"], max_num=4, extra=2)\n>>> formset = AuthorFormSet(queryset=Author.objects.order_by(\"name\"))\n>>> for form in formset:\n...     print(form)\n...\n<div><label for=\"id_form-0-name\">Name:</label><input id=\"id_form-0-name\" type=\"text\" name=\"form-0-name\" value=\"Charles Baudelaire\" maxlength=\"100\"><input type=\"hidden\" name=\"form-0-id\" value=\"1\" id=\"id_form-0-id\"></div>\n```\n\n----------------------------------------\n\nTITLE: ModelAdmin with Date Hierarchy Configuration\nDESCRIPTION: Example of configuring a ModelAdmin class with the date_hierarchy option for date-based navigation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    date_hierarchy = \"pub_date\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Polls App URLs\nDESCRIPTION: URL configuration for the polls application defining the routing.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Width Attribute in Python\nDESCRIPTION: Shows how to retrieve the width (in pixels) of a GDALRaster object by accessing its `width` attribute. A GDALRaster is initialized in-memory with specified width, height, and SRID for the example.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_35\n\nLANGUAGE: pycon\nCODE:\n```\n>>> GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326}).width\n10\n```\n\n----------------------------------------\n\nTITLE: Defining Item Model in Django\nDESCRIPTION: This snippet defines a simple Django model called Item with two fields: name (CharField) and data (IntegerField). It's used as an example for demonstrating aggregation and ordering interactions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Item(models.Model):\n    name = models.CharField(max_length=10)\n    data = models.IntegerField()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Superuser with Email Authentication\nDESCRIPTION: Example of create_superuser method implementation for a custom user model using email as the username field with additional required fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef create_superuser(self, email, date_of_birth, password=None):\n    # create superuser here\n    ...\n```\n\n----------------------------------------\n\nTITLE: Post-Release Git Push Commands\nDESCRIPTION: Commands to push the release commits and tags to the remote repository.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit push\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Django Language Fallback Behavior with English Variants\nDESCRIPTION: Explains how Django handles missing English strings when an English variant is activated. Instead of using the project's LANGUAGE_CODE setting as fallback, Django will use the original source strings. This creates different behavior for English users compared to users of other languages.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_66\n\nLANGUAGE: markdown\nCODE:\n```\n* When an English variant is activated and English strings are missing, the\n  fallback language will not be the :setting:`LANGUAGE_CODE` of the project,\n  but the original strings. For example, an English user visiting a site with\n  :setting:`LANGUAGE_CODE` set to Spanish and original strings written in\n  Russian will see Russian text rather than Spanish.\n```\n\n----------------------------------------\n\nTITLE: Deprecation of Field.related Attribute in Django Models - reStructuredText\nDESCRIPTION: Explains the deprecation of the private Field.related attribute in favor of Field.rel, an instance of ForeignObjectRel, in the Django ORM. The related module and legacy attributes are removed in Django 1.10, and developers should transition their code accordingly.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_11\n\nLANGUAGE: reStructuredText\nCODE:\n```\nModel ``Field.related``\n-----------------------\n\nPrivate attribute ``django.db.models.Field.related`` is deprecated in favor\nof ``Field.rel``.  The latter is an instance of\n``django.db.models.fields.related.ForeignObjectRel`` which replaces\n``django.db.models.related.RelatedObject``. The ``django.db.models.related``\nmodule has been removed and the ``Field.related`` attribute will be removed in\nDjango 1.10.\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Models with Django ModelForm\nDESCRIPTION: This code example shows how to create and save database objects using a ModelForm. It demonstrates creating a new article and updating an existing one with form data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from myapp.models import Article\n>>> from myapp.forms import ArticleForm\n\n# Create a form instance from POST data.\n>>> f = ArticleForm(request.POST)\n\n# Save a new Article object from the form's data.\n>>> new_article = f.save()\n\n# Create a form to edit an existing Article, but use\n# POST data to populate the form.\n>>> a = Article.objects.get(pk=1)\n>>> f = ArticleForm(request.POST, instance=a)\n>>> f.save()\n```\n\n----------------------------------------\n\nTITLE: Installing GeoDjango Dependencies with MacPorts\nDESCRIPTION: Installs required PostgreSQL, GEOS, PROJ, PostGIS, GDAL, and libgeoip packages using MacPorts package manager.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install postgresql14-server\n$ sudo port install geos\n$ sudo port install proj6\n$ sudo port install postgis3\n$ sudo port install gdal\n$ sudo port install libgeoip\n```\n\n----------------------------------------\n\nTITLE: Accessing Reverse M2M Related Objects in Django (pycon)\nDESCRIPTION: Retrieves all related `Article` objects associated with specific `Publication` instances (`p1`, `p2`, and one fetched by ID) using the default reverse manager name (`article_set`) and the `all()` method. This demonstrates accessing the 'reverse' side of the relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p2.article_set.all()\n<QuerySet [<Article: NASA uses Python>]>\n>>> p1.article_set.all()\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n>>> Publication.objects.get(id=4).article_set.all()\n<QuerySet [<Article: NASA uses Python>]>\n```\n\n----------------------------------------\n\nTITLE: Creating and Automatically Closing a File Object with Context Manager\nDESCRIPTION: Improved approach for creating a Django File object using a context manager (with statement) to ensure files are automatically closed, preventing resource leaks.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.files import File\n\n# Create a Python file object using open() and the with statement\n>>> with open(\"/path/to/hello.world\", \"w\") as f:\n...     myfile = File(f)\n...     myfile.write(\"Hello World\")\n...\n>>> myfile.closed\nTrue\n>>> f.closed\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using vary_on_headers Decorator in Django\nDESCRIPTION: Demonstrates how to use the vary_on_headers decorator to instruct caching mechanisms to store separate versions of the page based on specified request headers. This example makes the cache vary based on the User-Agent header.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.vary import vary_on_headers\n\n\n@vary_on_headers(\"User-Agent\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Overriding clean() Method in a ModelFormSet\nDESCRIPTION: Demonstrates how to override the clean() method in a custom ModelFormSet while maintaining the default unique constraint validation. It also shows how to modify form instance values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import BaseModelFormSet\n\n\nclass MyModelFormSet(BaseModelFormSet):\n    def clean(self):\n        super().clean()\n\n        for form in self.forms:\n            name = form.cleaned_data[\"name\"].upper()\n            form.cleaned_data[\"name\"] = name\n            # update the instance value.\n            form.instance.name = name\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Dependencies in Django Test Cases\nDESCRIPTION: This snippet shows how to set database dependencies for Django test cases. The 'databases' attribute can be set to '__all__' to allow queries on all databases, replicating the previous behavior of 'allow_database_queries=True' and 'multi_db=True'.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndatabases='__all__'\n```\n\n----------------------------------------\n\nTITLE: Creating a Formset with Multiple Empty Forms\nDESCRIPTION: Demonstrates creating a formset with additional empty forms by setting the extra parameter, which determines how many blank forms appear beyond any initial data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> ArticleFormSet = formset_factory(ArticleForm, extra=2)\n```\n\n----------------------------------------\n\nTITLE: Extracting Date Components with Django ORM - Python\nDESCRIPTION: Demonstrates extracting date-based parts (year, ISO year, quarter, month, week, day, weekday) using Django ORM's annotate, values, and Extract function subclasses. Requires Django and an Experiment model with date fields. Inputs include various datetime/date fields; outputs are dictionaries keyed by part name. Assumes proper timezone handling and that the model fields are compatible; limitations include only supporting parts valid for DateField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> from datetime import UTC, datetime\\n>>> from django.db.models.functions import (\\n...     ExtractDay,\\n...     ExtractMonth,\\n...     ExtractQuarter,\\n...     ExtractWeek,\\n...     ExtractIsoWeekDay,\\n...     ExtractWeekDay,\\n...     ExtractIsoYear,\\n...     ExtractYear,\\n... )\\n>>> start_2015 = datetime(2015, 6, 15, 23, 30, 1, tzinfo=UTC)\\n>>> end_2015 = datetime(2015, 6, 16, 13, 11, 27, tzinfo=UTC)\\n>>> Experiment.objects.create(\\n...     start_datetime=start_2015,\\n...     start_date=start_2015.date(),\\n...     end_datetime=end_2015,\\n...     end_date=end_2015.date(),\\n... )\\n>>> Experiment.objects.annotate(\\n...     year=ExtractYear(\"start_date\"),\\n...     isoyear=ExtractIsoYear(\"start_date\"),\\n...     quarter=ExtractQuarter(\"start_date\"),\\n...     month=ExtractMonth(\"start_date\"),\\n...     week=ExtractWeek(\"start_date\"),\\n...     day=ExtractDay(\"start_date\"),\\n...     weekday=ExtractWeekDay(\"start_date\"),\\n...     isoweekday=ExtractIsoWeekDay(\"start_date\"),\\n... ).values(\\n...     \"year\",\\n...     \"isoyear\",\\n...     \"quarter\",\\n...     \"month\",\\n...     \"week\",\\n...     \"day\",\\n...     \"weekday\",\\n...     \"isoweekday\",\\n... ).get(\\n...     end_date__year=ExtractYear(\"start_date\")\\n... )\\n{'year': 2015, 'isoyear': 2015, 'quarter': 2, 'month': 6, 'week': 25,\\n 'day': 15, 'weekday': 2, 'isoweekday': 1}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining LOGIN_REDIRECT_URL setting\nDESCRIPTION: This setting sets the URL or named URL pattern where requests are redirected after login. It's used when the LoginView does not get a 'next' GET parameter. The default is '/accounts/profile/'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_71\n\n\n\n----------------------------------------\n\nTITLE: Rendering Default Django Form HTML Output\nDESCRIPTION: Shows the default HTML output when rendering a Django form, including input fields, labels, and attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<div><label for=\"id_message\">Message:</label><input type=\"text\" name=\"message\" value=\"Hi there\" required id=\"id_message\"></div>\n<div><label for=\"id_sender\">Sender:</label><input type=\"email\" name=\"sender\" value=\"foo@example.com\" required id=\"id_sender\"></div>\n<div><label for=\"id_cc_myself\">Cc myself:</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\" checked></div>\n```\n\n----------------------------------------\n\nTITLE: User Authentication Check Example\nDESCRIPTION: Example showing the new property-based approach for checking user authentication status instead of the deprecated method-based approach.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nif request.user.is_authenticated:\n    ...  # Do something for logged-in users.\nelse:\n    ...  # Do something for anonymous users.\n```\n\n----------------------------------------\n\nTITLE: Defining i18n URL Patterns in Django\nDESCRIPTION: Demonstrates how to use i18n_patterns to automatically prepend the current active language code to URL patterns in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\n\nfrom about import views as about_views\nfrom news import views as news_views\nfrom sitemap.views import sitemap\n\nurlpatterns = [\n    path(\"sitemap.xml\", sitemap, name=\"sitemap-xml\"),\n]\n\nnews_patterns = (\n    [\n        path(\"\", news_views.index, name=\"index\"),\n        path(\"category/<slug:slug>/\", news_views.category, name=\"category\"),\n        path(\"<slug:slug>/\", news_views.details, name=\"detail\"),\n    ],\n    \"news\",\n)\n\nurlpatterns += i18n_patterns(\n    path(\"about/\", about_views.main, name=\"about\"),\n    path(\"news/\", include(news_patterns, namespace=\"news\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Server Length Function Implementation\nDESCRIPTION: Example of adding SQL Server support by monkey patching a custom method for the Length function to use LEN instead of LENGTH.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.functions import Length\n\n\ndef sqlserver_length(self, compiler, connection):\n    return self.as_sql(compiler, connection, function=\"LEN\")\n\n\nLength.as_sqlserver = sqlserver_length\n```\n\n----------------------------------------\n\nTITLE: Defining Item Categories in Django Feed\nDESCRIPTION: This snippet demonstrates three methods to specify categories for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef item_categories(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    categories.\n    \"\"\"\n\ndef item_categories(self):\n    \"\"\"\n    Returns the categories for every item in the feed.\n    \"\"\"\n\nitem_categories = [\"python\", \"django\"]  # Hard-coded categories.\n```\n\n----------------------------------------\n\nTITLE: Configuring uWSGI for Django using INI file\nDESCRIPTION: Example INI configuration file for uWSGI with Django-specific settings. This configuration includes project path, WSGI module, process management, and logging options in a reusable format.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[uwsgi]\nchdir=/path/to/your/project\nmodule=mysite.wsgi:application\nmaster=True\npidfile=/tmp/project-master.pid\nvacuum=True\nmax-requests=5000\ndaemonize=/var/log/uwsgi/yourproject.log\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests with Verbosity Option\nDESCRIPTION: Demonstrates how to run Django tests using the manage.py command with verbosity option. This command creates a test database and executes the tests, providing detailed output on the process.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nCreating test database...\nCreating table myapp_animal\nCreating table myapp_mineral\n```\n\n----------------------------------------\n\nTITLE: Signing and Unsigning Values with Django's Signer Class\nDESCRIPTION: Demonstrates how to use Django's Signer class to sign and unsign string values. It shows basic usage, handling of non-string values, and error handling for tampered signatures.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.signing import Signer\n>>> signer = Signer()\n>>> value = signer.sign(\"My string\")\n>>> value\n'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'\n\n>>> original = signer.unsign(value)\n>>> original\n'My string'\n\n>>> signed = signer.sign(2.5)\n>>> original = signer.unsign(signed)\n>>> original\n'2.5'\n\n>>> from django.core import signing\n>>> value += \"m\"\n>>> try:\n...     original = signer.unsign(value)\n... except signing.BadSignature:\n...     print(\"Tampering detected!\")\n...\n```\n\n----------------------------------------\n\nTITLE: Using QuerySet.extra() to add custom SQL select and where clauses in Django\nDESCRIPTION: This code snippet demonstrates how to use Django's QuerySet.extra() method to include additional custom SQL fields in select statements and to add explicit WHERE and FROM clauses. It highlights how to construct complex queries with custom SQL, including parameter substitution and subqueries. Dependencies include Django's ORM and RawSQL expressions. It outputs a QuerySet with extra fields or conditions, allowing for flexible and advanced query customization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nqs.extra(\n    select={\"val\": \"select col from sometable where othercol = %s\"},\n    select_params=(someparam,),\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nqs.annotate(val=RawSQL(\"select col from sometable where othercol = %s\", (someparam,)))\n```\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.extra(\n    select={\"is_recent\": \"pub_date > '2006-01-01'\"}\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nBlog.objects.extra(\n    select={\n        \"entry_count\": \"SELECT COUNT(*) FROM blog_entry WHERE blog_entry.blog_id = blog_blog.id\"\n    },\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nBlog.objects.extra(\n    select={\"a\": \"%s\", \"b\": \"%s\"},\n    select_params=(\"one\", \"two\"),\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.extra(where=[\"foo='a' OR bar = 'a'\", \"baz = 'a'\"])\n```\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.extra(\n    where=[\"foo='a' OR bar='a'\"],\n    tables=[\"custom_table\"]\n)\n```\n\nLANGUAGE: Python\nCODE:\n```\nq = Entry.objects.extra(select={\"is_recent\": \"pub_date > '2006-01-01'\"})\nq = q.extra(order_by=[\"-is_recent\"])\n\n```\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.extra(where=[\"headline=%s\"], params=[\"Lennon\"])\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySet with RawSQL in __in Filter - Django ORM - Python\nDESCRIPTION: Illustrates the use of a RawSQL expression as the right-hand side of a QuerySet filter with an '__in' lookup in Django ORM. Django and proper model setup are required. The 'param' parameter is securely passed to prevent SQL injection, and the filter narrows the queryset to rows whose 'id' appears in the subquery. Outputs a filtered QuerySet based on the result of the subquery.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> queryset.filter(id__in=RawSQL(\"select id from sometable where col = %s\", (param,)))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Proxy Model in Django\nDESCRIPTION: This example shows how to create a proxy model that adds a new method to the Person model. The proxy model operates on the same database table as its parent class, but allows adding Python functionality without changing the database schema.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n\n\nclass MyPerson(Person):\n    class Meta:\n        proxy = True\n\n    def do_something(self):\n        # ...\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using TrigramWordSimilarity for Word-Based Fuzzy Matching\nDESCRIPTION: Shows how to use TrigramWordSimilarity to find records based on word-level similarity. This method matches substrings within words, as demonstrated by searching for authors with names containing substrings similar to 'Kat'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.postgres.search import TrigramWordSimilarity\n>>> Author.objects.create(name=\"Katy Stevens\")\n>>> Author.objects.create(name=\"Stephen Keats\")\n>>> test = \"Kat\"\n>>> Author.objects.annotate(\n...     similarity=TrigramWordSimilarity(test, \"name\"),\n... ).filter(\n...     similarity__gt=0.3\n... ).order_by(\"-similarity\")\n[<Author: Katy Stevens>]\n```\n\n----------------------------------------\n\nTITLE: Middleware to Rewrite X-Forwarded Headers for Django (Python)\nDESCRIPTION: Provides a custom Django middleware class to rewrite X-Forwarded headers so only the most recent proxy information is used. This helps get accurate host data in multi-proxy environments. Inputs: HttpRequest with potential X-Forwarded headers; output: Machined request.META with modified header values. Should be installed before other middleware relying on get_host().\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MultipleProxyMiddleware:\n    FORWARDED_FOR_FIELDS = [\n        \"HTTP_X_FORWARDED_FOR\",\n        \"HTTP_X_FORWARDED_HOST\",\n        \"HTTP_X_FORWARDED_SERVER\",\n    ]\n\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        \"\"\"\n        Rewrites the proxy headers so that only the most\n        recent proxy is used.\n        \"\"\"\n        for field in self.FORWARDED_FOR_FIELDS:\n            if field in request.META:\n                if \",\" in request.META[field]:\n                    parts = request.META[field].split(\",\")\n                    request.META[field] = parts[-1].strip()\n        return self.get_response(request)\n\n```\n\n----------------------------------------\n\nTITLE: Accessing json_script Data in JavaScript\nDESCRIPTION: Example of accessing data from json_script filter in JavaScript code.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = JSON.parse(document.getElementById('hello-data').textContent);\n```\n\n----------------------------------------\n\nTITLE: Limiting Formset Forms with max_num Parameter\nDESCRIPTION: Demonstrates limiting the number of forms displayed in a formset using the max_num parameter, which restricts the total number of forms shown regardless of the extra parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> ArticleFormSet = formset_factory(ArticleForm, extra=2, max_num=1)\n>>> formset = ArticleFormSet()\n>>> for form in formset:\n...     print(form)\n...\n<div><label for=\"id_form-0-title\">Title:</label><input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\"></div>\n<div><label for=\"id_form-0-pub_date\">Pub date:</label><input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\"></div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-escaping in Django Templates\nDESCRIPTION: This snippet demonstrates the use of the `{% autoescape on %}` tag in Django templates. It ensures that the content of the `body` variable within the block is automatically HTML-escaped before rendering, preventing potential cross-site scripting (XSS) vulnerabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape on %}\n    {{ body }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Detecting AJAX Requests Using Headers in Django - Python\nDESCRIPTION: This snippet provides a method to replicate the deprecated HttpRequest.is_ajax() functionality by directly inspecting the 'X-Requested-With' request header. It assumes a Django view context and utilizes the request object's headers dictionary to check if the AJAX-specific value ('XMLHttpRequest') is present. There are no third-party dependencies required, and the function returns a boolean indicating whether the request was sent via AJAX. Limitations include reliance on the client correctly setting the header, which is standard practice but not guaranteed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequest.headers.get('x-requested-with') == 'XMLHttpRequest'\n```\n\n----------------------------------------\n\nTITLE: Using Direct Assignment with Related Objects (Deprecated)\nDESCRIPTION: Example showing the deprecated direct assignment approach for reverse foreign key or many-to-many relations, which will be removed in a future Django version. This method can cause confusion because it creates an implicit save.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> new_list = [obj1, obj2, obj3]\n>>> e.related_set = new_list\n```\n\n----------------------------------------\n\nTITLE: Defining GISModelAdmin Class with Custom Widget Attributes in Python\nDESCRIPTION: This snippet defines the GISModelAdmin class with two attributes: gis_widget for specifying the widget class for GeometryFields, and gis_widget_kwargs for passing keyword arguments to the widget. It extends Django's admin functionality for geographic data management.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/admin.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GISModelAdmin:\n    gis_widget = ...\n    gis_widget_kwargs = ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Level Deprecation Warning Ignore in Python\nDESCRIPTION: Shows how to ignore deprecation warnings for an entire test case class using the ignore_warnings decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.test import ignore_warnings\nfrom django.utils.deprecation import RemovedInDjangoXXWarning\n\n@ignore_warnings(category=RemovedInDjangoXXWarning)\nclass MyDeprecatedTests(unittest.TestCase): ...\n```\n\n----------------------------------------\n\nTITLE: Referencing ExclusionConstraint Class in Django for PostgreSQL\nDESCRIPTION: This snippet demonstrates how to reference the ExclusionConstraint class from the django.contrib.postgres.constraints module. It is used for defining exclusion constraints when working with PostgreSQL range types in Django models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.postgres.constraints import ExclusionConstraint\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Feed with Hardcoded Stylesheet URL\nDESCRIPTION: This snippet demonstrates how to add a hardcoded stylesheet URL to a Django syndication feed by setting the stylesheets attribute on the feed class.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\n\n\nclass FeedWithHardcodedStylesheet(Feed):\n    stylesheets = [\n        \"https://example.com/rss_stylesheet.xslt\",\n    ]\n```\n\n----------------------------------------\n\nTITLE: Aggregating Annotations in Django ORM\nDESCRIPTION: This example shows how to aggregate on the result of an annotation. It calculates the average number of authors per book by first annotating the set of books with the author count, then aggregating that count.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_26\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import Avg, Count\n>>> Book.objects.annotate(num_authors=Count(\"authors\")).aggregate(Avg(\"num_authors\"))\n{'num_authors__avg': 1.66}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Comments URL in Django Feed\nDESCRIPTION: This snippet demonstrates three methods to specify the comments URL for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef item_comments(self, obj):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    comments URL as a normal Python string.\n    \"\"\"\n\ndef item_comments(self):\n    \"\"\"\n    Returns the comments URL for every item in the feed.\n    \"\"\"\n\nitem_comments = \"https://www.example.com/comments\"  # Hard-coded comments URL\n```\n\n----------------------------------------\n\nTITLE: Malicious date format injection example\nDESCRIPTION: Example of how a malicious user could exploit the date filter vulnerability by providing a settings key instead of a valid date format to access secret information.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.7.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"SECRET_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using AdminURLFieldWidget with Custom Validator\nDESCRIPTION: Example of customizing AdminURLFieldWidget validation by passing a custom validator_class parameter during initialization, used for URL field validation in Django admin.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAdminURLFieldWidget.__init__(validator_class=CustomURLValidator)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Index Creation with Field Ordering\nDESCRIPTION: Resolved crash when creating database indexes with field ordering and opclasses on PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.Index\n```\n\n----------------------------------------\n\nTITLE: Validating select_related() Field Existence and Type in Django ORM (Python)\nDESCRIPTION: Demonstrates usage of select_related() with invalid or non-relational fields in Django ORM. Snippets show errors raised for non-existent fields and for fields that exist but are not relational, thus enforcing better query validation. Requires Book model defined, with select_related() invoked on its related manager.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> book = Book.objects.select_related(\"nonexistent_field\")\nTraceback (most recent call last):\n...\nFieldError: Invalid field name(s) given in select_related: 'nonexistent_field'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> book = Book.objects.select_related(\"name\")\nTraceback (most recent call last):\n...\nFieldError: Non-relational field given in select_related: 'name'\n```\n\n----------------------------------------\n\nTITLE: Cloning Django Repository via Git Console\nDESCRIPTION: Shows how to clone the Django repository from GitHub to your local machine using Git. This is the first step to start contributing to Django's documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/django/django.git\n```\n\n----------------------------------------\n\nTITLE: Custom Header RemoteUserMiddleware Implementation\nDESCRIPTION: Example of extending RemoteUserMiddleware to use a custom HTTP header instead of REMOTE_USER for authentication.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.middleware import RemoteUserMiddleware\n\n\nclass CustomHeaderRemoteUserMiddleware(RemoteUserMiddleware):\n    header = \"HTTP_AUTHUSER\"\n```\n\n----------------------------------------\n\nTITLE: Basic Store Price Aggregation in Django\nDESCRIPTION: Shows how to find minimum and maximum book prices across all stores using Django's Min and Max aggregation functions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nStore.objects.aggregate(min_price=Min(\"books__price\"), max_price=Max(\"books__price\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Index View in Django URLs\nDESCRIPTION: This Python snippet demonstrates setting up URL patterns in `urls.py` to generate a sitemap index file using Django's sitemap framework. It defines two paths: one for the index file (`sitemap.xml`) using `views.index`, and another pattern (`sitemap-<section>.xml`) for individual sitemap files using `views.sitemap` which captures the section name. Both views are passed the same `sitemaps` dictionary, which contains the definitions for the individual sitemaps.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sitemaps import views\n\nurlpatterns = [\n    path(\n        \"sitemap.xml\",\n        views.index,\n        {\"sitemaps\": sitemaps},\n        name=\"django.contrib.sitemaps.views.index\",\n    ),\n    path(\n        \"sitemap-<section>.xml\",\n        views.sitemap,\n        {\"sitemaps\": sitemaps},\n        name=\"django.contrib.sitemaps.views.sitemap\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Field Deconstruction Method in Django\nDESCRIPTION: Method that returns necessary information to recreate the field, used for migrations and field reconstruction.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ndef deconstruct(self):\n    return (\n        self.name,\n        \"django.db.models.IntegerField\",\n        [],\n        {}\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering a Deployment-Specific Django System Check in Python\nDESCRIPTION: Shows how to register a system check that only runs when the `--deploy` option is used with the `check` command. This is achieved by passing `deploy=True` to the `@register()` decorator, along with any relevant tags like `Tags.security`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@register(Tags.security, deploy=True)\ndef my_check(app_configs, **kwargs): ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Intermediate Model Data in Django\nDESCRIPTION: This snippet demonstrates how to access data from the intermediate model in a many-to-many relationship, both through direct querying and reverse relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> ringos_membership = Membership.objects.get(group=beatles, person=ringo)\n>>> ringos_membership.date_joined\ndatetime.date(1962, 8, 16)\n>>> ringos_membership.invite_reason\n'Needed a new drummer.'\n\n>>> ringos_membership = ringo.membership_set.get(group=beatles)\n>>> ringos_membership.date_joined\ndatetime.date(1962, 8, 16)\n>>> ringos_membership.invite_reason\n'Needed a new drummer.'\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments in a Django Tag Compilation Function (Python)\nDESCRIPTION: This Python function `do_format_time` serves as the compilation function for a custom Django template tag. It uses `token.split_contents()` to parse the tag's arguments, expecting a tag name, a variable name (like 'blog_entry.date_updated'), and a quoted format string. It performs error handling for incorrect argument counts and validates that the format string is properly quoted before instantiating and returning the corresponding `FormatTimeNode`.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\n\n\ndef do_format_time(parser, token):\n    try:\n        # split_contents() knows not to split quoted strings.\n        tag_name, date_to_be_formatted, format_string = token.split_contents()\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            \"%r tag requires exactly two arguments\" % token.contents.split()[0]\n        )\n    if not (format_string[0] == format_string[-1] and format_string[0] in ('\"', \"'\")):\n        raise template.TemplateSyntaxError(\n            \"%r tag's argument should be in quotes\" % tag_name\n        )\n    return FormatTimeNode(date_to_be_formatted, format_string[1:-1])\n```\n\n----------------------------------------\n\nTITLE: Function-Based View with CSRF-Protected File Upload\nDESCRIPTION: Implementation of a file upload view using function-based approach with CSRF protection, showing how to modify upload handlers safely.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.csrf import csrf_exempt, csrf_protect\n\n\n@csrf_exempt\ndef upload_file_view(request):\n    request.upload_handlers.insert(0, ProgressBarUploadHandler(request))\n    return _upload_file_view(request)\n\n\n@csrf_protect\ndef _upload_file_view(request):\n    # Process request\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using LayerMapping to Import Spatial Data\nDESCRIPTION: Demonstration of using LayerMapping to import features from a shapefile into a GeoDjango model, including field mapping configuration and execution of the import process.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.utils import LayerMapping\n>>> from geoapp.models import TestGeo\n>>> mapping = {\n...     \"name\": \"str\",  # The 'name' model field maps to the 'str' layer field.\n...     \"poly\": \"POLYGON\",  # For geometry fields use OGC name.\n... }  # The mapping is a dictionary\n>>> lm = LayerMapping(TestGeo, \"test_poly.shp\", mapping)\n>>> lm.save(verbose=True)  # Save the layermap, imports the data.\nSaved: Name: 1\nSaved: Name: 2\nSaved: Name: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Formatters in Django\nDESCRIPTION: Shows how to define formatters for customizing log output with different verbosity levels.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"formatters\": {\n    \"verbose\": {\n        \"format\": \"{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}\",\n        \"style\": \"{\",\n    },\n    \"simple\": {\n        \"format\": \"{levelname} {message}\",\n        \"style\": \"{\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Race Condition in QuerySet.update_or_create()\nDESCRIPTION: Reference to a bug fix addressing a race condition in Django's QuerySet.update_or_create() method that could potentially cause data loss. The fix was implemented in ticket #29499.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.16.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.update_or_create()\n```\n\n----------------------------------------\n\nTITLE: Defining CheckMessage Class in Python for Django System Checks\nDESCRIPTION: This code defines the CheckMessage class used for creating warning and error messages in Django's system check framework. It includes parameters for severity level, message content, hints, related objects, and a unique identifier.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CheckMessage(level, msg, hint=None, obj=None, id=None):\n    # Constructor arguments:\n    # level: Severity of the message (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n    # msg: Short string describing the problem (< 80 chars, no newlines)\n    # hint: Single-line string providing a fix hint (optional)\n    # obj: Optional object providing context (should have __str__() method)\n    # id: Optional unique identifier string (format: applabel.X001)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command Arguments in Django\nDESCRIPTION: Demonstrates how to override the add_arguments method in a custom Django command to add both positional and optional arguments. This method is the entry point for defining command-line arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef add_arguments(parser):\n    # Custom commands should override this method to add both\n    # positional and optional arguments accepted by the command.\n    # Calling super() is not needed when directly subclassing BaseCommand.\n```\n\n----------------------------------------\n\nTITLE: Django Database Models Window Expression\nDESCRIPTION: Reference to Window expressions in Django database models, which can now be used in conditions outside of queryset filters, such as in When conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.expressions.Window\n```\n\n----------------------------------------\n\nTITLE: Retrieving Formatting Settings with get_format in JavaScript\nDESCRIPTION: Shows how to use the get_format function to retrieve configured i18n formatting settings in JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.write(get_format('DATE_FORMAT'));\n// 'N j, Y'\n```\n\n----------------------------------------\n\nTITLE: Querying Valid Geometries in Django ORM\nDESCRIPTION: Example of using the 'isvalid' lookup to find valid geometries across different spatial database backends using Django ORM.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__isvalid=True)\n```\n\n----------------------------------------\n\nTITLE: Using length Filter\nDESCRIPTION: Shows how to get the length of strings or lists using the length filter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_75\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|length }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Translated URL Patterns in Django\nDESCRIPTION: Example of setting up translated URL patterns using Django's i18n_patterns and URL routing with translation markers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\npath(_(\"category/<slug:slug>/\"), news_views.category, name=\"category\"),\npath(\"<slug:slug>/\", news_views.details, name=\"detail\"),\n],\n\"news\",\n)\n\nurlpatterns += i18n_patterns(\n    path(_(\"about/\"), about_views.main, name=\"about\"),\n    path(_(\"news/\"), include(news_patterns, namespace=\"news\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Independent QuerySets with Django Filters\nDESCRIPTION: This example illustrates that each refined QuerySet is independent and not bound to previous QuerySets. It creates three separate QuerySets by applying different filters to the same base QuerySet.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> q1 = Entry.objects.filter(headline__startswith=\"What\")\n>>> q2 = q1.exclude(pub_date__gte=datetime.date.today())\n>>> q3 = q1.filter(pub_date__gte=datetime.date.today())\n```\n\n----------------------------------------\n\nTITLE: Capturing on-commit callbacks in Django tests\nDESCRIPTION: This snippet demonstrates capturing and asserting on-commit callbacks in a Django test case. It posts data to a contact form endpoint and checks the response, callbacks, and sent emails.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nwith self.captureOnCommitCallbacks(execute=True) as callbacks:\n    response = self.client.post(\n        \"/contact/\",\n        {\"message\": \"I like your site\"},\n    )\n\nself.assertEqual(response.status_code, 200)\nself.assertEqual(len(callbacks), 1)\nself.assertEqual(len(mail.outbox), 1)\nself.assertEqual(mail.outbox[0].subject, \"Contact Form\")\nself.assertEqual(mail.outbox[0].body, \"I like your site\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Django Version\nDESCRIPTION: Shows the output format of the django-admin version command, which displays the current Django version following the PEP 440 schema.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.4.dev17026\n1.4a1\n1.4\n```\n\n----------------------------------------\n\nTITLE: Skipping Django tests based on database features with skipUnlessDBFeature\nDESCRIPTION: Example showing how to skip a test if a specific database feature is not supported using the skipUnlessDBFeature decorator. This test will only run if the database supports transactions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nclass MyTests(TestCase):\n    @skipUnlessDBFeature(\"supports_transactions\")\n    def test_transaction_behavior(self):\n        # ... conditional test code\n        pass\n```\n\n----------------------------------------\n\nTITLE: Initializing and Manipulating OGRGeometry Objects in Django (Python)\nDESCRIPTION: Shows creation of OGRGeometry objects from a WKT polygon string using Django's GIS API and accessing geometry attributes and transformations such as dimension, 3D status, measured status, geometry counts, geometry name, area, extent, and SRID-related properties. Demonstrates set_3d and set_measured methods to toggle extra dimensions in the geometry, as well as property accessors for area and envelope calculations. Requires the django.contrib.gis.gdal.OGRGeometry class and appropriate input strings (e.g., valid WKT). Outputs are numbers, booleans, and strings depending on the attribute queried.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.gdal import OGRGeometry\n>>> polygon = OGRGeometry(\"POLYGON((0 0, 5 0, 5 5, 0 5))\")\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> polygon.dimension\n2\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = OGRGeometry(\"POINT (1 2 3)\")\n>>> p.is_3d\nTrue\n>>> p.set_3d(False)\n>>> p.wkt\n\"POINT (1 2)\"\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p = OGRGeometry(\"POINT (1 2)\")\n>>> p.is_measured\nFalse\n>>> p.set_measured(True)\n>>> p.wkt\n\"POINT M (1 2 0)\"\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> polygon.geom_count\n1\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> polygon.point_count\n4\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> polygon.geom_name\n'POLYGON'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> polygon.area\n25.0\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> point.extent\n(0.0, 0.0, 5.0, 5.0)\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city.geom.srs.name\n'GCS_WGS_1984'\n```\n\n----------------------------------------\n\nTITLE: Implementing Secret Key Rotation in Django\nDESCRIPTION: Demonstrates how to implement secret key rotation using Django's SECRET_KEY_FALLBACKS setting, which allows for graceful transition between keys.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nSECRET_KEY = os.environ[\"CURRENT_SECRET_KEY\"]\nSECRET_KEY_FALLBACKS = [\n    os.environ[\"OLD_SECRET_KEY\"],\n]\n```\n\n----------------------------------------\n\nTITLE: Applying distinct() on Specific Fields (PostgreSQL) Python\nDESCRIPTION: Applies the DISTINCT ON (fields) clause to a QuerySet on PostgreSQL. Requires an order_by() clause that starts with the same fields in the same order. Returns the first row for each unique combination of the specified fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.order_by(\"pub_date\").distinct(\"pub_date\")\n```\n\n----------------------------------------\n\nTITLE: Getting Generic Email Connection in Django 1.2+ (Python)\nDESCRIPTION: This snippet shows the recommended way to obtain an email connection instance in Django 1.2+ using `get_connection()` from `django.core.mail`. This function returns a connection instance based on the `EMAIL_BACKEND` setting, promoting flexibility.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import get_connection\n\nconnection = get_connection()\nmessages = get_notification_email()\nconnection.send_messages(messages)\n```\n\n----------------------------------------\n\nTITLE: Validating ForeignKey Query Object Types in Django ORM (Python)\nDESCRIPTION: Shows an example where Book.objects.filter(author=book) is performed, illustrating that as of newer Django versions, query relation lookups require proper instance types. Passing an incorrect model (e.g., Book instead of Author for author=...) triggers a ValueError. Requires models Book and Author with appropriate relations, and Django's ORM environment.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> book = Book.objects.create(name=\"Django\")\n>>> book = Book.objects.filter(author=book)\nTraceback (most recent call last):\n...\nValueError: Cannot query \"<Book: Django>\": Must be \"Author\" instance.\n```\n\n----------------------------------------\n\nTITLE: Configuring ArticleAdmin with Prepopulated Fields\nDESCRIPTION: Shows how to set up automatic slug generation from title field in ArticleAdmin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleAdmin(admin.ModelAdmin):\n    prepopulated_fields = {\"slug\": [\"title\"]}\n```\n\n----------------------------------------\n\nTITLE: Customizing Widget Instances by Passing Attributes in Django Python Forms\nDESCRIPTION: Demonstrates customizing widget appearance by passing additional HTML attributes through the attrs argument when instantiating widgets within form fields. Requires Django and a forms.Form subclass. The code modifies the 'class' and 'size' HTML attributes for input elements, affecting styling and width. Inputs are widget attribute dictionaries; outputs are form fields with custom HTML in the rendered output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CommentForm(forms.Form):\n    name = forms.CharField(widget=forms.TextInput(attrs={\"class\": \"special\"}))\n    url = forms.URLField()\n    comment = forms.CharField(widget=forms.TextInput(attrs={\"size\": \"40\"}))\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests in Bash\nDESCRIPTION: These Bash commands demonstrate how to run Django tests for a specific module (shortcuts) and how to run the entire Django test suite.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ ./runtests.py shortcuts\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ ./runtests.py\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Django Templates\nDESCRIPTION: Demonstrates how Django templates handle exceptions during variable resolution and the silent_variable_failure behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> t = Template(\"My name is {{ person.first_name }}.\")\n>>> class PersonClass3:\n...     def first_name(self):\n...         raise AssertionError(\"foo\")\n...\n>>> p = PersonClass3()\n>>> t.render(Context({\"person\": p}))\nTraceback (most recent call last):\n...\nAssertionError: foo\n\n>>> class SilentAssertionError(Exception):\n...     silent_variable_failure = True\n...\n>>> class PersonClass4:\n...     def first_name(self):\n...         raise SilentAssertionError\n...\n>>> p = PersonClass4()\n>>> t.render(Context({\"person\": p}))\n\"My name is .\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Prefixed Static Files in Django Template\nDESCRIPTION: Demonstrates how to reference a static file using the static template tag with a namespace prefix that was configured in STATICFILES_DIRS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_82\n\nLANGUAGE: html+django\nCODE:\n```\n<a href=\"{% static 'downloads/polls_20101022.tar.gz' %}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Backend in Django Settings\nDESCRIPTION: Shows how to configure the locmem (in-memory) email backend for testing.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"django.core.mail.backends.locmem.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Using NON_FIELD_ERRORS Constant\nDESCRIPTION: Shows how to use the NON_FIELD_ERRORS constant for ValidationErrors that don't belong to a specific field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import NON_FIELD_ERRORS, ValidationError\n\nerrors = {\n    NON_FIELD_ERRORS: [\"This is a non-field error\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using TrigramWordDistance for Word-Level Distance Matching\nDESCRIPTION: Shows how to use TrigramWordDistance to find records based on word-level distance calculation. This allows for finding words with similar patterns, filtering results by a maximum distance threshold.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.postgres.search import TrigramWordDistance\n>>> Author.objects.create(name=\"Katy Stevens\")\n>>> Author.objects.create(name=\"Stephen Keats\")\n>>> test = \"Kat\"\n>>> Author.objects.annotate(\n...     distance=TrigramWordDistance(test, \"name\"),\n... ).filter(\n...     distance__lte=0.7\n... ).order_by(\"distance\")\n[<Author: Katy Stevens>]\n```\n\n----------------------------------------\n\nTITLE: Wrapping Django ValidationError Messages with gettext - Python\nDESCRIPTION: Contrasts the recommended practice of wrapping error messages with Django's translation (_), allowing error messages to be translated for internationalization, against non-localized versions. Intended for use in custom ValidationError raising within forms or model validation, where localization is desired. Requires Django's translation utility and is constrained by the need for _ to be imported and translation catalogs present.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Good\nValidationError(_(\"Invalid value\"))\n\n# Bad\nValidationError(\"Invalid value\")\n```\n\n----------------------------------------\n\nTITLE: Calling Django's URL Safety Check Function in Python\nDESCRIPTION: This code snippet shows the usage of Django's `is_safe_url()` function, which is the focus of the security fix. This function is used to check if a URL is safe for redirection.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.20.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.http.is_safe_url()\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Fields in Django Forms and Cleaned Data - Python\nDESCRIPTION: Explains that optional fields not present in the input data are included in cleaned_data, with their blank value (e.g., '' for CharField). Demonstrates defining an optional field and result after validation. Inputs are partial form data. Output is cleaned_data with all form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\\n>>> class OptionalPersonForm(forms.Form):\\n...     first_name = forms.CharField()\\n...     last_name = forms.CharField()\\n...     nick_name = forms.CharField(required=False)\\n...\\n>>> data = {\\\"first_name\\\": \\\"John\\\", \\\"last_name\\\": \\\"Lennon\\\"}\\n>>> f = OptionalPersonForm(data)\\n>>> f.is_valid()\\nTrue\\n>>> f.cleaned_data\\n{'nick_name': '', 'first_name': 'John', 'last_name': 'Lennon'}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for Publishers, Authors, and Books in Python\nDESCRIPTION: Defines three Django models: `Publisher`, `Author`, and `Book`, establishing relationships (ManyToMany, ForeignKey) and basic fields (CharField, URLField, EmailField, ImageField, DateField). These models serve as the data source for the subsequent generic view examples, representing entities in a book publishing application. Includes meta options for ordering and `__str__` methods for representation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=30)\n    address = models.CharField(max_length=50)\n    city = models.CharField(max_length=60)\n    state_province = models.CharField(max_length=30)\n    country = models.CharField(max_length=50)\n    website = models.URLField()\n\n    class Meta:\n        ordering = [\"-name\"]\n\n    def __str__(self):\n        return self.name\n\n\nclass Author(models.Model):\n    salutation = models.CharField(max_length=10)\n    name = models.CharField(max_length=200)\n    email = models.EmailField()\n    headshot = models.ImageField(upload_to=\"author_headshots\")\n\n    def __str__(self):\n        return self.name\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    authors = models.ManyToManyField(\"Author\")\n    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\n    publication_date = models.DateField()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Ticket in Release Notes\nDESCRIPTION: This snippet shows how to reference a Django ticket number (33681) in the release notes documentation using reStructuredText syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33681`\n```\n\n----------------------------------------\n\nTITLE: Django Template Tag Reference\nDESCRIPTION: Template tag mentioned in bugfix that was modified to handle any iterable.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: Django Template\nCODE:\n```\n{% for %}\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Fieldsets Layout in Django 0.96 (ModelTwo - Python)\nDESCRIPTION: This snippet illustrates the old (Django 0.96) `fields` syntax used to define fieldsets within an inner `Admin` class. It defines named groups ('group1', 'group2') with associated fields and CSS classes ('collapse', 'wide'). This syntax is replaced by the more explicit `fieldsets` attribute in Django 1.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ModelTwo(models.Model):\n    ...\n\n    class Admin:\n        fields = (\n            (\"group1\", {\"fields\": (\"foo\", \"bar\"), \"classes\": \"collapse\"}),\n            (\"group2\", {\"fields\": (\"spam\", \"eggs\"), \"classes\": \"collapse wide\"}),\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring the In-Memory Template Loader in Django\nDESCRIPTION: Shows how to use the locmem.Loader which loads templates from a Python dictionary, useful for testing template functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"OPTIONS\": {\n            \"loaders\": [\n                (\n                    \"django.template.loaders.locmem.Loader\",\n                    {\n                        \"index.html\": \"content here\",\n                    },\n                ),\n            ],\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Modifying Session Data in Django Tests\nDESCRIPTION: Demonstrates how to modify the session in a Django test. The session must be stored in a variable before modification since a new SessionStore is created on each access.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef test_something(self):\n    session = self.client.session\n    session[\"somekey\"] = \"test\"\n    session.save()\n```\n\n----------------------------------------\n\nTITLE: Handling One-to-One Reverse Relationship DoesNotExist - Django Models - Python\nDESCRIPTION: Shows how to handle the RelatedObjectDoesNotExist exception when accessing a reverse OneToOneField relationship that does not exist for a User instance. Uses try...except in Python to catch User.supervisor_of.RelatedObjectDoesNotExist. This snippet requires an understanding of Django's model exceptions and is useful for safely handling cases where a related object is absent.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ntry:\\n    user.supervisor_of\\nexcept User.supervisor_of.RelatedObjectDoesNotExist:\\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing TodayArchiveView in Django\nDESCRIPTION: Example of how to create a TodayArchiveView for displaying articles published today. It includes the view definition and URL configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.views.generic.dates import TodayArchiveView\n\nfrom myapp.models import Article\n\n\nclass ArticleTodayArchiveView(TodayArchiveView):\n    queryset = Article.objects.all()\n    date_field = \"pub_date\"\n    allow_future = True\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import ArticleTodayArchiveView\n\nurlpatterns = [\n    path(\"today/\", ArticleTodayArchiveView.as_view(), name=\"archive_today\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Generic Exception Handling for get() in Django ORM (Python)\nDESCRIPTION: Demonstrates handling exceptions across multiple models by catching ObjectDoesNotExist from django.core.exceptions. This approach generalizes error handling for get() calls, ensuring code robustness when queried objects may be absent.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ObjectDoesNotExist\n\ntry:\n    blog = Blog.objects.get(id=1)\n    entry = Entry.objects.get(blog=blog, entry_number=1)\nexcept ObjectDoesNotExist:\n    print(\"Either the blog or entry doesn't exist.\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Registration-Required Flatpages in Django HTML\nDESCRIPTION: This snippet shows how to use the get_flatpages template tag with a 'for' clause to display registration-protected flatpages for a specific user in a Django template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% get_flatpages for someuser as about_pages %}\n```\n\n----------------------------------------\n\nTITLE: Using Window Function with Avg in Django QuerySet\nDESCRIPTION: Example of using Window function in Django to calculate average ratings partitioned by studio and genre with a sliding frame range of 12 years before and after.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nMovie.objects.annotate(\n    avg_rating=Window(\n        expression=Avg(\"rating\"),\n        partition_by=[F(\"studio\"), F(\"genre\")],\n        order_by=\"released__year\",\n        frame=ValueRange(start=-12, end=12),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using values() with Registered Lookups (Transforms) Python\nDESCRIPTION: Demonstrates using values() with a registered lookup (transform) applied to a field name (e.g., 'name__lower'). The transform modifies the field's value before including it in the result dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.db.models import CharField\n>>> from django.db.models.functions import Lower\n>>> CharField.register_lookup(Lower)\n>>> Blog.objects.values(\"name__lower\")\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Arguments to Django Management Commands\nDESCRIPTION: Extends the custom management command with optional named arguments using the argparse library. Shows how to handle both positional and named arguments in the command handler.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Command(BaseCommand):\n    def add_arguments(self, parser):\n        # Positional arguments\n        parser.add_argument(\"poll_ids\", nargs=\"+\", type=int)\n\n        # Named (optional) arguments\n        parser.add_argument(\n            \"--delete\",\n            action=\"store_true\",\n            help=\"Delete poll instead of closing it\",\n        )\n\n    def handle(self, *args, **options):\n        # ...\n        if options[\"delete\"]:\n            poll.delete()\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Creating Covering Indexes with the \"include\" Option in Django ORM (Python)\nDESCRIPTION: Shows how to create a covering index to optimize index-only scans using the 'include' parameter. Non-key fields can be added to the index for efficient selects without additional lookups, benefiting primarily PostgreSQL. Requirements include explicit 'name', 'fields', and an 'include' list of additional field names. Limitations: Only PostgreSQL supports this option, and included columns cannot be used for ordering or filtering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nIndex(name=\"covering_index\", fields=[\"headline\"], include=[\"pub_date\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Left Relationship in PostGIS\nDESCRIPTION: Example of using the 'left' lookup to find geometries whose bounding box is strictly to the left of a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__left=geom)\n```\n\n----------------------------------------\n\nTITLE: Defining WeekMixin Class in Django\nDESCRIPTION: WeekMixin class provides functionality for retrieving and parsing the week component of a date. It includes methods for getting the week format, retrieving the week value, and navigating to next and previous weeks.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass WeekMixin:\n    week_format = '%U'\n    week = None\n\n    def get_week_format(self):\n        return self.week_format\n\n    def get_week(self):\n        # Implementation details omitted\n        pass\n\n    def get_next_week(self, date):\n        # Implementation details omitted\n        pass\n\n    def get_prev_week(self, date):\n        # Implementation details omitted\n        pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Connection via Full DSN String in Django Settings (Python)\nDESCRIPTION: Illustrates using a full Oracle Data Source Name (DSN) string within the `NAME` setting for database connections, applicable when `HOST` and `PORT` are empty. This provides detailed connection parameters directly in the settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"NAME\": (\n    \"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))\"\n    \"(CONNECT_DATA=(SERVICE_NAME=orclpdb1)))\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using EmptyFieldListFilter in Django Admin\nDESCRIPTION: Shows how to configure EmptyFieldListFilter to filter on both empty strings and null values for a specific field in the Django admin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BookAdmin(admin.ModelAdmin):\n    list_filter = [\n        (\"title\", admin.EmptyFieldListFilter),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Performing GeoDjango Distance Queries using Lookups in Python\nDESCRIPTION: Shows how to query `SouthTexasCity` objects based on distance from a reference point (`pnt`). It utilizes `GEOSGeometry` to define the reference point (SRID 4326) and the `Distance` object (`D`) for specifying distances with units (km, mi, chain). The examples filter using `distance_lte` (less than or equal to) and `distance_gte` (greater than or equal to) lookups against the `point` field. GeoDjango handles the necessary transformations and calculations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import GEOSGeometry\n>>> from django.contrib.gis.measure import D  # ``D`` is a shortcut for ``Distance``\n>>> from geoapp.models import SouthTexasCity\n# Distances will be calculated from this point, which does not have to be projected.\n>>> pnt = GEOSGeometry(\"POINT(-96.876369 29.905320)\", srid=4326)\n# If numeric parameter, units of field (meters in this case) are assumed.\n>>> qs = SouthTexasCity.objects.filter(point__distance_lte=(pnt, 7000))\n# Find all Cities within 7 km, > 20 miles away, and > 100 chains away (an obscure unit)\n>>> qs = SouthTexasCity.objects.filter(point__distance_lte=(pnt, D(km=7)))\n>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(pnt, D(mi=20)))\n>>> qs = SouthTexasCity.objects.filter(point__distance_gte=(pnt, D(chain=100)))\n```\n\n----------------------------------------\n\nTITLE: Defining CSRF Failure View Signature\nDESCRIPTION: Specifies the required signature for a custom view function used by the CSRF protection middleware when a request is rejected. The function must accept the request object and an optional reason string, and should return an HttpResponseForbidden.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef csrf_failure(request, reason=\"\"): ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Values from Django Test Client Response\nDESCRIPTION: Shows how to access template context values from a Django test client response by using dictionary-like access on the context attribute. This example demonstrates retrieving the 'name' variable from the template context.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> response = client.get(\"/foo/\")\n>>> response.context[\"name\"]\n'Arthur'\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Admin for Generic Relations\nDESCRIPTION: Sets up an admin interface for Product with GenericTabularInline to manage related Image objects. Uses the special GenericTabularInline class from django.contrib.contenttypes.admin to properly handle the generic relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.contenttypes.admin import GenericTabularInline\n\nfrom myapp.models import Image, Product\n\n\nclass ImageInline(GenericTabularInline):\n    model = Image\n\n\nclass ProductAdmin(admin.ModelAdmin):\n    inlines = [\n        ImageInline,\n    ]\n\n\nadmin.site.register(Product, ProductAdmin)\n```\n\n----------------------------------------\n\nTITLE: Fixing UnboundLocalError in RenameField with Nonexistent Field in Python\nDESCRIPTION: Fixed UnboundLocalError crash in RenameField with nonexistent field.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nmigrations.RenameField(model_name='Model', old_name='nonexistent_field', new_name='new_field')\n```\n\n----------------------------------------\n\nTITLE: Publishing work to GitHub\nDESCRIPTION: Pushes the local branch with changes to the user's GitHub repository, making it available for review and pull requests.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin ticket_xxxxx\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Admindocs Module\nDESCRIPTION: Code reference showing the Django admindocs module path affected by CVE-2021-33203 vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.24.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.admindocs\n```\n\n----------------------------------------\n\nTITLE: Clearing Prefetch Related Behavior in Django\nDESCRIPTION: Shows how to clear any prefetch_related behavior by passing None as a parameter. This is useful when you want to remove prefetching from a queryset.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n>>> non_prefetched = qs.prefetch_related(None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Templates for Sitemap Views in Django URLs\nDESCRIPTION: This Python snippet demonstrates how to specify custom templates for both the sitemap index and individual sitemap views within a Django `urls.py` file. By passing the `template_name='custom_sitemap.html'` parameter in the dictionary argument to both the `views.index` and `views.sitemap` functions within the `path()` definitions, these views will render using the specified custom template instead of the default ones.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sitemaps import views\n\nurlpatterns = [\n    path(\n        \"custom-sitemap.xml\",\n        views.index,\n        {\"sitemaps\": sitemaps, \"template_name\": \"custom_sitemap.html\"},\n        name=\"django.contrib.sitemaps.views.index\",\n    ),\n    path(\n        \"custom-sitemap-<section>.xml\",\n        views.sitemap,\n        {\"sitemaps\": sitemaps, \"template_name\": \"custom_sitemap.html\"},\n        name=\"django.contrib.sitemaps.views.sitemap\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: ReStructuredText directive configuring a table of contents with maximum depth of 2 levels, including links to API stability, design philosophies and distributions documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/misc/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   api-stability\n   design-philosophies\n   distributions\n```\n\n----------------------------------------\n\nTITLE: Referencing Django SessionMiddleware in Python\nDESCRIPTION: This snippet refers to the Django SessionMiddleware, which has been modified to address the security vulnerability by preventing the creation of empty session records.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.sessions.middleware.SessionMiddleware\n```\n\n----------------------------------------\n\nTITLE: Using General StringAgg Aggregate Function (Python/SQL)\nDESCRIPTION: The `django.db.models.StringAgg` aggregate function concatenates input values into a single string, separated by a specified delimiter. Previously PostgreSQL-only, it is now generally available for all supported database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.StringAgg\n```\n\n----------------------------------------\n\nTITLE: Checking Django Installation Version\nDESCRIPTION: Command to verify Django installation and check its version.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m django --version\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript message files with Django makemessages\nDESCRIPTION: Command for creating or updating message files specifically for JavaScript translations using the djangojs domain parameter with makemessages.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin makemessages -d djangojs -l de\n```\n\n----------------------------------------\n\nTITLE: Using Django Localtime Template Tag\nDESCRIPTION: Demonstrates how to activate/deactivate time zone conversion for a template block using the localtime tag. Requires loading the tz template tag library.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% load tz %}\n\n{% localtime on %}\n    {{ value }}\n{% endlocaltime %}\n\n{% localtime off %}\n    {{ value }}\n{% endlocaltime %}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation with Excluded Fields in Django\nDESCRIPTION: Demonstrates how to handle validation for fields that might be excluded from a ModelForm using clean_fields() method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    ...\n\n    def clean_fields(self, exclude=None):\n        super().clean_fields(exclude=exclude)\n        if self.status == \"draft\" and self.pub_date is not None:\n            if exclude and \"status\" in exclude:\n                raise ValidationError(\n                    _(\"Draft entries may not have a publication date.\")\n                )\n            else:\n                raise ValidationError(\n                    {\n                        \"status\": _(\n                            \"Set status to draft if there is not a publication date.\"\n                        ),\n                    }\n                )\n```\n\n----------------------------------------\n\nTITLE: Defining URL Pattern with Path Converter in Django URLconf\nDESCRIPTION: This snippet shows how to define a URL pattern using Django's path() function with a path converter for capturing a year parameter. It demonstrates naming the URL pattern for reverse lookup.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    # ...\n    path(\"articles/<int:year>/\", views.year_archive, name=\"news-year-archive\"),\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Subclasses of CheckMessage in Python for Django System Checks\nDESCRIPTION: This code defines subclasses of CheckMessage for common severity levels (Debug, Info, Warning, Error, Critical). These subclasses allow creating messages with pre-defined severity levels, simplifying the message creation process.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Debug(msg, hint=None, obj=None, id=None)\nclass Info(msg, hint=None, obj=None, id=None)\nclass Warning(msg, hint=None, obj=None, id=None)\nclass Error(msg, hint=None, obj=None, id=None)\nclass Critical(msg, hint=None, obj=None, id=None)\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Case-Insensitive Query in Django\nDESCRIPTION: Shows the SQL generated by Django when using the custom UpperCase transform for a case-insensitive query on the Author model.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE UPPER(\"author\".\"name\") = UPPER('doe')\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting GDALRaster Skew Attribute in Python\nDESCRIPTION: Demonstrates accessing the skew coefficients used for georeferencing through the `skew` attribute and modifying its x-component. The skew represents coefficients 2 and 4 of the geotransform; they are often zero for north-up images.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_42\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.skew\n[0.0, 0.0]\n>>> rst.skew.x = 3\n>>> rst.skew\n[3.0, 0.0]\n```\n\n----------------------------------------\n\nTITLE: Vulnerable SQL Position Function Implementation\nDESCRIPTION: Example of an unsafe implementation of a Position function that is vulnerable to SQL injection due to string interpolation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Func\n\n\nclass Position(Func):\n    function = \"POSITION\"\n    template = \"%(function)s('%(substring)s' in %(expressions)s)\"\n\n    def __init__(self, expression, substring):\n        # substring=substring is an SQL injection vulnerability!\n        super().__init__(expression, substring=substring)\n```\n\n----------------------------------------\n\nTITLE: Creating a BRIN Index in Django with PostgreSQL\nDESCRIPTION: Creates a BRIN (Block Range INdex) with options for automatic summarization and pages per range. Useful for large tables with linearly ordered data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBrinIndex(*expressions, autosummarize=None, pages_per_range=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Generating Pagination Links with Legacy Template Constructs - Django Templates\nDESCRIPTION: This snippet demonstrates how to construct a paginated navigation URL in pre-Django 5.1 using for-loops and conditional logic in Django’s template language. It manually iterates over query parameters to reconstruct the query string, excluding 'page', and appends the next page number. The required dependency is Django's template language prior to the introduction of 'querystring'. Inputs are the request GET dict and the next page number; output is a URL suitable for use in an anchor tag. Limitations include verbosity, possible errors if the structure of request.GET changes, and lack of reusability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{# Linebreaks added for readability, this should be one, long line. #}\\n<a href=\"?{% for key, values in request.GET.iterlists %}\\n  {% if key != \\\"page\\\" %}\\n    {% for value in values %}\\n      {{ key }}={{ value }}&amp;\\n    {% endfor %}\\n  {% endif %}\\n{% endfor %}page={{ page.next_page_number }}\">Next page</a>\n```\n\n----------------------------------------\n\nTITLE: Combining SearchQuery Objects Logically in Django\nDESCRIPTION: Demonstrates how to combine SearchQuery objects using logical operators for more complex queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchQuery\n>>> SearchQuery(\"meat\") & SearchQuery(\"cheese\")  # AND\n>>> SearchQuery(\"meat\") | SearchQuery(\"cheese\")  # OR\n>>> ~SearchQuery(\"meat\")  # NOT\n```\n\n----------------------------------------\n\nTITLE: Using display Decorator for Custom Admin Functions in Python\nDESCRIPTION: Shows how to use the @admin.display decorator to set specific attributes on custom display functions for use with list_display or readonly_fields in ModelAdmin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_88\n\nLANGUAGE: python\nCODE:\n```\n@admin.display(\n    boolean=True,\n    ordering=\"-publish_date\",\n    description=\"Is Published?\",\n)\ndef is_published(self, obj):\n    return obj.publish_date is not None\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default HTML Output of Django Form Fields in Python\nDESCRIPTION: Displays the rendered HTML for a basic Django form with CharField and URLField, showing its default output using the print function. Requires Django and an instance of the CommentForm; shows the difference in input types for URL and text fields as rendered HTML. Inputs are form initialization without auto-generated IDs; output is the HTML code. Useful for previewing the default widget rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> f = CommentForm(auto_id=False)\n>>> print(f)\n<div>Name:<input type=\"text\" name=\"name\" required></div>\n<div>Url:<input type=\"url\" name=\"url\" required></div>\n<div>Comment:<input type=\"text\" name=\"comment\" required></div>\n```\n\n----------------------------------------\n\nTITLE: Marking Safe Strings for HTML Output - Django - Python\nDESCRIPTION: Demonstrates usage of the mark_safe function from django.utils.safestring to explicitly mark a string as safe for HTML output, and the behavior when modifying a SafeString marked value. Requires Django installation and access to django.utils.safestring. Takes a string and returns a SafeString subclass instance, unless the string is modified (e.g., via strip), in which case the safety is lost and the result returns to being a str. Inputs: any string; Outputs: SafeString instance. Modifying operations revert the output to str.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_31\n\nLANGUAGE: pycon\nCODE:\n```\n>>> mystr = \"<b>Hello World</b>   \"\n>>> mystr = mark_safe(mystr)\n>>> type(mystr)\n<class 'django.utils.safestring.SafeString'>\n\n>>> mystr = mystr.strip()  # removing whitespace\n>>> type(mystr)\n<type 'str'>\n```\n\n----------------------------------------\n\nTITLE: Question Creation Helper and View Tests\nDESCRIPTION: Helper function to create test questions and test class for verifying index view behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef create_question(question_text, days):\n    \"\"\"\n    Create a question with the given `question_text` and published the\n    given number of `days` offset to now (negative for questions published\n    in the past, positive for questions that have yet to be published).\n    \"\"\"\n    time = timezone.now() + datetime.timedelta(days=days)\n    return Question.objects.create(question_text=question_text, pub_date=time)\n\n\nclass QuestionIndexViewTests(TestCase):\n    def test_no_questions(self):\n        \"\"\"\n        If no questions exist, an appropriate message is displayed.\n        \"\"\"\n        response = self.client.get(reverse(\"polls:index\"))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"No polls are available.\")\n        self.assertQuerySetEqual(response.context[\"latest_question_list\"], [])\n\n    def test_past_question(self):\n        \"\"\"\n        Questions with a pub_date in the past are displayed on the\n        index page.\n        \"\"\"\n        question = create_question(question_text=\"Past question.\", days=-30)\n        response = self.client.get(reverse(\"polls:index\"))\n        self.assertQuerySetEqual(\n            response.context[\"latest_question_list\"],\n            [question],\n        )\n\n    def test_future_question(self):\n        \"\"\"\n        Questions with a pub_date in the future aren't displayed on\n        the index page.\n        \"\"\"\n        create_question(question_text=\"Future question.\", days=30)\n```\n\n----------------------------------------\n\nTITLE: Accessing X Coordinate of a Point Geometry in Python\nDESCRIPTION: Shows how to get the X coordinate of a Point `OGRGeometry` ('POINT (1 2)') by accessing its `.x` attribute. It returns the floating-point value of the X coordinate.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_17\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT (1 2)\").x\n1.0\n```\n\n----------------------------------------\n\nTITLE: Annotating with Window and RowRange for Peer Average - Django ORM - Python\nDESCRIPTION: This snippet shows how to annotate each movie in a Django QuerySet with the average rating of itself and its two prior and two following peers using a window function and a RowRange frame. Requires Django, the Movie model, and appropriate fields. The frame is defined by start=-2 and end=2, meaning the moving average includes the current row and up-to-two rows before and after in the partition.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Avg, F, RowRange, Window\n>>> Movie.objects.annotate(\n...     avg_rating=Window(\n...         expression=Avg(\"rating\"),\n...         partition_by=[F(\"studio\"), F(\"genre\")],\n...         order_by=\"released__year\",\n...         frame=RowRange(start=-2, end=2),\n...     ),\n... )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Permissions Programmatically in Django\nDESCRIPTION: This code creates a custom permission for a BlogPost model. It first gets the content type for the model, then creates a permission with a specified codename, name, and content type. This permission can then be assigned to users or groups.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.models import BlogPost\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.models import ContentType\n\ncontent_type = ContentType.objects.get_for_model(BlogPost)\npermission = Permission.objects.create(\n    codename=\"can_publish\",\n    name=\"Can Publish Posts\",\n    content_type=content_type,\n)\n```\n\n----------------------------------------\n\nTITLE: Author Rating Aggregation with Values\nDESCRIPTION: Demonstrates using values() with annotations to group results by author name.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nAuthor.objects.values(\"name\").annotate(average_rating=Avg(\"book__rating\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Static Media Requirements for a Custom Widget in Django\nDESCRIPTION: Demonstrates how to create a CalendarWidget that extends TextInput and defines CSS and JavaScript requirements using a static inner Media class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass CalendarWidget(forms.TextInput):\n    class Media:\n        css = {\n            \"all\": [\"pretty.css\"],\n        }\n        js = [\"animations.js\", \"actions.js\"]\n```\n\n----------------------------------------\n\nTITLE: Explicitly Inheriting ModelAdmin Actions (Django 2.2+) in Python\nDESCRIPTION: This snippet demonstrates the updated approach in Django 2.2 and later for inheriting `ModelAdmin` actions. Standard Python inheritance rules now apply, requiring explicit concatenation of the base class's `actions` list with the subclass's list if the intention is to combine them. This code achieves the same result as the older implicit behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SubAdmin(BaseAdmin):\n    actions = BaseAdmin.actions + [\"b\"]\n```\n\n----------------------------------------\n\nTITLE: Manual Template Rendering in Django\nDESCRIPTION: Equivalent example showing manual template rendering without using the render() shortcut.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.template import loader\n\n\ndef my_view(request):\n    # View code here...\n    t = loader.get_template(\"myapp/index.html\")\n    c = {\"foo\": \"bar\"}\n    return HttpResponse(t.render(c, request), content_type=\"application/xhtml+xml\")\n```\n\n----------------------------------------\n\nTITLE: Using sensitive_post_parameters Decorator to Hide POST Data\nDESCRIPTION: This example shows how to use the sensitive_post_parameters decorator to prevent sensitive POST parameters from being included in error reports.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.debug import sensitive_post_parameters\n\n\n@sensitive_post_parameters(\"pass_word\", \"credit_card_number\")\ndef record_user_profile(request):\n    UserProfile.create(\n        user=request.user,\n        password=request.POST[\"pass_word\"],\n        credit_card=request.POST[\"credit_card_number\"],\n        name=request.POST[\"name\"],\n    )\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing makemessages with additional xgettext options\nDESCRIPTION: Extends the Django makemessages command to pass additional options to xgettext by overriding the xgettext_options attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management.commands import makemessages\n\n\nclass Command(makemessages.Command):\n    xgettext_options = makemessages.Command.xgettext_options + [\"--keyword=mytrans\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Django Async Unsafe Environment Variable\nDESCRIPTION: Code to set the DJANGO_ALLOW_ASYNC_UNSAFE environment variable in Python to allow sync code execution in async contexts. This should be used with caution, especially in production environments.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default From Email Address in Django\nDESCRIPTION: Specifies the default email address ('webmaster@localhost') used in the 'From:' header for automated site correspondence. This does not affect error emails sent to ADMINS/MANAGERS (see SERVER_EMAIL).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_FROM_EMAIL = 'webmaster@localhost'\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Message Tags in Django Messages Framework\nDESCRIPTION: Shows how to add additional CSS or identifier tags to messages for more granular control over styling and behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmessages.add_message(request, messages.INFO, \"Over 9000!\", extra_tags=\"dragonball\")\nmessages.error(request, \"Email box full\", extra_tags=\"email\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixed Public/Private Caching with patch_cache_control\nDESCRIPTION: Demonstrates how to conditionally set cache directives based on user authentication using patch_cache_control. Public entries are cached publicly, while authenticated user views are cached privately.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import patch_cache_control\nfrom django.views.decorators.vary import vary_on_cookie\n\n\n@vary_on_cookie\ndef list_blog_entries_view(request):\n    if request.user.is_anonymous:\n        response = render_only_public_entries()\n        patch_cache_control(response, public=True)\n    else:\n        response = render_private_and_public_entries(request.user)\n        patch_cache_control(response, private=True)\n\n    return response\n```\n\n----------------------------------------\n\nTITLE: Using naturalday Filter in Django Template\nDESCRIPTION: Shows how the naturalday filter converts dates to 'today', 'tomorrow', or 'yesterday' when appropriate.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_4\n\nLANGUAGE: django\nCODE:\n```\n{{ date|naturalday }} becomes yesterday.\n{{ date|naturalday }} becomes today.\n{{ date|naturalday }} becomes tomorrow.\n```\n\n----------------------------------------\n\nTITLE: Creating Django Template for Polls List\nDESCRIPTION: HTML template that displays a list of poll questions with links to their detail pages. Uses Django template language for conditional rendering and iteration.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% if latest_question_list %}\n    <ul>\n    {% for question in latest_question_list %}\n        <li><a href=\"/polls/{{ question.id }}/\">{{ question.question_text }}</a></li>\n    {% endfor %}\n    </ul>\n{% else %}\n    <p>No polls are available.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Effect of Bulk Deleting Objects on M2M Relationships (pycon)\nDESCRIPTION: Demonstrates the effect of performing a bulk delete operation on `Publication` instances matching a filter (`title__startswith=\"Science\"`). The subsequent query for all `Publication` objects shows that only the non-deleted ones remain, implicitly removing the M2M relationships associated with the deleted publications.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_28\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Publication.objects.filter(title__startswith=\"Science\").delete()\n>>> Publication.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Flatpage Template in Django\nDESCRIPTION: Provides an example of a basic HTML template for rendering flatpages. This template uses the flatpage context variable to display the page title and content.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>{{ flatpage.title }}</title>\n</head>\n<body>\n{{ flatpage.content }}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for QuerySet.aggregate() crash after annotate()\nDESCRIPTION: This snippet references a Django ticket number for a bug that caused a crash of QuerySet.aggregate() after annotate() on an aggregate function with a default in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33468`\n```\n\n----------------------------------------\n\nTITLE: Using Ord Function in Django ORM\nDESCRIPTION: Example of using the Ord function to get Unicode code point of first character\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Ord\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(name_code_point=Ord(\"name\")).get()\n>>> print(author.name_code_point)\n77\n```\n\n----------------------------------------\n\nTITLE: Running Django Testserver with Custom Port and Fixtures\nDESCRIPTION: Examples of using the Django testserver command with different port configurations and fixture files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_23\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin testserver --addrport 7000 fixture1 fixture2\ndjango-admin testserver fixture1 fixture2 --addrport 7000\n```\n\n----------------------------------------\n\nTITLE: Creating User Message with Deprecated API (Python)\nDESCRIPTION: This snippet shows the deprecated method (pre-Django 1.2) of adding a message for a user using `user.message_set.create()`. This API relied directly on the `Message` model and is replaced by the messages framework in `django.contrib.messages`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nuser.message_set.create(\"a message\")\n```\n\n----------------------------------------\n\nTITLE: Defining DateDetailView Class in Django\nDESCRIPTION: Declaration of the DateDetailView class, which is a generic view for displaying a single object on a specific date. It combines functionality from date-based and detail view mixins.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass DateDetailView():\n```\n\n----------------------------------------\n\nTITLE: Saving a Model Instance in Django Shell (pycon)\nDESCRIPTION: Saves the previously created `Article` instance (`a1`) to the database using the `save()` method. This assigns it a primary key, allowing relationships to be added.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a1.save()\n```\n\n----------------------------------------\n\nTITLE: Custom Vendor SQL Generation by Overriding as_sql in Func Subclasses - Django ORM - Python\nDESCRIPTION: This snippet demonstrates how to override the as_sql method in a Django Func subclass (ConcatPair) to customize SQL rendering for specific database vendors, such as MySQL. It changes the SQL function from CONCAT to CONCAT_WS, adapting the SQL template accordingly. Intended for advanced users writing reusable custom database functions. The example assumes that this subclass will only be used where the specific SQL modifications are needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass ConcatPair(Func):\n    ...\n    function = \"CONCAT\"\n    ...\n\n    def as_mysql(self, compiler, connection, **extra_context):\n        return super().as_sql(\n            compiler,\n            connection,\n            function=\"CONCAT_WS\",\n            template=\"%(function)s('', %(expressions)s)\",\n            **extra_context\n        )\n```\n\n----------------------------------------\n\nTITLE: Chaining annotate() before values() with Transforms Python\nDESCRIPTION: Another equivalent method showing how to apply an annotation (with a transform and related lookup) before the values() call. This explicitly separates the annotation step from the selection of fields in values() and subsequent aggregation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n>>> Blog.objects.annotate(entry__authors__name__lower=Lower(\"entry__authors__name\")).values(\n...     \"entry__authors__name__lower\"\n... ).annotate(entries=Count(\"entry\"))\n```\n\n----------------------------------------\n\nTITLE: Using Subquery in Django ORM Annotations (Python)\nDESCRIPTION: Shows how to use a Subquery expression to annotate each post with the email address of the author of the newest comment. It demonstrates filtering, ordering, and limiting the subquery results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import OuterRef, Subquery\nnewest = Comment.objects.filter(post=OuterRef(\"pk\")).order_by(\"-created_at\")\nPost.objects.annotate(newest_commenter_email=Subquery(newest.values(\"email\")[:1]))\n```\n\n----------------------------------------\n\nTITLE: Using urlize Filter in Django Templates\nDESCRIPTION: Demonstrates the urlize filter, which converts URLs and email addresses in text into clickable links. It supports various link formats and adds rel=\"nofollow\" attribute to generated links.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_100\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|urlize }}\n```\n\n----------------------------------------\n\nTITLE: Including App URLs in Django Project URLconf\nDESCRIPTION: Demonstrates how to include an app's URLs in the main project URLconf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\npath(\"clients/\", include(\"project_name.app_name.urls\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Views for Django Polls App\nDESCRIPTION: This snippet showcases the implementation of generic views for a Django polls application. It includes ListView for the index page and DetailView for both detail and results pages. The vote function remains unchanged. The views are customized using attributes like template_name and context_object_name.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import F\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\nfrom django.views import generic\n\nfrom .models import Choice, Question\n\n\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]\n\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = \"polls/detail.html\"\n\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = \"polls/results.html\"\n\n\ndef vote(request, question_id):\n    # same as above, no changes needed.\n    ...\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of Complex Django Q Object Query\nDESCRIPTION: Displays the SQL representation of a complex Django query using Q objects with AND and OR conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from polls WHERE question LIKE 'Who%'\n    AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Signal Sending in Django\nDESCRIPTION: This example illustrates how to send a signal asynchronously using the asend() method. It's implemented as an async function that must be awaited, demonstrating the integration of async/await syntax with Django's signal system.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def asend_pizza(self, toppings, size):\n    await pizza_done.asend(sender=self.__class__, toppings=toppings, size=size)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Middleware Settings Modification with Decorator in Django\nDESCRIPTION: Shows how to use the modify_settings decorator to alter middleware configuration at the method level in Django tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase, modify_settings\n\n\nclass MiddlewareTestCase(TestCase):\n    @modify_settings(\n        MIDDLEWARE={\n            \"append\": \"django.middleware.cache.FetchFromCacheMiddleware\",\n            \"prepend\": \"django.middleware.cache.UpdateCacheMiddleware\",\n        }\n    )\n    def test_cache_middleware(self):\n        response = self.client.get(\"/\")\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Test Settings for Reusable Applications\nDESCRIPTION: This snippet shows a minimal configuration for test settings in a reusable Django application, including setting a fake SECRET_KEY and specifying the INSTALLED_APPS.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nSECRET_KEY = \"fake-key\"\nINSTALLED_APPS = [\n    \"tests\",\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by ISO Year - Django ORM (Python)\nDESCRIPTION: Filters records by the ISO 8601 week-numbering year using '__iso_year' lookups in Django. Requires understanding of ISO weeks and that some years may overlap calendar years. Inputs are integers, outputs are QuerySets matching the ISO year. Similar to year filtering, but aligned to week-based calendar rules. USE_TZ option applies for time zone conversion.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(pub_date__iso_year=2005)\nEntry.objects.filter(pub_date__iso_year__gte=2005)\n```\n\n----------------------------------------\n\nTITLE: Using querystring Tag for Pagination in Django Templates\nDESCRIPTION: This example demonstrates preserving the current query string when displaying paginated results, while adding a link to the next page. This is a common use case for the querystring tag.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_32\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring page=page.next_page_number %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Model in Django\nDESCRIPTION: Example of defining a Person model with first_name, last_name, and birth_date fields in Django's ORM. This model serves as the foundation for raw SQL query examples.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    first_name = models.CharField(...)\n    last_name = models.CharField(...)\n    birth_date = models.DateField(...)\n```\n\n----------------------------------------\n\nTITLE: Naive vs Aware DateTime Comparison\nDESCRIPTION: Example showing TypeError when comparing naive and aware datetimes in Python.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.utils import timezone\n>>> aware = timezone.now()\n>>> naive = timezone.make_naive(aware)\n>>> naive == aware\nTraceback (most recent call last):\n...\nTypeError: can't compare offset-naive and offset-aware datetimes\n```\n\n----------------------------------------\n\nTITLE: Accessing Media Property of a Widget Instance in Django\nDESCRIPTION: Shows how to retrieve the media property from a CalendarWidget instance, which returns HTML for including the required CSS and JavaScript files.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> w = CalendarWidget()\n>>> print(w.media)\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://static.example.com/actions.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Comparing Datetime Objects Across Time Zones in Python\nDESCRIPTION: This snippet demonstrates how to work with datetime objects in different time zones, showing the complexities of date comparisons and conversions. It uses the zoneinfo module to create time zone aware datetime objects for Paris and New York.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> import datetime\n>>> import zoneinfo\n>>> paris_tz = zoneinfo.ZoneInfo(\"Europe/Paris\")\n>>> new_york_tz = zoneinfo.ZoneInfo(\"America/New_York\")\n>>> paris = datetime.datetime(2012, 3, 3, 1, 30, tzinfo=paris_tz)\n# This is the correct way to convert between time zones.\n>>> new_york = paris.astimezone(new_york_tz)\n>>> paris == new_york, paris.date() == new_york.date()\n(True, False)\n>>> paris - new_york, paris.date() - new_york.date()\n(datetime.timedelta(0), datetime.timedelta(1))\n>>> paris\ndatetime.datetime(2012, 3, 3, 1, 30, tzinfo=zoneinfo.ZoneInfo(key='Europe/Paris'))\n>>> new_york\ndatetime.datetime(2012, 3, 2, 19, 30, tzinfo=zoneinfo.ZoneInfo(key='America/New_York'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Values and Geometries from GDAL Layer in Python\nDESCRIPTION: Examples showing how to retrieve field values and geometries from a GDAL Layer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> layer.get_fields(\"Name\")\n['Pueblo', 'Lawrence', 'Houston']\n>>> [pt.tuple for pt in layer.get_geoms()]\n[(-104.609252, 38.255001), (-95.23506, 38.971823), (-95.363151, 29.763374)]\n```\n\n----------------------------------------\n\nTITLE: GDALBand Data Manipulation\nDESCRIPTION: Shows various methods of reading and writing pixel data in a GDALBand, including array operations, block access, and data shaping. Demonstrates NumPy array integration and different input formats.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n>>> rst = GDALRaster(\n...     {\"width\": 4, \"height\": 4, \"srid\": 4326, \"datatype\": 1, \"nr_of_bands\": 1}\n... )\n>>> bnd = rst.bands[0]\n>>> bnd.data(range(16))\n>>> bnd.data()\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15]], dtype=int8)\n>>> bnd.data(offset=(1, 1), size=(2, 2))\narray([[ 5,  6],\n       [ 9, 10]], dtype=int8)\n>>> bnd.data(data=[-1, -2, -3, -4], offset=(1, 1), size=(2, 2))\n>>> bnd.data()\narray([[ 0,  1,  2,  3],\n       [ 4, -1, -2,  7],\n       [ 8, -3, -4, 11],\n       [12, 13, 14, 15]], dtype=int8)\n>>> bnd.data(data=\"\\x9d\\xa8\\xb3\\xbe\", offset=(1, 1), size=(2, 2))\n>>> bnd.data()\narray([[  0,   1,   2,   3],\n       [  4, -99, -88,   7],\n       [  8, -77, -66,  11],\n       [ 12,  13,  14,  15]], dtype=int8)\n>>> bnd.data([1], shape=(1, 1))\n>>> bnd.data()\narray([[1, 1, 1, 1],\n       [1, 1, 1, 1],\n       [1, 1, 1, 1],\n       [1, 1, 1, 1]], dtype=uint8)\n>>> bnd.data(range(4), shape=(1, 4))\narray([[0, 0, 0, 0],\n       [1, 1, 1, 1],\n       [2, 2, 2, 2],\n       [3, 3, 3, 3]], dtype=uint8)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'lower_inc' Lookup in Django Python\nDESCRIPTION: Demonstrates the `lower_inc` lookup (`__lower_inc`) on the `ages` field. This query filters `Event` objects based on whether their `ages` range has an inclusive lower bound (represented by `[` in PostgreSQL). Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_31\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__lower_inc=True)\n<QuerySet [<Event: Soft play>, <Event: Pub trip>]>\n```\n\n----------------------------------------\n\nTITLE: Example Hashed CSS Output After Processing\nDESCRIPTION: This CSS snippet shows the result after Django's `ManifestStaticFilesStorage` processes a file containing an `@import` rule. The original path (`../admin/css/base.css`) is replaced with its corresponding hashed version (`../admin/css/base.27e20196a850.css`), demonstrating the core functionality of the storage backend.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.. code-block:: css\n\n    @import url(\"../admin/css/base.27e20196a850.css\");\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Name and Driver in Python\nDESCRIPTION: Demonstrates how to access the name (file path) and the driver name of a GDALRaster object after its creation. Assumes a `GDALRaster` object `rst` has been previously initialized, potentially from a file, as shown in the surrounding context example.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_34\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst.name\n'/tmp/tmp7x9H4J.tif'           # The exact filename will be different on your computer\n>>> rst.driver.name\n'GTiff'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Exception Reporter Filter in Django\nDESCRIPTION: Sets the default exception reporter filter class ('django.views.debug.SafeExceptionReporterFilter') used if none is assigned to the HttpRequest instance. This allows filtering of sensitive information in error reports.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch with Deferred Fields for Performance Optimization\nDESCRIPTION: Shows how to use performance optimization techniques like deferred fields with Prefetch. This example only loads the name field of the Pizza model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n>>> queryset = Pizza.objects.only(\"name\")\n>>>\n>>> restaurants = Restaurant.objects.prefetch_related(\n...     Prefetch(\"best_pizza\", queryset=queryset)\n... )\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings Manually in Python\nDESCRIPTION: Shows how to configure Django settings manually using the configure() function, useful when bypassing DJANGO_SETTINGS_MODULE.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\n\nsettings.configure(DEBUG=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions for Uploaded File Directories in Django\nDESCRIPTION: Sets the numeric mode (None by default, meaning OS-dependent) applied to directories created during file uploads. Also affects default permissions for collected static directories.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nFILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Class-Based Django Middleware\nDESCRIPTION: Shows how to create an asynchronous class-based middleware with proper coroutine function marking.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import iscoroutinefunction, markcoroutinefunction\n\nclass AsyncMiddleware:\n    async_capable = True\n    sync_capable = False\n\n    def __init__(self, get_response):\n        self.get_response = get_response\n        if iscoroutinefunction(self.get_response):\n            markcoroutinefunction(self)\n\n    async def __call__(self, request):\n        response = await self.get_response(request)\n        # Some logic ...\n        return response\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Class\nDESCRIPTION: This command shows how to run a single test class from the Django test suite, specifically the TranslationTests class from the i18n module, using a custom settings file.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ./runtests.py --settings=path.to.settings i18n.tests.TranslationTests\n```\n\n----------------------------------------\n\nTITLE: Asset Ordering in Combined Media\nDESCRIPTION: Shows how asset order is preserved when combining Media objects with dependencies\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class CalendarWidget(forms.TextInput):\n...     class Media:\n...         js = [\"jQuery.js\", \"calendar.js\", \"noConflict.js\"]\n...\n>>> class TimeWidget(forms.TextInput):\n...     class Media:\n...         js = [\"jQuery.js\", \"time.js\", \"noConflict.js\"]\n...\n>>> w1 = CalendarWidget()\n>>> w2 = TimeWidget()\n>>> print(w1.media + w2.media)\n<script src=\"https://static.example.com/jQuery.js\"></script>\n<script src=\"https://static.example.com/calendar.js\"></script>\n<script src=\"https://static.example.com/time.js\"></script>\n<script src=\"https://static.example.com/noConflict.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Saving a File to a Django Model Instance\nDESCRIPTION: Demonstrates an equivalent way to save a new file to a Django model instance using a single line of code. This method automatically saves the model instance after saving the file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/file.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> car.photo.save(\"myphoto.jpg\", content, save=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring PersonAdmin with List Display Links\nDESCRIPTION: Shows how to configure PersonAdmin with multiple linked fields in the admin list display.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"first_name\", \"last_name\", \"birthday\"]\n    list_display_links = [\"first_name\", \"last_name\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Empty GEOS Point Objects in Python\nDESCRIPTION: Shows two equivalent methods for instantiating an empty `Point` object within Django's GEOS framework. An empty point can be created either by calling the `Point` constructor with no arguments or by passing an empty sequence (like an empty list) to the constructor.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pnt = Point()\n>>> pnt = Point([])\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Closed GEOS LinearRing in Python\nDESCRIPTION: Demonstrates the creation of a `LinearRing` object using a sequence of coordinate tuples. A `LinearRing` is a specific type of `LineString` that must be closed, meaning its first and last coordinates must be identical, as shown with `(0, 0)` in the example. Providing non-closing coordinates would raise an error.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ls = LinearRing((0, 0), (0, 1), (1, 1), (0, 0))\n```\n\n----------------------------------------\n\nTITLE: Defining QuerySet methods with custom copying rules in Django\nDESCRIPTION: Demonstrates how to control which methods from a custom QuerySet are copied to the Manager. Methods can be marked with queryset_only attribute to control their availability at the Manager level.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass CustomQuerySet(models.QuerySet):\n    # Available on both Manager and QuerySet.\n    def public_method(self):\n        return\n\n    # Available only on QuerySet.\n    def _private_method(self):\n        return\n\n    # Available only on QuerySet.\n    def opted_out_public_method(self):\n        return\n\n    opted_out_public_method.queryset_only = True\n\n    # Available on both Manager and QuerySet.\n    def _opted_in_private_method(self):\n        return\n\n    _opted_in_private_method.queryset_only = False\n```\n\n----------------------------------------\n\nTITLE: Django Ignorable 404 URLs Regular Expressions\nDESCRIPTION: Specifies `IGNORABLE_404_URLS`, a list of compiled regex objects matching URLs to ignore in 404 error reports. Defaults to an empty list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_48\n\nLANGUAGE: plaintext\nCODE:\n```\nIGNORABLE_404_URLS\n----------------------\n\nDefault: `[]` (Empty list)\n\nList of compiled regular expression objects describing URLs that should be\nignored when reporting HTTP 404 errors via email (see\n:doc:`/howto/error-reporting`). Regular expressions are matched against\n:meth:`request's full paths <django.http.HttpRequest.get_full_path>` (including\nquery string, if any). Use this if your site does not provide a commonly\nrequested file such as `favicon.ico` or `robots.txt`.\n\nThis is only used if\n:class:`~django.middleware.common.BrokenLinkEmailsMiddleware` is enabled (see\n:doc:`/topics/http/middleware`).\n```\n\n----------------------------------------\n\nTITLE: Defining MinValueValidator in Django\nDESCRIPTION: Validator class that checks if a value is below a minimum limit. Raises ValidationError if the value is less than the specified limit_value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMinValueValidator(limit_value, message=None)\n```\n\n----------------------------------------\n\nTITLE: Using a Callable for Dynamic Storage Selection in Django\nDESCRIPTION: Example showing how to use a callable function to dynamically select different storage backends based on environment conditions, such as using local storage for development and remote storage for production.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.db import models\nfrom .storages import MyLocalStorage, MyRemoteStorage\n\n\ndef select_storage():\n    return MyLocalStorage() if settings.DEBUG else MyRemoteStorage()\n\n\nclass MyModel(models.Model):\n    my_file = models.FileField(storage=select_storage)\n```\n\n----------------------------------------\n\nTITLE: Contains Lookup for JSONField in Django\nDESCRIPTION: Demonstrates the contains lookup which returns objects where all the given key-value pairs are contained in the top level of the JSONField.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\", \"owner\": \"Bob\"})\n<Dog: Rufus>\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\n<Dog: Meg>\n>>> Dog.objects.create(name=\"Fred\", data={})\n<Dog: Fred>\n>>> Dog.objects.create(\n...     name=\"Merry\", data={\"breed\": \"pekingese\", \"tricks\": [\"fetch\", \"dance\"]}\n... )\n>>> Dog.objects.filter(data__contains={\"owner\": \"Bob\"})\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>\n>>> Dog.objects.filter(data__contains={\"breed\": \"collie\"})\n<QuerySet [<Dog: Meg>]>\n>>> Dog.objects.filter(data__contains={\"tricks\": [\"dance\"]})\n<QuerySet [<Dog: Merry>]>\n```\n\n----------------------------------------\n\nTITLE: Excluding Common Browser and Crawler Requests from 404 Reporting\nDESCRIPTION: This code snippet shows how to configure IGNORABLE_404_URLS to exclude common URLs that browsers and web crawlers often request, reducing noise in 404 error reports.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nIGNORABLE_404_URLS = [\n    re.compile(r\"^/apple-touch-icon.*\\.png$\"),\n    re.compile(r\"^/favicon\\.ico$\"),\n    re.compile(r\"^/robots\\.txt$\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents for Django FAQ in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Django FAQ documentation using reStructuredText syntax. It specifies a maximum depth of 2 levels and includes links to various FAQ topic pages.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   general\n   install\n   usage\n   help\n   models\n   admin\n   contributing\n   troubleshooting\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Django Template Tag - Python Implementation\nDESCRIPTION: Python implementation of a custom 'upper' template tag that capitalizes all content between {% upper %} and {% endupper %}. Demonstrates parser usage, node creation, and content rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ndef do_upper(parser, token):\n    nodelist = parser.parse((\"endupper\",))\n    parser.delete_first_token()\n    return UpperNode(nodelist)\n\n\nclass UpperNode(template.Node):\n    def __init__(self, nodelist):\n        self.nodelist = nodelist\n\n    def render(self, context):\n        output = self.nodelist.render(context)\n        return output.upper()\n```\n\n----------------------------------------\n\nTITLE: Example Old Sequential Filename Suffixes\nDESCRIPTION: Shows the old method used by `Storage.get_available_name()` for generating unique filenames, which involved appending an underscore followed by a sequential number. This iterative approach could lead to performance degradation and a denial-of-service vulnerability due to numerous `os.stat()` system calls when many files with the same name were uploaded.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.9.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"_1\", \"_2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Django Model Field (Pre-1.2) in Python\nDESCRIPTION: This snippet shows the structure of a custom Django `Field` subclass before version 1.2. It defines methods like `db_type`, `get_db_prep_save`, `get_db_prep_value`, and `get_db_prep_lookup` for handling database type definition and value preparation for saving, general use, and lookups, respectively. This API assumed a single database connection and is contrasted with the changes introduced in Django 1.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CustomModelField(models.Field):\n    ...\n\n    def db_type(self): ...\n\n    def get_db_prep_save(self, value): ...\n\n    def get_db_prep_value(self, value): ...\n\n    def get_db_prep_lookup(self, lookup_type, value): ...\n```\n\n----------------------------------------\n\nTITLE: Python DateTime Edge Case Example\nDESCRIPTION: Demonstrates an edge case when subtracting one year from a datetime in Python.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> import datetime\n>>> def one_year_before(value):  # Wrong example.\n...     return value.replace(year=value.year - 1)\n...\n>>> one_year_before(datetime.datetime(2012, 3, 1, 10, 0))\ndatetime.datetime(2011, 3, 1, 10, 0)\n>>> one_year_before(datetime.datetime(2012, 2, 29, 10, 0))\nTraceback (most recent call last):\n...\nValueError: day is out of range for month\n```\n\n----------------------------------------\n\nTITLE: MySQL Query Reference\nDESCRIPTION: SQL query referenced in MySQL connection bugfix that previously caused crashes when not returning results.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT @@SQL_AUTO_IS_NULL\n```\n\n----------------------------------------\n\nTITLE: Implementing CycleNode Render Logic in Python\nDESCRIPTION: This Python snippet defines the `render` method for a Django template Node (`CycleNode`). It manages state specific to the rendering process by storing an `itertools.cycle` iterator in the `context.render_context` dictionary, keyed by the node instance (`self`). This ensures each `CycleNode` instance maintains its own cycle state within a template render, preventing conflicts. On each call, it retrieves the iterator (or creates it if not present) and returns the next value.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n        def __init__(self, cyclevars):\n            self.cyclevars = cyclevars\n\n        def render(self, context):\n            if self not in context.render_context:\n                context.render_context[self] = itertools.cycle(self.cyclevars)\n            cycle_iter = context.render_context[self]\n            return next(cycle_iter)\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Table Names with Quoted Identifiers in Django Models (Python)\nDESCRIPTION: Shows using a quoted string, potentially including the schema/owner, for the `db_table` attribute in a model's `Meta` class. This allows accessing tables belonging to other users or those with names exceeding Oracle's limits or containing special characters, bypassing Django's default identifier handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass ForeignModel(models.Model):\n    class Meta:\n        db_table = '\"OTHER_USER\".\"NAME_ONLY_SEEMS_OVER_30\"'\n```\n\n----------------------------------------\n\nTITLE: Backward-Compatible Event Listener for Django < 4.1\nDESCRIPTION: This JavaScript snippet provides a backward-compatible way to handle inline form events in Django versions older than 4.1. It uses jQuery for older versions and falls back to the modern event listener for newer versions, checking for the presence of 'event.detail.formsetName'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/javascript.txt#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleFormsetAdded(row, formsetName) {\n    // Do something\n}\n\n$(document).on('formset:added', (event, $row, formsetName) => {\n    if (event.detail && event.detail.formsetName) {\n        // Django >= 4.1\n        handleFormsetAdded(event.target, event.detail.formsetName)\n    } else {\n        // Django < 4.1, use $row and formsetName\n        handleFormsetAdded($row.get(0), formsetName)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Chaining `etag` and `last_modified` Decorators in Python\nDESCRIPTION: Presents an incorrect example of attempting to use both ETag and Last-Modified checks by chaining the `@etag` and `@last_modified` decorators. This pattern leads to incorrect behavior because the decorators act independently. The `condition` decorator should be used instead for simultaneous checks.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Bad code. Don't do this!\n@etag(etag_func)\n@last_modified(last_modified_func)\ndef my_view(request): ...\n\n\n# End of bad code.\n```\n\n----------------------------------------\n\nTITLE: Relationship Spanning in Django Queries\nDESCRIPTION: Shows how to traverse relationships in queries using double underscore notation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(blog__name=\"Beatles Blog\")\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> Blog.objects.filter(entry__headline__contains=\"Lennon\")\n```\n\n----------------------------------------\n\nTITLE: Resolving URLs in Django Templates using the url Tag\nDESCRIPTION: Shows how to use the url template tag to resolve a URL in a Django template, using the polls namespace.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n{% url 'polls:index' %}\n```\n\n----------------------------------------\n\nTITLE: Overriding get_context_data in Django ContextMixin\nDESCRIPTION: Shows how to override the get_context_data method in a Django view that uses ContextMixin. This method allows you to add custom data to the template context, such as a random number in this example.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-simple.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_context_data(self, **kwargs):\n    context = super().get_context_data(**kwargs)\n    context[\"number\"] = random.randrange(1, 100)\n    return context\n```\n\n----------------------------------------\n\nTITLE: Accessing Cleaned Data after Validation in Django Forms - Python\nDESCRIPTION: Demonstrates accessing the cleaned_data attribute after form validation, which contains a dictionary of validated and normalized field values. Only valid fields are included in the dictionary. Requires the form to be bound and is_valid() to return True. Output is a dictionary of clean values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\\n...     \\\"subject\\\": \\\"hello\\\",\\n...     \\\"message\\\": \\\"Hi there\\\",\\n...     \\\"sender\\\": \\\"foo@example.com\\\",\\n...     \\\"cc_myself\\\": True,\\n... }\\n>>> f = ContactForm(data)\\n>>> f.is_valid()\\nTrue\\n>>> f.cleaned_data\\n{'cc_myself': True, 'message': 'Hi there', 'sender': 'foo@example.com', 'subject': 'hello'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Feed Properties in Django\nDESCRIPTION: Core configuration options for Django feeds including categories, copyright notice, and TTL settings. Demonstrates both method-based and attribute-based approaches.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nauthor_link = \"https://www.example.com/\"  # Hard-coded author URL.\n\ncategories = [\"python\", \"django\"]  # Hard-coded list of categories.\n\nfeed_copyright = \"Copyright (c) 2007, Sally Smith\"  # Hard-coded copyright notice.\n\nttl = 600  # Hard-coded Time To Live.\n```\n\n----------------------------------------\n\nTITLE: Translating ForeignKey Verbose Names in Django Models\nDESCRIPTION: Shows how to make the verbose name of a ForeignKey relationship translatable using gettext_lazy(), allowing for localized field names in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass MyThing(models.Model):\n    kind = models.ForeignKey(\n        ThingKind,\n        on_delete=models.CASCADE,\n        related_name=\"kinds\",\n        verbose_name=_(\"kind\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Tan Function in Django Models\nDESCRIPTION: Shows how to calculate tangent values and register Tan as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Tan\n>>> Vector.objects.create(x=0, y=12)\n>>> vector = Vector.objects.annotate(x_tan=Tan(\"x\"), y_tan=Tan(\"y\")).get()\n>>> vector.x_tan, vector.y_tan\n(0.0, -0.6358599286615808)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Tan\n>>> FloatField.register_lookup(Tan)\n>>> # Get vectors whose tangent is less than 0\n>>> vectors = Vector.objects.filter(x__tan__lt=0, y__tan__lt=0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined FormMixin and DetailView in Django\nDESCRIPTION: Example of combining FormMixin with DetailView to handle both form processing and detail display. Includes form validation and authentication checks.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.http import HttpResponseForbidden\nfrom django.urls import reverse\nfrom django.views.generic import DetailView\nfrom django.views.generic.edit import FormMixin\nfrom books.models import Author\n\n\nclass AuthorInterestForm(forms.Form):\n    message = forms.CharField()\n\n\nclass AuthorDetailView(FormMixin, DetailView):\n    model = Author\n    form_class = AuthorInterestForm\n\n    def get_success_url(self):\n        return reverse(\"author-detail\", kwargs={\"pk\": self.object.pk})\n\n    def post(self, request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            return HttpResponseForbidden()\n        self.object = self.get_object()\n        form = self.get_form()\n        if form.is_valid():\n            return self.form_valid(form)\n        else:\n            return self.form_invalid(form)\n\n    def form_valid(self, form):\n        return super().form_valid(form)\n```\n\n----------------------------------------\n\nTITLE: Running GeoDjango Tests Only\nDESCRIPTION: Shell command to run only the GeoDjango test suite using specific settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ ./runtests.py --settings=postgis gis_tests\n```\n\n----------------------------------------\n\nTITLE: Using Callable Views in Django URLconfs\nDESCRIPTION: Illustrates the enhancement in Django 0.96 URLconfs allowing direct use of callable view functions instead of only strings referencing them. The first snippet shows the older style using a string path to the view. The second snippet demonstrates the new, more direct style where the imported view function itself is used as the callback in the URL pattern definition.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\n\nurlpatterns = patterns(\"\", (\"^myview/$\", \"mysite.myapp.views.myview\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\nfrom mysite.myapp.views import myview\n\nurlpatterns = patterns(\"\", (\"^myview/$\", myview))\n```\n\n----------------------------------------\n\nTITLE: Overriding Default AdminSite with Custom AppConfig (Python)\nDESCRIPTION: This code demonstrates how to override the default AdminSite by creating a custom AppConfig with a custom AdminSite subclass.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_81\n\nLANGUAGE: Python\nCODE:\n```\n# myproject/admin.py\nfrom django.contrib import admin\n\n\nclass MyAdminSite(admin.AdminSite): ...\n\n# myproject/apps.py\nfrom django.contrib.admin.apps import AdminConfig\n\n\nclass MyAdminConfig(AdminConfig):\n    default_site = \"myproject.admin.MyAdminSite\"\n\n# myproject/settings.py\nINSTALLED_APPS = [\n    # ...\n    \"myproject.apps.MyAdminConfig\",  # replaces 'django.contrib.admin'\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Sorting List of Dictionaries by Nested Key Using Dictsort in Django Templates - HTML+Django\nDESCRIPTION: Demonstrates advanced usage of the 'dictsort' filter with a nested key ('author.age'). This is used within a for loop to iterate and display sorted books by author age. Requires a list of dictionaries with nested structures. Output is an ordered sequence for template rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_60\n\nLANGUAGE: html+django\nCODE:\n```\n{% for book in books|dictsort:\"author.age\" %}\n    * {{ book.title }} ({{ book.author.name }})\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Accessing HEX WKB Representation of OGRGeometry in Python\nDESCRIPTION: Shows how to retrieve the hexadecimal Well-Known Binary (WKB) representation of an `OGRGeometry` object ('POINT(1 2)') by accessing its `.hex` attribute. This returns the geometry's binary data encoded as a hex string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT(1 2)\").hex\n'0101000000000000000000F03F0000000000000040'\n```\n\n----------------------------------------\n\nTITLE: Accessing LineString Coordinates as a Tuple of Tuples in Python\nDESCRIPTION: Demonstrates accessing the coordinates of a LineString `OGRGeometry` ('LINESTRING (1 2,3 4)') as a tuple of coordinate tuples using the `.tuple` attribute. Each inner tuple represents a point (x, y) along the line.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_16\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"LINESTRING (1 2,3 4)\").tuple\n((1.0, 2.0), (3.0, 4.0))\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Date Filter in Django Templates - HTML+Django\nDESCRIPTION: Shows how to use the \"date\" template filter to format a datetime variable within a Django template. Requires Django templating environment and a context variable (value) containing a datetime object. The filter string specifies the output format. Input is any valid datetime; output is a string formatted according to the given pattern. Limitations depend on the available format specifiers and current locale.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_51\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|date:\"D d M Y\" }}\n```\n\n----------------------------------------\n\nTITLE: Defining a custom Manager in an abstract base model in Django\nDESCRIPTION: Shows how to create an abstract base model with a custom Manager. Child classes will inherit this Manager by default unless overridden.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AbstractBase(models.Model):\n    # ...\n    objects = CustomManager()\n\n    class Meta:\n        abstract = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Backend in Django\nDESCRIPTION: Setting up a custom cache backend in Django settings using the Python import path. This allows for using customized or third-party cache backends.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"path.to.backend\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Server-Side Binding in Django\nDESCRIPTION: Setting up server-side parameters binding in PostgreSQL using the OPTIONS configuration in Django's DATABASES setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        # ...\n        \"OPTIONS\": {\n            \"server_side_binding\": True,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming GDALRaster SRS using the transform Method in Python\nDESCRIPTION: Shows how to reproject a GDALRaster to a different spatial reference system (SRS) using the `transform` method. It initializes a raster with SRID 3086 and then transforms it to SRID 4326 (WGS84), demonstrating the resulting change in origin coordinates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_46\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.gdal import SpatialReference # Assuming necessary import\n>>> rst = GDALRaster(\n...     {\n...         \"width\": 6,\n...         \"height\": 6,\n...         \"srid\": 3086,\n...         \"origin\": [500000, 400000],\n...         \"scale\": [100, -100],\n...         \"bands\": [{\"data\": range(36), \"nodata_value\": 99}],\n...     }\n... )\n>>> target_srs = SpatialReference(4326)\n>>> target = rst.transform(target_srs)\n>>> target.origin\n[-82.98492744885776, 27.601924753080144]\n```\n\n----------------------------------------\n\nTITLE: Using Percent Literals in Django Raw SQL Queries\nDESCRIPTION: Examples showing the unified behavior of percent literals in cursor.execute() queries. Double percent signs are only needed when providing replacement parameters, regardless of database backend.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# No parameters, no percent doubling\ncursor.execute(\"SELECT foo FROM bar WHERE baz = '30%'\")\n\n# Parameters passed, non-placeholders have to be doubled\ncursor.execute(\"SELECT foo FROM bar WHERE baz = '30%%' and id = %s\", [self.id])\n```\n\n----------------------------------------\n\nTITLE: Resolving URLs in Class-Based Views using Django's reverse Function\nDESCRIPTION: Demonstrates how to use the reverse function to resolve a URL in a class-based view method, specifying the current application namespace.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nreverse(\"polls:index\", current_app=self.request.resolver_match.namespace)\n```\n\n----------------------------------------\n\nTITLE: Using Slice Transforms with ArrayField in Django\nDESCRIPTION: Shows how to use slice transforms with ArrayField in Django. This example demonstrates querying for posts based on slices of the tags array.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> Post.objects.create(name=\"First post\", tags=[\"thoughts\", \"django\"])\n>>> Post.objects.create(name=\"Second post\", tags=[\"thoughts\"])\n>>> Post.objects.create(name=\"Third post\", tags=[\"django\", \"python\", \"thoughts\"])\n\n>>> Post.objects.filter(tags__0_1=[\"thoughts\"])\n<QuerySet [<Post: First post>, <Post: Second post>]>\n\n>>> Post.objects.filter(tags__0_2__contains=[\"thoughts\"])\n<QuerySet [<Post: First post>, <Post: Second post>]>\n```\n\n----------------------------------------\n\nTITLE: Binding Data to a Django Form Instance in Python\nDESCRIPTION: Illustrates how to bind input data to a Django form by passing a dictionary with field names as keys to the form constructor. Requires Django forms; expects a valid dictionary as input and creates a bound Form instance capable of validation and pre-populated rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\n...     \"subject\": \"hello\",\n...     \"message\": \"Hi there\",\n...     \"sender\": \"foo@example.com\",\n...     \"cc_myself\": True,\n... }\n>>> f = ContactForm(data)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Auto-Escaping Settings in Django Child Templates\nDESCRIPTION: Demonstrates a child Django template (`child.html`) extending `base.html` (where `autoescape` was turned off in the example). Due to inheritance of the `autoescape off` setting from the parent template's wrapping block, variables like `{{ greeting }}` within the child template's blocks will also not be auto-escaped.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_20\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n{% block title %}This &amp; that{% endblock %}\n{% block content %}{{ greeting }}{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Traditional Retrieval and Save Pattern (Python)\nDESCRIPTION: Shows the typical try/except pattern for retrieving or creating an object when not using get_or_create(). Handles DoesNotExist for manual creation. Highlights why using get_or_create() is preferable in concurrent environments. Requires Person model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    obj = Person.objects.get(first_name=\"John\", last_name=\"Lennon\")\nexcept Person.DoesNotExist:\n    obj = Person(first_name=\"John\", last_name=\"Lennon\", birthday=date(1940, 10, 9))\n    obj.save()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template Filter in Django Template\nDESCRIPTION: This example demonstrates how to use the custom 'cut' filter in a Django template.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{ somevariable|cut:\"0\" }}\n```\n\n----------------------------------------\n\nTITLE: Example Input: List of Dictionaries for Dictsort - Python\nDESCRIPTION: Provides a sample list of dictionaries representing people with names and ages. This is used as input for dictsort demonstration. Output would be the same structure, sorted according to criteria specified in the Django template. No external dependencies required.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\n[\n    {\"name\": \"zed\", \"age\": 19},\n    {\"name\": \"amy\", \"age\": 22},\n    {\"name\": \"joe\", \"age\": 31},\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Headers in Django Templates\nDESCRIPTION: Example of accessing HTTP headers in Django templates using underscores in place of hyphens, which is useful for template variable access.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{{ request.headers.user_agent }}\n```\n\n----------------------------------------\n\nTITLE: Customizing aria-describedby for Django Form Fields in Python\nDESCRIPTION: Illustrates how to override the default `aria-describedby` attribute for a `CharField`'s widget within a Django `UserForm`. This example adds a custom description ID (`custom-description`) before the standard help text ID (`id_username_helptext`) by passing a dictionary to the `attrs` argument of the widget, controlling the order screen readers announce descriptions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class UserForm(forms.Form):\n...     username = forms.CharField(\n...         max_length=255,\n...         help_text=\"e.g., user@example.com\",\n...         widget=forms.TextInput(\n...             attrs={\"aria-describedby\": \"custom-description id_username_helptext\"},\n...         ),\n...     )\n...\n>>> f = UserForm()\n>>> print(f[\"username\"])\n<input type=\"text\" name=\"username\" aria-describedby=\"custom-description id_username_helptext\" maxlength=\"255\" id=\"id_username\" required>\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Field Validation Errors in Django\nDESCRIPTION: Shows how to handle validation errors that are not tied to specific fields using NON_FIELD_ERRORS key.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import NON_FIELD_ERRORS, ValidationError\n\ntry:\n    article.full_clean()\nexcept ValidationError as e:\n    non_field_errors = e.message_dict[NON_FIELD_ERRORS]\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Custom Filter in Django\nDESCRIPTION: This snippet shows how to create a custom filter that is marked as safe for auto-escaping purposes.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@register.filter(is_safe=True)\ndef add_xx(value):\n    return \"%sxx\" % value\n```\n\n----------------------------------------\n\nTITLE: Using pluralize Filter in Django Templates\nDESCRIPTION: The pluralize filter returns a plural suffix if the value is not 1, '1', or an object of length 1. It can take an optional argument for custom suffixes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_81\n\nLANGUAGE: html+django\nCODE:\n```\nYou have {{ num_messages }} message{{ num_messages|pluralize }}.\n```\n\nLANGUAGE: html+django\nCODE:\n```\nYou have {{ num_walruses }} walrus{{ num_walruses|pluralize:\"es\" }}.\n```\n\nLANGUAGE: html+django\nCODE:\n```\nYou have {{ num_cherries }} cherr{{ num_cherries|pluralize:\"y,ies\" }}.\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Exceptions\nDESCRIPTION: Demonstrates how to import HTTP exceptions from the django.http module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import UnreadablePostError\n```\n\n----------------------------------------\n\nTITLE: User Model Methods - Python/Django\nDESCRIPTION: Essential methods for User model functionality including password management, permission checking, and user information retrieval\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_username(self):\n    \"\"\"Returns the username\"\"\"\n\ndef get_full_name(self):\n    \"\"\"Returns first_name plus last_name\"\"\"\n\ndef get_short_name(self):\n    \"\"\"Returns first_name\"\"\"\n\ndef set_password(self, raw_password):\n    \"\"\"Sets hashed password\"\"\"\n\ndef check_password(self, raw_password):\n    \"\"\"Validates password\"\"\"\n\ndef set_unusable_password(self):\n    \"\"\"Marks user as having no password\"\"\"\n\ndef has_usable_password(self):\n    \"\"\"Checks if password is usable\"\"\"\n\ndef get_user_permissions(self, obj=None):\n    \"\"\"Gets direct user permissions\"\"\"\n\ndef get_group_permissions(self, obj=None):\n    \"\"\"Gets permissions from user's groups\"\"\"\n\ndef get_all_permissions(self, obj=None):\n    \"\"\"Gets all user permissions\"\"\"\n\ndef has_perm(self, perm, obj=None):\n    \"\"\"Checks specific permission\"\"\"\n\ndef has_perms(self, perm_list, obj=None):\n    \"\"\"Checks multiple permissions\"\"\"\n\ndef has_module_perms(self, package_name):\n    \"\"\"Checks module-level permissions\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Generic Relation in Django\nDESCRIPTION: Creates Image and Product models where Image uses a GenericForeignKey to reference any model, enabling a polymorphic relationship. This allows images to be associated with various content types.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.db import models\n\n\nclass Image(models.Model):\n    image = models.ImageField(upload_to=\"images\")\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey(\"content_type\", \"object_id\")\n\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Using empty clause in Django for template tag\nDESCRIPTION: Demonstrates the new empty clause in the for template tag to display content when looping over an empty sequence.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_8\n\nLANGUAGE: Django Template\nCODE:\n```\n{% for item in items %}\n    {{ item }}\n{% empty %}\n    No items found.\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Changing File Name and Location for a Django FileField\nDESCRIPTION: Example showing how to rename a file associated with a model field by updating the name attribute and moving the physical file. The model needs to be saved after the change to update the database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> from django.conf import settings\n>>> initial_path = car.photo.path\n>>> car.photo.name = \"cars/chevy_ii.jpg\"\n>>> new_path = settings.MEDIA_ROOT + car.photo.name\n>>> # Move the file on the filesystem\n>>> os.rename(initial_path, new_path)\n>>> car.save()\n>>> car.photo.path\n'/media/cars/chevy_ii.jpg'\n>>> car.photo.path == new_path\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using Localize Template Tag in Django Templates\nDESCRIPTION: Example of using the 'localize' template tag to enable or disable localization for specific blocks in a Django template. This provides fine-grained control over which parts of a template should use localized formatting.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% load l10n %}\n\n{% localize on %}\n    {{ value }}\n{% endlocalize %}\n\n{% localize off %}\n    {{ value }}\n{% endlocalize %}\n```\n\n----------------------------------------\n\nTITLE: Reading WKT Data in Python using GEOS\nDESCRIPTION: Demonstrates how to use the WKTReader class to create a GEOSGeometry object from Well-Known Text (WKT) data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import WKTReader\n>>> wkt_r = WKTReader()\n>>> wkt_r.read(\"POINT(1 1)\")\n<Point object at 0x103a88b50>\n```\n\n----------------------------------------\n\nTITLE: Integrating Pull Requests with Git in Shell\nDESCRIPTION: This snippet demonstrates how to create a new branch and apply changes from a pull request to a local Django repository. It uses git commands to checkout a new branch and curl to fetch and apply the patch.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b pull_xxxxx upstream/main\ncurl -L https://github.com/django/django/pull/xxxxx.patch | git am\n```\n\n----------------------------------------\n\nTITLE: Configuring LOCALE_PATHS in Django Settings\nDESCRIPTION: Example of setting up LOCALE_PATHS in Django settings to specify directories where Django should look for translation files. This helps Django locate translation files for internationalization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_53\n\nLANGUAGE: Python\nCODE:\n```\nLOCALE_PATHS = [\n    \"/home/www/project/common_files/locale\",\n    \"/var/local/translations/locale\",\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Custom User Models in Tests with Django\nDESCRIPTION: Example of explicitly importing a custom user model in a test module to ensure it's registered before swapping it with override_settings. Without this import, tests will fail with an ImproperlyConfigured error.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.tests.custom_user import CustomUser\n\n\n@override_settings(AUTH_USER_MODEL=\"auth.CustomUser\")\nclass CustomUserFeatureTests(TestCase):\n    def test_something(self):\n        # Test code here\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Using RequestContext with Extra Processors (Django, Python)\nDESCRIPTION: Shows how to instantiate a RequestContext with a custom processor to inject extra variables (such as ip_address) into the context. The snippet demonstrates context processor definition and usage within a Django view, as well as integrating this with a Django Template. Requires import of django.http, django.template, and adherence to Django template rendering API. Inputs include request and a dictionary of context variables; outputs are rendered HttpResponse.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.template import RequestContext, Template\n\n\ndef ip_address_processor(request):\n    return {\"ip_address\": request.META[\"REMOTE_ADDR\"]}\n\n\ndef client_ip_view(request):\n    template = Template(\"{{ title }}: {{ ip_address }}\")\n    context = RequestContext(\n        request,\n        {\n            \"title\": \"Your IP Address\",\n        },\n        [ip_address_processor],\n    )\n    return HttpResponse(template.render(context))\n```\n\n----------------------------------------\n\nTITLE: Registering a Django Template Tag via Decorator with Default Name (Python)\nDESCRIPTION: This Python snippet illustrates registering a Django template tag using the `@register.tag` decorator without specifying a `name`. In this case, Django automatically uses the decorated function's name, 'shout', as the tag name in templates.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n@register.tag\ndef shout(parser, token): ...\n```\n\n----------------------------------------\n\nTITLE: Managing Permission Caching in Django User Objects\nDESCRIPTION: This example shows how permission caching works in Django. It demonstrates that permissions are cached when first checked and how to refresh the user instance to get updated permissions after adding new ones.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import Permission, User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.shortcuts import get_object_or_404\n\nfrom myapp.models import BlogPost\n\n\ndef user_gains_perms(request, user_id):\n    user = get_object_or_404(User, pk=user_id)\n    # any permission check will cache the current set of permissions\n    user.has_perm(\"myapp.change_blogpost\")\n\n    content_type = ContentType.objects.get_for_model(BlogPost)\n    permission = Permission.objects.get(\n        codename=\"change_blogpost\",\n        content_type=content_type,\n    )\n    user.user_permissions.add(permission)\n\n    # Checking the cached permission set\n    user.has_perm(\"myapp.change_blogpost\")  # False\n\n    # Request new instance of User\n    # Be aware that user.refresh_from_db() won't clear the cache.\n    user = get_object_or_404(User, pk=user_id)\n\n    # Permission cache is repopulated from the database\n    user.has_perm(\"myapp.change_blogpost\")  # True\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rendering MultiWidget Subwidgets in a Django Template\nDESCRIPTION: Illustrates how to iterate over the `widget.subwidgets` context variable provided by `MultiWidget` within a Django template. It uses the `{% include %}` template tag to render each subwidget using its specific template name (`subwidget.template_name`) and passing the subwidget itself as context.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{% for subwidget in widget.subwidgets %}\n    {% include subwidget.template_name with widget=subwidget %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Language Preference Check in Django View\nDESCRIPTION: View function demonstrating how to check the user's language preference using request.LANGUAGE_CODE\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\n\ndef hello_world(request, count):\n    if request.LANGUAGE_CODE == \"de-at\":\n        return HttpResponse(\"You prefer to read Austrian German.\")\n    else:\n        return HttpResponse(\"You prefer to read another language.\")\n```\n\n----------------------------------------\n\nTITLE: Resolving SQL Injection in QuerySet.explain() for PostgreSQL in Django\nDESCRIPTION: Fixes CVE-2022-28347, a potential SQL injection vulnerability in the QuerySet.explain() method when using dictionary expansion for options on PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.explain(**options)\n```\n\n----------------------------------------\n\nTITLE: Implementing a BlogSitemap Class (Python)\nDESCRIPTION: This example demonstrates how to create a Sitemap subclass for a blog system. It defines methods for items, lastmod, and sets changefreq and priority attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sitemaps import Sitemap\nfrom blog.models import Entry\n\n\nclass BlogSitemap(Sitemap):\n    changefreq = \"never\"\n    priority = 0.5\n\n    def items(self):\n        return Entry.objects.filter(is_draft=False)\n\n    def lastmod(self, obj):\n        return obj.pub_date\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Unaccented Case-insensitive Search in Django\nDESCRIPTION: Shows how to use PostgreSQL's unaccented case-insensitive comparison to search for names regardless of accents. This is useful for handling non-English names in search queries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> Author.objects.filter(name__unaccent__icontains=\"Helen\")\n[<Author: Helen Mirren>, <Author: Helena Bonham Carter>, <Author: Hélène Joy>]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Cache Table (Shell)\nDESCRIPTION: This shell command is used to create the necessary database table for Django's database cache backend. The table name used will correspond to the `LOCATION` specified in the `CACHES` setting for the database cache.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py createcachetable\n```\n\n----------------------------------------\n\nTITLE: Overriding Field-level Initial Values with Form-level Initial Data in Django Python Forms\nDESCRIPTION: Defines a custom form class with a field-level initial value, then creates a Form instance with form-level initial data for the same field to demonstrate precedence. Requires django.forms; input is a dictionary for 'initial' during instantiation. Outputs are the rendered form reflecting instance-level initialization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField(initial=\"class\")\n...     url = forms.URLField()\n...     comment = forms.CharField()\n...\n>>> f = CommentForm(initial={\"name\": \"instance\"}, auto_id=False)\n>>> print(f)\n```\n\n----------------------------------------\n\nTITLE: Using makemessages command for locale processing in Django\nDESCRIPTION: Examples of using the Django makemessages command with various locale options. The command is used to create or update message files for translation with different locale specifications.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin makemessages --locale=pt_BR\ndjango-admin makemessages --locale=pt_BR --locale=fr\ndjango-admin makemessages -l pt_BR\ndjango-admin makemessages -l pt_BR -l fr\ndjango-admin makemessages --exclude=pt_BR\ndjango-admin makemessages --exclude=pt_BR --exclude=fr\ndjango-admin makemessages -x pt_BR\ndjango-admin makemessages -x pt_BR -x fr\n```\n\n----------------------------------------\n\nTITLE: Using the `csrf_token` Template Tag (Django Template)\nDESCRIPTION: Introduces the `csrf_token` template tag in Django 1.1.2 for forward compatibility with CSRF protection improvements in Django 1.2. In the 1.1.X branch, this tag has no effect but allows templates to work seamlessly with future versions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: django\nCODE:\n```\ncsrf_token\n```\n\n----------------------------------------\n\nTITLE: Fixing Multiple File Upload Validation in Django Forms\nDESCRIPTION: To prevent a security vulnerability, Django's FileInput and ClearableFileInput widgets now raise a ValueError when the 'multiple' HTML attribute is set. To maintain the old behavior, set 'allow_multiple_selected' to True.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.forms import ClearableFileInput, FileInput\n\n# New behavior raises ValueError\nFileInput(attrs={'multiple': True})  # Raises ValueError\n\n# To keep old behavior\nFileInput(attrs={'multiple': True}, allow_multiple_selected=True)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Settings Leak in Django Date Template Filter - Django Template\nDESCRIPTION: This snippet shows how a template can use a user-specified variable as a format for the date filter, which, if unvalidated, can be exploited by a malicious user to access sensitive Django settings. The code expects two context variables: last_updated (a date or datetime object) and user_date_format (the format string to use). The vulnerability appears if user_date_format is set to the name of a Django setting like SECRET_KEY, allowing access to that value. The fix restricts such access to only date/time settings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{{ last_updated|date:user_date_format }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Implicit TLS/SSL for SMTP Connection in Django\nDESCRIPTION: Specifies whether to use an implicit TLS/SSL (secure) connection (False by default) when communicating with the SMTP server, typically on port 465. Mutually exclusive with EMAIL_USE_TLS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_USE_SSL = False\n```\n\n----------------------------------------\n\nTITLE: Exploiting Template Settings Leak Using SECRET_KEY - Django Template\nDESCRIPTION: This snippet demonstrates how a malicious user exploits the vulnerability by supplying the name of a sensitive setting (e.g., \\\"SECRET_KEY\\\") instead of a valid date format, causing the filter to reveal that value. This misuse assumes insufficient validation of the user_date_format variable.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.11.txt#2025-04-23_snippet_1\n\nLANGUAGE: django-template\nCODE:\n```\n\"SECRET_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using Coalesce in Django ORM Annotate and Aggregate with Python\nDESCRIPTION: These code snippets show the use of the Coalesce function to select the first non-null value across multiple fields or expressions in Django ORM queries. Dependencies include Sum, Coalesce, and potentially Cast for explicit typing. They demonstrate annotation of a query with a computed 'screen_name' from the first available name source, and ensure that aggregation results do not return None by supplying a default. When mixing expressions with possible None values, Coalesce ensures a fallback. Key parameters include field names and expressions. The outputs are annotated fields or aggregation results with guaranteed non-null values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> # Get a screen name from least to most public\n>>> from django.db.models import Sum\n>>> from django.db.models.functions import Coalesce\n>>> Author.objects.create(name=\"Margaret Smith\", goes_by=\"Maggie\")\n>>> author = Author.objects.annotate(screen_name=Coalesce(\"alias\", \"goes_by\", \"name\")).get()\n>>> print(author.screen_name)\nMaggie\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> # Prevent an aggregate Sum() from returning None\n>>> # The aggregate default argument uses Coalesce() under the hood.\n>>> aggregated = Author.objects.aggregate(\n...     combined_age=Sum(\"age\"),\n...     combined_age_default=Sum(\"age\", default=0),\n...     combined_age_coalesce=Coalesce(Sum(\"age\"), 0),\n... )\n>>> print(aggregated[\"combined_age\"])\nNone\n>>> print(aggregated[\"combined_age_default\"])\n0\n>>> print(aggregated[\"combined_age_coalesce\"])\n0\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import DateTimeField\n>>> from django.db.models.functions import Cast, Coalesce\n>>> from django.utils import timezone\n>>> now = timezone.now()\n>>> Coalesce(\"updated\", Cast(now, DateTimeField()))\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Connection via Easy Connect String in Django Settings (Python)\nDESCRIPTION: Shows how to use an Oracle Easy Connect string in the `NAME` setting for database connection when `HOST` and `PORT` are left empty. This method is useful for RAC or pluggable databases without relying on a `tnsnames.ora` file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n\"NAME\": \"localhost:1521/orclpdb1\"\n```\n\n----------------------------------------\n\nTITLE: Accessing X Coordinates of a LineString Geometry in Python\nDESCRIPTION: Shows how to get a list of all X coordinates from a LineString `OGRGeometry` ('LINESTRING (1 2,3 4)') by accessing its `.x` attribute. It returns a list of floating-point X values for each vertex.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"LINESTRING (1 2,3 4)\").x\n[1.0, 3.0]\n```\n\n----------------------------------------\n\nTITLE: Using Length Function with Django GIS\nDESCRIPTION: Example showing how to use the Length function to annotate and filter geographic data based on line length.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.db.models.functions import Length\n>>> Track.objects.annotate(length=Length(\"line\")).filter(length__gt=100)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Django Test Runner Class\nDESCRIPTION: This code defines the signature of a custom Django test runner class, DiscoverRunner, which can be used to customize the test discovery and execution process in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass DiscoverRunner(pattern='test*.py', top_level=None, verbosity=1, interactive=True, failfast=False, keepdb=False, reverse=False, debug_mode=False, debug_sql=False, parallel=0, tags=None, exclude_tags=None, test_name_patterns=None, pdb=False, buffer=False, enable_faulthandler=True, timing=True, shuffle=False, logger=None, durations=None, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Using the Length Filter in HTML+Django Template\nDESCRIPTION: This snippet shows the usage of the `length` template filter. `{{ value|length }}` outputs the number of items in the `value` variable. This filter works correctly for sequences like strings (character count) and lists (item count). The example mentions that if `value` is `['a', 'b', 'c', 'd']`, the output will be `4`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|length }}\n```\n\n----------------------------------------\n\nTITLE: Django Template with Language-Specific URLs\nDESCRIPTION: Template code showing how to create links to content in different languages using the language template tag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_50\n\nLANGUAGE: html\nCODE:\n```\n{% load i18n %}\n\n{% get_available_languages as languages %}\n\n{% translate \"View this category in:\" %}\n{% for lang_code, lang_name in languages %}\n    {% language lang_code %}\n    <a href=\"{% url 'category' slug=category.slug %}\">{{ lang_name }}</a>\n    {% endlanguage %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Calculating Latest Entry Timestamp for Conditional View in Python\nDESCRIPTION: Defines a function `latest_entry` that takes a request object and `blog_id`. It queries the `Entry` model, filters by `blog_id`, finds the entry with the latest `published` date using `.latest(\"published\")`, and returns that `published` datetime object. This function is designed to be used as a `last_modified_func` for Django's conditional view decorators.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef latest_entry(request, blog_id):\n    return Entry.objects.filter(blog=blog_id).latest(\"published\").published\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Django Views with Parameters\nDESCRIPTION: Defines three view functions that handle different URL patterns for a polls application. Each view takes a question_id parameter and returns an HTTP response.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef detail(request, question_id):\n    return HttpResponse(\"You're looking at question %s.\" % question_id)\n\n\ndef results(request, question_id):\n    response = \"You're looking at the results of question %s.\"\n    return HttpResponse(response % question_id)\n\n\ndef vote(request, question_id):\n    return HttpResponse(\"You're voting on question %s.\" % question_id)\n```\n\n----------------------------------------\n\nTITLE: Using get_object_or_404() in Django\nDESCRIPTION: Example of using get_object_or_404() to safely retrieve a model instance or raise Http404.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_object_or_404\n\n\ndef my_view(request):\n    obj = get_object_or_404(MyModel, pk=1)\n```\n\n----------------------------------------\n\nTITLE: Defining ListView Class in Django\nDESCRIPTION: Displays a list of objects. Handles pagination and context preparation for multiple objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ListView():\n    # Attributes\n    allow_empty\n    content_type\n    context_object_name\n    extra_context\n    http_method_names\n    model\n    ordering\n    paginate_by\n    paginate_orphans\n    paginator_class\n    queryset\n    response_class\n    template_engine\n    template_name\n    template_name_suffix\n\n    # Methods\n    as_view()\n    dispatch()\n    get()\n    get_context_data()\n    get_paginator()\n    head()\n    http_method_not_allowed()\n    paginate_queryset()\n    render_to_response()\n    setup()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex Simple Block Tag in Django\nDESCRIPTION: Shows a complete example of a simple block tag that generates a message box with multiple levels and custom content. It demonstrates using takes_context and format_html for safe HTML rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\nfrom django.utils.html import format_html\n\n\nregister = template.Library()\n\n\n@register.simple_block_tag(takes_context=True)\ndef msgbox(context, content, level):\n    format_kwargs = {\n        \"level\": level.lower(),\n        \"level_title\": level.capitalize(),\n        \"content\": content,\n        \"open\": \" open\" if level.lower() == \"error\" else \"\",\n        \"site\": context.get(\"site\", \"My Site\"),\n    }\n    result = \"\"\"\n    <div class=\"msgbox {level}\">\n      <details{open}>\n        <summary>\n          <strong>{level_title}</strong>: Please read for <i>{site}</i>\n        </summary>\n        <p>\n          {content}\n        </p>\n      </details>\n    </div>\n    \"\"\"\n    return format_html(result, **format_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining models with many-to-many relationships in Django\nDESCRIPTION: Shows how to define Django models with ManyToManyField relationships that can be used with prefetch_related() to optimize database queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Topping(models.Model):\n    name = models.CharField(max_length=30)\n\n\nclass Pizza(models.Model):\n    name = models.CharField(max_length=50)\n    toppings = models.ManyToManyField(Topping)\n\n    def __str__(self):\n        return \"%s (%s)\" % (\n            self.name,\n            \", \".join(topping.name for topping in self.toppings.all()),\n        )\n```\n\n----------------------------------------\n\nTITLE: Documentation of aggregate() and aaggregate() methods in Django ORM\nDESCRIPTION: Explains how aggregate() computes summary metrics such as averages, sums, counts over a QuerySet, returning a dictionary. The aaggregate() is its asynchronous counterpart. Usage involves passing aggregation functions like Count(), Sum(), etc., with optional descriptive keywords for naming results. Dependencies include django.db.models.aggregation functions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_85\n\nLANGUAGE: Python\nCODE:\n```\nReturns a dictionary of aggregate values (averages, sums, etc.) calculated over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value that will be included in the dictionary that is returned.\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Storage Backends in Settings (Python)\nDESCRIPTION: This snippet demonstrates how to define additional or custom file storage options in the Django STORAGES setting. It shows adding a new alias ('example'), specifying the backend and its initialization options such as file location and base URL. The STORAGES setting is a nested dictionary whose keys are storage aliases and whose values specify backend and custom options. Prerequisites include available backend classes and directory paths; Output is an updated Django storage configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    # ...\n    \"example\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n        \"OPTIONS\": {\n            \"location\": \"/example\",\n            \"base_url\": \"/example/\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Setting in Python\nDESCRIPTION: This snippet demonstrates how to reference a Django setting in Python code. It specifically mentions the new DATA_UPLOAD_MAX_NUMBER_FILES setting, which is introduced to mitigate the potential denial-of-service vulnerability in file uploads.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:setting:`DATA_UPLOAD_MAX_NUMBER_FILES`\n```\n\n----------------------------------------\n\nTITLE: Overriding Model Validation Error Messages in Django ModelForm\nDESCRIPTION: This code demonstrates how to override the default error messages for model validation in a Django ModelForm, specifically for the NON_FIELD_ERRORS that are raised during model validation such as unique_together constraints.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import NON_FIELD_ERRORS\nfrom django.forms import ModelForm\n\n\nclass ArticleForm(ModelForm):\n    class Meta:\n        error_messages = {\n            NON_FIELD_ERRORS: {\n                \"unique_together\": \"%(model_name)s's %(field_labels)s are not unique.\",\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Override MESSAGE_TAGS Django Python\nDESCRIPTION: This snippet demonstrates how to override the MESSAGE_TAGS setting and relies on constants to avoid circular import problems. This is useful for customizing how different message levels are rendered as CSS classes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages import constants as message_constants\n\nMESSAGE_TAGS = {message_constants.INFO: \"\"}\n```\n\n----------------------------------------\n\nTITLE: Using blocktranslate tag in Django templates\nDESCRIPTION: Demonstrates how to use the {% blocktranslate %} tag to translate complex sentences with placeholders for variable content.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_23\n\nLANGUAGE: html+django\nCODE:\n```\n{% blocktranslate %}This string will have {{ value }} inside.{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Using GEOSGeometry Objects in GeoDjango\nDESCRIPTION: Demonstrates creating models using GEOSGeometry objects, including automatic coordinate system transformation between different SRID values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.geos import GEOSGeometry\n>>> poly = GEOSGeometry(\"POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))\")\n>>> z = Zipcode(code=77096, poly=poly)\n>>> z.save()\n```\n\n----------------------------------------\n\nTITLE: Accessing Point Coordinates as a Tuple in Python\nDESCRIPTION: Illustrates retrieving the coordinates of a Point `OGRGeometry` ('POINT (1 2)') as a simple tuple using the `.tuple` attribute. This provides direct access to the (x, y) coordinates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT (1 2)\").tuple\n(1.0, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing RangeMinValueValidator in Django PostgreSQL\nDESCRIPTION: Creates a RangeMinValueValidator instance to validate that the lower bound of a range is not less than a specified limit value. A custom error message can be provided.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/validators.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRangeMinValueValidator(limit_value, message=None)\n```\n\n----------------------------------------\n\nTITLE: Generating Query Strings for URLs - querystring Tag in HTML+Django Template - html+django\nDESCRIPTION: Shows the use of the 'querystring' tag to dynamically construct or modify query strings for URLs, based on request parameters and additional assignments. Built-in to Django, requires context access to 'request.GET' or provided mappings. Input parameters are mappings and assignments; output is a correctly encoded query string for use in links.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_26\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring size=\"M\" %}\n```\n\n----------------------------------------\n\nTITLE: Using ImageField in a Django Form (Python)\nDESCRIPTION: This Python snippet demonstrates how to define a Django form containing an `ImageField` and how to instantiate that form with file data using `SimpleUploadedFile`. It requires the Pillow library (`PIL`) for image processing and Django's form and file handling modules. The example shows creating an `ImageForm` class with an `img` field of type `forms.ImageField`, preparing sample file data, and then creating an instance of the form, binding the file data to it.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from PIL import Image\n>>> from django import forms\n>>> from django.core.files.uploadedfile import SimpleUploadedFile\n>>> class ImageForm(forms.Form):\n...     img = forms.ImageField()\n...\n>>> file_data = {\"img\": SimpleUploadedFile(\"test.png\", b\"file data\")}\n>>> form = ImageForm({}, file_data)\n```\n\n----------------------------------------\n\nTITLE: Standard database lookup vs. select_related in Django\nDESCRIPTION: Compares standard database lookups with select_related() lookups, demonstrating how select_related() reduces database queries when accessing related objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Hits the database.\ne = Entry.objects.get(id=5)\n\n# Hits the database again to get the related Blog object.\nb = e.blog\n```\n\nLANGUAGE: python\nCODE:\n```\n# Hits the database.\ne = Entry.objects.select_related(\"blog\").get(id=5)\n\n# Doesn't hit the database, because e.blog has been prepopulated\n# in the previous query.\nb = e.blog\n```\n\n----------------------------------------\n\nTITLE: Accessing SpatialReference Attributes in Python\nDESCRIPTION: Demonstrates how to access various attributes of a SpatialReference object created from WKT (Well-Known Text) representation. Shows retrieval of geographic coordinate system, datum, authority, and other spatial reference properties.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_30\n\nLANGUAGE: pycon\nCODE:\n```\n>>> wkt = 'GEOGCS[\"WGS 84\", DATUM[\"WGS_1984, ... AUTHORITY[\"EPSG\",\"4326\"]]'\n>>> srs = SpatialReference(wkt)  # could also use 'WGS84', or 4326\n>>> print(srs[\"GEOGCS\"])\nWGS 84\n>>> print(srs[\"DATUM\"])\nWGS_1984\n>>> print(srs[\"AUTHORITY\"])\nEPSG\n>>> print(srs[\"AUTHORITY\", 1])  # The authority value\n4326\n>>> print(srs[\"TOWGS84\", 4])  # the fourth value in this wkt\n0\n>>> print(srs[\"UNIT|AUTHORITY\"])  # For the units authority, have to use the pipe symbol.\nEPSG\n>>> print(srs[\"UNIT|AUTHORITY\", 1])  # The authority value for the units\n9122\n```\n\n----------------------------------------\n\nTITLE: Configuring DjangoTemplates OPTIONS\nDESCRIPTION: Example of configuring the OPTIONS for the DjangoTemplates backend, including custom libraries.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nOPTIONS = {\n    \"libraries\": {\n        \"myapp_tags\": \"path.to.myapp.tags\",\n        \"admin.urls\": \"django.contrib.admin.templatetags.admin_urls\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Request User to Formset Models in Django Admin\nDESCRIPTION: Implementation of save_formset method to associate the current user with each model instance in a formset before saving, including proper handling of deleted objects and many-to-many relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleAdmin(admin.ModelAdmin):\n    def save_formset(self, request, form, formset, change):\n        instances = formset.save(commit=False)\n        for obj in formset.deleted_objects:\n            obj.delete()\n        for instance in instances:\n            instance.user = request.user\n            instance.save()\n        formset.save_m2m()\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Deployment Check Issuing a Warning in Python\nDESCRIPTION: Provides an example of a custom system check registered to run only during deployment (`deploy=True`). This check verifies a custom setting `ENABLE_ANALYTICS` and issues a `Warning` message if the setting is not `True`. It relies on `django.conf.settings` and `django.core.checks.Warning`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.core.checks import Warning, register\n\n\n@register(\"myapp\", deploy=True)\ndef check_enable_analytics_is_true_on_deploy(app_configs, **kwargs):\n    errors = []\n    if getattr(settings, \"ENABLE_ANALYTICS\", None) is not True:\n        errors.append(\n            Warning(\n                \"The ENABLE_ANALYTICS setting should be set to True in deployment.\",\n                id=\"myapp.W001\",\n            )\n        )\n    return errors\n```\n\n----------------------------------------\n\nTITLE: Preventing Directory Traversal in Storage.save() (Python)\nDESCRIPTION: Custom Storage subclasses that override generate_filename() without proper path validation were vulnerable to directory traversal attacks when calling save(). This affects classes derived from django.core.files.storage.Storage.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.files.storage.Storage.generate_filename()\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.files.storage.Storage.save()\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Tests with Tox\nDESCRIPTION: This command runs Django's JavaScript test suite using Tox, which executes npm install to update dependencies and then runs npm test to execute the JavaScript tests.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tox -e javascript\n```\n\n----------------------------------------\n\nTITLE: Using ogrinspect Command in GeoDjango\nDESCRIPTION: Management command for inspecting OGR-compatible data sources and generating GeoDjango models. Supports various options for customizing field definitions, geometry handling, and model generation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/commands.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango-admin ogrinspect data_source model_name\n```\n\n----------------------------------------\n\nTITLE: Resolving Multiple Foreign Keys in Inline Formsets\nDESCRIPTION: Shows how to resolve ambiguity when a model has multiple foreign keys to the same model by using the fk_name parameter in inlineformset_factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> FriendshipFormSet = inlineformset_factory(\n...     Friend, Friendship, fk_name=\"from_friend\", fields=[\"to_friend\", \"length_in_months\"]\n... )\n```\n\n----------------------------------------\n\nTITLE: Fixing Unicode encoding errors in uWSGI file uploads\nDESCRIPTION: Configuration snippet to add to uwsgi.ini for preventing UnicodeEncodeError when uploading files with non-ASCII filenames. This sets the proper UTF-8 environment variable.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nenv = LANG=en_US.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Clearing select_related fields in Django QuerySet\nDESCRIPTION: Shows how to clear the list of related fields added by previous select_related() calls by passing None as a parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> without_relations = queryset.select_related(None)\n```\n\n----------------------------------------\n\nTITLE: Using Filters within Smart `if` Tag Expressions in Django Templates\nDESCRIPTION: Demonstrates the capability of the enhanced `if` tag in Django 1.2+ to incorporate template filters (like `lower`) directly within the conditional expression. This example compares the lowercased email addresses of a user and a message recipient to conditionally apply a CSS class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n  <div\n    {% if user.email|lower == message.recipient|lower %}\n      class=\"highlight\"\n    {% endif %}\n  >{{ message }}</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Django Settings Module as Environment Variable for Tests\nDESCRIPTION: These commands show how to set the DJANGO_SETTINGS_MODULE environment variable for running tests, with examples for both Unix-like systems and Windows command prompt.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ DJANGO_SETTINGS_MODULE=my_postgres_settings tox -e py312-postgres\n```\n\nLANGUAGE: doscon\nCODE:\n```\n...\\.> set DJANGO_SETTINGS_MODULE=my_postgres_settings\n...\\.> tox -e py312-postgres\n```\n\n----------------------------------------\n\nTITLE: Instantiating GEOS Point Objects in Python\nDESCRIPTION: Illustrates two equivalent ways to create a `Point` geometry object using Django's GEOS interface. The first method uses separate `x` and `y` coordinate arguments, while the second uses a single sequence (a list or tuple) containing the coordinates. Both methods result in the same `Point` object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pnt = Point(5, 23)\n>>> pnt = Point([5, 23])\n```\n\n----------------------------------------\n\nTITLE: Using UserAttributeSimilarityValidator in Django\nDESCRIPTION: The UserAttributeSimilarityValidator class is used for password validation in Django. It compares submitted passwords to user attributes to prevent similar passwords. The implementation has been updated to ignore relatively long values to mitigate potential denial-of-service attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUserAttributeSimilarityValidator\n```\n\n----------------------------------------\n\nTITLE: Processing Messages in Python Code\nDESCRIPTION: Example of handling messages outside of templates using get_messages()\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages import get_messages\n\nstorage = get_messages(request)\nfor message in storage:\n    do_something_with_the_message(message)\n```\n\n----------------------------------------\n\nTITLE: Using a Context-Setting Django Tag (HTML+Django)\nDESCRIPTION: This Django template snippet demonstrates how to use the `current_time` tag (implemented by `CurrentTimeNode2`). The tag itself doesn't output anything but sets the `current_time` variable in the context. This variable is then accessed and displayed later in the template using standard variable syntax `{{ current_time }}`.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_34\n\nLANGUAGE: html+django\nCODE:\n```\n{% current_time \"%Y-%m-%d %I:%M %p\" %}<p>The time is {{ current_time }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Translating text using Django's translation context manager\nDESCRIPTION: A more concise way to translate text outside of Django views using the translation.override context manager, which automatically restores the original language.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import translation\n\n\ndef welcome_translated(language):\n```\n\n----------------------------------------\n\nTITLE: Handling User Model Changes with setting_changed Signal in Django\nDESCRIPTION: Example of using the setting_changed signal to clear the cache when AUTH_USER_MODEL changes during testing. This is needed when caching the result of get_user_model() at module level.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import apps\nfrom django.contrib.auth import get_user_model\nfrom django.core.signals import setting_changed\nfrom django.dispatch import receiver\n\n\n@receiver(setting_changed)\ndef user_model_swapped(*, setting, **kwargs):\n    if setting == \"AUTH_USER_MODEL\":\n        apps.clear_cache()\n        from myapp import some_module\n\n        some_module.UserModel = get_user_model()\n```\n\n----------------------------------------\n\nTITLE: Authenticating Remote Users with RemoteUserBackend in Django (Python)\nDESCRIPTION: Authenticates a user based on the trusted username provided in `remote_user` (typically from `request.META['REMOTE_USER']`). If `create_unknown_user` is `True` (default) and the user doesn't exist, a new user object is created. Returns the user object, or `None` if `create_unknown_user` is `False` and the user is not found. `request` is an optional HttpRequest. The asynchronous version `aauthenticate()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nauthenticate(request, remote_user)\n```\n\nLANGUAGE: python\nCODE:\n```\naauthenticate(request, remote_user)\n```\n\n----------------------------------------\n\nTITLE: Specifying psycopg and psycopg-pool versions for Django PostgreSQL integration\nDESCRIPTION: This snippet defines the minimum required versions of psycopg with binary support and psycopg-pool for Django's PostgreSQL database integration. It ensures compatibility and optimal performance when using PostgreSQL with Django.\nSOURCE: https://github.com/django/django/blob/main/tests/requirements/postgres.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npsycopg[binary]>=3.1.12\npsycopg-pool>=3.2.0\n```\n\n----------------------------------------\n\nTITLE: Referencing Django SessionBase Flush Method in Python\nDESCRIPTION: This code snippet refers to the flush() method of Django's SessionBase class, which has been modified to avoid creating new empty sessions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ncontrib.sessions.backends.base.SessionBase.flush()\n```\n\n----------------------------------------\n\nTITLE: Sending a Custom Signal in Django\nDESCRIPTION: This snippet demonstrates how to send a custom 'pizza_done' signal within a PizzaStore class. It shows the usage of the send() method to dispatch the signal with custom parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass PizzaStore:\n    ...\n\n    def send_pizza(self, toppings, size):\n        pizza_done.send(sender=self.__class__, toppings=toppings, size=size)\n        ...\n```\n\n----------------------------------------\n\nTITLE: Potential XSS Vulnerability in Python URL Validation\nDESCRIPTION: This code snippet shows a potential XSS vulnerability where leading whitespace is not stripped from URLs, allowing malicious JavaScript to be considered safe.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\\njavascript:...\n```\n\n----------------------------------------\n\nTITLE: Altering Table Engine in MySQL\nDESCRIPTION: This SQL snippet shows how to alter a table's engine to MyISAM in MySQL. It's an example of adding database-specific options to CREATE TABLE statements in Django using migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE myapp_mytable ENGINE=MyISAM;\n```\n\n----------------------------------------\n\nTITLE: Parameterized Insertion Using RunSQL in Django (Python)\nDESCRIPTION: Shows alternate syntax for parameterized execution of SQL in a Django migration using RunSQL. Here, a tuple with SQL and parameters is passed in a list; this is particularly useful for dynamic value insertion and helps prevent SQL injection. Inputs: SQL string, parameter list; Output: Parameterized insert statement execution. Requirements: Django migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmigrations.RunSQL([(\"INSERT INTO musician (name) VALUES ('Reinhardt');\", None)])\n```\n\n----------------------------------------\n\nTITLE: Defining MaxValueValidator in Django\nDESCRIPTION: Validator class that checks if a value exceeds a maximum limit. Raises ValidationError if the value is greater than the specified limit_value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMaxValueValidator(limit_value, message=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Tag Compilation Function in Python\nDESCRIPTION: This function parses the raw template tag and creates a Node object. It handles argument parsing and error checking for the 'current_time' custom tag.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\n\n\ndef do_current_time(parser, token):\n    try:\n        # split_contents() knows not to split quoted strings.\n        tag_name, format_string = token.split_contents()\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            \"%r tag requires a single argument\" % token.contents.split()[0]\n        )\n    if not (format_string[0] == format_string[-1] and format_string[0] in ('\"', \"'\")):\n        raise template.TemplateSyntaxError(\n            \"%r tag's argument should be in quotes\" % tag_name\n        )\n    return CurrentTimeNode(format_string[1:-1])\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key Fields in Django ModelAdmin\nDESCRIPTION: This method demonstrates how to override the default formfield for foreign key fields in the admin interface, filtering the queryset based on the current user.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"car\":\n            kwargs[\"queryset\"] = Car.objects.filter(owner=request.user)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Setting DYLD_FALLBACK_LIBRARY_PATH for macOS GeoDjango Dependencies - Shell\nDESCRIPTION: This shell snippet sets the DYLD_FALLBACK_LIBRARY_PATH environment variable on macOS, ensuring that the system dynamically loads the correct PostgreSQL and shared libraries required by GeoDjango. No dependencies beyond a correctly installed PostgreSQL library directory are required. The command should be executed before launching processes that depend on these libraries, such as Python scripts using GeoDjango; the expected input is the environment execution context and it outputs the updated process environment. Limitations: applies only to macOS and assumes /opt/local/lib locations are valid.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexport DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib:/opt/local/lib/postgresql14\n```\n\n----------------------------------------\n\nTITLE: Loading Django Secret Key from File\nDESCRIPTION: Shows how to load Django's SECRET_KEY from an external file, which provides better security than hardcoding the key in source code.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"/etc/secret_key.txt\") as f:\n    SECRET_KEY = f.read().strip()\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Form Event Listeners in JavaScript\nDESCRIPTION: This JavaScript code adds event listeners for 'formset:added' and 'formset:removed' events in the Django admin. It demonstrates how to handle the addition and removal of inline forms, specifically for the 'author_set' formset.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/javascript.txt#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('formset:added', (event) => {\n    if (event.detail.formsetName == 'author_set') {\n        // Do something\n    }\n});\ndocument.addEventListener('formset:removed', (event) => {\n    // Row removed\n});\n```\n\n----------------------------------------\n\nTITLE: Using text-based lookups without indexes in Django\nDESCRIPTION: Demonstrates a potentially slow query using a text-based lookup on a non-indexed column. This can be inefficient as it may return multiple objects and lacks index optimization.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> entry = Entry.objects.get(headline__startswith=\"News\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template Filter in Python\nDESCRIPTION: This snippet shows how to define a custom template filter called 'cut' that removes all instances of a given argument from a string.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef cut(value, arg):\n    \"\"\"Removes all values of arg from the given string\"\"\"\n    return value.replace(arg, \"\")\n```\n\n----------------------------------------\n\nTITLE: Using django.utils.text.slugify Function\nDESCRIPTION: The slugify template filter is now available as a standard Python function in django.utils.text module.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.text.slugify\n```\n\n----------------------------------------\n\nTITLE: Caching Template Fragment with User-specific Data in Django\nDESCRIPTION: Demonstrates how to cache a template fragment with user-specific data using the {% cache %} tag. The cache is uniquely identified by the user's username.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_25\n\nLANGUAGE: html+django\nCODE:\n```\n{% load cache %}\n{% cache 500 sidebar request.user.username %}\n    .. sidebar for logged in user ..\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Setting the active language and persisting it in a cookie\nDESCRIPTION: Demonstrates how to explicitly set the active language for the current thread and persist it in a cookie for future requests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.utils import translation\n\nuser_language = \"fr\"\ntranslation.activate(user_language)\nresponse = HttpResponse(...)\nresponse.set_cookie(settings.LANGUAGE_COOKIE_NAME, user_language)\n```\n\n----------------------------------------\n\nTITLE: Defining LOGOUT_REDIRECT_URL setting\nDESCRIPTION: This setting defines the URL or named URL pattern to redirect to after logout.  If None, no redirect occurs. The default is None.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_73\n\n\n\n----------------------------------------\n\nTITLE: Creating a Django Admin Superuser (Console)\nDESCRIPTION: Demonstrates the Django management command used to create a superuser account. This account has all permissions and is typically used to access and manage the Django admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Using firstof Tag in Django Templates\nDESCRIPTION: The firstof tag outputs the first truthy value among the given variables. It can include a fallback string and supports auto-escaping control.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_17\n\nLANGUAGE: html+django\nCODE:\n```\n{% firstof var1 var2 var3 \"fallback value\" %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n    {% firstof var1 var2 var3 \"<strong>fallback value</strong>\" %}\n{% endautoescape %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% firstof var1 var2|safe var3 \"<strong>fallback value</strong>\"|safe %}\n```\n\n----------------------------------------\n\nTITLE: Database-specific Custom Type Implementation in Django\nDESCRIPTION: Implementation of a custom MytypeField that maps to a PostgreSQL custom type. This demonstrates how to define the database representation of a custom field.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass MytypeField(models.Field):\n    def db_type(self, connection):\n        return \"mytype\"\n```\n\n----------------------------------------\n\nTITLE: Adding User Association to Author Model in Django\nDESCRIPTION: Modifies the `Author` model to include a `created_by` field. This field is a `ForeignKey` to the standard Django `User` model (`django.contrib.auth.models.User`), establishing a relationship to track which user created each author instance. `on_delete=models.CASCADE` ensures that if a user is deleted, their associated author entries are also deleted.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=200)\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sortable Fields in Django ModelAdmin\nDESCRIPTION: Example showing how to customize sortable columns in the admin change list view by overriding the get_sortable_by method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    def get_sortable_by(self, request):\n        return {*self.get_list_display(request)} - {\"rank\"}\n```\n\n----------------------------------------\n\nTITLE: Using Current Time Custom Tag in Django Template\nDESCRIPTION: This snippet shows the usage of a custom 'current_time' template tag that displays the current date/time formatted according to a parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_21\n\nLANGUAGE: html+django\nCODE:\n```\n<p>The time is {% current_time \"%Y-%m-%d %I:%M %p\" %}.</p>\n```\n\n----------------------------------------\n\nTITLE: Defining TIME_ZONE setting\nDESCRIPTION: This setting defines the default time zone for the Django installation. It sets the time zone used by the application. The default value is 'America/Chicago' for backwards compatibility, but new projects default to 'UTC'. When USE_TZ is False, this is the time zone Django will store datetimes in, and when USE_TZ is True, it's the default time zone for displaying datetimes in templates and interpreting form inputs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: Creating Custom Message Levels\nDESCRIPTION: Example of defining and using a custom message level constant\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCRITICAL = 50\n\n\ndef my_view(request):\n    messages.add_message(request, CRITICAL, \"A serious error occurred.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Username and Password Authentication Backend in Django (Python)\nDESCRIPTION: This code demonstrates how to implement a custom Django authentication backend class that authenticates users using a username and password. It subclasses BaseBackend and defines the required authenticate method, which receives the request, username, and password. The example structure provides a placeholder for checking credentials and returning a suitable user object if valid, or None otherwise. It requires Django's authentication framework and is designed to fit into the AUTHENTICATION_BACKENDS setting.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.backends import BaseBackend\n\n\nclass MyBackend(BaseBackend):\n    def authenticate(self, request, username=None, password=None):\n        # Check the username/password and return a user.\n        ...\n```\n\n----------------------------------------\n\nTITLE: Extending Django Admin Change Form Template for Custom JavaScript\nDESCRIPTION: This snippet demonstrates how to extend the Django admin change form template to include custom JavaScript for handling inline form events. It loads a custom JavaScript file using the static template tag.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/javascript.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% extends 'admin/change_form.html' %}\n{% load static %}\n\n{% block admin_change_form_document_ready %}\n{{ block.super }}\n<script src=\"{% static 'app/formset_handlers.js' %}\"></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Sign Function in Django Models\nDESCRIPTION: Demonstrates using the Sign function to get the sign of numeric values and register it as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Sign\n>>> Vector.objects.create(x=5.4, y=-2.3)\n>>> vector = Vector.objects.annotate(x_sign=Sign(\"x\"), y_sign=Sign(\"y\")).get()\n>>> vector.x_sign, vector.y_sign\n(1, -1)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Sign\n>>> FloatField.register_lookup(Sign)\n>>> # Get vectors whose signs of components are less than 0.\n>>> vectors = Vector.objects.filter(x__sign__lt=0, y__sign__lt=0)\n```\n\n----------------------------------------\n\nTITLE: Defining a PositiveIntegerField in Django Models\nDESCRIPTION: Defines a Django model field like `IntegerField`, but restricted to positive integers or zero. Values from 0 to 2147483647 are safe across all Django-supported databases. The value 0 is accepted for backward compatibility.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n.. class:: PositiveIntegerField(**options)\n```\n\n----------------------------------------\n\nTITLE: Storing querystring Output in a Variable in Django Templates\nDESCRIPTION: This snippet shows how to store the output of the querystring tag in a template variable using the 'as' keyword, which is useful when multiple links to the same page are needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_33\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring page=page.next_page_number as next_page %}\n```\n\n----------------------------------------\n\nTITLE: Styling Poll Links with CSS in Django\nDESCRIPTION: Basic CSS styling that changes the color of poll links to green in the Django polls application.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial06.txt#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nli a {\n    color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Related Objects with clear() Method in Django ORM - Python\nDESCRIPTION: Demonstrates how to remove all objects from a related set using the clear() method of RelatedManager. The example retrieves a Blog instance and clears its entry_set, effectively disassociating all Entries from the Blog. Works only if the ForeignKey field is nullable (null=True). Inputs are the parent model instance; the related set is emptied in the database, but individual objects are not deleted.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> b = Blog.objects.get(id=1)\n>>> b.entry_set.clear()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Django Messages Testing with MessagesTestMixin\nDESCRIPTION: Shows how to create a test case class that includes the MessagesTestMixin for testing messages in Django applications.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages.test import MessagesTestMixin\nfrom django.test import TestCase\n\n\nclass MsgTestCase(MessagesTestMixin, TestCase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using widthratio Tag in Django Templates\nDESCRIPTION: Shows how to use the widthratio tag for calculating proportional values in templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_49\n\nLANGUAGE: html+django\nCODE:\n```\n<img src=\"bar.png\" alt=\"Bar\"\n     height=\"10\" width=\"{% widthratio this_value max_value max_width %}\">\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% widthratio this_value max_value max_width as width %}\n{% blocktranslate %}The width is: {{ width }}{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Customized HTML Output After Widget Attribute Modification in Django Python Forms\nDESCRIPTION: Outputs the rendered HTML for a Django form whose field widgets have extra attributes, such as CSS class and size, after customization. Useful to verify that attribute updates affect the final HTML. Requires Django and a CommentForm with modified widget attributes; output is the HTML for the form with the adjustments. Inputs are form fields; outputs are final rendered HTML with specified attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> f = CommentForm(auto_id=False)\n>>> print(f)\n<div>Name:<input type=\"text\" name=\"name\" class=\"special\" required></div>\n<div>Url:<input type=\"url\" name=\"url\" required></div>\n<div>Comment:<input type=\"text\" name=\"comment\" size=\"40\" required></div>\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom UserChangeForm into Django Admin\nDESCRIPTION: Shows how to apply the custom `MyUserChangeForm` (which limits `last_name` length) within the Django admin interface for the `User` model. It defines `MyUserAdmin` inheriting from `UserAdmin`, sets its `form` attribute to `MyUserChangeForm`, unregisters the default `User` admin, and registers the `User` model with the custom `MyUserAdmin`. This ensures the admin interface uses the form with the restricted `last_name` length.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.admin import UserAdmin\nfrom django.contrib.auth.models import User\n\n\nclass MyUserAdmin(UserAdmin):\n    form = MyUserChangeForm\n\n\nadmin.site.unregister(User)\nadmin.site.register(User, MyUserAdmin)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Lookup Selection in Django Custom Field\nDESCRIPTION: Implements a custom get_lookup method for a CoordinatesField that dynamically selects a lookup based on the lookup name. This allows for flexible querying on multi-dimensional data.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass CoordinatesField(Field):\n    def get_lookup(self, lookup_name):\n        if lookup_name.startswith(\"x\"):\n            try:\n                dimension = int(lookup_name.removeprefix(\"x\"))\n            except ValueError:\n                pass\n            else:\n                return get_coordinate_lookup(dimension)\n        return super().get_lookup(lookup_name)\n```\n\n----------------------------------------\n\nTITLE: Using Swappable Models in Django\nDESCRIPTION: Django allows the use of swappable models like auth.User. A regression in Django 4.0 that caused the creation of bogus migrations for models referencing swappable models has been fixed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nauth.User\n```\n\n----------------------------------------\n\nTITLE: Warning Filter Configuration for Naive Datetimes\nDESCRIPTION: Python code to configure warnings as errors for naive datetime usage in Django models.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\nwarnings.filterwarnings(\n    \"error\",\n    r\"DateTimeField .* received a naive datetime\",\n    RuntimeWarning,\n    r\"django\\.db\\.models\\.fields\",\n)\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Regex Filtering using `regex` Lookup in Django (Python and SQL)\nDESCRIPTION: Demonstrates using the `__regex` lookup for case-sensitive regular expression matching in Django QuerySets. The specific regex syntax depends on the database backend (MySQL, Oracle, PostgreSQL, SQLite). For SQLite, which lacks native regex support, Django uses Python's `re` module via a user-defined function. Provides a Python example using a raw string and lists SQL equivalents for various databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_123\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.get(title__regex=r\"^(An?|The) +\")\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ... WHERE title REGEXP BINARY '^(An?|The) +'; -- MySQL\n\nSELECT ... WHERE REGEXP_LIKE(title, '^(An?|The) +', 'c'); -- Oracle\n\nSELECT ... WHERE title ~ '^(An?|The) +'; -- PostgreSQL\n\nSELECT ... WHERE title REGEXP '^(An?|The) +'; -- SQLite\n```\n\n----------------------------------------\n\nTITLE: Form Media Inheritance Example\nDESCRIPTION: Shows how forms inherit media from their widgets and can define additional media\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class ContactForm(forms.Form):\n...     date = DateField(widget=CalendarWidget)\n...     name = CharField(max_length=40, widget=OtherWidget)\n...\n\n>>> f = ContactForm()\n>>> f.media\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://static.example.com/actions.js\"></script>\n<script src=\"https://static.example.com/whizbang.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Options to Django Management Commands\nDESCRIPTION: Shows how to pass multiple options as a list to a Django management command using call_command().\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nmanagement.call_command(\"dumpdata\", exclude=[\"contenttypes\", \"auth\"])\n```\n\n----------------------------------------\n\nTITLE: Migration Dependencies Configuration\nDESCRIPTION: Shows how to configure migration dependencies and run_before attributes to control migration order.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"myapp\", \"0123_the_previous_migration\"),\n    ]\n\n    run_before = [\n        (\"third_party_app\", \"0001_do_awesome\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using Custom QueryDict with querystring Tag in Django Templates\nDESCRIPTION: This example demonstrates using custom QueryDict instances as positional arguments to replace request.GET. Key-value pairs from later arguments take precedence over earlier ones.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_30\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring my_query_dict my_dict size=\"S\" type=None %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Cache DB SessionStore Flush Method in Python\nDESCRIPTION: This snippet refers to the flush() method of Django's cache_db SessionStore, which has also been modified to prevent the creation of new empty sessions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ncache_db.SessionStore.flush()\n```\n\n----------------------------------------\n\nTITLE: Custom Assertions for Django TestCase\nDESCRIPTION: Examples of custom assertion methods provided by Django's TestCase class for testing web applications, including assertions for form fields, HTTP responses, and template usage.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertRaisesMessage(ValueError, \"invalid literal for int()\"):\n    int(\"a\")\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertFieldOutput(\n    EmailField, {\"a@a.com\": \"a@a.com\"}, {\"aaa\": [\"Enter a valid email address.\"]}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertFormError(form, field, errors, msg_prefix='')\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertFormSetError(formset, form_index, field, errors, msg_prefix='')\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertContains(response, text, count=None, status_code=200, msg_prefix='', html=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertNotContains(response, text, status_code=200, msg_prefix='', html=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.assertTemplateUsed(response, template_name, msg_prefix='', count=None)\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation for Person Model\nDESCRIPTION: The SQL that Django would generate to create a database table for the Person model. This shows how Django translates Python models into SQL database structures.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE myapp_person (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"first_name\" varchar(30) NOT NULL,\n    \"last_name\" varchar(30) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Labels and Rendered Output in Django Forms - Python\nDESCRIPTION: Demonstrates changing a form field's label at runtime and observing the effect on HTML output generated by as_div(). This allows for dynamic UI customization. Inputs include a form instance with fields; output is the altered HTML string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> f.as_div().split(\\\"</div>\\\")[0]\\n'<div><label for=\\\"id_subject\\\">Subject:</label><input type=\\\"text\\\" name=\\\"subject\\\" maxlength=\\\"100\\\" required id=\\\"id_subject\\\">'\\n>>> f[\\\"subject\\\"].label = \\\"Topic\\\"\\n>>> f.as_div().split(\\\"</div>\\\")[0]\\n'<div><label for=\\\"id_subject\\\">Topic:</label><input type=\\\"text\\\" name=\\\"subject\\\" maxlength=\\\"100\\\" required id=\\\"id_subject\\\">'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Aggregate Function in Django ORM (Python)\nDESCRIPTION: Demonstrates how to create a custom SUM aggregate function with support for SUM(ALL field). It shows the implementation of the Sum class inheriting from Aggregate, defining the function, template, and initialization method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Aggregate\n\n\nclass Sum(Aggregate):\n    # Supports SUM(ALL field).\n    function = \"SUM\"\n    template = \"%(function)s(%(all_values)s%(expressions)s)\"\n    allow_distinct = False\n    arity = 1\n\n    def __init__(self, expression, all_values=False, **extra):\n        super().__init__(expression, all_values=\"ALL \" if all_values else \"\", **extra)\n```\n\n----------------------------------------\n\nTITLE: Annotating with Greatest Value using Django ORM and Python\nDESCRIPTION: This example shows using the Greatest function to annotate Django querysets with the greatest value across multiple fields, such as a comment's last updated timestamp being the max of its own and a related blog's modification times. Dependencies include the Greatest function and related models. All arguments must be compatible in type across databases. Outputs are annotated fields, with behavior varying based on database backend concerning NULL values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Greatest\n>>> blog = Blog.objects.create(body=\"Greatest is the best.\")\n>>> comment = Comment.objects.create(body=\"No, Least is better.\", blog=blog)\n>>> comments = Comment.objects.annotate(last_updated=Greatest(\"modified\", \"blog__modified\"))\n>>> annotated_comment = comments.get()\n```\n\n----------------------------------------\n\nTITLE: MySQL Error Example\nDESCRIPTION: Example of a MySQL error message that occurs when the max_allowed_packet setting is too small for LayerMapping operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nOperationalError: (1153, \"Got a packet bigger than 'max_allowed_packet' bytes\")\n```\n\n----------------------------------------\n\nTITLE: Decorating a Django Class-Based View Using Class Decoration (Python/Django)\nDESCRIPTION: A more concise approach to decorating class-based views by applying the method_decorator to the class itself and specifying which method to decorate using the name parameter. This applies login_required to the dispatch method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@method_decorator(login_required, name=\"dispatch\")\nclass ProtectedView(TemplateView):\n    template_name = \"secret.html\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Poll Results in Django\nDESCRIPTION: This HTML template displays the results of a poll, showing the number of votes for each choice and providing a link to vote again.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial04.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>{{ question.question_text }}</h1>\n\n<ul>\n{% for choice in question.choice_set.all %}\n    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>\n{% endfor %}\n</ul>\n\n<a href=\"{% url 'polls:detail' question.id %}\">Vote again?</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Storage Class in Django\nDESCRIPTION: Shows how to create a basic subclass of Django's Storage class, which is the first step in implementing custom file storage.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-file-storage.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.storage import Storage\n\n\nclass MyStorage(Storage): ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Conversion Methods for Custom Django Field\nDESCRIPTION: This code shows the implementation of from_db_value and to_python methods for a custom HandField, handling conversion between database values and Python objects.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nimport re\n\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\ndef parse_hand(hand_string):\n    \"\"\"Takes a string of cards and splits into a full hand.\"\"\"\n    p1 = re.compile(\".{26}\")\n    p2 = re.compile(\"..\")\n    args = [p2.findall(x) for x in p1.findall(hand_string)]\n    if len(args) != 4:\n        raise ValidationError(_(\"Invalid input for a Hand instance\"))\n    return Hand(*args)\n\n\nclass HandField(models.Field):\n    # ...\n\n    def from_db_value(self, value, expression, connection):\n        if value is None:\n            return value\n        return parse_hand(value)\n\n    def to_python(self, value):\n        if isinstance(value, Hand):\n            return value\n\n        if value is None:\n            return value\n\n        return parse_hand(value)\n```\n\n----------------------------------------\n\nTITLE: Effect of Deleting Object on Reverse M2M Relationship (pycon)\nDESCRIPTION: Shows the impact of deleting an `Article` instance (`a2`) using `delete()`. Subsequent queries show the deleted article is removed from the list of all articles, and publications previously related to it (`p2`) no longer list it in their reverse `article_set`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_19\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a2.delete()\n>>> Article.objects.all()\n<QuerySet [<Article: Django lets you build web apps easily>]>\n>>> p2.article_set.all()\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests Sequentially with SerializeMixin\nDESCRIPTION: This code snippet demonstrates how to use SerializeMixin to ensure that certain test classes run sequentially, which is useful for tests that share common resources and cannot be run in parallel.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom django.test import TestCase\nfrom django.test.testcases import SerializeMixin\n\n\nclass ImageTestCaseMixin(SerializeMixin):\n    lockfile = __file__\n\n    def setUp(self):\n        self.filename = os.path.join(temp_storage_dir, \"my_file.png\")\n        self.file = create_file(self.filename)\n\n\nclass RemoveImageTests(ImageTestCaseMixin, TestCase):\n    def test_remove_image(self):\n        os.remove(self.filename)\n        self.assertFalse(os.path.exists(self.filename))\n\n\nclass ResizeImageTests(ImageTestCaseMixin, TestCase):\n    def test_resize_image(self):\n        resize_image(self.file, (48, 48))\n        self.assertEqual(get_image_size(self.file), (48, 48))\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'contains' Lookup in Django Python\nDESCRIPTION: Illustrates using the `contains` lookup (`__contains`, SQL operator `@>`) on the `ages` `IntegerRangeField` of the `Event` model. This Django ORM query filters for `Event` objects where the `ages` range completely encompasses the specified `NumericRange(4, 5)`. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_19\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__contains=NumericRange(4, 5))\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Django Feed Class Example with All Hooks - Python\nDESCRIPTION: This example shows a Django Feed class illustrating all supported attributes and optional/required methods for customizing feed output. Dependencies are the Django syndication Feed view and feedgenerator utilities. The code demonstrates overriding class attributes or methods for feed type, templates, metadata (title, link, description, language, author info, etc.), supporting both hardcoded values and logic via methods that can take an optional object. Developers provide either an attribute or one of several method overrides per property. The output is an XML news feed customized via these properties; the input may be a context object from 'get_object()'.\n\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.utils import feedgenerator\n\nclass ExampleFeed(Feed):\n    # FEED TYPE -- Optional. This should be a class that subclasses\n    # django.utils.feedgenerator.SyndicationFeed. This designates\n    # which type of feed this should be: RSS 2.0, Atom 1.0, etc. If\n    # you don't specify feed_type, your feed will be RSS 2.0. This\n    # should be a class, not an instance of the class.\n\n    feed_type = feedgenerator.Rss201rev2Feed\n\n    # TEMPLATE NAMES -- Optional. These should be strings\n    # representing names of Django templates that the system should\n    # use in rendering the title and description of your feed items.\n    # Both are optional. If a template is not specified, the\n    # item_title() or item_description() methods are used instead.\n\n    title_template = None\n    description_template = None\n\n    # LANGUAGE -- Optional. This should be a string specifying a language\n    # code. Defaults to django.utils.translation.get_language().\n    language = \"de\"\n\n    # TITLE -- One of the following three is required. The framework\n    # looks for them in this order.\n\n    def title(self, obj):\n        \"\"\"\n        Takes the object returned by get_object() and returns the\n        feed's title as a normal Python string.\n        \"\"\"\n\n    def title(self):\n        \"\"\"\n        Returns the feed's title as a normal Python string.\n        \"\"\"\n\n    title = \"foo\"  # Hard-coded title.\n\n    # LINK -- One of the following three is required. The framework\n    # looks for them in this order.\n\n    def link(self, obj):\n        \"\"\"\n        # Takes the object returned by get_object() and returns the URL\n        # of the HTML version of the feed as a normal Python string.\n        \"\"\"\n\n    def link(self):\n        \"\"\"\n        Returns the URL of the HTML version of the feed as a normal Python\n        string.\n        \"\"\"\n\n    link = \"/blog/\"  # Hard-coded URL.\n\n    # FEED_URL -- One of the following three is optional. The framework\n    # looks for them in this order.\n\n    def feed_url(self, obj):\n        \"\"\"\n        # Takes the object returned by get_object() and returns the feed's\n        # own URL as a normal Python string.\n        \"\"\"\n\n    def feed_url(self):\n        \"\"\"\n        Returns the feed's own URL as a normal Python string.\n        \"\"\"\n\n    feed_url = \"/blog/rss/\"  # Hard-coded URL.\n\n    # GUID -- One of the following three is optional. The framework looks\n    # for them in this order. This property is only used for Atom feeds\n    # (where it is the feed-level ID element). If not provided, the feed\n    # link is used as the ID.\n\n    def feed_guid(self, obj):\n        \"\"\"\n        Takes the object returned by get_object() and returns the globally\n        unique ID for the feed as a normal Python string.\n        \"\"\"\n\n    def feed_guid(self):\n        \"\"\"\n        Returns the feed's globally unique ID as a normal Python string.\n        \"\"\"\n\n    feed_guid = \"/foo/bar/1234\"  # Hard-coded guid.\n\n    # DESCRIPTION -- One of the following three is required. The framework\n    # looks for them in this order.\n\n    def description(self, obj):\n        \"\"\"\n        Takes the object returned by get_object() and returns the feed's\n        description as a normal Python string.\n        \"\"\"\n\n    def description(self):\n        \"\"\"\n        Returns the feed's description as a normal Python string.\n        \"\"\"\n\n    description = \"Foo bar baz.\"  # Hard-coded description.\n\n    # AUTHOR NAME --One of the following three is optional. The framework\n    # looks for them in this order.\n\n    def author_name(self, obj):\n        \"\"\"\n        Takes the object returned by get_object() and returns the feed's\n        author's name as a normal Python string.\n        \"\"\"\n\n    def author_name(self):\n        \"\"\"\n        Returns the feed's author's name as a normal Python string.\n        \"\"\"\n\n    author_name = \"Sally Smith\"  # Hard-coded author name.\n\n    # AUTHOR EMAIL --One of the following three is optional. The framework\n    # looks for them in this order.\n\n    def author_email(self, obj):\n        \"\"\"\n        Takes the object returned by get_object() and returns the feed's\n        author's email as a normal Python string.\n        \"\"\"\n\n    def author_email(self):\n        \"\"\"\n        Returns the feed's author's email as a normal Python string.\n        \"\"\"\n\n    author_email = \"test@example.com\"  # Hard-coded author email.\n\n    # AUTHOR LINK --One of the following three is optional. The framework\n    # looks for them in this order. In each case, the URL should include\n    # the scheme (such as \"https://\") and domain name.\n\n    def author_link(self, obj):\n        \"\"\"\n        Takes the object returned by get_object() and returns the feed's\n        author's URL as a normal Python string.\n        \"\"\"\n\n    def author_link(self):\n        \"\"\"\n        Returns the feed's author's URL as a normal Python string.\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Caching Template Fragment with Custom Cache Backend in Django\nDESCRIPTION: Demonstrates how to specify a custom cache backend for a template fragment using the 'using' keyword argument.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_28\n\nLANGUAGE: html+django\nCODE:\n```\n{% cache 300 local-thing ...  using=\"localcache\" %}\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects from Specific Databases in Django\nDESCRIPTION: Demonstrates how to delete objects from specific databases using the using keyword argument with the delete() method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> u = User.objects.using(\"legacy_users\").get(username=\"fred\")\n>>> u.delete()  # will delete from the `legacy_users` database\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> user_obj.save(using=\"new_users\")\n>>> user_obj.delete(using=\"legacy_users\")\n```\n\n----------------------------------------\n\nTITLE: Defining MaxLengthValidator in Django\nDESCRIPTION: Validator class that checks if the length of a value exceeds a maximum limit. Raises ValidationError if the length is greater than limit_value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMaxLengthValidator(limit_value, message=None)\n```\n\n----------------------------------------\n\nTITLE: Enabling Secure Content Type Nosniff in Django\nDESCRIPTION: Sets SECURE_CONTENT_TYPE_NOSNIFF to True by default to prevent MIME type sniffing security vulnerabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nSECURE_CONTENT_TYPE_NOSNIFF = True\n```\n\n----------------------------------------\n\nTITLE: Updated Spanish Localization Date Format with Escaped Characters\nDESCRIPTION: The corrected Spanish localization date format with proper escaping for 'd', 'e', and 'o' characters to prevent conflicts with Django 1.4's new date format specifiers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nDATE_FORMAT = r\"j \\d\\e F \\d\\e Y\"\n```\n\n----------------------------------------\n\nTITLE: Default STATICFILES_FINDERS Configuration in Python\nDESCRIPTION: The default configuration for static file finders which specifies the backends used to locate static files. Includes FileSystemFinder for STATICFILES_DIRS and AppDirectoriesFinder for app-specific static directories.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_83\n\nLANGUAGE: python\nCODE:\n```\n[\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Background Image with CSS in Django\nDESCRIPTION: CSS code that adds a background image to the body element using relative paths in a Django static file.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial06.txt#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    background: white url(\"images/background.png\") no-repeat;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Block Override in Django Templates\nDESCRIPTION: Shows that block tags are always evaluated first, regardless of surrounding conditional tags. This example will always override the title block content.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_13\n\nLANGUAGE: html+django\nCODE:\n```\n{% if change_title %}\n    {% block title %}Hello!{% endblock title %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databases in Django Settings\nDESCRIPTION: Example settings.py configuration defining two databases - a default PostgreSQL database and a MySQL database called 'users'. This shows how to set up database connections with different engines, credentials, and aliases.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"NAME\": \"app_data\",\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"USER\": \"postgres_user\",\n        \"PASSWORD\": \"s3krit\",\n    },\n    \"users\": {\n        \"NAME\": \"user_data\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"priv4te\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CACHES with Backend\nDESCRIPTION: This snippet shows the default CACHES-BACKEND setting. The BACKEND setting specifies which cache backend Django should use, with available backends including various memory-based and file-based options, and also allowing custom backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nBACKEND = ''\n```\n\n----------------------------------------\n\nTITLE: Using Django's Default Storage System Directly\nDESCRIPTION: Example showing how to use Django's default storage system directly, without going through a model's file field. Demonstrates creating, reading, and deleting files.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.files.base import ContentFile\n>>> from django.core.files.storage import default_storage\n\n>>> path = default_storage.save(\"path/to/file\", ContentFile(b\"new content\"))\n>>> path\n'path/to/file'\n\n>>> default_storage.size(path)\n11\n>>> default_storage.open(path).read()\nb'new content'\n\n>>> default_storage.delete(path)\n>>> default_storage.exists(path)\nFalse\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited ModelAdmin Actions (Pre-Django 2.2) in Python\nDESCRIPTION: This snippet illustrates the older Django behavior (prior to version 2.2) where `actions` defined in a base `ModelAdmin` class were automatically collected and combined with actions defined in a subclass. In this example, `SubAdmin` would implicitly inherit the 'a' action from `BaseAdmin`, resulting in actions ['a', 'b'].\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass BaseAdmin(admin.ModelAdmin):\n    actions = [\"a\"]\n\n\nclass SubAdmin(BaseAdmin):\n    actions = [\"b\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Paginator Error Message in Python\nDESCRIPTION: This snippet demonstrates how to initialize a Django `Paginator` with a list of items and a specified number of items per page. It then shows the default `EmptyPage` exception that is raised when attempting to access a page number that contains no results (i.e., beyond the last page). It requires importing the `Paginator` class from `django.core.paginator`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/paginator.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.core.paginator import Paginator\n>>> paginator = Paginator([1, 2, 3], 2)\n>>> paginator.page(5)\nTraceback (most recent call last):\n  ...\nEmptyPage: That page contains no results\n```\n\n----------------------------------------\n\nTITLE: SQL Query with NOT EXISTS for Conditional Filtering\nDESCRIPTION: This SQL snippet shows the database query generated by the preceding Django ORM Python code. It selects from the `client` table (`c0`) and uses a `NOT EXISTS` clause with a correlated subquery. The subquery checks for the existence of another row (`c1`) in the `client` table with the same `account_type` but a different `id`, effectively filtering for rows where no other row shares the same `account_type`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ...\nFROM client c0\nWHERE NOT EXISTS (\n  SELECT c1.id\n  FROM client c1\n  WHERE c1.account_type = c0.account_type AND NOT c1.id = c0.id\n)\n```\n\n----------------------------------------\n\nTITLE: Potential Pitfalls with Disabled Auto-escaping and Filter Chaining\nDESCRIPTION: Illustrates a scenario where disabling auto-escaping (`{% autoescape off %}`) can lead to unexpected results when chaining filters like `join` and `escape`. Because `join` is executed first within the `autoescape off` context, its result (the joined string) is marked as safe, preventing the subsequent `escape` filter from having any effect.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n    {{ my_list|join:\", \"|escape }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Defining Verbose Field Names in Django Models\nDESCRIPTION: Examples showing how to specify verbose names for different field types in Django models. This includes regular fields with explicit and implicit verbose names, and relationship fields that require using the verbose_name keyword argument.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfirst_name = models.CharField(\"person's first name\", max_length=30)\n```\n\nLANGUAGE: python\nCODE:\n```\nfirst_name = models.CharField(max_length=30)\n```\n\nLANGUAGE: python\nCODE:\n```\npoll = models.ForeignKey(\n    Poll,\n    on_delete=models.CASCADE,\n    verbose_name=\"the related poll\",\n)\nsites = models.ManyToManyField(Site, verbose_name=\"list of sites\")\nplace = models.OneToOneField(\n    Place,\n    on_delete=models.CASCADE,\n    verbose_name=\"related place\",\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone in Django Templates\nDESCRIPTION: Shows how to set specific time zones for template blocks using the timezone tag. Can set to a named zone or None for server time.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% load tz %}\n\n{% timezone \"Europe/Paris\" %}\n    Paris time: {{ value }}\n{% endtimezone %}\n\n{% timezone None %}\n    Server time: {{ value }}\n{% endtimezone %}\n```\n\n----------------------------------------\n\nTITLE: Connecting M2M Signal Handler in Django\nDESCRIPTION: Shows how to connect a signal handler to track changes in a many-to-many relationship between Pizza and Toppings models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nm2m_changed.connect(toppings_changed, sender=Pizza.toppings.through)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installed Apps for GeoDjango Project\nDESCRIPTION: Modifies the INSTALLED_APPS setting in settings.py to include necessary Django modules and the custom 'world' application for a GeoDjango project.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"django.contrib.gis\",\n    \"world\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Jinja2 for Django Integration\nDESCRIPTION: Shows the command to install Jinja2 using pip, which is required for using the Jinja2 backend in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m pip install Jinja2\n```\n\n----------------------------------------\n\nTITLE: Automatic URL Quoting with `reverse` in Django (Pycon)\nDESCRIPTION: Pycon example demonstrating that the string returned by `django.urls.reverse` is automatically URL-quoted (percent-encoded). Passing an argument containing non-ASCII characters like \"Orléans\" results in an appropriately encoded path segment such as '.../Orl%C3%A9ans/'. Further encoding the output is usually unnecessary and may lead to errors.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> reverse(\"cities\", args=[\"Orléans\"])\n'.../Orl%C3%A9ans/'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template Tags with Multiple Arguments in Django Templates\nDESCRIPTION: Example showing how to call a custom template tag with multiple positional and keyword arguments in a Django template.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{% my_tag 123 \"abcd\" book.title warning=message|lower profile=user.profile %}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL SearchQuery Operator Fix\nDESCRIPTION: Fixed functionality to allow combining contrib.postgres.search.SearchQuery with multiple & or | operators\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncontrib.postgres.search.SearchQuery\n```\n\n----------------------------------------\n\nTITLE: Child Class from Another App in Django Abstract Base Classes\nDESCRIPTION: Example showing how inheritance from an abstract base class works across different Django apps, demonstrating how related_name placeholders resolve to unique names based on both class name and app label.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom common.models import Base\n\n\nclass ChildB(Base):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Memcached Backend (Multiple Servers, Same Port) in Django (Python)\nDESCRIPTION: This Python snippet demonstrates configuring Django's `CACHES` setting to use multiple Memcached servers (172.19.26.240 and 172.19.26.242, both on port 11211) as a single shared cache. The `LOCATION` setting accepts a list of server addresses. It uses the `PyMemcacheCache` backend.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.memcached.PyMemcacheCache\",\n        \"LOCATION\": [\n            \"172.19.26.240:11211\",\n            \"172.19.26.242:11211\",\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RelatedOnlyFieldListFilter in Django Admin\nDESCRIPTION: Demonstrates how to use RelatedOnlyFieldListFilter to limit choices in a related model filter to only the objects involved in that relation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BookAdmin(admin.ModelAdmin):\n    list_filter = [\n        (\"author\", admin.RelatedOnlyFieldListFilter),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin User Form Usage - Django Admin - Python\nDESCRIPTION: This snippet shows how to substitute the default Django admin user change form with a custom form (such as MyUserChangeForm) to enforce field-level constraints in the admin interface. It covers unregistering the default User model and reregistering it with a subclassed UserAdmin using the new form. 'UserAdmin.form' is set to the custom form, and the Django admin site is updated accordingly. Dependencies include Django's admin and auth models; the snippet assumes you have defined MyUserChangeForm in the project. Input is the User model/admin; output is the overridden admin edit form for users.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.admin import UserAdmin\nfrom django.contrib.auth.models import User\n\n\nclass MyUserAdmin(UserAdmin):\n    form = MyUserChangeForm\n\n\nadmin.site.unregister(User)\nadmin.site.register(User, MyUserAdmin)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment in Python\nDESCRIPTION: This method sets up the test environment by calling setup_test_environment and configuring the DEBUG setting. It prepares the system for test execution.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef setup_test_environment(self, **kwargs):\n    setup_test_environment()\n    django.conf.settings.DEBUG = self.debug_mode\n```\n\n----------------------------------------\n\nTITLE: Inferring TextChoices Labels in Python\nDESCRIPTION: Defines a Django `TextChoices` enumeration named `Vehicle`. It demonstrates how human-readable labels (`.label`) can be automatically inferred from the member names by replacing underscores with spaces and using title-case if explicit labels are not provided.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class Vehicle(models.TextChoices):\n...     CAR = \"C\"\n...     TRUCK = \"T\"\n...     JET_SKI = \"J\"\n...\n>>> Vehicle.JET_SKI.label\n'Jet Ski'\n```\n\n----------------------------------------\n\nTITLE: Object-based Redirection in Django\nDESCRIPTION: Example of using redirect() with a model object that implements get_absolute_url().\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import redirect\n\n\ndef my_view(request):\n    ...\n    obj = MyModel.objects.get(...)\n    return redirect(obj)\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySet in Django ModelAdmin\nDESCRIPTION: This method shows how to customize the queryset for the admin interface, filtering objects based on the logged-in user's permissions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if request.user.is_superuser:\n            return qs\n        return qs.filter(author=request.user)\n```\n\n----------------------------------------\n\nTITLE: Using LazyObject for Storage in Django Tests\nDESCRIPTION: Example of using LazyObject to delay storage evaluation, which allows for overriding storage settings in tests with override_settings. This approach prevents storage from being instantiated during model class loading.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.storage import storages\nfrom django.utils.functional import LazyObject\n\n\nclass OtherStorage(LazyObject):\n    def _setup(self):\n        self._wrapped = storages[\"mystorage\"]\n\n\nmy_storage = OtherStorage()\n\n\nclass MyModel(models.Model):\n    upload = models.FileField(storage=my_storage)\n```\n\n----------------------------------------\n\nTITLE: Running Python with Deprecation Warnings Enabled (Shell)\nDESCRIPTION: Executes the Python interpreter with the `-Wd` flag. This flag forces default warnings, including DeprecationWarning, to be displayed. It is recommended for third-party app authors testing package compatibility against Django 6.0 requirements.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -Wd\n```\n\n----------------------------------------\n\nTITLE: Setting `app_label` in Django Model Meta (Python)\nDESCRIPTION: Specifies the application label (`app_label`) for a Django model defined outside of an application listed in `INSTALLED_APPS`. This ensures Django knows which application the model belongs to.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp_label = \"myapp\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Formset Memory Exhaustion with max_num (Django Formsets/Python)\nDESCRIPTION: Details the introduction of the `max_num` argument for formset factories in Django 1.4.4. This enforces a strict maximum number of forms (defaulting to 1000) that can be created based on client-provided data in the management form, mitigating potential memory exhaustion vulnerabilities. This limit is configurable via the `max_num` argument passed to the formset factory.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmax_num\n```\n\n----------------------------------------\n\nTITLE: Using Django Database Shell\nDESCRIPTION: Demonstrates how to use the django-admin dbshell command to run database-specific command-line clients and execute raw SQL queries directly.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ django-admin dbshell -- -c 'select current_user'\n current_user\n--------------\n postgres\n(1 row)\n```\n\nLANGUAGE: console\nCODE:\n```\n$ django-admin dbshell -- -e \"select user()\"\n+----------------------+\n| user()               |\n+----------------------+\n| djangonaut@localhost |\n+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Database Query Testing with TestCase in Django\nDESCRIPTION: Demonstrates how to configure TestCase to allow queries against specific non-default databases using the databases attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass OtherDBTests(TestCase):\n    databases = {\"other\"}\n\n    def test_other_db_query(self): ...\n```\n\n----------------------------------------\n\nTITLE: Basic Key Lookup in Django JSONField\nDESCRIPTION: Shows how to query a JSONField based on dictionary keys, including creating objects with nested JSON data and querying by specific key values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(\n...     name=\"Rufus\",\n...     data={\n...         \"breed\": \"labrador\",\n...         \"owner\": {\n...             \"name\": \"Bob\",\n...             \"other_pets\": [\n...                 {\n...                     \"name\": \"Fishy\",\n...                 }\n...             ],\n...         },\n...     },\n... )\n<Dog: Rufus>\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": None})\n<Dog: Meg>\n>>> Dog.objects.filter(data__breed=\"collie\")\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Git Alias Configuration for Pull Request Checkout\nDESCRIPTION: Git configuration alias that allows easy checkout of pull requests using a PR number. The alias should be added to ~/.gitconfig with upstream set to django/django.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[alias]\n    pr = !sh -c \\\"git fetch upstream pull/${1}/head:pr/${1} && git checkout pr/${1}\\\"\n```\n\n----------------------------------------\n\nTITLE: Using linebreaks Filter\nDESCRIPTION: Demonstrates converting plain text line breaks to HTML breaks and paragraphs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_76\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|linebreaks }}\n```\n\n----------------------------------------\n\nTITLE: Using blocktranslate tag with multiple expressions in Django templates\nDESCRIPTION: Shows how to use multiple expressions inside a single {% blocktranslate %} tag in Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_24\n\nLANGUAGE: html+django\nCODE:\n```\n{% blocktranslate with book_t=book|title author_t=author|title %}\nThis is {{ book_t }} by {{ author_t }}\n{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Fixing SQL Injection in QuerySet Methods for Django\nDESCRIPTION: Addresses CVE-2022-28346, a potential SQL injection vulnerability in QuerySet's annotate(), aggregate(), and extra() methods when using dictionary expansion for kwargs.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.annotate(**kwargs)\nQuerySet.aggregate(**kwargs)\nQuerySet.extra(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Fixing Username Enumeration in ModelBackend.authenticate() (Python)\nDESCRIPTION: The authenticate() method in django.contrib.auth.backends.ModelBackend allowed timing attacks to enumerate users with unusable passwords. This vulnerability affects the authentication process.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.backends.ModelBackend.authenticate()\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting AutoField as Primary Key in Django Model\nDESCRIPTION: Defines an AutoField as the primary key in a Django model to maintain the historical behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass MyModel(models.Model):\n    id = models.AutoField(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Bulk Removing ManyToMany Relationships with Q Expressions\nDESCRIPTION: Shows how to use Q expressions with delete() to efficiently remove multiple ManyToMany relationships in a single query.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Q\n\nPizzaToppingRelationship = Pizza.toppings.through\nPizzaToppingRelationship.objects.filter(\n    Q(pizza=my_pizza, topping=pepperoni)\n    | Q(pizza=your_pizza, topping=pepperoni)\n    | Q(pizza=your_pizza, topping=mushroom)\n).delete()\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_pizza.toppings.remove(pepperoni)\nyour_pizza.toppings.remove(pepperoni, mushroom)\n```\n\n----------------------------------------\n\nTITLE: Advanced Django Logging Configuration with Custom Logger\nDESCRIPTION: Extended logging configuration that sets up both root and django-specific loggers. Includes environment variable control for log level and separate console handlers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n        },\n    },\n    \"root\": {\n        \"handlers\": [\"console\"],\n        \"level\": \"WARNING\",\n    },\n    \"loggers\": {\n        \"django\": {\n            \"handlers\": [\"console\"],\n            \"level\": os.getenv(\"DJANGO_LOG_LEVEL\", \"INFO\"),\n            \"propagate\": False,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Entering Superuser Details\nDESCRIPTION: This snippet shows the prompts and expected input for creating a Django superuser, including username, email, and password confirmation.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nUsername: admin\n\nEmail address: admin@example.com\n\nPassword: **********\nPassword (again): *********\nSuperuser created successfully.\n```\n\n----------------------------------------\n\nTITLE: Default Options for PyMemcacheCache Backend in Django (Python)\nDESCRIPTION: This Python snippet shows the default options applied to the `PyMemcacheCache` backend within the Django `CACHES` setting. These options, including handling of Unicode keys, default noreply behavior, and serialization method (`pickle_serde`), can be overridden via the `OPTIONS` dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"OPTIONS\": {\n    \"allow_unicode_keys\": True,\n    \"default_noreply\": False,\n    \"serde\": pymemcache.serde.pickle_serde,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database in Django\nDESCRIPTION: The create_test_db function creates a new test database and runs migrations. It handles existing databases based on the autoclobber and keepdb flags. It returns the name of the created test database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ncreate_test_db(verbosity=1, autoclobber=False, keepdb=False)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Connection via SID in Django Settings (Python)\nDESCRIPTION: Demonstrates setting up the `DATABASES` dictionary in Django's settings.py to connect to an Oracle database using its SID, Host, and Port. Requires the `django.db.backends.oracle` engine and appropriate user credentials.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.oracle\",\n        \"NAME\": \"xe\",\n        \"USER\": \"a_user\",\n        \"PASSWORD\": \"a_password\",\n        \"HOST\": \"dbprod01ned.mycompany.com\",\n        \"PORT\": \"1540\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Django JSONField and JSONBAgg Examples in Python\nDESCRIPTION: Example of creating Document objects with various data types for JSONField and using JSONBAgg with a default parameter in an annotation query. From Django 5.1+, string literals will be implicitly interpreted as JSON string literals.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDocument(data=Value(None, JSONField())),\nDocument(data=[]),\nDocument(data=\"foo-bar\"),\n\n```\n\nLANGUAGE: python\nCODE:\n```\nDocument.objects.annotate(\n    JSONBAgg(\"field\", default=[]),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Related Models for Django Admin Inlines\nDESCRIPTION: Example showing how to define Author and Book models with a ForeignKey relationship that will be used for inline editing in the Django admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Book(models.Model):\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    title = models.CharField(max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Specifying SSL Key File for SMTP Client Authentication in Django\nDESCRIPTION: Sets the path to a PEM-formatted private key file (None by default) for client authentication if EMAIL_USE_SSL or EMAIL_USE_TLS is True. Requires EMAIL_SSL_CERTFILE to be set as well.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_SSL_KEYFILE = None\n```\n\n----------------------------------------\n\nTITLE: Using sensitive_variables Decorator to Hide Sensitive Information\nDESCRIPTION: This snippet demonstrates the use of the sensitive_variables decorator to prevent sensitive local variables from being included in error reports.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.debug import sensitive_variables\n\n\n@sensitive_variables(\"user\", \"pw\", \"cc\")\ndef process_info(user):\n    pw = user.pass_word\n    cc = user.credit_card_number\n    name = user.name\n    ...\n```\n\n----------------------------------------\n\nTITLE: Referencing UsernameField in Django's Auth Forms\nDESCRIPTION: This snippet refers to the UsernameField class from Django's authentication forms, which is the focus of the security fix in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.23.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.forms.UsernameField\n```\n\n----------------------------------------\n\nTITLE: Loading Any Matching Fixture Type by Name (Shell)\nDESCRIPTION: Demonstrates that invoking 'django-admin loaddata' with a base name (without extension) will search and load the first matching fixture of any supported serialization format. Requires Django and at least one fixture (e.g., mydata.json) present. Input: fixture base name (mydata); Output: best-matching fixture loaded.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin loaddata mydata\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Form Validation Errors as Data in Python\nDESCRIPTION: Shows how to access form validation errors as ValidationError objects using the as_data() method on the 'errors' attribute. Input is a bound, invalid Form; output is a dictionary mapping field names to lists of ValidationError instances, which can be used for custom error handling or serialization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> f.errors.as_data()\n{'sender': [ValidationError(['Enter a valid email address.'])],\n'subject': [ValidationError(['This field is required.'])]}\n```\n\n----------------------------------------\n\nTITLE: Adding Translator Comments in Django Views\nDESCRIPTION: Shows how to add comments for translators using the 'Translators:' prefix. These comments appear in the .po file and provide context to translators.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef my_view(request):\n    # Translators: This message appears on the home page only\n    output = gettext(\"Welcome to my site.\")\n```\n\n----------------------------------------\n\nTITLE: Subclassing Choices for Custom Data Types\nDESCRIPTION: Shows how to create custom choice enumerations for data types other than string or integer by subclassing `models.Choices` along with the required concrete data type (`datetime.date` in this example). This allows the enum `MoonLandings` to be used with a `DateField`, where each member stores a date and a label.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom django.db import models\n\nclass MoonLandings(datetime.date, models.Choices):\n    APOLLO_11 = 1969, 7, 20, \"Apollo 11 (Eagle)\"\n    APOLLO_12 = 1969, 11, 19, \"Apollo 12 (Intrepid)\"\n    APOLLO_14 = 1971, 2, 5, \"Apollo 14 (Antares)\"\n    APOLLO_15 = 1971, 7, 30, \"Apollo 15 (Falcon)\"\n    APOLLO_16 = 1972, 4, 21, \"Apollo 16 (Orion)\"\n    APOLLO_17 = 1972, 12, 11, \"Apollo 17 (Challenger)\"\n```\n\n----------------------------------------\n\nTITLE: Using Prefixes for Multiple Forms in Django\nDESCRIPTION: This snippet demonstrates how to use form prefixes to namespace multiple forms within a single HTML form. It shows both instantiation-time prefix setting and class-level prefix definition.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n>>> mother = PersonForm(prefix=\"mother\")\n>>> father = PersonForm(prefix=\"father\")\n>>> print(mother)\n<div><label for=\"id_mother-first_name\">First name:</label><input type=\"text\" name=\"mother-first_name\" required id=\"id_mother-first_name\"></div>\n<div><label for=\"id_mother-last_name\">Last name:</label><input type=\"text\" name=\"mother-last_name\" required id=\"id_mother-last_name\"></div>\n>>> print(father)\n<div><label for=\"id_father-first_name\">First name:</label><input type=\"text\" name=\"father-first_name\" required id=\"id_father-first_name\"></div>\n<div><label for=\"id_father-last_name\">Last name:</label><input type=\"text\" name=\"father-last_name\" required id=\"id_father-last_name\"></div>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> class PersonForm(forms.Form):\n...     ...\n...     prefix = \"person\"\n...\n```\n\n----------------------------------------\n\nTITLE: Installing psycopg Module for PostgreSQL Support - Dos Console\nDESCRIPTION: This command installs the psycopg package using Python's package manager pip within a Windows command shell. psycopg acts as the interface between Python (and thus Django/GeoDjango) and PostgreSQL. This must run in an environment where pip and Python are available, typically within an activated virtual environment. The user must enter the command at the prompt; no parameters are required. Output is the downloaded and installed psycopg module, available for Django to use as its backend adapter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_12\n\nLANGUAGE: doscon\nCODE:\n```\n...\\> py -m pip install psycopg\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Installation in Shell\nDESCRIPTION: This snippet demonstrates how to verify Python installation by running the 'python' command in the shell. It shows the expected output, including Python version and additional information.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/install.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\nPython 3.x.y\n[GCC 4.x] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Password Hashing for Django Tests\nDESCRIPTION: Shows how to configure a faster password hashing algorithm for Django tests. This can significantly speed up tests that involve user authentication by using MD5 instead of the default slower algorithm.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.MD5PasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates Using Default Format in Django Templates - HTML+Django\nDESCRIPTION: Illustrates default usage of the 'date' filter without an explicit format string, causing it to use the global DATE_FORMAT. Requires a datetime variable and Django's template context with appropriate localization. Output is a locale-sensitive, formatted date as a string. Escapes or literal strings may be required to prevent unintended substitutions for special characters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_53\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|date }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Widget Media with Static URL\nDESCRIPTION: Example showing how CalendarWidget media is rendered with different static URL configurations\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> w = CalendarWidget()\n>>> print(w.media)\n<link href=\"/css/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://othersite.com/actions.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Databases with Django Management Commands\nDESCRIPTION: Terminal commands showing how to run migrations on different databases using the --database option with the migrate command. This demonstrates how to synchronize models onto each configured database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py migrate\n$ ./manage.py migrate --database=users\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Cache Headers with patch_response_headers\nDESCRIPTION: Adds Expires and Cache-Control headers to an HttpResponse object if they don't already exist. The cache_timeout parameter specifies seconds, defaulting to CACHE_MIDDLEWARE_SECONDS setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npatch_response_headers(response, cache_timeout=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Default Server for Unrecognized Hosts\nDESCRIPTION: Nginx configuration to respond with a 444 No Response status for unrecognized hosts, which helps protect against certain CSRF attacks targeting invalid hostnames.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/checklist.txt#2025-04-23_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80 default_server;\n    return 444;\n}\n```\n\n----------------------------------------\n\nTITLE: Unpacking `ResolverMatch` Object from `resolve` in Django (Python)\nDESCRIPTION: Conceptual Python code illustrating that the `ResolverMatch` object returned by `django.urls.resolve` can be directly unpacked into a triple. This triple contains the resolved view function (`func`), parsed positional arguments (`args`), and parsed keyword arguments (`kwargs`) extracted from the URL path.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfunc, args, kwargs = resolve(\"/some/path/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Objects with SRID\nDESCRIPTION: Demonstrates creating various geometry objects with specified SRID (Spatial Reference System Identifier). Shows construction using GEOSGeometry, LineString, and Point classes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.geos import GEOSGeometry, LineString, Point\n>>> print(GEOSGeometry(\"POINT (0 0)\", srid=4326))\nSRID=4326;POINT (0 0)\n>>> print(LineString((0, 0), (1, 1), srid=4326))\nSRID=4326;LINESTRING (0 0, 1 1)\n>>> print(Point(0, 0, srid=32140))\nSRID=32140;POINT (0 0)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over QueryDict Items and Values in Python\nDESCRIPTION: Demonstrates how to iterate over items and values in a QueryDict, which returns only the last value for each key.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> q = QueryDict(\"a=1&a=2&a=3\")\n>>> list(q.items())\n[('a', '3')]\n>>> list(q.values())\n['3']\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in Development with Django URLconf\nDESCRIPTION: Configures URLs to serve static files during development using Django's built-in static file serving view.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n```\n\n----------------------------------------\n\nTITLE: Git Push Branch and Branch Deletion Commands\nDESCRIPTION: Demonstrates how to push a feature branch to upstream and then delete it using Git commands. The example shows pushing a branch named 'feature_antigravity' and then deleting it using the colon syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push upstream feature_antigravity\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push upstream :feature_antigravity\n```\n\n----------------------------------------\n\nTITLE: Using a Callable for Dynamic Django Model Choices\nDESCRIPTION: Shows how to define the `choices` option using a callable function (`get_currencies`). This function returns the choices in one of the accepted formats (mapping or sequence). This approach is useful when choices depend on external data or configuration (like `settings.CURRENCIES`). The callable is passed directly to the `choices` argument.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_currencies():\n    return {i: i for i in settings.CURRENCIES}\n\n\nclass Expense(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    currency = models.CharField(max_length=3, choices=get_currencies)\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts with ALLOWED_HOSTS (Django Settings/Python)\nDESCRIPTION: Introduces the `ALLOWED_HOSTS` setting in Django 1.4.4 to mitigate Host header poisoning. This setting requires a list of valid host/domain names for the site. The default value `['*']` allows all hosts for backward compatibility, but specifying a restrictive list is strongly recommended for security. Host validation using this setting is disabled when `DEBUG` is `True` or when running tests.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS\n```\n\nLANGUAGE: python\nCODE:\n```\n['*']\n```\n\nLANGUAGE: python\nCODE:\n```\nDEBUG\n```\n\n----------------------------------------\n\nTITLE: Database Connection Thread Safety Example\nDESCRIPTION: Example demonstrating thread safety restrictions when using database connections with sync_to_async\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# DJANGO_SETTINGS_MODULE=settings.py python -m asyncio\n>>> import asyncio\n>>> from asgiref.sync import sync_to_async\n>>> from django.db import connection\n>>> # In an async context so you cannot use the database directly:\n>>> connection.cursor()\ndjango.core.exceptions.SynchronousOnlyOperation: You cannot call this from\nan async context - use a thread or sync_to_async.\n>>> # Nor can you pass resolved connection attributes across threads:\n>>> await sync_to_async(connection.cursor)()\ndjango.db.utils.DatabaseError: DatabaseWrapper objects created in a thread\ncan only be used in that same thread. The object with alias 'default' was\ncreated in thread id 4371465600 and this is thread id 6131478528.\n```\n\n----------------------------------------\n\nTITLE: Migration with Database Router Hints\nDESCRIPTION: Shows how to use database router hints in a migration to target specific databases.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\ndef forwards(apps, schema_editor):\n    # Your migration code goes here\n    ...\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        # Dependencies to other migrations\n    ]\n\n    operations = [\n        migrations.RunPython(forwards, hints={\"target_db\": \"default\"}),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Exception Reporter in Django Settings\nDESCRIPTION: Illustrates how to specify a custom error reporter class in Django settings for site-wide customization of error reporting beyond filtering.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_EXCEPTION_REPORTER = \"path.to.your.CustomExceptionReporter\"\n```\n\n----------------------------------------\n\nTITLE: Defining Static Assets in ModelAdmin using Media Class Python\nDESCRIPTION: This Python snippet demonstrates how to define custom CSS and JavaScript assets for Django admin add/change views using an inner `Media` class within a `ModelAdmin` subclass (`ArticleAdmin`). It specifies a CSS file (`my_styles.css`) to be included for all media types and a JavaScript file (`my_code.js`). Django's staticfiles app automatically handles prepending the appropriate URL (STATIC_URL or MEDIA_URL).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleAdmin(admin.ModelAdmin):\n    class Media:\n        css = {\n            \"all\": [\"my_styles.css\"],\n        }\n        js = [\"my_code.js\"]\n```\n\n----------------------------------------\n\nTITLE: Formset Ordering Example\nDESCRIPTION: Demonstrates how to create a formset with ordering capability\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import formset_factory\nfrom myapp.forms import ArticleForm\nArticleFormSet = formset_factory(ArticleForm, can_order=True)\nformset = ArticleFormSet(\n    initial=[\n        {\"title\": \"Article #1\", \"pub_date\": datetime.date(2008, 5, 10)},\n        {\"title\": \"Article #2\", \"pub_date\": datetime.date(2008, 5, 11)},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Querying ArrayField with Overlap Lookup in Django\nDESCRIPTION: Demonstrates the use of the 'overlap' lookup with ArrayField in Django. This example shows how to query for posts that share any tags with the given values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> Post.objects.create(name=\"First post\", tags=[\"thoughts\", \"django\"])\n>>> Post.objects.create(name=\"Second post\", tags=[\"thoughts\", \"tutorial\"])\n>>> Post.objects.create(name=\"Third post\", tags=[\"tutorial\", \"django\"])\n\n>>> Post.objects.filter(tags__overlap=[\"thoughts\"])\n<QuerySet [<Post: First post>, <Post: Second post>]>\n\n>>> Post.objects.filter(tags__overlap=[\"thoughts\", \"tutorial\"])\n<QuerySet [<Post: First post>, <Post: Second post>, <Post: Third post>]>\n\n>>> Post.objects.filter(tags__overlap=Post.objects.values_list(\"tags\"))\n<QuerySet [<Post: First post>, <Post: Second post>, <Post: Third post>]>\n```\n\n----------------------------------------\n\nTITLE: Excluding a Django View from APPEND_SLASH Behavior using Decorator (Python)\nDESCRIPTION: This Python snippet demonstrates how to use the `no_append_slash` decorator from `django.views.decorators.common` to prevent the `CommonMiddleware` from automatically appending a slash to the URL for a specific function-based view (`sensitive_fbv`). This is useful when the default URL normalization behavior (redirecting `foo.com/bar` to `foo.com/bar/`) is not desired for a particular endpoint. The view function itself simply returns an `HttpResponse`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/middleware.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.common import no_append_slash\n\n\n@no_append_slash\ndef sensitive_fbv(request, *args, **kwargs):\n    \"\"\"View to be excluded from APPEND_SLASH.\"\"\"\n    return HttpResponse()\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Settings via Command Line\nDESCRIPTION: Demonstrates how to specify the Django settings module directly via the command line when running django-admin.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin runserver --settings=mysite.settings\n```\n\n----------------------------------------\n\nTITLE: Importing Django Group Authorization Function\nDESCRIPTION: WSGI script import statement that adds group authorization support. The groups_for_user function is imported alongside check_password to enable group-based access control.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.handlers.modwsgi import check_password, groups_for_user\n```\n\n----------------------------------------\n\nTITLE: Providing Default Value When Variable is False in Django Templates - HTML+Django\nDESCRIPTION: Demonstrates the use of the 'default' filter to return a fallback value when a template variable evaluates to False (empty, None, etc). This requires no additional dependencies and is integral to Django templates. The variable and default string ('nothing') are inputs; output is either the original value or the default when falsy.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_55\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|default:\"nothing\" }}\n```\n\n----------------------------------------\n\nTITLE: Using Replace Function in Django ORM\nDESCRIPTION: Demonstrates text replacement in database fields using the Replace function\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Value\n>>> from django.db.models.functions import Replace\n>>> Author.objects.create(name=\"Margaret Johnson\")\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> Author.objects.update(name=Replace(\"name\", Value(\"Margaret\"), Value(\"Margareth\")))\n2\n>>> Author.objects.values(\"name\")\n<QuerySet [{'name': 'Margareth Johnson'}, {'name': 'Margareth Smith'}]>\n```\n\n----------------------------------------\n\nTITLE: Filtering Django Models with Conditional Exists Subquery (Python)\nDESCRIPTION: This Python snippet demonstrates filtering `Client` objects in Django. It constructs a subquery (`non_unique_account_type`) using `OuterRef` to find other clients with the same `account_type`. The main query then filters `Client` objects where such a non-unique account type does *not* exist using `~Exists()`, effectively selecting clients with unique account types. This avoids adding the existence check to the SELECT columns.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> non_unique_account_type = (\n...     Client.objects.filter(\n...         account_type=OuterRef(\"account_type\"),\n...     )\n...     .exclude(pk=OuterRef(\"pk\"))\n...     .values(\"pk\")\n... )\n>>> Client.objects.filter(~Exists(non_unique_account_type))\n```\n\n----------------------------------------\n\nTITLE: Downloading PROJ Source and Data Files\nDESCRIPTION: Commands to download PROJ source code and datum shifting files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://download.osgeo.org/proj/proj-X.Y.Z.tar.gz\n$ wget https://download.osgeo.org/proj/proj-data-X.Y.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Returning a Basic JSON Response - Django JsonResponse - Python\nDESCRIPTION: This snippet demonstrates how to return a simple JSON response using Django\\'s JsonResponse class. After importing JsonResponse from django.http, you can create a response by passing a dictionary to JsonResponse, which is JSON-encoded and served with the correct Content-Type header. The resulting response.content attribute holds the JSON-encoded bytes. The snippet requires Django installed and imported, and the input parameter must by default be a dict for the constructor.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.http import JsonResponse\n>>> response = JsonResponse({\"foo\": \"bar\"})\n>>> response.content\nb'{\"foo\": \"bar\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AppConfig Class\nDESCRIPTION: Example of creating a custom AppConfig class for a 'Rock n Roll' application with proper naming configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/applications.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# rock_n_roll/apps.py\n\nfrom django.apps import AppConfig\n\n\nclass RockNRollConfig(AppConfig):\n    name = \"rock_n_roll\"\n    verbose_name = \"Rock 'n' roll\"\n```\n\n----------------------------------------\n\nTITLE: Defining Article Model in Django\nDESCRIPTION: Basic Django model definition for Article with title and publication date fields, including a get_absolute_url method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.urls import reverse\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    pub_date = models.DateField()\n\n    def get_absolute_url(self):\n        return reverse(\"article-detail\", kwargs={\"pk\": self.pk})\n```\n\n----------------------------------------\n\nTITLE: Interpreting Successful Django Test Output\nDESCRIPTION: Shows the output of a successful Django test run. It displays the number of tests run, execution time, and a success message.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n----------------------------------------------------------------------\nRan 22 tests in 0.221s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PBKDF2-Wrapped MD5 Password Hasher in Django\nDESCRIPTION: This code defines a custom password hasher class that wraps MD5 passwords with PBKDF2 for increased security. It extends the PBKDF2PasswordHasher class and implements custom encoding methods to handle legacy MD5 hashes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.hashers import (\n    PBKDF2PasswordHasher,\n    MD5PasswordHasher,\n)\n\n\nclass PBKDF2WrappedMD5PasswordHasher(PBKDF2PasswordHasher):\n    algorithm = \"pbkdf2_wrapped_md5\"\n\n    def encode_md5_hash(self, md5_hash, salt, iterations=None):\n        return super().encode(md5_hash, salt, iterations)\n\n    def encode(self, password, salt, iterations=None):\n        _, _, md5_hash = MD5PasswordHasher().encode(password, salt).split(\"$\", 2)\n        return self.encode_md5_hash(md5_hash, salt, iterations)\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Tag Libraries - HTML+Django Template - html+django\nDESCRIPTION: Describes using the 'load' tag to import custom template tag and filter libraries, either entirely or selectively by specifying names. Requires that custom libraries are properly registered in Django. Inputs are library and tag/filter names; output is registration of new template behaviors available within the template file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_23\n\nLANGUAGE: html+django\nCODE:\n```\n{% load somelibrary package.otherlibrary %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% load foo bar from somelibrary %}\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Field Value Using Python Assignment - Django ORM - Python\nDESCRIPTION: This snippet retrieves a Product model instance, increments its number_sold field by one in Python, and saves the result. Dependencies include a Product model and the Django ORM environment. Inputs: product name as the lookup key; outputs: the number_sold field is increased by one in the database. This approach is simple but susceptible to race conditions if multiple processes update the same record concurrently.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> product = Product.objects.get(name=\"Venezuelan Beaver Cheese\")\n>>> product.number_sold += 1\n>>> product.save()\n```\n\n----------------------------------------\n\nTITLE: Using Trim Function in Django ORM\nDESCRIPTION: Shows how to remove leading and trailing spaces from a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Trim\n>>> Author.objects.create(name=\"  John  \", alias=\"j\")\n>>> Author.objects.update(name=Trim(\"name\"))\n1\n>>> print(Author.objects.get(alias=\"j\").name)\nJohn\n```\n\n----------------------------------------\n\nTITLE: Enabling Localization for Model Formset Fields in Python\nDESCRIPTION: Shows how to enable localization for specific fields or all fields in a model formset factory.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_25\n\nLANGUAGE: pycon\nCODE:\n```\n>>> AuthorFormSet = modelformset_factory(\n...     Author, fields=['name', 'title', 'birth_date'],\n...     localized_fields=['birth_date'])\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Upload Permissions in Django\nDESCRIPTION: Sets the default file upload permissions to 0o644 to avoid inconsistencies between different upload handlers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nFILE_UPLOAD_PERMISSIONS = 0o644\n```\n\n----------------------------------------\n\nTITLE: Accessing Y Coordinates of a LineString Geometry in Python\nDESCRIPTION: Illustrates retrieving a list of all Y coordinates from a LineString `OGRGeometry` ('LINESTRING (1 2,3 4)') using the `.y` attribute. It returns a list of floating-point Y values corresponding to each vertex.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"LINESTRING (1 2,3 4)\").y\n[2.0, 4.0]\n```\n\n----------------------------------------\n\nTITLE: Configuring mod_wsgi in daemon mode with virtual environment\nDESCRIPTION: Apache configuration for running Django with mod_wsgi in daemon mode, which is the recommended approach for non-Windows platforms. Includes setting up a process group and Python path.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\nWSGIDaemonProcess example.com python-home=/path/to/venv python-path=/path/to/mysite.com\nWSGIProcessGroup example.com\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Fixtures in a Single Command (Shell)\nDESCRIPTION: Shows how to load multiple fixtures ('mammals', 'birds', 'insects') at once in a specified order using django-admin loaddata. Each argument should correspond to a fixture label, and ordering is strictly followed. Inputs: one or more fixture base names; Output: database loaded sequentially with each set of fixture data. Limitations: constraints may cause errors if dependencies across fixtures are violated.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin loaddata mammals birds insects\n```\n\n----------------------------------------\n\nTITLE: Displaying Password Storage Details in Django Admin\nDESCRIPTION: This snippet describes how Django handles password display and management in the admin interface. It explains that passwords are not directly displayed or stored in the database, but password storage details are shown along with a link to a password change form.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\nUser passwords are not displayed in the admin (nor stored in the database), but\nthe :doc:`password storage details </topics/auth/passwords>` are displayed.\nIncluded in the display of this information is a link to\na password change form that allows admins to change or unset user passwords.\n```\n\n----------------------------------------\n\nTITLE: Updating CSRF Protection for AJAX Requests in Django\nDESCRIPTION: Django now applies full CSRF validation to all requests, including AJAX. It accepts the CSRF token in the X-CSRFTOKEN header for AJAX requests.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Example jQuery code for including CSRF token in AJAX requests\n# (Actual code not provided in the text, but referenced)\n```\n\n----------------------------------------\n\nTITLE: Installing uWSGI with pip\nDESCRIPTION: Commands to install uWSGI using pip, either the current stable version or the Long Term Support (LTS) version. This is the first step to set up uWSGI for Django deployment.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# Install current stable version.\n$ python -m pip install uwsgi\n\n# Or install LTS (long term support).\n$ python -m pip install https://projects.unbit.it/downloads/uwsgi-lts.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Customizing SearchRank Weights in Django PostgreSQL\nDESCRIPTION: Shows how to customize the weight values for SearchRank by passing a list of four floats. This allows for fine-tuning the importance of different matching criteria when ranking search results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])\n>>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by(\"-rank\")\n```\n\n----------------------------------------\n\nTITLE: Static Files Content-Dependent Tagging\nDESCRIPTION: Shows how ManifestStaticFilesStorage handles static file caching by appending content-dependent tags to filenames.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ManifestStaticFilesStorage example\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\nclass CustomStorage(ManifestStaticFilesStorage):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Admin for Explicit Many-to-Many Intermediary Model\nDESCRIPTION: Sets up admin interfaces for both Person and Group models with MembershipInline to manage the intermediary Membership model from either end of the relationship. The extra parameter limits additional empty forms.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nclass MembershipInline(admin.TabularInline):\n    model = Membership\n    extra = 1\n```\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    inlines = [MembershipInline]\n\n\nclass GroupAdmin(admin.ModelAdmin):\n    inlines = [MembershipInline]\n```\n\nLANGUAGE: python\nCODE:\n```\nadmin.site.register(Person, PersonAdmin)\nadmin.site.register(Group, GroupAdmin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Dependencies in Django\nDESCRIPTION: This snippet shows how to configure dependencies between test databases in Django's settings. It allows specifying the order in which test databases should be created.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"TEST\": {\n    \"DEPENDENCIES\": [\"diamonds\", \"clubs\"],\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Django 1.2+ Database Settings (Python)\nDESCRIPTION: This snippet demonstrates the new method (introduced in Django 1.2) for defining database connections using a nested dictionary named `DATABASES` in `settings.py`. Each key in the outer dictionary represents a database alias ('default' being the standard), and the inner dictionary contains the connection parameters with shortened keys (e.g., `NAME`, `ENGINE`, `USER`). The `ENGINE` setting now requires a fully qualified path.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"NAME\": \"test_db\",\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"USER\": \"myusername\",\n        \"PASSWORD\": \"s3krit\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests with Coverage\nDESCRIPTION: This command runs Django tests using coverage.py to measure code coverage. It executes tests and collects coverage data for the specified source files.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncoverage run --source='.' manage.py test myapp\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Django Migration in Python\nDESCRIPTION: This snippet shows the structure of a basic Django migration file. It defines a Migration class with dependencies and operations, which are used to specify schema changes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [(\"migrations\", \"0001_initial\")]\n\n    operations = [\n        migrations.DeleteModel(\"Tribble\"),\n        migrations.AddField(\"Author\", \"rating\", models.IntegerField(default=0)),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sorting for Custom Fields in Django Admin\nDESCRIPTION: Example showing how to use the ordering parameter with admin.display decorator to enable sorting by a specific database field when a custom display method is clicked in the admin list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.db import models\nfrom django.utils.html import format_html\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    color_code = models.CharField(max_length=6)\n\n    @admin.display(ordering=\"first_name\")\n    def colored_first_name(self):\n        return format_html(\n            '<span style=\"color: #{};\"{}</span>',\n            self.color_code,\n            self.first_name,\n        )\n\n\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"first_name\", \"colored_first_name\"]\n```\n\n----------------------------------------\n\nTITLE: Contained_by Lookup for JSONField in Django\nDESCRIPTION: Shows the contained_by lookup which is the inverse of contains, returning objects where the key-value pairs on the object are a subset of those in the passed value.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\", \"owner\": \"Bob\"})\n<Dog: Rufus>\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\n<Dog: Meg>\n>>> Dog.objects.create(name=\"Fred\", data={})\n<Dog: Fred>\n>>> Dog.objects.create(\n...     name=\"Merry\", data={\"breed\": \"pekingese\", \"tricks\": [\"fetch\", \"dance\"]}\n... )\n>>> Dog.objects.filter(data__contained_by={\"breed\": \"collie\", \"owner\": \"Bob\"})\n<QuerySet [<Dog: Meg>, <Dog: Fred>]>\n>>> Dog.objects.filter(data__contained_by={\"breed\": \"collie\"})\n<QuerySet [<Dog: Fred>]>\n>>> Dog.objects.filter(\n...     data__contained_by={\"breed\": \"pekingese\", \"tricks\": [\"dance\", \"fetch\", \"hug\"]}\n... )\n<QuerySet [<Dog: Merry>, <Dog: Fred>]>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running aiosmtpd for Local Email Testing\nDESCRIPTION: This shell command installs the aiosmtpd package and starts a minimal SMTP server for local email testing. The server listens on localhost:8025 and prints email headers and body to standard output, useful for development and debugging.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install \"aiosmtpd >= 1.4.5\"\n\npython -m aiosmtpd -n -l localhost:8025\n```\n\n----------------------------------------\n\nTITLE: Defining Django CreateView Class\nDESCRIPTION: Defines the CreateView class in Django, which is used for creating new objects. It lists the available attributes and methods for this view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclass CreateView():\n    # Attributes and methods listed in the documentation\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Crossing Geometry in Django\nDESCRIPTION: Shows how to use the crosses spatial lookup to filter Zipcode objects whose polygon spatially crosses a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__crosses=geom)\n```\n\n----------------------------------------\n\nTITLE: Django Validator Class References\nDESCRIPTION: Code references to Django validator classes affected by CVE-2021-33571 vulnerability related to IPv4 address validation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.24.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.validators.URLValidator\ndjango.core.validators.validate_ipv4_address\ndjango.core.validators.validate_ipv46_address\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Case-Insensitive Endswith - Django ORM (Python)\nDESCRIPTION: Demonstrates how to perform a case-insensitive suffix match on the 'headline' field of Entry objects using Django's ORM by applying the 'iendswith' lookup. Requires Django's ORM and an Entry model. The input is the suffix string to filter by, and the output is a QuerySet containing records where headline ends with the specified string, regardless of case. Takes string values and is compatible with the database's support for case-insensitive matching.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.filter(headline__iendswith=\"Lennon\")\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Django Form Fields\nDESCRIPTION: Demonstrates using the `help_text` argument when defining fields in a Django `Form` (`HelpTextContactForm`). This text provides guidance to the user and is typically displayed next to the field in the rendered HTML, often within a specific CSS class like 'helptext'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> class HelpTextContactForm(forms.Form):\n...     subject = forms.CharField(max_length=100, help_text=\"100 characters max.\")\n...     message = forms.CharField()\n...     sender = forms.EmailField(help_text=\"A valid email address, please.\")\n...     cc_myself = forms.BooleanField(required=False)\n...\n>>> f = HelpTextContactForm(auto_id=False)\n>>> print(f)\n<div>Subject:<div class=\"helptext\">100 characters max.</div><input type=\"text\" name=\"subject\" maxlength=\"100\" required></div>\n<div>Message:<input type=\"text\" name=\"message\" required></div>\n<div>Sender:<div class=\"helptext\">A valid email address, please.</div><input type=\"email\" name=\"sender\" required></div>\n<div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Database Table Name in Django Model Meta (Python)\nDESCRIPTION: Sets a custom database table name (`db_table`) for a Django model, overriding the default name automatically generated by Django (which is typically `app_label_modelname`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndb_table = \"music_album\"\n```\n\n----------------------------------------\n\nTITLE: Using translate tag with context in Django templates\nDESCRIPTION: Shows how to use the context keyword with the {% translate %} tag to provide contextual information for translation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_22\n\nLANGUAGE: html+django\nCODE:\n```\n{% translate \"May\" context \"month name\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating New Documentation Branch\nDESCRIPTION: Git commands for creating a new documentation branch from the current stable branch\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b stable/4.2.x origin/stable/4.1.x\n$ git push origin stable/4.2.x:stable/4.2.x\n```\n\n----------------------------------------\n\nTITLE: Importing Django PostgreSQL Module\nDESCRIPTION: This snippet shows how to import the django.contrib.postgres module in Python. The module provides PostgreSQL-specific fields and features for Django projects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. module:: django.contrib.postgres\n    :synopsis: PostgreSQL-specific fields and features\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output of Named Cycle Tag Usage (Django)\nDESCRIPTION: Provides the expected HTML output for the preceding example that uses a named `{% cycle %}` tag (`rowcolors`). It demonstrates how the first row uses 'row1' for both cells (due to referencing the current value), and the second row uses 'row2' for both cells after the cycle is advanced.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n<tr>\n    <td class=\"row1\">...</td>\n    <td class=\"row1\">...</td>\n</tr>\n<tr>\n    <td class=\"row2\">...</td>\n    <td class=\"row2\">...</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Starting Git Bisect for Regression Debugging\nDESCRIPTION: Commands to start the git bisect process for debugging a regression in Django. This marks the current point as 'bad' since the test fails.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git bisect bad\nYou need to start by \"git bisect start\"\nDo you want me to do it for you [Y/n]? y\n```\n\n----------------------------------------\n\nTITLE: Generating RSS Feed with Django's feedgenerator\nDESCRIPTION: Demonstrates how to create an RSS feed using Django's feedgenerator module. It shows initializing a feed, adding an item, and writing the feed to a file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.utils import feedgenerator\n>>> feed = feedgenerator.Rss201rev2Feed(\n...     title=\"Poynter E-Media Tidbits\",\n...     link=\"https://www.poynter.org/tag/e-media-tidbits/\",\n...     description=\"A group blog by the sharpest minds in online media/journalism/publishing.\",\n...     language=\"en\",\n... )\n>>> feed.add_item(\n...     title=\"Hello\",\n...     link=\"https://www.holovaty.com/test/\",\n...     description=\"Testing.\",\n... )\n>>> with open(\"test.rss\", \"w\") as fp:\n...     feed.write(fp, \"utf-8\")\n...\n```\n\n----------------------------------------\n\nTITLE: Mapping Keys vs. Positional Formatting in ValidationError - Python\nDESCRIPTION: Illustrates how to prefer mapping keys over positional formatting for error messages in Django ValidationError, improving override and translation capabilities. The approach takes advantage of named Python string formatting in the message and requires values to be passed as a dictionary to the params argument. Main use is in Django forms or fields for flexible message substitution, and is subject to the presence of Django's translation functions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nValidationError(\n    _(\\\"Invalid value: %(value)s\\\"),\n    params={\\\"value\\\": \\\"42\\\"},\n)\n\n# Bad\nValidationError(\n    _(\\\"Invalid value: %s\\\"),\n    params=(\\\"42\\\",),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django MySQL Backend with MySQL Option File in Python\nDESCRIPTION: This Python snippet demonstrates setting up Django's DATABASES configuration to connect to a MySQL backend by specifying a MySQL config option file (my.cnf) through the OPTIONS key. The key 'read_default_file' must be the path to your my.cnf. Dependencies: Django must be installed along with the mysqlclient or a compatible MySQL DB backend. Inputs required are valid credentials and the correct file path. The output enables Django to connect to the MySQL server with specified options; limitations include security of config files and correct file permissions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# settings.py\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"OPTIONS\": {\n            \"read_default_file\": \"/path/to/my.cnf\",\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding get_changeform_initial_data in ModelAdmin Python\nDESCRIPTION: This code snippet shows how to override the `get_changeform_initial_data` method in a Django `ModelAdmin`. This method provides a hook to set initial data for fields in the admin change form. The example returns a dictionary setting the initial value of the 'name' field to 'custom_initial_value'. This overrides the default behavior of populating initial data from GET parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ndef get_changeform_initial_data(self, request):\n    return {\"name\": \"custom_initial_value\"}\n```\n\n----------------------------------------\n\nTITLE: Compressed Output with django-admin dumpdata - Shell\nDESCRIPTION: Illustrates generating a compressed JSON fixture using the django-admin dumpdata command with the -o option and a gzipped filename extension. This requires Django's admin CLI and appropriate filesystem permissions. The output is written in JSON format and compressed using gzip due to the .gz extension. Useful for creating portable, reduced-size backup files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin dumpdata -o mydata.json.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring DateDetailView URL Routing in Django (Python)\nDESCRIPTION: This snippet shows how to define a URL route using Django's path() function to connect date-based detail URLs to the DateDetailView generic view. It uses Django's as_view() with 'model' and 'date_field' arguments to specify the model (Article) and the date field (pub_date) used for lookups. Dependencies include 'django.urls' and 'django.views.generic.dates.DateDetailView', and the Article model must be defined in the application. Inputs are requests to a URL matching the embedded pattern, and output is rendering an appropriate object detail page or raising a 404 if not found. This setup assumes the default template name structure with a '_detail' suffix.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom django.views.generic.dates import DateDetailView\n\nurlpatterns = [\n    path(\n        \"<int:year>/<str:month>/<int:day>/<int:pk>/\",\n        DateDetailView.as_view(model=Article, date_field=\"pub_date\"),\n        name=\"archive_date_detail\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Employee Profile Model in Django\nDESCRIPTION: Shows how to extend user information by creating a profile model with a OneToOneField to Django's User model. This approach allows storing additional user information without modifying the core User model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\n\n\nclass Employee(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    department = models.CharField(max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Author Model Definition\nDESCRIPTION: Example model class showing field definitions for an Author entity with basic attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    title = models.CharField(max_length=3)\n    birth_date = models.DateField(blank=True, null=True)\n```\n\n----------------------------------------\n\nTITLE: Applying ASGI Middleware in Django\nDESCRIPTION: This snippet demonstrates how to wrap Django's ASGI application object with middleware. It imports a hypothetical middleware class and applies it to the existing application.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom some_asgi_library import AmazingMiddleware\n\napplication = AmazingMiddleware(application)\n```\n\n----------------------------------------\n\nTITLE: Octal Mode Prefix Explanation\nDESCRIPTION: This snippet emphasizes the importance of prefixing file modes with \"0o\" to denote octal numbers in Python, ensuring correct behavior when specifying file permission modes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\nAlways prefix the mode with `0o`.\n\nIf you're not familiar with file modes, please note that the `0o` prefix\nis very important: it indicates an octal number, which is the way that\nmodes must be specified. If you try to use `644`, you'll get totally\nincorrect behavior.\n```\n\n----------------------------------------\n\nTITLE: Including Other URLconfs in Django\nDESCRIPTION: This snippet shows how to include other URLconf modules in Django's main URLconf. It demonstrates the use of the 'include' function to incorporate URL patterns from other modules, allowing for modular URL configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import include, path\n\nurlpatterns = [\n    # ... snip ...\n    path(\"community/\", include(\"aggregator.urls\")),\n    path(\"contact/\", include(\"contact.urls\")),\n    # ... snip ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache httpd.conf for Django with mod_wsgi\nDESCRIPTION: Basic Apache configuration for running a Django application with mod_wsgi. Includes WSGIScriptAlias for URL routing, WSGIPythonHome for virtual environment setup, and directory permissions for the WSGI file.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nWSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py\nWSGIPythonHome /path/to/venv\nWSGIPythonPath /path/to/mysite.com\n\n<Directory /path/to/mysite.com/mysite>\n<Files wsgi.py>\nRequire all granted\n</Files>\n</Directory>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom CSV Serializer in Python\nDESCRIPTION: Defines a custom CSV serializer class that extends Django's base serializer. It converts model instances to CSV format, including a header row with field names.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport csv\n\nfrom django.apps import apps\nfrom django.core import serializers\nfrom django.core.serializers.base import DeserializationError\n\n\nclass Serializer(serializers.python.Serializer):\n    def get_dump_object(self, obj):\n        dumped_object = super().get_dump_object(obj)\n        row = [dumped_object[\"model\"], str(dumped_object[\"pk\"])]\n        row += [str(value) for value in dumped_object[\"fields\"].values()]\n        return \",\".join(row), dumped_object[\"model\"]\n\n    def end_object(self, obj):\n        dumped_object_str, model = self.get_dump_object(obj)\n        if self.first:\n            fields = [field.name for field in apps.get_model(model)._meta.fields]\n            header = \",\".join(fields)\n            self.stream.write(f\"model,{header}\\n\")\n        self.stream.write(f\"{dumped_object_str}\\n\")\n\n    def getvalue(self):\n        return super(serializers.python.Serializer, self).getvalue()\n```\n\n----------------------------------------\n\nTITLE: Comparing Django Models with Custom Primary Key\nDESCRIPTION: Demonstrates that Django model comparisons work with any primary key field name, not just 'id', by comparing the primary key values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n>>> some_obj == other_obj\n>>> some_obj.name == other_obj.name\n```\n\n----------------------------------------\n\nTITLE: Clearing All M2M Relationships via Forward Manager (pycon)\nDESCRIPTION: First, adds relationships back for demonstration. Then, uses the `clear()` method on the forward relationship manager (`a4.publications`) to remove all `Publication` relationships associated with `a4`. It verifies that `a4` has no publications and that `p2` (which was related) now reflects this change.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_26\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p2.article_set.add(a4, a5)\n>>> p2.article_set.all()\n<QuerySet [<Article: NASA finds intelligent life on Earth>, <Article: Oxygen-free diet works wonders>]>\n>>> a4.publications.all()\n<QuerySet [<Publication: Science News>, <Publication: Science Weekly>]>\n>>> a4.publications.clear()\n>>> a4.publications.all()\n<QuerySet []>\n>>> p2.article_set.all()\n<QuerySet [<Article: Oxygen-free diet works wonders>]>\n```\n\n----------------------------------------\n\nTITLE: Defining a Classmethod for Custom Model Creation in Django (Python)\nDESCRIPTION: Demonstrates adding a `create` classmethod to a Django `Book` model as an alternative to overriding `__init__` for custom initialization logic. This method encapsulates custom logic for object creation, like additional processing, before returning the new instance. It's presented as a safer alternative to overriding the `__init__` method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n\n    @classmethod\n    def create(cls, title):\n        book = cls(title=title)\n        # do something with the book\n        return book\n\n\nbook = Book.create(\"Pride and Prejudice\")\n```\n\n----------------------------------------\n\nTITLE: Importing Django Test Signal\nDESCRIPTION: Shows how to import the 'setting_changed' signal from Django's core signals module for use in non-test situations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.signals import setting_changed\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance with Common Ancestor in Django Models\nDESCRIPTION: This example shows an alternative approach to multiple inheritance using a common ancestor model and explicit OneToOneField parent links to avoid field name clashes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass Piece(models.Model):\n    pass\n\n\nclass Article(Piece):\n    article_piece = models.OneToOneField(\n        Piece, on_delete=models.CASCADE, parent_link=True\n    )\n    ...\n\n\nclass Book(Piece):\n    book_piece = models.OneToOneField(Piece, on_delete=models.CASCADE, parent_link=True)\n    ...\n\n\nclass BookReview(Book, Article):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Demonstrating XSS vulnerability in Django debug template tag\nDESCRIPTION: This snippet shows the {% debug %} template tag, which was vulnerable to XSS attacks in previous versions. The security fix ensures proper encoding of the current context and limits output based on the DEBUG setting.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% debug %}\n```\n\n----------------------------------------\n\nTITLE: Custom Admin Template Extension\nDESCRIPTION: Shows how to extend the Django admin base template for custom views.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"admin/base_site.html\" %}\n{% block content %}\n...\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django App for Reusability\nDESCRIPTION: Modifies the AppConfig in apps.py to use the new module name and adds a label for the app. This configuration is necessary when preparing a Django app for reuse in other projects.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.apps import AppConfig\n\n\nclass PollsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"django_polls\"\n    label = \"polls\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignorable 404 URLs in Django Settings\nDESCRIPTION: This snippet demonstrates how to set up the IGNORABLE_404_URLS setting in Django to prevent reporting of 404 errors for specific URL patterns.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nIGNORABLE_404_URLS = [\n    re.compile(r\"\\.(php|cgi)$\"),\n    re.compile(r\"^/phpmyadmin/\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a HTML Form Styled as a Link for POST Logout in Django\nDESCRIPTION: HTML code snippet demonstrating how to create a form that submits a POST request for logout but is styled to appear as a link. Includes CSRF token and a button styled to look like a link.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"logout-form\" method=\"post\" action=\"{% url 'admin:logout' %}\">\n  {% csrf_token %}\n  <button type=\"submit\">{% translate \"Log out\" %}</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Translating URL Patterns in Django\nDESCRIPTION: Shows how to make URL patterns translatable using the gettext_lazy function in Django's URL configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.i18n import i18n_patterns\nfrom django.urls import include, path\nfrom django.utils.translation import gettext_lazy as _\n\nfrom about import views as about_views\nfrom news import views as news_views\nfrom sitemaps.views import sitemap\n\nurlpatterns = [\n    path(\"sitemap.xml\", sitemap, name=\"sitemap-xml\"),\n]\n\nnews_patterns = (\n    [\n        path(\"\", news_views.index, name=\"index\"),\n\n```\n\n----------------------------------------\n\nTITLE: Defining PASSWORD_HASHERS setting\nDESCRIPTION: This setting defines the password hashing algorithms used. It includes several hashers, such as PBKDF2PasswordHasher, Argon2PasswordHasher, etc.  See the auth_password_storage documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_75\n\n\n\n----------------------------------------\n\nTITLE: Defining a Template Filter with is_safe Keyword Argument - Django Templates - Python\nDESCRIPTION: This snippet shows the recommended method for defining template filters in Django by providing the is_safe flag as a keyword argument to the @register.filter decorator. This style improves compatibility with decorators and is the preferred way to specify filter safety. It is used within Django template libraries and requires Django's template system.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@register.filter(is_safe=True)\ndef noop(value):\n    return value\n```\n\n----------------------------------------\n\nTITLE: Django Model Configuration Example\nDESCRIPTION: Example of Django model configuration syntax for ordering and unique constraints\nSOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Meta:\n    ordering = ['field1', 'field2']\n    unique_together = [('field1', 'field2')]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Format Definition in Python\nDESCRIPTION: Example of a custom format definition for the English locale that changes the thousand separator to a non-breaking space instead of the default comma. This demonstrates how to customize locale-specific formatting.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTHOUSAND_SEPARATOR = \"\\xa0\"\n```\n\n----------------------------------------\n\nTITLE: Using JSONBAgg Aggregate with Django Models and Queries\nDESCRIPTION: Demonstrates the use of JSONBAgg aggregate function with Django models and complex queries. The example uses Room and HotelReservation models to aggregate JSON data and filter results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.aggregates import JSONBAgg\n>>> Room.objects.annotate(\n...     requirements=JSONBAgg(\n...         \"hotelreservation__requirements\",\n...         order_by=\"-hotelreservation__start\",\n...     )\n... ).filter(requirements__0__sea_view=True).values(\"number\", \"requirements\")\n<QuerySet [{'number': 102, 'requirements': [\n    {'parking': False, 'sea_view': True, 'double_bed': False},\n    {'parking': True, 'double_bed': True}\n]}]>\n```\n\n----------------------------------------\n\nTITLE: Deleting All Objects of a Model in Django\nDESCRIPTION: Demonstrates the safer way to delete all objects of a model by explicitly requesting a complete queryset rather than using a method on the manager.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.all().delete()\n```\n\n----------------------------------------\n\nTITLE: Configuring BrinIndex in Django Models\nDESCRIPTION: Demonstrates the usage of pages_per_range parameter in BrinIndex, which is now properly handled in the deconstruct() method when set to None.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nBrinIndex.deconstruct()\n```\n\n----------------------------------------\n\nTITLE: Registering Django Models in Admin Interface\nDESCRIPTION: This snippet shows how to register Django models in the admin interface, allowing authenticated users to manage content through a web-based interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Article(models.Model):\n    pub_date = models.DateField()\n    headline = models.CharField(max_length=200)\n    content = models.TextField()\n    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom . import models\n\nadmin.site.register(models.Article)\n```\n\n----------------------------------------\n\nTITLE: Distance Lookup Syntax in GeoDjango\nDESCRIPTION: Demonstrates the syntax patterns for distance lookup operations in GeoDjango. The lookup requires a geometry/raster, distance value, and optional 'spheroid' parameter for more accurate calculation with geodetic coordinate systems.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n<field>__<distance lookup>=(<geometry/raster>, <distance value>[, \"spheroid\"])\n<field>__<distance lookup>=(<raster>, <band_index>, <distance value>[, \"spheroid\"])\n<field>__<band_index>__<distance lookup>=(<raster>, <band_index>, <distance value>[, \"spheroid\"])\n```\n\n----------------------------------------\n\nTITLE: Blocking Database Query with Connection-Specific Error Message in Django (Python)\nDESCRIPTION: In this version of the blocker, the wrapper accepts the full set of parameters (execute, sql, params, many, context) and uses the context object to extract the database connection alias. The function raises an Exception with a detailed message, informing which specific database connection access was blocked. This design facilitates more granular debugging and policy enforcement.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef blocker(execute, sql, params, many, context):\n    alias = context[\"connection\"].alias\n    raise Exception(\"Access to database '{}' blocked here\".format(alias))\n```\n\n----------------------------------------\n\nTITLE: Extending Django Admin Change Form Template\nDESCRIPTION: Example of overriding the object-tools-items block in the admin change_form.html template to add a custom link alongside the History tool for Page models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_75\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"admin/change_form.html\" %}\n{% load i18n admin_urls %}\n{% block object-tools-items %}\n    <li>\n        <a href=\"{% url opts|admin_urlname:'history' original.pk|admin_urlquote %}\" class=\"historylink\">{% translate \"History\" %}</a>\n    </li>\n    <li>\n        <a href=\"mylink/\" class=\"historylink\">My Link</a>\n    </li>\n    {% if has_absolute_url %}\n        <li>\n            <a href=\"{% url 'admin:view_on_site' content_type_id original.pk %}\" class=\"viewsitelink\">{% translate \"View on site\" %}</a>\n        </li>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid HTML/JSON Detail View in Django\nDESCRIPTION: View class capable of returning both HTML and JSON responses based on request parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.detail import SingleObjectTemplateResponseMixin\n\n\nclass HybridDetailView(\n    JSONResponseMixin, SingleObjectTemplateResponseMixin, BaseDetailView\n):\n    def render_to_response(self, context):\n        if self.request.GET.get(\"format\") == \"json\":\n            return self.render_to_json_response(context)\n        else:\n            return super().render_to_response(context)\n```\n\n----------------------------------------\n\nTITLE: Correcting Multiple Counts with distinct=True in Annotations (pycon)\nDESCRIPTION: Shows how to mitigate the issue of inflated counts when using multiple `Count` annotations by setting the `distinct=True` parameter within the `Count` function. This ensures that each related author and store is counted only once per book, even with the JOINs used by `annotate()`, yielding the correct distinct counts for `authors__count` and `store__count` on each book instance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> q = Book.objects.annotate(\n...     Count(\"authors\", distinct=True), Count(\"store\", distinct=True)\n... )\n>>> q[0].authors__count\n2\n>>> q[0].store__count\n3\n```\n\n----------------------------------------\n\nTITLE: Combining Prefetch with Select Related for Further Optimization\nDESCRIPTION: Demonstrates using select_related within a Prefetch queryset to further reduce the number of database queries by joining related tables.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n>>> Pizza.objects.prefetch_related(\n...     Prefetch(\"restaurants\", queryset=Restaurant.objects.select_related(\"best_pizza\"))\n... )\n```\n\n----------------------------------------\n\nTITLE: Writing Custom Template Context Processors in Django (Python)\nDESCRIPTION: Demonstrates defining a custom context processor as a function that accepts a request and returns a dictionary to extend the template context. This pattern enables injection of global settings or user-specific values across all templates, and requires registering the function in the template engine's context_processors setting. Inputs include a Django request; output is a dictionary mapping.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\n\n\ndef from_email(request):\n    return {\n        \"DEFAULT_FROM_EMAIL\": settings.DEFAULT_FROM_EMAIL,\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'upper_inc' Lookup in Django Python\nDESCRIPTION: Illustrates the `upper_inc` lookup (`__upper_inc`) on the `ages` field. This query selects `Event` objects based on whether their `ages` range has an inclusive upper bound (represented by `]` in PostgreSQL). Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_33\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__upper_inc=True)\n<QuerySet []>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Language Settings in Django\nDESCRIPTION: Example of defining custom language settings in Django using gettext_lazy for translation support. This configuration restricts language selection to German and English only.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_52\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nLANGUAGES = [\n    (\"de\", _(\"German\")),\n    (\"en\", _(\"English\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying MySQL Client Credentials in my.cnf using INI\nDESCRIPTION: This INI configuration snippet shows how to define client credentials (database, user, password) and character set in a MySQL option file (my.cnf). Placeholders such as NAME, USER, PASSWORD should be replaced with actual values. The configuration enables client programs and Django connections (via read_default_file) to authenticate and specify connection options. Must ensure file security; valid for MySQL and compatible with Django’s OPTIONS.read_default_file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_8\n\nLANGUAGE: INI\nCODE:\n```\n# my.cnf\n[client]\ndatabase = NAME\nuser = USER\npassword = PASSWORD\ndefault-character-set = utf8mb4\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Lazy Translation Functions in Django\nDESCRIPTION: Demonstrates how to create a custom lazy function for delayed translations, useful when you need to pass translatable strings as arguments to other functions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.functional import lazy\nfrom django.utils.translation import gettext_lazy as _\n\n\ndef to_lower(string):\n    return string.lower()\n\n\nto_lower_lazy = lazy(to_lower, str)\n\n# Usage\nlazy_string = to_lower_lazy(_(\"My STRING!\"))\n```\n\n----------------------------------------\n\nTITLE: Using a Non-Required Django CharField\nDESCRIPTION: Shows how setting `required=False` on a Django `CharField` changes the behavior of the `clean()` method. When an empty value (`\"\"` or `None`) is passed, `clean()` returns the field's normalized empty value (an empty string for `CharField` by default) instead of raising a `ValidationError`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_2\n\nLANGUAGE: pycon\nCODE:\n```\n>>> f = forms.CharField(required=False)\n>>> f.clean(\"foo\")\n'foo'\n>>> f.clean(\"\")\n''\n>>> f.clean(None)\n''\n>>> f.clean(0)\n'0'\n>>> f.clean(True)\n'True'\n>>> f.clean(False)\n'False'\n```\n\n----------------------------------------\n\nTITLE: Navigating Ordered Related Objects in Django (Pycon)\nDESCRIPTION: Illustrates using the `get_next_in_order()` and `get_previous_in_order()` methods on a related object (`answer`) to navigate through the sequence defined by `order_with_respect_to`. These methods allow accessing the next or previous object based on the established order.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> answer = Answer.objects.get(id=2)\n>>> answer.get_next_in_order()\n<Answer: 3>\n>>> answer.get_previous_in_order()\n<Answer: 1>\n```\n\n----------------------------------------\n\nTITLE: SQL Conditional Aggregation Using FILTER WHERE - SQL\nDESCRIPTION: Provides SQL code representing aggregate counts per account_type using the SQL 2003 FILTER WHERE clause. This query syntax is supported by certain SQL backends and results in efficient conditional aggregation within a single SELECT statement. Outputs a result set with one column per account type count.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count('id') FILTER (WHERE account_type=1) as regular,\n       count('id') FILTER (WHERE account_type=2) as gold,\n       count('id') FILTER (WHERE account_type=3) as platinum\nFROM clients;\n```\n\n----------------------------------------\n\nTITLE: Migration Example for Handling ExclusionConstraint Changes in Django\nDESCRIPTION: Python code for creating a Django migration that uses SeparateDatabaseAndState to update the migration state without running SQL operations when changing from deprecated opclasses to OpClass() in ExclusionConstraint.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Migration(migrations.Migration):\n    ...\n\n    operations = [\n        migrations.SeparateDatabaseAndState(\n            database_operations=[],\n            state_operations=[\n                migrations.RemoveConstraint(...),\n                migrations.AddConstraint(...),\n            ],\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: XML Serialization Format\nDESCRIPTION: Example of Django's XML serialization format structure.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<django-objects version=\"1.0\">\n    <object pk=\"123\" model=\"sessions.session\">\n        <field type=\"DateTimeField\" name=\"expire_date\">2013-01-16T08:16:59.844560+00:00</field>\n        <!-- ... -->\n    </object>\n</django-objects>\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Displaying Items\nDESCRIPTION: Creates an HTML template to iterate through 'items' context variable and display each item's name and description in a list. Requires familiarity with Django template syntax and context variables.\nSOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<ul>\n{% for item in items %}\n    <li>\n        <h2>{{ item.name }}</h2>\n        <p>{{ item.description }}</p>\n    </li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom User Model with Django Admin\nDESCRIPTION: This snippet shows how to register a custom user model with Django's admin interface. It includes custom forms for user creation and change, as well as a custom UserAdmin class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.contrib import admin\nfrom django.contrib.auth.models import Group\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.forms import ReadOnlyPasswordHashField\nfrom django.core.exceptions import ValidationError\n\nfrom customauth.models import MyUser\n\n\nclass UserCreationForm(forms.ModelForm):\n    \"\"\"A form for creating new users. Includes all the required\n    fields, plus a repeated password.\"\"\"\n\n    password1 = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n    password2 = forms.CharField(\n        label=\"Password confirmation\", widget=forms.PasswordInput\n    )\n\n    class Meta:\n        model = MyUser\n        fields = [\"email\", \"date_of_birth\"]\n\n    def clean_password2(self):\n        # Check that the two password entries match\n        password1 = self.cleaned_data.get(\"password1\")\n        password2 = self.cleaned_data.get(\"password2\")\n        if password1 and password2 and password1 != password2:\n            raise ValidationError(\"Passwords don't match\")\n        return password2\n\n    def save(self, commit=True):\n        # Save the provided password in hashed format\n        user = super().save(commit=False)\n        user.set_password(self.cleaned_data[\"password1\"])\n        if commit:\n            user.save()\n        return user\n\n\nclass UserChangeForm(forms.ModelForm):\n    \"\"\"A form for updating users. Includes all the fields on\n    the user, but replaces the password field with admin's\n    disabled password hash display field.\n    \"\"\"\n\n    password = ReadOnlyPasswordHashField()\n\n    class Meta:\n        model = MyUser\n        fields = [\"email\", \"password\", \"date_of_birth\", \"is_active\", \"is_admin\"]\n\n\nclass UserAdmin(BaseUserAdmin):\n    # The forms to add and change user instances\n    form = UserChangeForm\n    add_form = UserCreationForm\n\n    # The fields to be used in displaying the User model.\n    # These override the definitions on the base UserAdmin\n    # that reference specific fields on auth.User.\n    list_display = [\"email\", \"date_of_birth\", \"is_admin\"]\n    list_filter = [\"is_admin\"]\n    fieldsets = [\n        (None, {\"fields\": [\"email\", \"password\"]}),\n        (\"Personal info\", {\"fields\": [\"date_of_birth\"]}),\n        (\"Permissions\", {\"fields\": [\"is_admin\"]}),\n    ]\n    # add_fieldsets is not a standard ModelAdmin attribute. UserAdmin\n    # overrides get_fieldsets to use this attribute when creating a user.\n    add_fieldsets = [\n        (\n            None,\n            {\n                \"classes\": [\"wide\"],\n                \"fields\": [\"email\", \"date_of_birth\", \"password1\", \"password2\"],\n            },\n        ),\n    ]\n    search_fields = [\"email\"]\n    ordering = [\"email\"]\n    filter_horizontal = []\n\n\n# Now register the new UserAdmin...\nadmin.site.register(MyUser, UserAdmin)\n# ... and, since we're not using Django's built-in permissions,\n# unregister the Group model from admin.\nadmin.site.unregister(Group)\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex ModelAdmin Fieldsets in Django\nDESCRIPTION: Demonstrates how to create complex fieldset layouts for the admin interface, including collapsible sections and custom CSS classes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass FlatPageAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (\n            None,\n            {\n                \"fields\": [\"url\", \"title\", \"content\", \"sites\"],\n            },\n        ),\n        (\n            \"Advanced options\",\n            {\n                \"classes\": [\"collapse\"],\n                \"fields\": [\"registration_required\", \"template_name\"],\n            },\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern for a TemplateView in Django\nDESCRIPTION: Shows how to set up a URL pattern for a custom TemplateView in Django's urls.py file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/base.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import HomePageView\n\nurlpatterns = [\n    path(\"\", HomePageView.as_view(), name=\"home\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding extra Managers with multiple inheritance in Django\nDESCRIPTION: Demonstrates how to add extra Managers to a child class while preserving the default Manager from an abstract base class using multiple inheritance. The additional abstract class should be placed after the main abstract class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass ExtraManager(models.Model):\n    extra_manager = OtherManager()\n\n    class Meta:\n        abstract = True\n\n\nclass ChildC(AbstractBase, ExtraManager):\n    # ...\n    # Default manager is CustomManager, but OtherManager is\n    # also available via the \"extra_manager\" attribute.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Collation in Django Migration\nDESCRIPTION: Shows how to create a custom collation for German phone book ordering in a PostgreSQL database using a Django migration file. This collation can be used with the db_collation parameter on CharField, TextField, and their subclasses.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/operations.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.operations import CreateCollation\n\n\nclass Migration(migrations.Migration):\n    ...\n\n    operations = [\n        CreateCollation(\n            \"case_insensitive\",\n            provider=\"icu\",\n            locale=\"und-u-ks-level2\",\n            deterministic=False,\n        ),\n        ...,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Defining Hardcoded Flatpage URLs in Django URLconf\nDESCRIPTION: Demonstrates how to define specific URLs for known flatpages directly in the URLconf, allowing for more control over routing and naming.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.flatpages import views\n\nurlpatterns += [\n    path(\"about-us/\", views.flatpage, kwargs={\"url\": \"/about-us/\"}, name=\"about\"),\n    path(\"license/\", views.flatpage, kwargs={\"url\": \"/license/\"}, name=\"license\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Django Settings Configuration\nDESCRIPTION: Example shows the default ALLOWED_HOSTS values when DEBUG=True, including localhost variations for development environments.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.3.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n['localhost', '127.0.0.1', '::1']\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Function Reference in Django Archive Utils\nDESCRIPTION: Reference to the django.utils.archive.extract() function that contained a directory traversal vulnerability when handling archive paths. This function is used by startapp --template and startproject --template commands.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.12.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.archive.extract()\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Error Handlers in Django\nDESCRIPTION: A complete example showing how to test custom error views. It defines a custom error handler, a view that raises PermissionDenied, and a test case that verifies the handler works correctly.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.core.exceptions import PermissionDenied\nfrom django.http import HttpResponse\nfrom django.test import SimpleTestCase, override_settings\nfrom django.urls import path\n\n\ndef response_error_handler(request, exception=None):\n    return HttpResponse(\"Error handler content\", status=403)\n\n\ndef permission_denied_view(request):\n    raise PermissionDenied\n\n\nurlpatterns = [\n    path(\"403/\", permission_denied_view),\n]\n\nhandler403 = response_error_handler\n\n\n# ROOT_URLCONF must specify the module that contains handler403 = ...\n@override_settings(ROOT_URLCONF=__name__)\nclass CustomErrorHandlerTests(SimpleTestCase):\n    def test_handler_renders_template_response(self):\n        response = self.client.get(\"/403/\")\n        # Make assertions on the response here. For example:\n        self.assertContains(response, \"Error handler content\", status_code=403)\n```\n\n----------------------------------------\n\nTITLE: Using assertNumQueries as a Context Manager in Django Tests\nDESCRIPTION: Shows how to use assertNumQueries as a context manager to verify the exact number of database queries executed by a block of code.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertNumQueries(2):\n    Person.objects.create(name=\"Aaron\")\n    Person.objects.create(name=\"Daniel\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a List with the For Tag in HTML+Django\nDESCRIPTION: This snippet shows how to use the `{% for %}` tag to loop through items in a list or array. It iterates over `athlete_list`, assigning each item to the `athlete` loop variable. Inside the loop, `{{ athlete.name }}` accesses the `name` attribute of the current `athlete` object and displays it within an HTML list item (`<li>`). Requires `athlete_list` (an iterable) to be present in the template context.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n<ul>\n{% for athlete in athlete_list %}\n    <li>{{ athlete.name }}</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for ModelChoiceField with Custom to_field_name in Django\nDESCRIPTION: HTML output generated by a ModelChoiceField using a custom to_field_name, which uses the specified field of each object as option values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<select id=\"id_field2\" name=\"field2\">\n<option value=\"obj1.name\">Object1</option>\n<option value=\"obj2.name\">Object2</option>\n...\n</select>\n```\n\n----------------------------------------\n\nTITLE: Disabling RETURNING INTO for Oracle in Django Settings (Python)\nDESCRIPTION: Explains how to disable Oracle's `RETURNING INTO` clause, which Django uses by default to efficiently retrieve AutoField values upon insertion. Set `use_returning_into: False` in `OPTIONS` for compatibility with certain setups like remote tables or views with `INSTEAD OF` triggers.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n\"OPTIONS\": {\n    \"use_returning_into\": False,\n}\n```\n\n----------------------------------------\n\nTITLE: Mitigating DoS Vulnerability in Django's urlize() Function\nDESCRIPTION: Addresses CVE-2024-41990 and CVE-2024-41991 by improving the handling of large inputs with specific character sequences and Unicode characters in urlize and urlizetrunc template filters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.html.urlize()\n```\n\n----------------------------------------\n\nTITLE: Using auto_id Setting with Django BoundFields\nDESCRIPTION: Shows how the auto_id setting affects the HTML output of form fields, specifically whether ID attributes are included.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(auto_id=False)\n>>> print(f[\"message\"])\n<input type=\"text\" name=\"message\" required>\n>>> f = ContactForm(auto_id=\"id_%s\")\n>>> print(f[\"message\"])\n<input type=\"text\" name=\"message\" id=\"id_message\" required>\n```\n\n----------------------------------------\n\nTITLE: Custom Comment Model Implementation\nDESCRIPTION: Example of implementing a custom comment model with a title field using the BanningCommentManager\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.contrib.comments.models import Comment\n\nfrom my_comments_app.managers import BanningCommentManager\n\n\nclass CommentWithTitle(Comment):\n    title = models.CharField(max_length=300)\n\n    objects = BanningCommentManager()\n```\n\n----------------------------------------\n\nTITLE: Using AsyncClient in an asynchronous test method\nDESCRIPTION: Example of an asynchronous test method using AsyncClient to make an HTTP request. Shows how the request method must be awaited when using AsyncClient.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nasync def test_my_thing(self):\n    response = await self.async_client.get(\"/some-url/\")\n    self.assertEqual(response.status_code, 200)\n```\n\n----------------------------------------\n\nTITLE: Failing Silently with Django Messages Framework\nDESCRIPTION: Demonstrates how to add messages with fail_silently option to prevent exceptions when the messages framework is disabled in reusable apps.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmessages.add_message(\n    request,\n    messages.SUCCESS,\n    \"Profile details updated.\",\n    fail_silently=True,\n)\nmessages.info(request, \"Hello world.\", fail_silently=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Middleware in Settings\nDESCRIPTION: Default MIDDLEWARE configuration created by django-admin startproject. This shows the standard middleware stack that handles security, sessions, common functionality, CSRF protection, authentication, messages, and clickjacking protection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Template Loader with Specific Directories\nDESCRIPTION: Demonstrates how to override the DIRS setting and specify directories for a particular filesystem loader in Django templates configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Tags in Django Templates\nDESCRIPTION: Shows examples of using Django template tags for various purposes such as including CSRF tokens, implementing control structures, and cycling through values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% csrf_token %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% cycle 'odd' 'even' %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% if user.is_authenticated %}Hello, {{ user.username }}.{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating HttpResponse Objects in Python\nDESCRIPTION: Shows different ways to create HttpResponse objects with various content types.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.http import HttpResponse\n>>> response = HttpResponse(\"Here's the text of the web page.\")\n>>> response = HttpResponse(\"Text only, please.\", content_type=\"text/plain\")\n>>> response = HttpResponse(b\"Bytestrings are also accepted.\")\n>>> response = HttpResponse(memoryview(b\"Memoryview as well.\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Middleware for Clickjacking Protection\nDESCRIPTION: This snippet shows how to add the XFrameOptionsMiddleware to Django's MIDDLEWARE setting. This middleware sets the X-Frame-Options header to DENY for all outgoing HttpResponses by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/clickjacking.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    ...,\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Using get_language_info for Localized Language Information\nDESCRIPTION: Shows how to use the get_language_info() function to retrieve detailed information about a language, including its name in different forms and writing direction.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.utils.translation import activate, get_language_info\n>>> activate(\"fr\")\n>>> li = get_language_info(\"de\")\n>>> print(li[\"name\"], li[\"name_local\"], li[\"name_translated\"], li[\"bidi\"])\nGerman Deutsch Allemand False\n```\n\n----------------------------------------\n\nTITLE: Migrating Model Meta Option from index_together to indexes - Django Models - Python\nDESCRIPTION: Illustrates the recommended migration from using the deprecated Meta.index_together option to the preferred Meta.indexes approach in Django 4.2. Developers should replace index_together with explicit models.Index objects for defining composite indexes, ensuring future compatibility. The input and output snippets assume use in a Django model definition and are applicable to schema/migration updates.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Author(models.Model):\n    rank = models.IntegerField()\n    name = models.CharField(max_length=30)\n\n    class Meta:\n        index_together = [[\"rank\", \"name\"]]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Author(models.Model):\n    rank = models.IntegerField()\n    name = models.CharField(max_length=30)\n\n    class Meta:\n        indexes = [models.Index(fields=[\"rank\", \"name\"])]\n```\n\n----------------------------------------\n\nTITLE: Defining Item Copyright Notice in Django Feed\nDESCRIPTION: This snippet shows three ways to define the copyright notice for items in a Django Atom feed: a method taking an item, a method for all items, and a hard-coded attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef item_copyright(self, obj):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    copyright notice as a normal Python string.\n    \"\"\"\n\ndef item_copyright(self):\n    \"\"\"\n    Returns the copyright notice for every item in the feed.\n    \"\"\"\n\nitem_copyright = \"Copyright (c) 2007, Sally Smith\"  # Hard-coded copyright notice.\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Only Backend for Sessions\nDESCRIPTION: Setting the SESSION_ENGINE to use cache-only session storage which is faster but less persistent than database storage, as sessions can be lost if cache is cleared.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"django.contrib.sessions.backends.cache\"\n```\n\n----------------------------------------\n\nTITLE: Implementing get_internal_type for Custom Django Field\nDESCRIPTION: Example of implementing get_internal_type method for a custom field, allowing it to emulate built-in field types for database operations.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nclass HandField(models.Field):\n    # ...\n\n    def get_internal_type(self):\n        return \"CharField\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Backend Options in Python\nDESCRIPTION: Demonstrates how to set up the 'builtins' option in Django's template backend configuration. This allows adding custom template tag modules to the built-ins without needing to use the {% load %} tag.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nOPTIONS = {\n    \"builtins\": [\"myapp.builtins\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Jinja2 Environment for Django in Python\nDESCRIPTION: Demonstrates how to create a custom Jinja2 environment for Django, adding Django-specific functions like 'static' and 'url' to the Jinja2 global namespace.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.templatetags.static import static\nfrom django.urls import reverse\n\nfrom jinja2 import Environment\n\n\ndef environment(**options):\n    env = Environment(**options)\n    env.globals.update(\n        {\n            \"static\": static,\n            \"url\": reverse,\n        }\n    )\n    return env\n```\n\n----------------------------------------\n\nTITLE: Using serialize_db_to_string for Test DB Serialization (Python)\nDESCRIPTION: The `serialize_db_to_string()` method is the recommended replacement for the deprecated `BaseDatabaseCreation.create_test_db(serialize=True)`. It should be used for serializing the test database state in database backend implementations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nserialize_db_to_string()\n```\n\n----------------------------------------\n\nTITLE: Creating a B-Tree Index in Django with PostgreSQL\nDESCRIPTION: Creates a B-Tree index with options for fill factor and item deduplication. B-Tree is the default index type in PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBTreeIndex(*expressions, fillfactor=None, deduplicate_items=None, **options)\n```\n\n----------------------------------------\n\nTITLE: Defining Django View Function with Correct Parameter Naming\nDESCRIPTION: Demonstrates the correct way to name the first parameter in a Django view function as 'request'. This convention improves code readability and consistency across Django projects.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef my_view(request, foo): ...\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Port for Email in Django\nDESCRIPTION: Defines the port number (25 by default) for the SMTP server specified in EMAIL_HOST.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_PORT = 25\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Iterating over a Django QuerySet in Python\nDESCRIPTION: Shows asynchronous iteration over a Django QuerySet using `async for`. Similar to synchronous iteration, this triggers database evaluation. Each fetched `Entry` object is appended to the `results` list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync for e in Entry.objects.all():\n    results.append(e)\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Cache Backends\nDESCRIPTION: Demonstrates how to access configured cache backends using django.core.cache.caches and the default cache shortcut.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_30\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.core.cache import caches\n>>> cache1 = caches[\"myalias\"]\n>>> cache2 = caches[\"myalias\"]\n>>> cache1 is cache2\nTrue\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.core.cache import cache\n```\n\n----------------------------------------\n\nTITLE: Using Filters and Operators in If Tag Conditions in HTML+Django\nDESCRIPTION: This snippet illustrates using filters and operators within an `{% if %}` tag's condition. The condition `athlete_list|length > 1` checks if the number of elements in `athlete_list` (obtained via the `length` filter) is greater than 1. If true, it executes the block intended for a team (content omitted). If false (meaning 0 or 1 athlete), the `{% else %}` block executes, displaying the name of the first athlete (`athlete_list.0.name`). It notes that while `length` works for numeric comparison, most filters return strings, making mathematical comparisons generally unreliable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% if athlete_list|length > 1 %}\n   Team: {% for athlete in athlete_list %} ... {% endfor %}\n{% else %}\n   Athlete: {{ athlete_list.0.name }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using ModelAdmin Methods in list_display\nDESCRIPTION: Example showing how to use a ModelAdmin method with the admin.display decorator in list_display for custom column rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"upper_case_name\"]\n\n    @admin.display(description=\"Name\")\n    def upper_case_name(self, obj):\n        return f\"{obj.first_name} {obj.last_name}\".upper()\n```\n\n----------------------------------------\n\nTITLE: Custom URL Configuration in Django ModelAdmin\nDESCRIPTION: Demonstrates how to add custom URLs to a ModelAdmin by extending get_urls() method with custom views and templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.template.response import TemplateResponse\nfrom django.urls import path\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_urls(self):\n        urls = super().get_urls()\n        my_urls = [path(\"my_view/\", self.admin_site.admin_view(self.my_view))]\n        return my_urls + urls\n\n    def my_view(self, request):\n        # ...\n        context = dict(\n            # Include common variables for rendering the admin template.\n            self.admin_site.each_context(request),\n            # Anything else you want in the context...\n            key=value,\n        )\n        return TemplateResponse(request, \"sometemplate.html\", context)\n```\n\n----------------------------------------\n\nTITLE: Example Output: Sorted List of Dictionaries after Dictsort - Python\nDESCRIPTION: Shows the expected output after applying the 'dictsort' filter by 'name'. The list of dictionaries is sorted alphabetically by the 'name' field. No dependencies except Python.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\n[\n    {\"name\": \"amy\", \"age\": 22},\n    {\"name\": \"joe\", \"age\": 31},\n    {\"name\": \"zed\", \"age\": 19},\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Object Description in Django Template - html+django\nDESCRIPTION: This snippet shows how to render an object's description in a Django template using template variables. The code requires Django's template engine and expects an object named 'obj' with a 'description' attribute passed into the context. It outputs the description as plain text, and additional formatting or filters may be applied as needed. The expected input is a template context containing 'obj'; the output is the rendered value of 'obj.description' in the final HTML.\n\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{{ obj.description }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Django Form Fields in HTML+Django Template\nDESCRIPTION: This snippet demonstrates how to render individual form fields in a Django template, including labels and fieldsets if applicable.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{% if field.label %}{{ field.label_tag }}{% endif %}\n{% endif %}\n{{ field }}\n{% if field.use_fieldset %}</fieldset>{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Unlocalize Template Filter in Django Templates\nDESCRIPTION: Example of using the 'unlocalize' template filter to force a single value to be displayed without localization in a Django template. This is useful for machine-readable outputs like JavaScript or XML.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% load l10n %}\n\n{{ value|unlocalize }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ChoiceField and Widget Behavior in Django Forms Using Python\nDESCRIPTION: Shows how widgets that inherit from Select synchronize their choices with their associated form field and how updating one affects the other. Assumes the use of Django; primarily illustrates the manipulation of 'choices' on both the field and the widget, with immediate effects. Inputs are choice definitions and assignments; outputs are updated lists of choices for form fields and widgets. Useful for understanding dynamic choice management in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\n>>> CHOICES = {\"1\": \"First\", \"2\": \"Second\"}\n>>> choice_field = forms.ChoiceField(widget=forms.RadioSelect, choices=CHOICES)\n>>> choice_field.choices\n[('1', 'First'), ('2', 'Second')]\n>>> choice_field.widget.choices\n[('1', 'First'), ('2', 'Second')]\n>>> choice_field.widget.choices = []\n>>> choice_field.choices = [(\"1\", \"First and only\")]\n>>> choice_field.widget.choices\n[('1', 'First and only')]\n```\n\n----------------------------------------\n\nTITLE: QuerySet Operations in Django\nDESCRIPTION: Demonstration of QuerySet operations that were fixed in this release, involving values(), values_list(), union(), difference(), and intersection() methods with annotated and unannotated querysets.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.13.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.values()\nQuerySet.values_list()\nunion()\ndifference()\nintersection()\n```\n\n----------------------------------------\n\nTITLE: Copying Django Model Instances with Many-to-Many Relations\nDESCRIPTION: Shows how to preserve many-to-many relationships when copying a Django model instance by setting the relations after saving the new instance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nentry = Entry.objects.all()[0]  # some previous entry\nold_authors = entry.authors.all()\nentry.pk = None\nentry._state.adding = True\nentry.save()\nentry.authors.set(old_authors)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Cache in Django for Development\nDESCRIPTION: Setting up a dummy cache backend that implements the cache interface without actually caching. This is useful for development environments where caching is not needed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.dummy.DummyCache\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Plan Display Fix for RunPython Operations\nDESCRIPTION: Fixed behavior of migrate --plan command to correctly handle RunPython operations without docstrings in reverse_code callables.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmigrate --plan\n```\n\n----------------------------------------\n\nTITLE: Documenting Migration Operation Classes in Django ORM - reStructuredText\nDESCRIPTION: This snippet provides reStructuredText documentation for core migration operation classes in Django's ORM. It defines parameters, behaviors, and intended uses for each class, including 'CreateModel', 'DeleteModel', 'RenameModel', and others, with detailed notes on arguments, reversibility, and practical usage tips. The documentation assumes familiarity with Django models and migrations, and it presumes the reader is comfortable writing Sphinx-compatible docstrings or user-facing technical documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nMigration Operations\n====================\n\n.. module:: django.db.migrations.operations\n\nMigration files are composed of one or more ``Operation``\\s, objects that\ndeclaratively record what the migration should do to your database.\n\nDjango also uses these ``Operation`` objects to work out what your models\nlooked like historically, and to calculate what changes you've made to\nyour models since the last migration so it can automatically write\nyour migrations; that's why they're declarative, as it means Django can\neasily load them all into memory and run through them without touching\nthe database to work out what your project should look like.\n\nThere are also more specialized ``Operation`` objects which are for things like\n:ref:`data migrations <data-migrations>` and for advanced manual database\nmanipulation. You can also write your own ``Operation`` classes if you want\nto encapsulate a custom change you commonly make.\n\nIf you need an empty migration file to write your own ``Operation`` objects\ninto, use ``python manage.py makemigrations --empty yourappname``, but be aware\nthat manually adding schema-altering operations can confuse the migration\nautodetector and make resulting runs of :djadmin:`makemigrations` output\nincorrect code.\n\nAll of the core Django operations are available from the\n``django.db.migrations.operations`` module.\n\nFor introductory material, see the :doc:`migrations topic guide\n</topics/migrations>`.\n\nSchema Operations\n=================\n\n``CreateModel``\n---------------\n\n.. class:: CreateModel(name, fields, options=None, bases=None, managers=None)\n\nCreates a new model in the project history and a corresponding table in the\ndatabase to match it.\n\n``name`` is the model name, as would be written in the ``models.py`` file.\n\n``fields`` is a list of 2-tuples of ``(field_name, field_instance)``.\nThe field instance should be an unbound field (so just\n``models.CharField(...)``, rather than a field taken from another model).\n\n``options`` is an optional dictionary of values from the model's ``Meta`` class.\n\n``bases`` is an optional list of other classes to have this model inherit from;\nit can contain both class objects as well as strings in the format\n``\"appname.ModelName\"`` if you want to depend on another model (so you inherit\nfrom the historical version). If it's not supplied, it defaults to inheriting\nfrom the standard ``models.Model``.\n\n``managers`` takes a list of 2-tuples of ``(manager_name, manager_instance)``.\nThe first manager in the list will be the default manager for this model during\nmigrations.\n\n``DeleteModel``\n---------------\n\n.. class:: DeleteModel(name)\n\nDeletes the model from the project history and its table from the database.\n\n``RenameModel``\n---------------\n\n.. class:: RenameModel(old_name, new_name)\n\nRenames the model from an old name to a new one.\n\nYou may have to manually add\nthis if you change the model's name and quite a few of its fields at once; to\nthe autodetector, this will look like you deleted a model with the old name\nand added a new one with a different name, and the migration it creates will\nlose any data in the old table.\n\n``AlterModelTable``\n-------------------\n\n.. class:: AlterModelTable(name, table)\n\nChanges the model's table name (the :attr:`~django.db.models.Options.db_table`\noption on the ``Meta`` subclass).\n\n``AlterModelTableComment``\n--------------------------\n\n.. class:: AlterModelTableComment(name, table_comment)\n\nChanges the model's table comment (the\n:attr:`~django.db.models.Options.db_table_comment` option on the ``Meta``\nsubclass).\n\n``AlterUniqueTogether``\n-----------------------\n\n.. class:: AlterUniqueTogether(name, unique_together)\n\nChanges the model's set of unique constraints (the\n:attr:`~django.db.models.Options.unique_together` option on the ``Meta``\nsubclass).\n\n``AlterIndexTogether``\n----------------------\n\n.. class:: AlterIndexTogether(name, index_together)\n\nChanges the model's set of custom indexes (the ``index_together`` option on the\n``Meta`` subclass).\n\n.. warning::\n\n    ``AlterIndexTogether`` is officially supported only for pre-Django 4.2\n    migration files. For backward compatibility reasons, it's still part of the\n    public API, and there's no plan to deprecate or remove it, but it should\n    not be used for new migrations. Use\n    :class:`~django.db.migrations.operations.AddIndex` and\n    :class:`~django.db.migrations.operations.RemoveIndex` operations instead.\n\n``AlterOrderWithRespectTo``\n---------------------------\n\n.. class:: AlterOrderWithRespectTo(name, order_with_respect_to)\n\nMakes or deletes the ``_order`` column needed for the\n:attr:`~django.db.models.Options.order_with_respect_to` option on the ``Meta``\nsubclass.\n\n``AlterModelOptions``\n---------------------\n\n.. class:: AlterModelOptions(name, options)\n\nStores changes to miscellaneous model options (settings on a model's ``Meta``)\nlike ``permissions`` and ``verbose_name``. Does not affect the database, but\npersists these changes for :class:`RunPython` instances to use. ``options``\nshould be a dictionary mapping option names to values.\n\n``AlterModelManagers``\n----------------------\n\n.. class:: AlterModelManagers(name, managers)\n\nAlters the managers that are available during migrations.\n\n``AddField``\n------------\n\n.. class:: AddField(model_name, name, field, preserve_default=True)\n\nAdds a field to a model. ``model_name`` is the model's name, ``name`` is\nthe field's name, and ``field`` is an unbound Field instance (the thing\nyou would put in the field declaration in ``models.py`` - for example,\n``models.IntegerField(null=True)``.\n\nThe ``preserve_default`` argument indicates whether the field's default\nvalue is permanent and should be baked into the project state (``True``),\nor if it is temporary and just for this migration (``False``) - usually\nbecause the migration is adding a non-nullable field to a table and needs\na default value to put into existing rows. It does not affect the behavior\nof setting defaults in the database directly - Django never sets database\ndefaults and always applies them in the Django ORM code.\n\n.. warning::\n\n    On older databases, adding a field with a default value may cause a full\n    rewrite of the table. This happens even for nullable fields and may have a\n    negative performance impact. To avoid that, the following steps should be\n    taken.\n\n    * Add the nullable field without the default value and run the\n      :djadmin:`makemigrations` command. This should generate a migration with\n      an ``AddField`` operation.\n\n    * Add the default value to your field and run the :djadmin:`makemigrations`\n      command. This should generate a migration with an ``AlterField``\n      operation.\n\n``RemoveField``\n---------------\n\n.. class:: RemoveField(model_name, name)\n\nRemoves a field from a model.\n\nBear in mind that when reversed, this is actually adding a field to a model.\nThe operation is reversible (apart from any data loss, which is irreversible)\nif the field is nullable or if it has a default value that can be used to\npopulate the recreated column. If the field is not nullable and does not have a\ndefault value, the operation is irreversible.\n\n.. versionchanged:: 6.0\n\n    :class:`~django.db.backends.base.schema.BaseDatabaseSchemaEditor` and\n    PostgreSQL backends no longer use ``CASCADE`` to delete dependent related\n    database objects, such as views. Any dependent objects that are not managed\n    by Django may need to be removed manually before running ``RemoveField``.\n\n``AlterField``\n--------------\n\n.. class:: AlterField(model_name, name, field, preserve_default=True)\n\nAlters a field's definition, including changes to its type,\n:attr:`~django.db.models.Field.null`, :attr:`~django.db.models.Field.unique`,\n:attr:`~django.db.models.Field.db_column` and other field attributes.\n\nThe ``preserve_default`` argument indicates whether the field's default\nvalue is permanent and should be baked into the project state (``True``),\nor if it is temporary and just for this migration (``False``) - usually\nbecause the migration is altering a nullable field to a non-nullable one and\nneeds a default value to put into existing rows. It does not affect the\nbehavior of setting defaults in the database directly - Django never sets\ndatabase defaults and always applies them in the Django ORM code.\n\nNote that not all changes are possible on all databases - for example, you\ncannot change a text-type field like ``models.TextField()`` into a number-type\nfield like ``models.IntegerField()`` on most databases.\n\n``RenameField``\n---------------\n\n.. class:: RenameField(model_name, old_name, new_name)\n\nChanges a field's name (and, unless :attr:`~django.db.models.Field.db_column`\nis set, its column name).\n\n``AddIndex``\n------------\n\n.. class:: AddIndex(model_name, index)\n\nCreates an index in the database table for the model with ``model_name``.\n``index`` is an instance of the :class:`~django.db.models.Index` class.\n\n``RemoveIndex``\n---------------\n\n.. class:: RemoveIndex(model_name, name)\n\nRemoves the index named ``name`` from the model with ``model_name``.\n\n``RenameIndex``\n---------------\n\n.. class:: RenameIndex(model_name, new_name, old_name=None, old_fields=None)\n\nRenames an index in the database table for the model with ``model_name``.\nExactly one of ``old_name`` and ``old_fields`` can be provided. ``old_fields``\nis an iterable of the strings, often corresponding to fields of\n``index_together`` (pre-Django 5.1 option).\n\nOn databases that don't support an index renaming statement (SQLite), the\noperation will drop and recreate the index, which can be expensive.\n\n``AddConstraint``\n-----------------\n\n.. class:: AddConstraint(model_name, constraint)\n\nCreates a :doc:`constraint </ref/models/constraints>` in the database table for\nthe model with ``model_name``.\n\n``RemoveConstraint``\n--------------------\n\n.. class:: RemoveConstraint(model_name, name)\n\nRemoves the constraint named ``name`` from the model with ``model_name``.\n\n``AlterConstraint``\n-------------------\n```\n\n----------------------------------------\n\nTITLE: URL Structure Example in Django\nDESCRIPTION: Demonstrates the structure of a URL in Django, highlighting the 'slug' component which contains only letters, numbers, underscores or hyphens and is commonly used for readable URL paths.\nSOURCE: https://github.com/django/django/blob/main/docs/glossary.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nhttps://www.djangoproject.com/weblog/2008/apr/12/**spring**/\n```\n\n----------------------------------------\n\nTITLE: Basic Django Admin Field Reordering\nDESCRIPTION: Shows how to reorder fields in the Django admin form by creating a custom ModelAdmin class.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nfrom .models import Question\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fields = [\"pub_date\", \"question_text\"]\n\n\nadmin.site.register(Question, QuestionAdmin)\n```\n\n----------------------------------------\n\nTITLE: Using with Tag in Django Templates\nDESCRIPTION: Demonstrates how to use the with tag to cache complex variables under simpler names.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_50\n\nLANGUAGE: html+django\nCODE:\n```\n{% with total=business.employees.count %}\n    {{ total }} employee{{ total|pluralize }}\n{% endwith %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% with alpha=1 beta=2 %}\n    ...\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Skipping Django tests based on database features with skipIfDBFeature\nDESCRIPTION: Example showing how to skip a test if a specific database feature is supported using the skipIfDBFeature decorator. This test will not run if the database supports transactions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nclass MyTests(TestCase):\n    @skipIfDBFeature(\"supports_transactions\")\n    def test_transaction_behavior(self):\n        # ... conditional test code\n        pass\n```\n\n----------------------------------------\n\nTITLE: Example Input: List of Books with Nested Author Dictionaries - Python\nDESCRIPTION: Provides a sample list of dictionaries each representing a book with a nested 'author' dictionary for name and age. Serves as input to the nested dictsort example in Django templates. No dependencies beyond Python.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n[\n    {\"title\": \"1984\", \"author\": {\"name\": \"George\", \"age\": 45}},\n    {\"title\": \"Timequake\", \"author\": {\"name\": \"Kurt\", \"age\": 75}},\n    {\"title\": \"Alice\", \"author\": {\"name\": \"Lewis\", \"age\": 33}},\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Django Debug Toolbar via pip\nDESCRIPTION: This command installs the Django Debug Toolbar package using pip within an activated virtual environment. It's a prerequisite for using the toolbar in a Django project.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial08.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install django-debug-toolbar\n```\n\n----------------------------------------\n\nTITLE: Using urlize Filter in Django Templates\nDESCRIPTION: The urlize and urlizetrunc template filters in Django were vulnerable to a denial-of-service attack with large inputs containing specific character sequences. This security issue has been addressed in version 4.2.16.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.16.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{ text|urlize }}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Regex Filtering using `iregex` Lookup in Django (Python and SQL)\nDESCRIPTION: Illustrates using the `__iregex` lookup for case-insensitive regular expression matching in Django QuerySets. Similar to `regex`, the specific syntax depends on the database backend. Shows a Python example and lists the corresponding SQL equivalents for MySQL, Oracle, PostgreSQL, and SQLite, highlighting the different ways case-insensitivity is achieved.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_124\n\nLANGUAGE: Python\nCODE:\n```\nEntry.objects.get(title__iregex=r\"^(an?|the) +\")\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ... WHERE title REGEXP '^(an?|the) +'; -- MySQL\n\nSELECT ... WHERE REGEXP_LIKE(title, '^(an?|the) +', 'i'); -- Oracle\n\nSELECT ... WHERE title ~* '^(an?|the) +'; -- PostgreSQL\n\nSELECT ... WHERE title REGEXP '(?i)^(an?|the) +'; -- SQLite\n```\n\n----------------------------------------\n\nTITLE: Specifying NullBooleanField Widget Choices in Django Forms - Python\nDESCRIPTION: This Python code block demonstrates how to instantiate a NullBooleanField using a custom widget, specifically Select, with explicit choices for representing unknown, yes, or no values. Required dependencies include Django's forms, Select widget, and appropriate field imports. It shows how to customize presentation and underlying stored values for tri-state boolean fields, commonly used when a boolean may be set to True, False, or Unknown/null.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nNullBooleanField(\n    widget=Select(\n        choices=[\n            (\"\", \"Unknown\"),\n            (True, \"Yes\"),\n            (False, \"No\"),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Overlap in Django ORM\nDESCRIPTION: Example of using the 'overlaps' lookup to find geometries that spatially overlap with a given geometry across different spatial database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__overlaps=geom)\n```\n\n----------------------------------------\n\nTITLE: Sorting List of Lists by Index with Dictsort in Django Templates - HTML+Django\nDESCRIPTION: Demonstrates the use of dictsort to order a list of lists (or tuples) by the element at the specified index (here, index 0). Expects 'value' to be a list of sequences. Only works if index is provided as an integer (not a string); returns sorted list for template display or logic.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_63\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|dictsort:0 }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vulnerable Host Header in Django 1.4.1\nDESCRIPTION: This snippet shows an example of a vulnerable Host header that could be exploited in Django versions 1.3.3 and 1.4.1. The header contains malicious username/password information that could lead to security issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHost: validsite.com:random@evilsite.com\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Model Relationships - Django Models - Python\nDESCRIPTION: Demonstrates defining two models, Car and Manufacturer, where Car references Manufacturer via a ForeignKey using the model name as a string literal. Manufacturer also defines a recursive ManyToManyField to itself. This approach supports referencing models not yet defined in the file and enables reusability in abstract base models. Requires django.db.models. Inputs are string names for related models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\\n\\n\\nclass Car(models.Model):\\n    manufacturer = models.ForeignKey(\\n        \"Manufacturer\",\\n        on_delete=models.CASCADE,\\n    )\\n\\n\\nclass Manufacturer(models.Model):\\n    name = models.TextField()\\n    suppliers = models.ManyToManyField(\"self\", symmetrical=False)\n```\n\n----------------------------------------\n\nTITLE: Month Archive Template Example\nDESCRIPTION: Django template for displaying monthly article archives with navigation links.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    {% for article in object_list %}\n        <li>{{ article.pub_date|date:\"F j, Y\" }}: {{ article.title }}</li>\n    {% endfor %}\n</ul>\n\n<p>\n    {% if previous_month %}\n        Previous Month: {{ previous_month|date:\"F Y\" }}\n    {% endif %}\n    {% if next_month %}\n        Next Month: {{ next_month|date:\"F Y\" }}\n    {% endif %}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Filtering M2M Relationships Using '__in' Lookup (pycon)\nDESCRIPTION: Shows how to filter `Article` objects based on whether their related `Publication` is within a given list, using the `__in` lookup. It demonstrates using both a list of IDs (`[1, 2]`) and a list of `Publication` instances (`[p1, p2]`). `distinct()` is used to ensure unique `Article` results.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Article.objects.filter(publications__in=[1, 2]).distinct()\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n>>> Article.objects.filter(publications__in=[p1, p2]).distinct()\n<QuerySet [<Article: Django lets you build web apps easily>, <Article: NASA uses Python>]>\n```\n\n----------------------------------------\n\nTITLE: Override MESSAGE_LEVEL Django Python\nDESCRIPTION: This snippet shows how to override the MESSAGE_LEVEL setting in Django using the imported constants. It sets the minimum message level recorded by the framework. This is necessary if you override MESSAGE_LEVEL in your settings.py and utilize the built-in constants.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nMESSAGE_LEVEL = message_constants.DEBUG\n```\n\n----------------------------------------\n\nTITLE: Structuring Django Model with Meta Class\nDESCRIPTION: Illustrates the correct placement of the Meta class within a Django model, following it with a single blank line after field definitions. This structure improves readability and follows Django's conventions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    first_name = models.CharField(max_length=20)\n    last_name = models.CharField(max_length=40)\n\n    class Meta:\n        verbose_name_plural = \"people\"\n```\n\n----------------------------------------\n\nTITLE: Defining Application Namespace in Django App URLconf\nDESCRIPTION: This snippet shows how to define an application namespace in a Django app's URLconf. It sets the app_name variable and defines URL patterns for the application views.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.IndexView.as_view(), name=\"index\"),\n    path(\"<int:pk>/\", views.DetailView.as_view(), name=\"detail\"),\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: User Model Field Declarations - Python/Django\nDESCRIPTION: Core field definitions for Django's User model including username, names, email, password, and various permission flags\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nusername = models.CharField(max_length=150)  # Required, allows alphanumeric, _, @, +, ., -\nfirst_name = models.CharField(max_length=150, blank=True)  # Optional\nlast_name = models.CharField(max_length=150, blank=True)  # Optional\nemail = models.EmailField(blank=True)  # Optional\npassword = models.CharField()  # Required, stores password hash\ngroups = models.ManyToManyField('Group')\nuser_permissions = models.ManyToManyField('Permission')\nis_staff = models.BooleanField()  # Controls admin site access\nis_active = models.BooleanField()  # Account status\nis_superuser = models.BooleanField()  # Grants all permissions\nlast_login = models.DateTimeField()  # Last login timestamp\ndate_joined = models.DateTimeField()  # Account creation timestamp\n```\n\n----------------------------------------\n\nTITLE: Django Validator and Form Field References\nDESCRIPTION: This code snippet lists the affected Django validators and form fields that were vulnerable to newline injection. These include validate_ipv4_address, validate_slug, URLValidator, and their corresponding form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndjango.core.validators.validate_ipv4_address\n```\n\nLANGUAGE: Python\nCODE:\n```\ndjango.core.validators.validate_slug\n```\n\nLANGUAGE: Python\nCODE:\n```\ndjango.core.validators.URLValidator\n```\n\nLANGUAGE: Python\nCODE:\n```\nGenericIPAddresseField\n```\n\nLANGUAGE: Python\nCODE:\n```\nIPAddressField\n```\n\nLANGUAGE: Python\nCODE:\n```\nSlugField\n```\n\nLANGUAGE: Python\nCODE:\n```\nURLField\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScriptCatalog View in Django URLs\nDESCRIPTION: Examples of how to configure the JavaScriptCatalog view in Django URL patterns for translating JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.i18n import JavaScriptCatalog\n\nurlpatterns = [\n    path(\"jsi18n/\", JavaScriptCatalog.as_view(), name=\"javascript-catalog\"),\n]\n\n# Example with custom packages\nurlpatterns = [\n    path(\n        \"jsi18n/myapp/\",\n        JavaScriptCatalog.as_view(packages=[\"your.app.label\"]),\n        name=\"javascript-catalog\",\n    ),\n]\n\n# Example with i18n_patterns()\nfrom django.conf.urls.i18n import i18n_patterns\n\nurlpatterns = i18n_patterns(\n    path(\"jsi18n/\", JavaScriptCatalog.as_view(), name=\"javascript-catalog\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Django System Check with Tags in Python\nDESCRIPTION: Demonstrates how to register a custom system check function using the `@register()` decorator with specific tags (e.g., `Tags.compatibility`). Tagging allows running specific groups of checks. The check function `my_check` should contain the validation logic.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.checks import register, Tags\n\n\n@register(Tags.compatibility)\ndef my_check(app_configs, **kwargs):\n    # ... perform compatibility checks and collect errors\n    return errors\n```\n\n----------------------------------------\n\nTITLE: Sorting List of Dictionaries by Key Using Dictsort in Django Templates - HTML+Django\nDESCRIPTION: Illustrates use of the 'dictsort' filter to sort a list of dictionaries by a specified key (\"name\"). Django templates expect the variable 'value' to be a list of dicts. Output is a sorted list by the key, used for display or further iteration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_57\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|dictsort:\"name\" }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Extra Forms in InlineModelAdmin\nDESCRIPTION: Example showing how to override get_extra method to dynamically determine the number of extra inline forms based on the model instance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nclass BinaryTreeAdmin(admin.TabularInline):\n    model = BinaryTree\n\n    def get_extra(self, request, obj=None, **kwargs):\n        extra = 2\n        if obj:\n            return extra - obj.binarytree_set.count()\n        return extra\n```\n\n----------------------------------------\n\nTITLE: Checking Future Question Publication in Django Shell\nDESCRIPTION: This snippet demonstrates how to use the Django shell to check if a Question instance with a future publication date is incorrectly considered as recently published.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import datetime\n>>> from django.utils import timezone\n>>> # create a Question instance with pub_date 30 days in the future\n>>> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))\n>>> # was it published recently?\n>>> future_question.was_published_recently()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring AuditEntryAdmin without Links\nDESCRIPTION: Example of configuring an admin interface without any linked fields in the list display.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass AuditEntryAdmin(admin.ModelAdmin):\n    list_display = [\"timestamp\", \"message\"]\n    list_display_links = None\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format\nDESCRIPTION: Template showing the proper format for commit messages in Django, including the subject line, body formatting, and proper character line limits.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nFixed #18307 -- Added git workflow guidelines.\n\nRefactored the Django's documentation to remove mentions of SVN\nspecific tasks. Added guidelines of how to use Git, GitHub, and\nhow to use pull request together with Trac instead.\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'contained_by' Lookup in Django Python\nDESCRIPTION: Demonstrates the `contained_by` lookup (`__contained_by`, SQL operator `<@`) on the `ages` `IntegerRangeField`. This query retrieves `Event` objects whose entire `ages` range falls within the specified `NumericRange(0, 15)`. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__contained_by=NumericRange(0, 15))\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Permission with ModelBackend in Django (Python)\nDESCRIPTION: Returns a queryset of users possessing the specified permission (`perm`). By default (`is_active=True`), only active users are returned. Set `is_active=False` for inactive users, or `None` for all users. Superusers are included by default (`include_superusers=True`). `perm` can be a string \"<app label>.<permission codename>\" or a Permission instance. Returns an empty queryset if `obj` is not `None` as object-level permissions are not implemented.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith_perm(perm, is_active=True, include_superusers=True, obj=None)\n```\n\n----------------------------------------\n\nTITLE: Translating Text Block in Django Template\nDESCRIPTION: Example of using the blocktranslate tag to translate a block of text in a Django template.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_30\n\nLANGUAGE: django\nCODE:\n```\n{% blocktranslate %}Ambiguous translatable block of text{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Setting Message Level Per-Request in Django\nDESCRIPTION: Shows how to set the minimum recorded message level for a request using the set_level method and retrieve the current level with get_level.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import messages\n\n# Change the messages level to ensure the debug message is added.\nmessages.set_level(request, messages.DEBUG)\nmessages.debug(request, \"Test message...\")\n\n# In another request, record only messages with a level of WARNING and higher\nmessages.set_level(request, messages.WARNING)\nmessages.success(request, \"Your profile was updated.\")  # ignored\nmessages.warning(request, \"Your account is about to expire.\")  # recorded\n\n# Set the messages level back to default.\nmessages.set_level(request, None)\n```\n\n----------------------------------------\n\nTITLE: Setting Order of Related Objects in Django (Pycon)\nDESCRIPTION: Shows how to use the `set_RELATED_order()` method (e.g., `set_answer_order()`) on a parent object (`question`) to define a new order for its related objects (`Answer`) by passing a list of their primary keys. This method is available when `order_with_respect_to` is set.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> question.set_answer_order([3, 1, 2])\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Fixtures by Type Using django-admin (Shell)\nDESCRIPTION: Illustrates how to explicitly load a JSON-format fixture file using 'django-admin loaddata' with the '.json' extension, ensuring only JSON serializers are used. Requires Django and the presence of a matching 'mydata.json' file. Input: fixture label with extension (mydata.json); Output: fixture loaded as JSON. Limitation: will not match other formats (e.g., XML) with the same base name.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin loaddata mydata.json\n```\n\n----------------------------------------\n\nTITLE: Release Branch Security Merge\nDESCRIPTION: Git commands for merging security patches into a release branch\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout stable/4.1.x\n$ git merge --ff-only security/4.1.x\n```\n\n----------------------------------------\n\nTITLE: Checking Current Site in Django View\nDESCRIPTION: This code snippet shows how to check the current site's domain in a Django view function and perform different actions based on the result.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.shortcuts import get_current_site\n\n\ndef my_view(request):\n    current_site = get_current_site(request)\n    if current_site.domain == \"foo.com\":\n        # Do something\n        pass\n    else:\n        # Do something else.\n        pass\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Forced Updates with Model.NotUpdated (Python)\nDESCRIPTION: When a `Model.save()` call with `force_update=True` results in zero affected database rows, it now raises the specific `Model.NotUpdated` exception instead of a generic `django.db.DatabaseError`. This allows for more precise error handling.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nModel.save()\n```\n\nLANGUAGE: python\nCODE:\n```\nModel.NotUpdated\n```\n\n----------------------------------------\n\nTITLE: Inspecting OGR Data Sources with ogrinspect in Django\nDESCRIPTION: The ogrinspect function is used to inspect OGR data sources. It takes a data_source and model_name as required parameters, with additional optional keyword arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/ogrinspect.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nogrinspect(data_source, model_name, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Old vs New unordered_list Template Filter Syntax in Python\nDESCRIPTION: Shows the deprecated verbose syntax for the unordered_list template filter compared to the new more concise syntax. The old syntax uses nested lists with empty lists as placeholders, while the new syntax is more straightforward.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n[\"States\", [[\"Kansas\", [[\"Lawrence\", []], [\"Topeka\", []]]], [\"Illinois\", []]]]\n```\n\nLANGUAGE: Python\nCODE:\n```\n[\"States\", [\"Kansas\", [\"Lawrence\", \"Topeka\"], \"Illinois\"]]\n```\n\n----------------------------------------\n\nTITLE: Defining Item Publication Date in Django Feed\nDESCRIPTION: This snippet demonstrates three methods to specify the publication date for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef item_pubdate(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    pubdate.\n    \"\"\"\n\ndef item_pubdate(self):\n    \"\"\"\n    Returns the pubdate for every item in the feed.\n    \"\"\"\n\nitem_pubdate = datetime.datetime(2005, 5, 3)  # Hard-coded pubdate.\n```\n\n----------------------------------------\n\nTITLE: Modifying Vary Headers with patch_vary_headers\nDESCRIPTION: Updates the Vary header in an HttpResponse object with new header names that should be considered for caching. If newheaders contains an asterisk, Vary will consist of just '*'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npatch_vary_headers(response, newheaders)\n```\n\n----------------------------------------\n\nTITLE: Custom Formset Error Message\nDESCRIPTION: Shows how to customize formset error messages when management form is missing\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nformset = ArticleFormSet({}, error_messages={\"missing_management_form\": \"Sorry, something went wrong.\"})\nformset.is_valid()\nFalse\nformset.non_form_errors()\n['Sorry, something went wrong.']\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminEmailHandler with a Custom Reporter Class in Django Settings\nDESCRIPTION: This configuration illustrates how to customize the traceback text sent by `AdminEmailHandler`. The `reporter_class` parameter is set to a string import path pointing to a custom `django.views.debug.ExceptionReporter` subclass (`somepackage.error_reporter.CustomErrorReporter`). This allows for modifying the content and format of the error report email.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"handlers\": {\n    \"mail_admins\": {\n        \"level\": \"ERROR\",\n        \"class\": \"django.utils.log.AdminEmailHandler\",\n        \"include_html\": True,\n        \"reporter_class\": \"somepackage.error_reporter.CustomErrorReporter\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Model with ManyToMany Relationship to Site in Django\nDESCRIPTION: This code snippet defines an Article model with a many-to-many relationship to the Site model, allowing an article to be associated with multiple sites.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.models import Site\nfrom django.db import models\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=200)\n    # ...\n    sites = models.ManyToManyField(Site)\n```\n\n----------------------------------------\n\nTITLE: Storing translated string in a variable in Django templates\nDESCRIPTION: Demonstrates how to retrieve a translated string without displaying it, storing it in a variable for later use.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_21\n\nLANGUAGE: html+django\nCODE:\n```\n{% translate \"This is the title\" as the_title %}\n\n<title>{{ the_title }}</title>\n<meta name=\"description\" content=\"{{ the_title }}\">\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Block Tag in Django\nDESCRIPTION: Demonstrates how to create a custom block tag using @register.simple_block_tag decorator. The example creates a 'chart' tag that renders content between {% chart %} and {% endchart %} tags.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django import template\nfrom myapp.charts import render_chart\n\nregister = template.Library()\n\n\n@register.simple_block_tag\ndef chart(content):\n    return render_chart(source=content)\n```\n\n----------------------------------------\n\nTITLE: Using update() as a Context Manager in Django (Python)\nDESCRIPTION: Shows the use of Django's Context.update() as a context manager. update() temporarily overrides values and restores the previous state when exiting the block, preventing mismatched push/pop operations. This pattern is especially useful for ensuring context cleanup in nested scopes. Relies on Django's Context class. Inputs are dictionary updates, outputs are string lookups from the context.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Context()\n>>> c[\"foo\"] = \"first level\"\n>>> with c.update({\"foo\": \"second level\"}):\n...     c[\"foo\"]\n...\n'second level'\n>>> c[\"foo\"]\n'first level'\n```\n\n----------------------------------------\n\nTITLE: Manually Selecting Databases for Django Model Save Operations\nDESCRIPTION: Examples of how to manually specify which database to use when saving Django model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmy_object.save(using=\"legacy_users\")\n```\n\n----------------------------------------\n\nTITLE: Defining a TextField in Django Models\nDESCRIPTION: Defines a Django model field for storing large amounts of text. The default form widget is `Textarea`. While a `max_length` attribute can be specified (affecting the form widget), it is not enforced at the model or database level; use `CharField` for database-level length constraints. Supports an optional, database-specific `db_collation` attribute (not supported on Oracle).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n.. class:: TextField(**options)\n```\n\n----------------------------------------\n\nTITLE: Defining Grouped Django Model Choices using a Sequence\nDESCRIPTION: Shows an alternative way to define named groups for choices using a sequence (list) of 2-tuples. Each tuple contains the group name and another sequence (tuple or list) of the actual choices (value, label pairs) within that group. Ungrouped options can be included as simple 2-tuples.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nMEDIA_CHOICES = [\n    (\n        \"Audio\",\n        (\n            (\"vinyl\", \"Vinyl\"),\n            (\"cd\", \"CD\"),\n        ),\n    ),\n    (\n        \"Video\",\n        (\n            (\"vhs\", \"VHS Tape\"),\n            (\"dvd\", \"DVD\"),\n        ),\n    ),\n    (\"unknown\", \"Unknown\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Relocation of FlatPageSitemap Class - reStructuredText\nDESCRIPTION: Notes that django.contrib.sitemaps.FlatPageSitemap has moved to django.contrib.flatpages.sitemaps.FlatPageSitemap. The old import path is deprecated and to be removed in Django 1.9. Codebases should update their imports accordingly.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_10\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``django.contrib.sitemaps.FlatPageSitemap``\n-------------------------------------------\n\n``django.contrib.sitemaps.FlatPageSitemap`` has moved to\n``django.contrib.flatpages.sitemaps.FlatPageSitemap``. The old import location\nis deprecated and will be removed in Django 1.9.\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Validation in Django Article Model\nDESCRIPTION: Example of raising field-specific validation errors in clean() method using a dictionary of field names and errors.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    ...\n\n    def clean(self):\n        # Don't allow draft entries to have a pub_date.\n        if self.status == \"draft\" and self.pub_date is not None:\n            raise ValidationError(\n                {\"pub_date\": _(\"Draft entries may not have a publication date.\")}\n            )\n            ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Pickling for `forms.FileField` in Django\nDESCRIPTION: Notes a bugfix (:ticket:`26212`) in Django 1.8.10 that makes `forms.FileField` instances picklable. This allows instances of this field to be serialized, for example, for caching or storing in sessions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nforms.FileField\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch Related with Multiple Databases in Django\nDESCRIPTION: Demonstrates how Prefetch respects database choices when using multiple databases. Shows various combinations of inner and outer queries using different databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n>>> # Both inner and outer queries will use the 'replica' database\n>>> Restaurant.objects.prefetch_related(\"pizzas__toppings\").using(\"replica\")\n>>> Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas__toppings\"),\n... ).using(\"replica\")\n>>>\n>>> # Inner will use the 'replica' database; outer will use 'default' database\n>>> Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas__toppings\", queryset=Toppings.objects.using(\"replica\")),\n... )\n>>>\n>>> # Inner will use 'replica' database; outer will use 'cold-storage' database\n>>> Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas__toppings\", queryset=Toppings.objects.using(\"replica\")),\n... ).using(\"cold-storage\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Django FileResponse from a Binary File\nDESCRIPTION: Demonstrates the basic usage of Django's `FileResponse` class in a Python console environment (`pycon`). It imports `FileResponse` and creates an instance by passing an open file handle (`open(\"myfile.png\", \"rb\")`) representing a binary file. This response type is optimized for serving files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_25\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.http import FileResponse\n>>> response = FileResponse(open(\"myfile.png\", \"rb\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional UniqueConstraint in Python\nDESCRIPTION: Shows how to create a partial `UniqueConstraint` that applies only to rows matching a specific condition, defined using a `Q` object passed to the `condition` parameter. This example enforces uniqueness on the 'user' field only for rows where 'status' is 'DRAFT'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import Q, UniqueConstraint\n\nUniqueConstraint(fields=[\"user\"], condition=Q(status=\"DRAFT\"), name=\"unique_draft_user\")\n```\n\n----------------------------------------\n\nTITLE: Invalid Query Using Q Objects After Keyword Arguments\nDESCRIPTION: Shows an invalid Django query where keyword arguments are placed before Q objects, which is not allowed in Django's query syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n# INVALID QUERY\nPoll.objects.get(\n    question__startswith=\"Who\",\n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),\n)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Indexed Raw Queries with SQL LIMIT\nDESCRIPTION: Example of optimizing index retrieval by using SQL LIMIT clause to reduce the query result size at the database level, which is more efficient for large datasets.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> first_person = Person.objects.raw(\"SELECT * FROM myapp_person LIMIT 1\")[0]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Encoder in Python\nDESCRIPTION: Demonstrates how to create a custom JSON encoder class that handles special Django types. It extends the default JSON encoder to handle custom types.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif isinstance(obj, YourCustomType):\n    return str(obj)\nreturn super().default(obj)\n```\n\n----------------------------------------\n\nTITLE: Basic Foreign Key Relationship in Django Models\nDESCRIPTION: Demonstrates setting up a many-to-one relationship between Car and Manufacturer models using ForeignKey.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Manufacturer(models.Model):\n    name = models.TextField()\n\n\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Using Request Headers in Django Test Clients - Python\nDESCRIPTION: Demonstrates the change in test client usage: passing HTTP headers as direct keyword arguments in older versions versus the new explicit headers dictionary in Django 4.2+. This snippet helps developers update their tests by switching from custom-prefixed keyword arguments to the standardized headers parameter, improving clarity and compatibility with async clients. Requires Django's Client and AsyncClient classes to apply.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Before:\nself.client.get(\"/home/\", HTTP_ACCEPT_LANGUAGE=\"fr\")\nawait self.async_client.get(\"/home/\", ACCEPT_LANGUAGE=\"fr\")\n\n# After:\nself.client.get(\"/home/\", headers={\"accept-language\": \"fr\"})\nawait self.async_client.get(\"/home/\", headers={\"accept-language\": \"fr\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing TestCase.setUpTestData in Django\nDESCRIPTION: An example showing how to use TestCase.setUpTestData to set up data once for all test methods in a test case for better performance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase\n\n\nclass MyTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        # Set up data for the whole TestCase\n        cls.foo = Foo.objects.create(bar=\"Test\")\n        ...\n\n    def test1(self):\n        # Some test using self.foo\n        ...\n\n    def test2(self):\n        # Some other test using self.foo\n        ...\n```\n\n----------------------------------------\n\nTITLE: Correct Django Template Extension Pattern\nDESCRIPTION: Shows the proper way to structure a Django template with the extends tag as the first non-comment line. This example demonstrates proper spacing and block naming conventions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h1 class=\"font-semibold text-xl\">\n    {{ pages.title }}\n  </h1>\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Preventing Data Leakage in Django Admin\nDESCRIPTION: This snippet demonstrates a potential data leakage vulnerability in Django's admin interface through query string manipulation. The fix raises an exception for invalid 'to_field' values that aren't related fields to models registered with the admin.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"/admin/auth/user/?pop=1&t=password\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Class-Based View in Django\nDESCRIPTION: This snippet shows how to define a class-based view in Django. It demonstrates creating a TemplateView subclass with a custom get_context_data method to add extra context data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import TemplateView\n\n\nclass HomeView(TemplateView):\n    template_name = \"myapp/home.html\"\n\n    def get_context_data(self, **kwargs):\n        kwargs[\"environment\"] = \"Production\"\n        return super().get_context_data(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization Format\nDESCRIPTION: Example of Django's JSON serialization format structure.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"pk\": \"4b678b301dfd8a4e0dad910de3ae245b\",\n        \"model\": \"sessions.session\",\n        \"fields\": {\n            \"expire_date\": \"2013-01-16T08:16:59.844Z\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Reverse Generic Relations in Django\nDESCRIPTION: Shows how to create a Bookmark model with a reverse generic relationship to TaggedItem using GenericRelation field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.contenttypes.fields import GenericRelation\nfrom django.db import models\n\n\nclass Bookmark(models.Model):\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n```\n\n----------------------------------------\n\nTITLE: Using slice Filter in Django Templates\nDESCRIPTION: The slice filter returns a slice of the list using Python's list slicing syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_85\n\nLANGUAGE: html+django\nCODE:\n```\n{{ some_list|slice:\":2\" }}\n```\n\n----------------------------------------\n\nTITLE: Using KT() Expressions for JSONField Text Value Lookups\nDESCRIPTION: Shows how to use KT() expressions to represent text values of keys, indices, or path transforms in JSONField. This allows for advanced querying and annotation based on JSON paths.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.fields.json import KT\n>>> Dog.objects.create(\n...     name=\"Shep\",\n...     data={\n...         \"owner\": {\"name\": \"Bob\"},\n...         \"breed\": [\"collie\", \"lhasa apso\"],\n...     },\n... )\n<Dog: Shep>\n>>> Dog.objects.annotate(\n...     first_breed=KT(\"data__breed__1\"), owner_name=KT(\"data__owner__name\")\n... ).filter(first_breed__startswith=\"lhasa\", owner_name=\"Bob\")\n<QuerySet [<Dog: Shep>]>\n```\n\n----------------------------------------\n\nTITLE: Removing Default Date and Time Format Constants in Django Forms\nDESCRIPTION: Constants for default date, time, and datetime input formats in django.forms.fields will be removed. Use django.utils.formats.get_format() to get appropriate formats.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_DATE_INPUT_FORMATS\nDEFAULT_TIME_INPUT_FORMATS\nDEFAULT_DATETIME_INPUT_FORMATS\n\n# Use instead:\ndjango.utils.formats.get_format()\n```\n\n----------------------------------------\n\nTITLE: Raising PermissionDenied in Django Views - Python\nDESCRIPTION: This snippet demonstrates how to raise a django.core.exceptions.PermissionDenied exception within a Django view to trigger a 403 Forbidden error response. It requires the Django framework and imports the PermissionDenied exception. The edit function checks if the requesting user is a staff member, and raises the exception if access should be denied. The main input is an HTTP request, and on access denial, a 403 response is returned by the framework.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/views.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import PermissionDenied\n\n\ndef edit(request, pk):\n    if not request.user.is_staff:\n        raise PermissionDenied\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Non-atomic Batch Migration Example\nDESCRIPTION: Demonstrates how to perform a non-atomic migration for large data sets using batched updates.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom django.db import migrations, transaction\n\ndef gen_uuid(apps, schema_editor):\n    MyModel = apps.get_model(\"myapp\", \"MyModel\")\n    while MyModel.objects.filter(uuid__isnull=True).exists():\n        with transaction.atomic():\n            for row in MyModel.objects.filter(uuid__isnull=True)[:1000]:\n                row.uuid = uuid.uuid4()\n                row.save()\n\nclass Migration(migrations.Migration):\n    atomic = False\n\n    operations = [\n        migrations.RunPython(gen_uuid),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Uploaded Files in Django\nDESCRIPTION: Defines the numeric mode (0o644 by default) applied to newly uploaded files. If None, behavior is OS-dependent. Does not apply to temporary files in FILE_UPLOAD_TEMP_DIR. Also affects default permissions for collected static files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nFILE_UPLOAD_PERMISSIONS = 0o644\n```\n\n----------------------------------------\n\nTITLE: Updating Context Stack Dynamically in Django (Python)\nDESCRIPTION: This code snippet demonstrates how to use the Django Context object as a stack, pushing and popping dictionaries and updating context data. It shows the use of update and pop methods to change and restore context variables, helpful for managing template context in nested scopes. Inputs are string key-value pairs; output depends on the context state. Requires Django's Context API.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Context()\n>>> c[\"foo\"] = \"first level\"\n>>> c.update({\"foo\": \"updated\"})\n{'foo': 'updated'}\n>>> c[\"foo\"]\n'updated'\n>>> c.pop()\n{'foo': 'updated'}\n>>> c[\"foo\"]\n'first level'\n```\n\n----------------------------------------\n\nTITLE: Spatial Lookup Examples in GeoDjango\nDESCRIPTION: Demonstrates spatial lookup queries using both geometry and raster fields with various filter conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = Zipcode.objects.filter(poly__contains=pnt)\n>>> qs = Elevation.objects.filter(poly__contains=rst)\n>>> qs = Elevation.objects.filter(rast__contains=geom)\n>>> qs = Elevation.objects.filter(rast__1__contains=(rst, 1))\n```\n\n----------------------------------------\n\nTITLE: Writing QUnit Tests for Django JavaScript\nDESCRIPTION: Example of a QUnit test module with beforeEach setup and two test cases demonstrating how to test button click behaviors. The module shows proper test structure with fixture setup and assertions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('magicTricks', {\n    beforeEach: function() {\n        const $ = django.jQuery;\n        $('#qunit-fixture').append('<button class=\"button\"></button>');\n    }\n});\n\nQUnit.test('removeOnClick removes button on click', function(assert) {\n    const $ = django.jQuery;\n    removeOnClick('.button');\n    assert.equal($('.button').length, 1);\n    $('.button').click();\n    assert.equal($('.button').length, 0);\n});\n\nQUnit.test('copyOnClick adds button on click', function(assert) {\n    const $ = django.jQuery;\n    copyOnClick('.button');\n    assert.equal($('.button').length, 1);\n    $('.button').click();\n    assert.equal($('.button').length, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring pyproject.toml for a Django App Package\nDESCRIPTION: Defines the pyproject.toml file for a Django app package. This file specifies build system requirements, project metadata, dependencies, and classifiers for the package.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"setuptools>=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"django-polls\"\nversion = \"0.1\"\ndependencies = [\n    \"django>=X.Y\",  # Replace \"X.Y\" as appropriate\n]\ndescription = \"A Django app to conduct web-based polls.\"\nreadme = \"README.rst\"\nrequires-python = \">= 3.12\"\nauthors = [\n    {name = \"Your Name\", email = \"yourname@example.com\"},\n]\nclassifiers = [\n    \"Environment :: Web Environment\",\n    \"Framework :: Django\",\n    \"Framework :: Django :: X.Y\",  # Replace \"X.Y\" as appropriate\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Internet :: WWW/HTTP\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n]\n\n[project.urls]\nHomepage = \"https://www.example.com/\"\n```\n\n----------------------------------------\n\nTITLE: Removing Support for Positional Args in format_html (Python)\nDESCRIPTION: Calling `django.utils.html.format_html()` without passing `args` or `kwargs` (relying only on positional arguments in the format string) is no longer supported and has been removed in Django 6.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nformat_html('<a href=\"{}\">{}</a>', url, text) # Correct usage\n```\n\n----------------------------------------\n\nTITLE: Caching i18n JavaScript Catalog View in Django\nDESCRIPTION: Shows how to implement server-side caching for the JavaScriptCatalog view to reduce CPU load when serving internationalized JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_page\nfrom django.views.i18n import JavaScriptCatalog\n\n# The value returned by get_version() must change when translations change.\nurlpatterns = [\n    path(\n        \"jsi18n/\",\n        cache_page(86400, key_prefix=\"jsi18n-%s\" % get_version())(\n            JavaScriptCatalog.as_view()\n        ),\n        name=\"javascript-catalog\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Template Blocks (Django)\nDESCRIPTION: Demonstrates the `{% filter %}` tag, which applies one or more template filters to the entire block of content enclosed between `{% filter %}` and `{% endfilter %}`. In this example, the text content is first forcefully escaped (`force_escape`) and then converted to lowercase (`lower`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_14\n\nLANGUAGE: html+django\nCODE:\n```\n{% filter force_escape|lower %}\n    This text will be HTML-escaped, and will appear in all lowercase.\n{% endfilter %}\n```\n\n----------------------------------------\n\nTITLE: Renaming the Default Django Model Manager in Python\nDESCRIPTION: Demonstrates how to rename the default 'objects' manager for a Django model. By defining a class attribute of type `models.Manager()` with a custom name ('people' in this case) on the 'Person' model, the default manager becomes accessible via 'Person.people' instead of 'Person.objects'. Accessing 'Person.objects' would raise an AttributeError.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    # ...\n    people = models.Manager()\n```\n\n----------------------------------------\n\nTITLE: Combining SearchVector Objects in Django Full Text Search\nDESCRIPTION: Demonstrates how to combine multiple SearchVector objects for more complex searches.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.annotate(\n...     search=SearchVector(\"body_text\") + SearchVector(\"blog__tagline\"),\n... ).filter(search=\"Cheese\")\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]\n```\n\n----------------------------------------\n\nTITLE: Parsing Datetimes with Django's parse_datetime\nDESCRIPTION: Converts a string to a datetime.datetime object, supporting UTC offsets that are converted to datetime.timezone instances. Returns None for badly formatted strings and raises ValueError for well-formatted but invalid datetimes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nparse_datetime(value)\n```\n\n----------------------------------------\n\nTITLE: Defining ArticleForm and formset_factory Usage - Django Forms - Python\nDESCRIPTION: Illustrates creation of a basic ArticleForm with title and pub_date fields, then uses Django's formset_factory to build an ArticleFormSet for managing multiple form instances. It demonstrates both the creation pattern and intended class structure within interactive Python environments. Use requires django.forms and the respective fields; no external dependencies except Django.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> class ArticleForm(Form):\n...     title = CharField()\n...     pub_date = DateField()\n...\n>>> ArticleFormSet = formset_factory(ArticleForm)\n```\n\n----------------------------------------\n\nTITLE: Customizing Paginator Error Messages in Python\nDESCRIPTION: This example illustrates how to customize the error messages raised by the Django `Paginator`. By passing a dictionary to the `error_messages` parameter during instantiation, specifically overriding the `no_results` key, the default `EmptyPage` exception message is replaced with a custom one when accessing a non-existent page. This requires importing `Paginator` from `django.core.paginator`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/paginator.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> paginator = Paginator(\n...     [1, 2, 3],\n...     2,\n...     error_messages={\"no_results\": \"Page does not exist\"},\n... )\n>>> paginator.page(5)\nTraceback (most recent call last):\n  ...\nEmptyPage: Page does not exist\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report for Django Tests\nDESCRIPTION: This command generates a report of the code coverage data collected from running Django tests with coverage.py.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncoverage report\n```\n\n----------------------------------------\n\nTITLE: Configuring the Cached Template Loader in Django\nDESCRIPTION: Shows how to set up the cached template loader with a list of other loaders to wrap, improving template rendering performance by caching compiled templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"OPTIONS\": {\n            \"loaders\": [\n                (\n                    \"django.template.loaders.cached.Loader\",\n                    [\n                        \"django.template.loaders.filesystem.Loader\",\n                        \"django.template.loaders.app_directories.Loader\",\n                        \"path.to.custom.Loader\",\n                    ],\n                ),\n            ],\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Translation with Computed Values in Django\nDESCRIPTION: Demonstrates how translation works on computed values in Django. The translation function is applied after joining words into a single string.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef my_view(request):\n    words = [\"Welcome\", \"to\", \"my\", \"site.\"]\n    output = _(\" \".join(words))\n    return HttpResponse(output)\n```\n\n----------------------------------------\n\nTITLE: Defining Model and Field Table Comments - Django ORM - Python\nDESCRIPTION: This snippet demonstrates how to use the new db_comment attribute introduced in Django 4.2 to add comments to both model fields and database tables via the Meta class. It shows two model classes (Question and Answer) that utilize db_comment on individual fields and db_table_comment for the table. Dependencies include Django 4.2+ and usage of django.db.models.Model and its Meta inner class. The parameters db_comment and db_table_comment specify human-readable notes for database schema documentation. Input consists of Python model definitions, and the output affects the generated SQL and database schema.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    text = models.TextField(db_comment=\"Poll question\")\n    pub_date = models.DateTimeField(\n        db_comment=\"Date and time when the question was published\",\n    )\n\n    class Meta:\n        db_table_comment = \"Poll questions\"\n\n\nclass Answer(models.Model):\n    question = models.ForeignKey(\n        Question,\n        on_delete=models.CASCADE,\n        db_comment=\"Reference to a question\",\n    )\n    answer = models.TextField(db_comment=\"Question answer\")\n\n    class Meta:\n        db_table_comment = \"Question answers\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All User Permissions with ModelBackend in Django (Python)\nDESCRIPTION: Returns the combined set of permission strings (user and group) for the `user_obj` via the `ModelBackend`. Returns an empty set if the user is anonymous or inactive (`is_active` is False). The asynchronous version `aget_all_permissions()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nget_all_permissions(user_obj, obj=None)\n```\n\nLANGUAGE: python\nCODE:\n```\naget_all_permissions(user_obj, obj=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Per-Site Cache Middleware\nDESCRIPTION: Configuration of Django's site-wide caching middleware showing the required middleware ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    \"django.middleware.cache.UpdateCacheMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.cache.FetchFromCacheMiddleware\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing GeoDjango Dependencies with Homebrew\nDESCRIPTION: Installs required PostgreSQL, PostGIS, GDAL, and libgeoip packages using Homebrew package manager.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install postgresql\n$ brew install postgis\n$ brew install gdal\n$ brew install libgeoip\n```\n\n----------------------------------------\n\nTITLE: Django Template Fragment Caching Example\nDESCRIPTION: Example of using the cache template tag to cache specific fragments of a template for a specified duration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_24\n\nLANGUAGE: django\nCODE:\n```\n{% load cache %}\n{% cache 500 sidebar %}\n    .. sidebar ..\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Converting to Specific Timezone\nDESCRIPTION: Shows how to convert a value to a specific timezone using the timezone template filter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{% load tz %}\n\n{{ value|timezone:\"Europe/Paris\" }}\n```\n\n----------------------------------------\n\nTITLE: Django Too Many Open Files Error Example\nDESCRIPTION: Example of the error that can occur when files aren't properly closed, especially when accessing file fields in a loop over many objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nOSError: [Errno 24] Too many open files\n```\n\n----------------------------------------\n\nTITLE: Importing Django Database Signal Module\nDESCRIPTION: Shows the import statement for Django's database backends module, which contains signals related to database operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import backends\n```\n\n----------------------------------------\n\nTITLE: Preventing Shared Cache in `ContentTypeManager` Instances in Django\nDESCRIPTION: Describes a fix (:ticket:`26286`) in Django 1.8.10 that prevents separate instances of `ContentTypeManager` from sharing the same cache. This ensures proper cache isolation between manager instances.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nContentTypeManager\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Arguments to Django Test Command\nDESCRIPTION: This class method allows adding custom arguments to the Django test management command. It uses the argparse.ArgumentParser to define new command-line options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef add_arguments(cls, parser):\n    # Override this method to add custom arguments\n    # Use parser.add_argument() to define new options\n```\n\n----------------------------------------\n\nTITLE: Writing Geometry Objects to WKT in Python using GEOS\nDESCRIPTION: Demonstrates how to use the WKTWriter class to convert a GEOSGeometry object to Well-Known Text (WKT) format.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import Point, WKTWriter\n>>> pnt = Point(1, 1)\n>>> wkt_w = WKTWriter()\n>>> wkt_w.write(pnt)\n'POINT (1.0000000000000000 1.0000000000000000)'\n```\n\n----------------------------------------\n\nTITLE: Including URLconf with Explicit Namespace in Django\nDESCRIPTION: Shows how to include a list of URL patterns with an explicit namespace using a tuple, allowing for more flexibility in namespace assignment.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\n\nfrom . import views\n\npolls_patterns = (\n    [\n        path(\"\", views.IndexView.as_view(), name=\"index\"),\n        path(\"<int:pk>/\", views.DetailView.as_view(), name=\"detail\"),\n    ],\n    \"polls\",\n)\n\nurlpatterns = [\n    path(\"polls/\", include(polls_patterns)),\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying opclasses for PostgreSQL Indexes with Django ORM (Python)\nDESCRIPTION: Shows how to associate specific PostgreSQL operator classes with model fields in an index by using the 'opclasses' keyword. This ensures the index will use the specified operator class for advanced indexing strategies like 'jsonb_path_ops' in a GIN index. 'name', 'fields', and 'opclasses' must all be provided and matched in length; limitations include that opclasses are ignored by other database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nGinIndex(name='json_index', fields=['jsonfield'], opclasses=['jsonb_path_ops'])\n```\n\n----------------------------------------\n\nTITLE: Using spaceless Tag in Django Templates\nDESCRIPTION: This snippet demonstrates the spaceless tag which removes whitespace between HTML tags, including tab characters and newlines. This example compresses a paragraph with a link into a more compact form.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_42\n\nLANGUAGE: html+django\nCODE:\n```\n{% spaceless %}\n    <p>\n        <a href=\"foo/\">Foo</a>\n    </p>\n{% endspaceless %}\n```\n\n----------------------------------------\n\nTITLE: Pluralized Contextual Translation with npgettext in JavaScript\nDESCRIPTION: Shows how to use the npgettext function for pluralized contextual translations in JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.write(npgettext('group', 'party', 1));\n// party\ndocument.write(npgettext('group', 'party', 2));\n// parties\n```\n\n----------------------------------------\n\nTITLE: Django ManyToMany Through Field Reference\nDESCRIPTION: Example of Django ManyToMany field reference syntax used in through_fields validation\nSOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nthrough_fields=['field1', 'field2']\n```\n\n----------------------------------------\n\nTITLE: Setting up Postgres.app Path on macOS\nDESCRIPTION: Adds Postgres.app binaries to the system PATH for command-line access.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/Applications/Postgres.app/Contents/Versions/X.Y/bin\n```\n\n----------------------------------------\n\nTITLE: Implementing NotEqual Lookup in Django\nDESCRIPTION: Creates a custom NotEqual lookup that generates SQL for inequality comparisons. It implements the as_sql method to produce the appropriate SQL statement and registers the lookup with all Field subclasses.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Lookup\n\n\nclass NotEqual(Lookup):\n    lookup_name = \"ne\"\n\n    def as_sql(self, compiler, connection):\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params\n        return \"%s <> %s\" % (lhs, rhs), params\n\nfrom django.db.models import Field\n\nField.register_lookup(NotEqual)\n```\n\n----------------------------------------\n\nTITLE: Using Aggregates in Subquery Expressions (Python)\nDESCRIPTION: Shows how to use aggregates within a Subquery expression to find posts where the post length is greater than the total length of all combined comments. It demonstrates the specific combination of filter, values, and annotate methods required.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import OuterRef, Subquery, Sum\ncomments = Comment.objects.filter(post=OuterRef(\"pk\")).order_by().values(\"post\")\ntotal_comments = comments.annotate(total=Sum(\"length\")).values(\"total\")\nPost.objects.filter(length__gt=Subquery(total_comments))\n```\n\n----------------------------------------\n\nTITLE: Installing Hypercorn for Django using pip\nDESCRIPTION: Command to install the Hypercorn ASGI server using pip. This is the prerequisite step before running a Django project with Hypercorn.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/hypercorn.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install hypercorn\n```\n\n----------------------------------------\n\nTITLE: Generating Cache Keys with get_cache_key\nDESCRIPTION: Creates a cache key based on the request path and registered headers. Returns None if no headerlist is stored, indicating the page needs to be rebuilt.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_cache_key(request, key_prefix=None, method='GET', cache=None)\n```\n\n----------------------------------------\n\nTITLE: HTML form for language selection in Django templates\nDESCRIPTION: A template code example showing how to create a language selection form that uses Django's set_language view to change the user's language preference.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_58\n\nLANGUAGE: html\nCODE:\n```\n{% load i18n %}\n\n<form action=\"{% url 'set_language' %}\" method=\"post\">{% csrf_token %}\n    <input name=\"next\" type=\"hidden\" value=\"{{ redirect_to }}\">\n    <select name=\"language\">\n        {% get_current_language as LANGUAGE_CODE %}\n        {% get_available_languages as LANGUAGES %}\n        {% get_language_info_list for LANGUAGES as languages %}\n        {% for language in languages %}\n            <option value=\"{{ language.code }}\"{% if language.code == LANGUAGE_CODE %} selected{% endif %}>\n                {{ language.name_local }} ({{ language.code }})\n            </option>\n        {% endfor %}\n    </select>\n    <input type=\"submit\" value=\"Go\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Django URL Configuration\nDESCRIPTION: URL pattern configuration update in Django urls.py to include the newly installed polls app URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path(\"polls/\", include(\"django_polls.urls\")),\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Django Aggregation Classes\nDESCRIPTION: Database aggregation classes that were fixed in Django 2.2.3 to properly handle the filter argument.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.3.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.Avg\ndjango.db.models.StdDev\ndjango.db.models.Variance\n```\n\n----------------------------------------\n\nTITLE: Generating SQL for Indexes on Session Table - Django Management Command - Shell\nDESCRIPTION: Demonstrates use of the Django management command to generate SQL for adding indexes to the sessions table. This script is run in the shell and is useful for projects upgrading to Django 1.3 that store sessions in the database and seek improved query performance. Requires an active Django project and manage.py script. The command outputs raw SQL that can be executed on the database to optimize session expiration queries.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py sqlindexes sessions\n```\n\n----------------------------------------\n\nTITLE: Calling Synchronous Functions from Async Views using sync_to_async in Python\nDESCRIPTION: Demonstrates wrapping a synchronous function (`sync_function`) using `asgiref.sync.sync_to_async` to allow it to be awaited within an asynchronous Django view or context. This is necessary when interacting with synchronous parts of Django or other libraries from async code, preventing `SynchronousOnlyOperation` errors. The `thread_sensitive=True` argument ensures the function runs in the same thread if necessary, preserving context for operations like database transactions (though async transactions are not yet supported).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import sync_to_async\n\nresults = await sync_to_async(sync_function, thread_sensitive=True)(pk=123)\n```\n\n----------------------------------------\n\nTITLE: Fixing Potential DoS Vulnerability in Django's uri_to_iri() Function\nDESCRIPTION: Addresses CVE-2023-41164, a security issue in django.utils.encoding.uri_to_iri() that could lead to a denial of service attack with inputs containing a large number of Unicode characters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.encoding.uri_to_iri()\n```\n\n----------------------------------------\n\nTITLE: Testing Django Check Command with ENABLE_ANALYTICS Setting\nDESCRIPTION: Tests the behavior of Django's check command when ENABLE_ANALYTICS setting is set to None. Verifies that the command outputs the expected warning message for deployment checks.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n        @override_settings(ENABLE_ANALYTICS=None)\n        def test_when_set_to_none(self):\n            stderr = StringIO()\n            call_command(\"check\", \"-t\", \"myapp\", \"--deploy\", stderr=stderr)\n            message = (\n                \"(myapp.W001) The ENABLE_ANALYTICS setting should be set \"\n                \"to True in deployment.\"\n            )\n            self.assertIn(message, stderr.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Django Debug Configuration Setting\nDESCRIPTION: Example of the debug setting that should be disabled in production to prevent access to the technical 500 debug page that contained the XSS vulnerability CVE-2017-12794.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.8.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDEBUG = True\n```\n\n----------------------------------------\n\nTITLE: Installing colorama for Windows Console Colors - DOS Console\nDESCRIPTION: This doscon command installs the colorama package using Python's pip utility on Windows. Colorama enables ANSI color codes for traditional cmd.exe, allowing Django management commands to display colored output. It requires Python to be installed and pip available; changes take effect after installation when running django-admin or manage.py in compatible terminals.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_27\n\nLANGUAGE: doscon\nCODE:\n```\n...\\> py -m pip install \\\"colorama >= 0.4.6\\\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ORM Window Function (RST)\nDESCRIPTION: This snippet references the `Window()` function/class from Django's ORM. It's mentioned in the context of fixing a regression in Django 5.1 that caused a crash when an empty sequence was passed to the `order_by` parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``Window()``\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tox Testing Environments\nDESCRIPTION: This command displays all the default testing environments configured in Django's tox.ini file, including Python version compatibility checks and code quality tools like Black and Flake8.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tox -l\npy3\nblack\nblacken-docs\nflake8>=3.7.0\ndocs\nisort>=5.1.0\n```\n\n----------------------------------------\n\nTITLE: Initializing SpatialReference Objects in Python\nDESCRIPTION: Shows various ways to initialize a `SpatialReference` object, representing a coordinate system. Initialization can be done using shorthand strings ('WGS84'), EPSG codes (integer 4326 or string 'EPSG:4326'), PROJ strings, or OGC Well Known Text (WKT).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_29\n\nLANGUAGE: pycon\nCODE:\n```\n>>> wgs84 = SpatialReference(\"WGS84\")  # shorthand string\n>>> wgs84 = SpatialReference(4326)  # EPSG code\n>>> wgs84 = SpatialReference(\"EPSG:4326\")  # EPSG string\n>>> proj = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs \"\n>>> wgs84 = SpatialReference(proj)  # PROJ string\n>>> wgs84 = SpatialReference(\n...     \"\"\"GEOGCS[\"WGS 84\",\n... DATUM[\"WGS_1984\",\n...      SPHEROID[\"WGS 84\",6378137,298.257223563,\n...          AUTHORITY[\"EPSG\",\"7030\"]],\n...      AUTHORITY[\"EPSG\",\"6326\"]],\n... PRIMEM[\"Greenwich\",0,\n...      AUTHORITY[\"EPSG\",\"8901\"]],\n...      AUTHORITY[\"EPSG\",\"4326\"]]]\"\"\"  # WKT string\n... )\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Keyword Arguments for Django Model Index\nDESCRIPTION: Shows the correct way to define a Django model index (`models.Index`) using keyword arguments (`fields=[\"headline\", \"-pub_date\"], name=\"index_name\"). This explicit syntax is required in Django 2.0+ for clarity and consistency.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmodels.Index(fields=[\"headline\", \"-pub_date\"], name=\"index_name\")\n```\n\n----------------------------------------\n\nTITLE: Removing DjangoDivFormRenderer Class (Python)\nDESCRIPTION: The transitional form renderer `DjangoDivFormRenderer`, deprecated in a previous version, has been removed in Django 6.0. Projects should use the default template-based form rendering or customize rendering as needed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nDjangoDivFormRenderer\n```\n\n----------------------------------------\n\nTITLE: Querying LogEntry Objects for Admin Additions in Python\nDESCRIPTION: Demonstrates how to filter LogEntry objects to get a list of all additions done through the admin interface. Uses the ADDITION constant from django.contrib.admin.models.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.admin.models import ADDITION, LogEntry\n\nLogEntry.objects.filter(action_flag=ADDITION)\n```\n\n----------------------------------------\n\nTITLE: Forcing Bytestring Conversion with force_bytes\nDESCRIPTION: Similar to smart_bytes, but resolves lazy instances to bytestrings rather than keeping them as lazy objects. Can optionally skip conversion of non-string-like objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nforce_bytes(s, encoding='utf-8', strings_only=False, errors='strict')\n```\n\n----------------------------------------\n\nTITLE: Using QuerySet.raw with Composite Primary Keys (Python)\nDESCRIPTION: The `QuerySet.raw()` method now supports executing raw SQL queries that return instances of models defined with a `django.db.models.CompositePrimaryKey`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.raw()\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.CompositePrimaryKey\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Database Tables After Django Upgrade\nDESCRIPTION: This script iterates through all models in a Django project and rebuilds their database tables. It's meant to be used after upgrading to Django 2.0 to recreate foreign keys with new definitions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.apps import apps\nfrom django.db import connection\n\nfor app in apps.get_app_configs():\n    for model in app.get_models(include_auto_created=True):\n        if model._meta.managed and not (model._meta.proxy or model._meta.swapped):\n            for base in model.__bases__:\n                if hasattr(base, \"_meta\"):\n                    base._meta.local_many_to_many = []\n            model._meta.local_many_to_many = []\n            with connection.schema_editor() as editor:\n                editor._remake_table(model)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Superuser\nDESCRIPTION: Shell command to create a PostgreSQL superuser.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ createuser --superuser <user_name>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression URL Pattern Configuration\nDESCRIPTION: URLconf example using regular expressions with re_path() for more complex URL pattern matching. Shows how to capture named groups for year, month, and slug values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, re_path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"articles/2003/\", views.special_case_2003),\n    re_path(r\"^articles/(?P<year>[0-9]{4})/$\", views.year_archive),\n    re_path(r\"^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$\", views.month_archive),\n    re_path(\n        r\"^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\\w-]+)/$\",\n        views.article_detail,\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Locale in Unix Environment\nDESCRIPTION: Shell command to set the LANG environment variable for UTF-8 support\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport LANG=\"en_US.UTF-8\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Settings\nDESCRIPTION: Configuration of Django TEMPLATES setting in settings.py to specify template directories and options for template loading.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [BASE_DIR / \"templates\"],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Lookups for Custom Model Fields (Django Python)\nDESCRIPTION: This snippet illustrates the replacement pattern for custom model fields that previously implemented `get_prep_lookup()` or `get_db_prep_lookup()`. Instead of overriding those methods on the field, define a custom `Lookup` class (e.g., `MyFieldExact` inheriting from `Exact`) implementing the necessary preparation logic in its `get_prep_lookup()` method, and then register this lookup with the custom field using `MyField.register_lookup(MyFieldExact)`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Field\nfrom django.db.models.lookups import Exact\n\n\nclass MyField(Field): ...\n\n\nclass MyFieldExact(Exact):\n    def get_prep_lookup(self):\n        # do_custom_stuff_for_myfield\n        ...\n\n\nMyField.register_lookup(MyFieldExact)\n```\n\n----------------------------------------\n\nTITLE: Processing Contact Form Data in Django View\nDESCRIPTION: Illustrates how to access and use validated form data from the cleaned_data dictionary to send an email based on form submissions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\n\nif form.is_valid():\n    subject = form.cleaned_data[\"subject\"]\n    message = form.cleaned_data[\"message\"]\n    sender = form.cleaned_data[\"sender\"]\n    cc_myself = form.cleaned_data[\"cc_myself\"]\n\n    recipients = [\"info@example.com\"]\n    if cc_myself:\n        recipients.append(sender)\n\n    send_mail(subject, message, sender, recipients)\n    return HttpResponseRedirect(\"/thanks/\")\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Django Template Tag Libraries Simultaneously\nDESCRIPTION: Shows the syntax for loading multiple custom template tag and filter libraries in Django using a single `{% load %}` tag. Library names are separated by spaces. This example loads both the `humanize` and `i18n` (internationalization) libraries, making tags and filters from both available in the current template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_30\n\nLANGUAGE: html+django\nCODE:\n```\n{% load humanize i18n %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Queryset for Model Formset in Python\nDESCRIPTION: Demonstrates how to override the default queryset used by a model formset, either by passing a queryset argument or by creating a custom formset class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> formset = AuthorFormSet(queryset=Author.objects.filter(name__startswith=\"O\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import BaseModelFormSet\nfrom myapp.models import Author\n\n\nclass BaseAuthorFormSet(BaseModelFormSet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.queryset = Author.objects.filter(name__startswith=\"O\")\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> AuthorFormSet = modelformset_factory(\n...     Author, fields=[\"name\", \"title\"], formset=BaseAuthorFormSet\n... )\n```\n\n----------------------------------------\n\nTITLE: Template Debug Information Dictionary Structure in Python\nDESCRIPTION: An example of the template_debug dictionary structure used for providing contextual line information in custom Django template engines. This structure helps display detailed error information in the Django debug page.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-backend.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"name\": \"/path/to/template.html\",\n    \"message\": \"Invalid block tag: 'syntax'\",\n    \"source_lines\": [\n        (1, \"some\\n\"),\n        (2, \"lines\\n\"),\n        (3, \"before\\n\"),\n        (4, \"Hello {% syntax error %} {{ world }}\\n\"),\n        (5, \"some\\n\"),\n        (6, \"lines\\n\"),\n        (7, \"after\\n\"),\n        (8, \"\"),\n    ],\n    \"line\": 4,\n    \"before\": \"Hello \",\n    \"during\": \"{% syntax error %}\",\n    \"after\": \" {{ world }}\\n\",\n    \"total\": 9,\n    \"bottom\": 9,\n    \"top\": 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Admin Editing in Django 1.0 (Python)\nDESCRIPTION: This snippet demonstrates the new method (Django 1.0) for defining inline editing in the admin interface, using `admin.py`. An inline class (`ChildInline`) inheriting from `admin.StackedInline` (or `admin.TabularInline`) is defined, specifying the model and `extra` count. This inline class is then added to the `inlines` list of the parent model's `ModelAdmin` class (`ParentAdmin`).\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ChildInline(admin.StackedInline):\n    model = Child\n    extra = 3\n\n\nclass ParentAdmin(admin.ModelAdmin):\n    model = Parent\n    inlines = [ChildInline]\n\n\nadmin.site.register(Parent, ParentAdmin)\n```\n\n----------------------------------------\n\nTITLE: Custom Django Field with Customizable Parameters\nDESCRIPTION: Implementation of a CommaSepField that stores lists as comma-separated values. The deconstruct method properly handles the custom separator parameter to ensure correct migration serialization.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass CommaSepField(models.Field):\n    \"Implements comma-separated storage of lists\"\n\n    def __init__(self, separator=\",\", *args, **kwargs):\n        self.separator = separator\n        super().__init__(*args, **kwargs)\n\n    def deconstruct(self):\n        name, path, args, kwargs = super().deconstruct()\n        # Only include kwarg if it's not the default\n        if self.separator != \",\":\n            kwargs[\"separator\"] = self.separator\n        return name, path, args, kwargs\n```\n\n----------------------------------------\n\nTITLE: Database Connection Check in RunPython Migration\nDESCRIPTION: Shows how to check database connection alias in a RunPython operation to run migrations selectively on specific databases.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\ndef forwards(apps, schema_editor):\n    if schema_editor.connection.alias != \"default\":\n        return\n    # Your migration code goes here\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        # Dependencies to other migrations\n    ]\n\n    operations = [\n        migrations.RunPython(forwards),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Template Block vs Include Performance Note\nDESCRIPTION: Demonstrates the performance difference between Django template block and include tags. Using {% block %} is noted to be faster than {% include %}.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% block %} <!-- Faster --> {% endblock %}\n{% include 'template.html' %} <!-- Slower -->\n```\n\n----------------------------------------\n\nTITLE: Declaring Django File Handling Module in reStructuredText\nDESCRIPTION: This snippet declares the Django file handling module using reStructuredText directives. It specifies the module name and provides a brief synopsis of its functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. module:: django.core.files\n   :synopsis: File handling and storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Template Engine Directories in Settings (Python)\nDESCRIPTION: This snippet configures the Django TEMPLATES setting to load template files from the 'templates' subdirectory of each installed application. It adds a dictionary with the required BACKEND class and enables APP_DIRS for template discovery. The TEMPLATES setting is a list of dictionaries for each template engine; key parameters are BACKEND and APP_DIRS. Input: none directly; Output: allows automatic loading of templates from app-specific directories.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"APP_DIRS\": True,\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Behavior of Initial Values in Bound Django Forms\nDESCRIPTION: Demonstrates that providing data when instantiating a Django `Form` makes it bound. In a bound form, the provided data is used for rendering and validation, and any `initial` values set on the fields are ignored. Validation errors are included in the HTML output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField()\n...     url = forms.URLField()\n...     comment = forms.CharField()\n...\n>>> default_data = {\"name\": \"Your name\", \"url\": \"https://\"}\n>>> f = CommentForm(default_data, auto_id=False)\n>>> print(f)\n<div>Name:\n  <input type=\"text\" name=\"name\" value=\"Your name\" required>\n</div>\n<div>Url:\n  <ul class=\"errorlist\"><li>Enter a valid URL.</li></ul>\n  <input type=\"url\" name=\"url\" value=\"https://\" required aria-invalid=\"true\">\n</div>\n<div>Comment:\n  <ul class=\"errorlist\"><li>This field is required.</li></ul>\n  <input type=\"text\" name=\"comment\" required aria-invalid=\"true\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing and Setting Session Cookies in Django View\nDESCRIPTION: This snippet demonstrates how to test if cookies are enabled, set a test cookie, and handle login functionality in a Django view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n\ndef login(request):\n    if request.method == \"POST\":\n        if request.session.test_cookie_worked():\n            request.session.delete_test_cookie()\n            return HttpResponse(\"You're logged in.\")\n        else:\n            return HttpResponse(\"Please enable cookies and try again.\")\n    request.session.set_test_cookie()\n    return render(request, \"foo/login_form.html\")\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Spatially Containing Geometry in Django\nDESCRIPTION: Demonstrates using the contains spatial lookup to filter Zipcode objects whose polygon spatially contains a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__contains=geom)\n```\n\n----------------------------------------\n\nTITLE: Handling Geometry Fields in Raw SQL Queries (Python)\nDESCRIPTION: Provides guidance on performing raw SQL queries involving geometry fields in GeoDjango. It highlights the need to wrap the geometry field name using `connection.ops.select` to ensure the database returns the geometry in a format GEOS can understand. Requires `django.db.connection` or `connections` and a relevant model (e.g., `City`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_16\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db import connection\n>>> # or if you're querying a non-default database:\n>>> from django.db import connections\n>>> connection = connections[\"your_gis_db_alias\"]\n>>> City.objects.raw(\n...     \"SELECT id, name, %s as point from myapp_city\" % (connection.ops.select % \"point\")\n... )\n```\n\n----------------------------------------\n\nTITLE: M2M Relationship Modification Example\nDESCRIPTION: Demonstrates adding a topping to a pizza through the many-to-many relationship and shows the resulting signal arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Pizza.objects.create(...)\n>>> t = Topping.objects.create(...)\n>>> p.toppings.add(t)\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt Support for Django (Bash)\nDESCRIPTION: Command to install the `bcrypt` library, necessary for using the bcrypt password hashing algorithm with Django. Using `django[bcrypt]` ensures compatibility with Django's specified version.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install django[bcrypt]\n```\n\n----------------------------------------\n\nTITLE: Defining DiscoverRunner Attributes in Python\nDESCRIPTION: This snippet shows the definition of key attributes for the DiscoverRunner class, including test_suite, test_runner, and test_loader. These attributes determine how tests are collected, executed, and reported.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass DiscoverRunner:\n    test_suite = unittest.TestSuite\n    test_runner = unittest.TextTestRunner\n    test_loader = unittest.defaultTestLoader\n```\n\n----------------------------------------\n\nTITLE: Accessing and Creating Storage Backends with Django storages API in Python\nDESCRIPTION: This code snippet demonstrates how to access the dictionary of available storage backend definitions and how to instantiate a custom storage backend using Django's storages API. The snippet relies on the django.core.files.storage module and presumes the project has a properly configured STORAGES setting. Inputs include a storage alias or a backend dictionary, and the output is a storage instance suitable for storing files in tests or other scenarios. It is intended for developers who need dynamic storage instantiation and examination, especially in third-party or testing contexts.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/storage.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.files.storage import storages\n>>> storages.backends\n{'default': {'BACKEND': 'django.core.files.storage.FileSystemStorage'},\n 'staticfiles': {'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage'},\n 'custom': {'BACKEND': 'package.storage.CustomStorage'}}\n>>> storage_instance = storages.create_storage({\"BACKEND\": \"package.storage.CustomStorage\"})\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Memory Size for File Uploads in Django\nDESCRIPTION: Specifies the maximum size (in bytes, default 2.5MB) an uploaded file can reach before being streamed to the filesystem instead of being held in memory.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nFILE_UPLOAD_MAX_MEMORY_SIZE = 2621440\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Django Async Safety\nDESCRIPTION: Configuration option to disable the async-safety mechanism in Django 3.0.1 using the DJANGO_ALLOW_ASYNC_UNSAFE environment variable. This fix restores Django functionality in Jupyter and other async environments.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDJANGO_ALLOW_ASYNC_UNSAFE\n```\n\n----------------------------------------\n\nTITLE: Deprecating PostgreSQL-Specific StringAgg Class (Python/SQL)\nDESCRIPTION: The PostgreSQL-specific `StringAgg` class (likely referring to `django.contrib.postgres.aggregates.StringAgg`) is deprecated. Use the generally available `django.db.models.StringAgg` instead for cross-database compatibility.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nStringAgg\n```\n\n----------------------------------------\n\nTITLE: Filtering Inline Instances in Django ModelAdmin\nDESCRIPTION: This method filters inline instances in the admin interface, hiding a specific inline (MyInline) in the add view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\ndef get_formsets_with_inlines(self, request, obj=None):\n    for inline in self.get_inline_instances(request, obj):\n        # hide MyInline in the add view\n        if not isinstance(inline, MyInline) or obj is not None:\n            yield inline.get_formset(request, obj), inline\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests with Python Warnings\nDESCRIPTION: Command to run Django tests with warning flags enabled to display deprecation warnings that might be normally hidden. This helps identify areas of code that need to be updated before an upgrade.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -Wa manage.py test\n```\n\n----------------------------------------\n\nTITLE: Updating Signal Handling in Django 1.0\nDESCRIPTION: Code changes required to update signal handling from Django 0.96 to 1.0, including modifying callback signatures and using the new Signal class methods.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef callback(sender)\n\nsig = object()\ndispatcher.connect(callback, sig)\ndispatcher.send(sig, sender)\ndispatcher.connect(callback, sig, sender=Any)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef callback(sender, **kwargs)\n\nsig = django.dispatch.Signal()\nsig.connect(callback)\nsig.send(sender)\nsig.connect(callback, sender=None)\n```\n\n----------------------------------------\n\nTITLE: Restoring URL Reversing for Partial Views in Django 1.4.12\nDESCRIPTION: This snippet highlights the restoration of the ability to use reverse() on views created with functools.partial(). It addresses a regression from the previous security release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.12.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nreverse()\n```\n\nLANGUAGE: Python\nCODE:\n```\nfunctools.partial()\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Validation in Django 1.9\nDESCRIPTION: Example configuration for Django's password validation using the AUTH_PASSWORD_VALIDATORS setting. This setup enables basic password validation including checks for similarity to user attributes, minimum length, common passwords, and numeric-only passwords.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Hasher in Django Settings (Python)\nDESCRIPTION: Shows how to configure Django to use a custom password hasher (like the `MyPBKDF2PasswordHasher` from the previous example) by adding its full Python path as the first element in the `PASSWORD_HASHERS` list in the settings file.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Users After Authentication in Django (Python)\nDESCRIPTION: A method called by `RemoteUserBackend` immediately after fetching or creating a user during authentication. It allows for custom configuration of the user object (e.g., setting group memberships based on LDAP attributes). Receives the `request` (optional), the `user` object, and a boolean `created` indicating if the user was just created. Returns the configured user object. `aconfigure_user` is called from async contexts, `configure_user` from sync.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nconfigure_user(request, user, created=True)\n```\n\nLANGUAGE: python\nCODE:\n```\naconfigure_user(request, user, created=True)\n```\n\n----------------------------------------\n\nTITLE: Using QuerySet intersection method in Django\nDESCRIPTION: Demonstrates how to use the INTERSECT SQL operator through Django's QuerySet.intersection() method to return shared elements between multiple QuerySets.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> qs1.intersection(qs2, qs3)\n```\n\n----------------------------------------\n\nTITLE: Using email.utils.formataddr for Email Formatting (Python)\nDESCRIPTION: Recommends using Python's built-in `email.utils.formataddr` function for programmatically constructing email address strings that include names, ensuring correct formatting for Django settings or email headers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nemail.utils.formataddr(('Name', 'user@example.com'))\n```\n\n----------------------------------------\n\nTITLE: Testing with Multiple Host Names in Django\nDESCRIPTION: This snippet shows how to test a Django application that uses multiple host names. It demonstrates using the @override_settings decorator to modify the ALLOWED_HOSTS setting for a specific test.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase, override_settings\n\n\nclass MultiDomainTestCase(TestCase):\n    @override_settings(ALLOWED_HOSTS=[\"otherserver\"])\n    def test_other_domain(self):\n        response = self.client.get(\"http://otherserver/foo/bar/\")\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Output with Required/Custom Label Classes using Django Forms - Python\nDESCRIPTION: Shows Python REPL usage for inspecting a Django Form instance's HTML rendering output, focusing on the presence of 'required' CSS classes in div and label elements. Also demonstrates using BoundField.label_tag() and BoundField.legend_tag() with additional attributes. Assumes the existence of a ContactForm and relevant field definitions. Inputs are bound form data and field names; outputs include HTML fragments that integrate the specified class attributes. Useful for visually confirming frontend behaviors tied to form validation and required states in Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(data)\n>>> print(f)\n<div class=\"required\"><label for=\"id_subject\" class=\"required\">Subject:</label> ...\n<div class=\"required\"><label for=\"id_message\" class=\"required\">Message:</label> ...\n<div class=\"required\"><label for=\"id_sender\" class=\"required\">Sender:</label> ...\n<div><label for=\"id_cc_myself\">Cc myself:</label> ...\n>>> f[\"subject\"].label_tag()\n<label class=\"required\" for=\"id_subject\">Subject:</label>\n>>> f[\"subject\"].legend_tag()\n<legend class=\"required\" for=\"id_subject\">Subject:</legend>\n>>> f[\"subject\"].label_tag(attrs={\"class\": \"foo\"})\n<label for=\"id_subject\" class=\"foo required\">Subject:</label>\n>>> f[\"subject\"].legend_tag(attrs={\"class\": \"foo\"})\n<legend for=\"id_subject\" class=\"foo required\">Subject:</legend>\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ModelAdmin Attribute in Release Notes\nDESCRIPTION: Code reference to a Django ModelAdmin attribute that was crashing when invalid UUIDs were entered.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n``ModelAdmin.raw_id_fields``\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Transaction Mode in Django Database OPTIONS - Python\nDESCRIPTION: Demonstrates configuring SQLite transaction behavior in Django by specifying \"transaction_mode\" under OPTIONS. Supports \"DEFERRED\", \"IMMEDIATE\", or \"EXCLUSIVE\" transaction modes, affecting concurrency and locking. Prerequisite: Django project with SQLite backend. Input: transaction_mode string. Output: Database connections engage transactions with the defined mode. Note: Using \"IMMEDIATE\" or \"EXCLUSIVE\" may require shorter transactions and is incompatible with ATOMIC_REQUESTS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n\"OPTIONS\": {\n    # ...\n    \"transaction_mode\": \"IMMEDIATE\",\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Date List in Django Template - HTML+Django\nDESCRIPTION: This HTML+Django template snippet demonstrates how to iterate over a `date_list` in reversed order within a for loop. This approach can be used in archives or listings where dates should be presented from newest to oldest. The context expects an iterable `date_list`, and the `reversed` keyword causes the loop to traverse the sequence in reverse. The template tag `{% for date in date_list reversed %}` outputs each date according to its respective template block logic. No additional dependencies are required beyond Django's template engine.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% for date in date_list reversed %}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing KeyTransform() for JSONField and HStoreField in Django\nDESCRIPTION: This bugfix addresses a crash in KeyTransform() when used with django.contrib.postgres.fields.JSONField and HStoreField on expressions with params. The issue was tracked under ticket #30672.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.24.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nKeyTransform()\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.postgres.fields.JSONField\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.postgres.fields.HStoreField\n```\n\n----------------------------------------\n\nTITLE: Using intword Filter in Django Template\nDESCRIPTION: Demonstrates the intword filter, which converts large numbers to friendly text representations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{{ 1000000|intword }} becomes 1.0 million.\n{{ 1200000|intword }} becomes 1.2 million.\n{{ 1200000000|intword }} becomes 1.2 billion.\n{{ -1200000000|intword }} becomes -1.2 billion.\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic Django Template Structure and Syntax in HTML+Django\nDESCRIPTION: This snippet demonstrates a minimal Django template. It uses `{% extends %}` for template inheritance, `{% block %}` to define replaceable sections (`title` and `content`), displays variables like `{{ section.title }}`, iterates over `story_list` using `{% for %}`, accesses object attributes (`story.get_absolute_url`, `story.headline`, `story.tease`), and applies filters (`|upper`, `|truncatewords:\":100\"`). This structure requires context variables like `section` and `story_list` to be passed during rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base_generic.html\" %}\n\n{% block title %}{{ section.title }}{% endblock %}\n\n{% block content %}\n<h1>{{ section.title }}</h1>\n\n{% for story in story_list %}\n<h2>\n  <a href=\"{{ story.get_absolute_url }}\">\n    {{ story.headline|upper }}\n  </a>\n</h2>\n<p>{{ story.tease|truncatewords:\"100\" }}</p>\n{% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Pickling and Unpickling a Django QuerySet's Query Attribute in Python\nDESCRIPTION: Demonstrates how to pickle only the query definition (not the results) by pickling the QuerySet's `query` attribute. This pickled state can be loaded later and assigned to a new QuerySet's `query` attribute to recreate the original query without hitting the database during unpickling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import pickle\n>>> query = pickle.loads(s)  # Assuming 's' is the pickled string.\n>>> qs = MyModel.objects.all()\n>>> qs.query = query  # Restore the original 'query'.\n```\n\n----------------------------------------\n\nTITLE: Updating Django Admin Command Syntax in Bash\nDESCRIPTION: Command-line examples showing the syntax change for django-admin.py in Django 1.0, where subcommands must now precede options rather than follow them.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ django-admin.py --settings=foo.bar runserver\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ django-admin.py runserver --settings=foo.bar\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Django Templates\nDESCRIPTION: Examples of using the 'perms' context variable in Django templates to check for various user permissions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n{% if perms.foo %}\n    <p>You have permission to do something in the foo app.</p>\n    {% if perms.foo.add_vote %}\n        <p>You can vote!</p>\n    {% endif %}\n    {% if perms.foo.add_driving %}\n        <p>You can drive!</p>\n    {% endif %}\n{% else %}\n    <p>You don't have permission to do anything in the foo app.</p>\n{% endif %}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% if 'foo' in perms %}\n    {% if 'foo.add_vote' in perms %}\n        <p>In lookup works, too.</p>\n    {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Handling Timezone Formats in Database Functions\nDESCRIPTION: Shows how database functions now handle datetime.timezone formats created using datetime.timedelta instances, outputting UTC offset strings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntimezone(timedelta(hours=5))\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Context to Feed Templates in Django\nDESCRIPTION: This snippet demonstrates how to add custom context data to feed templates by overriding the get_context_data() method in a Feed subclass. It allows passing additional information to title and description templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom mysite.models import Article\nfrom django.contrib.syndication.views import Feed\n\n\nclass ArticlesFeed(Feed):\n    title = \"My articles\"\n    description_template = \"feeds/articles.html\"\n\n    def items(self):\n        return Article.objects.order_by(\"-pub_date\")[:5]\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"foo\"] = \"bar\"\n        return context\n```\n\n----------------------------------------\n\nTITLE: Creating Raster Models in GeoDjango\nDESCRIPTION: Example of creating and saving models with raster fields using file paths and GDALRaster objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from elevation.models import Elevation\n>>> dem = Elevation(name=\"Volcano\", rast=\"/path/to/raster/volcano.tif\")\n>>> dem.save()\n```\n\n----------------------------------------\n\nTITLE: Custom Signal Definition in Django\nDESCRIPTION: Example showing how to define a custom signal for application-specific events.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport django.dispatch\n\npizza_done = django.dispatch.Signal()\n```\n\n----------------------------------------\n\nTITLE: Using RedisCache Backend in Django\nDESCRIPTION: The RedisCache backend in Django is used for caching with Redis. A bug in Django 4.0 that caused a crash when handling boolean values has been fixed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRedisCache\n```\n\n----------------------------------------\n\nTITLE: Registering a Django Template Tag via Decorator with Name (Python)\nDESCRIPTION: This Python snippet shows an alternative method for registering a Django template tag using the `@register.tag` decorator. The `name` argument explicitly sets the tag's name in the template to 'current_time'. The decorated function `do_current_time` is the compilation function for the tag.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n@register.tag(name=\"current_time\")\ndef do_current_time(parser, token): ...\n```\n\n----------------------------------------\n\nTITLE: Creating GeoDjango User and Database in PostgreSQL\nDESCRIPTION: SQL commands to create a new user and database for GeoDjango. These commands are typically executed as the postgres superuser to set up the initial database environment.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/postgis.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npostgres# CREATE USER geodjango PASSWORD 'my_passwd';\npostgres# CREATE DATABASE geodjango OWNER geodjango;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Exception Reporter in Django\nDESCRIPTION: Defines the default exception reporter class ('django.views.debug.ExceptionReporter') used when no specific reporter is assigned to an HttpRequest instance. This is relevant for custom error reporting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_EXCEPTION_REPORTER = 'django.views.debug.ExceptionReporter'\n```\n\n----------------------------------------\n\nTITLE: Has_any_keys Lookup for JSONField in Django\nDESCRIPTION: Demonstrates the has_any_keys lookup which returns objects where any of the given keys exist in the top-level of the JSONField data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\n<Dog: Rufus>\n>>> Dog.objects.create(name=\"Meg\", data={\"owner\": \"Bob\"})\n<Dog: Meg>\n>>> Dog.objects.filter(data__has_any_keys=[\"owner\", \"breed\"])\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Filesystem Cache Backend\nDESCRIPTION: Configuration example for Django's filesystem cache backend with a 60 second timeout and 1000 item capacity limit.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"/var/tmp/django_cache\",\n        \"TIMEOUT\": 60,\n        \"OPTIONS\": {\"MAX_ENTRIES\": 1000},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-1.2 Django Database Settings (Python)\nDESCRIPTION: This snippet shows the old method (pre-Django 1.2) of defining database connection parameters using individual `DATABASE_*` settings directly in the `settings.py` file. This format is deprecated from Django 1.2 onwards and will be removed in Django 1.4.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_NAME = \"test_db\"\nDATABASE_ENGINE = \"postgresql_psycopg2\"\nDATABASE_USER = \"myusername\"\nDATABASE_PASSWORD = \"s3krit\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Django Migration Operation Template\nDESCRIPTION: Template showing the basic structure and required methods for creating a custom Django migration operation. Includes initialization, state management, database operations, and descriptive methods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.migrations.operations.base import Operation\n\n\nclass MyCustomOperation(Operation):\n    # If this is False, it means that this operation will be ignored by\n    # sqlmigrate; if true, it will be run and the SQL collected for its output.\n    reduces_to_sql = False\n\n    # If this is False, Django will refuse to reverse past this operation.\n    reversible = False\n\n    # This categorizes the operation. The corresponding symbol will be\n    # displayed by the makemigrations command.\n    category = OperationCategory.ADDITION\n\n    def __init__(self, arg1, arg2):\n        # Operations are usually instantiated with arguments in migration\n        # files. Store the values of them on self for later use.\n        pass\n\n    def state_forwards(self, app_label, state):\n        # The Operation should take the 'state' parameter (an instance of\n        # django.db.migrations.state.ProjectState) and mutate it to match\n        # any schema changes that have occurred.\n        pass\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        # The Operation should use schema_editor to apply any changes it\n        # wants to make to the database.\n        pass\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        # If reversible is True, this is called when the operation is reversed.\n        pass\n\n    def describe(self):\n        # This is used to describe what the operation does.\n        return \"Custom Operation\"\n\n    @property\n    def migration_name_fragment(self):\n        # Optional. A filename part suitable for automatically naming a\n        # migration containing this operation, or None if not applicable.\n        return \"custom_operation_%s_%s\" % (self.arg1, self.arg2)\n```\n\n----------------------------------------\n\nTITLE: Creating a UniqueConstraint with Included Columns (Covering Index) in Python\nDESCRIPTION: Illustrates how to add non-key columns to a `UniqueConstraint` using the `include` parameter, creating a covering index. This can improve query performance by allowing index-only scans. This example includes 'full_name' in the index defined on 'room' and 'date'. This feature is primarily supported by PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import UniqueConstraint\n\nUniqueConstraint(name=\"unique_booking\", fields=[\"room\", \"date\"], include=[\"full_name\"])\n```\n\n----------------------------------------\n\nTITLE: Defining FormView Class in Django\nDESCRIPTION: Displays a form, handles form submission, and processes form data. Provides form handling functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass FormView():\n    # Attributes\n    content_type\n    extra_context\n    form_class\n    http_method_names\n    initial\n    prefix\n    response_class\n    success_url\n    template_engine\n    template_name\n\n    # Methods\n    as_view()\n    dispatch()\n    form_invalid()\n    form_valid()\n    get()\n    get_context_data()\n    get_form()\n    get_form_kwargs()\n    http_method_not_allowed()\n    post()\n    put()\n    setup()\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Classes in Django ModelForm\nDESCRIPTION: This snippet demonstrates how to use custom field classes in a Django ModelForm. It uses the field_classes attribute of the Meta class to specify a custom form field class for the 'slug' field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import ModelForm\nfrom myapp.models import Article\n\n\nclass ArticleForm(ModelForm):\n    class Meta:\n        model = Article\n        fields = [\"pub_date\", \"headline\", \"content\", \"reporter\", \"slug\"]\n        field_classes = {\n            \"slug\": MySlugFormField,\n        }\n```\n\n----------------------------------------\n\nTITLE: CSV Template for Django's Template System\nDESCRIPTION: A Django template that iterates over data rows and formats them as CSV. It uses the addslashes filter to handle quotes properly in the output.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% for row in data %}\"{{ row.0|addslashes }}\", \"{{ row.1|addslashes }}\", \"{{ row.2|addslashes }}\", \"{{ row.3|addslashes }}\", \"{{ row.4|addslashes }}\"\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Django Test Client with CSRF Checks - Python\nDESCRIPTION: Example of creating a test client instance with CSRF checks enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.test import Client\n>>> csrf_client = Client(enforce_csrf_checks=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Proxy SSL Header in Django Settings\nDESCRIPTION: Shows the Django setting used to configure the SSL header for secure proxy. This setting is now respected by HttpRequest.scheme for both HTTP and HTTPS requests.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSECURE_PROXY_SSL_HEADER\n```\n\n----------------------------------------\n\nTITLE: Signal Connection Using Decorator in Django\nDESCRIPTION: Example showing how to connect a signal receiver using the @receiver decorator pattern.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signals.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.signals import request_finished\nfrom django.dispatch import receiver\n\n\n@receiver(request_finished)\ndef my_callback(sender, **kwargs):\n    print(\"Request finished!\")\n```\n\n----------------------------------------\n\nTITLE: Iterating and Displaying Errors in Django Template\nDESCRIPTION: This snippet uses a Django template for loop to iterate over an 'errors' list and display each error as a bullet point. It's commonly used in form validation or error handling sections of Django templates.\nSOURCE: https://github.com/django/django/blob/main/django/forms/templates/django/forms/errors/list/text.txt#2025-04-23_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% for error in errors %}* {{ error }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Applying method_decorator to Authentication Decorators\nDESCRIPTION: Updated code showing the correct way to apply authentication decorators to class methods using method_decorator in Django 1.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.decorators import method_decorator\n\n\nclass MyClass(object):\n    @method_decorator(login_required)\n    def my_view(self, request):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Example Output: Sorted List of Tuples by Index after Dictsort - Python\nDESCRIPTION: Illustrates the expected result after applying the 'dictsort' filter to sort the list of tuples by the first item (index 0). No additional context required. Used for the Django template example above.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n[\n    (\"a\", \"42\"),\n    (\"b\", \"foo\"),\n    (\"c\", \"string\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Storage in Django\nDESCRIPTION: Shows how to access a custom storage that has been configured in the STORAGES setting using its alias from the storages dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-file-storage.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.storage import storages\n\nexample_storage = storages[\"example\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Feed Class in GeoDjango\nDESCRIPTION: This snippet demonstrates how to create a custom Feed class in GeoDjango, showing different ways to define geometry and item_geometry methods. These methods can be defined as class attributes, functions without arguments, or functions with a single argument.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/feeds.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis.feeds import Feed\n\n\nclass MyFeed(Feed):\n    # First, as a class attribute.\n    geometry = ...\n    item_geometry = ...\n\n    # Also a function with no arguments\n    def geometry(self): ...\n\n    def item_geometry(self): ...\n\n    # And as a function with a single argument\n    def geometry(self, obj): ...\n\n    def item_geometry(self, item): ...\n```\n\n----------------------------------------\n\nTITLE: Django Debug Template Implementation\nDESCRIPTION: A comprehensive template that renders debug information including exception details, traceback, request data, and Django configuration. This template is used by Django's debug page when DEBUG=True to provide detailed error information for developers.\nSOURCE: https://github.com/django/django/blob/main/django/views/templates/technical_500.txt#2025-04-23_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% firstof exception_type 'Report' %}{% if request %} at {{ request.path_info }}{% endif %}\n{% firstof exception_value 'No exception message supplied' %}\n{% if request %}\nRequest Method: {{ request.META.REQUEST_METHOD }}\nRequest URL: {{ request_insecure_uri }}{% endif %}\nDjango Version: {{ django_version_info }}\nPython Executable: {{ sys_executable }}\nPython Version: {{ sys_version_info }}\nPython Path: {{ sys_path }}\nServer time: {{server_time|date:\"r\"}}\nInstalled Applications:\n{{ settings.INSTALLED_APPS|pprint }}\nInstalled Middleware:\n{{ settings.MIDDLEWARE|pprint }}\n{% if template_does_not_exist %}Template loader postmortem\n{% if postmortem %}Django tried loading these templates, in this order:\n{% for entry in postmortem %}\nUsing engine {{ entry.backend.name }}:\n{% if entry.tried %}{% for attempt in entry.tried %}    * {{ attempt.0.loader_name }}: {{ attempt.0.name }} ({{ attempt.1 }})\n{% endfor %}{% else %}    This engine did not provide a list of tried templates.\n{% endif %}{% endfor %}\n{% else %}No templates were found because your 'TEMPLATES' setting is not configured.\n{% endif %}\n{% endif %}{% if template_info %}\nTemplate error:\nIn template {{ template_info.name }}, error at line {{ template_info.line }}\n   {{ template_info.message }}\n{% for source_line in template_info.source_lines %}{% if source_line.0 == template_info.line %}   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}{% else %}   {{ source_line.0 }} : {{ source_line.1 }}{% endif %}{% endfor %}{% endif %}{% if frames %}\n\nTraceback (most recent call last):\n{% for frame in frames %}{% ifchanged frame.exc_cause %}{% if frame.exc_cause %}\n{% if frame.exc_cause_explicit %}The above exception ({{ frame.exc_cause }}) was the direct cause of the following exception:{% else %}During handling of the above exception ({{ frame.exc_cause }}), another exception occurred:{% endif %}\n{% endif %}{% endifchanged %}  {% if frame.tb %}File \"{{ frame.filename }}\"{% if frame.context_line %}, line {{ frame.lineno }}{% endif %}, in {{ frame.function }}\n{% if frame.context_line %}    {% spaceless %}{{ frame.context_line }}{% endspaceless %}{{ frame.tb_area_colno }}{% endif %}{% elif forloop.first %}None{% else %}Traceback: None{% endif %}\n{% endfor %}\n{% if exception_type %}Exception Type: {{ exception_type }}{% if request %} at {{ request.path_info }}{% endif %}\n{% if exception_value %}Exception Value: {{ exception_value }}{% endif %}{% if exception_notes %}{{ exception_notes }}{% endif %}{% endif %}{% endif %}\n{% if raising_view_name %}Raised during: {{ raising_view_name }}{% endif %}\n{% if request %}Request information:\n{% if user_str %}USER: {{ user_str }}{% endif %}\n\nGET:{% for k, v in request_GET_items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No GET data{% endfor %}\n\nPOST:{% for k, v in filtered_POST_items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No POST data{% endfor %}\n\nFILES:{% for k, v in request_FILES_items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No FILES data{% endfor %}\n\nCOOKIES:{% for k, v in request_COOKIES_items %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% empty %} No cookie data{% endfor %}\n\nMETA:{% for k, v in request_meta.items|dictsort:0 %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n{% else %}Request data not supplied\n{% endif %}\nSettings:\nUsing settings module {{ settings.SETTINGS_MODULE }}{% for k, v in settings.items|dictsort:0 %}\n{{ k }} = {{ v|stringformat:\"r\" }}{% endfor %}\n\n{% if not is_email %}\nYou're seeing this error because you have DEBUG = True in your\nDjango settings file. Change that to False, and Django will\ndisplay a standard page generated by the handler for this status code.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckConstraint for Nullable Fields on Oracle < 23c in Python\nDESCRIPTION: Shows how to correctly define a `CheckConstraint` for nullable fields on Oracle versions prior to 23c. It includes an explicit check for `NULL` (`Q(age__isnull=True)`) using an OR condition to ensure the constraint validation behaves consistently with database validation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import Q, CheckConstraint\n\nCheckConstraint(condition=Q(age__gte=18) | Q(age__isnull=True), name=\"age_gte_18\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Feature Geometry and Attributes with Django OGRFeature (Python)\nDESCRIPTION: Demonstrates retrieving a geometry as a coordinate tuple and accessing various feature-level attributes for OGR vector data in Django. Shows use of property accessors (e.g., geom) and methods like get() and index() for querying attribute values by name. Requires Django's GIS contrib and an active OGRFeature instance. Inputs include feature attribute names (like 'Population') and output types depend on the property queried (numbers, strings, etc.).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city.geom.tuple\n(-104.609252, 38.255001)\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city.get(\"Population\")\n102121\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city.fid\n0\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city.layer_name\n'cities'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city.index(\"Population\")\n1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Reversing Vulnerability in Django\nDESCRIPTION: This snippet shows how URL reversing could generate scheme-relative URLs, potentially redirecting users to malicious sites. The fix ensures no URL starts with two slashes, replacing the second slash with its URL encoded counterpart.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nreverse()\n```\n\n----------------------------------------\n\nTITLE: Learning Cache Keys with learn_cache_key\nDESCRIPTION: Determines which headers to use for cache key generation based on the Vary header in a response. Stores this information to optimize future requests to the same path.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlearn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Custom Managers for Filtering in Python\nDESCRIPTION: Provides an example of attaching multiple custom managers to a single model ('Person') to offer pre-filtered QuerySets based on the 'role' field. 'AuthorManager' filters for authors ('role=\"A\"'), 'EditorManager' filters for editors ('role=\"E\"'), while 'people' remains the default manager returning all persons. This allows convenient access like 'Person.authors.all()' and 'Person.editors.all()'.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AuthorManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().filter(role=\"A\")\n\n\nclass EditorManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().filter(role=\"E\")\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    role = models.CharField(max_length=1, choices={\"A\": _(\"Author\"), \"E\": _(\"Editor\")})\n    people = models.Manager()\n    authors = AuthorManager()\n    editors = EditorManager()\n```\n\n----------------------------------------\n\nTITLE: Customizing FlatPageAdmin in Django Admin Interface\nDESCRIPTION: Shows how to customize the FlatPageAdmin class to include additional fields like 'enable_comments' in the admin interface for flatpages.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.flatpages.admin import FlatPageAdmin\nfrom django.contrib.flatpages.models import FlatPage\nfrom django.utils.translation import gettext_lazy as _\n\n\n# Define a new FlatPageAdmin\nclass FlatPageAdmin(FlatPageAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"url\", \"title\", \"content\", \"sites\"]}),\n        (\n            _(\"Advanced options\"),\n            {\n                \"classes\": [\"collapse\"],\n                \"fields\": [\n                    \"enable_comments\",\n                    \"registration_required\",\n                    \"template_name\",\n                ],\n            },\n        ),\n    ]\n\n\n# Re-register FlatPageAdmin\nadmin.site.unregister(FlatPage)\nadmin.site.register(FlatPage, FlatPageAdmin)\n```\n\n----------------------------------------\n\nTITLE: Running runserver with No Color Output - Console\nDESCRIPTION: This console command runs django-admin's runserver subcommand with the --no-color option. It disables colorized output formatting, useful in environments that do not support or require colored text. No dependencies are required; the effect is specific to commands supporting colorized output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_32\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver --no-color\n```\n\n----------------------------------------\n\nTITLE: Filtering by Hour - SQL Equivalent\nDESCRIPTION: Provides SQL equivalent for filtering by hour, using EXTRACT to retrieve the hour component from date/time fields. Inputs and outputs match Django's ORM query expectations. Exact SQL may vary by engine.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_117\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE EXTRACT('hour' FROM timestamp) = '23';\nSELECT ... WHERE EXTRACT('hour' FROM time) = '5';\nSELECT ... WHERE EXTRACT('hour' FROM timestamp) >= '12';\n```\n\n----------------------------------------\n\nTITLE: Django Import Path Changes\nDESCRIPTION: Examples of deprecated import paths and modules that will be removed, showing the old imports that should no longer be used and their replacements.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old deprecated imports\nfrom django.contrib.csrf import * \nfrom django.contrib.gis.db.backend import *\nfrom django.core.management import setup_environ, execute_manager\n\n# New recommended imports\nfrom django.conf.urls import include, patterns, url, handler404, handler500\nfrom django.contrib.gis.geoip import GeoIP\n```\n\n----------------------------------------\n\nTITLE: Custom Admin Form Override for View Permission\nDESCRIPTION: Shows how to override ModelAdmin.get_form to handle view-only access by checking change permissions and returning appropriate form.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass MyAdmin(admin.ModelAdmin):\n    def get_form(self, request, obj=None, **kwargs):\n        if not self.has_change_permission(request, obj):\n            return super().get_form(request, obj, **kwargs)\n        return CustomForm\n```\n\n----------------------------------------\n\nTITLE: JSONArray Function Example in Django\nDESCRIPTION: Shows how to use the JSONArray function to create JSON arrays from field values and expressions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import F\n>>> from django.db.models.functions import JSONArray, Lower\n>>> Author.objects.create(name=\"Margaret Smith\", alias=\"msmith\", age=25)\n>>> author = Author.objects.annotate(\n...     json_array=JSONArray(\n...         Lower(\"name\"),\n...         \"alias\",\n...         F(\"age\") * 2,\n...     )\n... ).get()\n>>> author.json_array\n```\n\n----------------------------------------\n\nTITLE: Setting All M2M Relationships with set() (pycon)\nDESCRIPTION: Illustrates using the `set()` method on the `ManyToManyField` manager (`a4.publications`). This method replaces all existing relationships for `a4` with the ones provided in the list (`[p3]`). Any previous relationships not in the list are removed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a4.publications.all() \n<QuerySet [<Publication: Science News>]>\n>>> a4.publications.set([p3])\n>>> a4.publications.all()\n<QuerySet [<Publication: Science Weekly>]>\n```\n\n----------------------------------------\n\nTITLE: Overriding Label Suffix in a Django Form Field\nDESCRIPTION: Illustrates how to use the `label_suffix` argument on a specific field (`IntegerField`) within a Django `Form` (`ContactForm`) to override the default or form-level label suffix. The example also shows setting a form-level `label_suffix` during form instantiation and prints the resulting HTML.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class ContactForm(forms.Form):\n...     age = forms.IntegerField()\n...     nationality = forms.CharField()\n...     captcha_answer = forms.IntegerField(label=\"2 + 2\", label_suffix=\" =\")\n...\n>>> f = ContactForm(label_suffix=\"?\")\n>>> print(f)\n<div><label for=\"id_age\">Age?</label><input type=\"number\" name=\"age\" required id=\"id_age\"></div>\n<div><label for=\"id_nationality\">Nationality?</label><input type=\"text\" name=\"nationality\" required id=\"id_nationality\"></div>\n<div><label for=\"id_captcha_answer\">2 + 2 =</label><input type=\"number\" name=\"captcha_answer\" required id=\"id_captcha_answer\"></div>\n```\n\n----------------------------------------\n\nTITLE: Extending Django Field Checks for Custom Validation in Python\nDESCRIPTION: Example of adding custom validation logic to a Django model field by inheriting from a base field (`models.IntegerField`) and overriding the `check()` method. The custom `RangedIntegerField` adds `min` and `max` arguments and includes a check (`_check_min_max_values`) to ensure `min` is not greater than `max`. The overridden `check()` method calls the superclass's `check()` and extends the returned errors with custom ones.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import checks\nfrom django.db import models\n\n\nclass RangedIntegerField(models.IntegerField):\n    def __init__(self, min=None, max=None, **kwargs):\n        super().__init__(**kwargs)\n        self.min = min\n        self.max = max\n\n    def check(self, **kwargs):\n        # Call the superclass\n        errors = super().check(**kwargs)\n\n        # Do some custom checks and add messages to `errors`:\n        errors.extend(self._check_min_max_values(**kwargs))\n\n        # Return all errors and warnings\n        return errors\n\n    def _check_min_max_values(self, **kwargs):\n        if self.min is not None and self.max is not None and self.min > self.max:\n            return [\n                checks.Error(\n                    \"min greater than max.\",\n                    hint=\"Decrease min or increase max.\",\n                    obj=self,\n                    id=\"myapp.E001\",\n                )\n            ]\n        # When no error, return an empty list\n        return []\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending with Header Injection Protection in Django View\nDESCRIPTION: Shows how to create a Django view that safely sends emails by validating headers to prevent header injection attacks. The function checks for newlines in header values and handles potential BadHeaderError exceptions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import BadHeaderError, send_mail\nfrom django.http import HttpResponse, HttpResponseRedirect\n\n\ndef send_email(request):\n    subject = request.POST.get(\"subject\", \"\")\n    message = request.POST.get(\"message\", \"\")\n    from_email = request.POST.get(\"from_email\", \"\")\n    if subject and message and from_email:\n        try:\n            send_mail(subject, message, from_email, [\"admin@example.com\"])\n        except BadHeaderError:\n            return HttpResponse(\"Invalid header found.\")\n        return HttpResponseRedirect(\"/contact/thanks/\")\n    else:\n        # In reality we'd use a form class\n        # to get proper validation errors.\n        return HttpResponse(\"Make sure all fields are entered and valid.\")\n```\n\n----------------------------------------\n\nTITLE: Annotating QuerySet with RawSQL Expression - Django ORM - Python\nDESCRIPTION: Demonstrates the usage of Django's RawSQL expression to annotate a QuerySet with the result of a custom SQL subquery. Requires Django and an active database connection. The key parameter 'param' is injected securely into the query, and the code should be used with caution as it may hurt portability between databases and break the DRY principle. Returns a QuerySet with an extra annotated field named 'val', where each row contains the value returned by the subquery.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> queryset.annotate(val=RawSQL(\"select col from sometable where othercol = %s\", (param,)))\n```\n\n----------------------------------------\n\nTITLE: Applying `last_modified` Decorator Functionally in Python\nDESCRIPTION: Shows an alternative way to apply the `last_modified` decorator without using the `@` syntax. The decorator is called as a function (`last_modified(latest_entry)`) which returns a new function that wraps the original `front_page` view.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef front_page(request, blog_id): ...\n\n\nfront_page = last_modified(latest_entry)(front_page)\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests in Terminal\nDESCRIPTION: This snippet shows the command to run Django tests for the polls application in the terminal and the expected output indicating a test failure.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py test polls\n\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nF\n======================================================================\nFAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/path/to/djangotutorial/polls/tests.py\", line 16, in test_was_published_recently_with_future_question\n    self.assertIs(future_question.was_published_recently(), False)\nAssertionError: True is not False\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\nDestroying test database for alias 'default'...\n```\n\n----------------------------------------\n\nTITLE: Example New Unique Filename Suffix Generation\nDESCRIPTION: Illustrates the new format appended by `Storage.get_available_name()` to resolve filename conflicts during file uploads. It consists of an underscore followed by a random 7-character alphanumeric string. This change prevents a potential denial-of-service attack caused by excessive `os.stat()` calls associated with the previous sequential numbering method.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"_x3a1gho\"\n```\n\n----------------------------------------\n\nTITLE: Working with Image Data in Django ImageField\nDESCRIPTION: Example showing how to properly access image data from an ImageField using PIL. It demonstrates that while some metadata is directly accessible, working with the actual image requires reopening the file.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from PIL import Image\n>>> car = Car.objects.get(name=\"57 Chevy\")\n>>> car.photo.width\n191\n>>> car.photo.height\n287\n>>> image = Image.open(car.photo)\n# Raises ValueError: seek of closed file.\n>>> car.photo.open()\n<ImageFieldFile: cars/chevy.jpg>\n>>> image = Image.open(car.photo)\n>>> image\n<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=191x287 at 0x7F99A94E9048>\n```\n\n----------------------------------------\n\nTITLE: Applying distinct() on Multiple Specific Fields (PostgreSQL) Python\nDESCRIPTION: Applies DISTINCT ON (fields) for multiple fields on PostgreSQL. Requires order_by() to list these fields first in the same order. Filters results to the first row for each unique combination of the specified fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.order_by(\"author\", \"pub_date\").distinct(\"author\", \"pub_date\")\n```\n\n----------------------------------------\n\nTITLE: Using Concat Function in Django Models\nDESCRIPTION: Shows how to concatenate text fields with the Concat function\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> # Get the display name as \"name (goes_by)\"\n>>> from django.db.models import CharField, Value as V\n>>> from django.db.models.functions import Concat\n>>> Author.objects.create(name=\"Margaret Smith\", goes_by=\"Maggie\")\n>>> author = Author.objects.annotate(\n...     screen_name=Concat(\"name\", V(\" (\"), \"goes_by\", V(\")\"), output_field=CharField())\n... ).get()\n>>> print(author.screen_name)\nMargaret Smith (Maggie)\n```\n\n----------------------------------------\n\nTITLE: Expected Output: Sorted Book Titles after Nested Dictsort - HTML+Django\nDESCRIPTION: Shows how book titles would be displayed in order after sorting by nested 'author.age' with dictsort in a Django template. Output is a simple list rendering. Used in conjunction with the for-loop template code and the provided input data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_62\n\nLANGUAGE: html+django\nCODE:\n```\n* Alice (Lewis)\n* 1984 (George)\n* Timequake (Kurt)\n```\n\n----------------------------------------\n\nTITLE: Django Authentication Login View Reference\nDESCRIPTION: Reference to Django's authentication login view function that was affected by the CVE-2017-7233 security vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.views.login()\n```\n\n----------------------------------------\n\nTITLE: Using Django's STORAGES Setting with a Callable\nDESCRIPTION: Example using the storages registry to select a storage backend defined in the STORAGES setting. This approach allows for centralized configuration of storage backends.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.storage import storages\n\n\ndef select_storage():\n    return storages[\"mystorage\"]\n\n\nclass MyModel(models.Model):\n    upload = models.FileField(storage=select_storage)\n```\n\n----------------------------------------\n\nTITLE: Retrieving objects by non-indexed columns in Django\nDESCRIPTION: Shows a less efficient way to retrieve objects using a non-indexed column. This query may be slower as the database cannot use an index to locate the record quickly.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> entry = Entry.objects.get(headline=\"News Item Title\")\n```\n\n----------------------------------------\n\nTITLE: Quoting IRI Components and Encoding URIs - Django - Python\nDESCRIPTION: Demonstrates the use of Python's standard library function quote and Django's iri_to_uri utility for converting and encoding Unicode paths and values into valid URL components. Dependencies: urllib.parse (standard), django.utils.encoding; requires Django installed to use iri_to_uri. The first example shows URL-safe quoting for components, and the second converts a full IRI to a URI, preserving correctly quoted segments. Input: Unicode path/component strings; Output: ASCII-compatible, URL-encoded strings. Useful for Django developers building internationalized applications requiring fully compliant URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from urllib.parse import quote\n>>> from django.utils.encoding import iri_to_uri\n>>> quote(\"Paris & Orléans\")\n'Paris%20%26%20Orl%C3%A9ans'\n>>> iri_to_uri(\"/favorites/François/%s\" % quote(\"Paris & Orléans\"))\n'/favorites/Fran%C3%A7ois/Paris%20%26%20Orl%C3%A9ans'\n```\n\n----------------------------------------\n\nTITLE: Fixing Denial-of-Service Vulnerability in Django's Truncator Class\nDESCRIPTION: Addresses CVE-2023-43665 by limiting the input processed by Truncator in HTML mode to the first five million characters. This affects the chars() and words() methods, which are used in truncatechars_html and truncatewords_html template filters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.12.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.text.Truncator\n```\n\n----------------------------------------\n\nTITLE: Filtered Book Annotation\nDESCRIPTION: Example of combining filter and annotate to count authors for books with specific titles.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Avg, Count\nBook.objects.filter(name__startswith=\"Django\").annotate(num_authors=Count(\"authors\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing SelectDateWidget Empty Labels in Python\nDESCRIPTION: This Python snippet demonstrates how to customize the placeholder labels for the year, month, and day select boxes within a Django SelectDateWidget. The `empty_label` attribute can accept a single string for all selects or a tuple/list of three strings for individual customization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# A custom empty label with string\nfield1 = forms.DateField(widget=SelectDateWidget(empty_label=\"Nothing\"))\n\n# A custom empty label with tuple\nfield1 = forms.DateField(\n    widget=SelectDateWidget(\n        empty_label=(\"Choose Year\", \"Choose Month\", \"Choose Day\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Exception Reporter Filter in Django Settings\nDESCRIPTION: Shows how to set a custom exception reporter filter in Django settings. This allows site-wide customization of error report filtering behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_EXCEPTION_REPORTER_FILTER = \"path.to.your.CustomExceptionReporterFilter\"\n```\n\n----------------------------------------\n\nTITLE: Defining GeoDjango Model for Spatial Data\nDESCRIPTION: Example of creating a GeoDjango model class with a character field and polygon field to store spatial data imported from a shapefile.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis.db import models\n\n\nclass TestGeo(models.Model):\n    name = models.CharField(max_length=25)  # corresponds to the 'str' field\n    poly = models.PolygonField(srid=4269)  # we want our model in a different SRID\n\n    def __str__(self):\n        return \"Name: %s\" % self.name\n```\n\n----------------------------------------\n\nTITLE: Using the date template filter with user input vulnerability example\nDESCRIPTION: Example of the security vulnerability in the date template filter when using unvalidated user input as a format string, allowing potential settings leakage.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{{ last_updated|date:user_date_format }}\n```\n\n----------------------------------------\n\nTITLE: Using keep_lazy Decorator for Lazy Translation in Python\nDESCRIPTION: Demonstrates how to use the keep_lazy decorator to handle lazy translation objects in utility functions. It allows delaying the evaluation of lazy translations until they need to be converted to strings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.functional import keep_lazy, keep_lazy_text\n\n\ndef fancy_utility_function(s, *args, **kwargs):\n    # Do some conversion on string 's'\n    ...\n\n\nfancy_utility_function = keep_lazy(str)(fancy_utility_function)\n\n\n# Or more succinctly:\n@keep_lazy(str)\ndef fancy_utility_function(s, *args, **kwargs): ...\n```\n\n----------------------------------------\n\nTITLE: Setting DJANGO_SETTINGS_MODULE in Unix Bash\nDESCRIPTION: Example of setting the DJANGO_SETTINGS_MODULE environment variable and running django-admin in a Unix Bash shell.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport DJANGO_SETTINGS_MODULE=mysite.settings\ndjango-admin runserver\n```\n\n----------------------------------------\n\nTITLE: Configuring Django PyMemcache Cache Backend\nDESCRIPTION: Configuration for PyMemcache backend with client pooling, error handling as cache misses, and TCP_NODELAY flag enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.memcached.PyMemcacheCache\",\n        \"LOCATION\": \"127.0.0.1:11211\",\n        \"OPTIONS\": {\n            \"no_delay\": True,\n            \"ignore_exc\": True,\n            \"max_pool_size\": 4,\n            \"use_pooling\": True,\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Large orphans Value in Paginator (Python)\nDESCRIPTION: Support for setting the `orphans` argument in `Paginator` and `AsyncPaginator` to a value greater than or equal to the `per_page` value is deprecated. `orphans` should be strictly less than `per_page`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nPaginator(..., per_page=10, orphans=10) # Deprecated usage\n```\n\n----------------------------------------\n\nTITLE: Defining CheckConstraint with Ordered Q Objects in Python\nDESCRIPTION: Illustrates how to define a `CheckConstraint` where the order of evaluation of conditions might matter for performance. While `Q` argument order isn't guaranteed, the order of `Q` expressions combined with `&` is preserved.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import Q, CheckConstraint\n\nCheckConstraint(\n    condition=Q(age__gte=18) & Q(expensive_check=condition),\n    name=\"age_gte_18_and_others\",\n)\n```\n\n----------------------------------------\n\nTITLE: User Authentication Property Reference\nDESCRIPTION: Properties mentioned in authentication comparison bugfix that now support equality and OR operations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nUser.is_authenticated\nUser.is_anonymous\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Value Display in ModelAdmin\nDESCRIPTION: Demonstrates how to customize the display of empty values in the admin interface using empty_value_display and display decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    empty_value_display = \"-empty-\"\n```\n\n----------------------------------------\n\nTITLE: Searching Django Documentation with grep (Unix)\nDESCRIPTION: Demonstrates how to use the Unix grep utility to search for specific phrases in Django's documentation files.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ grep -r max_length /path/to/django/docs/\n```\n\n----------------------------------------\n\nTITLE: Registering Lookups with Django Fields (Python)\nDESCRIPTION: Demonstrates the registration of custom lookup classes to Django model fields using the RegisterLookupMixin API. Requires Django models and custom lookup class definitions. Registration overrides existing lookups with the same name and allows for both class-level and instance-level customization. Key parameters include the lookup class to be registered and an optional lookup name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/lookups.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDateField.register_lookup(YearExact)\nUser._meta.get_field(\"date_joined\").register_lookup(MonthExact)\n```\n\n----------------------------------------\n\nTITLE: Fixing Regression in QuerySet.values_list() with prefetch_related()\nDESCRIPTION: A bug fix for Django 3.2 where QuerySet.values_list() with named=True would crash after using prefetch_related(). This addresses ticket #32812.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nQuerySet.values_list(…, named=True)\n```\n\nLANGUAGE: SQL\nCODE:\n```\nprefetch_related()\n```\n\n----------------------------------------\n\nTITLE: Implementing WeekArchiveView in Django\nDESCRIPTION: Example of how to create a WeekArchiveView for displaying articles by week. It includes the view definition, URL configuration, and an HTML template for rendering the archive.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.views.generic.dates import WeekArchiveView\n\nfrom myapp.models import Article\n\n\nclass ArticleWeekArchiveView(WeekArchiveView):\n    queryset = Article.objects.all()\n    date_field = \"pub_date\"\n    week_format = \"%W\"\n    allow_future = True\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import ArticleWeekArchiveView\n\nurlpatterns = [\n    # Example: /2012/week/23/\n    path(\n        \"<int:year>/week/<int:week>/\",\n        ArticleWeekArchiveView.as_view(),\n        name=\"archive_week\",\n    ),\n]\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Week {{ week|date:'W' }}</h1>\n\n<ul>\n    {% for article in object_list %}\n        <li>{{ article.pub_date|date:\"F j, Y\" }}: {{ article.title }}</li>\n    {% endfor %}\n</ul>\n\n<p>\n    {% if previous_week %}\n        Previous Week: {{ previous_week|date:\"W\" }} of year {{ previous_week|date:\"Y\" }}\n    {% endif %}\n    {% if previous_week and next_week %}--{% endif %}\n    {% if next_week %}\n        Next week: {{ next_week|date:\"W\" }} of year {{ next_week|date:\"Y\" }}\n    {% endif %}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Instantiating GEOS LineString with a Single Sequence in Python\nDESCRIPTION: Shows how to create a `LineString` object by passing a single sequence (like a tuple or list) containing the coordinate points to the constructor. The elements within the sequence can be either coordinate tuples `(x, y)` or `Point` objects. Both examples yield the same `LineString`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ls = LineString(((0, 0), (1, 1)))\n>>> ls = LineString([Point(0, 0), Point(1, 1)])\n```\n\n----------------------------------------\n\nTITLE: Comparing Django Model Instances\nDESCRIPTION: Shows how Django model instances are compared using the equality operator, which compares primary key values behind the scenes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n>>> some_entry == other_entry\n>>> some_entry.id == other_entry.id\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Root URLs\nDESCRIPTION: Root URL configuration including the polls app URLs and admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"polls/\", include(\"polls.urls\")),\n    path(\"admin/\", admin.site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Managing Index Naming in Meta Classes with Django ORM (Python)\nDESCRIPTION: Illustrates how to avoid index name collisions in abstract base classes by using placeholders in the index name. This leverages 'app_label' and 'class' substitutions within the string, ensuring that unique names are generated for subclasses. The key input is a string with substitution placeholders, and the output is a per-model index name. Required dependencies: Django model Meta options and valid field names.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/indexes.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nIndex(fields=['title'], name='%(app_label)s_%(class)s_title_index')\n```\n\n----------------------------------------\n\nTITLE: Querying Geometric Equality in Django ORM\nDESCRIPTION: Example of using the 'equals' lookup to find geometries that are spatially equal to a given geometry across different spatial database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly=geom)\n```\n\n----------------------------------------\n\nTITLE: Defining DayArchiveView Class in Django\nDESCRIPTION: Declaration of the DayArchiveView class, which is a generic view for displaying archives by day. It inherits from multiple mixins to provide date-based and list functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass DayArchiveView():\n```\n\n----------------------------------------\n\nTITLE: Customizing Check Parameters in Django Commands\nDESCRIPTION: Shows how to override the get_check_kwargs method to customize the parameters passed to the check method, specifically enabling database-related checks.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_check_kwargs(self, options):\n    kwargs = super().get_check_kwargs(options)\n    return {**kwargs, \"databases\": [options[\"database\"]]}\n```\n\n----------------------------------------\n\nTITLE: Converting Function Decorators to Method Decorators\nDESCRIPTION: Transforms a function decorator into a method decorator for use with methods or classes. When used with a class, name parameter specifies which method to decorate. Can accept a list/tuple of decorators to apply in reverse order.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmethod_decorator(decorator, name='')\n```\n\n----------------------------------------\n\nTITLE: Serving User-Uploaded Files in Development with Django URLconf\nDESCRIPTION: Configures URLs to serve user-uploaded media files during development using Django's static file serving view.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/index.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Height Attribute in Python\nDESCRIPTION: Demonstrates retrieving the height (in pixels) of a GDALRaster object using its `height` attribute. A GDALRaster is initialized in-memory with specified width, height, and SRID for demonstration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_36\n\nLANGUAGE: pycon\nCODE:\n```\n>>> GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326}).height\n20\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Database Backend for Sessions\nDESCRIPTION: Setting the SESSION_ENGINE to use the cached database backend which provides a write-through cache for session data, applying writes to both database and cache.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"django.contrib.sessions.backends.cached_db\"\n```\n\n----------------------------------------\n\nTITLE: Reading WKB Data in Python using GEOS\nDESCRIPTION: Shows how to use the WKBReader class to create a GEOSGeometry object from Well-Known Binary (WKB) data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import WKBReader\n>>> wkb_r = WKBReader()\n>>> wkb_r.read(\"0101000000000000000000F03F000000000000F03F\")\n<Point object at 0x103a88910>\n```\n\n----------------------------------------\n\nTITLE: Using Lower Function in Django Models\nDESCRIPTION: Demonstrates using the Lower function to convert text to lowercase\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Lower\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(name_lower=Lower(\"name\")).get()\n>>> print(author.name_lower)\nmargaret smith\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Migration Module in Django\nDESCRIPTION: Example of configuring MIGRATION_MODULES in Django settings to specify custom packages for app migrations. This example directs the blog app to use a non-default migration package.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\n{\"blog\": \"blog.db_migrations\"}\n```\n\n----------------------------------------\n\nTITLE: Django Middleware Configuration for Internationalization\nDESCRIPTION: Example middleware configuration showing correct ordering for LocaleMiddleware with session and common middleware\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using querystring Tag in Django Templates\nDESCRIPTION: The querystring tag adds or modifies parameters in the query string, replacing any existing values for specified keys. This snippet shows the basic usage of adding or changing query parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_27\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring color=\"red\" size=\"S\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unknown User Creation in RemoteUserBackend (Python)\nDESCRIPTION: A boolean attribute on `RemoteUserBackend` that controls whether a new user object is created if the username provided via `REMOTE_USER` does not exist in the database. Defaults to `True`. Set to `False` to prevent automatic user creation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncreate_unknown_user\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Empty Label for Choices\nDESCRIPTION: Illustrates how to specify a custom label for the 'empty' or 'blank' choice in a Django enumeration (`IntegerChoices` in this case) using the `__empty__` class attribute. This is necessary when `None` cannot be used as a value, such as with concrete data types. It uses `django.utils.translation.gettext_lazy` (`_`) for translatable labels.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass Answer(models.IntegerChoices):\n    NO = 0, _(\"No\")\n    YES = 1, _(\"Yes\")\n\n    __empty__ = _(\"(Unknown)\")\n```\n\n----------------------------------------\n\nTITLE: Configuring RequireDebugFalse Filter in Django Logging Settings\nDESCRIPTION: This snippet demonstrates the default configuration for using the `RequireDebugFalse` filter with the `AdminEmailHandler` in Django's `LOGGING` settings. It defines a filter named `require_debug_false` that utilizes the `django.utils.log.RequireDebugFalse` class. This filter is then applied to the `mail_admins` handler, ensuring that error emails are only sent when `settings.DEBUG` is set to `False`, which is typical for production environments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    # ...\n    \"filters\": {\n        \"require_debug_false\": {\n            \"()\": \"django.utils.log.RequireDebugFalse\",\n        },\n    },\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        },\n    },\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Django with Gunicorn and Uvicorn Worker\nDESCRIPTION: Command to start Django application using Gunicorn with Uvicorn worker class for production deployment.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -m gunicorn myproject.asgi:application -k uvicorn_worker.UvicornWorker\n```\n\n----------------------------------------\n\nTITLE: Using Static Template Tag in Django Templates\nDESCRIPTION: Demonstrates basic usage of the static template tag to reference static files like images. The static tag automatically prepends the STATIC_URL setting to the specified path.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_105\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n<img src=\"{% static 'images/hi.jpg' %}\" alt=\"Hi!\">\n```\n\n----------------------------------------\n\nTITLE: Creating a GEOSGeometry Object from EWKT (Python)\nDESCRIPTION: Shows an alternative way to create a geometry object with an SRID using Extended Well Known Text (EWKT), which includes the SRID definition directly in the string. Requires `django.contrib.gis.geos.GEOSGeometry`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pnt = GEOSGeometry(\"SRID=32140;POINT(954158.1 4215137.1)\")\n```\n\n----------------------------------------\n\nTITLE: Setting Max-Age with cache_control Decorator\nDESCRIPTION: Shows how to use the cache_control decorator to set the max-age directive, which tells clients how long (in seconds) they can cache the response. This example sets a cache lifetime of one hour.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_control\n\n\n@cache_control(max_age=3600)\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Importing Forms Module in Django 1.0 (Python)\nDESCRIPTION: Shows the updated import statement for the forms library in Django 1.0. The `newforms` module was renamed to `forms`. If the alias `as forms` was used previously, only the module name in the import statement needs changing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n```\n\n----------------------------------------\n\nTITLE: Form Widget Value Omission Method\nDESCRIPTION: Implementation requirement for custom widgets to handle value omission in form data processing\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.forms.Widget.value_omitted_from_data\n```\n\n----------------------------------------\n\nTITLE: Creating an Internationalized Password Reset Email Subject in Django\nDESCRIPTION: This Django template snippet creates the subject line for password reset emails with internationalization support. It loads the i18n template tag library, disables auto-escaping, and uses blocktranslate to make the subject line translatable with a site name variable.\nSOURCE: https://github.com/django/django/blob/main/django/contrib/auth/templates/registration/password_reset_subject.txt#2025-04-23_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load i18n %}{% autoescape off %}\n{% blocktranslate %}Password reset on {{ site_name }}{% endblocktranslate %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Creating Django File Object from Python File Handle in Python\nDESCRIPTION: Illustrates how to wrap a Python file object, obtained using the built-in `open()`, into a `django.core.files.File` instance. This is necessary when providing file content to methods like `FieldFile.save()`, which expect a Django `File` object rather than a standard Python file handle.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files import File\n\n# Open an existing file using Python's built-in open()\nf = open(\"/path/to/hello.world\")\nmyfile = File(f)\n```\n\n----------------------------------------\n\nTITLE: Creating First Django View\nDESCRIPTION: Basic Django view implementation returning an HTTP response.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n```\n\n----------------------------------------\n\nTITLE: Loading Templates with get_template()\nDESCRIPTION: Example of how Django searches for templates when using get_template(), based on the TEMPLATES configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nget_template('story_detail.html')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Reporter in Django\nDESCRIPTION: Demonstrates how to create a custom exception reporter by subclassing Django's ExceptionReporter and overriding the get_traceback_data method.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.debug import ExceptionReporter\n\n\nclass CustomExceptionReporter(ExceptionReporter):\n    def get_traceback_data(self):\n        data = super().get_traceback_data()\n        # ... remove/add something here ...\n        return data\n```\n\n----------------------------------------\n\nTITLE: Delete Confirmation Template in Django\nDESCRIPTION: HTML template for confirming object deletion. Includes a form with CSRF protection and displays the object to be deleted. The template provides a confirmation button to proceed with deletion.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{% csrf_token %}\n    <p>Are you sure you want to delete \"{{ object }}\"?</p>\n    {{ form }}\n    <input type=\"submit\" value=\"Confirm\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using the Localtime Filter\nDESCRIPTION: Shows how to force conversion of a value to the current time zone using the localtime template filter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% load tz %}\n\n{{ value|localtime }}\n```\n\n----------------------------------------\n\nTITLE: Django Form Renderer Class Configuration\nDESCRIPTION: Specifies `FORM_RENDERER`, the class responsible for rendering forms and widgets in Django templates. Defaults to Django's built-in template renderer class. Valid options include DjangoTemplates, Jinja2, and TemplatesSetting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\nFORM_RENDERER\n-----------------\n\nDefault: `'django.forms.renderers.DjangoTemplates'`\n\nThe class that renders forms and form widgets. It must implement\n:ref:`the low-level render API <low-level-widget-render-api>`. Included form\nrenderers are:\n\n* `'django.forms.renderers.DjangoTemplates'`\n* `'django.forms.renderers.Jinja2'`\n* `'django.forms.renderers.TemplatesSetting'`\n```\n\n----------------------------------------\n\nTITLE: Using TrigramDistance for Distance-Based Text Matching\nDESCRIPTION: Demonstrates how to use TrigramDistance to find records by text distance. Instead of similarity, this uses the inverse concept of distance, where lower values indicate better matches.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.postgres.search import TrigramDistance\n>>> Author.objects.create(name=\"Katy Stevens\")\n>>> Author.objects.create(name=\"Stephen Keats\")\n>>> test = \"Katie Stephens\"\n>>> Author.objects.annotate(\n...     distance=TrigramDistance(\"name\", test),\n... ).filter(\n...     distance__lte=0.7\n... ).order_by(\"distance\")\n[<Author: Katy Stevens>, <Author: Stephen Keats>]\n```\n\n----------------------------------------\n\nTITLE: Defining a Callback Function for Django CallbackFilter\nDESCRIPTION: This Python function `skip_unreadable_post` is designed to be used with `django.utils.log.CallbackFilter`. It inspects the log record's exception info (`record.exc_info`). If the exception value is an instance of `UnreadablePostError`, the function returns `False` to prevent the record from being processed further (e.g., sent via `AdminEmailHandler`). Otherwise, it returns `True`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import UnreadablePostError\n\n\ndef skip_unreadable_post(record):\n    if record.exc_info:\n        exc_type, exc_value = record.exc_info[:2]\n        if isinstance(exc_value, UnreadablePostError):\n            return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Database Engine for MySQL\nDESCRIPTION: Illustrates changing the `DATABASE_ENGINE` setting in Django's settings file. The first snippet shows the standard MySQL engine configuration, while the second shows how to switch to the deprecated 'mysql_old' backend as a temporary workaround for older `MySQLdb` versions (< 1.2.1p2). Upgrading `MySQLdb` is strongly recommended.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_ENGINE = \"mysql\"\n```\n\nLANGUAGE: python\nCODE:\n```\nDATABASE_ENGINE = \"mysql_old\"\n```\n\n----------------------------------------\n\nTITLE: Extracting with Timezone Override in Django ORM - Python\nDESCRIPTION: Demonstrates extracting date/time parts from DateTimeField while temporarily overriding Django's timezone. Requires django.utils.timezone, zoneinfo, and a model with DateTimeField. The code adjusts the returned values according to the custom timezone used, and is useful for applications that need localized data output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n>>> from django.utils import timezone\\n>>> import zoneinfo\\n>>> melb = zoneinfo.ZoneInfo(\"Australia/Melbourne\")  # UTC+10:00\\n>>> with timezone.override(melb):\\n...     Experiment.objects.annotate(\\n...         day=ExtractDay(\"start_datetime\"),\\n...         weekday=ExtractWeekDay(\"start_datetime\"),\\n...         isoweekday=ExtractIsoWeekDay(\"start_datetime\"),\\n...         hour=ExtractHour(\"start_datetime\"),\\n...     ).values(\"day\", \"weekday\", \"isoweekday\", \"hour\").get(\\n...         end_datetime__year=ExtractYear(\"start_datetime\"),\\n...     )\\n...\\n{'day': 16, 'weekday': 3, 'isoweekday': 2, 'hour': 9}\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing GDAL Layer Attributes in Python\nDESCRIPTION: Examples demonstrating how to access various attributes of a GDAL Layer object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> layer = ds[0]\n>>> layer.name\n'cities'\n>>> layer.num_feat\n3\n>>> layer.geom_type.name\n'Point'\n>>> layer.num_fields\n4\n>>> layer.fields\n['Name', 'Population', 'Density', 'Created']\n>>> [ft.__name__ for ft in layer.field_types]\n['OFTString', 'OFTReal', 'OFTReal', 'OFTDate']\n>>> layer.field_widths\n[80, 11, 24, 10]\n>>> layer.field_precisions\n[0, 0, 15, 0]\n```\n\n----------------------------------------\n\nTITLE: New Future URL Template Tag Usage\nDESCRIPTION: Example of using the new future library URL template tag syntax with proper string argument.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{% load url from future %}\n{% url 'sample' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Format Module Path in Django Settings\nDESCRIPTION: Example of setting the FORMAT_MODULE_PATH in Django settings to specify where custom format files will be located. This allows overriding the default locale formats provided by Django.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nFORMAT_MODULE_PATH = [\n    \"mysite.formats\",\n    \"some_app.formats\",\n]\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting GDAL Source\nDESCRIPTION: Commands to download and extract the GDAL source code archive.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://download.osgeo.org/gdal/X.Y.Z/gdal-X.Y.Z.tar.gz\n$ tar xzf gdal-X.Y.Z.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Vulnerability fix in UserAttributeSimilarityValidator\nDESCRIPTION: Security fix addressing CVE-2021-45115 where UserAttributeSimilarityValidator was vulnerable to DoS attacks due to processing artificially large passwords. The fix implements length restrictions for comparison values.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.26.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUserAttributeSimilarityValidator\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Test Dependencies for Django\nDESCRIPTION: Command to install the Node.js dependencies required for running Django's JavaScript tests from the command line. This should be run from the root of the Django checkout.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Customizing BoundField Rendering in Forms - Django - Python\nDESCRIPTION: Shows how to override the default BoundField behavior for form fields on both the class and form levels. A custom BoundField subclass modifies generated CSS classes, and a form specifies this bound_field_class to use the custom logic. Requires Django's forms module and familiarity with overriding widget and form rendering. Inputs are typical form fields; outputs are adjusted HTML with enhanced classes for styling or accessibility; ensure the Django version being used supports these attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django import forms\n\n\nclass CustomBoundField(forms.BoundField):\n\n    custom_class = \"custom\"\n\n    def css_classes(self, extra_classes=None):\n        result = super().css_classes(extra_classes)\n        if self.custom_class not in result:\n            result += f\" {self.custom_class}\"\n        return result.strip()\n\n\nclass CustomForm(forms.Form):\n    bound_field_class = CustomBoundField\n\n    name = forms.CharField(\n        label=\"Your Name\",\n        max_length=100,\n        required=False,\n        widget=forms.TextInput(attrs={\"class\": \"name-input-class\"}),\n    )\n    email = forms.EmailField(label=\"Your Email\")\n```\n\n----------------------------------------\n\nTITLE: Using unit_attname Method for Unit Conversion\nDESCRIPTION: Demonstrates the use of unit_attname class method to get the attribute abbreviation for different unit names.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> print(Distance.unit_attname(\"US Survey Foot\"))\nsurvey_ft\n>>> print(Distance.unit_attname(\"centimeter\"))\ncm\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Required Field Error in Django CharField using Python\nDESCRIPTION: This snippet demonstrates the default behavior of a `django.forms.CharField`. When the `clean()` method is called with an empty string on a required field (which is the default), it raises a `ValidationError` with the standard message \"This field is required.\".\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> generic = forms.CharField()\n>>> generic.clean(\"\")\nTraceback (most recent call last):\n  ...\nValidationError: ['This field is required.']\n```\n\n----------------------------------------\n\nTITLE: Recreating Pickled QuerySet with values_list() Limitation in Python\nDESCRIPTION: Illustrates a limitation when restoring a QuerySet using a pickled `query` attribute that originated from a `values_list()` call. The restored QuerySet behaves as if it was created with `values()`, returning dictionaries instead of the original tuples.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import pickle\n>>> qs = Blog.objects.values_list(\"id\", \"name\")\n>>> qs\n<QuerySet [(1, 'Beatles Blog')]>\n>>> reloaded_qs = Blog.objects.all()\n>>> reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n>>> reloaded_qs\n<QuerySet [{'id': 1, 'name': 'Beatles Blog'}]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Backend in Django Settings\nDESCRIPTION: Example of configuring the dummy email backend that does nothing with messages.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"django.core.mail.backends.dummy.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Creating Aliases for `cached_property` Correctly (Django 2.2+) in Python\nDESCRIPTION: This snippet illustrates the recommended method, highlighted in Django 2.2 documentation, for creating an alias for a `cached_property`. It uses the built-in `property` function along with `operator.attrgetter` to create a new property (`alias`) that correctly accesses the cached value of the original property (`base`). This avoids the potential `TypeError` raised by direct assignment.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport operator\n\n\nclass A:\n    ...\n\n    alias = property(operator.attrgetter(\"base\"))\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting GDALRaster SRS Attribute in Python\nDESCRIPTION: Illustrates how to get and set the spatial reference system (SRS) of a GDALRaster object using the `srs` attribute. It shows accessing the SRID via `srs.srid` and setting the SRS using an integer SRID (3086). Requires a GDALRaster object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_37\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.srs.srid\n4326\n>>> rst.srs = 3086\n>>> rst.srs.srid\n3086\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Django Formset\nDESCRIPTION: Demonstrates how to add custom fields to a Django formset by overriding the add_fields method of the formset base class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_23\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import BaseFormSet\n>>> from django.forms import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     def add_fields(self, form, index):\n...         super().add_fields(form, index)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'not_lt' Lookup in Django Python\nDESCRIPTION: Leverages the `not_lt` lookup (`__not_lt`, SQL operator `&>`) on the `ages` field. This query selects `Event` objects where the `ages` range does not extend to the left of (is not strictly less than) the provided `NumericRange(0, 15)`, meaning its lower bound is greater than or equal to the lower bound of the queried range. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_25\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__not_lt=NumericRange(0, 15))\n<QuerySet [<Event: Soft play>, <Event: Pub trip>]>\n```\n\n----------------------------------------\n\nTITLE: Defining MinLengthValidator in Django\nDESCRIPTION: Validator class that checks if the length of a value is below a minimum limit. Raises ValidationError if the length is less than limit_value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMinLengthValidator(limit_value, message=None)\n```\n\n----------------------------------------\n\nTITLE: Django Spatial Database Settings Configuration\nDESCRIPTION: Example Django settings configuration for GeoDjango tests using PostGIS backend with multiple databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"geodjango\",\n        \"USER\": \"geodjango\",\n    },\n    \"other\": {\n        \"ENGINE\": \"django.contrib.gis.db.backends.postgis\",\n        \"NAME\": \"other\",\n        \"USER\": \"geodjango\",\n    },\n}\n\nSECRET_KEY = \"django_tests_secret_key\"\n```\n\n----------------------------------------\n\nTITLE: Handling Password Reset in Django\nDESCRIPTION: The PasswordResetForm class in Django's authentication system was vulnerable to user email enumeration. This has been mitigated by handling and logging exceptions during password reset email sending using the django-contrib-auth-logger.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.16.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.forms import PasswordResetForm\n```\n\n----------------------------------------\n\nTITLE: Template Tag Syntax - Django cycle Tag\nDESCRIPTION: Example showing the deprecated comma-separated syntax for the Django cycle template tag that will be removed.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{% cycle %}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for Blog and Entry in Python\nDESCRIPTION: Defines two Django models, `Blog` and `Entry`, using `django.db.models`. The `Entry` model has a foreign key to `Blog` and a `published` DateTimeField, defaulting to the current time. This structure serves as a basis for demonstrating conditional view processing examples.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/conditional-view-processing.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom django.db import models\n\n\nclass Blog(models.Model): ...\n\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)\n    published = models.DateTimeField(default=datetime.datetime.now)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining X_FRAME_OPTIONS setting\nDESCRIPTION: This setting specifies the default value for the X-Frame-Options header. It is used by the XFrameOptionsMiddleware for clickjacking protection. The default value is 'DENY'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Configuring Advanced Filesystem Template Loader in Django\nDESCRIPTION: Shows how to configure a specific filesystem loader with custom directories in the OPTIONS dictionary of the TEMPLATES setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"OPTIONS\": {\n            \"loaders\": [\n                (\n                    \"django.template.loaders.filesystem.Loader\",\n                    [BASE_DIR / \"templates\"],\n                ),\n            ],\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Limiting Flatpages by Base URL in Django HTML\nDESCRIPTION: These snippets demonstrate how to use the 'starts_with' argument with the get_flatpages template tag to limit the returned pages to those beginning with a particular base URL. It shows examples using both a string and a variable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% get_flatpages '/about/' as about_pages %}\n{% get_flatpages about_prefix as about_pages %}\n{% get_flatpages '/about/' for someuser as about_pages %}\n```\n\n----------------------------------------\n\nTITLE: Extracting PROJ Source and Data Files\nDESCRIPTION: Commands to extract PROJ source code and datum shifting files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ tar xzf proj-X.Y.Z.tar.gz\n$ cd proj-X.Y.Z/data\n$ tar xzf ../../proj-data-X.Y.tar.gz\n$ cd ../..\n```\n\n----------------------------------------\n\nTITLE: Implementing Feed Content Methods in Django\nDESCRIPTION: Core methods for generating feed content including items and get_object implementations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef items(self, obj):\n    \"\"\"\n    Takes the object returned by get_object() and returns a list of\n    items to publish in this feed.\n    \"\"\"\n\ndef get_object(self, request, *args, **kwargs):\n    \"\"\"\n    Takes the current request and the arguments from the URL, and\n    returns an object represented by this feed. Raises\n    django.core.exceptions.ObjectDoesNotExist on error.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Language in Django Test Teardown\nDESCRIPTION: Shows how to reset the active language to the default language code in the tearDown method of a Django test. This ensures language preferences don't leak between tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef tearDown(self):\n    translation.activate(settings.LANGUAGE_CODE)\n```\n\n----------------------------------------\n\nTITLE: Django Development Server Port and Address Examples\nDESCRIPTION: Examples showing different ways to configure Django's development server ports and IP addresses using the runserver command.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver 1.2.3.4:8000\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver 7000\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver 1.2.3.4:7000\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver -6\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver -6 7000\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver [2001:0db8:1234:5678::9]:7000\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver localhost:8000\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin runserver -6 localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Options in Django\nDESCRIPTION: Shows the configuration option for disabling 'returning into' functionality in Oracle databases, which may cause errors on INSERTs for some tables in Django 1.11.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n'use_returning_into': False\n```\n\n----------------------------------------\n\nTITLE: Importing Django Models in Package Structure\nDESCRIPTION: Demonstrates how to organize Django models across multiple files using explicit imports in the __init__.py file of a models package. This approach improves code readability and maintains clean namespaces.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom .organic import Person\nfrom .synthetic import Robot\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Connection Pool with psycopg in Django\nDESCRIPTION: Configuration example for enabling connection pooling with psycopg in Django settings. This can improve performance by reusing database connections rather than creating new connections for each request.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        # ...\n        \"OPTIONS\": {\n            \"pool\": True,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Django Force Script Name Setting\nDESCRIPTION: Defines `FORCE_SCRIPT_NAME`, which overrides the `SCRIPT_NAME` environment variable in HTTP requests, useful for URL rewriting and in standalone scripts. Defaults to `None`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\nFORCE_SCRIPT_NAME\n---------------------\n\nDefault: `None`\n\nIf not `None`, this will be used as the value of the `SCRIPT_NAME`\nenvironment variable in any HTTP request. This setting can be used to override\nthe server-provided value of `SCRIPT_NAME`, which may be a rewritten version\nof the preferred value or not supplied at all. It is also used by\n:func:`django.setup()` to set the URL resolver script prefix outside of the\nrequest/response cycle (e.g. in management commands and standalone scripts) to\ngenerate correct URLs when `FORCE_SCRIPT_NAME` is provided.\n```\n\n----------------------------------------\n\nTITLE: Using strip_tags() Function in Django\nDESCRIPTION: Demonstrates the usage of strip_tags() function from django.utils.html, which now has an upper limit of recursive calls to HTMLParser before raising a SuspiciousOperation exception. It's crucial to escape the result before marking it as safe.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.17.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.html import strip_tags, escape\n\n# Strip HTML tags from input\nstripped_content = strip_tags(input_content)\n\n# Always escape the result before marking as safe\nsafe_content = escape(stripped_content)\n```\n\n----------------------------------------\n\nTITLE: Form with Custom Media Definition\nDESCRIPTION: Example of a form with both inherited widget media and custom media declarations\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_16\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class ContactForm(forms.Form):\n...     date = DateField(widget=CalendarWidget)\n...     name = CharField(max_length=40, widget=OtherWidget)\n...     class Media:\n...         css = {\n...             \"all\": [\"layout.css\"],\n...         }\n...\n\n>>> f = ContactForm()\n>>> f.media\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<link href=\"https://static.example.com/layout.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://static.example.com/actions.js\"></script>\n<script src=\"https://static.example.com/whizbang.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom CSRF Token in Django Response\nDESCRIPTION: This method sets the custom CSRF token in the response cookies. It generates a new token using the custom generator and sets it with appropriate security flags.\nSOURCE: https://github.com/django/django/blob/main/tests/forms_tests/tests/filepath_test_files/real-text-file.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef _set_csrf_token(self, request, response):\n    if not request.META.get(\"CSRF_COOKIE_USED\", False):\n        return\n\n    token = self._generate_token()\n    response.set_cookie(\n        settings.CSRF_COOKIE_NAME,\n        token,\n        max_age=settings.CSRF_COOKIE_AGE,\n        domain=settings.CSRF_COOKIE_DOMAIN,\n        path=settings.CSRF_COOKIE_PATH,\n        secure=settings.CSRF_COOKIE_SECURE,\n        httponly=settings.CSRF_COOKIE_HTTPONLY,\n        samesite=settings.CSRF_COOKIE_SAMESITE,\n    )\n```\n\n----------------------------------------\n\nTITLE: Building Test Suite in Python\nDESCRIPTION: This method constructs a test suite based on provided test labels. It supports various formats for specifying tests and returns a TestSuite instance ready for execution.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef build_suite(self, test_labels=None, **kwargs):\n    # Construct test suite based on test_labels\n    # Return TestSuite instance\n```\n\n----------------------------------------\n\nTITLE: Nested URL Arguments Pattern Examples\nDESCRIPTION: Demonstration of URL patterns using nested regular expression arguments, showing both recommended and discouraged approaches for handling optional page parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import re_path\n\nurlpatterns = [\n    re_path(r\"^blog/(page-([0-9]+)/)?$\", blog_articles),  # bad\n    re_path(r\"^comments/(?:page-(?P<page_number>[0-9]+)/)?$\", comments),  # good\n]\n```\n\n----------------------------------------\n\nTITLE: Using ExclusionConstraint with Custom Range Function in Django\nDESCRIPTION: Example of defining an ExclusionConstraint using a custom TsTzRange function for models that define ranges using two separate fields instead of native PostgreSQL range types. It demonstrates the use of RangeBoundary and custom functions in constraint expressions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/constraints.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.postgres.constraints import ExclusionConstraint\nfrom django.contrib.postgres.fields import (\n    DateTimeRangeField,\n    RangeBoundary,\n    RangeOperators,\n)\nfrom django.db import models\nfrom django.db.models import Func, Q\n\n\nclass TsTzRange(Func):\n    function = \"TSTZRANGE\"\n    output_field = DateTimeRangeField()\n\n\nclass Reservation(models.Model):\n    room = models.ForeignKey(\"Room\", on_delete=models.CASCADE)\n    start = models.DateTimeField()\n    end = models.DateTimeField()\n    cancelled = models.BooleanField(default=False)\n\n    class Meta:\n        constraints = [\n            ExclusionConstraint(\n                name=\"exclude_overlapping_reservations\",\n                expressions=[\n                    (\n                        TsTzRange(\"start\", \"end\", RangeBoundary()),\n                        RangeOperators.OVERLAPS,\n                    ),\n                    (\"room\", RangeOperators.EQUAL),\n                ],\n                condition=Q(cancelled=False),\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Documenting New Django Feature in reStructuredText\nDESCRIPTION: This snippet adds documentation for the new 'make_toast()' function in Django's shortcuts module. It includes a function description and version information.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``make_toast()``\n================\n\n.. function:: make_toast()\n\n.. versionadded:: 2.2\n\nReturns ``'toast'``.\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Author Update Form in Django\nDESCRIPTION: Example of an HTML template for rendering an author update form in Django, including CSRF token and form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Update\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Tag Loading Order\nDESCRIPTION: Shows incorrect ordering of template tags in a load statement. Tags should be in alphabetical order according to Django conventions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_8\n\nLANGUAGE: html+django\nCODE:\n```\n{% load l10 i18n tz %}\n```\n\n----------------------------------------\n\nTITLE: Weighting Search Vectors in Django Full Text Search\nDESCRIPTION: Demonstrates how to assign weights to different fields in a search query for more relevant results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector\n>>> vector = SearchVector(\"body_text\", weight=\"A\") + SearchVector(\n...     \"blog__tagline\", weight=\"B\"\n... )\n>>> query = SearchQuery(\"cheese\")\n>>> Entry.objects.annotate(rank=SearchRank(vector, query)).filter(rank__gte=0.3).order_by(\n```\n\n----------------------------------------\n\nTITLE: Set Operations on LineString Objects\nDESCRIPTION: Demonstrates set-like operations (union, intersection, difference, symmetric difference) between LineString objects using Python operators.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.geos import LineString\n>>> ls1 = LineString((0, 0), (2, 2))\n>>> ls2 = LineString((1, 1), (3, 3))\n>>> print(ls1 | ls2)  # equivalent to `ls1.union(ls2)`\nMULTILINESTRING ((0 0, 1 1), (1 1, 2 2), (2 2, 3 3))\n>>> print(ls1 & ls2)  # equivalent to `ls1.intersection(ls2)`\nLINESTRING (1 1, 2 2)\n>>> print(ls1 - ls2)  # equivalent to `ls1.difference(ls2)`\nLINESTRING(0 0, 1 1)\n>>> print(ls1 ^ ls2)  # equivalent to `ls1.sym_difference(ls2)`\nMULTILINESTRING ((0 0, 1 1), (2 2, 3 3))\n```\n\n----------------------------------------\n\nTITLE: Accessing Cleaned Data for Partially Valid Forms - Python\nDESCRIPTION: This snippet shows that if the form is not valid, cleaned_data only contains entries for valid fields, omitting those with validation errors. Useful for partial processing or feedback. Requires form validation. Output is cleaned_data dictionary with valid fields only.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\\n...     \\\"subject\\\": \\\"\\\",\\n...     \\\"message\\\": \\\"Hi there\\\",\\n...     \\\"sender\\\": \\\"invalid email address\\\",\\n...     \\\"cc_myself\\\": True,\\n... }\\n>>> f = ContactForm(data)\\n>>> f.is_valid()\\nFalse\\n>>> f.cleaned_data\\n{'cc_myself': True, 'message': 'Hi there'}\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Right Relationship in PostGIS\nDESCRIPTION: Example of using the 'right' lookup to find geometries whose bounding box is strictly to the right of a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__right=geom)\n```\n\n----------------------------------------\n\nTITLE: Using Spatial Filters with GDAL Layer in Python\nDESCRIPTION: Example demonstrating how to apply and use spatial filters on a GDAL Layer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> print(layer.spatial_filter)\nNone\n>>> print(len(layer))\n3\n>>> [feat.get(\"Name\") for feat in layer]\n['Pueblo', 'Lawrence', 'Houston']\n>>> ks_extent = (-102.051, 36.99, -94.59, 40.00)  # Extent for state of Kansas\n>>> layer.spatial_filter = ks_extent\n>>> len(layer)\n1\n>>> [feat.get(\"Name\") for feat in layer]\n['Lawrence']\n>>> layer.spatial_filter = None\n>>> len(layer)\n3\n```\n\n----------------------------------------\n\nTITLE: Using Length Function in Django Models\nDESCRIPTION: Shows how to get the length of text fields and register Length as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> # Get the length of the name and goes_by fields\n>>> from django.db.models.functions import Length\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(\n...     name_length=Length(\"name\"), goes_by_length=Length(\"goes_by\")\n... ).get()\n>>> print(author.name_length, author.goes_by_length)\n(14, None)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import CharField\n>>> from django.db.models.functions import Length\n>>> CharField.register_lookup(Length)\n>>> # Get authors whose name is longer than 7 characters\n>>> authors = Author.objects.filter(name__length__gt=7)\n```\n\n----------------------------------------\n\nTITLE: Ensuring CSRF Token Works in Template without Middleware in Django\nDESCRIPTION: This snippet demonstrates the use of the requires_csrf_token decorator to ensure the csrf_token template tag works even if the CSRF middleware hasn't run.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/csrf.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import requires_csrf_token\n\n\n@requires_csrf_token\ndef my_view(request):\n    c = {}\n    # ...\n    return render(request, \"a_template.html\", c)\n```\n\n----------------------------------------\n\nTITLE: Customizing Simple Block Tag End Name in Django\nDESCRIPTION: Demonstrates how to customize the closing tag name for a simple block tag using the end_name parameter in the decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@register.simple_block_tag(end_name=\"endofchart\")\ndef chart(content):\n    return render_chart(source=content)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Django Test\nDESCRIPTION: Command to run a specific test file in Django's test suite. This example runs a regression test for migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./runtests.py migrations.test_regression\n```\n\n----------------------------------------\n\nTITLE: Fixing Regular Expression DoS in Django's Truncator.words() Method\nDESCRIPTION: Addresses a security vulnerability (CVE-2024-27351) in django.utils.text.Truncator.words() method and the truncatewords_html template filter. The fix prevents potential denial-of-service attacks using crafted strings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.text.Truncator.words()\n```\n\n----------------------------------------\n\nTITLE: Database Router Implementation for Migration Control\nDESCRIPTION: Demonstrates how to implement a database router to control migration execution using hints.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/writing-migrations.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyRouter:\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        if \"target_db\" in hints:\n            return db == hints[\"target_db\"]\n        return True\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for regroup Tag in Django Templates\nDESCRIPTION: This snippet shows an alternative syntax for the regroup tag, unpacking the namedtuple directly in the for loop. This approach provides a cleaner way to access the group object fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_36\n\nLANGUAGE: html+django\nCODE:\n```\n{% regroup cities by country as country_list %}\n\n<ul>\n{% for country, local_cities in country_list %}\n    <li>{{ country }}\n    <ul>\n        {% for city in local_cities %}\n          <li>{{ city.name }}: {{ city.population }}</li>\n        {% endfor %}\n    </ul>\n    </li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using list_editable admin option in Django\nDESCRIPTION: Shows how to use the new list_editable admin option to make fields editable on admin list views for bulk editing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nlist_editable = ['field1', 'field2']\n```\n\n----------------------------------------\n\nTITLE: Looping Over defaultdict Items in HTML+Django Template\nDESCRIPTION: This snippet illustrates looping over items of a `collections.defaultdict` within a Django template using `{% for k, v in defaultdict.items %}`. It highlights a potential issue where Django's template variable lookup order (dictionary lookup before attribute/method lookup) might interfere with calling the `.items()` method, potentially returning default values instead. It suggests converting the `defaultdict` to a standard dictionary beforehand if the method call is intended.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% for k, v in defaultdict.items %}\n    Do something with k and v here...\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using StringAgg Aggregate with Django Models and ManyToMany Relationships\nDESCRIPTION: Illustrates the usage of StringAgg aggregate function with Django models involving ManyToMany relationships. The example uses Article and Publication models to concatenate publication titles.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> article = Article.objects.create(headline=\"NASA uses Python\")\n>>> article.publications.create(title=\"The Python Journal\")\n<Publication: Publication object (1)>\n>>> article.publications.create(title=\"Science News\")\n<Publication: Publication object (2)>\n>>> from django.contrib.postgres.aggregates import StringAgg\n>>> Article.objects.annotate(\n...     publication_names=StringAgg(\n...         \"publications__title\",\n...         delimiter=\", \",\n...         order_by=\"publications__title\",\n...     )\n... ).values(\"headline\", \"publication_names\")\n<QuerySet [{\n    'headline': 'NASA uses Python', 'publication_names': 'Science News, The Python Journal'\n}]>\n```\n\n----------------------------------------\n\nTITLE: Testing ReportLab Installation in Python\nDESCRIPTION: Example of how to test ReportLab installation by importing it in the Python interactive interpreter.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-pdf.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import reportlab\n```\n\n----------------------------------------\n\nTITLE: Implementing item_geometry Method in ZipcodeFeed\nDESCRIPTION: This example demonstrates how to implement the item_geometry method in a ZipcodeFeed class. It returns a polygon for each item in the feed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/feeds.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ZipcodeFeed(Feed):\n    def item_geometry(self, obj):\n        # Returns the polygon.\n        return obj.poly\n```\n\n----------------------------------------\n\nTITLE: Potential XSS Vulnerability in Django Templates\nDESCRIPTION: Demonstrates how unescaped user input can lead to potential Cross-Site Scripting (XSS) attacks. This example shows why automatic HTML escaping is important.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_14\n\nLANGUAGE: html+django\nCODE:\n```\nHello, {{ name }}\n```\n\nLANGUAGE: html+django\nCODE:\n```\nHello, <script>alert('hello')</script>\n```\n\n----------------------------------------\n\nTITLE: Importing SessionStore in Django\nDESCRIPTION: This snippet shows how to import the SessionStore object from the configured session engine in Django settings.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from importlib import import_module\n>>> from django.conf import settings\n>>> SessionStore = import_module(settings.SESSION_ENGINE).SessionStore\n```\n\n----------------------------------------\n\nTITLE: Defining a Class-Based View for URL Reversal in Django (Python)\nDESCRIPTION: Python code snippet defining a simple Django class-based view (`ArchiveView`) derived from `django.views.View` and creating a callable instance using `as_view()`. This callable instance (`archive`) can potentially be used directly with `django.urls.reverse`, provided the same object is used in the URLConf. However, reversing namespaced views by view object is not supported.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views import View\n\n\nclass ArchiveView(View): ...\n\n\narchive = ArchiveView.as_view()\n```\n\n----------------------------------------\n\nTITLE: Updating Django Syndication Feed Views\nDESCRIPTION: The views.feed() view and feeds.Feed class in django.contrib.syndication will be removed. Use the class-based view views.Feed instead.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Old method:\ndjango.contrib.syndication.views.feed()\ndjango.contrib.syndication.feeds.Feed\n\n# New method:\ndjango.contrib.syndication.views.Feed\n```\n\n----------------------------------------\n\nTITLE: Implementing Selenium Screenshots Test Case in Django\nDESCRIPTION: Example of using Selenium test case with screenshot functionality for testing admin UI across different screen sizes and configurations. Uses the @screenshot_cases decorator to specify different test scenarios.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test.selenium import SeleniumTestCase, screenshot_cases\nfrom django.urls import reverse\n\n\nclass SeleniumTests(SeleniumTestCase):\n    @screenshot_cases([\"desktop_size\", \"mobile_size\", \"rtl\", \"dark\", \"high_contrast\"])\n    def test_login_button_centered(self):\n        self.selenium.get(self.live_server_url + reverse(\"admin:login\"))\n        self.take_screenshot(\"login\")\n        ...\n```\n\n----------------------------------------\n\nTITLE: Importing Django Core Validators in Python\nDESCRIPTION: This code snippet shows the import of various validator functions from Django's core validators module. These validators are mentioned in relation to a security vulnerability (CVE-2021-33571) involving IPv4 address validation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.core.validators import URLValidator, validate_ipv4_address, validate_ipv46_address\n```\n\n----------------------------------------\n\nTITLE: Django QuerySet Ordering\nDESCRIPTION: Reference to order_by() method used with JSONField for PostgreSQL database operations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.order_by()\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for Aggregation Examples (Python)\nDESCRIPTION: Defines four Django models (`Author`, `Publisher`, `Book`, `Store`) used throughout the aggregation examples. These models represent entities in an online bookstore inventory system and include various field types (`CharField`, `IntegerField`, `DecimalField`, `FloatField`, `DateField`) and relationships (`ManyToManyField`, `ForeignKey`) to illustrate different aggregation scenarios.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    age = models.IntegerField()\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=300)\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=300)\n    pages = models.IntegerField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    rating = models.FloatField()\n    authors = models.ManyToManyField(Author)\n    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\n    pubdate = models.DateField()\n\n\nclass Store(models.Model):\n    name = models.CharField(max_length=300)\n    books = models.ManyToManyField(Book)\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Backend in Django Settings\nDESCRIPTION: Example configuration for using a custom S3 storage backend for static files in Django. This setting tells collectstatic to use the custom storage backend for handling static files.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/static-files/deployment.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSTORAGES = {\n    # ...\n    \"staticfiles\": {\"BACKEND\": \"myproject.storage.S3Storage\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables with the Cycle Tag (Django)\nDESCRIPTION: Shows how to use template variables (`rowvalue1`, `rowvalue2`) as arguments to the `{% cycle %}` tag, allowing dynamic alternation based on context data. Variable values used in the cycle are HTML-escaped by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% for o in some_list %}\n    <tr class=\"{% cycle rowvalue1 rowvalue2 %}\">\n        ...\n    </tr>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamically Generated Manager Class for Django Migrations\nDESCRIPTION: This snippet shows how to create a manager class using the from_queryset function and make it usable in migrations by inheriting from the generated class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass MyManager(MyBaseManager.from_queryset(CustomQuerySet)):\n    use_in_migrations = True\n\n\nclass MyModel(models.Model):\n    objects = MyManager()\n```\n\n----------------------------------------\n\nTITLE: Media Inheritance with an Extended Widget in Django\nDESCRIPTION: Demonstrates how a widget inherits media assets from its parent widget when extending a widget class with its own Media definition.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> class FancyCalendarWidget(CalendarWidget):\n...     class Media:\n...         css = {\n...             \"all\": [\"fancy.css\"],\n...         }\n...         js = [\"whizbang.js\"]\n...\n\n>>> w = FancyCalendarWidget()\n>>> print(w.media)\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<link href=\"https://static.example.com/fancy.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://static.example.com/actions.js\"></script>\n<script src=\"https://static.example.com/whizbang.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Auto Field in Django AppConfig\nDESCRIPTION: Configures the default_auto_field attribute in a custom AppConfig to use AutoField as the default primary key type for models in the app.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.apps import AppConfig\n\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = \"django.db.models.AutoField\"\n    name = \"my_app\"\n```\n\n----------------------------------------\n\nTITLE: Converting to UTC in Templates\nDESCRIPTION: Demonstrates forcing conversion of a value to UTC using the utc template filter.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n{% load tz %}\n\n{{ value|utc }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databases in Django Settings\nDESCRIPTION: Example of configuring multiple databases in Django settings, including an auth database and a primary/replica setup with two read replicas.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {},\n    \"auth_db\": {\n        \"NAME\": \"auth_db_name\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"swordfish\",\n    },\n    \"primary\": {\n        \"NAME\": \"primary_name\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"spam\",\n    },\n    \"replica1\": {\n        \"NAME\": \"replica1_name\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"eggs\",\n    },\n    \"replica2\": {\n        \"NAME\": \"replica2_name\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"bacon\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Unmanaged Django Model for Legacy Table in Python\nDESCRIPTION: This code sample shows a Django model class mapped to a legacy database table, with managed=False to prevent Django from managing the table's schema. It defines a primary key and additional fields, and sets db_table to 'CENSUS_PERSONS' to reflect the legacy table name. Dependencies include a configured Django project and database setup, and the model expects no table creation or migration from Django for this model.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    id = models.IntegerField(primary_key=True)\n    first_name = models.CharField(max_length=70)\n\n    class Meta:\n        managed = False\n        db_table = \"CENSUS_PERSONS\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Request User to Model in Django Admin\nDESCRIPTION: Implementation of save_model method in a ModelAdmin class to automatically associate the current user with the model being saved before persisting it to the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\n\nclass ArticleAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        obj.user = request.user\n        super().save_model(request, obj, form, change)\n```\n\n----------------------------------------\n\nTITLE: Using Django Admin Command Line Utility\nDESCRIPTION: Command to verify Django admin command line utility is available for use\nSOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Tests with Multiple Browsers\nDESCRIPTION: This command runs Django's Selenium tests with specified browsers (Firefox and Chrome in this example). These tests require the selenium package and actual browser installations on the test machine.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ./runtests.py --selenium=firefox,chrome\n```\n\n----------------------------------------\n\nTITLE: Updating URLconf for Django Shortcut View\nDESCRIPTION: This snippet shows how to update the URLconf to use the new location of the shortcut view in Django 1.6. It replaces the deprecated django.conf.urls.shortcut with the new path in django.contrib.contenttypes.views.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n(r\"^prefix/\", include(\"django.conf.urls.shortcut\")),\n```\n\nLANGUAGE: Python\nCODE:\n```\n(\n    r\"^prefix/(?P<content_type_id>\\d+)/(?P<object_id>.*)/$\",\n    \"django.contrib.contenttypes.views.shortcut\",\n),\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with Make (Unix/Linux)\nDESCRIPTION: Demonstrates how to use the Makefile to generate HTML documentation from Django's source files on Unix-like systems.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd path/to/django/docs\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Accessing template context in Django test client response\nDESCRIPTION: Demonstrates the new simplified way to access template context in test client responses, using request.context[key] syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nrequest.context[key]\n```\n\n----------------------------------------\n\nTITLE: Illustrating TypeError on M2M Add with Incorrect Type (pycon)\nDESCRIPTION: Demonstrates that attempting to add an object of an incorrect type (an `Article` instance `a1` instead of a `Publication`) to the `publications` `ManyToManyField` raises a `TypeError`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a2.publications.add(a1)\nTraceback (most recent call last):\n...\nTypeError: 'Publication' instance expected\n```\n\n----------------------------------------\n\nTITLE: Deep Relationship Aggregation in Django\nDESCRIPTION: Demonstrates aggregating across deep relationship chains to find the youngest author age.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nStore.objects.aggregate(youngest_age=Min(\"books__authors__age\"))\n```\n\n----------------------------------------\n\nTITLE: Using truncatewords_html Filter in Django Templates\nDESCRIPTION: Demonstrates the truncatewords_html filter, which truncates a string after a certain number of words while being aware of HTML tags. It closes any open tags after truncation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_96\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|truncatewords_html:2 }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Signal Handlers During Fixture Loading Without Decorators (Python)\nDESCRIPTION: Shows a pattern for manually disabling Django post_save signal handlers when loading fixture data (when kwarg 'raw' is True). Requires Django and a declared model (MyModel). The handler is connected as usual, but exits early if the signal is triggered during raw fixture loading. Input: signal arguments; Output: handler runs only when not loading raw fixtures. Useful to prevent errors from accessing incomplete related fields during deserialization.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/fixtures.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.signals import post_save\nfrom .models import MyModel\n\n\ndef my_handler(**kwargs):\n    # disable the handler during fixture loading\n    if kwargs[\"raw\"]:\n        return\n    ...\n\n\npost_save.connect(my_handler, sender=MyModel)\n```\n\n----------------------------------------\n\nTITLE: Implementing get_prep_value for Custom Django Field\nDESCRIPTION: This snippet shows how to implement the get_prep_value method for a custom HandField, converting a Python object back to a database-friendly format.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclass HandField(models.Field):\n    # ...\n\n    def get_prep_value(self, value):\n        return \"\".join(\n            [\"\".join(l) for l in (value.north, value.east, value.south, value.west)]\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Format-Aware Django View Methods\nDESCRIPTION: A set of Django view methods that handle both HTML and JSON response formats based on Accept headers. Includes request dispatch validation, form validation error handling, and successful form submission responses. Uses get_preferred_type() to determine the appropriate response format.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\naccepted_media_types = [\"text/html\", \"application/json\"]\n\ndef dispatch(self, request, *args, **kwargs):\n    if request.get_preferred_type(self.accepted_media_types) is None:\n        # No format in common.\n        return HttpResponse(\n            status_code=406, headers={\"Accept\": \",\".join(self.accepted_media_types)}\n        )\n\n    return super().dispatch(request, *args, **kwargs)\n\ndef form_invalid(self, form):\n    response = super().form_invalid(form)\n    accepted_type = request.get_preferred_type(self.accepted_media_types)\n    if accepted_type == \"text/html\":\n        return response\n    elif accepted_type == \"application/json\":\n        return JsonResponse(form.errors, status=400)\n\ndef form_valid(self, form):\n    # We make sure to call the parent's form_valid() method because\n    # it might do some processing (in the case of CreateView, it will\n    # call form.save() for example).\n    response = super().form_valid(form)\n    accepted_type = request.get_preferred_type(self.accepted_media_types)\n    if accepted_type == \"text/html\":\n        return response\n    elif accepted_type == \"application/json\":\n        data = {\n            \"pk\": self.object.pk,\n        }\n        return JsonResponse(data)\n```\n\n----------------------------------------\n\nTITLE: Updating Basque DATE_FORMAT string in Django\nDESCRIPTION: Fixes the Basque DATE_FORMAT string to ensure correct date formatting for the Basque locale. This fix is related to ticket #28710.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDATE_FORMAT\n```\n\n----------------------------------------\n\nTITLE: Excluding Applications with django-admin dumpdata - Shell\nDESCRIPTION: Demonstrates how to use the django-admin dumpdata command with multiple --exclude options to omit specific applications (like auth and contenttypes) from the serialized output. Relies on the Django admin CLI tool and requires an operational Django project context. Exclusion applies per specified app; including more than one --exclude flag omits multiple apps from the resulting data. Output goes to stdout by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin dumpdata --exclude=auth --exclude=contenttypes\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Backend in Django Settings\nDESCRIPTION: Shows how to explicitly specify SMTP as the email backend in Django settings.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Windows GIS Environment Variables for GeoDjango - Batch\nDESCRIPTION: This Windows batch script sets environment variables (OSGEO4W_ROOT, GDAL_DATA, PROJ_LIB, PATH) and updates the Windows registry so that GeoDjango can find the required GIS libraries (GDAL, PROJ, etc) provided by the OSGeo4W installation. It requires administrative privileges and should be executed inside an Administrator cmd.exe shell. The script takes no parameters; it expects that OSGeo4W is installed in C:\\\\OSGeo4W unless customized. Outputs are persistent environment variables and registry entries for the current system. Users must log out and log back in for changes to take effect.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_11\n\nLANGUAGE: bat\nCODE:\n```\nset OSGEO4W_ROOT=C:\\\\OSGeo4W\nset GDAL_DATA=%OSGEO4W_ROOT%\\apps\\gdal\\share\\gdal\nset PROJ_LIB=%OSGEO4W_ROOT%\\share\\proj\nset PATH=%PATH%;%OSGEO4W_ROOT%\\bin\nreg ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v Path /t REG_EXPAND_SZ /f /d \"%PATH%\"\nreg ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v GDAL_DATA /t REG_EXPAND_SZ /f /d \"%GDAL_DATA%\"\nreg ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v PROJ_LIB /t REG_EXPAND_SZ /f /d \"%PROJ_LIB%\"\n```\n\n----------------------------------------\n\nTITLE: Django StringAgg Security Issue Reference\nDESCRIPTION: Reference to the StringAgg aggregation function that was subject to SQL injection vulnerability through crafted delimiter input (CVE-2020-7471).\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nStringAgg(delimiter)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Prohibited QuerySet reverse() After Slicing in Django\nDESCRIPTION: Demonstrates a prohibited operation in Django 2.0 using the Python console syntax (`pycon`). Calling `reverse()` on a QuerySet after it has been sliced (`[:2]`) raises a `TypeError`. This change prevents potentially confusing or unexpected results that could occur from applying the slice after the reversal.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Model.objects.all()[:2].reverse()\nTraceback (most recent call last):\n...\nTypeError: Cannot reverse a query once a slice has been taken.\n```\n\n----------------------------------------\n\nTITLE: Validating a Valid Formset\nDESCRIPTION: Demonstrates validating a formset with the is_valid() method, showing how an empty formset with proper management form data is considered valid since no forms were modified.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.forms import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> ArticleFormSet = formset_factory(ArticleForm)\n>>> data = {\n...     \"form-TOTAL_FORMS\": \"1\",\n...     \"form-INITIAL_FORMS\": \"0\",\n... }\n>>> formset = ArticleFormSet(data)\n>>> formset.is_valid()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using filesizeformat Filter\nDESCRIPTION: Shows how to format file sizes in a human-readable format using the filesizeformat filter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_71\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|filesizeformat }}\n```\n\n----------------------------------------\n\nTITLE: Using Round Function in Django Models\nDESCRIPTION: Shows how to round numeric values and register Round as a transform\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Round\n>>> Vector.objects.create(x=5.4, y=-2.37)\n>>> vector = Vector.objects.annotate(x_r=Round(\"x\"), y_r=Round(\"y\", precision=1)).get()\n>>> vector.x_r, vector.y_r\n(5.0, -2.4)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import FloatField\n>>> from django.db.models.functions import Round\n>>> FloatField.register_lookup(Round)\n>>> # Get vectors whose round() is less than 20\n>>> vectors = Vector.objects.filter(x__round__lt=20, y__round__lt=20)\n```\n\n----------------------------------------\n\nTITLE: Launching Shell with Verbose Auto Imports - Django - Shell\nDESCRIPTION: Demonstrates how to start the Django management shell with automatic model import from all installed apps, using the --verbosity flag to show detailed information about the imports. This requires an existing Django project and assumes access to the manage.py utility. Inputs are command-line arguments; the output includes printed import statements for various core Django models.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ python -Wall manage.py shell --verbosity=2\n6 objects imported automatically, including:\n\n  from django.contrib.admin.models import LogEntry\n  from django.contrib.auth.models import Group, Permission, User\n  from django.contrib.contenttypes.models import ContentType\n  from django.contrib.sessions.models import Session\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authorization Logic in a Django Authentication Backend (Python)\nDESCRIPTION: This code illustrates how to add permission logic to a custom Django authentication backend. The MagicAdminBackend class extends BaseBackend and implements has_perm, granting all permissions to a user whose username matches the ADMIN_LOGIN value from settings. Key dependencies include django.contrib.auth and settings. The input parameters are the user object and permission string; the output is a boolean granting permission based on the logic implemented.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.backends import BaseBackend\n\n\nclass MagicAdminBackend(BaseBackend):\n    def has_perm(self, user_obj, perm, obj=None):\n        return user_obj.username == settings.ADMIN_LOGIN\n\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Covered by Geometry in Django\nDESCRIPTION: Illustrates using the coveredby spatial lookup to filter Zipcode objects whose polygon is completely covered by a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__coveredby=geom)\n```\n\n----------------------------------------\n\nTITLE: Creating a flexible custom makemessages command with arguments\nDESCRIPTION: Creates a more flexible custom makemessages command with an additional argument for specifying extra keywords to be passed to xgettext.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management.commands import makemessages\n\n\nclass Command(makemessages.Command):\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\n            \"--extra-keyword\",\n            dest=\"xgettext_keywords\",\n            action=\"append\",\n        )\n\n    def handle(self, *args, **options):\n        xgettext_keywords = options.pop(\"xgettext_keywords\")\n        if xgettext_keywords:\n            self.xgettext_options = makemessages.Command.xgettext_options[:] + [\n                \"--keyword=%s\" % kwd for kwd in xgettext_keywords\n            ]\n        super().handle(*args, **options)\n```\n\n----------------------------------------\n\nTITLE: Creating MANIFEST.in for Django App Package\nDESCRIPTION: Defines the MANIFEST.in file for a Django app package. This file specifies additional files to be included in the package distribution, such as static files and templates.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nrecursive-include django_polls/static *\nrecursive-include django_polls/templates *\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual BoundField Objects in Django Forms\nDESCRIPTION: Examples of how to access individual fields in a Django form as BoundField objects using dictionary syntax and iteration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> form = ContactForm()\n>>> print(form[\"subject\"])\n<input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required>\n\n>>> form = ContactForm()\n>>> for boundfield in form:\n...     print(boundfield)\n...\n<input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required>\n<input type=\"text\" name=\"message\" id=\"id_message\" required>\n<input type=\"email\" name=\"sender\" id=\"id_sender\" required>\n<input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\">\n```\n\n----------------------------------------\n\nTITLE: Django Admin Documentation View Example\nDESCRIPTION: Example of a callable view object that previously caused crashes in django.contrib.admindocs but was fixed in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.13.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.syndication.views.Feed\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Model with ArrayField\nDESCRIPTION: Defines a Post model with an ArrayField to store tags. This example demonstrates how to use ArrayField with a base field of CharField and allows for blank values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.fields import ArrayField\nfrom django.db import models\n\n\nclass Post(models.Model):\n    name = models.CharField(max_length=200)\n    tags = ArrayField(models.CharField(max_length=200), blank=True)\n\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Using stringformat Filter in Django Templates\nDESCRIPTION: The stringformat filter formats the variable according to a string formatting specifier, using the old-string-formatting syntax without the leading '%'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_87\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|stringformat:\"E\" }}\n```\n\n----------------------------------------\n\nTITLE: Custom FileSystemStorage Example in Django\nDESCRIPTION: Example of using Django's FileSystemStorage with a custom location. This allows storing files in a specific directory regardless of the MEDIA_ROOT setting.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\n\nfs = FileSystemStorage(location=\"/media/photos\")\n\n\nclass Car(models.Model):\n    ...\n    photo = models.ImageField(storage=fs)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field in Django Model\nDESCRIPTION: Example of how to use a custom field (BetterCharField) in a Django model definition.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass MyModel(models.Model):\n    # ...\n    my_field = BetterCharField(25)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Idempotency of M2M Add Operation (pycon)\nDESCRIPTION: Shows that calling `add()` with a `Publication` (`p3`) that is already related to the `Article` (`a2`) does not create a duplicate relationship or raise an error. The operation is idempotent.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a2.publications.add(p3)\n```\n\n----------------------------------------\n\nTITLE: Calling QuerySet Methods like `count()` in Django Templates\nDESCRIPTION: Demonstrates accessing methods on objects returned by other methods within a Django template. Specifically, it calls the `count()` method on the QuerySet returned by `task.comment_set.all` to display the number of comments related to the `task` object. No arguments can be passed to methods called this way.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_26\n\nLANGUAGE: html+django\nCODE:\n```\n{{ task.comment_set.all.count }}\n```\n\n----------------------------------------\n\nTITLE: Handling Forward References in Django Deserialization\nDESCRIPTION: Demonstrates how to handle forward references when deserializing data with natural keys by using handle_forward_references=True and managing deferred fields.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nobjs_with_deferred_fields = []\n\nfor obj in serializers.deserialize(\"xml\", data, handle_forward_references=True):\n    obj.save()\n    if obj.deferred_fields is not None:\n        objs_with_deferred_fields.append(obj)\n\nfor obj in objs_with_deferred_fields:\n    obj.save_deferred_fields()\n```\n\n----------------------------------------\n\nTITLE: Rendering a Django Tag with Variable Resolution (Python)\nDESCRIPTION: This Python snippet defines the `FormatTimeNode` class for a Django template tag. In its `__init__` method, it stores the name of the variable to be formatted as a `template.Variable` instance and the format string. The `render` method resolves the actual value of the variable using `self.date_to_be_formatted.resolve(context)`, formats it using `strftime`, and returns the formatted string. It includes error handling for `template.VariableDoesNotExist`, returning an empty string if the variable cannot be found in the context.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass FormatTimeNode(template.Node):\n    def __init__(self, date_to_be_formatted, format_string):\n        self.date_to_be_formatted = template.Variable(date_to_be_formatted)\n        self.format_string = format_string\n\n    def render(self, context):\n        try:\n            actual_date = self.date_to_be_formatted.resolve(context)\n            return actual_date.strftime(self.format_string)\n        except template.VariableDoesNotExist:\n            return \"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Secure Connection in Django\nDESCRIPTION: Shows the method to check if a request is secure in Django. This method's behavior was impacted by the security fix to ensure correct HTTPS detection.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHttpRequest.is_secure()\n```\n\n----------------------------------------\n\nTITLE: Submitting Multiple Values for a Select Field in Django Test Client POST\nDESCRIPTION: Demonstrates how to submit multiple values for a select field using the Django test client's POST method. The example shows submitting three selected values for a field named 'choices'.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{\"choices\": [\"a\", \"b\", \"d\"]}\n```\n\n----------------------------------------\n\nTITLE: Parsing Times with Django's parse_time\nDESCRIPTION: Parses a string and returns a datetime.time object. Doesn't support UTC offsets, returning None if one is present. Returns None for badly formatted strings and raises ValueError for well-formatted but invalid times.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nparse_time(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom RemoteUserMiddleware\nDESCRIPTION: Configuration of Django MIDDLEWARE setting to use a custom RemoteUserMiddleware implementation for authentication.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    \"...\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"mysite.middleware.CustomHeaderRemoteUserMiddleware\",\n    \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Model in Django 1.0 (Python)\nDESCRIPTION: This snippet demonstrates the updated `Author` model definition for Django 1.0. It replaces `maxlength` with `max_length`, removes the `prepopulate_from` argument (moved to admin.py), removes the inner `Admin` class, and replaces the `__str__` method with `__unicode__` which should return a Unicode string.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Author(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    slug = models.CharField(max_length=60)\n\n    def __unicode__(self):\n        return u\"%s %s\" % (self.first_name, self.last_name)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Managers for Proxy Models in Django\nDESCRIPTION: This example demonstrates how to define a custom manager for a proxy model, which becomes the default manager for the proxy while still maintaining access to the parent model's managers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass NewManager(models.Manager):\n    # ...\n    pass\n\n\nclass MyPerson(Person):\n    objects = NewManager()\n\n    class Meta:\n        proxy = True\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Many-to-Many Relationship in Django\nDESCRIPTION: Creates Person and Group models with a many-to-many relationship between them. Group has a members field that references multiple Person objects through a ManyToManyField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n\nclass Group(models.Model):\n    name = models.CharField(max_length=128)\n    members = models.ManyToManyField(Person, related_name=\"groups\")\n```\n\n----------------------------------------\n\nTITLE: Django Authentication Form Security Fix References\nDESCRIPTION: Code references mentioned in the security fix documentation, highlighting the classes and methods affected by CVE-2018-6188 vulnerability in the AuthenticationForm implementation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.forms.AuthenticationForm\n```\n\nLANGUAGE: python\nCODE:\n```\nconfirm_login_allowed()\n```\n\nLANGUAGE: python\nCODE:\n```\nis_active=False\n```\n\nLANGUAGE: python\nCODE:\n```\nModelBackend\n```\n\nLANGUAGE: python\nCODE:\n```\ncontrib.auth.authenticate()\n```\n\nLANGUAGE: python\nCODE:\n```\nModelAdmin.raw_id_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Git user information\nDESCRIPTION: Sets up the user's name and email for Git commits. This information is used to associate commits with the user's GitHub account.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git config --global user.name \"Your Real Name\"\n$ git config --global user.email \"you@email.com\"\n```\n\n----------------------------------------\n\nTITLE: Implicitly Refreshing a Django Model Field via Deletion (Pycon)\nDESCRIPTION: Demonstrates using the Python interactive console (`pycon`) how deleting a field attribute from a fetched Django model instance (`obj.field`) and subsequently accessing it (`obj.field`) implicitly triggers a database query to reload just that field's value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> obj = MyModel.objects.first()\n>>> del obj.field\n>>> obj.field  # Loads the field from the database\n```\n\n----------------------------------------\n\nTITLE: Importing GeoDjango Utils Module\nDESCRIPTION: Module import statement for GeoDjango's utility collection, which provides tools for geospatial web application development.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/utils.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.gis.utils\n```\n\n----------------------------------------\n\nTITLE: Removed Django Components and Features\nDESCRIPTION: This snippet lists various Django components, classes, methods, and features that have been removed in version 2.0. It includes removals from multiple modules such as utils, template, contrib, gis, and core Django functionalities.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.feedgenerator.RssFeed\napp_name argument to include()\nField._get_val_from_obj()\ndjango.template.loaders.eggs.Loader\ncurrent_app parameter to contrib.auth function-based views\ncallable_obj keyword argument to SimpleTestCase.assertRaisesMessage()\nallow_tags attribute on ModelAdmin methods\nenclosure keyword argument to SyndicationFeed.add_item()\ndjango.template.loader.LoaderOrigin\ndjango.template.base.StringOrigin\nmakemigrations --exit option\nget_srid() and set_srid() methods of django.contrib.gis.geos.GEOSGeometry\nget_x(), set_x(), get_y(), set_y(), get_z(), and set_z() methods of django.contrib.gis.geos.Point\nget_coords() and set_coords() methods of django.contrib.gis.geos.Point\ncascaded_union property of django.contrib.gis.geos.MultiPolygon\ndjango.utils.functional.allow_lazy()\nshell --plain option\ndjango.core.urlresolvers module\nCommaSeparatedIntegerField\nContext.has_key() method\nStorage.accessed_time(), created_time(), and modified_time() methods\nMySQL __search lookup\nUser.is_authenticated() and User.is_anonymous() as methods\nModel._meta.virtual_fields attribute\nvirtual_only in Field.contribute_to_class() and virtual in Model._meta.add_field()\njavascript_catalog() and json_catalog() views\ndjango.contrib.gis.utils.precision_wkt()\nWidget._format_value()\nFileField methods get_directory_name() and get_filename()\nmark_for_escaping() function and related classes\nManager.use_for_related_fields\nMeta.manager_inheritance_from_future\nsettings.MIDDLEWARE_CLASSES\n```\n\n----------------------------------------\n\nTITLE: Using Related Field Lookups for List Filters in Django Admin\nDESCRIPTION: Shows how to create list filters using related field lookups with the __ syntax in a Django ModelAdmin class.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/filters.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.UserAdmin):\n    list_filter = [\"company__name\"]\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Asynchronous Django Views\nDESCRIPTION: This example shows how to check user authentication in an asynchronous Django view using the auser() method, which returns a coroutine that must be awaited to get the user object.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nuser = await request.auser()\nif user.is_authenticated:\n    # Do something for authenticated users.\n    ...\nelse:\n    # Do something for anonymous users.\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Based Middleware in Django\nDESCRIPTION: A template for creating function-based middleware in Django. This pattern shows the standard structure with initialization and request/response processing. The middleware function accepts a get_response callable and returns another callable that processes each request.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef simple_middleware(get_response):\n    # One-time configuration and initialization.\n\n    def middleware(request):\n        # Code to be executed for each request before\n        # the view (and later middleware) are called.\n\n        response = get_response(request)\n\n        # Code to be executed for each request/response after\n        # the view is called.\n\n        return response\n\n    return middleware\n```\n\n----------------------------------------\n\nTITLE: Setting X-XSS-Protection Header in Django Middleware - Python\nDESCRIPTION: This snippet demonstrates how to set the 'X-XSS-Protection' HTTP header in a custom Django middleware, intended for legacy browser support since this header is no longer set by SecurityMiddleware in Django 4.0. The code should be placed in a custom middleware class and assumes access to the 'response' object within the 'process_response' or equivalent handler. Includes no external dependencies beyond Django's core middleware framework.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse.headers.setdefault(\"X-XSS-Protection\", \"1; mode=block\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Field for Custom Django Model Field\nDESCRIPTION: This snippet demonstrates how to override the formfield method to customize the form field used by ModelForm for a custom field.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nclass HandField(models.Field):\n    # ...\n\n    def formfield(self, **kwargs):\n        # Exclude the field from the ModelForm when some condition is met.\n        some_condition = kwargs.get(\"some_condition\", False)\n        if some_condition:\n            return None\n\n        # Set up some defaults while letting the caller override them.\n        defaults = {\"form_class\": MyFormField}\n        defaults.update(kwargs)\n        return super().formfield(**defaults)\n```\n\n----------------------------------------\n\nTITLE: Using dwithin Filter in GeoDjango\nDESCRIPTION: Example of using the dwithin lookup to filter Zipcode objects where the distance between the geometry field and the lookup geometry is within the specified distance (5 meters).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__dwithin=(geom, D(m=5)))\n```\n\n----------------------------------------\n\nTITLE: Using Localize Template Filter in Django Templates\nDESCRIPTION: Example of using the 'localize' template filter to force localization of a single value in a Django template. This allows applying locale-specific formatting to individual values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% load l10n %}\n\n{{ value|localize }}\n```\n\n----------------------------------------\n\nTITLE: Addressing Memory Exhaustion in django.utils.numberformat.format() (Python)\nDESCRIPTION: Addresses CVE-2019-6975 where `django.utils.numberformat.format()` could cause significant memory usage when formatting `Decimal` instances with many digits or large exponents via `'{:f}'.format()`. The fix involves formatting decimals with over 200 digits using scientific notation. This function is used internally by `contrib.admin` and the `floatformat`, `filesizeformat`, and `intcomma` template filters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.numberformat.format()\n```\n\nLANGUAGE: python\nCODE:\n```\ncontrib.admin\n```\n\nLANGUAGE: django\nCODE:\n```\nfloatformat\n```\n\nLANGUAGE: django\nCODE:\n```\nfilesizeformat\n```\n\nLANGUAGE: django\nCODE:\n```\nintcomma\n```\n\nLANGUAGE: python\nCODE:\n```\n'{:f}'.format()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django StringAgg Aggregation Function in Python\nDESCRIPTION: This snippet demonstrates how to reference the StringAgg aggregation function from Django's contrib.postgres.aggregates module. The function was subject to a SQL injection vulnerability in previous versions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.28.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.aggregates import StringAgg\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Relationships in Oracle Spatial\nDESCRIPTION: Example of using the 'relate' lookup with Oracle-specific relation strings to define geometric relationships in Oracle Spatial.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__relate=(geom, \"anyinteract\"))\n```\n\n----------------------------------------\n\nTITLE: Django URL Converter Registration Change\nDESCRIPTION: The URL converter registration function no longer allows overwriting existing converters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndjango.urls.register_converter()\n```\n\n----------------------------------------\n\nTITLE: Using makemessages with ignore patterns in Django\nDESCRIPTION: Example of using the Django makemessages command with ignore patterns. This allows excluding specific files or directories from being processed for translations using glob-style patterns.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin makemessages --locale=en_US --ignore=apps/* --ignore=secret/*.html\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with JSONField in Django\nDESCRIPTION: Demonstrates how to define a Django model that includes a JSONField for storing JSON data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Dog(models.Model):\n    name = models.CharField(max_length=200)\n    data = models.JSONField(null=True)\n\n    def __str__(self):\n        return self.name\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Feed Type in Django Feed Class - Python\nDESCRIPTION: This Python snippet demonstrates how to specify a custom feed type (such as Atom 1.0) in a Django syndication Feed class by setting the 'feed_type' class attribute. The code requires importing Atom1Feed from django.utils.feedgenerator and expects integration into a Django project with properly configured syndication and feedgenerator modules. The key parameter is 'feed_type', which should be set to a class (not an instance); changing it alters the output feed format. The output is a Django feed view that emits Atom if the feed_type is set accordingly.\n\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.feedgenerator import Atom1Feed\n\nclass MyFeed(Feed):\n    feed_type = Atom1Feed\n```\n\n----------------------------------------\n\nTITLE: Bugfix for Auto-reloader with Empty DIRS in TEMPLATES (Python/Django)\nDESCRIPTION: Fixes a regression in Django 3.2.4 where the auto-reloader failed to detect changes when the DIRS option in TEMPLATES setting contained an empty string.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.13.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTEMPLATES = [\n    {\n        'DIRS': [''],\n        # other options...\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Django WSGI Script with Authentication Support\nDESCRIPTION: WSGI script that integrates Django's authentication with Apache. The script imports the check_password function from Django's auth handlers to verify user credentials.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"\n\nfrom django.contrib.auth.handlers.modwsgi import check_password\n\nfrom django.core.handlers.wsgi import WSGIHandler\n\napplication = WSGIHandler()\n```\n\n----------------------------------------\n\nTITLE: Handling Lists with querystring Tag in Django Templates\nDESCRIPTION: This snippet shows how querystring tag handles list values. When a list is passed, it preserves the list structure in the query string, creating multiple parameters with the same key.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_29\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring color=my_list %}\n```\n\n----------------------------------------\n\nTITLE: Importing URL Resolver Exceptions\nDESCRIPTION: Demonstrates how to import URL resolver exceptions from the django.urls module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import Resolver404, NoReverseMatch\n```\n\n----------------------------------------\n\nTITLE: Accessing Child Models from Parent Instances in Django\nDESCRIPTION: Example showing how to navigate from a parent model instance to its child model instance using the lowercase model name as an attribute in multi-table inheritance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Place.objects.get(id=12)\n# If p is a Restaurant object, this will give the child class:\n>>> p.restaurant\n<Restaurant: ...>\n```\n\n----------------------------------------\n\nTITLE: Configuring CallbackFilter in Django Logging Settings\nDESCRIPTION: This Django `LOGGING` configuration snippet shows how to define and apply a `CallbackFilter`. It defines a filter named `skip_unreadable_posts` which uses the `CallbackFilter` class and passes the previously defined `skip_unreadable_post` function as the callback. This filter is then applied to the `mail_admins` handler, preventing `UnreadablePostError` exceptions from triggering admin emails.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    # ...\n    \"filters\": {\n        \"skip_unreadable_posts\": {\n            \"()\": \"django.utils.log.CallbackFilter\",\n            \"callback\": skip_unreadable_post,\n        },\n    },\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"skip_unreadable_posts\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        },\n    },\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: FileField Deconstruction Fix\nDESCRIPTION: Fixed bug where FileField instances with callable storage were not correctly deconstructed in Django 3.1.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFileField\n```\n\n----------------------------------------\n\nTITLE: Deprecating Tuple Format for ADMINS/MANAGERS Settings (Python)\nDESCRIPTION: Setting `ADMINS` or `MANAGERS` to a list of `(name, address)` tuples is deprecated. Use a list of email address strings instead. Names can be included using the format '\"Name\" <address>'.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nADMINS = [('Admin Name', 'admin@example.com')] # Deprecated\n```\n\nLANGUAGE: python\nCODE:\n```\nADMINS = ['\"Admin Name\" <admin@example.com>'] # Recommended\n```\n\n----------------------------------------\n\nTITLE: Defining a Model in Django 0.96 (Python)\nDESCRIPTION: This snippet shows an example `Author` model definition in Django 0.96. It uses `maxlength` for CharField, includes `prepopulate_from` for the slug field, defines an inner `Admin` class for admin configuration, and uses the `__str__` method for string representation. This structure is deprecated in Django 1.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Author(models.Model):\n    first_name = models.CharField(maxlength=30)\n    last_name = models.CharField(maxlength=30)\n    slug = models.CharField(maxlength=60, prepopulate_from=(\"first_name\", \"last_name\"))\n\n    class Admin:\n        list_display = [\"first_name\", \"last_name\"]\n\n    def __str__(self):\n        return \"%s %s\" % (self.first_name, self.last_name)\n```\n\n----------------------------------------\n\nTITLE: Using safeseq template filter in Django\nDESCRIPTION: Shows how to use the new safeseq template filter to mark each item in a list as safe for output without escaping.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_9\n\nLANGUAGE: Django Template\nCODE:\n```\n{{ my_list|safeseq }}\n```\n\n----------------------------------------\n\nTITLE: Linking Django Release Notes using reStructuredText toctree\nDESCRIPTION: These snippets use the reStructuredText `toctree` directive to generate tables of contents that link to specific Django release note documents. Each `toctree` corresponds to a major Django release series (e.g., 6.0, 5.2, 5.1, etc.) and lists the pages for the major version and its subsequent patch releases. The `:maxdepth: 1` option ensures that only the top-level headings from the linked documents are included in the generated table of contents for this index page. This pattern is repeated for all documented Django versions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   6.0\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   5.2.1\n   5.2\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   5.1.9\n   5.1.8\n   5.1.7\n   5.1.6\n   5.1.5\n   5.1.4\n   5.1.3\n   5.1.2\n   5.1.1\n   5.1\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   5.0.14\n   5.0.13\n   5.0.12\n   5.0.11\n   5.0.10\n   5.0.9\n   5.0.8\n   5.0.7\n   5.0.6\n   5.0.5\n   5.0.4\n   5.0.3\n   5.0.2\n   5.0.1\n   5.0\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   4.2.21\n   4.2.20\n   4.2.19\n   4.2.18\n   4.2.17\n   4.2.16\n   4.2.15\n   4.2.14\n   4.2.13\n   4.2.12\n   4.2.11\n   4.2.10\n   4.2.9\n   4.2.8\n   4.2.7\n   4.2.6\n   4.2.5\n   4.2.4\n   4.2.3\n   4.2.2\n   4.2.1\n   4.2\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   4.1.13\n   4.1.12\n   4.1.11\n   4.1.10\n   4.1.9\n   4.1.8\n   4.1.7\n   4.1.6\n   4.1.5\n   4.1.4\n   4.1.3\n   4.1.2\n   4.1.1\n   4.1\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   4.0.10\n   4.0.9\n   4.0.8\n   4.0.7\n   4.0.6\n   4.0.5\n   4.0.4\n   4.0.3\n   4.0.2\n   4.0.1\n   4.0\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   3.2.25\n   3.2.24\n   3.2.23\n   3.2.22\n   3.2.21\n   3.2.20\n   3.2.19\n   3.2.18\n   3.2.17\n   3.2.16\n   3.2.15\n   3.2.14\n   3.2.13\n   3.2.12\n   3.2.11\n   3.2.10\n   3.2.9\n   3.2.8\n   3.2.7\n   3.2.6\n   3.2.5\n   3.2.4\n   3.2.3\n   3.2.2\n   3.2.1\n   3.2\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   3.1.14\n   3.1.13\n   3.1.12\n   3.1.11\n   3.1.10\n   3.1.9\n   3.1.8\n   3.1.7\n   3.1.6\n   3.1.5\n   3.1.4\n   3.1.3\n   3.1.2\n   3.1.1\n   3.1\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   3.0.14\n   3.0.13\n   3.0.12\n   3.0.11\n   3.0.10\n   3.0.9\n   3.0.8\n   3.0.7\n   3.0.6\n   3.0.5\n   3.0.4\n   3.0.3\n   3.0.2\n   3.0.1\n   3.0\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   2.2.28\n   2.2.27\n   2.2.26\n   2.2.25\n   2.2.24\n   2.2.23\n   2.2.22\n   2.2.21\n   2.2.20\n   2.2.19\n   2.2.18\n   2.2.17\n   2.2.16\n   2.2.15\n   2.2.14\n   2.2.13\n   2.2.12\n   2.2.11\n   2.2.10\n   2.2.9\n   2.2.8\n   2.2.7\n   2.2.6\n   2.2.5\n   2.2.4\n   2.2.3\n   2.2.2\n   2.2.1\n   2.2\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   2.1.15\n   2.1.14\n   2.1.13\n   2.1.12\n   2.1.11\n   2.1.10\n   2.1.9\n   2.1.8\n   2.1.7\n   2.1.6\n   2.1.5\n   2.1.4\n   2.1.3\n   2.1.2\n   2.1.1\n   2.1\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   2.0.13\n   2.0.12\n   2.0.11\n   2.0.10\n   2.0.9\n   2.0.8\n   2.0.7\n   2.0.6\n   2.0.5\n   2.0.4\n   2.0.3\n   2.0.2\n   2.0.1\n   2.0\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.11.29\n   1.11.28\n   1.11.27\n   1.11.26\n   1.11.25\n   1.11.24\n   1.11.23\n   1.11.22\n   1.11.21\n   1.11.20\n   1.11.19\n   1.11.18\n   1.11.17\n   1.11.16\n   1.11.15\n   1.11.14\n   1.11.13\n   1.11.12\n   1.11.11\n   1.11.10\n   1.11.9\n   1.11.8\n   1.11.7\n   1.11.6\n   1.11.5\n   1.11.4\n   1.11.3\n   1.11.2\n   1.11.1\n   1.11\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.10.8\n   1.10.7\n   1.10.6\n   1.10.5\n   1.10.4\n   1.10.3\n   1.10.2\n   1.10.1\n   1.10\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.9.13\n   1.9.12\n   1.9.11\n   1.9.10\n   1.9.9\n   1.9.8\n   1.9.7\n   1.9.6\n   1.9.5\n   1.9.4\n   1.9.3\n   1.9.2\n   1.9.1\n   1.9\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.8.19\n   1.8.18\n   1.8.17\n   1.8.16\n   1.8.15\n   1.8.14\n   1.8.13\n   1.8.12\n   1.8.11\n   1.8.10\n   1.8.9\n   1.8.8\n   1.8.7\n   1.8.6\n   1.8.5\n   1.8.4\n   1.8.3\n   1.8.2\n   1.8.1\n   1.8\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.7.11\n   1.7.10\n   1.7.9\n   1.7.8\n   1.7.7\n   1.7.6\n   1.7.5\n   1.7.4\n   1.7.3\n   1.7.2\n   1.7.1\n   1.7\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.6.11\n   1.6.10\n   1.6.9\n   1.6.8\n   1.6.7\n   1.6.6\n   1.6.5\n   1.6.4\n   1.6.3\n   1.6.2\n   1.6.1\n   1.6\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.5.12\n   1.5.11\n   1.5.10\n   1.5.9\n   1.5.8\n   1.5.7\n   1.5.6\n   1.5.5\n   1.5.4\n   1.5.3\n   1.5.2\n   1.5.1\n   1.5\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.4.22\n   1.4.21\n   1.4.20\n   1.4.19\n   1.4.18\n   1.4.17\n   1.4.16\n   1.4.15\n   1.4.14\n   1.4.13\n   1.4.12\n   1.4.11\n   1.4.10\n   1.4.9\n   1.4.8\n   1.4.7\n   1.4.6\n   1.4.5\n   1.4.4\n   1.4.3\n   1.4.2\n   1.4.1\n   1.4\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.3.7\n   1.3.6\n   1.3.5\n   1.3.4\n   1.3.3\n   1.3.2\n   1.3.1\n   1.3\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.2.7\n   1.2.6\n   1.2.5\n   1.2.4\n   1.2.3\n   1.2.2\n   1.2.1\n   1.2\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.1.4\n   1.1.3\n   1.1.2\n   1.1\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   1.0.2\n   1.0.1\n   1.0\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   0.96\n   0.95\n```\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n\n   security\n```\n\n----------------------------------------\n\nTITLE: DeletionMixin Class Definition in Django\nDESCRIPTION: A mixin that handles object deletion operations with success URL redirect functionality. Implements DELETE HTTP method handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass DeletionMixin:\n    success_url = None\n\n    def delete(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        self.object.delete()\n        return HttpResponseRedirect(self.get_success_url())\n\n    def get_success_url(self):\n        return self.success_url\n```\n\n----------------------------------------\n\nTITLE: Conditional Aggregation: Counting Clients per Type - Django ORM - Python\nDESCRIPTION: Shows how to aggregate counts of each account_type by using Count with filter=Q(...) for conditional aggregation in Django ORM. Includes setup code creating additional example clients, and demonstrates a single aggregate query returning counts per type. Relies on Django's Count and Q query constructs, and requires a set of Client records for meaningful output.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/conditional-expressions.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> # Create some more Clients first so we can have something to count\n>>> Client.objects.create(\n...     name=\"Jean Grey\", account_type=Client.REGULAR, registered_on=date.today()\n... )\n>>> Client.objects.create(\n...     name=\"James Bond\", account_type=Client.PLATINUM, registered_on=date.today()\n... )\n>>> Client.objects.create(\n...     name=\"Jane Porter\", account_type=Client.PLATINUM, registered_on=date.today()\n... )\n>>> # Get counts for each value of account_type\n>>> from django.db.models import Count\n>>> Client.objects.aggregate(\n...     regular=Count(\"pk\", filter=Q(account_type=Client.REGULAR)),\n...     gold=Count(\"pk\", filter=Q(account_type=Client.GOLD)),\n...     platinum=Count(\"pk\", filter=Q(account_type=Client.PLATINUM)),\n... )\n{'regular': 2, 'gold': 1, 'platinum': 3}\n```\n\n----------------------------------------\n\nTITLE: Using F Expression Bitwise Operations\nDESCRIPTION: F expressions now support bitwise operations using .bitand() and .bitor() methods instead of & and | operators.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.bitand()\n.bitor()\n```\n\n----------------------------------------\n\nTITLE: Registering Custom AdminSite in URLconf (Python)\nDESCRIPTION: This snippet shows how to register a custom AdminSite instance in the project's URLconf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_80\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.admin import admin_site\n\nurlpatterns = [\n    path(\"myadmin/\", admin_site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Building and Installing PROJ\nDESCRIPTION: Commands to build and install PROJ from source using CMake.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd proj-X.Y.Z\n$ mkdir build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ sudo cmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Customizing Ordering Widget in Django Formset\nDESCRIPTION: Shows how to customize the widget used for ordering in a Django formset by setting the ordering_widget attribute or overriding the get_ordering_widget method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import BaseFormSet, formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     ordering_widget = HiddenInput\n...\n\n>>> ArticleFormSet = formset_factory(\n...     ArticleForm, formset=BaseArticleFormSet, can_order=True\n... )\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.forms import BaseFormSet, formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     def get_ordering_widget(self):\n...         return HiddenInput(attrs={\"class\": \"ordering\"})\n...\n\n>>> ArticleFormSet = formset_factory(\n...     ArticleForm, formset=BaseArticleFormSet, can_order=True\n... )\n```\n\n----------------------------------------\n\nTITLE: Using pgettext for Contextual Translation in JavaScript\nDESCRIPTION: Demonstrates the pgettext function for providing contextually translated words in JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.write(pgettext(\"month name\", \"May\"))\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: contains Lookup (Python)\nDESCRIPTION: Shows how to filter Django model objects using the HStoreField 'contains' lookup, which returns objects where all provided key-value pairs exist in the hstore field (backed by SQL @> operator). Requires Django, PostgreSQL with hstore, and HStoreField present on a model. Inputs are dicts of filter conditions; outputs are QuerySets containing matching model instances. Limitation: Only keys and values present in the filter dict will be matched exactly.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\", \"owner\": \"Bob\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n>>> Dog.objects.create(name=\"Fred\", data={})\\n\\n>>> Dog.objects.filter(data__contains={\"owner\": \"Bob\"})\\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.filter(data__contains={\"breed\": \"collie\"})\\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Auto Field in Django Settings\nDESCRIPTION: Sets the DEFAULT_AUTO_FIELD setting to use AutoField as the default primary key type for models.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDEFAULT_AUTO_FIELD = \"django.db.models.AutoField\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Feed with Static File Stylesheet\nDESCRIPTION: This snippet shows how to use Django's static files system to provide a stylesheet for an RSS feed by leveraging the static template tag.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.templatetags.static import static\n\n\nclass FeedWithStaticFileStylesheet(Feed):\n    stylesheets = [\n        static(\"rss_styles.xslt\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Checking Default Model Permissions in Django (Python)\nDESCRIPTION: Illustrates how to check if a user (`user`) has specific default permissions (add, change, delete, view) for a given model ('Bar' in app 'foo'). This is done using the `user.has_perm()` method, passing the permission string in the format 'app_label.action_modelname'.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# add: user.has_perm('foo.add_bar')\n# change: user.has_perm('foo.change_bar')\n# delete: user.has_perm('foo.delete_bar')\n# view: user.has_perm('foo.view_bar')\n```\n\n----------------------------------------\n\nTITLE: Using blocktranslate tag with context in Django templates\nDESCRIPTION: Shows how to use the context keyword with the {% blocktranslate %} tag to provide contextual information for translation.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_26\n\nLANGUAGE: html+django\nCODE:\n```\n{% blocktranslate with name=user.username context \"greeting\" %}Hi {{ name }}{% endblocktranslate %}\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Django Development\nDESCRIPTION: Commands to install pre-commit and configure Git hooks for automatic code checking and formatting before committing code for review. This helps identify simple issues early and standardizes code formatting.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m pip install pre-commit\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Defining LoginForm with PasswordInput widget - Django Forms - Python\nDESCRIPTION: Defines a custom LoginForm using Django's forms.Form with a password field rendered using the PasswordInput widget. The render_value parameter is explicitly set to True, replicating pre-1.3 behavior where the password value is sent back to the browser when a form is rendered with errors. Depends on django.forms being available. Key parameters include max_length for username (100), and render_value for PasswordInput which, if True, can expose password values in the form, potentially reducing security.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass LoginForm(forms.Form):\n    username = forms.CharField(max_length=100)\n    password = forms.CharField(widget=forms.PasswordInput(render_value=True))\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub for Django Contribution\nDESCRIPTION: Shows the Git command to push local changes to a fork on GitHub. The branch name 'ticket_99999' is used as an example and should be replaced with the actual branch name.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ git push origin ticket_99999\n```\n\n----------------------------------------\n\nTITLE: Atomic Field Update Using F Expressions - Django ORM - Python\nDESCRIPTION: This snippet leverages Django's F expressions to perform an atomic, in-database increment of a model field. By assigning F(\"number_sold\") + 1 to the number_sold attribute and calling save(), the update is executed directly in the database, reducing the risk of race conditions. Requirements include importing F from django.db.models and having an existing Product model instance. Inputs: product name for retrieval; output: number_sold is incremented in an atomic transaction. Limitation: F expressions can't be used outside save() or update() queries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import F\n>>> product = Product.objects.get(name=\"Venezuelan Beaver Cheese\")\n>>> product.number_sold = F(\"number_sold\") + 1\n>>> product.save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for runserver Output (Django Python)\nDESCRIPTION: This snippet provides a sample Django `LOGGING` configuration dictionary. It's needed if Django's default logging is disabled or overridden, ensuring that request/response output from the `runserver` command is still visible by explicitly configuring a handler and logger for `django.server` using `django.utils.log.ServerFormatter`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    # ...\n    \"formatters\": {\n        \"django.server\": {\n            \"()\": \"django.utils.log.ServerFormatter\",\n            \"format\": \"[%(server_time)s] %(message)s\",\n        }\n    },\n    \"handlers\": {\n        \"django.server\": {\n            \"level\": \"INFO\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"django.server\",\n        },\n    },\n    \"loggers\": {\n        \"django.server\": {\n            \"handlers\": [\"django.server\"],\n            \"level\": \"INFO\",\n            \"propagate\": False,\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Processing View with SingleObjectMixin in Django\nDESCRIPTION: FormView implementation with SingleObjectMixin for handling form submissions with author context.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseForbidden\nfrom django.urls import reverse\nfrom django.views.generic import FormView\nfrom django.views.generic.detail import SingleObjectMixin\n\n\nclass AuthorInterestFormView(SingleObjectMixin, FormView):\n    template_name = \"books/author_detail.html\"\n    form_class = AuthorInterestForm\n    model = Author\n\n    def post(self, request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            return HttpResponseForbidden()\n        self.object = self.get_object()\n        return super().post(request, *args, **kwargs)\n\n    def get_success_url(self):\n        return reverse(\"author-detail\", kwargs={\"pk\": self.object.pk})\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Field Properties Example\nDESCRIPTION: Example of Django field property reference syntax as shown in error messages\nSOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp_label.model.field_name\n```\n\n----------------------------------------\n\nTITLE: HStoreField isnull Lookup\nDESCRIPTION: Reference to the isnull lookup for HStoreField that was fixed in Django 1.8.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nisnull\n```\n\n----------------------------------------\n\nTITLE: Running Tests Starting at a Specific Module\nDESCRIPTION: This command runs Django's test suite starting from a specified top-level module (wsgi in this example), skipping all modules that would normally be run before it.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ./runtests.py --start-at=wsgi\n```\n\n----------------------------------------\n\nTITLE: Using FilteredRelation() with Multiple Relationships in Django\nDESCRIPTION: Fixes a regression in Django 4.0 where multiple FilteredRelation() relationships to the same field were ignored.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nFilteredRelation()\n```\n\n----------------------------------------\n\nTITLE: Configuring File Handler in Django Logging\nDESCRIPTION: Shows how to configure a file handler to save logs to a general.log file with DEBUG level.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"handlers\": {\n    \"file\": {\n        \"class\": \"logging.FileHandler\",\n        \"filename\": \"general.log\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Localization in Form Fields with Python\nDESCRIPTION: Example of how to create a form with localized input and output data by using the 'localize' argument in a DecimalField. This allows Django to use locale-specific formats for parsing and displaying numbers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/formatting.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CashRegisterForm(forms.Form):\n    product = forms.CharField()\n    revenue = forms.DecimalField(max_digits=4, decimal_places=2, localize=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Date Formats with Django `formats` Module (Python)\nDESCRIPTION: This snippet demonstrates the recommended way to retrieve date, datetime, and time format strings using `formats.get_format()` from `django.utils.formats`. This function respects localization settings (`USE_L10N`) and falls back to default formats if localization is disabled.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import formats\n\ndate_format = formats.get_format(\"DATE_FORMAT\")\ndatetime_format = formats.get_format(\"DATETIME_FORMAT\")\ntime_format = formats.get_format(\"TIME_FORMAT\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Subclassed Custom Func for SQL Functions - Django ORM - Python\nDESCRIPTION: This snippet defines a custom Func subclass 'Lower' representing the SQL LOWER function, which can then be used to annotate querysets. This technique is preferred if the same function is needed in multiple places, allowing code reuse and clarity. Assumes you are working with fields compatible with the SQL LOWER function (i.e., strings).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Lower(Func):\n    function = \"LOWER\"\n\n\nqueryset.annotate(field_lower=Lower(\"field\"))\n```\n\n----------------------------------------\n\nTITLE: Using apnumber Filter in Django Template\nDESCRIPTION: Demonstrates the usage of the apnumber filter, which converts numbers 1-9 to words and leaves other numbers as is.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{{ 1|apnumber }} becomes one.\n{{ 2|apnumber }} becomes two.\n{{ 10|apnumber }} becomes 10.\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Using RunSQL in Django (Python)\nDESCRIPTION: Illustrates how to use the migration RunSQL operation to insert a new record directly into the 'musician' table. This snippet runs a single SQL statement upon migration and demonstrates using the SQL string as a parameter. No complex dependencies are required, only Django's migration framework. Input: None, Output: Executes insert on the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmigrations.RunSQL(\"INSERT INTO musician (name) VALUES ('Reinhardt');\")\n```\n\n----------------------------------------\n\nTITLE: Memory Exhaustion Vulnerability in django.utils.encoding.uri_to_iri (Python)\nDESCRIPTION: The uri_to_iri() function could lead to significant memory usage due to excessive recursion when re-percent-encoding invalid UTF-8 octet sequences. The function has been modified to avoid recursion in these cases.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.encoding.uri_to_iri\n```\n\n----------------------------------------\n\nTITLE: Passing Named Arguments to Django Management Commands\nDESCRIPTION: Demonstrates different syntax options for passing named arguments to Django management commands when using call_command().\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# Similar to the command line\nmanagement.call_command(\"dumpdata\", \"--natural-foreign\")\n\n# Named argument similar to the command line minus the initial dashes and\n# with internal dashes replaced by underscores\nmanagement.call_command(\"dumpdata\", natural_foreign=True)\n\n# `use_natural_foreign_keys` is the option destination variable\nmanagement.call_command(\"dumpdata\", use_natural_foreign_keys=True)\n```\n\n----------------------------------------\n\nTITLE: Using Contained_by Lookup with ArrayField in Django\nDESCRIPTION: Shows how to use the 'contained_by' lookup with ArrayField in Django. This example demonstrates querying for posts where the tags are a subset of the given values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Post.objects.create(name=\"First post\", tags=[\"thoughts\", \"django\"])\n>>> Post.objects.create(name=\"Second post\", tags=[\"thoughts\"])\n>>> Post.objects.create(name=\"Third post\", tags=[\"tutorial\", \"django\"])\n\n>>> Post.objects.filter(tags__contained_by=[\"thoughts\", \"django\"])\n<QuerySet [<Post: First post>, <Post: Second post>]>\n\n>>> Post.objects.filter(tags__contained_by=[\"thoughts\", \"django\", \"tutorial\"])\n<QuerySet [<Post: First post>, <Post: Second post>, <Post: Third post>]>\n```\n\n----------------------------------------\n\nTITLE: Implementing was_published_recently Method in Django Model\nDESCRIPTION: Method to check if a question was published recently, comparing publication date against current time with a 1-day threshold.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef was_published_recently(self):\n    now = timezone.now()\n    return now - datetime.timedelta(days=1) <= self.pub_date <= now\n```\n\n----------------------------------------\n\nTITLE: Creating Permissions for Proxy Models in Django\nDESCRIPTION: This snippet demonstrates how to create permissions for a proxy model by passing for_concrete_model=False to ContentTypeManager.get_for_model() to get the appropriate ContentType.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncontent_type = ContentType.objects.get_for_model(\n    BlogPostProxy, for_concrete_model=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Router in Django\nDESCRIPTION: Implementation of a Django database router to direct all operations for auth and contenttypes models to a dedicated auth_db database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AuthRouter:\n    \"\"\"\n    A router to control all database operations on models in the\n    auth and contenttypes applications.\n    \"\"\"\n\n    route_app_labels = {\"auth\", \"contenttypes\"}\n\n    def db_for_read(self, model, **hints):\n        \"\"\"\n        Attempts to read auth and contenttypes models go to auth_db.\n        \"\"\"\n        if model._meta.app_label in self.route_app_labels:\n            return \"auth_db\"\n        return None\n\n    def db_for_write(self, model, **hints):\n        \"\"\"\n        Attempts to write auth and contenttypes models go to auth_db.\n        \"\"\"\n        if model._meta.app_label in self.route_app_labels:\n            return \"auth_db\"\n        return None\n\n    def allow_relation(self, obj1, obj2, **hints):\n        \"\"\"\n        Allow relations if a model in the auth or contenttypes apps is\n        involved.\n        \"\"\"\n        if (\n            obj1._meta.app_label in self.route_app_labels\n            or obj2._meta.app_label in self.route_app_labels\n        ):\n            return True\n        return None\n\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        \"\"\"\n        Make sure the auth and contenttypes apps only appear in the\n        'auth_db' database.\n        \"\"\"\n        if app_label in self.route_app_labels:\n            return db == \"auth_db\"\n        return None\n```\n\n----------------------------------------\n\nTITLE: Importing NumericRange from psycopg_any in Python\nDESCRIPTION: Imports the `NumericRange` class from `django.db.backends.postgresql.psycopg_any`. This class is used to represent numeric ranges, typically when constructing lookup values for querying PostgreSQL numeric range fields (like `IntegerRangeField` or `DecimalRangeField`) via the Django ORM.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.backends.postgresql.psycopg_any import NumericRange\n```\n\n----------------------------------------\n\nTITLE: Secure SQL Position Function Implementation\nDESCRIPTION: Corrected implementation of the Position function that prevents SQL injection by using proper parameter passing.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nclass Position(Func):\n    function = \"POSITION\"\n    arg_joiner = \" IN \"\n\n    def __init__(self, expression, substring):\n        super().__init__(substring, expression)\n```\n\n----------------------------------------\n\nTITLE: Using get_static_prefix Template Tag\nDESCRIPTION: Shows how to use the get_static_prefix template tag for more control over where and how STATIC_URL is injected into the template. This provides direct access to the static URL prefix.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_108\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n<img src=\"{% get_static_prefix %}images/hi.jpg\" alt=\"Hi!\">\n```\n\n----------------------------------------\n\nTITLE: Registering GeoDjango Model with Basic Admin (Python)\nDESCRIPTION: Shows the code required in an `admin.py` file to register a GeoDjango model (`WorldBorder`) with the standard Django admin interface using `admin.ModelAdmin`. This enables basic viewing and editing of the model's fields, including a simple interface for the geometry field. Requires `django.contrib.gis.admin` and the model definition (e.g., `world.models.WorldBorder`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis import admin\nfrom .models import WorldBorder\n\nadmin.site.register(WorldBorder, admin.ModelAdmin)\n```\n\n----------------------------------------\n\nTITLE: Implementing get_db_prep_value for BinaryField in Django\nDESCRIPTION: Example of implementing get_db_prep_value method for Django's BinaryField, showing backend-specific conversion.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndef get_db_prep_value(self, value, connection, prepared=False):\n    value = super().get_db_prep_value(value, connection, prepared)\n    if value is not None:\n        return connection.Database.Binary(value)\n    return value\n```\n\n----------------------------------------\n\nTITLE: Defining a PositiveBigIntegerField in Django Models\nDESCRIPTION: Defines a Django model field similar to `PositiveIntegerField`, but supporting a larger range of positive integers (and zero). Values from 0 to 9223372036854775807 are safe across all Django-supported databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n.. class:: PositiveBigIntegerField(**options)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Year - SQL Equivalent\nDESCRIPTION: Provides standard SQL translation for Django '__year' queries by bounding with BETWEEN or comparison operators. Inputs are string representations of date boundaries for the start or end of the year; output includes all matching rows. Syntax may vary across databases; verify with your backend's SQL dialect.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_105\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE pub_date BETWEEN '2005-01-01' AND '2005-12-31';\nSELECT ... WHERE pub_date >= '2005-01-01';\n```\n\n----------------------------------------\n\nTITLE: Django Model Save Method Changes\nDESCRIPTION: Removal of support for positional arguments in model save methods.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nModel.save()\nModel.asave()\n```\n\n----------------------------------------\n\nTITLE: Equivalent vary_on_cookie Implementation\nDESCRIPTION: Shows the equivalent implementation of vary_on_cookie using vary_on_headers with the Cookie header specified. Both decorators achieve the same caching behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n@vary_on_headers(\"Cookie\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Installing SpatiaLite Library from Source\nDESCRIPTION: This shell script downloads the SpatiaLite library source, extracts it, and compiles and installs the library.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://www.gaia-gis.it/gaia-sins/libspatialite-sources/libspatialite-X.Y.Z.tar.gz\n$ tar xaf libspatialite-X.Y.Z.tar.gz\n$ cd libspatialite-X.Y.Z\n$ ./configure\n$ make\n$ sudo make install\n```\n\n----------------------------------------\n\nTITLE: Implementing Person Model with Concatenated Name Display\nDESCRIPTION: Demonstrates how to create a Person model with a full_name property using Django's Concat function for admin ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Value\nfrom django.db.models.functions import Concat\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n\n    @admin.display(ordering=Concat(\"first_name\", Value(\" \"), \"last_name\"))\n    def full_name(self):\n        return self.first_name + \" \" + self.last_name\n```\n\n----------------------------------------\n\nTITLE: Backport Commit Message Pattern\nDESCRIPTION: Standard format for writing commit messages when backporting changes to older Django versions, including the version number, ticket reference, and original commit information.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n[<Django version>] Fixed <ticket> -- <description>\n\nBackport of <revision> from <branch>.\n```\n\nLANGUAGE: none\nCODE:\n```\n[1.3.x] Fixed #17028 -- Changed diveintopython.org -> diveintopython.net.\n\nBackport of 80c0cbf1c97047daed2c5b41b296bbc56fe1d7e3 from main.\n```\n\nLANGUAGE: none\nCODE:\n```\nRegression in 6ecccad711b52f9273b1acb07a57d3f806e93928.\n```\n\n----------------------------------------\n\nTITLE: Using upper Filter in Django Templates\nDESCRIPTION: Demonstrates the upper filter, which converts a string into all uppercase characters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_98\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|upper }}\n```\n\n----------------------------------------\n\nTITLE: Applying distinct() on Specific Fields (Related - PostgreSQL) Python\nDESCRIPTION: Applies DISTINCT ON (fields) on PostgreSQL, specifying a related model's field. Requires order_by() to match the distinct fields. Note that using the related model object field ('blog') may require explicit ordering by the ID ('blog_id') if the related model has default ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.order_by(\"blog\").distinct(\"blog\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Model Manager for Use in Django Migrations\nDESCRIPTION: This example demonstrates how to create a custom model manager that can be used in migrations by setting the use_in_migrations attribute to True.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass MyManager(models.Manager):\n    use_in_migrations = True\n\n\nclass MyModel(models.Model):\n    objects = MyManager()\n```\n\n----------------------------------------\n\nTITLE: Using the Silent Keyword with Named Cycle Tag (Django)\nDESCRIPTION: Demonstrates the `silent` keyword used with a named `{% cycle %}` tag (`{% cycle ... as rowcolors silent %}`). This declares the cycle and makes its current value available via the `rowcolors` variable (e.g., for use in an included subtemplate) but prevents the initial tag usage from rendering the first value ('row1') directly.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{% for obj in some_list %}\n    {% cycle 'row1' 'row2' as rowcolors silent %}\n    <tr class=\"{{ rowcolors }}\">{% include \"subtemplate.html\" %}</tr>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Discussing `PBKDF2PasswordHasher` Iteration Increase in Django\nDESCRIPTION: Explains that `PBKDF2PasswordHasher` increased default iterations in Django versions post-1.6. This change inadvertently created a timing difference (CVE-2016-2513) between logins for users with older hashes and non-existent users. Django 1.8.10 addressed this with `harden_runtime()`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nPBKDF2PasswordHasher\n```\n\n----------------------------------------\n\nTITLE: Customizing Radio Button Rendering with Django Templates\nDESCRIPTION: This Django template snippet demonstrates how to iterate over the choices of a RadioSelect widget (`myform.beatles`) to gain granular control over the HTML rendering. It wraps each radio input (`radio.tag`) within its corresponding label (`radio.choice_label`) and associates them using `radio.id_for_label`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_18\n\nLANGUAGE: html+django\nCODE:\n```\n<fieldset>\n    <legend>{{ myform.beatles.label }}</legend>\n    {% for radio in myform.beatles %}\n    <label for=\"{{ radio.id_for_label }}\">\n        {{ radio.choice_label }}\n        <span class=\"radio\">{{ radio.tag }}</span>\n    </label>\n    {% endfor %}\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: Custom Django Model Manager for Multiple Databases\nDESCRIPTION: Implementation of a custom model manager that properly handles multiple database configurations through get_queryset().\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MyManager(models.Manager):\n    def get_queryset(self):\n        qs = CustomQuerySet(self.model)\n        if self._db is not None:\n            qs = qs.using(self._db)\n        return qs\n```\n\n----------------------------------------\n\nTITLE: Handling Disconnects in Async Django Streaming Response Generators\nDESCRIPTION: Defines an asynchronous generator function `streaming_response` intended for use with Django's `StreamingHttpResponse`. It demonstrates how to wrap the streaming logic in a try...except block to catch `asyncio.CancelledError`, allowing for cleanup actions when a client disconnects during the stream. The generator yields chunks from an assumed `my_streaming_iterator`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nasync def streaming_response():\n    try:\n        # Do some work here\n        async for chunk in my_streaming_iterator():\n            yield chunk\n    except asyncio.CancelledError:\n        # Handle disconnect\n        ...\n        raise\n```\n\n----------------------------------------\n\nTITLE: Overriding Model.from_db to Store Initial Values in Django (Python)\nDESCRIPTION: Provides an example of overriding the `Model.from_db` classmethod in Django. This customization stores the original field values loaded from the database into an `_loaded_values` dictionary on the instance. It also shows modifying the `save` method to compare current values against these stored initial values, enabling logic like preventing updates to certain fields. The implementation handles deferred fields using `django.db.models.DEFERRED`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import DEFERRED\n\n\n@classmethod\ndef from_db(cls, db, field_names, values):\n    # Default implementation of from_db() (subject to change and could\n    # be replaced with super()).\n    if len(values) != len(cls._meta.concrete_fields):\n        values = list(values)\n        values.reverse()\n        values = [\n            values.pop() if f.attname in field_names else DEFERRED\n            for f in cls._meta.concrete_fields\n        ]\n    instance = cls(*values)\n    instance._state.adding = False\n    instance._state.db = db\n    # customization to store the original field values on the instance\n    instance._loaded_values = dict(\n        zip(field_names, (value for value in values if value is not DEFERRED))\n    )\n    return instance\n\n\ndef save(self, **kwargs):\n    # Check how the current values differ from ._loaded_values. For example,\n    # prevent changing the creator_id of the model. (This example doesn't\n    # support cases where 'creator_id' is deferred).\n    if not self._state.adding and (\n        self.creator_id != self._loaded_values[\"creator_id\"]\n    ):\n        raise ValueError(\"Updating the value of creator isn't allowed\")\n    super().save(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using distance_gt Filter in GeoDjango\nDESCRIPTION: Example of using the distance_gt lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is greater than the specified distance (5 meters).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__distance_gt=(geom, D(m=5)))\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Custom Radio Buttons\nDESCRIPTION: This HTML code block shows the rendered output resulting from the previous Django template example. Each radio button input is nested within its label tag, along with the choice text, demonstrating the customized structure achieved through template iteration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<fieldset>\n    <legend>Radio buttons</legend>\n    <label for=\"id_beatles_0\">\n        John\n        <span class=\"radio\"><input id=\"id_beatles_0\" name=\"beatles\" type=\"radio\" value=\"john\" required></span>\n    </label>\n    <label for=\"id_beatles_1\">\n        Paul\n        <span class=\"radio\"><input id=\"id_beatles_1\" name=\"beatles\" type=\"radio\" value=\"paul\" required></span>\n    </label>\n    <label for=\"id_beatles_2\">\n        George\n        <span class=\"radio\"><input id=\"id_beatles_2\" name=\"beatles\" type=\"radio\" value=\"george\" required></span>\n    </label>\n    <label for=\"id_beatles_3\">\n        Ringo\n        <span class=\"radio\"><input id=\"id_beatles_3\" name=\"beatles\" type=\"radio\" value=\"ringo\" required></span>\n    </label>\n</fieldset>\n```\n\n----------------------------------------\n\nTITLE: Creating Article FormSets in Python\nDESCRIPTION: Example showing two equivalent ways to initialize a formset: with no arguments and with data=None. Both methods create an empty formset.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> formset = ArticleFormSet()\n>>> formset = ArticleFormSet(data=None)\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods on an InlineFormSet\nDESCRIPTION: Shows how to override methods on an InlineFormSet by subclassing BaseInlineFormSet and implementing a custom clean() method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import BaseInlineFormSet\n\n\nclass CustomInlineFormSet(BaseInlineFormSet):\n    def clean(self):\n        super().clean()\n        # example custom validation across forms in the formset\n        for form in self.forms:\n            # your custom formset validation\n            ...\n```\n\n----------------------------------------\n\nTITLE: Using get_max_age Function in Django for Cache Control\nDESCRIPTION: This function extracts the max-age value from a response's Cache-Control header and returns it as an integer, or None if not found or not an integer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_max_age(response)\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Suffix Matching - SQL Equivalent\nDESCRIPTION: Shows the SQL equivalent for a case-insensitive endswith (suffix) filter using ILIKE and the % wildcard pattern in the WHERE clause. Works in SQL databases supporting ILIKE (such as PostgreSQL). Takes a string pattern and matches any value ending with the specified substring, regardless of case. Not universally supported on all SQL backends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_99\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE headline ILIKE '%Lennon'\n```\n\n----------------------------------------\n\nTITLE: Extending Django Model Checks with Custom Logic in Python\nDESCRIPTION: Demonstrates how to add custom checks to a Django model class (`MyModel`) by overriding the `check()` classmethod. The overridden method should call `super().check(**kwargs)` to include checks from the parent class and then add its own custom validation logic, returning a list of any generated `CheckMessage` instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Model):\n    @classmethod\n    def check(cls, **kwargs):\n        errors = super().check(**kwargs)\n        # ... your own checks ...\n        return errors\n```\n\n----------------------------------------\n\nTITLE: Creating an Inclusion Tag Template in Django\nDESCRIPTION: Shows the template used by the inclusion tag to render its output. This template is specified by the tag writer and uses the context provided by the tag function.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n{% for choice in choices %}\n    <li> {{ choice }} </li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering Paginated Book List with Publisher Context in Django Template (HTML+Django)\nDESCRIPTION: Defines a Django template for displaying a publisher's name and a paginated list of their books. Assumes page_obj, paginator, and publisher are provided in the context by a corresponding view. The template extends base.html, loops through books in page_obj, and creates navigation links for pagination. Expected in conjunction with PublisherDetailView; assumes Bootstrap-compatible or standard HTML layout.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \\\"base.html\\\" %}\\n\\n{% block content %}\\n    <h2>Publisher {{ publisher.name }}</h2>\\n\\n    <ol>\\n      {% for book in page_obj %}\\n        <li>{{ book.title }}</li>\\n      {% endfor %}\\n    </ol>\\n\\n    <div class=\\\"pagination\\\">\\n        <span class=\\\"step-links\\\">\\n            {% if page_obj.has_previous %}\\n                <a href=\\\"?page={{ page_obj.previous_page_number }}\\\">previous</a>\\n            {% endif %}\\n\\n            <span class=\\\"current\\\">\\n                Page {{ page_obj.number }} of {{ paginator.num_pages }}.\\n            </span>\\n\\n            {% if page_obj.has_next %}\\n                <a href=\\\"?page={{ page_obj.next_page_number }}\\\">next</a>\\n            {% endif %}\\n        </span>\\n    </div>\\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Django's default test client in unittest\nDESCRIPTION: This code shows how to use Django's default test client in a unittest.TestCase subclass to test HTTP responses.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport unittest\nfrom django.test import Client\n\n\nclass SimpleTest(unittest.TestCase):\n    def test_details(self):\n        client = Client()\n        response = client.get(\"/customer/details/\")\n        self.assertEqual(response.status_code, 200)\n\n    def test_index(self):\n        client = Client()\n        response = client.get(\"/customer/index/\")\n        self.assertEqual(response.status_code, 200)\n```\n\n----------------------------------------\n\nTITLE: Sample Django Login Template\nDESCRIPTION: A sample HTML template for the login page in Django. It extends a base template and includes form rendering, error handling, and links for password reset.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block content %}\n\n{% if form.errors %}\n<p>Your username and password didn't match. Please try again.</p>\n{% endif %}\n\n{% if next %}\n    {% if user.is_authenticated %}\n    <p>Your account doesn't have access to this page. To proceed,\n    please login with an account that has access.</p>\n    {% else %}\n    <p>Please login to see this page.</p>\n    {% endif %}\n{% endif %}\n\n<form method=\"post\" action=\"{% url 'login' %}\">\n{% csrf_token %}\n<table>\n<tr>\n    <td>{{ form.username.label_tag }}</td>\n    <td>{{ form.username }}</td>\n</tr>\n<tr>\n    <td>{{ form.password.label_tag }}</td>\n    <td>{{ form.password }}</td>\n</tr>\n</table>\n\n<input type=\"submit\" value=\"login\">\n<input type=\"hidden\" name=\"next\" value=\"{{ next }}\">\n</form>\n\n{# Assumes you set up the password_reset view in your URLconf #}\n<p><a href=\"{% url 'password_reset' %}\">Lost password?</a></p>\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Running pytest with Warnings Enabled\nDESCRIPTION: Command to run pytest with Python warnings enabled and output capture disabled. This configuration ensures that deprecation warnings are visible when using pytest instead of Django's test runner.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ PYTHONWARNINGS=always pytest tests --capture=no\n```\n\n----------------------------------------\n\nTITLE: ModelAdmin List Filter Ordering Fix\nDESCRIPTION: Correction to ensure ModelAdmin list_filter choices for foreign objects properly respect the model's Meta.ordering configuration\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelAdmin(ModelAdmin):\n    list_filter = [\"foreign_key_field\"]  # Now respects Meta.ordering of foreign objects\n```\n\n----------------------------------------\n\nTITLE: Traversing Custom to_attr Lookups in Prefetch Related\nDESCRIPTION: Demonstrates how lookups created with custom to_attr can still be traversed by other lookups. This example prefetches vegetarian pizzas and their toppings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n>>> vegetarian_pizzas = Pizza.objects.filter(vegetarian=True)\n>>> Restaurant.objects.prefetch_related(\n...     Prefetch(\"pizzas\", queryset=vegetarian_pizzas, to_attr=\"vegetarian_menu\"),\n...     \"vegetarian_menu__toppings\",\n... )\n```\n\n----------------------------------------\n\nTITLE: Accessing M Coordinate of a Point Geometry in Python\nDESCRIPTION: Demonstrates accessing the M (measure) coordinate of a Point ZM `OGRGeometry` ('POINT ZM (1 2 3 4)') via the `.m` attribute. It returns the floating-point M value or `None` if the point doesn't have an M coordinate.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT ZM (1 2 3 4)\").m\n4.0\n```\n\n----------------------------------------\n\nTITLE: Insecure Email Handling Example in Django\nDESCRIPTION: Example demonstrating incorrect handling of user input for email sending, without proper validation\nSOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import send_mail\nfrom django.http import JsonResponse\n\n\ndef my_proof_of_concept(request):\n    email = request.GET.get(\"email\", \"\")\n    send_mail(\"Email subject\", \"Email body\", email, [\"admin@example.com\"])\n    return JsonResponse(status=200)\n```\n\n----------------------------------------\n\nTITLE: Downgrading Django's Vendored Six Library in Python\nDESCRIPTION: This code snippet shows the downgrade of Django's vendored version of the 'six' library to maintain compatibility with Python 2.5.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.six\n```\n\n----------------------------------------\n\nTITLE: Fixing QuerySet Count for Union, Difference, and Intersection Queries in Python\nDESCRIPTION: This bugfix addresses issues with the QuerySet.count() method when used with union(), difference(), and intersection() queries.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.count()\nQuerySet.union()\nQuerySet.difference()\nQuerySet.intersection()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSolaris Library Path\nDESCRIPTION: Updates the OpenSolaris system library path using the crle utility.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# crle -l $OLD_PATH:/usr/local/lib\n```\n\n----------------------------------------\n\nTITLE: Handling Instance-only Descriptors in Model.__init__() in Python\nDESCRIPTION: Fixed a regression causing Model.__init__() to crash if a field has an instance-only descriptor.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nModel.__init__()\n```\n\n----------------------------------------\n\nTITLE: Referencing GEOS Version Function - Python\nDESCRIPTION: Code reference to geos_version_tuple() function in WKBWriter class that was causing random crashes with LooseVersion since Django 1.11.14.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.17.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ngeos_version_tuple()\n```\n\n----------------------------------------\n\nTITLE: Accessing SpatialRefSys and GeometryColumns Models via Django Spatial Backends - Python\nDESCRIPTION: Demonstrates how to obtain ORM model classes for querying spatial metadata (SpatialRefSys and GeometryColumns) using the spatial backend's ops methods for specific database aliases. This new method ensures correct model association with non-default connections, as spatial metadata table structures can vary by backend. Each call produces a model class for querying spatial tables, requiring valid named database connections and appropriate Django/GIS setup.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import connections\nSpatialRefSys = connections[\"my_spatialite\"].ops.spatial_ref_sys()\nGeometryColumns = connections[\"my_postgis\"].ops.geometry_columns()\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Settings Regex in Django SafeExceptionReporterFilter\nDESCRIPTION: Shows the default regular expression used to match sensitive settings and request.META values in Django's SafeExceptionReporterFilter.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nre.compile(r\"API|AUTH|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\", flags=re.IGNORECASE)\n```\n\n----------------------------------------\n\nTITLE: Defining View Class in Django\nDESCRIPTION: Base class for all views in Django. Defines core functionality like dispatch and HTTP method handling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass View():\n    # Attributes\n    http_method_names\n\n    # Methods\n    as_view()\n    dispatch()\n    head()\n    http_method_not_allowed()\n    setup()\n```\n\n----------------------------------------\n\nTITLE: Django Shell Command Example\nDESCRIPTION: Example showing how to execute Python code in Django shell using the --command option.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin shell --command=\"import django; print(django.__version__)\"\n```\n\n----------------------------------------\n\nTITLE: Correcting DisallowedModelAdminLookup Exception in Python\nDESCRIPTION: Fixed an incorrect DisallowedModelAdminLookup exception when using a nested reverse relation in list_filter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlist_filter = ['nested__reverse__relation']\n```\n\n----------------------------------------\n\nTITLE: Inspecting GDAL Layer Properties in Python\nDESCRIPTION: Examples showing how to access and iterate through layer properties in a GDAL DataSource.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> for layer in ds:\n...     print('Layer \"%s\": %i %ss' % (layer.name, len(layer), layer.geom_type.name))\n...\nLayer \"cities\": 3 Points\n```\n\n----------------------------------------\n\nTITLE: Integrating FlatPageSitemap in Django URLconf\nDESCRIPTION: This Python code snippet shows how to integrate the FlatPageSitemap class into a Django URLconf. It imports necessary modules and defines a URL pattern for the sitemap, which includes flatpages.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.flatpages.sitemaps import FlatPageSitemap\nfrom django.contrib.sitemaps.views import sitemap\nfrom django.urls import path\n\nurlpatterns = [\n    # ...\n    # the sitemap\n    path(\n        \"sitemap.xml\",\n        sitemap,\n        {\"sitemaps\": {\"flatpages\": FlatPageSitemap}},\n        name=\"django.contrib.sitemaps.views.sitemap\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'not_gt' Lookup in Django Python\nDESCRIPTION: Utilizes the `not_gt` lookup (`__not_gt`, SQL operator `&<`) on the `ages` field. This query filters `Event` objects where the `ages` range does not extend to the right of (is not strictly greater than) the specified `NumericRange(3, 10)`, meaning its upper bound is less than or equal to the upper bound of the queried range. Requires the `Event` model and `NumericRange`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_26\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__not_gt=NumericRange(3, 10))\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Following redirects with Django test client\nDESCRIPTION: Shows how to use the new 'follow' argument in the test client's get() and post() methods to automatically follow redirects in tests.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nClient.get(url, follow=True)\nClient.post(url, data, follow=True)\n```\n\n----------------------------------------\n\nTITLE: Extra Method Signature for Complex WHERE Clauses in Django\nDESCRIPTION: Shows the method signature for extra(), a method to inject specific clauses into generated SQL. This method should only be used as a last resort when the Django query syntax can't express complex WHERE clauses.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nextra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Block Indentation in Django Templates\nDESCRIPTION: Shows incorrect indentation of top-level blocks in Django templates using extends. This demonstrates an indentation pattern to avoid in extended templates.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_16\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n\n```\n\n----------------------------------------\n\nTITLE: Reloading a Django Model Instance after F() Update\nDESCRIPTION: Demonstrates the necessity of reloading a model instance (using `get()` or the more efficient `refresh_from_db()`) to access the updated value after modifying a field with an `F()` expression. Since the update occurs directly in the database, the Python object's attribute retains its original value until reloaded.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreporter = Reporters.objects.get(pk=reporter.pk)\n# Or, more succinctly:\nreporter.refresh_from_db()\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of Extended Template in Django\nDESCRIPTION: Shows the potential rendered HTML output when a child template extends a base template. This example assumes two blog entries in the blog_entries variable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>My amazing blog</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n    </div>\n\n    <div id=\"content\">\n        <h2>Entry one</h2>\n        <p>This is my first entry.</p>\n\n        <h2>Entry two</h2>\n        <p>This is my second entry.</p>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Proper Template Tag Loading with Alphabetical Order\nDESCRIPTION: Demonstrates loading Django template tags in correct alphabetical order with proper spacing. This example shows the preferred format for the load tag.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% load i18n l10 tz %}\n```\n\n----------------------------------------\n\nTITLE: Django Migration Consistency Check Function\nDESCRIPTION: Fix for allow_migrate() function call in makemigrations command to use correct app_label and model_name arguments during migration consistency checks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nallow_migrate()\n```\n\n----------------------------------------\n\nTITLE: Handling `cached_property` Aliases (Problematic Pre-Django 2.2) in Python\nDESCRIPTION: This snippet demonstrates an incorrect or problematic way (especially flagged in Python 3.6+) to create an alias for a `django.utils.functional.cached_property`. Direct assignment like `alias = base` does not result in a cached alias and will raise a `TypeError` in Python 3.6+ because the same `cached_property` instance cannot be assigned to multiple names. Django 2.2 documentation advises against this pattern.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.functional import cached_property\n\n\nclass A:\n    @cached_property\n    def base(self):\n        return ...\n\n    alias = base\n```\n\n----------------------------------------\n\nTITLE: Django model's save method triggered from admin\nDESCRIPTION: Reference to Django model's save() method that was being triggered inappropriately in the admin interface when a user with view-only permissions on a parent model but edit permissions on inlines submitted a form.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.15.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsave()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Auth Form Classes (RST)\nDESCRIPTION: These snippets use the ReStructuredText `:class:` role to reference `BaseUserCreationForm` and `AdminUserCreationForm`. The context is a bug fix in Django 5.1 where a new `usable_password` field was incorrectly included in the base form; it was moved to the new admin-specific form.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`~django.contrib.auth.forms.BaseUserCreationForm`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`~django.contrib.auth.forms.AdminUserCreationForm`\n```\n\n----------------------------------------\n\nTITLE: Project Layout with Top-Level App Directory (Text)\nDESCRIPTION: Shows an alternative Django project structure where an application (`myapp`) is placed adjacent to `manage.py` and outside the main project package (`mysite`). This allows the app to be imported as a top-level module (e.g., `import myapp`) rather than using the project prefix.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmanage.py\nmyapp/\n    __init__.py\n    models.py\nmysite/\n    __init__.py\n    settings.py\n    urls.py\n```\n\n----------------------------------------\n\nTITLE: Evaluating limit_choices_to in ModelForm Instantiation in Python\nDESCRIPTION: Fixed a regression preventing a model field's limit_choices_to from being evaluated when a ModelForm is instantiated.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclass MyModelForm(forms.ModelForm):\n    class Meta:\n        model = MyModel\n        fields = ['field_with_limit_choices_to']\n```\n\n----------------------------------------\n\nTITLE: Django Test Model Registration Example\nDESCRIPTION: Example showing how to isolate model registration during testing using the @isolate_apps decorator to prevent global registry pollution.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.test import SimpleTestCase\nfrom django.test.utils import isolate_apps\n\n\nclass TestModelDefinition(SimpleTestCase):\n    @isolate_apps(\"app_label\")\n    def test_model_definition(self):\n        class TestModel(models.Model):\n            pass\n\n        ...\n```\n\n----------------------------------------\n\nTITLE: Converting Timezone-Aware Datetime Parameters in Python\nDESCRIPTION: Code examples showing how to convert timezone-aware datetime objects to naive UTC datetimes for database queries, and how to convert naive datetimes back to timezone-aware objects when reading from the database.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\n\nparam = timezone.make_naive(param, timezone.utc)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\n\nvalue = timezone.make_aware(value, timezone.utc)\n```\n\n----------------------------------------\n\nTITLE: Storing Static Prefix for Multiple Uses\nDESCRIPTION: Demonstrates storing the STATIC_URL prefix in a variable for multiple uses, which is more efficient than calling get_static_prefix multiple times in the same template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_109\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n{% get_static_prefix as STATIC_PREFIX %}\n\n<img src=\"{{ STATIC_PREFIX }}images/hi.jpg\" alt=\"Hi!\">\n<img src=\"{{ STATIC_PREFIX }}images/hi2.jpg\" alt=\"Hello!\">\n```\n\n----------------------------------------\n\nTITLE: Preventing Black Formatting for Django Management Commands\nDESCRIPTION: Demonstrates how to prevent Django from using the 'black' formatter for auto-generated Python files by explicitly setting the PATH environment variable.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nPATH=path/to/venv/bin django-admin makemigrations\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Full Text Search Feature Addition\nDESCRIPTION: Introduces full text search functionality in django.contrib.postgres, allowing search across multiple fields with language configurations and result ranking.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.search import TrigramSimilarity, TrigramDistance\n\n# Trigram lookups and expressions are now supported\n# Use trigram_similar lookup and similarity/distance expressions\n```\n\n----------------------------------------\n\nTITLE: Defining ProhibitNullCharactersValidator in Django\nDESCRIPTION: Validator class that checks for null characters in string values. Raises ValidationError if the string contains null characters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nProhibitNullCharactersValidator(message=None, code=None)\n```\n\n----------------------------------------\n\nTITLE: Running migrate with Custom Settings Module - Console\nDESCRIPTION: This console command runs django-admin migrate, specifying the settings module via --settings. It overrides the default DJANGO_SETTINGS_MODULE environment variable to use mysite.settings, controlling which settings.py is active. The settings argument must be a valid Python import path. No extra dependencies are needed for this option.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_29\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin migrate --settings=mysite.settings\n```\n\n----------------------------------------\n\nTITLE: Configuring TEMPLATES DIRS Option in Django Settings\nDESCRIPTION: Addresses a regression in Django 3.2.4 where the auto-reloader failed to detect changes when the DIRS option in TEMPLATES setting contained an empty string.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.4.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nTEMPLATES = {\n    'DIRS': [''],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stealth Options in Custom Django Management Commands\nDESCRIPTION: Illustrates how to define `stealth_options` in a custom Django management command inheriting from `BaseCommand`. This allows the command to accept options passed via `call_command()` that are not explicitly defined using `parser.add_argument()`, thus bypassing the validation introduced in Django 2.0 that checks if all passed options are defined by the command's argument parser.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyCommand(BaseCommand):\n    stealth_options = (\"option_name\", ...)\n```\n\n----------------------------------------\n\nTITLE: Enabling Threaded Option for Oracle in Django Settings (Python)\nDESCRIPTION: Shows how to set the `threaded: True` option within the `OPTIONS` dictionary in the database configuration. This setting is mandatory when running Django in a multi-threaded environment (e.g., Apache with MPM) to prevent potential crashes or instability with the Oracle driver.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n\"OPTIONS\": {\n    \"threaded\": True,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Upload Handler Modification in Django\nDESCRIPTION: Demonstrates inserting a custom ProgressBarUploadHandler at the start of the upload handlers list to enable progress tracking before other handlers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/file-uploads.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrequest.upload_handlers.insert(0, ProgressBarUploadHandler(request))\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Above Overlap in PostGIS\nDESCRIPTION: Example of using the 'overlaps_above' lookup to find geometries whose bounding box overlaps or is above a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__overlaps_above=geom)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Traversal Exploit in Django Template Tag (html+django)\nDESCRIPTION: This snippet illustrates a potential directory traversal attack using the ssi template tag in Django when the ALLOWED_INCLUDE_ROOTS setting allows paths such as /var/www. It shows how a crafted relative path can bypass root restrictions to read files outside the intended directory. The input to the ssi tag is a file path, and its abuse could cause the server to include sensitive files like /etc/passwd. Requires Django template rendering context and improper configuration of ALLOWED_INCLUDE_ROOTS.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% ssi \"/var/www/../../etc/passwd\" %}\n```\n\n----------------------------------------\n\nTITLE: Django QuerySet Deletion\nDESCRIPTION: Reference to delete() method causing performance issues on MySQL when filtering against aggregate functions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.delete()\n```\n\n----------------------------------------\n\nTITLE: Python Deprecation Warning Flag\nDESCRIPTION: Command line option to enable display of deprecation warnings in Python.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython -Wd\n```\n\n----------------------------------------\n\nTITLE: Referencing QuerySet Class in Python\nDESCRIPTION: Reference to the Django `QuerySet` class, which represents a collection of database objects obtained from a query. The release note addresses a bug related to the pickling (serialization) of QuerySet instances.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nQuerySet\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests for Django Checks Issuing Warnings in Python\nDESCRIPTION: Illustrates how to write an integration test for a system check that produces a warning (not an error) using `django.test.SimpleTestCase`. It uses `override_settings` to trigger the warning condition and `call_command` with a `StringIO` object passed to `stderr` to capture the output. The test would typically assert that the expected warning message is present in the captured `stderr` content (assertion part not shown in snippet).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom io import StringIO\n\nfrom django.core.management import call_command\nfrom django.test import SimpleTestCase, override_settings\n\n\nclass EnableAnalyticsDeploymentCheckTest(SimpleTestCase):\n```\n\n----------------------------------------\n\nTITLE: Referencing Static File from Another App in Django\nDESCRIPTION: This snippet demonstrates how to reference a static file that belongs to a different app within a Django project. It's a common pattern for organizing and accessing static assets across multiple apps.\nSOURCE: https://github.com/django/django/blob/main/tests/servers/another_app/static/another_app/another_app_static_file.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nstatic file from another_app\n```\n\n----------------------------------------\n\nTITLE: Using no-python-format flag in translation strings\nDESCRIPTION: Shows how to use the no-python-format flag to prevent gettext from treating percent signs as format specifiers in translation strings.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\n# xgettext:no-python-format\noutput = _(\"10% interest\")\n```\n\n----------------------------------------\n\nTITLE: Iterating and Accessing Features and Geometries in GDAL Layers in Python\nDESCRIPTION: Shows how to iterate over features in a GDAL Layer, access attribute fields by name, retrieve geometrical counts, perform array slicing to get subsets of feature objects, and access features by feature ID. Demonstrates retrieval of feature geometries and export to WKT and GeoJSON using GeoDjango interfaces. This assumes that ds and lyr are already defined and is intended for use in the Django shell. Outputs are printed names, point counts, geometry WKT/GeoJSON, or feature details as examples.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> for feat in lyr:\n...     print(feat.get(\"NAME\"), feat.geom.num_points)\n...\nGuernsey 18\nJersey 26\nSouth Georgia South Sandwich Islands 338\nTaiwan 363\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> lyr[0:2]\n[<django.contrib.gis.gdal.feature.Feature object at 0x2f47690>, <django.contrib.gis.gdal.feature.Feature object at 0x2f47650>]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> feat = lyr[234]\n>>> print(feat.get(\"NAME\"))\nSan Marino\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> geom = feat.geom\n>>> print(geom.wkt)\nPOLYGON ((12.415798 43.957954,12.450554 ...\n>>> print(geom.json)\n{ \"type\": \"Polygon\", \"coordinates\": [ [ [ 12.415798, 43.957954 ], [ 12.450554, 43.979721 ], ...\n```\n\n----------------------------------------\n\nTITLE: Fixing Memory Exhaustion in Django's floatformat() Function\nDESCRIPTION: Addresses CVE-2024-41989 by limiting the number of digits processed in scientific notation to 200, preventing memory exhaustion attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.numberformat.floatformat()\n```\n\n----------------------------------------\n\nTITLE: Named Migration Creation\nDESCRIPTION: Example showing how to create a migration with a custom name using the --name option.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py makemigrations --name changed_my_model your_app_label\n```\n\n----------------------------------------\n\nTITLE: Django QuerySet DateTime Update with F Expression\nDESCRIPTION: Fix for QuerySet.update() operation on SQLite when updating DateTimeField using F() expression combined with timedelta.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.update()\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Cache Values in Django\nDESCRIPTION: Demonstrates how to use the incr() and decr() methods to increment and decrement cache values. Shows examples with default and custom increment/decrement values.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_33\n\nLANGUAGE: pycon\nCODE:\n```\n>>> cache.set(\"num\", 1)\n>>> cache.incr(\"num\")\n2\n>>> cache.incr(\"num\", 10)\n12\n>>> cache.decr(\"num\")\n11\n>>> cache.decr(\"num\", 5)\n6\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Modules\nDESCRIPTION: This command demonstrates how to run only selected test modules from Django's test suite, in this case the generic_relations and i18n modules, using a custom settings file.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ./runtests.py --settings=path.to.settings generic_relations i18n\n```\n\n----------------------------------------\n\nTITLE: Using Salt with Django's Signer Class\nDESCRIPTION: Demonstrates the use of the salt argument in the Signer class to create different signatures for the same input in different contexts.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/signing.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> signer = Signer()\n>>> signer.sign(\"My string\")\n'My string:v9G-nxfz3iQGTXrePqYPlGvH79WTcIgj1QIQSUODTW0'\n>>> signer.sign_object({\"message\": \"Hello!\"})\n'eyJtZXNzYWdlIjoiSGVsbG8hIn0:bzb48DBkB-bwLaCnUVB75r5VAPUEpzWJPrTb80JMIXM'\n>>> signer = Signer(salt=\"extra\")\n>>> signer.sign(\"My string\")\n'My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc'\n>>> signer.unsign(\"My string:YMD-FR6rof3heDkFRffdmG4pXbAZSOtb-aQxg3vmmfc\")\n'My string'\n>>> signer.sign_object({\"message\": \"Hello!\"})\n'eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I'\n>>> signer.unsign_object(\n...     \"eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I\"\n... )\n{'message': 'Hello!'}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Django `safe` Filter Output vs. Default Escaping\nDESCRIPTION: Shows the rendered output of a variable containing '<b>' both with default Django auto-escaping (`&lt;b&gt;`) and when the `safe` filter is applied (`<b>`). This clarifies the effect of the `safe` filter described previously.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_16\n\nLANGUAGE: html+django\nCODE:\n```\nThis will be escaped: &lt;b&gt;\nThis will not be escaped: <b>\n```\n\n----------------------------------------\n\nTITLE: Django Iteration Utility Removal\nDESCRIPTION: Removal of undocumented iteration utility function and its containing module.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.itercompat.is_iterable()\ndjango.utils.itercompat\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URL Patterns\nDESCRIPTION: Sets up URL routing for a polls application by mapping URL patterns to view functions using Django's path() function. Includes patterns for index, detail, results and vote views.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    # ex: /polls/\n    path(\"\", views.index, name=\"index\"),\n    # ex: /polls/5/\n    path(\"<int:question_id>/\", views.detail, name=\"detail\"),\n    # ex: /polls/5/results/\n    path(\"<int:question_id>/results/\", views.results, name=\"results\"),\n    # ex: /polls/5/vote/\n    path(\"<int:question_id>/vote/\", views.vote, name=\"vote\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Running Django Development Server\nDESCRIPTION: Command to start Django's development server for testing the polls application. After running, the index view should be accessible at http://localhost:8000/polls/\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Spacing in Django Templates\nDESCRIPTION: Shows incorrect spacing for variable interpolation in Django templates with no spaces between braces and variable content. This is presented as an anti-pattern to avoid.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{{user}}\n```\n\n----------------------------------------\n\nTITLE: Preventing Attribute Value Localization in Widget Templates in HTML\nDESCRIPTION: Prevented attribute values in the django/forms/widgets/attrs.html template from being localized so that numeric attributes (e.g. max and min) of NumberInput work correctly.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n{% include \"django/forms/widgets/attrs.html\" %}\n```\n\n----------------------------------------\n\nTITLE: Fixed JSONField Lookup Operations in Django\nDESCRIPTION: Bug fix for PostgreSQL JSONField lookups (contains, contained_by, has_key, has_keys, has_any_keys) when using key transforms in expressions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.postgres.fields.JSONField\n```\n\n----------------------------------------\n\nTITLE: Using HTML in Field help_text\nDESCRIPTION: Shows how to include HTML tags (like `<em>`) within the `help_text` attribute of a Django model field. The documentation notes that this value is not automatically HTML-escaped, allowing for richer formatting in forms generated from the model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nhelp_text = \"Please use the following format: <em>YYYY-MM-DD</em>.\"\n```\n\n----------------------------------------\n\nTITLE: Installing Django App Package Using Pip\nDESCRIPTION: Shell command for installing a local Django package using pip with user-specific installation.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install --user django-polls/dist/django-polls-0.1.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Field Values\nDESCRIPTION: Shows how to access the raw value of a form field using the value() method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_41\n\nLANGUAGE: pycon\nCODE:\n```\n>>> initial = {\"subject\": \"welcome\"}\n>>> unbound_form = ContactForm(initial=initial)\n>>> bound_form = ContactForm(data={\"subject\": \"hi\"}, initial=initial)\n>>> print(unbound_form[\"subject\"].value())\nwelcome\n>>> print(bound_form[\"subject\"].value())\nhi\n```\n\n----------------------------------------\n\nTITLE: Template Usage Testing with Context Managers\nDESCRIPTION: Example of using assertTemplateUsed and assertTemplateNotUsed as context managers in tests\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwith self.assertTemplateUsed(\"index.html\"):\n    render_to_string(\"index.html\")\nwith self.assertTemplateNotUsed(\"base.html\"):\n    render_to_string(\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Migrating GeoDjango Backend Imports for PostGIS Adaptor - Python\nDESCRIPTION: Illustrates migration from direct import of PostGISAdaptor in the old GeoDjango backend to the new access pattern using connection.ops.Adapter. The before-and-after snippets show the deprecated import path and the updated, modular approach conforming to Django 1.2's multi-backend design. Requires a properly configured Django spatial database connection and reflects changes to the spatial backend API. Accepts no external parameters but requires that the project settings enable the connection.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis.db.backend.postgis import PostGISAdaptor\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import connection\n\nPostGISAdaptor = connection.ops.Adapter\n```\n\n----------------------------------------\n\nTITLE: Preventing Migration Crash with `GeneratedField` Using `contains`/`Value` in Django\nDESCRIPTION: Addresses a migration crash in Django 5.0 encountered when adding a `GeneratedField` whose definition depended on the `__contains` or `__icontains` lookups, or involved a `Value` object containing a literal percent sign ('%'). This fix allows such generated fields to be added via migrations without error.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nGeneratedField\n```\n\nLANGUAGE: python\nCODE:\n```\n__contains\n```\n\nLANGUAGE: python\nCODE:\n```\n__icontains\n```\n\nLANGUAGE: python\nCODE:\n```\nValue\n```\n\n----------------------------------------\n\nTITLE: Django Security Documentation Structure in reStructuredText\nDESCRIPTION: Documentation outlining Django's security policies, severity levels, disclosure process, and notification procedures. Written in reStructuredText format with sections covering support policy, severity classifications, and notification request requirements.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/security.txt#2025-04-23_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _severity-levels:\\n\\nSecurity issue severity levels\\n==============================\\n\\nThe severity level of a security vulnerability is determined by the attack\\ntype.\\n\\nSeverity levels are:\\n\\n* **High**\\n\\n  * Remote code execution\\n  * SQL injection\\n\\n* **Moderate**\\n\\n  * Cross site scripting (XSS)\\n  * Cross site request forgery (CSRF)\\n  * Denial-of-service attacks\\n  * Broken authentication\\n\\n* **Low**\\n\\n  * Sensitive data exposure\\n  * Broken session management\\n  * Unvalidated redirects/forwards\\n  * Issues requiring an uncommon configuration option\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for class-based view name display bug\nDESCRIPTION: This snippet references a Django ticket number for a regression that caused displaying an incorrect name for class-based views on the technical 404 debug page in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33425`\n```\n\n----------------------------------------\n\nTITLE: Formatting Date in reStructuredText\nDESCRIPTION: This snippet shows how to format a date in reStructuredText, using asterisks for italics to emphasize the release date.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.7.txt#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n*September 10, 2011*\n```\n\n----------------------------------------\n\nTITLE: Accessing the Name of an OGRGeomType in Python\nDESCRIPTION: Shows how to retrieve the short-hand string name (e.g., 'Polygon') corresponding to an `OGRGeomType` object (`gt1`) by accessing its `.name` attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_26\n\nLANGUAGE: pycon\nCODE:\n```\n>>> gt1.name\n'Polygon'\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Template Filters (RST)\nDESCRIPTION: These snippets use the ReStructuredText `:tfilter:` role to reference the `urlize` and `urlizetrunc` template filters. They are mentioned in the context of a potential denial-of-service vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:tfilter:`urlize`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:tfilter:`urlizetrunc`\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging to Silence Specific Django Security Logger (Python)\nDESCRIPTION: This Python dictionary snippet demonstrates how to customize Django's logging configuration within the `LOGGING` setting. It specifically shows how to silence messages from the `django.security.DisallowedHost` logger by directing its output to a `logging.NullHandler`. Setting `propagate` to `False` prevents these messages from being passed to parent loggers (like the root `django` logger). This pattern can be used to suppress unwanted log messages from specific sources.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/logging.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    # ...\n    \"handlers\": {\n        \"null\": {\n            \"class\": \"logging.NullHandler\",\n        },\n    },\n    \"loggers\": {\n        \"django.security.DisallowedHost\": {\n            \"handlers\": [\"null\"],\n            \"propagate\": False,\n        },\n    },\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Django HTTP Request Handling Documentation\nDESCRIPTION: A reStructuredText (reST) formatted table of contents that organizes documentation for Django's HTTP request handling features. It uses the toctree directive to create a structured list of topics related to handling HTTP requests in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   urls\n   views\n   decorators\n   file-uploads\n   shortcuts\n   generic-views\n   middleware\n   sessions\n```\n\n----------------------------------------\n\nTITLE: Running Tests with PostgreSQL on Python 3.12 Using Tox\nDESCRIPTION: This snippet demonstrates how to run Django's test suite using a specific Python version (3.12) and database backend (PostgreSQL) with a custom settings file through Tox.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ tox -e py312-postgres -- --settings=my_postgres_settings\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Field Cache Method (RST)\nDESCRIPTION: This snippet references the `FieldCacheMixin.get_cache_name()` method. The context is adjusting the `stacklevel` for a deprecation warning associated with this method to ensure it points to the correct call site.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_10\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``FieldCacheMixin.get_cache_name()``\n```\n\n----------------------------------------\n\nTITLE: Caching Related Model Instances with ORM in Django (Python)\nDESCRIPTION: Demonstrates how Django ORM caches related model instances to reduce database queries in version 1.5. Shows sequence of relationship traversals on 'Poll' and 'Choice' objects, and asserts that a related lookup does not trigger redundant SQL queries if the instance has already been loaded. No external dependencies beyond a standard Django model setup with relevant relationships. Inputs are standard ORM model queries; output is validation that the same objects are referenced without additional database access. Assumes a context with 'Poll' and 'Choice' models, highlighting improvements for performance and correctness.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> first_poll = Poll.objects.all()[0]\\n>>> first_choice = first_poll.choice_set.all()[0]\\n>>> first_choice.poll is first_poll\\nTrue\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Redirect in Django Settings\nDESCRIPTION: Demonstrates the Django setting for SSL redirect. The security fix ensures this setting works correctly when using a reverse-proxy connecting via HTTPS.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSECURE_SSL_REDIRECT\n```\n\n----------------------------------------\n\nTITLE: Dynamically Populating ModelMultipleChoiceField Queryset in Django Forms (Python)\nDESCRIPTION: This Python code defines a Django form `FooMultipleChoiceForm` with a `ModelMultipleChoiceField`. It demonstrates how to initialize the field with `queryset=None` and then dynamically set the actual `queryset` within the form's `__init__` method. This pattern is useful when the available choices depend on runtime factors or other form data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass FooMultipleChoiceForm(forms.Form):\n    foo_select = forms.ModelMultipleChoiceField(queryset=None)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields[\"foo_select\"].queryset = ...\n```\n\n----------------------------------------\n\nTITLE: Deprecation of SessionAuthenticationMiddleware and Update to AuthenticationMiddleware usage - reStructuredText\nDESCRIPTION: This snippet describes the changes to session authentication middleware in Django. The SessionAuthenticationMiddleware was added in 1.7 and its logic moved to 'auth.get_user()', with session verification being unconditionally enabled in Django 1.10, making the middleware obsolete. Developers are advised to review middleware configuration and upgrade guides.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_9\n\nLANGUAGE: reStructuredText\nCODE:\n```\nUsing ``AuthenticationMiddleware`` without ``SessionAuthenticationMiddleware``\n------------------------------------------------------------------------------\n\n``django.contrib.auth.middleware.SessionAuthenticationMiddleware`` was\nadded in Django 1.7. In Django 1.7.2, its functionality was moved to\n``auth.get_user()`` and, for backwards compatibility, enabled only if\n``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` appears in\n``MIDDLEWARE_CLASSES``.\n\nIn Django 1.10, session verification will be enabled regardless of whether or not\n``SessionAuthenticationMiddleware`` is enabled (at which point\n``SessionAuthenticationMiddleware`` will have no significance). You can add it\nto your ``MIDDLEWARE_CLASSES`` sometime before then to opt-in. Please read the\n:ref:`upgrade considerations <session-invalidation-on-password-change>` first.\n```\n\n----------------------------------------\n\nTITLE: Referencing FileResponse Class in Django\nDESCRIPTION: This snippet demonstrates how to reference the FileResponse class from Django's http module. It's mentioned in the context of a security vulnerability fix related to the Content-Disposition header.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:class:`~django.http.FileResponse`\n```\n\n----------------------------------------\n\nTITLE: Fixing Widget.render() Deprecation Warning in Python\nDESCRIPTION: Removed an incorrect deprecation warning about a missing 'renderer' argument if a Widget.render() method accepts **kwargs.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nWidget.render(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Fields Layout in Django 1.0 (ModelOneAdmin - Python)\nDESCRIPTION: This snippet demonstrates the simplified `fields` syntax in Django 1.0 within a `ModelAdmin` class (in `admin.py`). For a simple layout without grouping, `fields` is just a tuple listing the desired field names in order.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ModelOneAdmin(admin.ModelAdmin):\n    fields = (\"foo\", \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Method Signature - Django Database Router allow_migrate\nDESCRIPTION: Method signature for allow_migrate database router method used for controlling migrations, showing parameter structure and hints.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nallow_migrate(self, db, app_label, model_name=None, **hints)\n```\n\n----------------------------------------\n\nTITLE: Django Module Import References\nDESCRIPTION: References to Django modules related to the security fixes, including authentication views and URL validation utilities that were affected by the security issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.views.login()\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.http.is_safe_url()\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin URLs in Django 1.0 (Python)\nDESCRIPTION: This snippet demonstrates the updated method for configuring admin URLs in Django 1.0's root `urls.py`. It requires importing `django.contrib.admin`, calling `admin.autodiscover()` to load `admin.py` files from installed apps, and using `admin.site.root` for the admin URL pattern.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\n\n# The next two lines enable the admin and load each admin.py file:\nfrom django.contrib import admin\n\nadmin.autodiscover()\n\nurlpatterns = patterns(\n    \"\",\n    (r\"^admin/(.*)\", admin.site.root),\n    # ... the rest of your URLs here ...\n)\n```\n\n----------------------------------------\n\nTITLE: Reusing Case Instance in Query\nDESCRIPTION: Example of a code pattern that previously caused a crash when the same Case instance was reused in a query. This bug was fixed in Django 1.8.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCase\n```\n\n----------------------------------------\n\nTITLE: Overriding Storage Settings in Django Tests\nDESCRIPTION: Example test that overrides storage settings using the Django test utilities. This ensures the LazyObject approach works correctly by verifying the storage instance is of the expected type.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/files.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@override_settings(\n    STORAGES={\n        \"mystorage\": {\n            \"BACKEND\": \"django.core.files.storage.InMemoryStorage\",\n        }\n    }\n)\ndef test_storage():\n    model = MyModel()\n    assert isinstance(model.upload.storage, InMemoryStorage)\n```\n\n----------------------------------------\n\nTITLE: Re-rendering Django TemplateResponse Content Example\nDESCRIPTION: This example demonstrates how TemplateResponse objects handle rendering and content assignment. It shows that once rendered, the content doesn't change on re-rendering, but can be explicitly updated by assigning to the content property.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n# Set up a rendered TemplateResponse\n>>> from django.template.response import TemplateResponse\n>>> t = TemplateResponse(request, \"original.html\", {})\n>>> t.render()\n>>> print(t.content)\nOriginal content\n\n# Re-rendering doesn't change content\n>>> t.template_name = \"new.html\"\n>>> t.render()\n>>> print(t.content)\nOriginal content\n\n# Assigning content does change, no render() call required\n>>> t.content = t.rendered_content\n>>> print(t.content)\nNew content\n```\n\n----------------------------------------\n\nTITLE: Disabling Template Autoescaping in Django 1.0\nDESCRIPTION: Examples of how to disable Django's new default autoescaping behavior for individual variables and entire template sections using the 'safe' filter and 'autoescape' tag.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\nThis will be escaped: {{ data }}\nThis will not be escaped: {{ data|safe }}\n```\n\nLANGUAGE: html\nCODE:\n```\n{% autoescape off %}\n   ... unescaped template content here ...\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Equal to Geometry in Django\nDESCRIPTION: Demonstrates using the equals spatial lookup to filter Zipcode objects whose polygon is spatially equal to a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__equals=geom)\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Eligibility with ModelBackend in Django (Python)\nDESCRIPTION: Returns `True` if the user is allowed to authenticate, `False` otherwise. Specifically, this method returns `False` for users with `is_active=False` to align with `AuthenticationForm` behavior. Custom user models without an `is_active` field are allowed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nuser_can_authenticate()\n```\n\n----------------------------------------\n\nTITLE: Using Cache Control Decorators in Django Views\nDESCRIPTION: The cache_control() and never_cache() decorators in Django are used to control caching behavior of views. The check added in Django 4.0 has been relaxed to allow the use of duck-typed HttpRequest objects.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndjango.views.decorators.cache.cache_control()\ndjango.views.decorators.cache.never_cache()\n```\n\n----------------------------------------\n\nTITLE: Generating CSV Files Using Django's Template System\nDESCRIPTION: An alternative approach to generating CSV files using Django's template system instead of the csv module. This method passes data to a template which formats it as CSV content.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-csv.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.template import loader\n\n\ndef some_view(request):\n    # Create the HttpResponse object with the appropriate CSV header.\n    response = HttpResponse(\n        content_type=\"text/csv\",\n        headers={\"Content-Disposition\": 'attachment; filename=\"somefilename.csv\"'},\n    )\n\n    # The data is hardcoded here, but you could load it from a database or\n    # some other source.\n    csv_data = (\n        (\"First row\", \"Foo\", \"Bar\", \"Baz\"),\n        (\"Second row\", \"A\", \"B\", \"C\", '\"Testing\"', \"Here's a quote\"),\n    )\n\n    t = loader.get_template(\"my_template_name.txt\")\n    c = {\"data\": csv_data}\n    response.write(t.render(c))\n    return response\n```\n\n----------------------------------------\n\nTITLE: Updating Django Settings for Custom App\nDESCRIPTION: Configuration update in Django settings.py to include the newly installed polls app in INSTALLED_APPS.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    \"django_polls.apps.PollsConfig\",\n    ...,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ArticleAdmin with Related Field Selection\nDESCRIPTION: Demonstrates how to configure ArticleAdmin with specific related fields to be selected in the query.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleAdmin(admin.ModelAdmin):\n    list_select_related = [\"author\", \"category\"]\n```\n\n----------------------------------------\n\nTITLE: Referencing django.contrib.auth.views.login() function in Python\nDESCRIPTION: A code reference to the Django authentication login view function that was affected by the CVE-2017-7233 vulnerability related to unsafe URL redirects.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.18.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.views.login()\n```\n\n----------------------------------------\n\nTITLE: Django ModelAdmin Configuration Example\nDESCRIPTION: These error codes show valid configurations for Django ModelAdmin class attributes like list_display, list_filter, raw_id_fields etc. The codes represent validation rules for admin interface customization.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/checks.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ModelAdmin:\n    raw_id_fields = ['foreign_key_field']  # Must be list/tuple of ForeignKey/M2M fields\n    list_display = ['field1', 'field2']     # Must be list/tuple of model fields\n    list_filter = ['field1']                # Must be list/tuple of fields\n    ordering = ['field1', '-field2']        # Must be list/tuple of field names\n    readonly_fields = ['field1']            # Must be list/tuple of field names/callables\n    autocomplete_fields = ['foreign_key']   # Must be list/tuple of ForeignKey/M2M fields\n```\n\n----------------------------------------\n\nTITLE: Marking a Good Commit in Git Bisect\nDESCRIPTION: Command to mark a commit as 'good' in the git bisect process, indicating a point before the regression was introduced.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git bisect good\nBisecting: X revisions left to test after this (roughly Y steps)\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Django management commands\nDESCRIPTION: Example test case that demonstrates how to test a Django management command using call_command and capturing its output with StringIO.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom io import StringIO\nfrom django.core.management import call_command\nfrom django.test import TestCase\n\n\nclass ClosepollTest(TestCase):\n    def test_command_output(self):\n        out = StringIO()\n        call_command(\"closepoll\", poll_ids=[1], stdout=out)\n        self.assertIn('Successfully closed poll \"1\"', out.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Django Models and Databases Documentation - reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to define the table of contents and introduce the articles related to Django's models and database layer. The :maxdepth: option specifies how many heading levels to include, while the .. toctree:: directive lists the documentation sub-pages for models and related topics. It requires a Sphinx-compatible build environment and proper file paths for all included documentation files.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. module:: django.db\n\nA model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you\\'re storing.\nGenerally, each model maps to a single database table.\n\n.. toctree::\n   :maxdepth: 1\n\n   models\n   queries\n   aggregation\n   search\n   managers\n   sql\n   transactions\n   multi-db\n   tablespaces\n   optimization\n   instrumentation\n   fixtures\n   examples/index\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Setting in Release Notes\nDESCRIPTION: This snippet demonstrates how to reference a Django setting (CACHES-OPTIONS) in the release notes documentation using reStructuredText syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n:setting:`OPTIONS <CACHES-OPTIONS>`\n```\n\n----------------------------------------\n\nTITLE: Registering Post-Render Callback with TemplateResponse in Django (Python)\nDESCRIPTION: This Django view function (`my_view`) demonstrates creating a `TemplateResponse` instance for \"mytemplate.html\". It registers a callback function, `my_render_callback` (assumed to be defined elsewhere, along with `do_post_processing`), using `add_post_render_callback`. This callback will be executed after the template rendering is complete, receiving the final rendered response object as an argument, allowing for content-sensitive post-processing.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/template-response.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Do content-sensitive processing\ndo_post_processing()\n\n\ndef my_view(request):\n    # Create a response\n    response = TemplateResponse(request, \"mytemplate.html\", {})\n    # Register the callback\n    response.add_post_render_callback(my_render_callback)\n    # Return the response\n    return response\n```\n\n----------------------------------------\n\nTITLE: Including Additional URL Patterns as a List in Django\nDESCRIPTION: This example demonstrates how to include additional URL patterns as a list of path instances in Django's URLconf. It shows a more complex setup with multiple views and nested inclusions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/urls.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import include, path\n\nfrom apps.main import views as main_views\nfrom credit import views as credit_views\n\nextra_patterns = [\n    path(\"reports/\", credit_views.report),\n    path(\"reports/<int:id>/\", credit_views.report),\n    path(\"charge/\", credit_views.charge),\n]\n\nurlpatterns = [\n    path(\"\", main_views.homepage),\n    path(\"help/\", include(\"apps.help.urls\")),\n    path(\"credit/\", include(extra_patterns)),\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Spacing in Django Template Expressions\nDESCRIPTION: Shows incorrect spacing in Django template expressions with inconsistent spaces around operators, dots, and pipes. This demonstrates syntax formatting to avoid.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_14\n\nLANGUAGE: html+django\nCODE:\n```\n{% if user . name | lower  ==  \"admin\" %}\n\n{{ user.name | upper }}\n```\n\n----------------------------------------\n\nTITLE: Using ManyToManyField in Django Models\nDESCRIPTION: References the usage of ManyToManyField in Django models, which had a regression fixed related to admin change history logging and initial data handling in model forms.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nManyToManyField\n```\n\n----------------------------------------\n\nTITLE: Model Parent Preservation in Django Delete Operation\nDESCRIPTION: Fix for Model.delete() with keep_parents=True to properly preserve parent reverse relationships in multi-table inheritance scenarios.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModel.delete(keep_parents=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Media Subsets\nDESCRIPTION: Example showing how to access specific media types using subscript operator\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> w = CalendarWidget()\n>>> print(w.media)\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.js\"></script>\n<script src=\"https://static.example.com/actions.js\"></script>\n\n>>> print(w.media[\"css\"])\n<link href=\"https://static.example.com/pretty.css\" media=\"all\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Importing Django's reverse() Function\nDESCRIPTION: The reverse() function in Django is used to generate URLs based on view information. It now only accepts and imports dotted paths from modules listed in the project's URL pattern configuration for security reasons.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import reverse\n```\n\n----------------------------------------\n\nTITLE: Django Version Number Format\nDESCRIPTION: Demonstrates the format of Django version numbers using A.B or A.B.C pattern, where A.B represents feature releases and C represents patch releases.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``A.B`` or ``A.B.C``\n```\n\n----------------------------------------\n\nTITLE: Checking Divisibility with Divisibleby Filter in Django Templates - HTML+Django\nDESCRIPTION: Shows how to use the 'divisibleby' filter to test if a value is divisible by a given argument (here, '3'). Takes an integer variable as input; outputs boolean True or False. Requires Django templates; no extra dependencies.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_67\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|divisibleby:\"3\" }}\n```\n\n----------------------------------------\n\nTITLE: Forcing String Conversion with force_str\nDESCRIPTION: Similar to smart_str, but resolves lazy instances to strings rather than keeping them as lazy objects. Can optionally skip conversion of non-string-like objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nforce_str(s, encoding='utf-8', strings_only=False, errors='strict')\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Fieldsets Layout in Django 1.0 (ModelTwoAdmin - Python)\nDESCRIPTION: This snippet shows the new `fieldsets` attribute in Django 1.0 used within a `ModelAdmin` class (in `admin.py`) to define grouped fields. The structure is similar to the old `fields` syntax for fieldsets but uses the dedicated `fieldsets` attribute, improving clarity.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ModelTwoAdmin(admin.ModelAdmin):\n    fieldsets = (\n        (\"group1\", {\"fields\": (\"foo\", \"bar\"), \"classes\": \"collapse\"}),\n        (\"group2\", {\"fields\": (\"spam\", \"eggs\"), \"classes\": \"collapse wide\"}),\n    )\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators Directly in Django URLconfs\nDESCRIPTION: Demonstrates how to apply view decorators, such as `login_required`, directly within the URLconf in Django 0.96. This is enabled by the ability to use callables as view callbacks. The example shows wrapping a generic view (`object_list`) with the `login_required` decorator directly in the `urlpatterns` definition.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.generic.list_detail import object_list\nfrom mysite.myapp.models import MyModel\n\ninfo = {\n    \"queryset\": MyModel.objects.all(),\n}\n\nurlpatterns = patterns(\"\", (\"^myview/$\", login_required(object_list), info))\n```\n\n----------------------------------------\n\nTITLE: Using RemoteUserMiddleware in Django Authentication\nDESCRIPTION: This snippet refers to the RemoteUserMiddleware and RemoteUserBackend in Django's authentication system. The update addresses a session hijacking vulnerability by logging out the user on failed login attempts.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.auth.middleware.RemoteUserMiddleware\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Full Text Search in Django\nDESCRIPTION: Shows how to perform full-text search on Django models using PostgreSQL's built-in search functionality. This example searches for entries containing a specific word in the body text.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/search.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.filter(body_text__search=\"cheese\")\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]\n```\n\n----------------------------------------\n\nTITLE: Reallowing Dashes in TLDs for `URLValidator` in Django\nDESCRIPTION: Highlights a fix (:ticket:`26204`) in Django 1.8.10 that corrected a regression from Django 1.8. `URLValidator` now correctly permits dashes within top-level domain names (TLDs) during URL validation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nURLValidator\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Parameter Reference\nDESCRIPTION: Reference to the tolerance parameter that was vulnerable to SQL injection in GIS functions on Oracle.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ntolerance\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Host User for Email Authentication in Django\nDESCRIPTION: Specifies the username (empty string by default) for SMTP authentication, used with EMAIL_HOST_PASSWORD. Django will not attempt authentication if either setting is empty.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_HOST_USER = ''\n```\n\n----------------------------------------\n\nTITLE: Potential XSS Vulnerability in Django Debug Template Tag\nDESCRIPTION: The {% debug %} template tag in Django 3.2.11 and earlier versions could potentially lead to XSS attacks due to improper encoding of the current context. This vulnerability has been addressed in version 3.2.12.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.12.txt#2025-04-23_snippet_0\n\nLANGUAGE: Django\nCODE:\n```\n{% debug %}\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Properties in Python\nDESCRIPTION: Shows how to access various properties of a GDALRaster object, including the name and driver. Demonstrates creating rasters with different drivers (in-memory and file-based).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_33\n\nLANGUAGE: pycon\nCODE:\n```\n>>> GDALRaster({\"width\": 10, \"height\": 10, \"name\": \"myraster\", \"srid\": 4326}).name\n'myraster'\n>>> GDALRaster({\"width\": 10, \"height\": 10, \"srid\": 4326}).driver.name\n'MEM'\n>>> import tempfile\n>>> rstfile = tempfile.NamedTemporaryFile(suffix=\".tif\")\n>>> rst = GDALRaster(\n...     {\n```\n\n----------------------------------------\n\nTITLE: Linking to Django Security Advisory in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in reStructuredText format, specifically linking to the Django security advisory for version 1.4.1.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _security advisory: https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/\n```\n\n----------------------------------------\n\nTITLE: Running Django System Checks\nDESCRIPTION: Demonstrates how to use the django-admin check command to run system checks on Django projects. It shows options for checking specific apps, using tags, and specifying databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin check auth admin myapp\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin check --tag models --tag compatibility\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin check --database default --database other\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin check --deploy --settings=production_settings\n```\n\n----------------------------------------\n\nTITLE: Clearing the Django Site Object Cache in Python\nDESCRIPTION: Demonstrates how Django caches the current `Site` object after the first call to `Site.objects.get_current()` and how to force a database refresh using `Site.objects.clear_cache()`. Subsequent calls retrieve the cached site unless the cache is explicitly cleared. Depends on `django.contrib.sites.models.Site`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# First call; current site fetched from database.\ncurrent_site = Site.objects.get_current()\n# ...\n\n# Second call; current site fetched from cache.\ncurrent_site = Site.objects.get_current()\n# ...\n\n# Force a database query for the third call.\nSite.objects.clear_cache()\ncurrent_site = Site.objects.get_current()\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Backend Implementation\nDESCRIPTION: Example of implementing a custom file storage backend with modified open method behavior\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files import File\nfrom django.core.files.storage import FileSystemStorage\n\n\nclass Spam(File):\n    \"\"\"\n    Spam, spam, spam, spam and spam.\n    \"\"\"\n\n    def ham(self):\n        return \"eggs\"\n\n\nclass SpamStorage(FileSystemStorage):\n    \"\"\"\n    A custom file storage backend.\n    \"\"\"\n\n    def open(self, name, mode=\"rb\"):\n        return Spam(open(self.path(name), mode))\n```\n\n----------------------------------------\n\nTITLE: Handling Inherited Non-editable Primary Keys in Admin Inlines in Python\nDESCRIPTION: Fixed crash in admin's inlines when a model has an inherited non-editable primary key.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass InlineModel(admin.TabularInline):\n    model = ModelWithInheritedPK\n```\n\n----------------------------------------\n\nTITLE: Implementing DayArchiveView in Django\nDESCRIPTION: Example of how to create a DayArchiveView for displaying articles by day. It includes the view definition, URL configuration, and an HTML template for rendering the daily archive.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.views.generic.dates import DayArchiveView\n\nfrom myapp.models import Article\n\n\nclass ArticleDayArchiveView(DayArchiveView):\n    queryset = Article.objects.all()\n    date_field = \"pub_date\"\n    allow_future = True\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import ArticleDayArchiveView\n\nurlpatterns = [\n    # Example: /2012/nov/10/\n    path(\n        \"<int:year>/<str:month>/<int:day>/\",\n        ArticleDayArchiveView.as_view(),\n        name=\"archive_day\",\n    ),\n]\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{{ day }}</h1>\n\n<ul>\n    {% for article in object_list %}\n        <li>{{ article.pub_date|date:\"F j, Y\" }}: {{ article.title }}</li>\n    {% endfor %}\n</ul>\n\n<p>\n    {% if previous_day %}\n        Previous Day: {{ previous_day }}\n    {% endif %}\n    {% if previous_day and next_day %}--{% endif %}\n    {% if next_day %}\n        Next Day: {{ next_day }}\n    {% endif %}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Fixing cache.get_or_set() behavior for None values in Django\nDESCRIPTION: Prevents cache.get_or_set() from caching None if the default argument is a callable that returns None. This fix addresses the issue reported in ticket #28601.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncache.get_or_set()\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous GET Handler in Django Class-Based View\nDESCRIPTION: Demonstrates how to define an asynchronous GET method handler in a Django class-based view. The handler uses asyncio.sleep() to simulate an asynchronous operation before returning an HTTP response.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass AsyncView(View):\n    async def get(self, request, *args, **kwargs):\n        # Perform view logic using await.\n        await asyncio.sleep(1)\n        return HttpResponse(\"Hello async world!\")\n```\n\n----------------------------------------\n\nTITLE: Django Project Directory Structure\nDESCRIPTION: Shows the basic directory structure created by django-admin startproject command.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial01.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndjangotutorial/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Intersphinx Mapping for Django Documentation\nDESCRIPTION: Configuration snippet showing how to set up Intersphinx mapping to link back to Django documentation in Sphinx documentation builds.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nintersphinx_mapping = {\n    # ...\n    \"django\": (\n        \"https://docs.djangoproject.com/en/stable/\",\n        None,\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Uploaded Files in Views (Python)\nDESCRIPTION: This snippet shows a simple view function accessing an uploaded file from `request.FILES`. It serves as context for the subsequent table explaining the API changes for accessing uploaded file attributes between Django 0.96 and 1.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n  def my_view(request):\n      f = request.FILES[\"file_field_name\"]\n      ...\n```\n\n----------------------------------------\n\nTITLE: Referencing django.contrib.auth Module in Python (Sphinx Syntax)\nDESCRIPTION: Reference using Sphinx syntax to the Django `django.contrib.auth` module. This module contains Django's core authentication framework, including user management and views. The context is the correction of decorator usage within this module's admin views.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n:mod:`django.contrib.auth`\n```\n\n----------------------------------------\n\nTITLE: Identifying Potential SQL Injection in Django Database Functions\nDESCRIPTION: Describes a security vulnerability (CVE-2022-34265) in Django 4.0.5 where Trunc() and Extract() database functions were susceptible to SQL injection if untrusted data was used as kind/lookup_name value.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTrunc(kind)\n```\n\nLANGUAGE: python\nCODE:\n```\nExtract(lookup_name)\n```\n\n----------------------------------------\n\nTITLE: Git Release Tagging Command\nDESCRIPTION: Command to create a signed Git tag for a Django release with a specific version number.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit tag --sign --message=\"Tag 4.1.1\" 4.1.1\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Test Databases in Django\nDESCRIPTION: The teardown_databases function destroys test databases and restores pre-test conditions. It takes the configuration returned by setup_databases, along with parallel and keepdb flags.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nteardown_databases(old_config, parallel=0, keepdb=False)\n```\n\n----------------------------------------\n\nTITLE: Decoding URI to IRI - Django - Python\nDESCRIPTION: Shows usage of Django's uri_to_iri utility to convert percent-encoded URIs back to Unicode IRIs as expected in Python/Django web applications. Dependencies: django.utils.encoding and its uri_to_iri function (Django must be installed). Inputs are percent-encoded URL paths or query parameters; outputs are Unicode strings when valid, otherwise preserves encoding for non-valid data. Demonstrates correct decoding of UTF-8 percent-encodings and default handling of reserved or invalid octet-sequences.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.utils.encoding import uri_to_iri\n>>> uri_to_iri(\"/%E2%99%A5%E2%99%A5/?utf8=%E2%9C%93\")\n'/♥♥/?utf8=✓'\n>>> uri_to_iri(\"%A9hello%3Fworld\")\n'%A9hello%3Fworld'\n```\n\n----------------------------------------\n\nTITLE: Django IPv4 Address Validation\nDESCRIPTION: References to Django validator classes that had security issues with handling leading zeros in IPv4 addresses, potentially allowing SSRF, RFI, and LFI attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.12.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.validators.URLValidator\ndjango.core.validators.validate_ipv4_address\ndjango.core.validators.validate_ipv46_address\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for Django Internals Documentation\nDESCRIPTION: A reStructuredText directive that creates a table of contents for the Django internals documentation, linking to various sections about contributing, mailing lists, organization, security, release processes, deprecation, git, and release procedures.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   contributing/index\n   mailing-lists\n   organization\n   security\n   release-process\n   deprecation\n   git\n   howto-release-django\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Right Overlap in PostGIS\nDESCRIPTION: Example of using the 'overlaps_right' lookup to find geometries whose bounding box overlaps or is to the right of a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__overlaps_right=geom)\n```\n\n----------------------------------------\n\nTITLE: Running migrate with Verbosity Level 2 - Console\nDESCRIPTION: This console command runs django-admin migrate and sets the output verbosity to level 2 using the --verbosity argument. Verbosity 2 enables detailed informational and debug output during the management command's execution. Acceptable values range from 0 (no output) to 3 (very verbose).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_31\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin migrate --verbosity 2\n```\n\n----------------------------------------\n\nTITLE: Identifying Admin Views add_view and user_change_password in Python\nDESCRIPTION: References the `add_view` and `user_change_password` methods, likely within the Django user admin implementation (`django.contrib.auth.admin.UserAdmin`). These specific views were previously decorated incorrectly with `sensitive_post_parameters`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadd_view\n```\n\nLANGUAGE: python\nCODE:\n```\nuser_change_password\n```\n\n----------------------------------------\n\nTITLE: Database Migration for Upgrading MD5 Passwords to PBKDF2 in Django\nDESCRIPTION: This migration code automatically upgrades legacy MD5 password hashes to use PBKDF2-wrapped MD5 hashes for improved security. It searches for users with MD5 passwords, processes each one, and saves the upgraded password hash.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import migrations\n\nfrom ..hashers import PBKDF2WrappedMD5PasswordHasher\n\n\ndef forwards_func(apps, schema_editor):\n    User = apps.get_model(\"auth\", \"User\")\n    users = User.objects.filter(password__startswith=\"md5$\")\n    hasher = PBKDF2WrappedMD5PasswordHasher()\n    for user in users:\n        algorithm, salt, md5_hash = user.password.split(\"$\", 2)\n        user.password = hasher.encode_md5_hash(md5_hash, salt)\n        user.save(update_fields=[\"password\"])\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0001_initial\"),\n        # replace this with the latest migration in contrib.auth\n        (\"auth\", \"####_migration_name\"),\n    ]\n\n    operations = [\n        migrations.RunPython(forwards_func),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Determining Plural Forms with pluralidx in JavaScript\nDESCRIPTION: Illustrates the use of the pluralidx function to determine if a plural form should be used based on a count in JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.write(pluralidx(0));\n// true\ndocument.write(pluralidx(1));\n// false\ndocument.write(pluralidx(2));\n// true\n```\n\n----------------------------------------\n\nTITLE: Configuring ALLOWED_HOSTS setting in Django 1.3.6\nDESCRIPTION: Demonstrates the new ALLOWED_HOSTS setting introduced in Django 1.3.6 to mitigate host header poisoning. The default value is shown, along with a recommendation to set a more restrictive value for production environments.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nALLOWED_HOSTS = ['*']\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Strings with smart_str\nDESCRIPTION: Returns a str object representing an arbitrary object, treating bytestrings using the specified encoding. Can optionally skip conversion of non-string-like objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsmart_str(s, encoding='utf-8', strings_only=False, errors='strict')\n```\n\n----------------------------------------\n\nTITLE: Logging All Database Queries with a Custom Wrapper Class in Django (Python)\nDESCRIPTION: This snippet provides a complete Python class (QueryLogger) that can be used as a callable wrapper for Django's database query execution. The class logs every query's SQL, parameters, execution status, exceptions, and duration by appending structured metadata to its internal list. On instantiation and use with connection.execute_wrapper, it allows denormalized and programmatic inspection of all SQL executed in the wrapped scope. Requires Python's time.monotonic and Django database connection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\n\nclass QueryLogger:\n    def __init__(self):\n        self.queries = []\n\n    def __call__(self, execute, sql, params, many, context):\n        current_query = {\"sql\": sql, \"params\": params, \"many\": many}\n        start = time.monotonic()\n        try:\n            result = execute(sql, params, many, context)\n        except Exception as e:\n            current_query[\"status\"] = \"error\"\n            current_query[\"exception\"] = e\n            raise\n        else:\n            current_query[\"status\"] = \"ok\"\n            return result\n        finally:\n            duration = time.monotonic() - start\n            current_query[\"duration\"] = duration\n            self.queries.append(current_query)\n```\n\n----------------------------------------\n\nTITLE: Getting the Associated Django Field Type for an OGRGeomType in Python\nDESCRIPTION: Demonstrates retrieving the name of the corresponding Django `GeometryField` subclass (e.g., 'PolygonField') for an `OGRGeomType` object (`gt1`) by accessing the `.django` attribute. Returns `None` if no direct mapping exists.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_28\n\nLANGUAGE: pycon\nCODE:\n```\n>>> gt1.django\n'PolygonField'\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Django System Checks in Python\nDESCRIPTION: Illustrates how to write a basic unit test for a Django system check. It involves calling the `check()` method on the object being checked, defining the expected list of `CheckMessage` instances (e.g., `Error`), and using `assertEqual` to compare the actual returned messages with the expected ones.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.checks import Error\n\nerrors = checked_object.check()\nexpected_errors = [\n    Error(\n        \"an error\",\n        hint=\"A hint.\",\n        obj=checked_object,\n        id=\"myapp.E001\",\n    )\n]\nself.assertEqual(errors, expected_errors)\n```\n\n----------------------------------------\n\nTITLE: Creating a Google News Sitemap using Django Template Language\nDESCRIPTION: This Django template generates an XML sitemap compliant with Google News standards (xmlns:news=\"https://www.google.com/schemas/sitemap-news/0.9\"). It iterates over a context variable 'urlset', populating standard sitemap elements (`loc`, `lastmod`, `changefreq`, `priority`) and adding Google News specific tags like `<news:publication_date>` and `<news:keywords>` using data from the iterated items (e.g., `url.item.publication_date`, `url.item.tags`). It utilizes Django template tags for looping (`{% for %}`), conditionals (`{% if %}`), date formatting (`|date:\"Y-m-d\"`), and whitespace control (`{% spaceless %}`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_8\n\nLANGUAGE: xml+django\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\n  xmlns=\"https://www.sitemaps.org/schemas/sitemap/0.9\"\n  xmlns:news=\"https://www.google.com/schemas/sitemap-news/0.9\">\n{% spaceless %}\n{% for url in urlset %}\n  <url>\n    <loc>{{ url.location }}</loc>\n    {% if url.lastmod %}<lastmod>{{ url.lastmod|date:\"Y-m-d\" }}</lastmod>{% endif %}\n    {% if url.changefreq %}<changefreq>{{ url.changefreq }}</changefreq>{% endif %}\n    {% if url.priority %}<priority>{{ url.priority }}</priority>{% endif %}\n    <news:news>\n      {% if url.item.publication_date %}<news:publication_date>{{ url.item.publication_date|date:\"Y-m-d\" }}</news:publication_date>{% endif %}\n      {% if url.item.tags %}<news:keywords>{{ url.item.tags }}</news:keywords>{% endif %}\n    </news:news>\n   </url>\n{% endfor %}\n{% endspaceless %}\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Referencing New Django Setting for File Upload Limit\nDESCRIPTION: Mentions the new Django setting 'DATA_UPLOAD_MAX_NUMBER_FILES' introduced to mitigate the denial-of-service vulnerability by limiting the number of file parts parsed in multipart forms.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.18.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n:setting:`DATA_UPLOAD_MAX_NUMBER_FILES`\n```\n\n----------------------------------------\n\nTITLE: Setting Universal User-Agent Access in robots.txt\nDESCRIPTION: This configuration allows all web crawlers to access the entire website without restrictions. It uses a wildcard (*) to match any User-Agent.\nSOURCE: https://github.com/django/django/blob/main/tests/generic_views/templates/generic_views/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-Agent: *\n```\n\n----------------------------------------\n\nTITLE: Creating a Bloom Index in Django with PostgreSQL\nDESCRIPTION: Creates a Bloom index with optional length and columns parameters. Requires the bloom extension to be activated on PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/indexes.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBloomIndex(*expressions, length=None, columns=(), **options)\n```\n\n----------------------------------------\n\nTITLE: Configuring StaticViewSitemap in Django URLs\nDESCRIPTION: This Python code shows how to integrate the custom `StaticViewSitemap` (defined elsewhere, presumably in `sitemaps.py`) into the Django URL configuration (`urls.py`). It defines URL patterns for the static views (`main`, `about`, `license`) and associates them with their respective view functions. A `sitemaps` dictionary maps the key 'static' to the `StaticViewSitemap` class. Finally, it sets up the `/sitemap.xml` URL pattern to use the `sitemap` view, passing it the `sitemaps` dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sitemaps.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom django.contrib.sitemaps.views import sitemap\nfrom django.urls import path\n\nfrom .sitemaps import StaticViewSitemap\nfrom . import views\n\nsitemaps = {\n    \"static\": StaticViewSitemap,\n}\n\nurlpatterns = [\n    path(\"\", views.main, name=\"main\"),\n    path(\"about/\", views.about, name=\"about\"),\n    path(\"license/\", views.license, name=\"license\"),\n    # ...\n    path(\n        \"sitemap.xml\",\n        sitemap,\n        {\"sitemaps\": sitemaps},\n        name=\"django.contrib.sitemaps.views.sitemap\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Locale-Independent Django Management Commands\nDESCRIPTION: Demonstrates how to create a management command that runs without an active locale using the @no_translations decorator. This prevents translated content from being inserted into the database.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-management-commands.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.management.base import BaseCommand, no_translations\n\n\nclass Command(BaseCommand):\n    ...\n\n    @no_translations\n    def handle(self, *args, **options): ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Maximum Inline Forms in InlineModelAdmin\nDESCRIPTION: Example showing how to override get_max_num method to dynamically determine the maximum number of inline forms based on the model instance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nclass BinaryTreeAdmin(admin.TabularInline):\n    model = BinaryTree\n\n    def get_max_num(self, request, obj=None, **kwargs):\n        max_num = 10\n        if obj and obj.parent:\n            return max_num - 5\n        return max_num\n```\n\n----------------------------------------\n\nTITLE: Enabling Field Localization in Django ModelForm\nDESCRIPTION: This snippet demonstrates how to enable localization for specific fields in a Django ModelForm using the localized_fields attribute of the Meta class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import ModelForm\nfrom myapp.models import Author\nclass AuthorForm(ModelForm):\n    class Meta:\n        model = Author\n        localized_fields = ['birth_date']\n```\n\n----------------------------------------\n\nTITLE: Customizing FlatPage ModelAdmin Fields in Django\nDESCRIPTION: Shows how to customize the fields displayed in the admin interface for a FlatPage model, including grouping fields on the same line.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass FlatPageAdmin(admin.ModelAdmin):\n    fields = [\"url\", \"title\", \"content\"]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass FlatPageAdmin(admin.ModelAdmin):\n    fields = [(\"url\", \"title\"), \"content\"]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using HStoreField in Django Models (Python)\nDESCRIPTION: Demonstrates how to define a Django model using the HStoreField for key-value storage, and provides example Python shell (pycon) commands for creating and querying model instances using various HStore lookups. Requires Django with 'django.contrib.postgres' in INSTALLED_APPS and PostgreSQL with hstore extension enabled. Input includes model instances and queries, output shows QuerySet results for different lookups; supports operations like filter by key, contains, contained_by, has_key, has_any_keys, has_keys, keys, and values. Limitations: Proper setup in both Django and PostgreSQL required; typo in key names during queries may silently return undesired results due to key lookup fallback.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.postgres.fields import HStoreField\\nfrom django.db import models\\n\\n\\nclass Dog(models.Model):\\n    name = models.CharField(max_length=200)\\n    data = HStoreField()\\n\\n    def __str__(self):\\n        return self.name\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\"})\\n\\n>>> Dog.objects.filter(data__breed=\"collie\")\\n<QuerySet [<Dog: Meg>]>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.filter(data__breed__contains=\"l\")\\n<QuerySet [<Dog: Rufus>, <Dog: Meg>]>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.models import F\\n>>> rufus = Dog.objects.annotate(breed=F(\"data__breed\"))[0]\\n>>> rufus.breed\\n'labrador'\n```\n\n----------------------------------------\n\nTITLE: Using SearchHeadline for Highlighted Search Results in Django\nDESCRIPTION: Demonstrates how to use SearchHeadline to highlight search terms in the results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/search.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.search import SearchHeadline, SearchQuery\n>>> query = SearchQuery(\"red tomato\")\n>>> entry = Entry.objects.annotate(\n...     headline=SearchHeadline(\n...         \"body_text\",\n...         query,\n...         start_sel=\"<span>\",\n...         stop_sel=\"</span>\",\n...     ),\n... ).get()\n>>> print(entry.headline)\nSandwich with <span>tomato</span> and <span>red</span> cheese.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context-Setting Node with Dynamic Variable Name (Python)\nDESCRIPTION: This Python snippet defines `CurrentTimeNode3`, a Django template Node designed to work with the 'as var_name' syntax. It stores both the format string and the target variable name (`var_name`) provided during compilation. The `render` method calculates and formats the current time, then assigns it to the context using the dynamically provided variable name: `context[self.var_name]`. It returns an empty string.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nclass CurrentTimeNode3(template.Node):\n    def __init__(self, format_string, var_name):\n        self.format_string = format_string\n        self.var_name = var_name\n\n    def render(self, context):\n        context[self.var_name] = datetime.datetime.now().strftime(self.format_string)\n        return \"\"\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Metadata Models Using a Specific Database Alias in Django ORM - Python\nDESCRIPTION: Shows filtering of spatial metadata tables with the correct database alias using Django's .using() ORM method. Ensures that queries against SpatialRefSys and GeometryColumns are executed on the intended (non-default) database, which is essential in multi-database GIS setups. Expects initialized SpatialRefSys and GeometryColumns model classes and valid filter parameters. Returns Django QuerySets scoped to the specified database connection.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nsr_qs = SpatialRefSys.objects.using(\"my_spatialite\").filter(...)\ngc_qs = GeometryColumns.objects.using(\"my_postgis\").filter(...)\n```\n\n----------------------------------------\n\nTITLE: Annotating Each Book with Author Count using annotate() (pycon)\nDESCRIPTION: Demonstrates the use of the `annotate()` method to add a calculated field to each object in a `QuerySet`. Specifically, it counts the number of related `Author` objects for each `Book` using `Count(\"authors\")`. The resulting count is added as an attribute (automatically named `authors__count`) to each `Book` instance in the returned `QuerySet`. Requires importing `Count` from `django.db.models`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/aggregation.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n# Build an annotated queryset\n>>> from django.db.models import Count\n>>> q = Book.objects.annotate(Count(\"authors\"))\n# Interrogate the first object in the queryset\n>>> q[0]\n<Book: The Definitive Guide to Django>\n>>> q[0].authors__count\n2\n# Interrogate the second object in the queryset\n>>> q[1]\n<Book: Practical Django Projects>\n>>> q[1].authors__count\n1\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Caching Headers with add_never_cache_headers\nDESCRIPTION: Adds headers to prevent caching of a response, including an Expires header set to current time and Cache-Control headers with no-cache directives. Only adds headers if they don't already exist.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nadd_never_cache_headers(response)\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Form as HTML Div Elements\nDESCRIPTION: Demonstrates the output of the as_div() method, which renders form fields as a series of <div> elements.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_22\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n<label for=\"id_subject\">Subject:</label>\n<input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_subject\">\n</div>\n<div>\n<label for=\"id_message\">Message:</label>\n<input type=\"text\" name=\"message\" required id=\"id_message\">\n</div>\n<div>\n<label for=\"id_sender\">Sender:</label>\n<input type=\"email\" name=\"sender\" required id=\"id_sender\">\n</div>\n<div>\n<label for=\"id_cc_myself\">Cc myself:</label>\n<input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Choices in Django Model Fields\nDESCRIPTION: Demonstrates two approaches for defining choices in Django model fields: using a dictionary with uppercase constants and using TextChoices enum. Both methods provide clear and maintainable ways to define field choices.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Model):\n    DIRECTION_UP = \"U\"\n    DIRECTION_DOWN = \"D\"\n    DIRECTION_CHOICES = {\n        DIRECTION_UP: \"Up\",\n        DIRECTION_DOWN: \"Down\",\n    }\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Model):\n    class Direction(models.TextChoices):\n        UP = \"U\", \"Up\"\n        DOWN = \"D\", \"Down\"\n```\n\n----------------------------------------\n\nTITLE: Applying distinct() to a QuerySet (Default) Python\nDESCRIPTION: Applies the DISTINCT clause to a QuerySet, removing duplicate rows based on all selected columns. This is the default behavior when distinct() is called without arguments and works across all supported databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n>>> Author.objects.distinct()\n```\n\n----------------------------------------\n\nTITLE: Verifying Django Installation in Python Shell\nDESCRIPTION: This snippet shows how to verify Django installation by importing Django and printing its version in the Python shell. It demonstrates the expected output format for the Django version.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/install.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import django\n>>> print(django.get_version())\n|version|\n```\n\n----------------------------------------\n\nTITLE: Evaluating a Django QuerySet in a Boolean Context in Python\nDESCRIPTION: Shows that using a QuerySet within a boolean context, such as an `if` statement, triggers its evaluation. The query executes to determine if at least one result exists, making the QuerySet evaluate to `True` if results are found, `False` otherwise.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif Entry.objects.filter(headline=\"Test\"):\n    print(\"There is at least one Entry with the headline Test\")\n```\n\n----------------------------------------\n\nTITLE: Using Related Manager's Set Method (Recommended)\nDESCRIPTION: The recommended approach for managing related objects using the set() method introduced in Django 1.9. This provides a clearer interface for updating related object collections.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> e.related_set.set([obj1, obj2, obj3])\n```\n\n----------------------------------------\n\nTITLE: Detailed Question Template with Choices\nDESCRIPTION: Template that displays question text and iterates through related choices using Django template language.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n<h1>{{ question.question_text }}</h1>\n<ul>\n{% for choice in question.choice_set.all %}\n    <li>{{ choice.choice_text }}</li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Window Frame Clause with Exclusion - SQL\nDESCRIPTION: Shows a template for window frame clauses that include an exclusion, as output by Django's ORM. This is used for advanced window expressions where part of the result set is excluded (e.g., CURRENT_ROW, GROUP, TIES). Meant as an implementation detail reference rather than executable code.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\n%(frame_type)s BETWEEN %(start)s AND %(end)s EXCLUDE %(exclusion)s\n```\n\n----------------------------------------\n\nTITLE: Fixing Regression in Django's LocaleMiddleware\nDESCRIPTION: Resolves a crash in LocaleMiddleware when processing language codes longer than 500 characters, addressing a regression introduced in Django 4.2.14.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLocaleMiddleware\n```\n\n----------------------------------------\n\nTITLE: Fixing Session Flushing Issue in cached_db Backend\nDESCRIPTION: The code shows problematic method calls that were fixed in Django 1.8.2. The issue occurred when session.flush() in the cached_db backend set the session key to an empty string rather than None, leading to potential session reuse across users.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession.flush()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to a Django Manager in Python\nDESCRIPTION: Illustrates creating a custom Django Manager ('PollManager') with an extra method ('with_counts'). This method enhances the base manager functionality by annotating the QuerySet with the count of related 'Response' objects, using Coalesce to handle polls with zero responses. The custom manager is then assigned to the 'objects' attribute of the 'OpinionPoll' model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.db.models.functions import Coalesce\n\n\nclass PollManager(models.Manager):\n    def with_counts(self):\n        return self.annotate(num_responses=Coalesce(models.Count(\"response\"), 0))\n\n\nclass OpinionPoll(models.Model):\n    question = models.CharField(max_length=200)\n    objects = PollManager()\n\n\nclass Response(models.Model):\n    poll = models.ForeignKey(OpinionPoll, on_delete=models.CASCADE)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Oracle Connection Pooling in Django Settings (Python)\nDESCRIPTION: Explains how to enable Oracle connection pooling using the `oracledb` driver's default settings. This is achieved by setting `pool: True` within the `OPTIONS` dictionary in the database configuration. Requires Django 5.2+ and the `oracledb` driver.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.oracle\",\n        # ...\n        \"OPTIONS\": {\n            \"pool\": True,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating WSGI Header Normalization in Python\nDESCRIPTION: This snippet illustrates how HTTP headers are normalized when placed into the WSGI environ, converting to uppercase and replacing dashes with underscores.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nX-Auth-User -> HTTP_X_AUTH_USER\n```\n\n----------------------------------------\n\nTITLE: Referencing Django HTML Utility Function (RST)\nDESCRIPTION: This snippet uses a ReStructuredText role to reference the `django.utils.html.urlize()` function within the documentation, indicating its involvement in a potential denial-of-service vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``django.utils.html.urlize()``\n```\n\n----------------------------------------\n\nTITLE: Generating Django Admin Man Page in Console\nDESCRIPTION: This command generates an updated version of the Django admin man page. It should be run in the 'docs' directory as part of the release process. The resulting man page will be written to 'docs/_build/man/django-admin.1'.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ make man\n```\n\n----------------------------------------\n\nTITLE: Django Static File Serving View\nDESCRIPTION: Reference to Django's static file serving view that was affected by the CVE-2017-7234 open redirect vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.7.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.views.static.serve\n```\n\n----------------------------------------\n\nTITLE: Using rjust Filter in Django Templates\nDESCRIPTION: The rjust filter right-aligns the value in a field of a given width. It takes the field size as an argument.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_83\n\nLANGUAGE: html+django\nCODE:\n```\n\"{{ value|rjust:\"10\" }}\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Boolean HTML5 Attributes in Django Form Widgets Using Python\nDESCRIPTION: Demonstrates how setting boolean values for widget attributes results in correct HTML5 boolean attribute rendering. Requires Django; uses TextInput's attrs argument with True or False, and renders the HTML. Inputs are widget attributes; outputs are string representations of HTML input elements, showing presence or absence of the 'required' attribute based on the boolean value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> name = forms.TextInput(attrs={\"required\": True})\n>>> name.render(\"name\", \"A name\")\n'<input name=\"name\" type=\"text\" value=\"A name\" required>'\n>>>\n>>> name = forms.TextInput(attrs={\"required\": False})\n>>> name.render(\"name\", \"A name\")\n'<input name=\"name\" type=\"text\" value=\"A name\">'\n```\n\n----------------------------------------\n\nTITLE: Project Name Template Configuration in YAML\nDESCRIPTION: Basic YAML template file that includes a placeholder for project name using Django template syntax\nSOURCE: https://github.com/django/django/blob/main/tests/admin_scripts/custom_templates/project_template/additional_dir/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# some file for {{ project_name }} test project\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL Extension Loader Operation\nDESCRIPTION: Example implementation of a custom Django migration operation that manages PostgreSQL extensions. Shows how to create and drop database extensions through migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/migration-operations.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.migrations.operations.base import Operation\n\n\nclass LoadExtension(Operation):\n    reversible = True\n\n    def __init__(self, name):\n        self.name = name\n\n    def state_forwards(self, app_label, state):\n        pass\n\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        schema_editor.execute(\"CREATE EXTENSION IF NOT EXISTS %s\" % self.name)\n\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        schema_editor.execute(\"DROP EXTENSION %s\" % self.name)\n\n    def describe(self):\n        return \"Creates extension %s\" % self.name\n\n    @property\n    def migration_name_fragment(self):\n        return \"create_extension_%s\" % self.name\n```\n\n----------------------------------------\n\nTITLE: Including Django Contrib Packages in INSTALLED_APPS\nDESCRIPTION: Instructions for adding contrib packages to the INSTALLED_APPS setting in a Django project. This is necessary for packages that include models or template tags.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'django.contrib.redirects',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Django Session Cookie Domain Setting\nDESCRIPTION: Reference to the SESSION_COOKIE_DOMAIN setting that was related to a session cookie deletion bug fixed in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nSESSION_COOKIE_DOMAIN\n```\n\n----------------------------------------\n\nTITLE: URL Encoding Example in Django get_absolute_url Method\nDESCRIPTION: Demonstrates safe URL construction with Unicode characters by using quote() and iri_to_uri() functions to properly encode non-ASCII characters in URLs\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.parse import quote\nfrom django.utils.encoding import iri_to_uri\n\ndef get_absolute_url(self):\n    url = \"/person/%s/?x=0&y=0\" % quote(self.location)\n    return iri_to_uri(url)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Class-Based View in Django (Python)\nDESCRIPTION: Provides an example of making a Django class-based view asynchronous by defining an async def get method. Utilizes Python's asyncio for IO-bound behavior. Requires Django and Python 3.7+ for async/await features. Inputs are HTTP GET requests; outputs are HTTP responses after performing async logic (e.g., simulated with asyncio.sleep). View must not mix sync (def) and async (async def) handlers within the class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/index.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass AsyncView(View):\n    async def get(self, request, *args, **kwargs):\n        # Perform io-blocking view logic using await, sleep for example.\n        await asyncio.sleep(1)\n        return HttpResponse(\"Hello async world!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Database-Backed Session Engine in Python\nDESCRIPTION: This code snippet demonstrates how to create a custom database-backed session engine in Django. It extends the AbstractBaseSession model with an additional account_id field and customizes the SessionStore to handle this new field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sessions.backends.db import SessionStore as DBStore\nfrom django.contrib.sessions.base_session import AbstractBaseSession\nfrom django.db import models\n\n\nclass CustomSession(AbstractBaseSession):\n    account_id = models.IntegerField(null=True, db_index=True)\n\n    @classmethod\n    def get_session_store_class(cls):\n        return SessionStore\n\n\nclass SessionStore(DBStore):\n    @classmethod\n    def get_model_class(cls):\n        return CustomSession\n\n    def create_model_instance(self, data):\n        obj = super().create_model_instance(data)\n        try:\n            account_id = int(data.get(\"_auth_user_id\"))\n        except (ValueError, TypeError):\n            account_id = None\n        obj.account_id = account_id\n        return obj\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Authentication View in Python\nDESCRIPTION: This snippet demonstrates how to reference the Django authentication login view, which is mentioned as one of the cases relying on user input for redirection.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.20.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.auth.views.login()\n```\n\n----------------------------------------\n\nTITLE: Setting Django Admin Session Cookie Domain\nDESCRIPTION: Example of configuring the SESSION_COOKIE_DOMAIN setting to resolve login issues when the cookie domain doesn't match the browser domain.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/admin.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSESSION_COOKIE_DOMAIN = 'www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Check Method in Django\nDESCRIPTION: Method that determines if a user is allowed to authenticate. Returns False for users with is_active=False, while allowing custom user models without an is_active field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef user_can_authenticate():\n    # Returns whether the user is allowed to authenticate\n    # Returns False for users with is_active=False\n    pass\n```\n\n----------------------------------------\n\nTITLE: Copying Simple Django Model Instances\nDESCRIPTION: Shows how to create a copy of a Django model instance by setting the primary key to None and the _state.adding flag to True before saving.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nblog = Blog(name=\"My blog\", tagline=\"Blogging is easy\")\nblog.save()  # blog.pk == 1\n\nblog.pk = None\nblog._state.adding = True\nblog.save()  # blog.pk == 2\n```\n\n----------------------------------------\n\nTITLE: Fixing Queryset Crash with Nested OuterRef() Annotations in Django 4.2\nDESCRIPTION: Resolves a regression that caused queryset crashes when filtering against deeply nested OuterRef() annotations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nOuterRef()\n```\n\n----------------------------------------\n\nTITLE: Removing Message Model and Related Methods in Django Authentication\nDESCRIPTION: The Message model in django.contrib.auth, along with its related manager and methods in the User model, will be removed. The messages framework should be used instead.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser.message_set.create()\nuser.get_and_delete_messages()\n```\n\n----------------------------------------\n\nTITLE: Identifying Vulnerability in `django.utils.http.is_safe_url()` in Django\nDESCRIPTION: This function was central to the CVE-2016-2512 vulnerability. Before the fix in Django 1.8.10, it incorrectly flagged certain URLs containing basic authentication as safe, enabling potential malicious redirects and XSS attacks. The fix enhanced its validation logic.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.http.is_safe_url()\n```\n\n----------------------------------------\n\nTITLE: Updating QueryDict in Python\nDESCRIPTION: Shows how the update method appends values to existing keys rather than replacing them.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> q = QueryDict(\"a=1\", mutable=True)\n>>> q.update({\"a\": \"2\"})\n>>> q.getlist(\"a\")\n['1', '2']\n>>> q[\"a\"]  # returns the last\n'2'\n```\n\n----------------------------------------\n\nTITLE: Accessing M Coordinates of a LineString Geometry in Python\nDESCRIPTION: Shows how to retrieve a list of M (measure) coordinates from a LineString `OGRGeometry` with M values ('LINESTRING(0 1 2 10, 1 2 3 11, 2 3 4 12)') using the `.m` attribute. It returns a list of M values or `None` if the LineString lacks M coordinates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_24\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"LINESTRING(0 1 2 10, 1 2 3 11, 2 3 4 12)\").m\n[10.0, 11.0, 12.0]\n```\n\n----------------------------------------\n\nTITLE: Using Extract and Trunc Functions in Django QuerySets\nDESCRIPTION: Demonstrates the new Extract and Trunc functions for querying datetime components. Extract allows extracting components as integers, while Trunc enables truncating dates/datetimes to significant components.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models.functions import Extract, Trunc\nfrom django.db.models import Count\n\n# Extract year from date\nEvent.objects.annotate(year=Extract('date', 'year')).values('year').annotate(count=Count('id'))\n\n# Truncate to day for daily sales\nSale.objects.annotate(day=Trunc('timestamp', 'day')).values('day').annotate(total=Sum('amount'))\n```\n\n----------------------------------------\n\nTITLE: Model Display Method Override\nDESCRIPTION: Restored functionality to override get_FOO_display method in Django models.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.7.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.Model.get_FOO_display\n```\n\n----------------------------------------\n\nTITLE: Retrieving Direct User Permissions with ModelBackend in Django (Python)\nDESCRIPTION: Returns the set of permission strings assigned directly to the `user_obj`. Returns an empty set if the user is anonymous or inactive (`is_active` is False). The asynchronous version `aget_user_permissions()` was added in Django 5.2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nget_user_permissions(user_obj, obj=None)\n```\n\nLANGUAGE: python\nCODE:\n```\naget_user_permissions(user_obj, obj=None)\n```\n\n----------------------------------------\n\nTITLE: Linking to Django Ticket 18985 using reStructuredText\nDESCRIPTION: Uses the reStructuredText `:ticket:` role to create a hyperlink to issue 18985 in the Django project's ticket tracker. The ticket number '18985' itself serves as the link text. This refers to the bug fix regarding module-level warnings during tests.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:ticket:`18985`\n```\n\n----------------------------------------\n\nTITLE: Manually Upgrading a DATETIME Column for Fractional Seconds in MySQL using SQL\nDESCRIPTION: This SQL snippet manually modifies a DATETIME column to support fractional seconds via the DATETIME(6) type in MySQL. Replace 'your_table' and 'your_datetime_column' with actual table and column names. Prerequisites: MySQL version must support fractional seconds. Used for legacy databases lacking this definition; limitation: may require downtime and appropriate permissions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE `your_table` MODIFY `your_datetime_column` DATETIME(6)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Models with Foreign Key Relationship in Django\nDESCRIPTION: Creates a Person model with a name field and a Friendship model with two foreign keys to Person. This demonstrates a simple relationship that can be managed through Django admin.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=128)\n\n\nclass Friendship(models.Model):\n    to_person = models.ForeignKey(\n        Person, on_delete=models.CASCADE, related_name=\"friends\"\n    )\n    from_person = models.ForeignKey(\n        Person, on_delete=models.CASCADE, related_name=\"from_friends\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Form as HTML Table\nDESCRIPTION: Shows the output of the as_table() method, which renders form fields as rows in an HTML table.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_25\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><th><label for=\"id_subject\">Subject:</label></th><td><input id=\"id_subject\" type=\"text\" name=\"subject\" maxlength=\"100\" required></td></tr>\n<tr><th><label for=\"id_message\">Message:</label></th><td><input type=\"text\" name=\"message\" id=\"id_message\" required></td></tr>\n<tr><th><label for=\"id_sender\">Sender:</label></th><td><input type=\"email\" name=\"sender\" id=\"id_sender\" required></td></tr>\n<tr><th><label for=\"id_cc_myself\">Cc myself:</label></th><td><input type=\"checkbox\" name=\"cc_myself\" id=\"id_cc_myself\"></td></tr>\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for ResolverMatch repr bug\nDESCRIPTION: This snippet references a Django ticket number for a regression that caused an incorrect repr of ResolverMatch for class-based views in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33426`\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Paginator Classes (Python)\nDESCRIPTION: Django 6.0 introduces `django.core.paginator.AsyncPaginator` and `django.core.paginator.AsyncPage`. These provide asynchronous implementations of the standard `Paginator` and `Page` classes, suitable for use in async views.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.paginator.AsyncPaginator\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.core.paginator.AsyncPage\n```\n\n----------------------------------------\n\nTITLE: Using translate tag with noop option in Django templates\nDESCRIPTION: Shows how to use the noop option with the {% translate %} tag to skip translation but still perform variable lookup.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_20\n\nLANGUAGE: html+django\nCODE:\n```\n<title>{% translate \"myvar\" noop %}</title>\n```\n\n----------------------------------------\n\nTITLE: Referencing NFKC Normalization Function in Python\nDESCRIPTION: This snippet references the NFKC normalization function from Python's unicodedata module, which is relevant to the security vulnerability discussed in the release notes.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.23.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nunicodedata.normalize\n```\n\n----------------------------------------\n\nTITLE: Basic Spatial Aggregation Examples in GeoDjango\nDESCRIPTION: Demonstrates using the Extent and Union spatial aggregate functions to calculate the bounding box extent and geometric union of all WorldBorder geometries.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.db.models import Extent, Union\n>>> WorldBorder.objects.aggregate(Extent(\"mpoly\"), Union(\"mpoly\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Django Development Version\nDESCRIPTION: Command to install Django from local development source using pip in editable mode\nSOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install -e django/\n```\n\n----------------------------------------\n\nTITLE: Example Admin URL Exploiting Data Leakage via Query Parameters\nDESCRIPTION: Demonstrates a potential data leakage vulnerability in `contrib.admin` prior to Django 1.5.9. By manipulating the `pop` and `t` (aliased as `to_field`) query parameters in an admin change form URL, an authenticated user with permissions to view the form could potentially expose arbitrary field data (like password hashes) in the page's HTML source. The fix involves validating the `to_field` parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.9.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/admin/auth/user/?pop=1&t=password\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Even Number Validator Function in Django (Python)\nDESCRIPTION: Defines a callable validator function 'validate_even' to ensure a number is even. It raises a ValidationError using Django's translation utilities if the value is not even. Dependencies: 'django.core.exceptions.ValidationError' and 'django.utils.translation.gettext_lazy'. Takes a single argument 'value'; expects an integer. Outputs: None if valid, raises ValidationError if not. Intended for use with Django field validators in models or forms.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/validators.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.exceptions import ValidationError\\nfrom django.utils.translation import gettext_lazy as _\\n\\ndef validate_even(value):\\n    if value % 2 != 0:\\n        raise ValidationError(\\n            _('%(value)s is not an even number'),\\n            params={'value': value},\\n        )\n```\n\n----------------------------------------\n\nTITLE: Modifying Widget Attributes After Form Definition in Django Python\nDESCRIPTION: Shows how widget attributes can be programmatically updated after initial field definition by using the widget.attrs.update method. Assumes Django and a forms.Form class. The code updates 'class' and 'size' HTML attributes for widgets, providing flexibility to adjust attributes post-declaration. Inputs are dictionaries or keyword arguments; output is updated widget configuration. Limitations: must call update before form rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CommentForm(forms.Form):\n    name = forms.CharField()\n    url = forms.URLField()\n    comment = forms.CharField()\n\n    name.widget.attrs.update({\"class\": \"special\"})\n    comment.widget.attrs.update(size=\"40\")\n```\n\n----------------------------------------\n\nTITLE: Django F-Expression Field Comparisons\nDESCRIPTION: Examples of using F-expressions to compare different fields within the same model and perform arithmetic operations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import F\n>>> Entry.objects.filter(number_of_comments__gt=F(\"number_of_pingbacks\"))\n>>> Entry.objects.filter(number_of_comments__gt=F(\"number_of_pingbacks\") * 2)\n>>> Entry.objects.filter(rating__lt=F(\"number_of_comments\") + F(\"number_of_pingbacks\"))\n>>> Entry.objects.filter(authors__name=F(\"blog__name\"))\n```\n\n----------------------------------------\n\nTITLE: Building Django Documentation Locally with Sphinx\nDESCRIPTION: Commands to generate HTML output from the documentation source files located in the docs directory using the make tool provided by Sphinx.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd docs\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Fixing JSONField Lookup Crash in Django 1.11.26\nDESCRIPTION: This bugfix resolves a crash occurring when using specific lookups (contains, contained_by, has_key, has_keys, or has_any_keys) on django.contrib.postgres.fields.JSONField, particularly when a key transform is involved in the expression.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.26.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFixed a crash when using a ``contains``, ``contained_by``, ``has_key``,\n  ``has_keys``, or ``has_any_keys`` lookup on\n  ``django.contrib.postgres.fields.JSONField``, if the right or left hand\n  side of an expression is a key transform (:ticket:`30826`).\n```\n\n----------------------------------------\n\nTITLE: Using escapeseq Filter with join\nDESCRIPTION: Demonstrates using the escapeseq filter in combination with join to safely escape sequence elements.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_70\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n    {{ my_list|escapeseq|join:\", \" }}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting FilePathField Path with Callable in Django Models (Python)\nDESCRIPTION: Shows how to define a Django model `MyModel` with a `FilePathField`. Instead of a static string, the `path` argument is set to a callable function `images_path`, which dynamically constructs the path using `os.path.join` and Django settings (`settings.LOCAL_FILE_DIR`). This allows the directory scanned by `FilePathField` to be determined at runtime.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom django.conf import settings\nfrom django.db import models\n\n\ndef images_path():\n    return os.path.join(settings.LOCAL_FILE_DIR, \"images\")\n\n\nclass MyModel(models.Model):\n    file = models.FilePathField(path=images_path)\n```\n\n----------------------------------------\n\nTITLE: Max Validation Example\nDESCRIPTION: Demonstrates validation of maximum number of forms in a formset\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import formset_factory\nfrom myapp.forms import ArticleForm\nArticleFormSet = formset_factory(ArticleForm, max_num=1, validate_max=True)\ndata = {\n    \"form-TOTAL_FORMS\": \"2\",\n    \"form-INITIAL_FORMS\": \"0\",\n    \"form-0-title\": \"Test\",\n    \"form-0-pub_date\": \"1904-06-16\",\n    \"form-1-title\": \"Test 2\",\n    \"form-1-pub_date\": \"1912-06-23\",\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Creating WorldBorder Model Table\nDESCRIPTION: Shows the SQL that will be generated to create the database table for the WorldBorder model, including the geometry field for spatial data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN;\n--\n-- Create model WorldBorder\n--\nCREATE TABLE \"world_worldborder\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"name\" varchar(50) NOT NULL,\n    \"area\" integer NOT NULL,\n    \"pop2005\" integer NOT NULL,\n    \"fips\" varchar(2) NOT NULL,\n    \"iso2\" varchar(2) NOT NULL,\n    \"iso3\" varchar(3) NOT NULL,\n    \"un\" integer NOT NULL,\n    \"region\" integer NOT NULL,\n    \"subregion\" integer NOT NULL,\n    \"lon\" double precision NOT NULL,\n    \"lat\" double precision NOT NULL\n    \"mpoly\" geometry(MULTIPOLYGON,4326) NOT NULL\n)\n;\nCREATE INDEX \"world_worldborder_mpoly_id\" ON \"world_worldborder\" USING GIST (\"mpoly\");\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Identifying Vulnerable Django Template Filter\nDESCRIPTION: This snippet references the `:tfilter:wordwrap` template filter, which is noted alongside `django.utils.text.wrap()` in the Django 5.0.13 release notes as being subject to a potential denial-of-service attack (CVE-2025-26699) when processing very long strings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.13.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n:tfilter:`wordwrap`\n```\n\n----------------------------------------\n\nTITLE: Saving Individual Objects in a Django QuerySet\nDESCRIPTION: Shows how to save each object in a QuerySet individually when you need the save() method to be called explicitly for each instance.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfor item in my_queryset:\n    item.save()\n```\n\n----------------------------------------\n\nTITLE: Using Django Functions in Jinja2 Templates\nDESCRIPTION: Shows how to use Django-specific functions like 'static' and 'url' in Jinja2 templates after configuring the custom environment.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_15\n\nLANGUAGE: jinja2\nCODE:\n```\n<img src=\"{{ static('path/to/company-logo.png') }}\" alt=\"Company Logo\">\n\n<a href=\"{{ url('admin:index') }}\">Administration</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Primary Keys in Django Models - Python\nDESCRIPTION: Demonstrates how to declare a Django model with a composite primary key using CompositePrimaryKey. Shows three model definitions (Product, Order, and OrderLineItem), where OrderLineItem's pk comprises two fields. This example requires Django 5.2+, and utilizes the CompositePrimaryKey class and standard Django model fields; dependencies include 'django.db.models'.\nKey parameters: pk (composite), product and order foreign keys, and quantity. Used for designing tables where the primary key is a combination of multiple columns.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Order(models.Model):\n    reference = models.CharField(max_length=20, primary_key=True)\n\n\nclass OrderLineItem(models.Model):\n    pk = models.CompositePrimaryKey(\"product_id\", \"order_id\")\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n```\n\n----------------------------------------\n\nTITLE: Using assertFormsetError() Method in Django Tests\nDESCRIPTION: The assertFormsetError() method is used in Django tests to assert formset errors. A regression in Django 4.0 that caused a crash when used with a formset named 'form' has been fixed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nassertFormsetError()\n```\n\n----------------------------------------\n\nTITLE: Checking Filesystem Encoding in Python\nDESCRIPTION: Code to verify the filesystem encoding configuration for handling non-ASCII filenames\nSOURCE: https://github.com/django/django/blob/main/docs/ref/unicode.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nsys.getfilesystemencoding()\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Settings\nDESCRIPTION: These settings are specific to Oracle databases.  `DATAFILE_TMP` sets the initial size for `DATAFILE_TMP`. `DATAFILE_EXTSIZE` defines the amount by which the DATAFILE is extended. `DATAFILE_TMP_EXTSIZE` determines how much `DATAFILE_TMP` extends.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'50M'``\n\nThis is an Oracle-specific setting.\n\nThe initial size of the DATAFILE_TMP.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'25M'``\n\nThis is an Oracle-specific setting.\n\nThe amount by which the DATAFILE is extended when more space is required.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'25M'``\n\nThis is an Oracle-specific setting.\n\nThe amount by which the DATAFILE_TMP is extended when more space is required.\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Table of Contents for Django Mixins\nDESCRIPTION: RestructuredText markup that defines the documentation structure and table of contents for Django class-based views mixins documentation. It uses toctree directive to organize sub-pages.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   mixins-simple\n   mixins-single-object\n   mixins-multiple-object\n   mixins-editing\n   mixins-date-based\n```\n\n----------------------------------------\n\nTITLE: Using format_html_join for Multiple HTML Formatting in Python\nDESCRIPTION: Shows how to use format_html_join to format and join multiple HTML fragments safely. It can handle both positional and keyword arguments through an iterator.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nformat_html_join(\n    \"\\n\",\n    \"<li>{} {}</li>\",\n    ((u.first_name, u.last_name) for u in users),\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nformat_html_join(\n    \"\\n\",\n    '<li data-id=\"{id}\">{id} {title}</li>',\n    ({\"id\": b.id, \"title\": b.title} for b in books),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Django Template Tag - HTML Usage Example\nDESCRIPTION: Example showing how to use the custom 'upper' template tag in Django templates. The tag converts enclosed content to uppercase, including variable interpolation.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n{% upper %}This will appear in uppercase, {{ your_name }}.{% endupper %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for help_text HTML-escaping regression\nDESCRIPTION: This snippet references a Django ticket number for a regression where help_text was HTML-escaped in automatically-generated forms in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33419`\n```\n\n----------------------------------------\n\nTITLE: Accessing CSS Classes for Form Fields\nDESCRIPTION: Shows how to access and add CSS classes to form fields using the css_classes method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_39\n\nLANGUAGE: pycon\nCODE:\n```\n>>> f = ContactForm(data={\"message\": \"\"})\n>>> f[\"message\"].css_classes()\n'required'\n\n>>> f = ContactForm(data={\"message\": \"\"})\n>>> f[\"message\"].css_classes(\"foo bar\")\n'foo bar required'\n```\n\n----------------------------------------\n\nTITLE: Removing Related Objects with remove() Method in Django ORM - Python\nDESCRIPTION: Explains the use of the remove() method to dissociate a related object from its parent in a one-to-many relationship. Fetches instances of Blog and Entry, then removes their association using b.entry_set.remove(e). Requires model definitions with ForeignKey field set to null=True to allow removal. Inputs are the instances to be dissociated; no output is returned, but the relationship is removed in the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/relations.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n>>> b = Blog.objects.get(id=1)\n>>> e = Entry.objects.get(id=234)\n>>> b.entry_set.remove(e)  # Disassociates Entry e from Blog b.\n```\n\n----------------------------------------\n\nTITLE: Unsafe Use of RawSQL with Quoted Placeholder - Django ORM - Python\nDESCRIPTION: Provides an example of an insecure RawSQL usage where the SQL substitution placeholder is quoted, making it vulnerable to SQL injection attacks. Serves as a warning for developers by highlighting improper use of string interpolation in SQL. Should never be used in production; included for educational purposes only.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nRawSQL(\"select col from sometable where othercol = '%s'\")  # unsafe!\n```\n\n----------------------------------------\n\nTITLE: Specifying 'SCRIPT_NAME' Setting and Example URL in Django - Markdown\nDESCRIPTION: This snippet includes 'SCRIPT_NAME' (a WSGI/server-provided environment variable) and its use in constructing URLs in Django settings, as well as an example URL ('http://myhost/'). It demonstrates contextual configuration rather than functional code, with the purpose of documenting bugfix behavior. These entries are used to help developers understand the scope of the fixed regression in static/media file serving.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nSCRIPT_NAME\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://myhost/\n```\n\n----------------------------------------\n\nTITLE: Getting WKB Buffer Size for OGRGeometry in Python\nDESCRIPTION: Demonstrates retrieving the size (in bytes) required for the Well-Known Binary (WKB) representation of an `OGRGeometry` object ('POINT(1 2)') by accessing the `.wkb_size` attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT(1 2)\").wkb_size\n21\n```\n\n----------------------------------------\n\nTITLE: PyPI Release Upload Command\nDESCRIPTION: Command to upload Django release packages to PyPI using twine.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntwine upload --repository django dist/*\n```\n\n----------------------------------------\n\nTITLE: Accessing Reverse Foreign Key from Proxy Model in Python\nDESCRIPTION: Demonstrates how reverse foreign keys from proxy models are now propagated to their concrete class. The reverse relation can be accessed as a descriptor on the proxied model class and used in queryset filtering.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Example usage:\nproxy_model = ProxyModel.objects.get(id=1)\nconcrete_model = proxy_model._meta.concrete_model\n\n# Accessing reverse relation\nrelated_objects = concrete_model.related_set.all()\n\n# Using in queryset filtering\nfiltered_objects = ConcreteModel.objects.filter(related__some_field=value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Locale Formats\nDESCRIPTION: A reference to the locale formats configuration file that handles date, time, and number formatting for specific locales in Django. The file is located at conf/locale/<locale>/formats.py and requires manual updates through pull requests.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/localizing.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconf/locale/<locale>/formats.py\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Left Overlap in PostGIS\nDESCRIPTION: Example of using the 'overlaps_left' lookup to find geometries whose bounding box overlaps or is to the left of a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__overlaps_left=geom)\n```\n\n----------------------------------------\n\nTITLE: Using json_script for Safe JavaScript Data Embedding in Python\nDESCRIPTION: Demonstrates the use of json_script function to safely embed JSON data in HTML for JavaScript use. It escapes special characters and wraps the data in a script tag.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\njson_script({\"hello\": \"world\"}, element_id=\"hello-data\")\n```\n\n----------------------------------------\n\nTITLE: Executing Django Project Creation Command in Python\nDESCRIPTION: This command is used to start a new Django project. It generates a project template with a settings.py file, which had a documentation link issue that was fixed in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmanage.py startproject\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Test Signal\nDESCRIPTION: Demonstrates how to access the 'template_rendered' signal from Django's test signals module. This signal is only available during testing.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndjango.test.signals.template_rendered\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie-Based Sessions\nDESCRIPTION: Setting the SESSION_ENGINE to use signed cookies for session storage. This stores session data directly in the client's browser as signed (but not encrypted) cookies.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"django.contrib.sessions.backends.signed_cookies\"\n```\n\n----------------------------------------\n\nTITLE: Proper Introspection of pk_fields for Single and Composite Key Models - Pycon\nDESCRIPTION: Demonstrates retrieving the fields composing a model's primary key using the _meta.pk_fields attribute. Shows output for both a model with a single-field primary key (Product) and a model with a composite primary key (OrderLineItem). For composite PKs, this attribute lists all participating fields (e.g., ForeignKeys). This is the recommended approach for composite key support from Django 5.2 onward.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Product._meta.pk_fields\n[<django.db.models.fields.AutoField: id>]\n>>> OrderLineItem._meta.pk_fields\n[\n    <django.db.models.fields.ForeignKey: product>,\n    <django.db.models.fields.ForeignKey: order>\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Storage Class (RST)\nDESCRIPTION: This snippet uses the ReStructuredText `:class:` role to reference the `django.core.files.storage.FileSystemStorage` class. It's mentioned in relation to adjusting the stacklevel for a deprecation warning concerning `OS_OPEN_FLAGS` usage.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`~django.core.files.storage.FileSystemStorage`\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Auth Logout View in Security Fix Description\nDESCRIPTION: Reference to the Django authentication logout view that had a security vulnerability allowing session creation during anonymous access. The note describes how this could be exploited for denial-of-service attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.views.logout()\n```\n\n----------------------------------------\n\nTITLE: Fixing Data Loss in SplitArrayField with ArrayField(BooleanField())\nDESCRIPTION: This fix addresses a bug in SplitArrayField when used with ArrayField(BooleanField()). Previously, all values after the first True value were incorrectly marked as checked instead of preserving the passed values. The fix ensures that the original values are maintained correctly.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.27.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.postgres.forms import SplitArrayField\nfrom django.db import models\n\nclass MyModel(models.Model):\n    boolean_array = models.ArrayField(models.BooleanField())\n\nclass MyForm(forms.ModelForm):\n    boolean_array = SplitArrayField(forms.BooleanField(), size=5)\n```\n\n----------------------------------------\n\nTITLE: Implementing MonthArchiveView\nDESCRIPTION: Custom MonthArchiveView implementation for Article model with specific settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.dates import MonthArchiveView\n\nfrom myapp.models import Article\n\n\nclass ArticleMonthArchiveView(MonthArchiveView):\n    queryset = Article.objects.all()\n    date_field = \"pub_date\"\n    allow_future = True\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw ID Field Selection Widget - Django Admin in Python\nDESCRIPTION: Shows how to use the raw_id_fields attribute to change the widget for a ForeignKey in the admin from a standard select box to a raw ID field with a search magnifier. This approach is helpful when the related model has too many instances to efficiently display in a dropdown. Accepts a list of field names and integrates with the admin’s search popup interface.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleAdmin(admin.ModelAdmin):\n    raw_id_fields = [\"newspaper\"]\n```\n\n----------------------------------------\n\nTITLE: Extending an Overridden Admin Template in Django\nDESCRIPTION: This example shows how to extend a template while overriding it. The snippet customizes the admin base site template by adding a custom logo to the branding block while preserving the original content with block.super.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/overriding-templates.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"admin/base_site.html\" %}\n\n{% block branding %}\n  <img src=\"link/to/logo.png\" alt=\"logo\">\n  {{ block.super }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Referencing LooseVersion in Python\nDESCRIPTION: Reference to the LooseVersion class involved in random crashes with GEOS version handling since Django 2.0.6.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLooseVersion\n```\n\n----------------------------------------\n\nTITLE: Referencing Django HttpResponse Class in Python\nDESCRIPTION: This code snippet shows how to reference the HttpResponse class from Django's http module. It's mentioned in the context of explaining that Django itself wasn't vulnerable to the header injection issue.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n```\n\n----------------------------------------\n\nTITLE: Negated Q Objects in Case Expressions\nDESCRIPTION: Example of a problematic pattern where negated Q objects in Case expressions would try to generate a subquery and crash. This bug was fixed in Django 1.8.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCase(When(~Q(friends__age__lte=30)))\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Primary Keys in Models - Django - Python\nDESCRIPTION: Illustrates how to define a Django model with a composite primary key using the new CompositePrimaryKey class in Django 5.2. Dependencies include an up-to-date Django installation with support for CompositePrimaryKey, and this pattern is only valid with supported versions. The 'pk' attribute is assigned a composite of 'version' and 'name' fields. This snippet requires models to be migrated for schema changes to take effect, and limitations include compatibility only with supported database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass Release(models.Model):\n    pk = models.CompositePrimaryKey(\"version\", \"name\")\n    version = models.IntegerField()\n    name = models.CharField(max_length=20)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Middleware for REMOTE_USER Authentication\nDESCRIPTION: Configuration of Django MIDDLEWARE setting to enable RemoteUserMiddleware for REMOTE_USER authentication. Must be placed after AuthenticationMiddleware.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    \"...\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.auth.middleware.RemoteUserMiddleware\",\n    \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Running migrate with Custom Python Path - Console\nDESCRIPTION: This console command invokes django-admin's migrate command with the --pythonpath option. It adds the specified filesystem path to sys.path prior to execution, permitting use of project source located outside the standard Python path. No additional dependencies are needed; the --pythonpath value must be a valid directory. This option is usually not required when using manage.py.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_28\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin migrate --pythonpath='/home/djangoprojects/myproject'\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Value with Django `formats` Module (Python)\nDESCRIPTION: This snippet shows how to directly format a date/time value using a specific format key (e.g., 'DATETIME_FORMAT') with the `formats.date_format()` function from `django.utils.formats`. This leverages the locale-aware formatting capabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import formats\n\nvalue_formatted = formats.date_format(value, \"DATETIME_FORMAT\")\n```\n\n----------------------------------------\n\nTITLE: Applying distinct() on Subset of Ordered Fields (PostgreSQL) Python\nDESCRIPTION: Applies DISTINCT ON (fields) on PostgreSQL where the distinct fields are a subset of the fields listed in order_by(). The distinct fields must still appear at the beginning of the order_by() clause in the correct order.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.order_by(\"author\", \"pub_date\").distinct(\"author\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Widget Type Rendering in Django Template\nDESCRIPTION: Template code showing how to conditionally render form fields based on their widget type.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_38\n\nLANGUAGE: html+django\nCODE:\n```\n{% for field in form %}\n    {% if field.widget_type == 'checkbox' %}\n        # render one way\n    {% else %}\n        # render another way\n    {% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for makemigrations crash on renaming field of renamed model\nDESCRIPTION: This snippet references a Django ticket number for a regression that caused a crash of makemigrations when renaming a field of a renamed model in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33480`\n```\n\n----------------------------------------\n\nTITLE: Using BigAutoField in Django Models\nDESCRIPTION: Introduces BigAutoField, a new field type that acts like AutoField but can store larger numbers. It's guaranteed to fit numbers from 1 to 9223372036854775807.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\nclass MyModel(models.Model):\n    id = models.BigAutoField(primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Django First Day of Week Setting\nDESCRIPTION: Specifies the `FIRST_DAY_OF_WEEK` in Django, a value from 0 (Sunday) to 6 (Saturday), used when displaying calendars. Defaults to 0, representing Sunday.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\nFIRST_DAY_OF_WEEK\n---------------------\n\nDefault: `0` (Sunday)\n\nA number representing the first day of the week. This is especially useful\nwhen displaying a calendar. This value is only used when not using\nformat internationalization, or when a format cannot be found for the\ncurrent locale.\n\nThe value must be an integer from 0 to 6, where 0 means Sunday, 1 means\nMonday and so on.\n```\n\n----------------------------------------\n\nTITLE: Defining Media as a Dynamic Property in Django Widgets\nDESCRIPTION: Demonstrates how to define the media property as a dynamic property method that returns a forms.Media instance with CSS and JavaScript requirements.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CalendarWidget(forms.TextInput):\n    @property\n    def media(self):\n        return forms.Media(\n            css={\"all\": [\"pretty.css\"]}, js=[\"animations.js\", \"actions.js\"]\n        )\n```\n\n----------------------------------------\n\nTITLE: Using intcomma Filter in Django Template\nDESCRIPTION: Shows how the intcomma filter adds commas to large numbers for better readability.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{{ 4500|intcomma }} becomes 4,500.\n{{ 4500.2|intcomma }} becomes 4,500.2.\n{{ 45000|intcomma }} becomes 45,000.\n{{ 450000|intcomma }} becomes 450,000.\n{{ 4500000|intcomma }} becomes 4,500,000.\n```\n\n----------------------------------------\n\nTITLE: ModelForm Exclusion of Composite Primary Key Fields - Python\nDESCRIPTION: Shows that Django forms.ModelForm automatically excludes virtual composite primary key (pk) from generated form fields. OrderLineItemForm references OrderLineItem, and fields = \"__all__\" includes all real fields except the composite pk. Dependencies: Django forms module and properly configured model with composite key.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass OrderLineItemForm(forms.ModelForm):\n    class Meta:\n        model = OrderLineItem\n        fields = \"__all__\"\n```\n\n----------------------------------------\n\nTITLE: Django File Upload Temporary Directory Setting\nDESCRIPTION: Defines the `FILE_UPLOAD_TEMP_DIR` setting, specifying the directory for temporarily storing large upload files in Django. Defaults to `None`, utilizing the OS's temporary directory if unspecified.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\nFILE_UPLOAD_TEMP_DIR\n------------------------\n\nDefault: `None`\n\nThe directory to store data to (typically files larger than\n:setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files.\nIf `None`, Django will use the standard temporary directory for the operating\nsystem. For example, this will default to `/tmp` on *nix-style operating\nsystems.\n\nSee :doc:`/topics/files` for details.\n```\n\n----------------------------------------\n\nTITLE: Grouping by Foreign Key Description in Django Templates\nDESCRIPTION: This example shows how to group items by a property of a related object using the regroup tag. Any valid template lookup can be used as a grouping attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_38\n\nLANGUAGE: html+django\nCODE:\n```\n{% regroup cities by country.description as country_list %}\n```\n\n----------------------------------------\n\nTITLE: Defining Natural Key Dependencies in Django Model\nDESCRIPTION: Shows how to define dependencies for natural keys to control serialization order. The natural_key() method is extended with a dependencies attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    author = models.ForeignKey(Person, on_delete=models.CASCADE)\n\n    def natural_key(self):\n        return (self.name,) + self.author.natural_key()\n\n    natural_key.dependencies = [\"example_app.person\"]\n```\n\n----------------------------------------\n\nTITLE: Comparing GEOS Polygon Areas in Python\nDESCRIPTION: Illustrates the recommended method for comparing two `Polygon` objects based on their size. Direct comparison using operators like `>` compares the underlying `LineString` representation, which might not yield a meaningful geometric comparison. Instead, the `.area` property should be used to explicitly compare the polygons' areas.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> if poly_1.area > poly_2.area:\n...     pass\n...\n```\n\n----------------------------------------\n\nTITLE: Field Group as_field_group Example with Django\nDESCRIPTION: Shows how to use the as_field_group method to render field elements together\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{{ form.non_field_errors }}\n<div class=\"fieldWrapper\">\n  {{ form.subject.as_field_group }}\n</div>\n<div class=\"fieldWrapper\">\n  {{ form.message.as_field_group }}\n</div>\n<div class=\"fieldWrapper\">\n  {{ form.sender.as_field_group }}\n</div>\n<div class=\"fieldWrapper\">\n  {{ form.cc_myself.as_field_group }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using timeuntil Filter in Django Templates\nDESCRIPTION: The timeuntil filter is similar to timesince, but measures the time from now until the given date. It can take an optional argument for the comparison point.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_91\n\nLANGUAGE: html+django\nCODE:\n```\n{{ conference_date|timeuntil:from_date }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Feed with View-Rendered Stylesheet\nDESCRIPTION: This snippet demonstrates how to use a view in your Django project to render an XSLT document for styling an RSS feed by using reverse_lazy to link to the view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.urls import reverse_lazy\n\n\nclass FeedWithStylesheetView(Feed):\n    stylesheets = [\n        reverse_lazy(\"your-custom-view-name\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to GeoJSON in Django\nDESCRIPTION: Example showing how to convert a geometric point to GeoJSON format using the AsGeoJSON function in Django. Returns a GeoJSON representation containing type and coordinates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> City.objects.annotate(json=AsGeoJSON(\"point\")).get(name=\"Chicago\").json\n{\"type\":\"Point\",\"coordinates\":[-87.65018,41.85039]}\n```\n\n----------------------------------------\n\nTITLE: Indexing Results from a raw() Query\nDESCRIPTION: Example showing how to use indexing with raw() query results to retrieve specific objects. Both standard and SQL-limited indexing approaches are shown.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> first_person = Person.objects.raw(\"SELECT * FROM myapp_person\")[0]\n```\n\n----------------------------------------\n\nTITLE: Implementing CurrentSiteManager in a Django Model (Python)\nDESCRIPTION: Shows how to add `CurrentSiteManager` to a Django model (`Photo`) alongside the default `models.Manager`. This manager automatically filters querysets to include only objects associated with the current site, identified by a `ForeignKey` named `site` by default. Requires `django.contrib.sites`, `django.db.models` and the `SITE_ID` setting to be defined.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.models import Site\nfrom django.contrib.sites.managers import CurrentSiteManager\nfrom django.db import models\n\n\nclass Photo(models.Model):\n    photo = models.FileField(upload_to=\"photos\")\n    photographer_name = models.CharField(max_length=100)\n    pub_date = models.DateField()\n    site = models.ForeignKey(Site, on_delete=models.CASCADE)\n    objects = models.Manager()\n    on_site = CurrentSiteManager()\n```\n\n----------------------------------------\n\nTITLE: Default Password Hashers Configuration in Django (Python)\nDESCRIPTION: Shows the default value for the `PASSWORD_HASHERS` setting in Django. This list defines the supported password hashing algorithms, with the first entry (PBKDF2PasswordHasher) being used for storing new passwords. Other entries allow verification of passwords hashed with older or different algorithms.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPASSWORD_HASHERS = [\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Querying GeoIP2 for Country and City Information in Python\nDESCRIPTION: Demonstrates how to use the GeoIP2 class to query country and city information for IP addresses and domain names. Shows various methods including country(), city(), lat_lon(), and geos().\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoip2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.geoip2 import GeoIP2\n>>> g = GeoIP2()\n>>> g.country(\"google.com\")\n{'continent_code': 'NA',\n 'continent_name': 'North America',\n 'country_code': 'US',\n 'country_name': 'United States',\n 'is_in_european_union': False}\n>>> g.city(\"72.14.207.99\")\n{'accuracy_radius': 1000,\n 'city': 'Mountain View',\n 'continent_code': 'NA',\n 'continent_name': 'North America',\n 'country_code': 'US',\n 'country_name': 'United States',\n 'is_in_european_union': False,\n 'latitude': 37.419200897216797,\n 'longitude': -122.05740356445312,\n 'metro_code': 807,\n 'postal_code': '94043',\n 'region_code': 'CA',\n 'region_name': 'California',\n 'time_zone': 'America/Los_Angeles',\n 'dma_code': 807,\n 'region': 'CA'}\n>>> g.lat_lon(\"salon.com\")\n(39.0437, -77.4875)\n>>> g.lon_lat(\"uh.edu\")\n(-95.4342, 29.834)\n>>> g.geos(\"24.124.1.80\").wkt\n'POINT (-97 38)'\n```\n\n----------------------------------------\n\nTITLE: Updating Django Admin URL Configuration\nDESCRIPTION: The AdminSite.root() method for setting up admin URLs will be removed. Include admin.site.urls instead.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Old method:\nAdminSite.root()\n\n# New method:\nadmin.site.urls\n```\n\n----------------------------------------\n\nTITLE: Running Django Test Suite with GeoDjango Tests\nDESCRIPTION: Shell command to run the complete Django test suite including GeoDjango tests using specific settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ ./runtests.py --settings=postgis\n```\n\n----------------------------------------\n\nTITLE: Referencing Meta.constraints Attribute in Django Models\nDESCRIPTION: This code snippet demonstrates how to reference the Meta.constraints attribute in Django models. It's mentioned in the context of a bugfix for the __len lookup in ArrayField.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n:attr:`Meta.constraints <django.db.models.Options.constraints>`\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Range Fields with 'endswith' Lookup in Django Python\nDESCRIPTION: Illustrates the `endswith` lookup (`__endswith`) on the `ages` field. This query finds `Event` objects where the `ages` range has an upper bound equal to the specified value (10 in this case). Note that PostgreSQL canonical range representation excludes the upper bound, so this lookup compares against the stored upper bound value. Requires the `Event` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_29\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Event.objects.filter(ages__endswith=10)\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Assigning and Accessing Composite Primary Keys in Django Shell - Pycon\nDESCRIPTION: Demonstrates interactive usage of composite primary keys with Django ORM objects. Shows creation of related Product, Order, and OrderLineItem models, then inspects the assigned composite primary key as a tuple. Requires access to a Django shell environment and properly configured models/database. Inputs: field values for object creation; output: tuple representation of pk.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> product = Product.objects.create(name=\"apple\")\n>>> order = Order.objects.create(reference=\"A755H\")\n>>> item = OrderLineItem.objects.create(product=product, order=order, quantity=1)\n>>> item.pk\n(1, \"A755H\")\n```\n\n----------------------------------------\n\nTITLE: Creating FormSet Classes using formset_factory in Django Python\nDESCRIPTION: Defines the `formset_factory` function signature. This factory function takes a Django form class and optional configuration parameters (like `extra`, `can_order`, `can_delete`, `max_num`, `min_num`, validation flags, etc.) to return a new `FormSet` class. The returned class is typically derived from `BaseFormSet` unless a different `formset` base class is provided.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/formsets.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. function:: formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelAdmin in Django 1.0 (Python)\nDESCRIPTION: This snippet shows the new approach for configuring the admin interface in Django 1.0, typically placed in an `admin.py` file. It defines an `AuthorAdmin` class inheriting from `admin.ModelAdmin`, specifies `list_display`, uses `prepopulated_fields` (replacing the model's `prepopulate_from`), and registers the `Author` model with the admin site using `admin.site.register`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom models import Author\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = [\"first_name\", \"last_name\"]\n    prepopulated_fields = {\"slug\": (\"first_name\", \"last_name\")}\n\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic RSS Feed Class in Django\nDESCRIPTION: This example demonstrates how to create a simple RSS feed for a police beat news site using Django's Feed class. It shows how to define feed attributes and methods to populate feed items.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.urls import reverse\nfrom policebeat.models import NewsItem\n\n\nclass LatestEntriesFeed(Feed):\n    title = \"Police beat site news\"\n    link = \"/sitenews/\"\n    description = \"Updates on changes and additions to police beat central.\"\n\n    def items(self):\n        return NewsItem.objects.order_by(\"-pub_date\")[:5]\n\n    def item_title(self, item):\n        return item.title\n\n    def item_description(self, item):\n        return item.description\n\n    # item_link is only needed if NewsItem has no get_absolute_url method.\n    def item_link(self, item):\n        return reverse(\"news-item\", args=[item.pk])\n```\n\n----------------------------------------\n\nTITLE: Linking to Django Ticket 20078 using reStructuredText\nDESCRIPTION: Uses the reStructuredText `:ticket:` role to create a hyperlink to issue 20078 in the Django project's ticket tracker. The ticket number '20078' itself serves as the link text. This refers to the bug fix preventing filtering on password hashes in the user admin.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n:ticket:`20078`\n```\n\n----------------------------------------\n\nTITLE: Allowed F-string Pattern with Local Variables in Django\nDESCRIPTION: Shows proper f-string usage with complex expressions assigned to local variables before use in the f-string. This demonstrates the preferred pattern for complex expressions in f-strings.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Allowed with local variable assignment\nuser = get_user()\nf\"hello {user}\"\nuser_days_old = user.age * 365.25\nf\"you are {user_days_old} days old\"\n```\n\n----------------------------------------\n\nTITLE: Context Object Manipulation in Django\nDESCRIPTION: Shows various operations for manipulating Context objects including push, pop, and dictionary operations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.template import Context\n>>> c = Context({\"foo\": \"bar\"})\n>>> c[\"foo\"]\n'bar'\n>>> del c[\"foo\"]\n>>> c[\"foo\"]\nTraceback (most recent call last):\n...\nKeyError: 'foo'\n>>> c[\"newvariable\"] = \"hello\"\n>>> c[\"newvariable\"]\n'hello'\n```\n\n----------------------------------------\n\nTITLE: Defining Feed Category Methods in Django\nDESCRIPTION: Methods for providing feed categories dynamically. Includes object-based and static implementations.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef categories(self, obj):\n    \"\"\"\n    Takes the object returned by get_object() and returns the feed's\n    categories as iterable over strings.\n    \"\"\"\n\ndef categories(self):\n    \"\"\"\n    Returns the feed's categories as iterable over strings.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Databases in Python\nDESCRIPTION: This function creates test databases by calling setup_databases. It's used to prepare the database environment for running tests.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef setup_databases(verbosity, interactive, *, time_keeper=None, keepdb=False, debug_sql=False, parallel=0, aliases=None, serialized_aliases=None, **kwargs):\n    # Create test databases\n    # Return data structure for teardown\n```\n\n----------------------------------------\n\nTITLE: Defining ModelForm with FileInput Widget for FileField - Django Forms - Python\nDESCRIPTION: Shows how to define a ModelForm for a Document model, manually specifying the FileInput widget for the document FileField. This approach disables Django's default ClearableFileInput checkbox for clearing files, restoring legacy behavior when a file field is not required to support clearing values. Requires django.forms and a custom Document model accessible in myapp.models. The code sets the widgets dict in Meta with the document field mapped to forms.FileInput.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom myapp.models import Document\n\n\nclass DocumentForm(forms.ModelForm):\n    class Meta:\n        model = Document\n        widgets = {\"document\": forms.FileInput}\n```\n\n----------------------------------------\n\nTITLE: Importing Constants Django Python\nDESCRIPTION: This snippet demonstrates how to import the `constants` module from `django.contrib.messages` to avoid circular import issues when overriding the `MESSAGE_LEVEL` setting. It is crucial for correct behavior when integrating with Django's message framework.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages import constants as message_constants\n```\n\n----------------------------------------\n\nTITLE: Fixing QuerySet Operations with values_list() Annotations\nDESCRIPTION: Bug fix for combining annotated values_list() querysets using union(), difference(), or intersection() operations that previously crashed due to mismatching columns. Fixed regression from Django 1.11.8.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.12.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalues_list().union()\nvalues_list().difference()\nvalues_list().intersection()\n```\n\n----------------------------------------\n\nTITLE: MonthArchiveView URL Configuration\nDESCRIPTION: URL patterns for monthly article archives supporting both numeric and string month formats.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom myapp.views import ArticleMonthArchiveView\n\nurlpatterns = [\n    path(\n        \"<int:year>/<int:month>/\",\n        ArticleMonthArchiveView.as_view(month_format=\"%m\"),\n        name=\"archive_month_numeric\",\n    ),\n    path(\n        \"<int:year>/<str:month>/\",\n        ArticleMonthArchiveView.as_view(),\n        name=\"archive_month\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Using Static Template Tag with Context Variables\nDESCRIPTION: Shows how to use the static template tag with a context variable instead of a hardcoded string. This allows for dynamic selection of static files based on variables passed to the template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_106\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n<link rel=\"stylesheet\" href=\"{% static user_stylesheet %}\" media=\"screen\">\n```\n\n----------------------------------------\n\nTITLE: Linking to Python Bug 17468 using reStructuredText\nDESCRIPTION: Uses the reStructuredText `:bpo:` role (bugs.python.org) to create a hyperlink to issue 17468 in the Python bug tracker. The link text displayed is 'a related issue'. This markup links to an upstream Python issue connected to the Django memory leak mentioned in the release notes.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:bpo:`a related issue <17468>`\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Expression in Release Notes\nDESCRIPTION: This snippet shows how to reference a Django expression (IsNull()) in the release notes documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n``IsNull()``\n```\n\n----------------------------------------\n\nTITLE: SQL Constraint Generation - 64-bit Platform Example\nDESCRIPTION: Example showing how Django 1.1 generates foreign key constraint names on 64-bit platforms before the name generation change. Creates a 16-character digest in the constraint name.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE myapp_sometable ADD CONSTRAINT object_id_refs_id_5e8f10c132091d1e FOREIGN KEY ...\n```\n\n----------------------------------------\n\nTITLE: Django HTTP Request Scheme Detection Properties\nDESCRIPTION: References to Django HTTP request properties and methods affected by the CVE-2019-12781 security fix, including scheme detection, security verification, and URL building behind reverse-proxies.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.http.HttpRequest.scheme\nHttpRequest.is_secure()\nHttpRequest.build_absolute_uri()\nSECURE_SSL_REDIRECT\nSECURE_PROXY_SSL_HEADER\n```\n\n----------------------------------------\n\nTITLE: Iterating Over UploadedFile Instances in Django (Python)\nDESCRIPTION: This code snippet demonstrates how to iterate over lines in an UploadedFile object in Django. It leverages Python's iterator protocol to read file content line-by-line, which prevents excessive memory usage when dealing with large files. The approach ensures platform-independent handling of newlines and is useful for processing file uploads efficiently.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/uploads.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor line in uploadedfile:\n    do_something_with(line)\n```\n\n----------------------------------------\n\nTITLE: Filtering Annotated QuerySet by Window Function Rank - Django ORM - Python\nDESCRIPTION: Example of annotating a QuerySet with a window function (rank within category) and another aggregation (count of actors), then filtering using a disjunctive predicate (OR). Requires Django ORM and Q objects. The usage demonstrates a limitation: filtering with OR against a window annotation results in a NotImplementedError due to unsupported post-aggregation disjunctive conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = Movie.objects.annotate(\n...     category_rank=Window(Rank(), partition_by=\"category\", order_by=\"-rating\"),\n...     scenes_count=Count(\"actors\"),\n... ).filter(Q(category_rank__lte=3) | Q(title__contains=\"Batman\"))\n>>> list(qs)\nNotImplementedError: Heterogeneous disjunctive predicates against window functions\nare not implemented when performing conditional aggregation.\n```\n\n----------------------------------------\n\nTITLE: QuerySet Ordering with GROUP BY\nDESCRIPTION: Fixed regression where QuerySet.ordered attribute incorrectly returned True for GROUP BY queries on models with Meta.ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.annotate().values()\n```\n\n----------------------------------------\n\nTITLE: Python Week Day Calculation Equivalent to Django Extract\nDESCRIPTION: This snippet calculates the weekday in Python to match Django's week_day lookup, where Sunday is 1 and Saturday is 7. No Django dependency, but can help developers understand the mapping applied by Django extract functions. Takes a datetime instance and applies a modular arithmetic operation to adjust the isoweekday to Django's convention. Outputs a single integer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> dt = datetime(2015, 6, 15)\n>>> (dt.isoweekday() % 7) + 1\n2\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Error Messages in Django CharField using Python\nDESCRIPTION: Shows how to customize the error message for a specific validation rule (in this case, `required`) on a `django.forms.CharField` by passing a dictionary to the `error_messages` argument during field initialization. When `clean()` is called with an empty string, it raises a `ValidationError` with the custom message \"Please enter your name\".\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> name = forms.CharField(error_messages={\"required\": \"Please enter your name\"})\n>>> name.clean(\"\")\nTraceback (most recent call last):\n  ...\nValidationError: ['Please enter your name']\n```\n\n----------------------------------------\n\nTITLE: Defining a Point using Well Known Text (WKT) in Python\nDESCRIPTION: This snippet demonstrates defining a geographic point using the Well Known Text (WKT) standard format within a Python interactive session (like the Django shell). The string stores longitude and latitude coordinates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pnt_wkt = \"POINT(-95.3385 29.7245)\"\n```\n\n----------------------------------------\n\nTITLE: Referencing sensitive_post_parameters Decorator in Python (Sphinx Syntax)\nDESCRIPTION: Reference using Sphinx syntax to the Django `sensitive_post_parameters` function decorator. This decorator is used to prevent specific POST parameters from being included in error reports for security reasons. The release note fixes its improper application in certain admin views.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:func:`~django.views.decorators.debug.sensitive_post_parameters`\n```\n\n----------------------------------------\n\nTITLE: Security Documentation in ReStructuredText\nDESCRIPTION: Structured documentation of Django security vulnerabilities, including CVE references, affected versions, patch commit references, and brief descriptions. The document chronicles security issues from 2006-2012 and provides links to full descriptions and patches for each vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/security.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nDecember 10, 2012 - No CVE 1\n----------------------------\n\nAdditional hardening of ``Host`` header handling. `Full description\n<https://www.djangoproject.com/weblog/2012/dec/10/security/>`__\n\nVersions affected\n~~~~~~~~~~~~~~~~~\n\n* Django 1.3 :commit:`(patch) <2da4ace0bc1bc1d79bf43b368cb857f6f0cd6b1b>`\n* Django 1.4 :commit:`(patch) <319627c184e71ae267d6b7f000e293168c7b6e09>`\n```\n\n----------------------------------------\n\nTITLE: Illustrating FieldError in select_related for Nested Non-Relational Fields (Django Python)\nDESCRIPTION: This Python console snippet shows that Django 1.10 introduced stricter validation for `select_related()`, raising a `FieldError` even when a non-relational field ('name') is nested within a valid relation ('author'). This ensures only full relational paths are specified.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Book.objects.select_related(\"author__name\")\nTraceback (most recent call last):\n...\nFieldError: Non-relational field given in select_related: 'name'\n```\n\n----------------------------------------\n\nTITLE: Initial Values Not Used as Fallback During Validation\nDESCRIPTION: Clarifies that `initial` values specified for Django form fields are only for initial display of unbound forms. They are *not* used as fallback data during the validation process if a field's value is missing in the submitted data. Required fields will still raise validation errors if empty.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField(initial=\"Your name\")\n...     url = forms.URLField(initial=\"https://\")\n...     comment = forms.CharField()\n...\n>>> data = {\"name\": \"\", \"url\": \"\", \"comment\": \"Foo\"}\n>>> f = CommentForm(data)\n>>> f.is_valid()\nFalse\n# The form does *not* fallback to using the initial values.\n>>> f.errors\n{'url': ['This field is required.'], 'name': ['This field is required.']}\n```\n\n----------------------------------------\n\nTITLE: Instantiating GEOS LineString with Separate Arguments in Python\nDESCRIPTION: Demonstrates creating a `LineString` geometry object by passing its constituent points as separate arguments to the constructor. These arguments can be either coordinate tuples `(x, y)` or `Point` objects. Both examples shown produce the identical `LineString`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ls = LineString((0, 0), (1, 1))\n>>> ls = LineString(Point(0, 0), Point(1, 1))\n```\n\n----------------------------------------\n\nTITLE: Accessing and Converting Field Attribute Data using Django Field class (Python)\nDESCRIPTION: Illustrates retrieving and converting the properties of Field objects (attributes of a spatial feature) by key, including name, type (integer), type name, numeric value, width, and precision. Examples include direct property retrieval and type conversion functions such as as_double(), as_int(), as_string(), and as_datetime(). Requires an instance of a Django GIS Field object, and supports flexible data access patterns with type safety. Outputs may be strings, integers, floats, or tuples, depending on the accessor used. Non-numeric precision is returned as zero.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Name\"].name\n'Name'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Density\"].type\n2\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Name\"].type_name\n'String'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Population\"].value\n102121\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Name\"].width\n80\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Density\"].precision\n15\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Density\"].as_double()\n874.7\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Population\"].as_int()\n102121\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Name\"].as_string()\n'Pueblo'\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> city[\"Created\"].as_datetime()\n(c_long(1999), c_long(5), c_long(23), c_long(0), c_long(0), c_long(0), c_long(0))\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn Package\nDESCRIPTION: Command to install the Uvicorn ASGI server using pip package manager.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/uvicorn.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install uvicorn\n```\n\n----------------------------------------\n\nTITLE: Security URL Checking Example in Django's redirect system\nDESCRIPTION: This snippet shows an example URL that would be incorrectly considered safe by Django's is_safe_url() function prior to the fix for CVE-2016-2512. This vulnerability could allow malicious redirects or XSS attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhttp://mysite.example.com\\@attacker.com\n```\n\n----------------------------------------\n\nTITLE: Django Admin Logging Method Removals\nDESCRIPTION: Removal of model admin logging methods used for tracking deletions and actions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nModelAdmin.log_deletion()\nLogEntryManager.log_action()\n```\n\n----------------------------------------\n\nTITLE: Querying Zipcode Polygons Overlapping Geometry in Django\nDESCRIPTION: Shows how to use the bboverlaps spatial lookup to filter Zipcode objects whose polygon bounding box overlaps with a given geometry.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__bboverlaps=geom)\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Decorators to Django Class-Based Views (Python/Django)\nDESCRIPTION: This example demonstrates two equivalent ways to apply multiple decorators to a class-based view. The first approach uses a list of decorators, while the second applies multiple method_decorator declarations. Both achieve the same result of applying never_cache and login_required in sequence.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/intro.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndecorators = [never_cache, login_required]\n\n\n@method_decorator(decorators, name=\"dispatch\")\nclass ProtectedView(TemplateView):\n    template_name = \"secret.html\"\n\n\n@method_decorator(never_cache, name=\"dispatch\")\n@method_decorator(login_required, name=\"dispatch\")\nclass ProtectedView(TemplateView):\n    template_name = \"secret.html\"\n```\n\n----------------------------------------\n\nTITLE: Using Django ORM for Database Operations\nDESCRIPTION: This snippet showcases how to use Django's ORM to perform various database operations such as creating, querying, and modifying objects.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Import the models we created from our \"news\" app\n>>> from news.models import Article, Reporter\n\n# No reporters are in the system yet.\n>>> Reporter.objects.all()\n<QuerySet []>\n\n# Create a new Reporter.\n>>> r = Reporter(full_name=\"John Smith\")\n\n# Save the object into the database. You have to call save() explicitly.\n>>> r.save()\n\n# Now it has an ID.\n>>> r.id\n1\n\n# Now the new reporter is in the database.\n>>> Reporter.objects.all()\n<QuerySet [<Reporter: John Smith>]>\n\n# Fields are represented as attributes on the Python object.\n>>> r.full_name\n'John Smith'\n\n# Django provides a rich database lookup API.\n>>> Reporter.objects.get(id=1)\n<Reporter: John Smith>\n>>> Reporter.objects.get(full_name__startswith=\"John\")\n<Reporter: John Smith>\n>>> Reporter.objects.get(full_name__contains=\"mith\")\n<Reporter: John Smith>\n>>> Reporter.objects.get(id=2)\nTraceback (most recent call last):\n    ...\nDoesNotExist: Reporter matching query does not exist.\n\n# Create an article.\n>>> from datetime import date\n>>> a = Article(\n...     pub_date=date.today(), headline=\"Django is cool\", content=\"Yeah.\", reporter=r\n... )\n>>> a.save()\n\n# Now the article is in the database.\n>>> Article.objects.all()\n<QuerySet [<Article: Django is cool>]>\n\n# Article objects get API access to related Reporter objects.\n>>> r = a.reporter\n>>> r.full_name\n'John Smith'\n\n# And vice versa: Reporter objects get API access to Article objects.\n>>> r.article_set.all()\n<QuerySet [<Article: Django is cool>]>\n\n# The API follows relationships as far as you need, performing efficient\n# JOINs for you behind the scenes.\n# This finds all articles by a reporter whose name starts with \"John\".\n>>> Article.objects.filter(reporter__full_name__startswith=\"John\")\n<QuerySet [<Article: Django is cool>]>\n\n# Change an object by altering its attributes and calling save().\n>>> r.full_name = \"Billy Goat\"\n>>> r.save()\n\n# Delete an object with delete().\n>>> r.delete()\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing PostgreSQL Pattern Ops Index in Django AddField\nDESCRIPTION: Addresses a bugfix in Django 1.8.14 (ticket #26889) where the `AddField` migration operation on PostgreSQL failed to create the necessary `varchar_pattern_ops` or `text_pattern_ops` index for `CharField` or `TextField` model fields respectively. This ensures proper database indexing for efficient pattern matching queries (e.g., LIKE 'value%') on PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.14.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nvarchar/text_pattern_ops\n```\n\nLANGUAGE: python\nCODE:\n```\nCharField\n```\n\nLANGUAGE: python\nCODE:\n```\nTextField\n```\n\nLANGUAGE: python\nCODE:\n```\nAddField\n```\n\n----------------------------------------\n\nTITLE: Proper Top-level Block Indentation in Django Templates\nDESCRIPTION: Demonstrates proper indentation for top-level blocks in Django templates that use extends. Top-level blocks should not be indented within templates that extend other templates.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_15\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block content %}\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Storage Engine in MySQL using SQL\nDESCRIPTION: This SQL command demonstrates altering a table to use the InnoDB storage engine in MySQL. Replace <tablename> with the actual table name. No dependencies beyond MySQL privileges required; input is an existing table. This command is necessary when the MySQL server’s default storage engine is not desired for specific tables. Limitation: This must be repeated for each table, and ALTER TABLE may lock the table during operation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE <tablename> ENGINE=INNODB;\n```\n\n----------------------------------------\n\nTITLE: Referencing PostgreSQL Backend Method (RST)\nDESCRIPTION: This snippet references the `init_connection_state` method within the PostgreSQL database backend. The context is restoring the ability to override timezone and role setting behavior within this method, which was affected by a regression in Django 5.1.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_11\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``init_connection_state``\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Memcached Backend (Multiple Servers, Different Ports) in Django (Python)\nDESCRIPTION: This Python snippet configures Django's `CACHES` setting for a shared cache across multiple Memcached instances running on different IP addresses and ports (172.19.26.240:11211, 172.19.26.242:11212, 172.19.26.244:11213). The `LOCATION` setting takes a list of server addresses. It uses the `PyMemcacheCache` backend.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.memcached.PyMemcacheCache\",\n        \"LOCATION\": [\n            \"172.19.26.240:11211\",\n            \"172.19.26.242:11212\",\n            \"172.19.26.244:11213\",\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Savepoint Rollback Example\nDESCRIPTION: Illustrates using savepoints for fine-grained transaction control in PostgreSQL, allowing rollback of specific operations while preserving others.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\na.save()  # Succeeds, and never undone by savepoint rollback\nsid = transaction.savepoint()\ntry:\n    b.save()  # Could throw exception\n    transaction.savepoint_commit(sid)\nexcept IntegrityError:\n    transaction.savepoint_rollback(sid)\nc.save()  # Succeeds, and a.save() is never undone\n```\n\n----------------------------------------\n\nTITLE: Accessing LiveServerTestCase Port in Django 1.11.2\nDESCRIPTION: New functionality allowing binding to a specific port through LiveServerTestCase.port attribute. This feature was reintroduced following changes to port zero binding behavior in Django 1.11.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nLiveServerTestCase.port\n```\n\n----------------------------------------\n\nTITLE: Defining USE_THOUSAND_SEPARATOR setting\nDESCRIPTION: This setting controls whether numbers are displayed with a thousand separator. When set to True, Django formats numbers using NUMBER_GROUPING and THOUSAND_SEPARATOR settings. Locale dictates the values for these settings, taking precedence over project settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Running Django Testserver on Specific IP and Port with Fixture\nDESCRIPTION: Example of running the Django testserver on a specific IP address and port with a test fixture.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_24\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin testserver --addrport 1.2.3.4:7000 test\n```\n\n----------------------------------------\n\nTITLE: Checking Reverse One-to-One Relationships - Django ORM Shell - Python\nDESCRIPTION: Demonstrates checking the existence of reverse one-to-one relationship accessors from a User object. Uses the hasattr Python built-in to confirm if an instance has a specific related object due to the OneToOneField in MySpecialUser. This snippet is intended for interactive Django shell usage and is useful for verifying the availability of reverse attributes for models with OneToOneField relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_46\n\nLANGUAGE: pycon\nCODE:\n```\n>>> user = User.objects.get(pk=1)\\n>>> hasattr(user, \"myspecialuser\")\\nTrue\\n>>> hasattr(user, \"supervisor_of\")\\nTrue\n```\n\n----------------------------------------\n\nTITLE: Enhancing Django Form error handling with add_error() method\nDESCRIPTION: This snippet describes the new Form.add_error() API that simplifies adding validation errors to specific fields from any location in form processing. It replaces direct manipulation of private error-related attributes and supports attaching ValidationError instances with metadata like codes and parameters. The method improves error management flexibility and consistency.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nform.add_error('field_name', ValidationError('Error message', code='invalid'))\n```\n\n----------------------------------------\n\nTITLE: Using CurrentSiteManager with a Custom Field Name in Python\nDESCRIPTION: Demonstrates how to configure `CurrentSiteManager` when the model's `ForeignKey` to the `Site` model is named differently (e.g., `publish_on` instead of `site`). The custom field name (`\"publish_on\"`) is passed as an argument to the `CurrentSiteManager` constructor. Requires `django.contrib.sites`, `django.db.models`, and the `SITE_ID` setting.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sites.models import Site\nfrom django.contrib.sites.managers import CurrentSiteManager\nfrom django.db import models\n\n\nclass Photo(models.Model):\n    photo = models.FileField(upload_to=\"photos\")\n    photographer_name = models.CharField(max_length=100)\n    pub_date = models.DateField()\n    publish_on = models.ForeignKey(Site, on_delete=models.CASCADE)\n    objects = models.Manager()\n    on_site = CurrentSiteManager(\"publish_on\")\n```\n\n----------------------------------------\n\nTITLE: Using a Complex Simple Block Tag in Django Templates\nDESCRIPTION: Demonstrates how to use the custom 'msgbox' block tag in a Django template, showing different message levels and content.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% load testapptags %}\n\n{% block content %}\n\n  {% msgbox level=\"error\" %}\n    Please fix all errors. Further documentation can be found at\n    <a href=\"http://example.com\">Docs</a>.\n  {% endmsgbox %}\n\n  {% msgbox level=\"info\" %}\n    More information at: <a href=\"http://othersite.com\">Other Site</a>/\n  {% endmsgbox %}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring MIDDLEWARE for Django Auth (Python)\nDESCRIPTION: Lists the essential middleware components within the `MIDDLEWARE` setting in `settings.py` for Django's authentication. `SessionMiddleware` manages user sessions across requests, and `AuthenticationMiddleware` associates users with requests using those sessions. These are typically included by default.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# settings.py\nMIDDLEWARE = [\n    # ...\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Database Engine in Django Settings (Python)\nDESCRIPTION: Shows how to configure Django to use a custom database backend (defined in a package like `mydbengine` as shown in previous examples). This is done by setting the `ENGINE` key in the `DATABASES` dictionary within `settings.py` to the name of the custom backend package.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"mydbengine\",\n        # ...\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: RST External Links Definition for Python Resources\nDESCRIPTION: ReStructuredText markup defining external links to Python-related resources including the official Python website, documentation, and learning materials.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _python: https://www.python.org/\n.. _list of Python resources for non-programmers: https://wiki.python.org/moin/BeginnersGuide/NonProgrammers\n.. _Python documentation: https://docs.python.org/3/\n.. _books about Python: https://wiki.python.org/moin/PythonBooks\n```\n\n----------------------------------------\n\nTITLE: Creating Superusers with manage.py in Django (Shell)\nDESCRIPTION: Shows how to create a superuser via the Django management command `createsuperuser` from the command line. It demonstrates providing username and email as command-line arguments using the `--username` and `--email` options, which will then prompt only for the password.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py createsuperuser --username=joe --email=joe@example.com\n```\n\n----------------------------------------\n\nTITLE: Using GeometryCollection and Polygon in Django GIS\nDESCRIPTION: The GeometryCollection and Polygon classes in Django's GIS module are used for handling geometric data. A long-standing bug that caused crashes on some platforms (particularly macOS with ARM64 architecture) has been fixed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.gis.geos.Polygon\n```\n\n----------------------------------------\n\nTITLE: Referencing Django's Static File Serving Function in Python\nDESCRIPTION: This snippet refers to Django's static file serving function, which was vulnerable to a denial-of-service attack in older versions due to line-by-line file reading.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.18.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndjango.views.static.serve\n```\n\n----------------------------------------\n\nTITLE: Referencing Django GenericIPAddressField in Python\nDESCRIPTION: This snippet demonstrates how to reference the GenericIPAddressField class from Django's forms module. It is mentioned in the context of the security fix, where the field now defines a max_length of 39 characters to prevent potential denial-of-service attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.18.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.forms.GenericIPAddressField\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite PRAGMA Options via init_command in Django - Python\nDESCRIPTION: Provides an example of initializing SQLite connection PRAGMAs by supplying an init_command string to OPTIONS in Django DATABASES. Enables synchronous writes durability and custom cache size for increased reliability or performance. Prerequisite: Django project using SQLite. Input: PRAGMA statements as a semicolon-separated string. Output: SQLite connections will execute the specified PRAGMAs upon establishment. Requires correct syntax of PRAGMAs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        # ...\n        \"OPTIONS\": {\n            \"init_command\": \"PRAGMA synchronous=3; PRAGMA cache_size=2000;\",\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hyperlink in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in reStructuredText, using a reference-style link with a separate URL definition.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.7.txt#2025-04-23_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _release advisory: https://www.djangoproject.com/weblog/2011/sep/10/127/\n```\n\n----------------------------------------\n\nTITLE: Using interpolate for String Formatting in JavaScript\nDESCRIPTION: Shows how to use the interpolate function for string formatting with translations in JavaScript.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst formats = ngettext(\n  'There is %s object. Remaining: %s',\n  'There are %s objects. Remaining: %s',\n  11\n);\nconst string = interpolate(formats, [11, 20]);\n// string is 'There are 11 objects. Remaining: 20'\n```\n\n----------------------------------------\n\nTITLE: Effect of Silent Keyword on Subsequent Cycle Tag Uses (Django)\nDESCRIPTION: Illustrates that when a named cycle is defined using the `silent` keyword, subsequent calls to advance that cycle (e.g., `{% cycle rowcolors %}`) will also be silent and produce no output directly. The value is advanced internally but not rendered by the tag itself.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n{% cycle 'row1' 'row2' as rowcolors silent %}\n{% cycle rowcolors %}\n```\n\n----------------------------------------\n\nTITLE: Using gettext in JavaScript\nDESCRIPTION: Example of using the gettext function for translation in JavaScript code.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.write(gettext(\"this is to be translated\"))\n```\n\n----------------------------------------\n\nTITLE: Running Django Test Suite with GeoDjango in Python\nDESCRIPTION: Demonstrates how to run the Django test suite including GeoDjango tests using the runtests.py script. This is applicable when using spatial database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nruntests.py\n```\n\n----------------------------------------\n\nTITLE: Django URL Pattern Configuration\nDESCRIPTION: Defines URL routing for the 'item_list' view, associating a URL pattern with the corresponding view function. Uses Django's urls module to map URL to view, enabling web navigation to the item list page.\nSOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nurlpatterns = [\n    path('items/', views.item_list, name='item_list'),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining an m2m_changed Signal Handler in Django\nDESCRIPTION: This snippet shows how to import the `m2m_changed` signal from `django.db.models.signals` and define a Python function `toppings_changed` intended to act as a signal handler. This handler function accepts the `sender` and `**kwargs` arguments, which are standard for Django signal receivers. It's presented as an example of a function that could be connected to the `m2m_changed` signal for the `Pizza.toppings` field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/signals.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.signals import m2m_changed\n\n\ndef toppings_changed(sender, **kwargs):\n    # Do something\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Compatible UUID Field for MariaDB Migration\nDESCRIPTION: A UUIDField subclass that maintains compatibility with pre-Django 5.0 UUIDField implementation on MariaDB 10.7+. This subclass continues to use CHAR(32) storage rather than the native UUID type now used by default.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Char32UUIDField(models.UUIDField):\n    def db_type(self, connection):\n        return \"char(32)\"\n\n    def get_db_prep_value(self, value, connection, prepared=False):\n        value = super().get_db_prep_value(value, connection, prepared)\n        if value is not None:\n            value = value.hex\n        return value\n```\n\n----------------------------------------\n\nTITLE: Correcting Duplicate ID Attribute in `AdminFileWidget` in Django Admin\nDESCRIPTION: Fixes a regression in Django 5.0 where the `AdminFileWidget`, used for file uploads in the admin interface, incorrectly rendered two 'id' attributes on the 'Clear' checkbox element. This could lead to invalid HTML or issues with JavaScript targeting the element.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAdminFileWidget\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx for Django Documentation\nDESCRIPTION: Command to install the Sphinx documentation system using pip, which is a prerequisite for building the HTML documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install Sphinx\n```\n\n----------------------------------------\n\nTITLE: Applying phone2numeric Filter in Django Templates\nDESCRIPTION: The phone2numeric filter converts a phone number (possibly containing letters) to its numerical equivalent.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_80\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|phone2numeric }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Compressed and Network Rasters in Python using GDAL\nDESCRIPTION: These examples demonstrate how to access compressed rasters (zip, gzip, tar) and network rasters using GDAL's virtual filesystem capabilities in Python.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis.gdal import GDALRaster\nrst = GDALRaster(\"/vsizip/path/to/your/file.zip/path/to/raster.tif\")\nrst = GDALRaster(\"/vsigzip/path/to/your/file.gz\")\nrst = GDALRaster(\"/vsitar/path/to/your/file.tar/path/to/raster.tif\")\n\nrst = GDALRaster(\"/vsicurl/https://example.com/raster.tif\")\nrst.name\n```\n\n----------------------------------------\n\nTITLE: Working with GDAL Layer Spatial Properties in Python\nDESCRIPTION: Examples showing how to work with spatial properties and filters in a GDAL Layer.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> layer.extent.tuple\n(-104.609252, 29.763374, -95.23506, 38.971823)\n>>> print(layer.srs)\nGEOGCS[\"GCS_WGS_1984\",\n    DATUM[\"WGS_1984\",\n        SPHEROID[\"WGS_1984\",6378137,298.257223563]],\n    PRIMEM[\"Greenwich\",0],\n    UNIT[\"Degree\",0.017453292519943295]]\n```\n\n----------------------------------------\n\nTITLE: Instantiating GEOS MultiPoint Collections in Python\nDESCRIPTION: Demonstrates two equivalent ways to create a `MultiPoint` geometry collection object. The first method involves passing individual `Point` objects as separate arguments to the `MultiPoint` constructor. The second method passes a single sequence (like a tuple) containing the `Point` objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> mp = MultiPoint(Point(0, 0), Point(1, 1))\n>>> mp = MultiPoint((Point(0, 0), Point(1, 1)))\n```\n\n----------------------------------------\n\nTITLE: Building and Installing GEOS\nDESCRIPTION: Commands to build and install GEOS from source using CMake.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd geos-X.Y.Z\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ cmake --build .\n$ sudo cmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Querying Examples for Multi-table Inheritance in Django\nDESCRIPTION: Examples showing how to query models in a multi-table inheritance relationship, demonstrating that both parent and child models can be queried separately.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> Place.objects.filter(name=\"Bob's Cafe\")\n>>> Restaurant.objects.filter(name=\"Bob's Cafe\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Test for Django Shortcut Function in Python\nDESCRIPTION: This snippet creates a test case for a new Django shortcut function 'make_toast()'. It uses the SimpleTestCase class and checks if the function returns the expected string 'toast'.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.shortcuts import make_toast\nfrom django.test import SimpleTestCase\n\n\nclass MakeToastTests(SimpleTestCase):\n    def test_make_toast(self):\n        self.assertEqual(make_toast(), \"toast\")\n```\n\n----------------------------------------\n\nTITLE: Django GeoIP2 Method Removals\nDESCRIPTION: Removal of geographic coordinate and initialization methods from GeoIP2 class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.gis.geoip2.GeoIP2.coords()\ndjango.contrib.gis.geoip2.GeoIP2.open()\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Suffix in Django Forms - Python\nDESCRIPTION: Illustrates configuration of the label_suffix parameter in a Django form to control the character appended after label text. Demonstrates passing label_suffix as an empty string and as a custom string (' ->') during form instantiation. Inputs are the form's auto_id and label_suffix arguments; outputs are HTML showing different suffixes after labels. This allows customization of form presentation to match project- or locale-specific requirements.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactForm(auto_id=\"id_for_%s\", label_suffix=\"\")\n>>> print(f)\n<div><label for=\"id_for_subject\">Subject</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div>\n<div><label for=\"id_for_message\">Message</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div>\n<div><label for=\"id_for_sender\">Sender</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div>\n<div><label for=\"id_for_cc_myself\">Cc myself</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div>\n>>> f = ContactForm(auto_id=\"id_for_%s\", label_suffix=\" ->\")\n>>> print(f)\n<div><label for=\"id_for_subject\">Subject -&gt;</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div>\n<div><label for=\"id_for_message\">Message -&gt;</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div>\n<div><label for=\"id_for_sender\">Sender -&gt;</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div>\n<div><label for=\"id_for_cc_myself\">Cc myself -&gt;</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using WebDriverWait in Selenium tests with Django\nDESCRIPTION: This snippet demonstrates how to use WebDriverWait in Selenium tests to ensure the page has loaded before proceeding with assertions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ndef test_login(self):\n    from selenium.webdriver.support.wait import WebDriverWait\n\n    timeout = 2\n    ...\n    self.selenium.find_element(By.XPATH, '//input[@value=\"Log in\"]').click()\n    # Wait until the response is received\n    WebDriverWait(self.selenium, timeout).until(\n        lambda driver: driver.find_element(By.TAG_NAME, \"body\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Element in Django Template\nDESCRIPTION: This snippet demonstrates the use of an HTML 'morbi' element in a Django template. It appears to be a placeholder or example of custom HTML within the project.\nSOURCE: https://github.com/django/django/blob/main/tests/utils_tests/files/strip_tags2.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<morbi>\n```\n\n----------------------------------------\n\nTITLE: Running Django Tests - Shell Commands\nDESCRIPTION: Various shell commands showing different ways to run Django tests using manage.py, including running all tests, specific modules, packages, test cases, or individual test methods.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/overview.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py test\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Run all the tests in the animals.tests module\n$ ./manage.py test animals.tests\n\n# Run all the tests found within the 'animals' package\n$ ./manage.py test animals\n\n# Run just one test case class\n$ ./manage.py test animals.tests.AnimalTestCase\n\n# Run just one test method\n$ ./manage.py test animals.tests.AnimalTestCase.test_animals_can_speak\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py test animals/\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ./manage.py test --pattern=\"tests_*.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Character Set in Django Settings\nDESCRIPTION: Specifies the default charset (UTF-8) used for all HttpResponse objects if a MIME type isn't manually set. This value is used when constructing the Content-Type header.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_CHARSET = 'utf-8'\n```\n\n----------------------------------------\n\nTITLE: Removing cx_Oracle Database Backend Support (Python/SQL)\nDESCRIPTION: Support for the Oracle database backend using the `cx_Oracle` driver has been completely removed in Django 6.0. Projects using Oracle should have migrated to the `django-oracledb` backend.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.oracle', # No longer works with cx_Oracle\n        # ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for Group-Based Authorization with Django\nDESCRIPTION: Apache configuration that extends authentication to include group-based authorization. This setup restricts access to the '/secret' path to users who are members of the 'secret-agents' group in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\nWSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py\n\nWSGIProcessGroup %{GLOBAL}\nWSGIApplicationGroup %{GLOBAL}\n\n<Location \"/secret\">\n    AuthType Basic\n    AuthName \"Top Secret\"\n    AuthBasicProvider wsgi\n    WSGIAuthUserScript /path/to/mysite.com/mysite/wsgi.py\n    WSGIAuthGroupScript /path/to/mysite.com/mysite/wsgi.py\n    Require group secret-agents\n    Require valid-user\n</Location>\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined View Router in Django\nDESCRIPTION: View class that routes GET and POST requests to appropriate view implementations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/mixins.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views import View\n\n\nclass AuthorView(View):\n    def get(self, request, *args, **kwargs):\n        view = AuthorDetailView.as_view()\n        return view(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        view = AuthorInterestFormView.as_view()\n        return view(request, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using MD5 Hash Function in Django ORM\nDESCRIPTION: Shows how to generate MD5 hash of a text field using Django's MD5 database function\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import MD5\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(name_md5=MD5(\"name\")).get()\n>>> print(author.name_md5)\n749fb689816b2db85f5b169c2055b247\n```\n\n----------------------------------------\n\nTITLE: Correcting HTML for Required AdminFileWidget in HTML\nDESCRIPTION: Fixed invalid HTML for a required AdminFileWidget.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"file\" required>\n```\n\n----------------------------------------\n\nTITLE: Connecting a Feed to a URL in Django URLconf\nDESCRIPTION: This snippet shows how to connect a Feed class instance to a URL in Django's URLconf. It demonstrates the use of the path() function to map a URL to the feed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.urls import path\nfrom myproject.feeds import LatestEntriesFeed\n\nurlpatterns = [\n    # ...\n    path(\"latest/feed/\", LatestEntriesFeed()),\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Streaming an HttpRequest with ElementTree in Django (Python)\nDESCRIPTION: The snippet demonstrates passing a Django HttpRequest (which exposes a file-like interface) into xml.etree.ElementTree.iterparse() for efficient, memory-friendly XML parsing from request body. Assumes the request's body is an XML stream and that the xml.etree.ElementTree module is available. Each parsed element can be processed incrementally, useful for large XML payloads.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport xml.etree.ElementTree as ET\n\nfor element in ET.iterparse(request):\n    process(element)\n\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Representation of OGRGeometry in Python\nDESCRIPTION: Illustrates obtaining the GeoJSON representation of an `OGRGeometry` object ('POINT(1 2)') using the `.json` attribute. This returns a string containing the geometry's structure and coordinates in JSON format.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT(1 2)\").json\n'{ \"type\": \"Point\", \"coordinates\": [ 1.000000, 2.000000 ] }'\n```\n\n----------------------------------------\n\nTITLE: Tagging Django Test Case Classes\nDESCRIPTION: Shows how to apply tags to entire test case classes and demonstrates tag inheritance in test class hierarchies.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n@tag(\"slow\", \"core\")\nclass SampleTestCase(TestCase): ...\n```\n\n----------------------------------------\n\nTITLE: Defining YEAR_MONTH_FORMAT setting\nDESCRIPTION: This setting defines the default formatting for date fields on Django admin change-list pages when only the year and month are displayed. The locale-dictated format has higher precedence. It is related to DATE_FORMAT, DATETIME_FORMAT, TIME_FORMAT, and MONTH_DAY_FORMAT settings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Customizing Manifest Storage Location in Django (Python)\nDESCRIPTION: This Python code demonstrates how to create a custom static files storage class by subclassing `ManifestStaticFilesStorage`. It overrides the `__init__` method to specify a different `manifest_storage` backend (in this case, `StaticFilesStorage` pointing to `settings.BASE_DIR`), allowing developers to control where the `staticfiles.json` manifest file is stored. Depends on `django.conf.settings`, `ManifestStaticFilesStorage`, and `StaticFilesStorage`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import (\n    ManifestStaticFilesStorage,\n    StaticFilesStorage,\n)\n\n\nclass MyManifestStaticFilesStorage(ManifestStaticFilesStorage):\n    def __init__(self, *args, **kwargs):\n        manifest_storage = StaticFilesStorage(location=settings.BASE_DIR)\n        super().__init__(*args, manifest_storage=manifest_storage, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data Using Django ORM\nDESCRIPTION: This snippet shows how to access session data directly using Django's ORM, including decoding the session data.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.sessions.models import Session\n>>> s = Session.objects.get(pk=\"2b1189a188b44ad18c35e113ac6ceead\")\n>>> s.expire_date\ndatetime.datetime(2005, 8, 20, 13, 35, 12)\n>>> s.session_data\n'KGRwMQpTJ19hdXRoX3VzZXJfaWQnCnAyCkkxCnMuMTExY2ZjODI2Yj...'\n>>> s.get_decoded()\n{'user_id': 42}\n```\n\n----------------------------------------\n\nTITLE: Querying Non-Range Fields with 'contained_by' Lookup in Django Python\nDESCRIPTION: Shows that the `contained_by` lookup can also be applied to non-range fields like `DateTimeField`. This query filters `Event` objects where the `start` timestamp is contained within the specified `DateTimeTZRange`. Requires the `Event` model, `DateTimeTZRange`, `datetime`, and `django.utils.timezone`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.db.backends.postgresql.psycopg_any import DateTimeTZRange\n>>> Event.objects.filter(\n...     start__contained_by=DateTimeTZRange(\n...         timezone.now() - datetime.timedelta(hours=1),\n...         timezone.now() + datetime.timedelta(hours=1),\n...     ),\n... )\n<QuerySet [<Event: Soft play>]>\n```\n\n----------------------------------------\n\nTITLE: Grouping by Display String in Django Templates\nDESCRIPTION: This snippet demonstrates grouping by the display string of a field with choices rather than the choice key, using Django's get_FOO_display method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_39\n\nLANGUAGE: html+django\nCODE:\n```\n{% regroup cities by get_country_display as country_list %}\n```\n\n----------------------------------------\n\nTITLE: Using ljust Filter in Django Templates\nDESCRIPTION: The ljust filter left-justifies the value in a field of a given width. It takes the field size as an argument.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_77\n\nLANGUAGE: html+django\nCODE:\n```\n\"{{ value|ljust:\"10\" }}\"\n```\n\n----------------------------------------\n\nTITLE: Querying with TransactionNow in Django PostgreSQL\nDESCRIPTION: Illustrates the use of the TransactionNow function to filter Article objects based on the current transaction time. This function returns the date and time when the current transaction started on the database server.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/functions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.postgres.functions import TransactionNow\n>>> Article.objects.filter(published__lte=TransactionNow())\n<QuerySet [<Article: How to Django>]>\n```\n\n----------------------------------------\n\nTITLE: Callable Variables in Django Templates\nDESCRIPTION: Shows how Django templates handle callable variables and method invocations during template rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> class PersonClass2:\n...     def name(self):\n...         return \"Samantha\"\n...\n>>> t = Template(\"My name is {{ person.name }}.\")\n>>> t.render(Context({\"person\": PersonClass2}))\n\"My name is Samantha.\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Warnings after Upgrade\nDESCRIPTION: Command to run Django tests after upgrading, with warnings enabled to identify any new compatibility issues or deprecated features being used in the codebase.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python -Wa manage.py test\n```\n\n----------------------------------------\n\nTITLE: Creating a PDF with Django and ReportLab\nDESCRIPTION: Complete Django view function that generates a PDF file dynamically. It creates a buffer, initializes a ReportLab Canvas object, draws content, and returns the PDF as a downloadable file using Django's FileResponse.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/outputting-pdf.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport io\nfrom django.http import FileResponse\nfrom reportlab.pdfgen import canvas\n\n\ndef some_view(request):\n    # Create a file-like buffer to receive PDF data.\n    buffer = io.BytesIO()\n\n    # Create the PDF object, using the buffer as its \"file.\"\n    p = canvas.Canvas(buffer)\n\n    # Draw things on the PDF. Here's where the PDF generation happens.\n    # See the ReportLab documentation for the full list of functionality.\n    p.drawString(100, 100, \"Hello world.\")\n\n    # Close the PDF object cleanly, and we're done.\n    p.showPage()\n    p.save()\n\n    # FileResponse sets the Content-Disposition header so that browsers\n    # present the option to save the file.\n    buffer.seek(0)\n    return FileResponse(buffer, as_attachment=True, filename=\"hello.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Checking Proxy Model Permissions in Django Console\nDESCRIPTION: This interactive console example demonstrates how to fetch content types for proxy models, retrieve associated permissions, add them to a user, and check permission inheritance behavior between proxy and concrete models.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> # Fetch the content type for the proxy model.\n>>> content_type = ContentType.objects.get_for_model(Student, for_concrete_model=False)\n>>> student_permissions = Permission.objects.filter(content_type=content_type)\n>>> [p.codename for p in student_permissions]\n['add_student', 'change_student', 'delete_student', 'view_student',\n'can_deliver_pizzas']\n>>> for permission in student_permissions:\n...     user.user_permissions.add(permission)\n...\n>>> user.has_perm(\"app.add_person\")\nFalse\n>>> user.has_perm(\"app.can_eat_pizzas\")\nFalse\n>>> user.has_perms((\"app.add_student\", \"app.can_deliver_pizzas\"))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Document on ForeignKey on_delete Behavior and QuerySet Methods\nDESCRIPTION: This section explains that ForeignKeys with 'on_delete=DO_NOTHING' don't block deletion speed-path, but query generation details are subject to database implementation. It does not include code but discusses ORM behavior and underlying query mechanics.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_90\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating UnicodeDecodeError Stack Trace in Python\nDESCRIPTION: This snippet shows the typical error message format when a UnicodeDecodeError occurs in Python. The error happens when a bytestring containing non-ASCII characters is incorrectly decoded using the ASCII codec.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/troubleshooting.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUnicodeDecodeError: 'ascii' codec can't decode byte 0x?? in position ?:\nordinal not in range(128)\n```\n\n----------------------------------------\n\nTITLE: Defining a PositiveSmallIntegerField in Django Models\nDESCRIPTION: Defines a Django model field similar to `PositiveIntegerField`, but supporting a smaller range of positive integers (and zero). Values from 0 to 32767 are safe across all Django-supported databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n.. class:: PositiveSmallIntegerField(**options)\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation for Django\nDESCRIPTION: Commands to build the HTML version of Django documentation from the docs directory, with variations for Unix-like systems and Windows.\nSOURCE: https://github.com/django/django/blob/main/docs/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake.bat html\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dated Items in Django BaseDateListView\nDESCRIPTION: The get_dated_items() method returns a 3-tuple containing date_list, object_list, and extra_context. It provides the core functionality for retrieving date-based data in the view.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-date-based.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_dated_items():\n    Returns a 3-tuple containing (``date_list``, ``object_list``,\n    ``extra_context``).\n\n    ``date_list`` is the list of dates for which data is available.\n    ``object_list`` is the list of objects. ``extra_context`` is a\n    dictionary of context data that will be added to any context data\n    provided by the\n    :class:`~django.views.generic.list.MultipleObjectMixin`.\n```\n\n----------------------------------------\n\nTITLE: Resolving PostgreSQL Migration Crash with Partial `UniqueConstraint` in Django\nDESCRIPTION: Fixes a bug specific to Django 5.0 running on PostgreSQL 15 or newer. A database migration attempting to add a partial `UniqueConstraint` that utilized the `nulls_distinct` option (introduced in PostgreSQL 15) would cause a crash. This fix ensures migrations apply correctly under these conditions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nUniqueConstraint\n```\n\nLANGUAGE: sql\nCODE:\n```\nnulls_distinct\n```\n\n----------------------------------------\n\nTITLE: Creating a Cities Dictionary in Python for Django Templates\nDESCRIPTION: This code creates a list of city dictionaries containing name, population, and country information. This list is used in the subsequent regroup tag examples to demonstrate grouping functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ncities = [\n    {\"name\": \"Mumbai\", \"population\": \"19,000,000\", \"country\": \"India\"},\n    {\"name\": \"Calcutta\", \"population\": \"15,000,000\", \"country\": \"India\"},\n    {\"name\": \"New York\", \"population\": \"20,000,000\", \"country\": \"USA\"},\n    {\"name\": \"Chicago\", \"population\": \"7,000,000\", \"country\": \"USA\"},\n    {\"name\": \"Tokyo\", \"population\": \"33,000,000\", \"country\": \"Japan\"},\n]\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Implementation of CycleNode in Python\nDESCRIPTION: This class shows a thread-safe implementation of the CycleNode used in Django's built-in cycle template tag. It uses render_context to store state between render method invocations.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass CycleNode(template.Node):\n    def __init__(self, cyclevars):\n```\n\n----------------------------------------\n\nTITLE: Referenced Class in Security Fix - MultiPartParser\nDESCRIPTION: Reference to the MultiPartParser class that contained a directory-traversal vulnerability when handling uploaded files with crafted filenames. The vulnerability was patched in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.14.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMultiPartParser\n```\n\n----------------------------------------\n\nTITLE: Compiling Django Message Files\nDESCRIPTION: Shows various usage examples of the django-admin compilemessages command, which compiles .po files to .mo files for Django's internationalization support.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin compilemessages --locale=pt_BR\ndjango-admin compilemessages --locale=pt_BR --locale=fr -f\ndjango-admin compilemessages -l pt_BR\ndjango-admin compilemessages -l pt_BR -l fr --use-fuzzy\ndjango-admin compilemessages --exclude=pt_BR\ndjango-admin compilemessages --exclude=pt_BR --exclude=fr\ndjango-admin compilemessages -x pt_BR\ndjango-admin compilemessages -x pt_BR -x fr\n```\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin compilemessages --ignore=cache --ignore=outdated/*/locale\n```\n\n----------------------------------------\n\nTITLE: Recommended Project Layout with External manage.py (Text)\nDESCRIPTION: Illustrates the recommended Django 1.4 project directory structure where `manage.py` resides outside the main project package (`mysite`). This layout facilitates importing project components using the project name prefix (e.g., `mysite.settings`, `mysite.urls`).\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmanage.py\nmysite/\n    __init__.py\n    settings.py\n    urls.py\n    myapp/\n        __init__.py\n        models.py\n```\n\n----------------------------------------\n\nTITLE: Using ArraySubquery for JSON Object Annotation in Django\nDESCRIPTION: This snippet demonstrates how to use ArraySubquery to annotate an author with a list of their books as JSON objects. It filters books by author, creates JSON objects for each book, and uses ArraySubquery to aggregate the results.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/expressions.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import OuterRef\n>>> from django.db.models.functions import JSONObject\n>>> from django.contrib.postgres.expressions import ArraySubquery\n>>> books = Book.objects.filter(author=OuterRef(\"pk\")).values(\n...     json=JSONObject(title=\"title\", pages=\"pages\")\n... )\n>>> author = Author.objects.annotate(books=ArraySubquery(books)).first()\n>>> author.books\n[{'title': 'Solaris', 'pages': 204}, {'title': 'The Cyberiad', 'pages': 295}]\n```\n\n----------------------------------------\n\nTITLE: Adding Single Record to ManyToManyField in Django\nDESCRIPTION: This snippet shows how to add a single record to a ManyToManyField relationship. It creates a new Author object and adds it to an Entry's authors field using the add() method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from blog.models import Author\n>>> joe = Author.objects.create(name=\"Joe\")\n>>> entry.authors.add(joe)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Positional Arguments for Django Model Index\nDESCRIPTION: Example of incorrect index definition (`models.Index([\"headline\", \"-pub_date\"], \"index_name\")`) using positional arguments for the `fields` and `name` parameters. Django 2.0 prohibits this syntax and requires keyword arguments for defining model indexes.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodels.Index([\"headline\", \"-pub_date\"], \"index_name\")\n```\n\n----------------------------------------\n\nTITLE: Sending Single Email to Multiple Recipients with Django\nDESCRIPTION: Shows how to send a single email to multiple recipients where all recipients appear in the \"To:\" field. This is a simple example using send_mail() with multiple email addresses in the recipient_list.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsend_mail(\n    \"Subject\",\n    \"Message.\",\n    \"from@example.com\",\n    [\"john@example.com\", \"jane@example.com\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Using ngettext for Pluralization in JavaScript\nDESCRIPTION: Demonstrates how to use the ngettext function for handling plural forms in JavaScript translations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst objectCount = 1 // or 0, or 2, or 3, ...\nconst string = ngettext(\n    'literal for the singular case',\n    'literal for the plural case',\n    objectCount\n);\n```\n\n----------------------------------------\n\nTITLE: Using update_or_create in Django\nDESCRIPTION: Demonstrates the usage of update_or_create() method to update an existing object or create a new one if it doesn't exist. The example shows how to use the 'defaults' and 'create_defaults' parameters, and the equivalent boilerplate code it replaces. Requires a 'Person' model with 'first_name', 'last_name', and 'birthday' fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nobj, created = Person.objects.update_or_create(\n    first_name=\"John\",\n    last_name=\"Lennon\",\n    defaults={\"first_name\": \"Bob\"},\n    create_defaults={\"first_name\": \"Bob\", \"birthday\": date(1940, 10, 9)},\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecation of GeoQuerySet Aggregate Methods in Django - reStructuredText\nDESCRIPTION: Lists the deprecated GeoQuerySet aggregate methods, including collect(), extent(), extent3d(), make_line(), and unionagg(), and suggests their function-based aggregate replacements. These are legacy ORM features for GIS aggregations and should be refactored in existing code.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_15\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``GeoQuerySet`` aggregate methods\n---------------------------------\n\nThe ``collect()``, ``extent()``, ``extent3d()``, ``make_line()``, and\n``unionagg()`` aggregate methods are deprecated and should be replaced by their\nfunction-based aggregate equivalents (``Collect``, ``Extent``, ``Extent3D``,\n``MakeLine``, and ``Union``).\n```\n\n----------------------------------------\n\nTITLE: Setting TIME_ZONE using tzlocal in Python\nDESCRIPTION: Example of how to automatically detect and set the timezone based on the system timezone using the tzlocal library. This can be used as an alternative to the removed support for settings.TIME_ZONE = None.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tzlocal import get_localzone\n\nTIME_ZONE = get_localzone().zone\n```\n\n----------------------------------------\n\nTITLE: Starting Django Development Server\nDESCRIPTION: This console command starts the Django development server, which is necessary to access the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ python manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Filtering and Deleting Django QuerySet Objects\nDESCRIPTION: This snippet shows how to filter Django QuerySet objects based on a condition and perform a bulk delete operation. It demonstrates the use of the filter() method with a startswith condition on the headline field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> q = Article.objects.filter(headline__startswith=\"Django\")\n>>> print(q)\n<QuerySet [<Article: Django lets you build web apps easily>]>\n>>> q.delete()\n```\n\n----------------------------------------\n\nTITLE: Defining Media Assets Using Script Objects\nDESCRIPTION: Example showing how to define media assets using Script objects with custom HTML attributes\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Media:\n    js = [\n        Script(\n            \"https://cdn.example.com/something.min.js\",\n            **{\n                \"crossorigin\": \"anonymous\",\n                \"async\": True,\n            },\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Formatting Email Addresses with Names (String)\nDESCRIPTION: Illustrates the recommended string format for including a name with an email address, suitable for settings like `ADMINS` or `MANAGERS`. This format is compatible with Python's `email.utils.formataddr`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n'\"Name\" <address>'\n```\n\n----------------------------------------\n\nTITLE: Preventing Message Expiration in Django\nDESCRIPTION: Demonstrates how to prevent messages from being cleared after accessing them by setting the storage.used flag to False.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nstorage = messages.get_messages(request)\nfor message in storage:\n    do_something_with(message)\nstorage.used = False\n```\n\n----------------------------------------\n\nTITLE: Updating Model Field Definitions for Django 1.0\nDESCRIPTION: Examples of updating model field definitions, particularly changing FloatField to DecimalField and adjusting default date values.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    title = models.CharField(maxlength=100)\n    published = models.DateField(default=LazyDate())\n```\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    published = models.DateField(default=datetime.datetime.now)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Model):\n    field_name = models.FloatField(max_digits=10, decimal_places=3)\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyModel(models.Model):\n    field_name = models.DecimalField(max_digits=10, decimal_places=3)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Feed Item Title and Description Configuration in Django\nDESCRIPTION: Methods and attributes for setting feed item titles and descriptions. Shows both dynamic and static approaches.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nitem_title = \"Breaking News: Nothing Happening\"  # Hard-coded title.\n\nitem_description = \"A description of the item.\"  # Hard-coded description.\n\ndef item_title(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    title as a normal Python string.\n    \"\"\"\n\ndef item_description(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    description as a normal Python string.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Length Lookup with ArrayField in Django\nDESCRIPTION: Shows how to use the 'len' lookup with ArrayField in Django. This example demonstrates querying for posts based on the number of tags they have.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> Post.objects.create(name=\"First post\", tags=[\"thoughts\", \"django\"])\n>>> Post.objects.create(name=\"Second post\", tags=[\"thoughts\"])\n\n>>> Post.objects.filter(tags__len=1)\n<QuerySet [<Post: Second post>]>\n```\n\n----------------------------------------\n\nTITLE: Converting Geometry to GML in Django\nDESCRIPTION: Example demonstrating conversion of a polygon to Geographic Markup Language (GML) format using the AsGML function in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/functions.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = Zipcode.objects.annotate(gml=AsGML(\"poly\"))\n>>> print(qs[0].gml)\n<gml:Polygon srsName=\"EPSG:4326\"><gml:OuterBoundaryIs>-147.78711,70.245363 ...\n-147.78711,70.245363</gml:OuterBoundaryIs></gml:Polygon>\n```\n\n----------------------------------------\n\nTITLE: Storing Static URL in a Variable for Multiple Uses\nDESCRIPTION: Demonstrates how to store the result of the static template tag in a variable for later use in a template. This avoids repeatedly calling the static tag when referencing the same file multiple times.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_107\n\nLANGUAGE: html+django\nCODE:\n```\n{% load static %}\n{% static \"images/hi.jpg\" as myphoto %}\n<img src=\"{{ myphoto }}\" alt=\"Hi!\">\n```\n\n----------------------------------------\n\nTITLE: Controlling Orderability of Aggregates (Python)\nDESCRIPTION: The `.Aggregate.allow_order_by` class attribute is a boolean flag that determines whether a specific `Aggregate` subclass permits the use of the `order_by` keyword argument during instantiation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.Aggregate.allow_order_by\n```\n\n----------------------------------------\n\nTITLE: Retrieving validation error data and converting to JSON in Django Forms\nDESCRIPTION: The snippet explains the mechanism for accessing ValidationError metadata via form.errors.as_data() and serializing errors including codes to JSON with errors.as_json(). This supports better error inspection and customization, such as error message rewriting or serialization for APIs. Dependencies include django.forms.Form and django.core.exceptions.ValidationError.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nerrors_data = form.errors.as_data()\njson_errors = form.errors.as_json()\n```\n\n----------------------------------------\n\nTITLE: Defining Base Template Auto-Escaping Behavior in Django\nDESCRIPTION: Shows a base Django template (`base.html`) where auto-escaping is turned off globally for the main content area using `{% autoescape off %}`. This setting will affect any child templates that extend this base template and render content within the defined blocks (`title`, `content`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_19\n\nLANGUAGE: html+django\nCODE:\n```\n{% autoescape off %}\n<h1>{% block title %}{% endblock %}</h1>\n{% block content %}\n{% endblock %}\n{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Comparing OGRGeomType Objects in Python\nDESCRIPTION: Demonstrates initializing `OGRGeomType` objects using different inputs (integer type code or case-insensitive string name) and performing equality comparisons between `OGRGeomType` instances and other types (integer or string). Requires importing `OGRGeomType` from `django.contrib.gis.gdal`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_25\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.gdal import OGRGeomType\n>>> gt1 = OGRGeomType(3)  # Using an integer for the type\n>>> gt2 = OGRGeomType(\"Polygon\")  # Using a string\n>>> gt3 = OGRGeomType(\"POLYGON\")  # It's case-insensitive\n>>> print(gt1 == 3, gt1 == \"Polygon\")  # Equivalence works w/non-OGRGeomType objects\nTrue True\n```\n\n----------------------------------------\n\nTITLE: Setting Date/Time Format in Django\nDESCRIPTION: These settings control the formatting of dates and times in a Django application. `DATE_FORMAT` sets the default format for displaying dates, and `DATE_INPUT_FORMATS` defines the accepted input formats for date fields.  `DATETIME_FORMAT` sets the format for datetime fields and `DATETIME_INPUT_FORMATS` controls acceptable inputs.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)\n\nThe default formatting to use for displaying date fields in any part of the\nsystem. Note that the locale-dictated format has higher precedence and will be\napplied instead. See :tfilter:`allowed date format strings <date>`.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault::\n\n    [\n        \"%Y-%m-%d\",  # '2006-10-25'\n        \"%m/%d/%Y\",  # '10/25/2006'\n        \"%m/%d/%y\",  # '10/25/06'\n        \"%b %d %Y\",  # 'Oct 25 2006'\n        \"%b %d, %Y\",  # 'Oct 25, 2006'\n        \"%d %b %Y\",  # '25 Oct 2006'\n        \"%d %b, %Y\",  # '25 Oct, 2006'\n        \"%B %d %Y\",  # 'October 25 2006'\n        \"%B %d, %Y\",  # 'October 25, 2006'\n        \"%d %B %Y\",  # '25 October 2006'\n        \"%d %B, %Y\",  # '25 October, 2006'\n    ]\n\nA list of formats that will be accepted when inputting data on a date field.\nFormats will be tried in order, using the first valid one. Note that these\nformat strings use Python's :ref:`datetime module syntax\n<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`\ntemplate filter.\n\nThe locale-dictated format has higher precedence and will be applied instead.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)\n\nThe default formatting to use for displaying datetime fields in any part of the\nsystem. Note that the locale-dictated format has higher precedence and will be\napplied instead. See :tfilter:`allowed date format strings <date>`.\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault::\n\n    [\n        \"%Y-%m-%d %H:%M:%S\",  # '2006-10-25 14:30:59'\n        \"%Y-%m-%d %H:%M:%S.%f\",  # '2006-10-25 14:30:59.000200'\n        \"%Y-%m-%d %H:%M\",  # '2006-10-25 14:30'\n        \"%m/%d/%Y %H:%M:%S\",  # '10/25/2006 14:30:59'\n        \"%m/%d/%Y %H:%M:%S.%f\",  # '10/25/2006 14:30:59.000200'\n        \"%m/%d/%Y %H:%M\",  # '10/25/2006 14:30'\n        \"%m/%d/%y %H:%M:%S\",  # '10/25/06 14:30:59'\n        \"%m/%d/%y %H:%M:%S.%f\",  # '10/25/06 14:30:59.000200'\n        \"%m/%d/%y %H:%M\",  # '10/25/06 14:30'\n    ]\n\nA list of formats that will be accepted when inputting data on a datetime\nfield. Formats will be tried in order, using the first valid one. Note that\nthese format strings use Python's :ref:`datetime module syntax\n<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`\ntemplate filter. Date-only formats are not included as datetime fields will\nautomatically try :setting:`DATE_INPUT_FORMATS` in last resort.\n\nThe locale-dictated format has higher precedence and will be applied instead.\n```\n\n----------------------------------------\n\nTITLE: Testing email functionality in Django tests\nDESCRIPTION: Example test case that demonstrates how to test Django's email functionality using the test outbox. Shows how to verify that emails were sent and check their contents.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\nfrom django.test import TestCase\n\n\nclass EmailTest(TestCase):\n    def test_send_email(self):\n        # Send message.\n        mail.send_mail(\n            \"Subject here\",\n            \"Here is the message.\",\n            \"from@example.com\",\n            [\"to@example.com\"],\n            fail_silently=False,\n        )\n\n        # Test that one message has been sent.\n        self.assertEqual(len(mail.outbox), 1)\n\n        # Verify that the subject of the first message is correct.\n        self.assertEqual(mail.outbox[0].subject, \"Subject here\")\n```\n\n----------------------------------------\n\nTITLE: Forcing Django QuerySet Evaluation with list() in Python\nDESCRIPTION: Illustrates how to force immediate database evaluation of a QuerySet by converting it to a list using the built-in `list()` function. This loads all results into memory.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nentry_list = list(Entry.objects.all())\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom CSRF Token in Django\nDESCRIPTION: This method verifies the custom CSRF token by checking its timestamp and comparing it with the stored token. It implements additional security checks and handles token rotation.\nSOURCE: https://github.com/django/django/blob/main/tests/forms_tests/tests/filepath_test_files/real-text-file.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef _verify_token(self, request_token, cookie_token):\n    if not cookie_token or not request_token:\n        return False\n    \n    try:\n        cookie_ts = self._get_timestamp(cookie_token)\n        request_ts = self._get_timestamp(request_token)\n\n        if cookie_ts is None or request_ts is None:\n            return False\n\n        if abs(cookie_ts - request_ts) > settings.CSRF_TIMEOUT:\n            return False\n\n        if cookie_token != request_token:\n            return False\n\n        return True\n    except Exception:\n        return False\n```\n\n----------------------------------------\n\nTITLE: Rendering a Django Template with Different Contexts (Python Console)\nDESCRIPTION: Demonstrates the process of rendering a compiled Django `Template` object multiple times with different `Context` objects in a Python interactive session (pycon). It first imports `Context` and `Template`, creates a `Template` instance, then creates two separate `Context` instances with different values for the 'my_name' variable, and finally calls the `template.render()` method with each context to produce the final rendered strings.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.template import Context, Template\n>>> template = Template(\"My name is {{ my_name }}.\")\n\n>>> context = Context({\"my_name\": \"Adrian\"})\n>>> template.render(context)\n\"My name is Adrian.\"\n\n>>> context = Context({\"my_name\": \"Dolores\"})\n>>> template.render(context)\n\"My name is Dolores.\"\n```\n\n----------------------------------------\n\nTITLE: Customizing User Model Form Validation - Django - Python\nDESCRIPTION: This snippet demonstrates how to subclass the built-in Django UserChangeForm to restrict the 'first_name' field to a 30-character maximum length, overriding the default value introduced in Django 3.1 migrations. It is intended for projects with a custom user model based on AbstractUser who wish to keep a legacy constraint. The required dependencies are Django's forms and authentication system; the form field 'first_name' is explicitly set with max_length=30 and can be left blank (required=False). Input consists of user update data, and output is a Django form instance enforcing the field length restriction.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.contrib.auth.forms import UserChangeForm\n\n\nclass MyUserChangeForm(UserChangeForm):\n    first_name = forms.CharField(max_length=30, required=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tablespaces in Django Models\nDESCRIPTION: An example Django model that demonstrates how to specify different tablespaces for tables, fields, and indexes. The example shows table tablespace configuration via Meta class and field-level tablespace settings for various index types including many-to-many relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/tablespaces.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TablespaceExample(models.Model):\n    name = models.CharField(max_length=30, db_index=True, db_tablespace=\"indexes\")\n    data = models.CharField(max_length=255, db_index=True)\n    shortcut = models.CharField(max_length=7)\n    edges = models.ManyToManyField(to=\"self\", db_tablespace=\"indexes\")\n\n    class Meta:\n        db_tablespace = \"tables\"\n        indexes = [models.Index(fields=[\"shortcut\"], db_tablespace=\"other_indexes\")]\n```\n\n----------------------------------------\n\nTITLE: ImproperlyConfigured Error Example for Custom User Models\nDESCRIPTION: Example of the error message displayed when a custom user model is not properly imported in tests before being referenced by AUTH_USER_MODEL setting.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_1\n\nLANGUAGE: pytb\nCODE:\n```\nImproperlyConfigured: AUTH_USER_MODEL refers to model 'auth.CustomUser' that has not been installed\n```\n\n----------------------------------------\n\nTITLE: Updated manage.py Script Structure in Django 1.4 (Python)\nDESCRIPTION: This snippet shows the recommended structure for the `manage.py` file in Django 1.4 projects. It sets the `DJANGO_SETTINGS_MODULE` environment variable and uses `execute_from_command_line` to handle management commands, addressing path and import issues present in previous versions. `{{ project_name }}` should be replaced with the project's Python package name.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\nimport os, sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"{{ project_name }}.settings\")\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Field in a Django Form Python\nDESCRIPTION: This snippet demonstrates how to use the previously defined `MultiEmailField` within a standard Django `ContactForm`. The `recipients` field is declared as an instance of `MultiEmailField`, integrating the custom validation logic into the form's cleaning process when `is_valid()` is called.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/validation.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100)\n    message = forms.CharField()\n    sender = forms.EmailField()\n    recipients = MultiEmailField()\n    cc_myself = forms.BooleanField(required=False)\n```\n\n----------------------------------------\n\nTITLE: Comparing Values Using Smart `if` Tag with `!=` Operator in Django Templates\nDESCRIPTION: Illustrates the use of the enhanced `if` template tag in Django 1.2+, allowing direct use of comparison operators like `!=` for inequality checks between variables `a` and `b`. This is presented as the modern replacement for the older `ifnotequal` tag.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: html+django\nCODE:\n```\n{% if a != b %}\n ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Function Limitations with Composite Keys - SQL\nDESCRIPTION: Illustrates the limitation of SQL aggregate functions when used with composite keys. Shows that functions like MAX accept only a single column expression, and will error if given multiple (as in a composite primary key). Inputs: column names; output: result or error.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nMAX(\"order_id\")  -- OK\nMAX(\"product_id\", \"order_id\")  -- ERROR\n```\n\n----------------------------------------\n\nTITLE: Specifying mysqlclient Package Dependency for Django\nDESCRIPTION: This line defines the minimum required version of the mysqlclient package for Django. It ensures compatibility with MySQL databases in Django projects.\nSOURCE: https://github.com/django/django/blob/main/tests/requirements/mysql.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nmysqlclient >= 2.2.1\n```\n\n----------------------------------------\n\nTITLE: Customizing Changelist Form in Django ModelAdmin\nDESCRIPTION: This method shows how to use a custom form for the changelist page in the admin interface by overriding the get_changelist_form method.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass MyForm(forms.ModelForm):\n    pass\n\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def get_changelist_form(self, request, **kwargs):\n        return MyForm\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Imports in Django Shell\nDESCRIPTION: This snippet shows how to permanently disable automatic imports in the Django shell by overriding the get_auto_imports() method to return None.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-shell.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Command(shell.Command):\n    def get_auto_imports(self):\n        return None\n```\n\n----------------------------------------\n\nTITLE: Defining URLIZE_ASSUME_HTTPS setting\nDESCRIPTION: This is a transitional setting for Django 6.x, setting HTTPS as the default protocol in URLs processed by urlize and urlizetrunc template filters when True. It is deprecated.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Author Model with Last Accessed Field\nDESCRIPTION: Model definition for Author including a last_accessed timestamp field\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Author(models.Model):\n    salutation = models.CharField(max_length=10)\n    name = models.CharField(max_length=200)\n    email = models.EmailField()\n    headshot = models.ImageField(upload_to=\"author_headshots\")\n    last_accessed = models.DateTimeField()\n```\n\n----------------------------------------\n\nTITLE: Adding custom lookups and transforms to Django ORM\nDESCRIPTION: The snippet explains how to extend Django's ORM with custom lookup operators (e.g., 'day_lte') and transforms (e.g., extracting 'year' from a date). These allow for more flexible and readable queries. Dependencies include django.db.models.Lookup and django.db.models.Transform classes, with configuration needed to register new operators and transformations for specific fields.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.txt#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass DayLteLookup(Lookup):\n    lookup_name = 'day_lte'\n    def as_sql(self, compiler, connection):\n        # SQL implementation for 'day_lte'\n        pass\n```\n\nLANGUAGE: Python\nCODE:\n```\nclass YearTransform(Transform):\n    function = 'EXTRACT'\n    template = '%(function)s(YEAR FROM %(field)s)'\n    def as_sql(self, compiler, connection):\n        # SQL for 'year' transform\n        pass\n```\n\n----------------------------------------\n\nTITLE: Safe Format for Date Filter Usage - Django Template\nDESCRIPTION: This snippet provides an example of the intended, safe usage of the date template filter by specifying a conventional date format string (e.g., \\\"j/m/Y\\\"). This prevents disclosure of secret application settings as only valid date formats are used.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.7.11.txt#2025-04-23_snippet_2\n\nLANGUAGE: django-template\nCODE:\n```\n\"j/m/Y\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Pattern for Paginated View in Django\nDESCRIPTION: Demonstrates how to set up a URL pattern in Django's URLconf to handle pagination using the 'page' parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-multiple-object.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npath(\"objects/page<int:page>/\", PaginatedView.as_view()),\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context-Aware Inclusion Tag in Django\nDESCRIPTION: Demonstrates an inclusion tag that uses the takes_context option to access the template context without requiring explicit arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@register.inclusion_tag(\"link.html\", takes_context=True)\ndef jump_link(context):\n    return {\n        \"link\": context[\"home_link\"],\n        \"title\": context[\"home_title\"],\n    }\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Operator Classes for UniqueConstraint in Python\nDESCRIPTION: Shows how to specify PostgreSQL operator classes for fields within a `UniqueConstraint` using the `opclasses` parameter. This is useful for utilizing specific index types or behaviors. This example applies `varchar_pattern_ops` to the 'username' field. This parameter is ignored by databases other than PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/constraints.txt#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import UniqueConstraint\n\nUniqueConstraint(\n    name=\"unique_username\", fields=[\"username\"], opclasses=[\"varchar_pattern_ops\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Using inspectdb Command in GeoDjango\nDESCRIPTION: GeoDjango's override of the inspectdb management command that adds support for geometry fields in auto-generated model definitions. Requires django.contrib.gis in INSTALLED_APPS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/commands.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango-admin inspectdb\n```\n\n----------------------------------------\n\nTITLE: Accessing Z Coordinate of a Point Geometry in Python\nDESCRIPTION: Illustrates retrieving the Z coordinate of a 3D Point `OGRGeometry` ('POINT (1 2 3)') using the `.z` attribute. It returns the floating-point Z value or `None` if the point is 2D.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_19\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT (1 2 3)\").z\n3.0\n```\n\n----------------------------------------\n\nTITLE: Using truncatewords Filter in Django Templates\nDESCRIPTION: Shows how to use the truncatewords filter, which truncates a string after a specified number of words. Newlines within the string are removed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_95\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|truncatewords:2 }}\n```\n\n----------------------------------------\n\nTITLE: Updating Django Authentication Context Processor\nDESCRIPTION: The django.core.context_processors.auth method will be removed in favor of django.contrib.auth.context_processors.auth.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Old method:\ndjango.core.context_processors.auth\n\n# New method:\ndjango.contrib.auth.context_processors.auth\n```\n\n----------------------------------------\n\nTITLE: Full List of Django's Included Password Hashers\nDESCRIPTION: This code shows the complete list of password hashers included in Django, listing them in order of preference from the most secure (PBKDF2) to the least secure (MD5).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n[\n    \"django.contrib.auth.hashers.PBKDF2PasswordHasher\",\n    \"django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher\",\n    \"django.contrib.auth.hashers.Argon2PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptSHA256PasswordHasher\",\n    \"django.contrib.auth.hashers.BCryptPasswordHasher\",\n    \"django.contrib.auth.hashers.ScryptPasswordHasher\",\n    \"django.contrib.auth.hashers.MD5PasswordHasher\",\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Tags in Django Settings\nDESCRIPTION: Example of customizing message tags by overriding default tags for specific message levels\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.messages import constants as messages\n\nMESSAGE_TAGS = {\n    messages.INFO: \"\",\n    50: \"critical\",\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing Admin URLs for Specific Admin Instance in Python\nDESCRIPTION: Illustrates how to find a URL in a specific admin instance by providing the instance name as a current_app hint to the reverse call.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_86\n\nLANGUAGE: python\nCODE:\n```\n>>> change_url = reverse(\"admin:polls_choice_change\", args=(c.id,), current_app=\"custom\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Django Model Methods in Templates\nDESCRIPTION: Shows how a custom method (`foo`), defined on a Django model (`Task` in the previous Python example), can be called directly from within a template using dot notation (`{{ task.foo }}`). Assumes a `Task` instance is passed to the template context as `task`. Arguments cannot be passed to methods called from templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_28\n\nLANGUAGE: html+django\nCODE:\n```\n{{ task.foo }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Efficient AbsoluteValueLessThan Lookup in Django\nDESCRIPTION: Creates an efficient AbsoluteValueLessThan lookup that generates optimized SQL for comparing absolute values. It implements the as_sql method to produce a range-based SQL query and registers it with the AbsoluteValue transformer.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Lookup\n\n\nclass AbsoluteValueLessThan(Lookup):\n    lookup_name = \"lt\"\n\n    def as_sql(self, compiler, connection):\n        lhs, lhs_params = compiler.compile(self.lhs.lhs)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params + lhs_params + rhs_params\n        return \"%s < %s AND %s > -%s\" % (lhs, rhs, lhs, rhs), params\n\n\nAbsoluteValue.register_lookup(AbsoluteValueLessThan)\n```\n\n----------------------------------------\n\nTITLE: Comparing Values Using `ifnotequal` Tag in Django Templates (Legacy)\nDESCRIPTION: Demonstrates the syntax for the `ifnotequal` template tag, used in versions prior to Django 1.2 for checking inequality between two variables (`a` and `b`). This tag is presented as the older method, now superseded by the enhanced `if` tag introduced in Django 1.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% ifnotequal a b %}\n ...\n{% endifnotequal %}\n```\n\n----------------------------------------\n\nTITLE: Managing Direct User Permissions in Django (Python)\nDESCRIPTION: Shows the methods available on the `user_permissions` many-to-many manager of a User object (`myuser`) for managing its direct permission assignments. It demonstrates setting all permissions (`set`), adding one or more permissions (`add`), removing permissions (`remove`), and clearing all direct permission assignments (`clear`).\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmyuser.user_permissions.set([permission_list])\nmyuser.user_permissions.add(permission, permission, ...)\nmyuser.user_permissions.remove(permission, permission, ...)\nmyuser.user_permissions.clear()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HttpRequest.accepts Usage in Django (Python)\nDESCRIPTION: Provides an example of the accepts() method, which evaluates whether a given mime_type is accepted by the client's Accept header. Inputs: a specific mime_type string; output: Boolean indicating whether the mime type is accepted. Defaults accommodate browsers' typical Accept: */* behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> request.accepts(\"text/html\")\nTrue\n\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting GDALRaster SRID Attribute in Python\nDESCRIPTION: Shows how to get and set the Spatial Reference System Identifier (SRID) directly using the `srid` attribute, which acts as a shortcut for accessing `rst.srs.srid`. Setting the `srid` attribute directly modifies the underlying `srs` object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_38\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.srid\n4326\n>>> rst.srid = 3086\n>>> rst.srid\n3086\n>>> rst.srs.srid  # This is equivalent\n3086\n```\n\n----------------------------------------\n\nTITLE: Redirecting inspectdb Output to models.py via Shell\nDESCRIPTION: This shell command adds Unix output redirection onto the Django inspectdb management command, saving the auto-generated models into a file named models.py. The developer must have Django set up and specify database details in the settings as prerequisites. Input is provided by the database and output is written directly to models.py.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py inspectdb > models.py\n```\n\n----------------------------------------\n\nTITLE: Translating Model Meta Options in Django\nDESCRIPTION: Demonstrates how to provide translatable verbose names for a model using gettext_lazy() in the model's Meta class, ensuring proper localization in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass MyThing(models.Model):\n    name = models.CharField(_(\"name\"), help_text=_(\"This is the help text\"))\n\n    class Meta:\n        verbose_name = _(\"my thing\")\n        verbose_name_plural = _(\"my things\")\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrate Command via Shell\nDESCRIPTION: This shell command invokes Django's migrate management command to apply migrations, ensuring that essential Django tables (such as those for admin permissions and content types) are created in the connected database. Requires that database parameters are set and that the migration system is initialized. Output is textual status and logs to the console, and input is not required.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/legacy-databases.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Removing Parameters with querystring Tag in Django Templates\nDESCRIPTION: This snippet demonstrates how to remove parameters from a query string by passing None as the value. In this example, the color parameter would be removed from the query string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_28\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring color=None %}\n```\n\n----------------------------------------\n\nTITLE: Updating Decorators with method_decorator in Django 1.2\nDESCRIPTION: Example showing how to modify class methods that use authentication decorators like login_required to work with Django 1.2's new decorator behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass(object):\n    @login_required\n    def my_view(self, request):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Using Http404 Exception in Django Views\nDESCRIPTION: Example demonstrating the use of Http404 exception for handling resources that don't exist. The view attempts to fetch a Poll object and raises Http404 if it doesn't exist.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/views.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.http import Http404\nfrom django.shortcuts import render\nfrom polls.models import Poll\n\n\ndef detail(request, poll_id):\n    try:\n        p = Poll.objects.get(pk=poll_id)\n    except Poll.DoesNotExist:\n        raise Http404(\"Poll does not exist\")\n    return render(request, \"polls/detail.html\", {\"poll\": p})\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Models in GeoDjango\nDESCRIPTION: Examples of creating and saving models with geometry fields using the Zipcode model. Shows different ways to specify geometry data including direct WKT strings and GEOSGeometry objects.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from zipcode.models import Zipcode\n>>> z = Zipcode(code=77096, poly=\"POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))\")\n>>> z.save()\n```\n\n----------------------------------------\n\nTITLE: Django ListView Implementation\nDESCRIPTION: Basic ListView implementation for displaying questions in the polls application.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial05.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]\n```\n\n----------------------------------------\n\nTITLE: Specifying SSL Certificate File for SMTP Client Authentication in Django\nDESCRIPTION: Sets the path to a PEM-formatted certificate chain file (None by default) for client authentication if EMAIL_USE_SSL or EMAIL_USE_TLS is True. Requires EMAIL_SSL_KEYFILE to be set as well.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_SSL_CERTFILE = None\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing UUID Field Models on MariaDB 10.7+\nDESCRIPTION: Example showing how to update model definitions to use the compatible Char32UUIDField for existing models with UUIDField on MariaDB 10.7+, maintaining backwards compatibility with previous Django versions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Char32UUIDField(models.UUIDField): ...\n\n\nclass MyModel(models.Model):\n    uuid = Char32UUIDField(primary_key=True, default=uuid.uuid4)\n```\n\n----------------------------------------\n\nTITLE: Illustrating FieldError in select_related for Non-Relational Fields (Django Python)\nDESCRIPTION: This Python console snippet demonstrates that calling `select_related()` with a non-relational field name (like 'title' on a Book model) raises a `FieldError` in Django 1.10 and later, enforcing that only relational fields can be used.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Book.objects.select_related(\"title\")\nTraceback (most recent call last):\n...\nFieldError: Non-relational field given in select_related: 'title'\n```\n\n----------------------------------------\n\nTITLE: Verifying Django QuerySet State After Deletion\nDESCRIPTION: This snippet demonstrates the state of a Django QuerySet after a delete operation. It shows that the QuerySet cache is cleared and related objects are updated accordingly. The example uses the article_set reverse relation from Publication to Article.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> print(q)\n<QuerySet []>\n>>> p1.article_set.all()\n<QuerySet [<Article: NASA uses Python>]>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Django App\nDESCRIPTION: Shows how to use the startapp command to create a new Django app. It includes an example of specifying a custom template directory for the app structure.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startapp myapp /Users/jezdez/Code/myapp\n```\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startapp --template=/Users/jezdez/Code/my_app_template myapp\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Build Dependencies in Plain Text\nDESCRIPTION: This snippet lists Python package dependencies required for the Django project's documentation tooling, likely within a requirements file. It specifies `pyenchant` and `sphinxcontrib-spelling` for spell checking, `Sphinx` (version 4.5.0 or higher) as the documentation generator, and `blacken-docs` for formatting code examples within the documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyenchant\nSphinx>=4.5.0\nsphinxcontrib-spelling\nblacken-docs\n```\n\n----------------------------------------\n\nTITLE: Adding Global Admin Actions in Django\nDESCRIPTION: Examples of adding actions globally to the Django admin site using AdminSite.add_action()\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nadmin.site.add_action(export_selected_objects)\n\n# With explicit naming\nadmin.site.add_action(export_selected_objects, \"export_selected\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Template Tags with Multiple Arguments in Django\nDESCRIPTION: Example demonstrating how to create a template tag helper function that accepts any number of positional or keyword arguments using *args and **kwargs in Django.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@register.simple_tag\ndef my_tag(a, b, *args, **kwargs):\n    warning = kwargs[\"warning\"]\n    profile = kwargs[\"profile\"]\n    ...\n    return ...\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Log Level in Django Configuration\nDESCRIPTION: This snippet demonstrates how to use an environment variable to dynamically set the log level in Django's logging configuration. It defaults to 'WARNING' if the environment variable is not set.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"level\": os.getenv(\"DJANGO_LOG_LEVEL\", \"WARNING\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Forms Using Grouped Fields in Django Templates - HTML+Django template\nDESCRIPTION: Demonstrates the traditional method to manually render each individual form field component (label, help_text, errors, and widget) for a Django form using HTML+Django template syntax. Assumes access to a Django form context variable. Required fields (e.g. email, password) are shown as individual form inputs inside rows and columns. This approach is verbose and can be replaced by field group rendering in Django 5.0. Inputs are Django `BoundField` instances. Outputs a complete HTML form structure embedded with Django template tags.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTML+Django template\nCODE:\n```\n<form>\\n...\\n<div>\\n  {{ form.name.label_tag }}\\n  {% if form.name.help_text %}\\n    <div class=\\\"helptext\\\" id=\\\"{{ form.name.auto_id }}_helptext\\\">\\n      {{ form.name.help_text|safe }}\\n    </div>\\n  {% endif %}\\n  {{ form.name.errors }}\\n  {{ form.name }}\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      {{ form.email.label_tag }}\\n      {% if form.email.help_text %}\\n        <div class=\\\"helptext\\\" id=\\\"{{ form.email.auto_id }}_helptext\\\">\\n          {{ form.email.help_text|safe }}\\n        </div>\\n      {% endif %}\\n      {{ form.email.errors }}\\n      {{ form.email }}\\n    </div>\\n    <div class=\\\"col\\\">\\n      {{ form.password.label_tag }}\\n      {% if form.password.help_text %}\\n        <div class=\\\"helptext\\\" id=\\\"{{ form.password.auto_id }}_helptext\\\">\\n          {{ form.password.help_text|safe }}\\n        </div>\\n      {% endif %}\\n      {{ form.password.errors }}\\n      {{ form.password }}\\n    </div>\\n  </div>\\n</div>\\n...\\n</form>\n```\n\n----------------------------------------\n\nTITLE: Returning Related Model Data as Dictionaries (FK by ID Field Name) Python\nDESCRIPTION: Uses values() specifying the explicit ForeignKey ID field name ('blog_id'). The resulting dictionary uses the ID field name ('blog_id') as the key, storing the primary key of the related object, matching the default values() output for this field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n>>> Entry.objects.values(\"blog_id\")\n```\n\n----------------------------------------\n\nTITLE: Using HasKey Lookup in Django ORM Queries\nDESCRIPTION: Illustrates the safe usage of the has_key lookup in Django ORM queries, which is not affected by the SQL injection vulnerability on Oracle. This method uses the __ syntax for JSON field lookups.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.17.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Safe usage of has_key lookup\nMyModel.objects.filter(json_field__has_key='some_key')\n```\n\n----------------------------------------\n\nTITLE: Applying random Filter in Django Templates\nDESCRIPTION: The random filter returns a random item from the given list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_82\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|random }}\n```\n\n----------------------------------------\n\nTITLE: Viewing Queries for Multiple Databases in Django\nDESCRIPTION: This snippet shows how to view SQL queries when using multiple databases in Django. It uses the connections dictionary to access queries for a specific database alias.\nSOURCE: https://github.com/django/django/blob/main/docs/faq/models.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db import connections\n>>> connections[\"my_db_alias\"].queries\n```\n\n----------------------------------------\n\nTITLE: Setting up RemoteUserBackend Authentication\nDESCRIPTION: Configuration of Django AUTHENTICATION_BACKENDS setting to use RemoteUserBackend for handling REMOTE_USER authentication.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/auth-remote-user.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.RemoteUserBackend\",\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Django HStoreField: values Lookup with ArrayField Contains (Python)\nDESCRIPTION: Shows how to use the 'values' transform for HStoreField, combined with the 'contains' lookup, to filter objects whose dict values include those in the given array (uses SQL avals()). Available in Django with PostgreSQL hstore. Input is a list of expected values; output is a QuerySet of matching objects. Note: Result order of values is not guaranteed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Dog.objects.create(name=\"Rufus\", data={\"breed\": \"labrador\"})\\n>>> Dog.objects.create(name=\"Meg\", data={\"breed\": \"collie\", \"owner\": \"Bob\"})\\n\\n>>> Dog.objects.filter(data__values__contains=[\"collie\"])\\n<QuerySet [<Dog: Meg>]>\n```\n\n----------------------------------------\n\nTITLE: Using Log Function in Django Models\nDESCRIPTION: Demonstrates using the Log function to calculate logarithm of vector coordinates\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> Vector.objects.create(x=2.0, y=4.0)\n>>> vector = Vector.objects.annotate(log=Log(\"x\", \"y\")).get()\n>>> vector.log\n2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Nested ArrayField in Django Model\nDESCRIPTION: Demonstrates how to create a nested ArrayField in a Django model to represent a chessboard. The field uses two levels of ArrayField, each with a size of 8, to store a 2D array of chess pieces.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/fields.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.fields import ArrayField\nfrom django.db import models\n\n\nclass ChessBoard(models.Model):\n    board = ArrayField(\n        ArrayField(\n            models.CharField(max_length=10, blank=True),\n            size=8,\n        ),\n        size=8,\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Bands Attribute in Python\nDESCRIPTION: Illustrates how to access the list of GDALBand objects associated with a GDALRaster using the `bands` attribute. The example initializes a raster with two bands and shows checking the number of bands (`len`) and accessing pixel data from the second band (`bands[1].data()`).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_44\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster(\n...     {\n...         \"width\": 1,\n...         \"height\": 2,\n...         \"srid\": 4326,\n...         \"bands\": [{\"data\": [0, 1]}, {\"data\": [2, 3]}],\n...     }\n... )\n>>> len(rst.bands)\n2\n>>> rst.bands[1].data()\narray([[ 2.,  3.]], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Basic Question Detail Template\nDESCRIPTION: Simple template that displays the question object for the detail view.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial03.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{{ question }}\n```\n\n----------------------------------------\n\nTITLE: Manual List Retrieval with Error Handling\nDESCRIPTION: Equivalent example showing manual list retrieval and 404 handling without the shortcut.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/shortcuts.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import Http404\n\n\ndef my_view(request):\n    my_objects = list(MyModel.objects.filter(published=True))\n    if not my_objects:\n        raise Http404(\"No MyModel matches the given query.\")\n```\n\n----------------------------------------\n\nTITLE: Django Format Module Path Setting\nDESCRIPTION: Defines `FORMAT_MODULE_PATH`, a list of Python paths to custom locale-specific format definitions. Django searches these paths for `formats.py` files. Defaults to `None`, meaning no custom formats.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\nFORMAT_MODULE_PATH\n----------------------\n\nDefault: `None`\n\nA full Python path to a Python package that contains custom format definitions\nfor project locales. If not `None`, Django will check for a `formats.py`\nfile, under the directory named as the current locale, and will use the\nformats defined in this file.\n\nThe name of the directory containing the format definitions is expected to be\nnamed using :term:`locale name` notation, for example `de`, `pt_BR`, `en_US`, etc.\n\nFor example, if :setting:`FORMAT_MODULE_PATH` is set to `mysite.formats`,\nand current language is `en` (English), Django will expect a directory tree\nlike:\n\n    mysite/\n        formats/\n            __init__.py\n            en/\n                __init__.py\n                formats.py\n\nYou can also set this setting to a list of Python paths, for example::\n\n    FORMAT_MODULE_PATH = [\n        \"mysite.formats\",\n        \"some_app.formats\",\n    ]\n\nWhen Django searches for a certain format, it will go through all given Python\npaths until it finds a module that actually defines the given format. This\nmeans that formats defined in packages farther up in the list will take\nprecedence over the same formats in packages farther down.\n\nAvailable formats are:\n\n* :setting:`DATE_FORMAT`\n* :setting:`DATE_INPUT_FORMATS`\n* :setting:`DATETIME_FORMAT`\n* :setting:`DATETIME_INPUT_FORMATS`\n* :setting:`DECIMAL_SEPARATOR`\n* :setting:`FIRST_DAY_OF_WEEK`\n* :setting:`MONTH_DAY_FORMAT`\n* :setting:`NUMBER_GROUPING`\n* :setting:`SHORT_DATE_FORMAT`\n* :setting:`SHORT_DATETIME_FORMAT`\n* :setting:`THOUSAND_SEPARATOR`\n* :setting:`TIME_FORMAT`\n* :setting:`TIME_INPUT_FORMATS`\n* :setting:`YEAR_MONTH_FORMAT`\n```\n\n----------------------------------------\n\nTITLE: Using verbatim Tag in Django Templates\nDESCRIPTION: Demonstrates how to use the verbatim tag to prevent template rendering of specific content.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_48\n\nLANGUAGE: html+django\nCODE:\n```\n{% verbatim %}\n    {{if dying}}Still alive.{{/if}}\n{% endverbatim %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% verbatim myblock %}\n    Avoid template rendering via the {% verbatim %}{% endverbatim %} block.\n{% endverbatim myblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring LOGGING with Filters - Django Settings - Python\nDESCRIPTION: This snippet provides an updated configuration example for the LOGGING setting in Django, showcasing the addition of a require_debug_false filter to the mail_admins handler using django.utils.log.RequireDebugFalse. This setup ensures that admin error emails are only sent when DEBUG is False. Key parameters include filter definitions, handler configuration, and the use of the AdminEmailHandler class. The code is intended for project settings files, and assumes proper installation of Django and access to its logging framework.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    # ...\n    \"filters\": {\n        \"require_debug_false\": {\n            \"()\": \"django.utils.log.RequireDebugFalse\",\n        }\n    },\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating View Decorators from Middleware Classes\nDESCRIPTION: Converts a middleware class to a view decorator, allowing middleware functionality to be applied on a per-view basis. Compatible with Django 1.9 style middleware with process_request(), process_exception(), and process_response() methods.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndecorator_from_middleware(middleware_class)\n```\n\n----------------------------------------\n\nTITLE: Customizing login_required Decorator Parameters in Django\nDESCRIPTION: Shows how to customize the redirect_field_name parameter of the login_required decorator. This changes the query string parameter used to store the redirect path.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.auth.decorators import login_required\n\n@login_required(redirect_field_name=\"my_redirect_field\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Querying with Automatic SRID Transformation and Inspecting SQL (Python)\nDESCRIPTION: Illustrates GeoDjango's ability to automatically transform geometries between different coordinate systems during spatial queries. It performs an `intersects` lookup using a point with SRID 32140 against geometries likely stored in SRID 4326. The example also shows how to access and print the underlying SQL query generated by the ORM using `qs.query`, which reveals the `ST_Transform` function call. Requires the `WorldBorder` model and a `pnt` geometry object.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_15\n\nLANGUAGE: pycon\nCODE:\n```\n>>> qs = WorldBorder.objects.filter(mpoly__intersects=pnt)\n>>> print(qs.query)  # Generating the SQL\nSELECT \"world_worldborder\".\"id\", \"world_worldborder\".\"name\", \"world_worldborder\".\"area\",\n\"world_worldborder\".\"pop2005\", \"world_worldborder\".\"fips\", \"world_worldborder\".\"iso2\",\n\"world_worldborder\".\"iso3\", \"world_worldborder\".\"un\", \"world_worldborder\".\"region\",\n\"world_worldborder\".\"subregion\", \"world_worldborder\".\"lon\", \"world_worldborder\".\"lat\",\n\"world_worldborder\".\"mpoly\" FROM \"world_worldborder\"\nWHERE ST_Intersects(\"world_worldborder\".\"mpoly\", ST_Transform(%s, 4326))\n>>> qs  # printing evaluates the queryset\n<QuerySet [<WorldBorder: United States>]>\n```\n\n----------------------------------------\n\nTITLE: Manual Email Connection Management\nDESCRIPTION: Shows how to manually control email connection opening and closing for sending messages.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/email.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\n\nconnection = mail.get_connection()\n\n# Manually open the connection\nconnection.open()\n\n# Construct an email message that uses the connection\nemail1 = mail.EmailMessage(\n    \"Hello\",\n    \"Body goes here\",\n    \"from@example.com\",\n    [\"to1@example.com\"],\n    connection=connection,\n)\nemail1.send()  # Send the email\n\n# Construct two more messages\n```\n\n----------------------------------------\n\nTITLE: Parsing Until an End Tag in Django Compilation Function (Python)\nDESCRIPTION: This Python function `do_comment` demonstrates how to implement the compilation logic for a paired Django template tag (like `{% comment %}`...`{% endcomment %}`). It uses `parser.parse(('endcomment',))` to collect all template nodes encountered until the `{% endcomment %}` tag. `parser.delete_first_token()` removes the opening tag token itself. Finally, it returns a `CommentNode` instance, which will handle the rendering (or lack thereof) of the parsed content.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef do_comment(parser, token):\n    nodelist = parser.parse((\"endcomment\",))\n    parser.delete_first_token()\n    return CommentNode()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Category-Specific Feed with get_object() in Django - Python\nDESCRIPTION: Shows how to subclass Django's Feed class to create category-specific feeds, properly implementing get_object() to retrieve a database object based on a parameter from the URL. Demonstrates injecting dependencies from django.shortcuts and project models, highlighting the Feed class extension point for custom logic. Takes 'request' and category_id as input, returning the fetched category or raising NotFound. The method is intended for use in Feed view generation and requires a valid Category model with Django ORM access.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.shortcuts import get_object_or_404\nfrom myproject.models import Category\n\n\nclass LatestEntriesByCategory(Feed):\n    def get_object(self, request, category_id):\n        return get_object_or_404(Category, id=category_id)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Django with Custom Default Settings\nDESCRIPTION: Demonstrates configuring Django with custom default settings from a module, overriding specific settings as needed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom myapp import myapp_defaults\n\nsettings.configure(default_settings=myapp_defaults, DEBUG=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing DateTime Form Field with Cached Initial Value\nDESCRIPTION: Demonstrates how BoundField.initial caches return values when using callable initial values like datetime.now.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_36\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from datetime import datetime\n>>> class DatedCommentForm(CommentForm):\n...     created = forms.DateTimeField(initial=datetime.now)\n...\n>>> f = DatedCommentForm()\n>>> f[\"created\"].initial\ndatetime.datetime(2021, 7, 27, 9, 5, 54)\n>>> f[\"created\"].initial\ndatetime.datetime(2021, 7, 27, 9, 5, 54)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Day - SQL Equivalent\nDESCRIPTION: Translates Django day filters into SQL by extracting day numbers with EXTRACT and applying comparisons. Inputs and outputs as above, syntax will depend on SQL engine. Can match multiple records from different months that share the same day value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_110\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE EXTRACT('day' FROM pub_date) = '3';\nSELECT ... WHERE EXTRACT('day' FROM pub_date) >= '3';\n```\n\n----------------------------------------\n\nTITLE: Creating Django Apps/Projects in a Specific Directory (Shell)\nDESCRIPTION: Shows the usage of the `startapp` and `startproject` commands in Django 1.4 with an optional destination directory argument. The first command creates a new app named `myapp` inside `/path/to/new/app`, and the second creates a project `myproject` inside `/path/to/new/project`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin.py startapp myapp /path/to/new/app\ndjango-admin.py startproject myproject /path/to/new/project\n```\n\n----------------------------------------\n\nTITLE: Updating Django Test Client Login Method in Python\nDESCRIPTION: Code example showing how to migrate from Django 0.96's Client.login() method to Django 1.0's newer approach. The old method required a login path with username and password, while the new method directly accepts username and password parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import Client\n\nc = Client()\nc.login(\"/path/to/login\", \"myuser\", \"mypassword\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# ... same as above, but then:\nc.login(username=\"myuser\", password=\"mypassword\")\n```\n\n----------------------------------------\n\nTITLE: Closing Rings in an OGRGeometry LineString in Python\nDESCRIPTION: Shows the usage of the `close_rings()` method on an `OGRGeometry` object representing an unclosed LinearRing. The method modifies the geometry in-place by adding the starting point to the end, effectively closing the ring. The result is verified by checking the `.wkt` attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_14\n\nLANGUAGE: pycon\nCODE:\n```\n>>> triangle = OGRGeometry(\"LINEARRING (0 0,0 1,1 0)\")\n>>> triangle.close_rings()\n>>> triangle.wkt\n'LINEARRING (0 0,0 1,1 0,0 0)'\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleArrayField with IntegerField in Django Forms\nDESCRIPTION: Demonstrates how to create a form field for an array of integers using SimpleArrayField. It shows usage, validation, and handling of valid and invalid input.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/forms.txt#2025-04-23_snippet_0\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django import forms\n>>> from django.contrib.postgres.forms import SimpleArrayField\n\n>>> class NumberListForm(forms.Form):\n...     numbers = SimpleArrayField(forms.IntegerField())\n...\n\n>>> form = NumberListForm({\"numbers\": \"1,2,3\"})\n>>> form.is_valid()\nTrue\n>>> form.cleaned_data\n{'numbers': [1, 2, 3]}\n\n>>> form = NumberListForm({\"numbers\": \"1,2,a\"})\n>>> form.is_valid()\nFalse\n```\n\n----------------------------------------\n\nTITLE: Linking to Django Ticket 19895 using reStructuredText\nDESCRIPTION: Uses the reStructuredText `:ticket:` role to create a hyperlink to issue 19895 in the Django project's ticket tracker. The link text displayed is 'our ticket tracker'. This markup is used within the release notes to provide a direct reference to the bug report detailing the memory leak.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:ticket:`our ticket tracker <19895>`\n```\n\n----------------------------------------\n\nTITLE: Example of Creating and Using a Parameterized Decorator\nDESCRIPTION: Shows how to create a parameterized decorator from CacheMiddleware and apply it to a view function with a specific cache timeout value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncache_page = decorator_from_middleware_with_args(CacheMiddleware)\n\n\n@cache_page(3600)\ndef my_view(request):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Referencing NFKC Normalization Function in Python\nDESCRIPTION: This code snippet refers to the NFKC normalization function from Python's unicodedata module, which is central to the security vulnerability discussed in the release notes. The function is used for Unicode normalization in Django's UsernameField.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.13.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nunicodedata.normalize\n```\n\n----------------------------------------\n\nTITLE: Implementing get_internal_type in Django Field\nDESCRIPTION: Method that returns the field's internal type name for backend-specific purposes. By default returns the class name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ndef get_internal_type(self):\n    return self.__class__.__name__\n```\n\n----------------------------------------\n\nTITLE: Referencing prefetch_related Method in Python (Sphinx Syntax)\nDESCRIPTION: Reference using Sphinx syntax to the `prefetch_related` method of a Django QuerySet. This method is used to optimize database access by fetching related objects in separate queries. The bugfix allows QuerySets using `prefetch_related` to be pickled and unpickled multiple times without error.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n:meth:`~django.db.models.query.QuerySet.prefetch_related`\n```\n\n----------------------------------------\n\nTITLE: Running Link Check on Django Documentation\nDESCRIPTION: Command to verify that all links in the documentation are working properly. This helps identify broken links or links that need to be updated to canonical locations.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ make linkcheck\n```\n\n----------------------------------------\n\nTITLE: Deprecation of %(<foo>)s Syntax in ModelFormMixin.success_url - reStructuredText\nDESCRIPTION: Informs that the legacy %(<foo>)s syntax for dynamic success_url assignment in ModelFormMixin is deprecated and will be removed in Django 1.10. Alternative approaches for URL formatting should be used instead.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_14\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``%(<foo>)s`` syntax in ``ModelFormMixin.success_url``\n------------------------------------------------------\n\nThe legacy ``%(<foo>)s`` syntax in :attr:`ModelFormMixin.success_url\n<django.views.generic.edit.ModelFormMixin.success_url>` is deprecated and\nwill be removed in Django 1.10.\n```\n\n----------------------------------------\n\nTITLE: Using query_params with Django test client\nDESCRIPTION: Demonstrates how to use the new query_params parameter with Django's test client classes to easily set query strings on HTTP requests. This works with both synchronous and asynchronous client implementations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.client.post(\"/items/1\", query_params={\"action\": \"delete\"})\nawait self.async_client.post(\"/items/1\", query_params={\"action\": \"delete\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Messages with Django Messages Framework (Python)\nDESCRIPTION: This snippet illustrates the current method for retrieving user messages using `messages.get_messages(request)` from the `django.contrib.messages` framework. This function retrieves messages associated with the current request, typically stored in the session or cookies, depending on the storage backend.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import messages\n\nfor message in messages.get_messages(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Formatting Form Errors in Django Templates\nDESCRIPTION: This template code iterates through a collection of errors organized by field names. It creates a hierarchical bullet-point structure where each field name is displayed as a top-level bullet, followed by nested bullets for each error message associated with that field.\nSOURCE: https://github.com/django/django/blob/main/django/forms/templates/django/forms/errors/dict/text.txt#2025-04-23_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% for field, errors in errors %}* {{ field }}\n{% for error in errors %}  * {{ error }}\n{% endfor %}{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Applying Django Auth Database Migrations (Shell)\nDESCRIPTION: Executes the Django management command `manage.py migrate` to create or update database tables required by the authentication system (`django.contrib.auth`) and content types system (`django.contrib.contenttypes`). This command applies migrations to create tables for users, groups, permissions, and applies default permissions for models in installed apps.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmanage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Iterating Form Field Errors in Django Template\nDESCRIPTION: Nested template loop that iterates through form fields and their associated errors. The outer loop processes each field-error pair, while the inner loop renders individual error messages. The output is formatted as a nested bullet point list.\nSOURCE: https://github.com/django/django/blob/main/django/forms/jinja2/django/forms/errors/dict/text.txt#2025-04-23_snippet_0\n\nLANGUAGE: django-template\nCODE:\n```\n{% for field, errors in errors %}* {{ field }}\n{% for error in errors %}  * {{ error }}\n{% endfor %}{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Running migrate Skipping System Checks - Console\nDESCRIPTION: This console command invokes django-admin migrate with the --skip-checks option. It skips pre-execution system checks, potentially speeding up runs when checks are unnecessary. This option is only available if the management command supports the requires_system_checks attribute. No extra dependencies are needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_33\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin migrate --skip-checks\n```\n\n----------------------------------------\n\nTITLE: Setting a Database-Computed Default using Now()\nDESCRIPTION: Shows how to set a database-computed default value for a Django model field using the `db_default` argument. This example uses the database function `Now()` (imported from `django.db.models.functions`) to set the default value of the `created` `DateTimeField` to the current timestamp at the database level.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.db.models.functions import Now\n\ncreated = models.DateTimeField(db_default=Now())\n```\n\n----------------------------------------\n\nTITLE: Implementing geometry Method in ZipcodeFeed\nDESCRIPTION: This example shows how to implement the geometry method in a ZipcodeFeed class. It returns the extent of a polygon, which is a tuple representing a bounding box.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/feeds.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ZipcodeFeed(Feed):\n    def geometry(self, obj):\n        # Can also return: `obj.poly`, and `obj.poly.centroid`.\n        return obj.poly.extent  # tuple like: (X0, Y0, X1, Y1).\n```\n\n----------------------------------------\n\nTITLE: Handling ObjectDoesNotExist Exception\nDESCRIPTION: Demonstrates how to catch ObjectDoesNotExist exceptions for all models using a try/except block.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    # Some code that might raise Model.DoesNotExist\n    pass\nexcept ObjectDoesNotExist:\n    # Handle the exception\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using url Tag in Django Templates\nDESCRIPTION: Shows various ways to use the url template tag to generate URLs in Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_47\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'some-url-name' v1 v2 %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'some-url-name' arg1=v1 arg2=v2 %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'app-views-client' client.id %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'some-url-name' arg arg2 as the_url %}\n\n<a href=\"{{ the_url }}\">I'm linking to {{ the_url }}</a>\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'some-url-name' as the_url %}\n{% if the_url %}\n  <a href=\"{{ the_url }}\">Link to optional stuff</a>\n{% endif %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% url 'myapp:view-name' %}\n```\n\n----------------------------------------\n\nTITLE: Custom Permission Implementation for Django Admin Actions\nDESCRIPTION: Example of implementing custom permissions for admin actions using the ModelAdmin class and action decorator\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.contrib.auth import get_permission_codename\n\n\nclass ArticleAdmin(admin.ModelAdmin):\n    actions = [\"make_published\"]\n\n    @admin.action(permissions=[\"publish\"])\n    def make_published(self, request, queryset):\n        queryset.update(status=\"p\")\n\n    def has_publish_permission(self, request):\n        \"\"\"Does the user have the publish permission?\"\"\"\n        opts = self.opts\n        codename = get_permission_codename(\"publish\", opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n```\n\n----------------------------------------\n\nTITLE: Django User Retrieval Functions\nDESCRIPTION: Synchronous and asynchronous functions to retrieve user model instances associated with a request's session. Verifies session authentication using backend's get_user() method and validates session hash.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/auth.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef get_user(request):\n    # Returns the user model instance associated with the request's session\n    pass\n\nasync def aget_user(request):\n    # Asynchronous version of get_user()\n    pass\n```\n\n----------------------------------------\n\nTITLE: Path Resolution in Media Assets with Static and External URLs in Django\nDESCRIPTION: Shows how Django resolves different types of paths in media definitions, including absolute paths and relative paths with automatic prefix resolution.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from django import forms\n>>> class CalendarWidget(forms.TextInput):\n...     class Media:\n...         css = {\n...             \"all\": [\"/css/pretty.css\"],\n...         }\n...         js = [\"animations.js\", \"https://othersite.com/actions.js\"]\n...\n\n>>> w = CalendarWidget()\n>>> print(w.media)\n<link href=\"/css/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://uploads.example.com/animations.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Translation Catalog in HTML\nDESCRIPTION: Shows how to include the JavaScript translation catalog in an HTML template.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{% url 'javascript-catalog' %}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using wordcount Filter in Django Templates\nDESCRIPTION: Demonstrates the wordcount filter, which returns the number of words in a given string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_102\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|wordcount }}\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets by Hour - Django ORM (Python)\nDESCRIPTION: Filters entries/events to match hour values in time or datetime fields with '__hour' lookup. Inputs are integers between 0 and 23; outputs are QuerySets for records with hour component matching or within a specified range. Supports chaining additional lookups and works for both DateTimeField and TimeField.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nEvent.objects.filter(timestamp__hour=23)\nEvent.objects.filter(time__hour=5)\nEvent.objects.filter(timestamp__hour__gte=12)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Callable Behavior in Django Templates\nDESCRIPTION: Illustrates how callables in Django 1.3 templates are automatically executed regardless of their access method. Both examples will return the user's full name instead of the bound method object.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_8\n\nLANGUAGE: pycon\nCODE:\n```\n>>> Template(\"{{ user.get_full_name }}\").render(Context({\"user\": user}))\nu'Joe Bloggs'\n>>> Template(\"{{ full_name }}\").render(Context({\"full_name\": user.get_full_name}))\nu'&lt;bound method User.get_full_name of &lt;...'\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Cache Backend in Django (Python)\nDESCRIPTION: This Python snippet configures the Django `CACHES` setting to use a database table for caching. It sets the `BACKEND` to `DatabaseCache` and specifies the desired table name ('my_cache_table') in the `LOCATION` setting. Requires the cache table to be created separately.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Trunc() and Extract() Functions in Django 3.2.14\nDESCRIPTION: This snippet demonstrates how to reference the Trunc() and Extract() database functions in Django 3.2.14. These functions were subject to a SQL injection vulnerability if untrusted data was used as kind/lookup_name values. The fix ensures safer usage of these functions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.14.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.functions import Trunc, Extract\n```\n\n----------------------------------------\n\nTITLE: Referencing Django File Upload Classes in Python\nDESCRIPTION: This snippet demonstrates how to reference Django's FileField and ImageField classes for handling file uploads. It also mentions the ClearableFileInput and FileInput form widgets, which now include additional security measures.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:class:`.forms.FileField`\n:class:`.forms.ImageField`\n:class:`~django.forms.ClearableFileInput`\n:class:`~django.forms.FileInput`\n```\n\n----------------------------------------\n\nTITLE: Running Django project with Hypercorn\nDESCRIPTION: Command to start a Django project using Hypercorn. This runs a single process listening on 127.0.0.1:8000 and requires that the project is on the Python path. For best results, run this from the same directory as your manage.py file.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/asgi/hypercorn.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhypercorn myproject.asgi:application\n```\n\n----------------------------------------\n\nTITLE: Using Exists Subquery in Django ORM (Python)\nDESCRIPTION: Demonstrates how to use an Exists subquery to annotate posts with whether they have a recent comment. It shows filtering by date and using OuterRef to reference the outer queryset.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models import Exists, OuterRef\nfrom datetime import timedelta\nfrom django.utils import timezone\none_day_ago = timezone.now() - timedelta(days=1)\nrecent_comments = Comment.objects.filter(\n    post=OuterRef(\"pk\"),\n    created_at__gte=one_day_ago,\n)\nPost.objects.annotate(recent_comment=Exists(recent_comments))\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Backend with Unix Socket in Django (Python)\nDESCRIPTION: This Python snippet configures the Django `CACHES` setting to connect to a Memcached instance via a local Unix socket file located at `/tmp/memcached.sock`. It uses the `PyMemcacheCache` backend, requiring the `pymemcache` library.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.memcached.PyMemcacheCache\",\n        \"LOCATION\": \"unix:/tmp/memcached.sock\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using URLValidator in Python 3.9.5+\nDESCRIPTION: Security vulnerability note regarding URLValidator behavior with newlines and tabs in Python 3.9.5+. The validator previously didn't prohibit newlines and tabs, potentially allowing header injection attacks when used outside of form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.validators import URLValidator\nfrom django.http import HttpResponse\nfrom django.forms import URLField\n```\n\n----------------------------------------\n\nTITLE: Implementing decompress in a Custom MultiWidget in Python\nDESCRIPTION: Provides an example implementation of the mandatory `decompress` method for a hypothetical `SplitDateTimeWidget` subclassing `MultiWidget`. This method takes a combined `datetime` object and splits it into a list containing the date and time components, defensively handling the case where the input `value` might be None by returning `[None, None]`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.forms import MultiWidget\n\n\nclass SplitDateTimeWidget(MultiWidget):\n    # ...\n\n    def decompress(self, value):\n        if value:\n            return [value.date(), value.time()]\n        return [None, None]\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting GDALRaster Scale Attribute in Python\nDESCRIPTION: Illustrates accessing the pixel width and height (scale) used for georeferencing via the `scale` attribute and modifying its x-component. The scale represents coefficients 1 and 5 of the geotransform.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_41\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.scale\n[1.0, -1.0]\n>>> rst.scale.x = 2\n>>> rst.scale\n[2.0, -1.0]\n```\n\n----------------------------------------\n\nTITLE: Modifying Custom SQL Data Loading in Django Tests\nDESCRIPTION: Data inserted using custom SQL is no longer visible during testing. Use test fixtures or setUp() method to insert test data.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Example of using setUp() to insert test data (not provided in the text)\nclass MyTestCase(TestCase):\n    def setUp(self):\n        # Insert test data here\n        pass\n```\n\n----------------------------------------\n\nTITLE: Django Development Server Warning Message\nDESCRIPTION: Default warning message displayed by the Django development server indicating it should not be used in production.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nWARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.\\nFor more information on production servers see: https://docs.djangoproject.com/en/|version|/howto/deployment/\n```\n\n----------------------------------------\n\nTITLE: Displaying Grouped Content with ifchanged - HTML+Django Template - html+django\nDESCRIPTION: Demonstrates use of the 'ifchanged' tag in a loop to conditionally display information only when the relevant value changes, such as rendering a date or hour only on change. Assumes the presence of 'days' iterable in the context, with each 'date' object supporting date formatting. When using variable arguments, the tag checks for changes in one or several values between iterations. Input variables affect output HTML structure, and requires context setup for loops.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_21\n\nLANGUAGE: html+django\nCODE:\n```\n<h1>Archive for {{ year }}</h1>\n\n{% for date in days %}\n    {% ifchanged %}<h3>{{ date|date:\"F\" }}</h3>{% endifchanged %}\n    <a href=\"{{ date|date:\"M/d\"|lower }}/\">{{ date|date:\"j\" }}</a>\n{% endfor %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% for date in days %}\n    {% ifchanged date.date %} {{ date.date }} {% endifchanged %}\n    {% ifchanged date.hour date.date %}\n        {{ date.hour }}\n    {% endifchanged %}\n{% endfor %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% for match in matches %}\n    <div style=\"background-color:\n        {% ifchanged match.ballot_id %}\n            {% cycle \"red\" \"blue\" %}\n        {% else %}\n            gray\n        {% endifchanged %}\n    \">{{ match }}</div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional CSRF Protection in Django View\nDESCRIPTION: Example of how to implement conditional CSRF protection in a Django view using csrf_exempt and csrf_protect decorators. The view is generally unprotected but applies CSRF protection only for a specific execution path based on a condition.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/csrf.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.csrf import csrf_exempt, csrf_protect\n\n\n@csrf_exempt\ndef my_view(request):\n    @csrf_protect\n    def protected_path(request):\n        do_something()\n\n    if some_condition():\n        return protected_path(request)\n    else:\n        do_something_else()\n```\n\n----------------------------------------\n\nTITLE: Querying GeoDjango Model using 'contains' Lookup (Python)\nDESCRIPTION: Illustrates performing a spatial query using the GeoDjango ORM. It imports the `WorldBorder` model and filters objects where the `mpoly` geometry field contains the point defined by `pnt_wkt`. Requires the `world.models.WorldBorder` model.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from world.models import WorldBorder\n>>> WorldBorder.objects.filter(mpoly__contains=pnt_wkt)\n<QuerySet [<WorldBorder: United States>]>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Subclassing Django Database Backends (Text)\nDESCRIPTION: Illustrates the recommended directory structure for creating a custom Django database backend by subclassing a built-in one. It requires a package (e.g., `mydbengine`) containing `__init__.py` and a `base.py` module where the custom `DatabaseWrapper` class is defined.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nmysite/\n    ...\n    mydbengine/\n        __init__.py\n        base.py\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deferred Loading of Fields\nDESCRIPTION: Example showing how fields omitted from the raw query are loaded on demand when accessed, which can result in additional database queries for each deferred field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> for p in Person.objects.raw(\"SELECT id, first_name FROM myapp_person\"):\n...     print(\n...         p.first_name,  # This will be retrieved by the original query\n...         p.last_name,  # This will be retrieved on demand\n...     )\n...\nJohn Smith\nJane Jones\n```\n\n----------------------------------------\n\nTITLE: Using SQL AS Clauses with raw() to Map Fields\nDESCRIPTION: Example showing how to use SQL's AS clauses to map fields from a query to model fields. This allows querying from tables with different field names than the model.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Person.objects.raw(\n...     \"\"\"\n...     SELECT first AS first_name,\n...            last AS last_name,\n...            bd AS birth_date,\n...            pk AS id,\n...     FROM some_other_table\n...     \"\"\"\n... )\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Usage in Django Validators\nDESCRIPTION: This snippet shows the problematic use of $ instead of \\Z in regular expressions within Django validators, which allowed newline characters and could lead to header injection attacks. The issue affected various validators including EmailValidator.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n$\n```\n\nLANGUAGE: Python\nCODE:\n```\n\\Z\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Value Display for Individual Fields\nDESCRIPTION: Example showing how to set a custom empty value display for a specific field by using the empty_value parameter with the admin.display decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass PersonAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"birth_date_view\"]\n\n    @admin.display(empty_value=\"unknown\")\n    def birth_date_view(self, obj):\n        return obj.birth_date\n```\n\n----------------------------------------\n\nTITLE: Marking Middleware as Asynchronous-Only\nDESCRIPTION: A decorator that marks middleware as asynchronous-only. Django will wrap it in an asynchronous event loop when called from the WSGI request path.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync_only_middleware(middleware)\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition\nDESCRIPTION: ReStructuredText directive defining the table of contents structure for Django's documentation, listing all major framework components with a maximum depth of 2 levels.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   install\n   db/index\n   http/index\n   forms/index\n   templates\n   class-based-views/index\n   migrations\n   files\n   testing/index\n   auth/index\n   cache\n   conditional-view-processing\n   composite-primary-key\n   signing\n   email\n   i18n/index\n   logging\n   pagination\n   security\n   performance\n   serialization\n   settings\n   signals\n   checks\n   external-packages\n   async\n```\n\n----------------------------------------\n\nTITLE: Using INI configuration file with uWSGI\nDESCRIPTION: Simple command to start uWSGI using a configuration file. This allows for easier management of server settings compared to command-line arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuwsgi --ini uwsgi.ini\n```\n\n----------------------------------------\n\nTITLE: Querying Spatial Data with GDAL DataSource in Python\nDESCRIPTION: Demonstrates using Python to obtain the full path to a shapefile via pathlib, then opening the shapefile as a GDAL DataSource with GeoDjango. This uses the world app to show how to resolve package-relative data paths robustly and then leverages DataSource (from django.contrib.gis.gdal). Required dependencies are pathlib, an importable world Python package, and GeoDjango installed. Outputs include the DataSource instance representation pointing to the shapefile used for further spatial operations. No output is produced unless print() is used.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> import world\n>>> world_shp = Path(world.__file__).resolve().parent / \"data\" / \"TM_WORLD_BORDERS-0.3.shp\"\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.gdal import DataSource\n>>> ds = DataSource(world_shp)\n>>> print(ds)\n/ ... /geodjango/world/data/TM_WORLD_BORDERS-0.3.shp (ESRI Shapefile)\n```\n\n----------------------------------------\n\nTITLE: Adding Root Elements to Django Syndication Feed\nDESCRIPTION: This snippet shows how to add custom root elements to a Django syndication feed by overriding the add_root_elements method. In this example, the code adds an iTunes explicit tag with a 'clean' value.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef add_root_elements(self, handler):\n    super().add_root_elements(handler)\n    handler.addQuickElement(\"itunes:explicit\", \"clean\")\n```\n\n----------------------------------------\n\nTITLE: Loading Static Files in Django Template\nDESCRIPTION: HTML template code showing how to load and reference static files using Django's static template tag.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial06.txt#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% load static %}\n\n<link rel=\"stylesheet\" href=\"{% static 'polls/style.css' %}\">\n```\n\n----------------------------------------\n\nTITLE: Translating text outside Django views using try-finally\nDESCRIPTION: A function that demonstrates how to translate text outside of Django views by activating a language, performing the translation, and then restoring the original language.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import translation\n\n\ndef welcome_translated(language):\n    cur_language = translation.get_language()\n    try:\n        translation.activate(language)\n        text = translation.gettext(\"welcome\")\n    finally:\n        translation.activate(cur_language)\n    return text\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Function in Django ORM\nDESCRIPTION: Shows how to reverse characters in a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Reverse\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(backward=Reverse(\"name\")).get()\n>>> print(author.backward)\nhtimS teragraM\n```\n\n----------------------------------------\n\nTITLE: Registering a Django System Check Using a Function Call in Python\nDESCRIPTION: Illustrates an alternative method for registering a system check function without using the `@register` decorator. The `register` function is called directly, passing the check function (`my_check`) as the first argument, followed by tags and options like `deploy=True`.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/checks.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef my_check(app_configs, **kwargs): ...\n\n\nregister(my_check, Tags.security, deploy=True)\n```\n\n----------------------------------------\n\nTITLE: Django View Function for Listing Items\nDESCRIPTION: Provides a view function to retrieve all Item objects and render them via a template named 'item_list.html'. Requires Django's shortcuts and models modules; outputs an HTTP response with HTML content.\nSOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef item_list(request):\n    items = Item.objects.all()\n    return render(request, 'item_list.html', {'items': items})\n```\n\n----------------------------------------\n\nTITLE: Identifying Vulnerable Function in Django utils.text\nDESCRIPTION: This snippet references the `django.utils.text.wrap()` function, which is identified in the Django 5.0.13 release notes as having a potential denial-of-service vulnerability (CVE-2025-26699) when used with very long input strings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.13.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango.utils.text.wrap()\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL-Specific NotEqual Lookup in Django\nDESCRIPTION: Creates a custom NotEqual lookup for MySQL that uses '!=' instead of '<>' operator. This demonstrates how to provide database-specific implementations for lookups.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-lookups.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass MySQLNotEqual(NotEqual):\n    def as_mysql(self, compiler, connection, **extra_context):\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params\n        return \"%s != %s\" % (lhs, rhs), params\n\n\nField.register_lookup(MySQLNotEqual)\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Auth Logger (RST)\nDESCRIPTION: This snippet uses the ReStructuredText `:ref:` role to reference the documentation section for the `django-contrib-auth-logger`. This logger is now used to handle and log exceptions during password reset email sending.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:ref:`django-contrib-auth-logger`\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Storage Constant (RST)\nDESCRIPTION: This snippet references the `OS_OPEN_FLAGS` constant, likely used within `FileSystemStorage`. The context is adjusting the `stacklevel` for a deprecation warning related to this constant to ensure it points to the correct call site.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``OS_OPEN_FLAGS``\n```\n\n----------------------------------------\n\nTITLE: Referencing Django's UsernameField in Forms Module\nDESCRIPTION: This code snippet references the UsernameField class from Django's auth forms module. This field is the focus of the security fix in Django 4.1.13, addressing a potential denial of service vulnerability on Windows systems.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.13.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.forms.UsernameField\n```\n\n----------------------------------------\n\nTITLE: Partial Evaluation and Caching in Django QuerySets\nDESCRIPTION: Demonstrates how partial evaluation of QuerySets affects caching behavior, showing cases where the cache is used and where it isn't.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/queries.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> queryset = Entry.objects.all()\n>>> print(queryset[5])  # Queries the database\n>>> print(queryset[5])  # Queries the database again\n\n>>> queryset = Entry.objects.all()\n>>> [entry for entry in queryset]  # Queries the database\n>>> print(queryset[5])  # Uses cache\n>>> print(queryset[5])  # Uses cache\n\n>>> [entry for entry in queryset]\n>>> bool(queryset)\n>>> entry in queryset\n>>> list(queryset)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating uncached callable attributes in Django ORM\nDESCRIPTION: Shows how callable attributes in Django ORM trigger new database queries on each call, unlike cached non-callable attributes. This example uses the authors relationship method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> entry = Entry.objects.get(id=1)\n>>> entry.authors.all()  # query performed\n>>> entry.authors.all()  # query performed again\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Documentation TOC Structure in RST\nDESCRIPTION: Sets up the documentation structure using reStructuredText toctree directives. Defines hidden and nested (maxdepth: 3) table of contents sections for organizing Django's documentation into logical categories.\nSOURCE: https://github.com/django/django/blob/main/docs/contents.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    index\n\n.. toctree::\n    :maxdepth: 3\n\n    intro/index\n    topics/index\n    howto/index\n    faq/index\n    ref/index\n    misc/index\n    glossary\n    releases/index\n    internals/index\n```\n\n----------------------------------------\n\nTITLE: Fixing Migration Crash on MySQL 8.0.13+ for Nullable Fields with Default\nDESCRIPTION: A bug fix for Django 3.2 where migrations would crash on MySQL 8.0.13+ when adding nullable BinaryField, JSONField, or TextField with a default value. This addresses ticket #32832.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE ... ADD COLUMN ... DEFAULT ...\n```\n\n----------------------------------------\n\nTITLE: Implementing BanningCommentManager in Django\nDESCRIPTION: Custom comment manager class that filters out comments from banned users based on group membership settings\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass BanningCommentManager(CommentManager):\n    def get_query_set(self):\n        qs = super().get_query_set()\n        if getattr(settings, \"COMMENTS_BANNED_USERS_GROUP\", None):\n            where = [\n                \"user_id NOT IN (SELECT user_id FROM auth_user_groups WHERE group_id = %s)\"\n            ]\n            params = [settings.COMMENTS_BANNED_USERS_GROUP]\n            qs = qs.extra(where=where, params=params)\n        return qs\n```\n\n----------------------------------------\n\nTITLE: Querying Many-to-Many Relationships in Django\nDESCRIPTION: This snippet shows how to perform queries on many-to-many relationships, including filtering on related model attributes and intermediate model attributes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Find all the groups with a member whose name starts with 'Paul'\n>>> Group.objects.filter(members__name__startswith=\"Paul\")\n<QuerySet [<Group: The Beatles>]>\n\n# Find all the members of the Beatles that joined after 1 Jan 1961\n>>> Person.objects.filter(\n...     group__name=\"The Beatles\", membership__date_joined__gt=date(1961, 1, 1)\n... )\n<QuerySet [<Person: Ringo Starr]>\n```\n\n----------------------------------------\n\nTITLE: Django Model Definition\nDESCRIPTION: Defines a Django model class representing a database table with fields such as name, description, and creation date for ORM operations. Requires Django's models module and is used to create database schemas.\nSOURCE: https://github.com/django/django/blob/main/tests/view_tests/media/%2F.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Explicit SMTP Email Connection in Django 1.2+ (Python)\nDESCRIPTION: This snippet demonstrates how to explicitly request an SMTP email connection using `get_connection()` by providing the backend's fully qualified path. This is useful when specific backend functionality (SMTP in this case) is required, regardless of the default `EMAIL_BACKEND` setting.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import get_connection\n\nconnection = get_connection(\"django.core.mail.backends.smtp.EmailBackend\")\nmessages = get_notification_email()\nconnection.send_messages(messages)\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Objects from Strings in Python using GEOS\nDESCRIPTION: Demonstrates how to create a GEOSGeometry object from a string containing spatial data using the fromstr function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import fromstr\n>>> pnt = fromstr(\"POINT(-90.5 29.5)\", srid=4326)\n```\n\n----------------------------------------\n\nTITLE: Importing GeoDjango Test Runner in Python\nDESCRIPTION: Shows the deprecated function-based test runner and the new class-based test runner for GeoDjango. The new runner is preferred for executing the GeoDjango test suite.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.gis.tests.run_gis_tests  # Deprecated\ndjango.contrib.gis.tests.GeoDjangoTestSuiteRunner  # New class-based runner\n```\n\n----------------------------------------\n\nTITLE: Creating Deconstructible Custom Class for Django Migrations\nDESCRIPTION: This example shows how to use the @deconstructible decorator to make a custom class serializable in Django migrations. It includes an __eq__() method for change detection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/migrations.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.deconstruct import deconstructible\n\n\n@deconstructible\nclass MyCustomClass:\n    def __init__(self, foo=1):\n        self.foo = foo\n        ...\n\n    def __eq__(self, other):\n        return self.foo == other.foo\n```\n\n----------------------------------------\n\nTITLE: Year Archive Template Example\nDESCRIPTION: Django template for displaying yearly article archives with date lists and object lists.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    {% for date in date_list %}\n        <li>{{ date|date }}</li>\n    {% endfor %}\n</ul>\n\n<div>\n    <h1>All Articles for {{ year|date:\"Y\" }}</h1>\n    {% for obj in object_list %}\n        <p>\n            {{ obj.title }} - {{ obj.pub_date|date:\"F j, Y\" }}\n        </p>\n    {% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Auth Form Class (RST)\nDESCRIPTION: This snippet uses the ReStructuredText `:class:` role to reference the `django.contrib.auth.forms.PasswordResetForm` class. It's mentioned in relation to a security vulnerability allowing potential user email enumeration.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`~django.contrib.auth.forms.PasswordResetForm`\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin URLs in Django 0.96 (Python)\nDESCRIPTION: This snippet shows the typical way to include the admin site URLs in the root `urls.py` file in Django 0.96. It uses `include('django.contrib.admin.urls')` within the `urlpatterns`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\n\nurlpatterns = patterns(\n    \"\",\n    (r\"^admin/\", include(\"django.contrib.admin.urls\")),\n    # ... the rest of your URLs here ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Static File Serving in Development - Python\nDESCRIPTION: This code snippet appends a URL pattern to the Django application's urlpatterns list, enabling development-time serving of user-uploaded media files from MEDIA_ROOT using django.views.static.serve. It requires the Django framework and expects the settings.DEBUG flag and settings.MEDIA_ROOT to be configured. The route maps URLs starting with /media/ to the static file-serving view and should not be used in production deployments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/views.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.urls import re_path\nfrom django.views.static import serve\n\n# ... the rest of your URLconf goes here ...\n\nif settings.DEBUG:\n    urlpatterns += [\n        re_path(\n            r\"^media/(?P<path>.*)$\",\n            serve,\n            {\n                \"document_root\": settings.MEDIA_ROOT,\n            },\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Tables for Django Models\nDESCRIPTION: This SQL snippet shows the creation of database tables for Django models, including foreign key constraints and indexes. It demonstrates how Django translates model definitions into database-specific SQL statements.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial02.txt#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"choice_text\" varchar(200) NOT NULL,\n\"votes\" integer NOT NULL,\n\"question_id\" bigint NOT NULL\n);\nALTER TABLE \"polls_choice\"\n  ADD CONSTRAINT \"polls_choice_question_id_c5b4b260_fk_polls_question_id\"\n    FOREIGN KEY (\"question_id\")\n    REFERENCES \"polls_question\" (\"id\")\n    DEFERRABLE INITIALLY DEFERRED;\nCREATE INDEX \"polls_choice_question_id_c5b4b260\" ON \"polls_choice\" (\"question_id\");\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Creating a GEOS Point with Specific SRID (Python)\nDESCRIPTION: Demonstrates creating a `Point` geometry object using specific coordinates and assigning it a Spatial Reference Identifier (SRID) of 32140. This SRID corresponds to a coordinate system specific to south Texas using meters. Requires `django.contrib.gis.geos.GEOSGeometry` and `Point`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_13\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import GEOSGeometry, Point\n>>> pnt = Point(954158.1, 4215137.1, srid=32140)\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating ManyToMany Relationships with Through Model\nDESCRIPTION: Shows how to use bulk_create() with a ManyToMany through model to efficiently create multiple relationship records in a single query.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/optimization.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nPizzaToppingRelationship = Pizza.toppings.through\nPizzaToppingRelationship.objects.bulk_create(\n    [\n        PizzaToppingRelationship(pizza=my_pizza, topping=pepperoni),\n        PizzaToppingRelationship(pizza=your_pizza, topping=pepperoni),\n        PizzaToppingRelationship(pizza=your_pizza, topping=mushroom),\n    ],\n    ignore_conflicts=True,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_pizza.toppings.add(pepperoni)\nyour_pizza.toppings.add(pepperoni, mushroom)\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Key Prefix for Custom Cached DB Session Store in Python\nDESCRIPTION: This snippet shows how to override the cache key prefix when migrating from Django's built-in cached_db session store to a custom one. This prevents namespace clashes in the cache.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass SessionStore(CachedDBStore):\n    cache_key_prefix = \"mysessions.custom_cached_db_backend\"\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Using StrIndex Function in Django ORM\nDESCRIPTION: Shows how to find the position of a substring within a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models import Value as V\n>>> from django.db.models.functions import StrIndex\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> Author.objects.create(name=\"Smith, Margaret\")\n>>> Author.objects.create(name=\"Margaret Jackson\")\n>>> Author.objects.filter(name=\"Margaret Jackson\").annotate(\n...     smith_index=StrIndex(\"name\", V(\"Smith\"))\n... ).get().smith_index\n0\n>>> authors = Author.objects.annotate(smith_index=StrIndex(\"name\", V(\"Smith\"))).filter(\n...     smith_index__gt=0\n... )\n<QuerySet [<Author: Margaret Smith>, <Author: Smith, Margaret>]>\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-escaping within the Cycle Tag (Django)\nDESCRIPTION: Demonstrates disabling auto-escaping specifically for the output of the `{% cycle %}` tag using `{% autoescape off %}`. This is necessary if the variables (`rowvalue1`, `rowvalue2`) contain pre-formatted HTML or other content that should not be escaped.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% for o in some_list %}\n    <tr class=\"{% autoescape off %}{% cycle rowvalue1 rowvalue2 %}{% endautoescape %}\">\n        ...\n    </tr>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Testing Manager copying functionality in Django\nDESCRIPTION: Shows how to test whether a custom Manager can be copied, which is required for Django's internal operations. Custom Managers must support shallow copying for certain queries to work properly.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> import copy\n>>> manager = MyManager()\n>>> my_copy = copy.copy(manager)\n```\n\n----------------------------------------\n\nTITLE: Assigning Related Unsaved Instances in Django ORM (Python)\nDESCRIPTION: Demonstrates assignment of a new Author instance to a Book object's ForeignKey, with saving steps and illustrating that post-Django 1.8, assigning an unsaved Author instance to a ForeignKey raises a ValueError to prevent inadvertent data loss. Also shows object creation, attribute saving, and retrieving related objects. Requires Django ORM configured and models Book and Author defined with the appropriate ForeignKey relationships. Throws errors for unsaved related assignments.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_1\n\nLANGUAGE: pycon\nCODE:\n```\n>>> book = Book.objects.create(name=\"Django\")\n>>> book.author = Author(name=\"John\")\n>>> book.author.save()\n>>> book.save()\n\n>>> Book.objects.get(name=\"Django\")\n>>> book.author\n>>>\n```\n\nLANGUAGE: pycon\nCODE:\n```\n>>> book.author = Author(name=\"john\")\nTraceback (most recent call last):\n...\nValueError: Cannot assign \"<Author: John>\": \"Author\" instance isn't saved in the database.\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database with UTF-8 Support\nDESCRIPTION: SQL command to create a MySQL database with UTF-8 character encoding, ensuring all tables and columns will use UTF-8 by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE <dbname> CHARACTER SET utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Working with LineString Coordinates\nDESCRIPTION: Shows how to manipulate LineString geometries using Python indexing and list operations. Demonstrates coordinate access, modification, and coordinate list manipulation.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.geos import LineString\n>>> line = LineString((0, 0), (0, 50), (50, 50), (50, 0), (0, 0))\n>>> line[0]\n(0.0, 0.0)\n>>> line[-2]\n(50.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Intermediate Page for Admin Action in Django\nDESCRIPTION: This snippet shows how to create an admin action that returns an intermediate page. The 'export_as_json' function serializes selected objects as JSON and returns an HttpResponse.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/actions.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import serializers\nfrom django.http import HttpResponse\n\ndef export_as_json(modeladmin, request, queryset):\n    response = HttpResponse(content_type=\"application/json\")\n    serializers.serialize(\"json\", queryset, stream=response)\n    return response\n```\n\n----------------------------------------\n\nTITLE: Managing Reverse Relations in Multi-table Inheritance\nDESCRIPTION: Example showing a common issue in multi-table inheritance where related_name conflicts occur when adding relations to a child model. The example shows both the error and how to resolve it with related_name.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/models.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass Supplier(Place):\n    customers = models.ManyToManyField(Place)\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Auth Decorators for Login Requirements\nDESCRIPTION: Reference to the login_required decorator that could be used to protect views from anonymous access. This is mentioned as a mitigation that was already available in the admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.decorators.login_required\n```\n\n----------------------------------------\n\nTITLE: Fixing Migration Crash on MySQL 8.0.13+ for Non-nullable Fields\nDESCRIPTION: A bug fix for Django 3.2 where migrations would crash on MySQL 8.0.13+ when altering BinaryField, JSONField, or TextField to be non-nullable. This addresses ticket #32503.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE ... MODIFY COLUMN ... NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Calculating PercentRank in Django Database Queries\nDESCRIPTION: Demonstrates the calculation of PercentRank window function in Django. It shows how the relative rank is computed for rows in a frame clause, with a formula and example table.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_43\n\nLANGUAGE: text\nCODE:\n```\n(rank - 1) / (total rows - 1)\n```\n\n----------------------------------------\n\nTITLE: Initializing GeoDjango Form with Custom Widget Attributes in Python\nDESCRIPTION: This snippet demonstrates how to create a custom GeoDjango form with a PointField using the OSMWidget. It shows how to pass custom widget attributes, specifically setting 'display_raw' to True.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/forms-api.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.gis import forms\n\n\nclass MyGeoForm(forms.Form):\n    point = forms.PointField(widget=forms.OSMWidget(attrs={\"display_raw\": True}))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Hand Object in Django Model\nDESCRIPTION: This snippet demonstrates how to use a custom Hand object in a Django model. It shows retrieving a Hand object from a model instance, printing a specific attribute, and saving a new Hand object to the model.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nexample = MyModel.objects.get(pk=1)\nprint(example.hand.north)\n\nnew_hand = Hand(north, east, south, west)\nexample.hand = new_hand\nexample.save()\n```\n\n----------------------------------------\n\nTITLE: Using Django makemigrations Management Command\nDESCRIPTION: This snippet demonstrates the usage of Django's makemigrations management command. It's mentioned in the context of a bugfix that prevented infinite migrations for models with certain Meta.ordering configurations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython manage.py makemigrations\n```\n\n----------------------------------------\n\nTITLE: ProcessFormView Class Definition in Django\nDESCRIPTION: A mixin that implements basic HTTP GET and POST workflow for form processing. Handles form rendering and submission processing.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-editing.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ProcessFormView(View):\n    def get(self, request, *args, **kwargs):\n        return self.render_to_response(self.get_context_data())\n\n    def post(self, request, *args, **kwargs):\n        form = self.get_form()\n        if form.is_valid():\n            return self.form_valid(form)\n        return self.form_invalid(form)\n```\n\n----------------------------------------\n\nTITLE: Using extra() Method in Django QuerySets\nDESCRIPTION: The extra() method allows developers to supply SQL fragments. Users are advised to perform appropriate manual type conversions before executing queries to prevent MySQL typecasting issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nModel.objects.extra(select={'new_field': \"SELECT ... \"})\n```\n\n----------------------------------------\n\nTITLE: Password Reset URL Pattern Update - Django URL Configuration\nDESCRIPTION: Example of updating password reset URL patterns for Django 1.6's new base64 user PK encoding, replacing the old base36 encoding.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nurl(\n    r\"^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$\",\n    \"django.contrib.auth.views.password_reset_confirm\",\n    name=\"password_reset_confirm\",\n),\n```\n\nLANGUAGE: python\nCODE:\n```\nurl(\n    r\"^reset/(?P<uidb64>[0-9A-Za-z_\\-]+)/(?P<token>.+)/$\",\n    \"django.contrib.auth.views.password_reset_confirm\",\n    name=\"password_reset_confirm\",\n),\n```\n\nLANGUAGE: python\nCODE:\n```\nurl(\n    r\"^reset/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$\",\n    \"django.contrib.auth.views.password_reset_confirm_uidb36\",\n),\n```\n\n----------------------------------------\n\nTITLE: Basic Django File Logging Configuration\nDESCRIPTION: A simple logging configuration that writes debug-level logs to a file. Defines a basic file handler and logger for Django applications.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/logging.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"handlers\": {\n        \"file\": {\n            \"level\": \"DEBUG\",\n            \"class\": \"logging.FileHandler\",\n            \"filename\": \"/path/to/django/debug.log\",\n        },\n    },\n    \"loggers\": {\n        \"django\": {\n            \"handlers\": [\"file\"],\n            \"level\": \"DEBUG\",\n            \"propagate\": True,\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing SQL Injection in QuerySet Methods (Python/Django)\nDESCRIPTION: Addresses CVE-2022-28346, fixing potential SQL injection vulnerabilities in QuerySet.annotate(), aggregate(), and extra() methods when using dictionary expansion for kwargs.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.13.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.annotate(**kwargs)\nQuerySet.aggregate(**kwargs)\nQuerySet.extra(**kwargs)\n```\n\n----------------------------------------\n\nTITLE: Fixing LoginView's redirect_field_name in Template Context in Python\nDESCRIPTION: Fixed the value of redirect_field_name in LoginView's template context. It's now an empty string if the corresponding parameter isn't sent in a request.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nLoginView.as_view(template_name='login.html')\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Together Constraints in Django Model Meta (Legacy)\nDESCRIPTION: Shows how to enforce uniqueness across multiple fields using the `unique_together` attribute in a model's `Meta` class. Both list-of-lists and single-list formats are demonstrated. Note: Using `UniqueConstraint` with the `constraints` option is now preferred.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nunique_together = [[\"driver\", \"restaurant\"]]\n```\n\nLANGUAGE: python\nCODE:\n```\nunique_together = [\"driver\", \"restaurant\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering by Month - SQL Equivalent\nDESCRIPTION: Provides the SQL equivalent for month extraction and comparison, using EXTRACT to filter by month value. Inputs are strings for the month number; output is all records where the field's month matches the specified value(s). Database syntax and function support may vary.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_108\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE EXTRACT('month' FROM pub_date) = '12';\nSELECT ... WHERE EXTRACT('month' FROM pub_date) >= '6';\n```\n\n----------------------------------------\n\nTITLE: SameSite Cookie Flag in delete_cookie Method\nDESCRIPTION: Added support for setting the SameSite cookie flag when deleting cookies through HttpResponse.delete_cookie method. This functionality allows proper cookie security configuration during deletion.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nHttpResponse.delete_cookie(samesite='Strict')\n```\n\n----------------------------------------\n\nTITLE: Using ContextMixin's extra_context in Django TemplateView\nDESCRIPTION: Demonstrates how to use the extra_context attribute of ContextMixin to pass additional context to a TemplateView. This is useful for adding custom data to the template context.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-simple.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import TemplateView\n\nTemplateView.as_view(extra_context={\"title\": \"Custom Title\"})\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Messages with Deprecated API (Python)\nDESCRIPTION: This snippet shows the deprecated method `user.get_and_delete_messages()` for retrieving messages associated with a user. This method fetched and simultaneously cleared the messages from the database.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfor message in user.get_and_delete_messages():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Admin for Custom User Model\nDESCRIPTION: Example of extending UserAdmin to include custom fields in both the edit and creation forms within Django admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.admin import UserAdmin\n\n\nclass CustomUserAdmin(UserAdmin):\n    ...\n    fieldsets = UserAdmin.fieldsets + ((None, {\"fields\": [\"custom_field\"]}),)\n    add_fieldsets = UserAdmin.add_fieldsets + ((None, {\"fields\": [\"custom_field\"]}),)\n```\n\n----------------------------------------\n\nTITLE: Rendering Comment Notification Email in Django Template Language\nDESCRIPTION: This snippet demonstrates how to structure an email notification for a new comment using Django's template language. It dynamically inserts the commented object and the full text of the comment into the email body.\nSOURCE: https://github.com/django/django/blob/main/tests/templates/comments/comment_notification_email.txt#2025-04-23_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\nA comment has been posted on {{ content_object }}.\nThe comment reads as follows:\n{{ comment }}\n```\n\n----------------------------------------\n\nTITLE: Accessing GML Representation of OGRGeometry in Python\nDESCRIPTION: Demonstrates accessing the `.gml` attribute of an `OGRGeometry` object initialized with a WKT string ('POINT(1 2)'). This attribute returns a string representation of the geometry in GML format.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OGRGeometry(\"POINT(1 2)\").gml\n'<gml:Point><gml:coordinates>1,2</gml:coordinates></gml:Point>'\n```\n\n----------------------------------------\n\nTITLE: Running Django squashmigrations Command\nDESCRIPTION: Demonstrates how to use the squashmigrations command to combine multiple migrations for a Django app. It includes options for optimizing, suppressing prompts, naming the squashed migration, and omitting the header.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin squashmigrations app_label [start_migration_name] migration_name\n```\n\n----------------------------------------\n\nTITLE: Django Installation Error with Old Setuptools - Shell\nDESCRIPTION: Shows syntax errors that occur when installing Django 1.9/1.9.1 with setuptools 5.5.x.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nCompiling django/conf/app_template/apps.py ...\n  File \"django/conf/app_template/apps.py\", line 4\n    class {{ camel_case_app_name }}Config(AppConfig):\n          ^\nSyntaxError: invalid syntax\n\nCompiling django/conf/app_template/models.py ...\n  File \"django/conf/app_template/models.py\", line 1\n    {{ unicode_literals }}from django.db import models\n                             ^\nSyntaxError: invalid syntax\n```\n\n----------------------------------------\n\nTITLE: Using a Simple Block Tag in Django Templates\nDESCRIPTION: Shows how to use the custom 'chart' block tag in a Django template. The content between the tags is passed to the tag function after being rendered.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-template-tags.txt#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{% chart %}\n  digraph G {\n      label = \"Chart for {{ request.user }}\"\n      A -> {B C}\n  }\n{% endchart %}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Cache Key Version in Django\nDESCRIPTION: Shows how to increment the version of a specific cache key using the incr_version() method, leaving other keys unaffected.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_36\n\nLANGUAGE: pycon\nCODE:\n```\n>>> # Increment the version of 'my_key'\n>>> cache.incr_version(\"my_key\")\n>>> # The default version still isn't available\n>>> cache.get(\"my_key\")\nNone\n# Version 2 isn't available, either\n>>> cache.get(\"my_key\", version=2)\nNone\n>>> # But version 3 *is* available\n>>> cache.get(\"my_key\", version=3)\n'hello world!'\n```\n\n----------------------------------------\n\nTITLE: Preventing SQL Injection in Django QuerySet Methods\nDESCRIPTION: Addresses CVE-2024-42005 by enhancing security in QuerySet.values() and values_list() methods when working with models containing JSONField, preventing SQL injection via crafted JSON object keys.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.15.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.values()\nQuerySet.values_list()\n```\n\n----------------------------------------\n\nTITLE: Enabling Future Template Tags in Django Templates\nDESCRIPTION: These snippets show how to enable the new auto-escaping behavior for 'cycle' and 'firstof' template tags using the 'future' template library in Django 1.6.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_10\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load cycle from future %}\n```\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% load firstof from future %}\n```\n\n----------------------------------------\n\nTITLE: Django URL Pattern Function Reference\nDESCRIPTION: Reference to the re_path function used with RegexPattern for URL routing in Django, which was fixed to handle missing optional named groups correctly.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.urls.re_path\n```\n\n----------------------------------------\n\nTITLE: Using `reverse` with Query Parameters and Fragments in Django (Pycon)\nDESCRIPTION: Pycon examples demonstrating the use of the `query` and `fragment` keyword arguments (added in Django 5.2) with `django.urls.reverse`. Shows how to pass dictionaries or lists of tuples to `query` for proper URL encoding and how to add a URL fragment (which is not encoded) using `fragment`. Requires `django.urls.reverse`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/urlresolvers.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.urls import reverse\n>>> reverse(\"admin:index\", query={\"q\": \"biscuits\", \"page\": 2}, fragment=\"results\")\n'/admin/?q=biscuits&page=2#results'\n>>> reverse(\"admin:index\", query=[(\"color\", \"blue\"), (\"color\", 1), (\"none\", None)])\n'/admin/?color=blue&color=1&none=None'\n>>> reverse(\"admin:index\", query={\"has empty spaces\": \"also has empty spaces!\"})\n'/admin/?has+empty+spaces=also+has+empty+spaces%21'\n>>> reverse(\"admin:index\", fragment=\"no encoding is done\")\n'/admin/#no encoding is done'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Exception Reporter Filter in Django View\nDESCRIPTION: Demonstrates how to set a custom exception reporter filter for a specific view. This provides granular control over which filter to use within any given view.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/error-reporting.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef my_view(request):\n    if request.user.is_authenticated:\n        request.exception_reporter_filter = CustomExceptionReporterFilter()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining MonthArchiveView Class in Django\nDESCRIPTION: Class definition for MonthArchiveView, a generic date-based view for displaying monthly archives. It includes attributes and methods for handling month-specific functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass MonthArchiveView():\n    # Attributes and methods listed in the documentation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Legacy Approach Fails for Composite Primary Key Models - Pycon\nDESCRIPTION: Shows that using the old approach to identify primary key fields fails in models with composite primary keys, as the primary_key attribute will be False for all fields. Demonstrates iterating over OrderLineItem's fields and checking primary_key; returns an empty list. Requires understanding of Django's internal _meta options.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> pk_fields = []\n>>> for field in OrderLineItem._meta.get_fields():\n...     if field.primary_key:\n...         pk_fields.append(field)\n...\n>>> pk_fields\n[]\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using GDAL DataSource in Python\nDESCRIPTION: Example demonstrating how to create and inspect a GDAL DataSource object for reading geospatial data files.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.gdal import DataSource\n>>> ds = DataSource(\"/path/to/your/cities.shp\")\n>>> ds.name\n'/path/to/your/cities.shp'\n>>> ds.layer_count  # This file only contains one layer\n1\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Unsigned Auto Field in Django\nDESCRIPTION: This snippet demonstrates how to create a custom UnsignedAutoField in Django, including both db_type and rel_db_type methods for MySQL compatibility.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass UnsignedAutoField(models.AutoField):\n    def db_type(self, connection):\n        return \"integer UNSIGNED AUTO_INCREMENT\"\n\n    def rel_db_type(self, connection):\n        return \"integer UNSIGNED\"\n```\n\n----------------------------------------\n\nTITLE: Custom MySQL Search Lookup Implementation\nDESCRIPTION: Implementation of a custom search lookup to replace the deprecated __search query lookup for MySQL.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Search(models.Lookup):\n    lookup_name = \"search\"\n\n    def as_mysql(self, compiler, connection):\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params\n        return \"MATCH (%s) AGAINST (%s IN BOOLEAN MODE)\" % (lhs, rhs), params\n\n\nmodels.CharField.register_lookup(Search)\nmodels.TextField.register_lookup(Search)\n```\n\n----------------------------------------\n\nTITLE: Using sync_to_async Adapter Function\nDESCRIPTION: Examples of using sync_to_async as both a direct wrapper and decorator to convert sync functions to async functions, with thread sensitivity options\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import sync_to_async\n\nasync_function = sync_to_async(sync_function, thread_sensitive=False)\nasync_function = sync_to_async(sensitive_sync_function, thread_sensitive=True)\n\n\n@sync_to_async\ndef sync_function(): ...\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Transaction Rollback Example\nDESCRIPTION: Shows how to handle exceptions in PostgreSQL transactions using complete transaction rollback. Demonstrates error handling for database operations that might fail.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/transactions.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\na.save()  # Succeeds, but may be undone by transaction rollback\ntry:\n    b.save()  # Could throw exception\nexcept IntegrityError:\n    transaction.rollback()\nc.save()  # Succeeds, but a.save() may have been undone\n```\n\n----------------------------------------\n\nTITLE: Running Tests Starting After a Specific Module\nDESCRIPTION: This command runs Django's test suite starting after a specified top-level module (wsgi in this example), running only modules that would normally be run after it.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ./runtests.py --start-after=wsgi\n```\n\n----------------------------------------\n\nTITLE: Implementing run_tests Method in Python\nDESCRIPTION: This method runs the test suite with specified test labels. It returns the number of failed tests and supports various formats for test selection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef run_tests(self, test_labels, **kwargs):\n    # Run the test suite\n    # Return the number of tests that failed\n```\n\n----------------------------------------\n\nTITLE: Calling Django Management Commands from Python Code\nDESCRIPTION: Examples of how to call Django management commands programmatically from Python code using the call_command() function with various parameter formats.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import management\nfrom django.core.management.commands import loaddata\n\nmanagement.call_command(\"flush\", verbosity=0, interactive=False)\nmanagement.call_command(\"loaddata\", \"test_data\", verbosity=0)\nmanagement.call_command(loaddata.Command(), \"test_data\", verbosity=0)\n```\n\n----------------------------------------\n\nTITLE: Implementing CharField with Integer List Validator\nDESCRIPTION: Example showing how to replace deprecated CommaSeparatedIntegerField with CharField using validate_comma_separated_integer_list validator.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.validators import validate_comma_separated_integer_list\nfrom django.db import models\n\n\nclass MyModel(models.Model):\n    numbers = models.CharField(..., validators=[validate_comma_separated_integer_list])\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Password Reset Email Subject in Django\nDESCRIPTION: This snippet defines the subject line for a custom password reset email in Django. It uses the autoescape tag to disable automatic HTML escaping for the site name, allowing for potential HTML formatting in the site name if needed.\nSOURCE: https://github.com/django/django/blob/main/tests/auth_tests/templates/registration/password_reset_subject.txt#2025-04-23_snippet_0\n\nLANGUAGE: Django Template Language\nCODE:\n```\n{% autoescape off %}Custom password reset on {{ site_name }}{% endautoescape %}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Formset in Django Template\nDESCRIPTION: Provides three different methods to render a formset in a Django template: letting the formset handle rendering, manually rendering the formset with form handling, and manually rendering each field.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/modelforms.txt#2025-04-23_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">\n    {{ formset }}\n</form>\n```\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">\n    {{ formset.management_form }}\n    {% for form in formset %}\n        {{ form }}\n    {% endfor %}\n</form>\n```\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">\n    {{ formset.management_form }}\n    {% for form in formset %}\n        {% for field in form %}\n            {{ field.label_tag }} {{ field }}\n        {% endfor %}\n    {% endfor %}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Django ORM Queries with Backslash Escaping\nDESCRIPTION: Demonstrates the change in how backslashes in query parameters are handled by the Django database API in version 0.96. The first snippet shows the pre-0.96 method (now incorrect) requiring double backslashes to match a single literal backslash. The second snippet shows the correct 0.96 method, where a single backslash parameter correctly matches a single literal backslash in the database, as the API now handles escaping.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Find text containing a single backslash\nMyModel.objects.filter(text__contains=\"\\\\\\\\\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Find text containing a single backslash\nMyModel.objects.filter(text__contains=\"\\\\\")\n```\n\n----------------------------------------\n\nTITLE: Using GenericIPAddressField in Django Models\nDESCRIPTION: GenericIPAddressField is another model field class that has been updated to convert arguments to the correct types before querying, addressing MySQL typecasting issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import GenericIPAddressField\n```\n\n----------------------------------------\n\nTITLE: Overriding TestCase Setup and Teardown Methods\nDESCRIPTION: Example showing the proper way to override setUpClass and tearDownClass methods in a TestCase subclass while ensuring the parent implementation is called.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass MyTestCase(TestCase):\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        ...\n\n    @classmethod\n    def tearDownClass(cls):\n        ...\n        super().tearDownClass()\n```\n\n----------------------------------------\n\nTITLE: jQuery Extension Pattern\nDESCRIPTION: Example of the jQuery.extend() pattern that was vulnerable to prototype pollution before being patched. This shows the syntax that could be exploited in versions before jQuery 3.4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.extend(true, {}, ...)\n```\n\n----------------------------------------\n\nTITLE: Customizing Django Admin Base Site Template\nDESCRIPTION: Example of customizing the Django admin base site template by modifying the branding block to change the site header and include color theme toggle.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/tutorial07.txt#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% block branding %}\n<div id=\"site-name\"><a href=\"{% url 'admin:index' %}\">Polls Administration</a></div>\n{% if user.is_anonymous %}\n  {% include \"admin/color_theme_toggle.html\" %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Customizing user_passes_test Decorator in Django\nDESCRIPTION: Demonstrates how to customize the login_url parameter of the user_passes_test decorator. This specifies where users who don't pass the test should be redirected.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n@user_passes_test(email_check, login_url=\"/login/\")\ndef my_view(request): ...\n```\n\n----------------------------------------\n\nTITLE: Fixed ClearableFileInput Default Value Handling in Django Forms\nDESCRIPTION: Bug fix for the Clear checkbox behavior in ClearableFileInput when used with model form fields that have a default value specified.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nClearableFileInput\n```\n\n----------------------------------------\n\nTITLE: Unicode Username Validation Implementation\nDESCRIPTION: Demonstrates the new username validation that explicitly accepts Unicode characters by default on Python 3, with options for ASCII or Unicode validation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\n\n# Choose between ASCII or Unicode username validation\n# Default is UnicodeUsernameValidator on Python 3\n```\n\n----------------------------------------\n\nTITLE: Fixing Regression in Django's intcomma Template Filter\nDESCRIPTION: Resolves a bug introduced in Django 4.2.10 where the intcomma template filter could incorrectly add a leading comma to string representations of float numbers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.11.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nintcomma\n```\n\n----------------------------------------\n\nTITLE: Inheriting a custom Manager from an abstract base class in Django\nDESCRIPTION: Demonstrates how a child class inherits the custom Manager from an abstract base class. The inherited Manager becomes the default Manager for the child class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/managers.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass ChildA(AbstractBase):\n    # ...\n    # This class has CustomManager as the default manager.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication in Django Templates\nDESCRIPTION: Example of using the 'user' context variable in a Django template to display different content for authenticated and unauthenticated users.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n{% if user.is_authenticated %}\n    <p>Welcome, {{ user.username }}. Thanks for logging in.</p>\n{% else %}\n    <p>Welcome, new user. Please log in.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Relative Paths with Extends Tag (Django)\nDESCRIPTION: Shows examples of using the `{% extends %}` tag with relative paths (`./` and `../`) to specify parent templates. The paths are relative to the directory of the current template file.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_12\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"./base2.html\" %}\n{% extends \"../base1.html\" %}\n{% extends \"./my/base3.html\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Host Password for Email Authentication in Django\nDESCRIPTION: Specifies the password (empty string by default) for SMTP authentication, used in conjunction with EMAIL_HOST_USER. Django will not attempt authentication if either setting is empty.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_HOST_PASSWORD = ''\n```\n\n----------------------------------------\n\nTITLE: Deprecating PostgreSQL OrderableAggMixin (Python/SQL)\nDESCRIPTION: The PostgreSQL-specific `OrderableAggMixin` (likely `django.contrib.postgres.aggregates.OrderableAggMixin`) is deprecated. The ability to order within aggregates is now provided by the `order_by` argument on the base `Aggregate` class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nOrderableAggMixin\n```\n\n----------------------------------------\n\nTITLE: Initializing KeysValidator in Django PostgreSQL\nDESCRIPTION: Creates a KeysValidator instance to validate the presence of specified keys in a dictionary. It can optionally enforce strict validation to ensure no extra keys are present. Custom error messages can be provided for missing or extra keys.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/validators.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nKeysValidator(keys, strict=False, messages=None)\n```\n\n----------------------------------------\n\nTITLE: Customizing Ignored Patterns for Django's Collectstatic Command\nDESCRIPTION: This snippet shows how to create a custom AppConfig class to override the default ignored patterns for the collectstatic command. It defines a new class that inherits from StaticFilesConfig and sets a custom ignore_patterns attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.staticfiles.apps import StaticFilesConfig\n\n\nclass MyStaticFilesConfig(StaticFilesConfig):\n    ignore_patterns = [...]  # your custom ignore list\n```\n\n----------------------------------------\n\nTITLE: Checking for Protected Type Objects\nDESCRIPTION: Determines if an object instance is of a protected type, which are preserved as-is when passed to force_str with strings_only=True.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nis_protected_type(obj)\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed GTiff Raster in Python using Django and GDAL\nDESCRIPTION: This snippet demonstrates how to create a compressed GeoTIFF raster using Django's GDALRaster class. It sets various options including compression, tiling, and block size.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nGDALRaster(\n    {\n        \"driver\": \"GTiff\",\n        \"name\": \"/path/to/new/file.tif\",\n        \"srid\": 4326,\n        \"width\": 255,\n        \"height\": 255,\n        \"nr_of_bands\": 1,\n        \"papsz_options\": {\n            \"compress\": \"packbits\",\n            \"tiled\": \"yes\",\n            \"blockxsize\": 23,\n            \"blockysize\": 23,\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using the translations Argument with raw()\nDESCRIPTION: Example of using the translations argument to map fields in a query to model fields with a dictionary. This provides an alternative to using SQL AS clauses for field mapping.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> name_map = {\"first\": \"first_name\", \"last\": \"last_name\", \"bd\": \"birth_date\", \"pk\": \"id\"}\n>>> Person.objects.raw(\"SELECT * FROM some_other_table\", translations=name_map)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field Names in Generic Relations\nDESCRIPTION: Example of setting up a GenericRelation with custom field names for content type and object ID fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/contenttypes.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntags = GenericRelation(\n    TaggedItem,\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting GDALRaster Origin Attribute in Python\nDESCRIPTION: Shows how to access the top-left origin coordinates (x, y) of a GDALRaster using the `origin` attribute and how to modify its x-coordinate. The origin represents coefficients 0 and 3 of the geotransform.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_40\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.origin\n[0.0, 0.0]\n>>> rst.origin.x = 1\n>>> rst.origin\n[1.0, 0.0]\n```\n\n----------------------------------------\n\nTITLE: Normalizing a GEOS MultiPoint Geometry in Python\nDESCRIPTION: Demonstrates the `normalize()` method on a `MultiPoint` object to convert its internal coordinate order to a canonical form. The example shows creating a `MultiPoint`, printing its initial WKT representation, calling `normalize()` in-place (modifying the object), and printing the resulting normalized WKT representation. The `clone=True` option could be used to return a new normalized object without modifying the original.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> g = MultiPoint(Point(0, 0), Point(2, 2), Point(1, 1))\n>>> print(g)\nMULTIPOINT (0 0, 2 2, 1 1)\n>>> g.normalize()\n>>> print(g)\nMULTIPOINT (2 2, 1 1, 0 0)\n```\n\n----------------------------------------\n\nTITLE: Warping a GDALRaster using the warp Method in Python\nDESCRIPTION: Demonstrates how to use the `warp` method to create a warped version of a GDALRaster, specifically for aggregation. It initializes a 6x6 raster and then warps it into a 3x3 raster with double the pixel scale (200x200 instead of 100x100), effectively aggregating 2x2 blocks of pixels using the default 'NearestNeighbour' resampling.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_45\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster(\n...     {\n...         \"width\": 6,\n...         \"height\": 6,\n...         \"srid\": 3086,\n...         \"origin\": [500000, 400000],\n...         \"scale\": [100, -100],\n...         \"bands\": [{\"data\": range(36), \"nodata_value\": 99}],\n...     }\n... )\n>>> target = rst.warp({\"scale\": [200, -200], \"width\": 3, \"height\": 3})\n>>> target.bands[0].data()\narray([[  7.,   9.,  11.],\n       [ 19.,  21.,  23.],\n       [ 31.,  33.,  35.]], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Defining Item Enclosure MIME Type in Django Feed\nDESCRIPTION: This snippet shows three ways to define the enclosure MIME type for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef item_enclosure_mime_type(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    enclosure MIME type.\n    \"\"\"\n\ndef item_enclosure_mime_type(self):\n    \"\"\"\n    Returns the enclosure MIME type for every item in the feed.\n    \"\"\"\n\nitem_enclosure_mime_type = \"audio/mpeg\"  # Hard-coded enclosure MIME type.\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Handlers in Django\nDESCRIPTION: Defines a list of upload handler classes used for processing file uploads. The default includes MemoryFileUploadHandler and TemporaryFileUploadHandler, allowing customization of the upload process.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nFILE_UPLOAD_HANDLERS = [\n    \"django.core.files.uploadhandler.MemoryFileUploadHandler\",\n    \"django.core.files.uploadhandler.TemporaryFileUploadHandler\",\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating XSS Vulnerability in Django Templates\nDESCRIPTION: Example showing how unsanitized template variables in style tags can lead to XSS vulnerabilities. The code demonstrates a case where Django's automatic escaping doesn't provide complete protection.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/security.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<style class={{ var }}>...</style>\n```\n\n----------------------------------------\n\nTITLE: Generating Placeholder Text - lorem Tag in HTML+Django Template - html+django\nDESCRIPTION: Provides multiple usages of the 'lorem' tag to insert random or common 'lorem ipsum' text for design mockups, with options for word/paragraph count, HTML wrapping, and randomness. Relies on Django's built-in lorem generator; accepts arguments for count, type (w/p/b), and randomization. Outputs random placeholder text as per call signature.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_24\n\nLANGUAGE: html+django\nCODE:\n```\n{% lorem %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% lorem 3 p %}\n```\n\nLANGUAGE: html+django\nCODE:\n```\n{% lorem 2 w random %}\n```\n\n----------------------------------------\n\nTITLE: Updating URL Patterns in Django for New Include Syntax\nDESCRIPTION: Example of updating URL patterns to use the new include() syntax in Django 1.9. The new syntax replaces the 3-tuple argument with separate namespace and app_name arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npolls_patterns = [\n    url(...),\n]\n\nurlpatterns = [\n    url(r\"^polls/\", include((polls_patterns, \"polls\", \"author-polls\"))),\n]\n```\n\nLANGUAGE: python\nCODE:\n```\npolls_patterns = (\n    [\n        url(...),\n    ],\n    \"polls\",\n)  # 'polls' is the app_name\n\nurlpatterns = [\n    url(r\"^polls/\", include(polls_patterns, namespace=\"author-polls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Starting a uWSGI server for Django using command line\nDESCRIPTION: Example command with comprehensive options to start a uWSGI server for a Django project. It includes settings for the project path, module configuration, socket binding, process management, and logging.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/uwsgi.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuwsgi --chdir=/path/to/your/project \\\n    --module=mysite.wsgi:application \\\n    --env DJANGO_SETTINGS_MODULE=mysite.settings \\\n    --master --pidfile=/tmp/project-master.pid \\\n    --socket=127.0.0.1:49152 \\      # can also be a file\n    --processes=5 \\                 # number of worker processes\n    --uid=1000 --gid=2000 \\         # if root, uwsgi can drop privileges\n    --harakiri=20 \\                 # respawn processes taking more than 20 seconds\n    --max-requests=5000 \\           # respawn processes after serving 5000 requests\n    --vacuum \\                      # clear environment on exit\n    --home=/path/to/virtual/env \\   # optional path to a virtual environment\n    --daemonize=/var/log/uwsgi/yourproject.log      # background the process\n```\n\n----------------------------------------\n\nTITLE: Using resetcycle Tag in Django Templates\nDESCRIPTION: This snippet demonstrates the resetcycle tag which resets a previous cycle so it restarts from its first item. This example resets the odd/even cycle for each coach's athletes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_40\n\nLANGUAGE: html+django\nCODE:\n```\n{% for coach in coach_list %}\n    <h1>{{ coach.name }}</h1>\n    {% for athlete in coach.athlete_set.all %}\n        <p class=\"{% cycle 'odd' 'even' %}\">{{ athlete.name }}</p>\n    {% endfor %}\n    {% resetcycle %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Empty Value Display in Django Admin\nDESCRIPTION: Example showing how to customize empty value display for the entire admin site, replacing the default dash with a custom string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\n\nadmin.site.empty_value_display = \"(None)\"\n```\n\n----------------------------------------\n\nTITLE: Django QuerySet Selection for Update\nDESCRIPTION: Reference to select_for_update() method used with related fields pointing to proxy models in the 'of' argument.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.select_for_update()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error When Assigning Unsaved Objects to Relations in Django\nDESCRIPTION: Example showing how Django 1.8.4+ raises a ValueError when attempting to save a model with an unsaved related object assigned to prevent data loss. This is part of the backwards incompatible changes in Django 1.8.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> book = Book.objects.create(name=\"Django\")\n>>> book.author = Author(name=\"John\")\n>>> book.save()\nTraceback (most recent call last):\n...\nValueError: save() prohibited to prevent data loss due to unsaved related object 'author'.\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for Django Authentication with mod_wsgi\nDESCRIPTION: Apache configuration that sets up a protected location requiring authentication against Django's user database. This configuration defines a '/secret' path that will prompt for authentication credentials to be checked against Django's user system.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nWSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py\nWSGIPythonPath /path/to/mysite.com\n\nWSGIProcessGroup %{GLOBAL}\nWSGIApplicationGroup %{GLOBAL}\n\n<Location \"/secret\">\n    AuthType Basic\n    AuthName \"Top Secret\"\n    Require valid-user\n    AuthBasicProvider wsgi\n    WSGIAuthUserScript /path/to/mysite.com/mysite/wsgi.py\n</Location>\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Django Template Object Directly\nDESCRIPTION: Shows how to create a `django.template.Template` object directly by passing the raw template code as a string argument to its constructor. This compiles the template string, making it ready for rendering with a context. The example uses a simple template string with a variable `{{ my_name }}`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template import Template\n\ntemplate = Template(\"My name is {{ my_name }}.\")\n```\n\n----------------------------------------\n\nTITLE: QuerySet Method Fixes in Django 3.0.5\nDESCRIPTION: Documentation of bug fixes related to QuerySet.values() and values_list() methods when handling aggregations and Subquery annotations that conflict with field names.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.values()\nQuerySet.values_list()\n```\n\n----------------------------------------\n\nTITLE: Configuring ArchiveIndexView URL Pattern\nDESCRIPTION: URL configuration for the article archive index view using Django's path routing.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom django.views.generic.dates import ArchiveIndexView\n\nfrom myapp.models import Article\n\nurlpatterns = [\n    path(\n        \"archive/\",\n        ArchiveIndexView.as_view(model=Article, date_field=\"pub_date\"),\n        name=\"article_archive\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Deferring Model Fields in Raw Queries\nDESCRIPTION: Example demonstrating how to selectively include fields in a raw query, with Django automatically deferring the loading of omitted fields until they are accessed.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/sql.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> people = Person.objects.raw(\"SELECT id, first_name FROM myapp_person\")\n```\n\n----------------------------------------\n\nTITLE: Using Storage.save() Method in Django\nDESCRIPTION: The Storage.save() method in Django is used for saving files. It has been updated to prevent potential directory-traversal vulnerabilities when passed crafted file names.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.1.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nStorage.save()\n```\n\n----------------------------------------\n\nTITLE: Defining WeekArchiveView Class in Django\nDESCRIPTION: Class definition for WeekArchiveView, a generic date-based view for displaying weekly archives. It includes attributes and methods for handling week-specific functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/flattened-index.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nclass WeekArchiveView():\n    # Attributes and methods listed in the documentation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Filesystem Cache in Django\nDESCRIPTION: Setting up a file-based cache backend in Django settings for Windows environments. This configuration includes the drive letter at the beginning of the path.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"c:/foo/bar\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Django Get or Create Query Defaults Validation\nDESCRIPTION: Modified validation of fields in the defaults argument for QuerySet get_or_create() and update_or_create() methods to allow settable model properties.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.get_or_create()\nQuerySet.update_or_create()\n```\n\n----------------------------------------\n\nTITLE: Custom Author DetailView Implementation\nDESCRIPTION: DetailView with overridden get_object method to update last_accessed timestamp\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-display.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\nfrom django.views.generic import DetailView\nfrom books.models import Author\n\n\nclass AuthorDetailView(DetailView):\n    queryset = Author.objects.all()\n\n    def get_object(self):\n        obj = super().get_object()\n        # Record the last accessed date\n        obj.last_accessed = timezone.now()\n        obj.save()\n        return obj\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Oracle Database Driver Version for Django\nDESCRIPTION: This line defines the minimum version of the oracledb driver required for Django to work with Oracle databases. It ensures compatibility with Django's Oracle database backend.\nSOURCE: https://github.com/django/django/blob/main/tests/requirements/oracle.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\noracledb >= 2.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic ModelAdmin Fields in Django\nDESCRIPTION: Demonstrates how to set up basic field configurations for a ModelAdmin class, including excluding fields and specifying a subset of fields to display.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfields = [\"name\", \"title\"]\n\n\nclass AuthorAdmin(admin.ModelAdmin):\n    exclude = [\"birth_date\"]\n```\n\n----------------------------------------\n\nTITLE: Syncing Deprecated Storage Settings with STORAGES in Django 4.2\nDESCRIPTION: Resolves an issue where the deprecated DEFAULT_FILE_STORAGE and STATICFILES_STORAGE settings were not properly synchronized with the STORAGES setting.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_FILE_STORAGE\nSTATICFILES_STORAGE\nSTORAGES\n```\n\n----------------------------------------\n\nTITLE: Test Database Migration Setting\nDESCRIPTION: Reference to the test database migration setting that was fixed to properly sync during database creation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTEST_MIGRATE\n```\n\n----------------------------------------\n\nTITLE: Rendering Widget Media with ManifestStaticFilesStorage\nDESCRIPTION: Example showing how media is rendered when using Django's ManifestStaticFilesStorage\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> w = CalendarWidget()\n>>> print(w.media)\n<link href=\"/css/pretty.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/animations.27e20196a850.js\"></script>\n<script src=\"https://othersite.com/actions.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Template Example with Django\nDESCRIPTION: Shows how to iterate through form fields and render each field's wrapper, errors, label and input\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/index.txt#2025-04-23_snippet_7\n\nLANGUAGE: html+django\nCODE:\n```\n{% for field in form %}\n    <div class=\"fieldWrapper\">\n        {{ field.errors }}\n        {{ field.label_tag }} {{ field }}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Modifying QuerySet.reverse() to affect nulls_first and nulls_last in Django\nDESCRIPTION: Ensures that QuerySet.reverse() properly affects the nulls_first and nulls_last ordering. This fix addresses the issue reported in ticket #28722.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.7.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.reverse()\n```\n\n----------------------------------------\n\nTITLE: ModelAdmin List Editable Memory Usage Fix\nDESCRIPTION: Resolution for a regression introduced in Django 1.10 that caused excessive memory consumption when using ModelAdmin.list_editable feature.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.14.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nModelAdmin.list_editable\n```\n\n----------------------------------------\n\nTITLE: Proper Spacing in Django Template Tags\nDESCRIPTION: Demonstrates correct spacing inside Django template tags with one space between braces and tag content. This shows proper formatting of template tags.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n{% load humanize %}\n```\n\n----------------------------------------\n\nTITLE: Handling Streaming Response Content in Django Middleware\nDESCRIPTION: Shows how to handle both streaming and non-streaming responses in Django middleware by checking the response type and wrapping or altering content accordingly.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/middleware.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif response.streaming:\n    response.streaming_content = wrap_streaming_content(response.streaming_content)\nelse:\n    response.content = alter_content(response.content)\n```\n\n----------------------------------------\n\nTITLE: Referencing Django QuerySet Method\nDESCRIPTION: Code reference to Django's select_for_update() method used in the context of discussing a data loss bug fix.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nselect_for_update\n```\n\n----------------------------------------\n\nTITLE: Activating Django Humanize Module in Template\nDESCRIPTION: Shows how to load the humanize module in a Django template to access its filters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% load humanize %}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations with Distance Objects\nDESCRIPTION: Demonstrates arithmetic operations (addition and subtraction) between Distance objects with different units.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/measure.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> print(d1 + d2)  # Adding 5 miles to 5 kilometers\n13.04672 km\n>>> print(d2 - d1)  # Subtracting 5 kilometers from 5 miles\n1.89314403881 mi\n```\n\n----------------------------------------\n\nTITLE: Introducing `BasePasswordHasher.harden_runtime()` Method in Django\nDESCRIPTION: Introduced in Django 1.8.10 to mitigate CVE-2016-2513, this method allows password hashers to equalize the runtime between checking passwords with older work factors and the current default, preventing timing attacks. It's implemented for `PBKDF2PasswordHasher` and `BCryptPasswordHasher`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nBasePasswordHasher.harden_runtime()\n```\n\n----------------------------------------\n\nTITLE: Implementing Primary-Replica Router in Django\nDESCRIPTION: Implementation of a Django database router that directs read operations to replica databases and write operations to a primary database.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n\nclass PrimaryReplicaRouter:\n    def db_for_read(self, model, **hints):\n        \"\"\"\n        Reads go to a randomly-chosen replica.\n        \"\"\"\n        return random.choice([\"replica1\", \"replica2\"])\n\n    def db_for_write(self, model, **hints):\n        \"\"\"\n        Writes always go to primary.\n        \"\"\"\n        return \"primary\"\n\n    def allow_relation(self, obj1, obj2, **hints):\n        \"\"\"\n        Relations between objects are allowed if both objects are\n        in the primary/replica pool.\n        \"\"\"\n        db_set = {\"primary\", \"replica1\", \"replica2\"}\n        if obj1._state.db in db_set and obj2._state.db in db_set:\n            return True\n        return None\n\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        \"\"\"\n        All non-auth models end up in this pool.\n        \"\"\"\n        return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Test-Level Deprecation Warning Ignore in Python\nDESCRIPTION: Shows how to ignore deprecation warnings for a specific test using the ignore_warnings decorator.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.test import ignore_warnings\nfrom django.utils.deprecation import RemovedInDjangoXXWarning\n\n@ignore_warnings(category=RemovedInDjangoXXWarning)\ndef test_foo(self): ...\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Primary Key in Django Model\nDESCRIPTION: Example showing how to use UUIDField as a primary key in a Django model with auto-generation using uuid4.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom django.db import models\n\n\nclass MyUUIDModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # other fields\n```\n\n----------------------------------------\n\nTITLE: Removing BaseDatabaseOperations.field_cast_sql Method (Python)\nDESCRIPTION: The `BaseDatabaseOperations.field_cast_sql()` method, used by database backend implementations and deprecated earlier, is removed in Django 6.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nBaseDatabaseOperations.field_cast_sql()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Model Fields\nDESCRIPTION: Code reference to Django's DateField and DateTimeField types mentioned in the context of a MySQL query parameter bug fix.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDateField, DateTimeField\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Field Names\nDESCRIPTION: Shows how to access the name attribute of BoundField instances in a form.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_37\n\nLANGUAGE: pycon\nCODE:\n```\n>>> f = ContactForm()\n>>> print(f[\"subject\"].name)\nsubject\n>>> print(f[\"message\"].name)\nmessage\n```\n\n----------------------------------------\n\nTITLE: Modifying PostgreSQL User Role Privileges\nDESCRIPTION: SQL command to modify an existing user's role to allow database creation without superuser or role creation privileges.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_2\n\nLANGUAGE: psql\nCODE:\n```\npostgres# ALTER ROLE <user_name> CREATEDB NOSUPERUSER NOCREATEROLE;\n```\n\n----------------------------------------\n\nTITLE: Default Value Change of RedirectView.permanent Attribute - reStructuredText\nDESCRIPTION: This note informs developers that the default value of the attribute \"RedirectView.permanent\" (from django.views.generic.base) will change from True to False in Django 1.9. Applications relying on the previous default should specify the attribute explicitly to avoid changes in behavior after upgrading Django.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_8\n\nLANGUAGE: reStructuredText\nCODE:\n```\nDefault value of ``RedirectView.permanent``\n-------------------------------------------\n\nThe default value of the\n:attr:`RedirectView.permanent <django.views.generic.base.RedirectView.permanent>`\nattribute will change from ``True`` to ``False`` in Django 1.9.\n```\n\n----------------------------------------\n\nTITLE: Setting Name for Class-based Model Indexes in Python\nDESCRIPTION: Fixed model initialization to set the name of class-based model indexes for models that only inherit models.Model.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass MyModel(models.Model):\n    class Meta:\n        indexes = [models.Index(fields=['field_name'])]\n```\n\n----------------------------------------\n\nTITLE: Using Custom JSON Encoder with Django Serializer\nDESCRIPTION: Shows how to use a custom JSON encoder (LazyEncoder) with Django's serialization function to serialize model instances.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.serializers import serialize\n\nserialize(\"json\", SomeModel.objects.all(), cls=LazyEncoder)\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Contact Form in Django\nDESCRIPTION: Example of an HTML template for rendering a contact form in Django, including CSRF token and form fields.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-editing.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{% csrf_token %}\n    {{ form.as_p }}\n    <input type=\"submit\" value=\"Send message\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Configuration in Django Settings\nDESCRIPTION: Demonstrates the basic LOGGING dictionary configuration in settings.py with version and existing loggers retention.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/logging.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    \"version\": 1,  # the dictConfig format version\n    \"disable_existing_loggers\": False,  # retain the default loggers\n}\n```\n\n----------------------------------------\n\nTITLE: Using urlize() Function Reference\nDESCRIPTION: Reference to django.utils.html.urlize() function that was vulnerable to DoS attacks due to regex backtracking issues. The function is used by urlize and urlizetrunc template filters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.html.urlize()\n```\n\n----------------------------------------\n\nTITLE: Fixing SQL Injection in QuerySet.explain() for PostgreSQL (Python/Django)\nDESCRIPTION: Addresses CVE-2022-28347, fixing a potential SQL injection vulnerability in the QuerySet.explain() method when using dictionary expansion for options on PostgreSQL.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.13.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.explain(**options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Django Shortcut Function in Python\nDESCRIPTION: This snippet adds the 'make_toast()' function to Django's shortcuts module. The function simply returns the string 'toast'.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef make_toast():\n    return \"toast\"\n```\n\n----------------------------------------\n\nTITLE: Altering IP Address Field in Oracle for Django Comments App\nDESCRIPTION: SQL query to alter the IP address column in the DJANGO_COMMENTS table for Oracle databases to support IPv6 addresses, changing it to use VARCHAR2(39).\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE DJANGO_COMMENTS MODIFY (ip_address VARCHAR2(39));\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Related Django ORM Objects in Templates\nDESCRIPTION: Shows how to iterate over related objects in a Django template using the ORM's reverse foreign key accessor (e.g., `task.comment_set.all`). This allows accessing and looping through all related `Comment` objects associated with a `Task` object (`task`) directly within the template.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_25\n\nLANGUAGE: html+django\nCODE:\n```\n{% for comment in task.comment_set.all %}\n    {{ comment }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Querying Strict Above Spatial Relationship in PostGIS\nDESCRIPTION: Example of using the 'strictly_above' lookup to find geometries whose bounding box is strictly above a given geometry's bounding box in PostGIS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__strictly_above=geom)\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Feed with Custom Media Attribute Stylesheet\nDESCRIPTION: This snippet demonstrates how to use the Stylesheet class to set a custom media attribute (like 'print' instead of the default 'screen') for a feed stylesheet.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.syndication.views import Feed\nfrom django.utils.feedgenerator import Stylesheet\n\n\nclass FeedWithHardcodedStylesheet(Feed):\n    stylesheets = [\n        Stylesheet(\"https://example.com/rss_stylesheet.xslt\", media=\"print\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using Template Engines Directly\nDESCRIPTION: Example of accessing and using a configured template engine directly.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.template import engines\n\ndjango_engine = engines[\"django\"]\ntemplate = django_engine.from_string(\"Hello {{ name }}!\")\n```\n\n----------------------------------------\n\nTITLE: Incrementally Adding Content to HttpResponse in Python\nDESCRIPTION: Demonstrates how to use an HttpResponse object as a file-like object to add content incrementally.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/request-response.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> response = HttpResponse()\n>>> response.write(\"<p>Here's the text of the web page.</p>\")\n>>> response.write(\"<p>Here's another paragraph.</p>\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Formset HTML with Ordering\nDESCRIPTION: Example of HTML output for a Django formset with ordering capability. Shows how the ORDER field is added to each form in the formset.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/formsets.txt#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div><label for=\"id_form-0-pub_date\">Pub date:</label><input type=\"text\" name=\"form-0-pub_date\" value=\"2008-05-10\" id=\"id_form-0-pub_date\"></div>\n<div><label for=\"id_form-0-ORDER\">Order:</label><input type=\"number\" name=\"form-0-ORDER\" value=\"1\" id=\"id_form-0-ORDER\"></div>\n<div><label for=\"id_form-1-title\">Title:</label><input type=\"text\" name=\"form-1-title\" value=\"Article #2\" id=\"id_form-1-title\"></div>\n<div><label for=\"id_form-1-pub_date\">Pub date:</label><input type=\"text\" name=\"form-1-pub_date\" value=\"2008-05-11\" id=\"id_form-1-pub_date\"></div>\n<div><label for=\"id_form-1-ORDER\">Order:</label><input type=\"number\" name=\"form-1-ORDER\" value=\"2\" id=\"id_form-1-ORDER\"></div>\n<div><label for=\"id_form-2-title\">Title:</label><input type=\"text\" name=\"form-2-title\" id=\"id_form-2-title\"></div>\n<div><label for=\"id_form-2-pub_date\">Pub date:</label><input type=\"text\" name=\"form-2-pub_date\" id=\"id_form-2-pub_date\"></div>\n<div><label for=\"id_form-2-ORDER\">Order:</label><input type=\"number\" name=\"form-2-ORDER\" id=\"id_form-2-ORDER\"></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecation Warnings in Python\nDESCRIPTION: Demonstrates how to write a test that verifies deprecation warnings are properly raised with the correct message.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/submitting-patches.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils.deprecation import RemovedInDjangoXXWarning\n\ndef test_foo_deprecation_warning(self):\n    msg = \"Expected deprecation message\"\n    with self.assertWarnsMessage(RemovedInDjangoXXWarning, msg) as ctx:\n        # invoke deprecated behavior\n        ...\n    self.assertEqual(ctx.filename, __file__)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databases with Empty Default in Django\nDESCRIPTION: Example settings.py configuration with an intentionally empty default database and two non-default MySQL databases. This approach requires setting up DATABASE_ROUTERS to handle all queries and explicitly specifying the database for migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/multi-db.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {},\n    \"users\": {\n        \"NAME\": \"user_data\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"superS3cret\",\n    },\n    \"customers\": {\n        \"NAME\": \"customer_data\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_cust\",\n        \"PASSWORD\": \"veryPriv@ate\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Admin ForeignKeyRawIdWidget Security Fix\nDESCRIPTION: Implementation of proper URL encoding for query parameters in the admin ForeignKeyRawIdWidget to prevent XSS attacks\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nForeignKeyRawIdWidget\n```\n\n----------------------------------------\n\nTITLE: Django Language Code Setting Reference\nDESCRIPTION: Reference to the LANGUAGE_CODE setting in Django configuration that now allows sublanguages when base language is available.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.3.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLANGUAGE_CODE\n```\n\n----------------------------------------\n\nTITLE: Using Right Function in Django ORM\nDESCRIPTION: Example of extracting rightmost characters from a text field\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Right\n>>> Author.objects.create(name=\"Margaret Smith\")\n>>> author = Author.objects.annotate(last_letter=Right(\"name\", 1)).get()\n>>> print(author.last_letter)\nh\n```\n\n----------------------------------------\n\nTITLE: Translating string literals in tags and filters in Django templates\nDESCRIPTION: Shows how to translate string literals passed as arguments to tags and filters using the _() syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_28\n\nLANGUAGE: html+django\nCODE:\n```\n{% some_tag _(\"Page not found\") value|yesno:_(\"yes,no\") %}\n```\n\n----------------------------------------\n\nTITLE: Customizing AuthenticationForm in Python\nDESCRIPTION: Example of subclassing AuthenticationForm to allow all users to log in regardless of 'active' status.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/default.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.forms import AuthenticationForm\n\n\nclass AuthenticationFormWithInactiveUsersOkay(AuthenticationForm):\n    def confirm_login_allowed(self, user):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Django Test Client with Custom Headers - Python\nDESCRIPTION: Shows how to make requests with custom headers using Django's test client.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Client()\n>>> c.get(\n...     \"/customers/details/\",\n...     query_params={\"name\": \"fred\", \"age\": 7},\n...     headers={\"accept\": \"application/json\"},\n... )\n```\n\n----------------------------------------\n\nTITLE: Translation with Variables in Django\nDESCRIPTION: Shows how to use translation with variables in Django. The variable containing the translatable string is passed to the translation function.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef my_view(request):\n    sentence = \"Welcome to my site.\"\n    output = _(sentence)\n    return HttpResponse(output)\n```\n\n----------------------------------------\n\nTITLE: Archive Index Template Example\nDESCRIPTION: Django template for displaying the archive index of articles with publication dates.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    {% for article in latest %}\n        <li>{{ article.pub_date }}: {{ article.title }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: QuerySet Values and Values List Methods\nDESCRIPTION: Fixed QuerySet.values() and values_list() methods when used with aggregation and subquery annotations\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nQuerySet.values()\nQuerySet.values_list()\n```\n\n----------------------------------------\n\nTITLE: Accessing Forward M2M Related Objects in Django (pycon)\nDESCRIPTION: Retrieves all related `Publication` objects associated with specific `Article` instances (`a1`, `a2`) using the `all()` method on the `ManyToManyField` manager (`publications`). This demonstrates accessing the 'forward' relationship.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a1.publications.all()\n<QuerySet [<Publication: The Python Journal>]>\n>>> a2.publications.all()\n<QuerySet [<Publication: Highlights for Children>, <Publication: Science News>, <Publication: Science Weekly>, <Publication: The Python Journal>]>\n```\n\n----------------------------------------\n\nTITLE: Running Django JavaScript Tests via Command Line\nDESCRIPTION: Command to execute all JavaScript tests for Django from the command line using npm. This requires Node.js and the dependencies to be installed first.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/javascript.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Referencing Django FileField Documentation Link\nDESCRIPTION: Code reference showing the path to FileField upload_to attribute documentation in Django's model API.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.23.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.FileField.upload_to\n```\n\n----------------------------------------\n\nTITLE: Building and Installing GDAL\nDESCRIPTION: Commands to build and install GDAL from source using CMake.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ cd gdal-X.Y.Z\n$ mkdir build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ sudo cmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Message Level in Django\nDESCRIPTION: Demonstrates how to get the current message level using the get_level method from the messages framework.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/messages.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import messages\n\ncurrent_level = messages.get_level(request)\n```\n\n----------------------------------------\n\nTITLE: Running Django Test Coverage Commands\nDESCRIPTION: Console commands for running test coverage analysis on Django test suite using coverage tool with sqlite settings.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ coverage run ./runtests.py --settings=test_sqlite\n$ coverage combine\n$ coverage html\n```\n\n----------------------------------------\n\nTITLE: SQL Representation of OR Combination (SQL)\nDESCRIPTION: Provides the SQL equivalent for combining query conditions using the OR operator. Filters rows where either x=1 or y=2.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_63\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE x=1 OR y=2\n```\n\n----------------------------------------\n\nTITLE: Incorrect Template Load and Extends Ordering\nDESCRIPTION: Demonstrates an incorrect Django template pattern where load tags precede extends tags. This is presented as an anti-pattern to avoid when writing Django templates.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_4\n\nLANGUAGE: html+django\nCODE:\n```\n{% load i18n %}\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h1 class=\"font-semibold text-xl\">\n    {{ pages.title }}\n  </h1>\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Creating New Stable Branch\nDESCRIPTION: Commands for creating a new stable branch from main for a feature release\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b stable/5.2.x upstream/main\n$ git push upstream -u stable/5.2.x:stable/5.2.x\n```\n\n----------------------------------------\n\nTITLE: Default HTML Structure for CheckboxSelectMultiple\nDESCRIPTION: Illustrates the default HTML structure generated by the Django CheckboxSelectMultiple widget. It typically renders an outer div containing multiple inner divs, each wrapping one checkbox input element.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div><input type=\"checkbox\" name=\"...\" ></div>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Django Deprecation Warning Example\nDESCRIPTION: Example of a Django deprecation warning class used when features are marked for removal in future versions.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRemovedInDjango51Warning\n```\n\n----------------------------------------\n\nTITLE: Running migrate and Displaying Stack Trace - Console\nDESCRIPTION: This console command executes django-admin migrate with the --traceback option, instructing Django to display a full stack trace when a CommandError is raised. This feature aids in debugging command failures by providing complete error context. No additional dependencies are required.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_30\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin migrate --traceback\n```\n\n----------------------------------------\n\nTITLE: Marking Middleware as Synchronous-Only\nDESCRIPTION: A decorator that marks middleware as synchronous-only, which is the default in Django but allows future-proofing if the default changes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsync_only_middleware(middleware)\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Values in Django Views\nDESCRIPTION: Example of retrieving a value from the session dictionary using the __getitem__ method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfav_color = request.session['fav_color']\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Session Values (Sync)\nDESCRIPTION: Example of updating multiple session values at once using the update method with a dictionary.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrequest.session.update({'fav_color': 'red'})\n```\n\n----------------------------------------\n\nTITLE: Using Field Lookups in Meta.ordering\nDESCRIPTION: Restored functionality to use field lookups in Meta.ordering that was regressed in Django 3.0\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMeta.ordering\n```\n\n----------------------------------------\n\nTITLE: Closing Cache Connection in Django\nDESCRIPTION: Shows how to close the connection to the cache using the close() method, if implemented by the cache backend.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_34\n\nLANGUAGE: pycon\nCODE:\n```\n>>> cache.close()\n```\n\n----------------------------------------\n\nTITLE: DatetimeField Range Filtering Limitation - SQL Example\nDESCRIPTION: Demonstrates the limitation when filtering datetime fields with date-only boundaries. Results include data only up to midnight of the final day. Inputs are timestamp strings; output includes records from the exact start to 00:00:00 of the end date, excluding later times on that day. Ensure date and datetime types are not mixed to avoid incomplete ranges.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_102\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE pub_date BETWEEN '2005-01-01 00:00:00' and '2005-03-31 00:00:00';\n```\n\n----------------------------------------\n\nTITLE: Configuring Flatpages Catchall URL Pattern in Django\nDESCRIPTION: Shows how to set up a catchall URL pattern for flatpages. This allows any URL to potentially match a flatpage, with the pattern placed at the end of the URLconf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib.flatpages import views\n\n# Your other patterns here\nurlpatterns += [\n    re_path(r\"^(?P<url>.*/)$\", views.flatpage),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Path on macOS\nDESCRIPTION: Modifies PATH environment variable to use the custom Python installation on macOS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=/Library/Frameworks/Python.framework/Versions/Current/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Basic Django Template Extension\nDESCRIPTION: Example of using the extends template tag with a constant value.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_9\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends \"base.html\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing Binutils on RedHat/CentOS\nDESCRIPTION: Installs the binutils package required for library discovery on RedHat-based systems.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum install binutils\n```\n\n----------------------------------------\n\nTITLE: Preventing Paginator's Unordered Object List Warning in Python\nDESCRIPTION: Prevented Paginator's unordered object list warning from evaluating a QuerySet.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nPaginator(queryset, per_page=10)\n```\n\n----------------------------------------\n\nTITLE: Django Release Candidate Format\nDESCRIPTION: Shows the format for alpha, beta, and release candidate versions of Django releases.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/release-process.txt#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n``A.B alpha/beta/rc N``\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vulnerable Host Header in Django 1.3.3 and 1.4.1\nDESCRIPTION: This code snippet shows an example of a Host header that would be incorrectly accepted by Django versions 1.3.3 and 1.4.1 when running on validsite.com. It demonstrates how an attacker could inject arbitrary information into the Host header.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHost: validsite.com:random@evilsite.com\n```\n\n----------------------------------------\n\nTITLE: Mapping OGR Data Sources in Django\nDESCRIPTION: The mapping function is used to create a mapping of OGR data sources. It takes a data_source as a required parameter, with optional parameters for geometry name, layer key, and multi-geometry support.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/ogrinspect.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmapping(data_source, geom_name='geom', layer_key=0, multi_geom=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Cache Table in Django\nDESCRIPTION: Command to create a database table for Django's database-cache system. The command creates tables in the correct format that Django's cache system expects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npython manage.py createcachetable\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPolygon Objects in Python using GEOS\nDESCRIPTION: Demonstrates how to instantiate MultiPolygon objects by passing Polygon objects as arguments or as a sequence.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_16\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1 = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))\n>>> p2 = Polygon(((1, 1), (1, 2), (2, 2), (1, 1)))\n>>> mp = MultiPolygon(p1, p2)\n>>> mp = MultiPolygon([p1, p2])\n```\n\n----------------------------------------\n\nTITLE: Using querystring Template Tag (Django Template Language)\nDESCRIPTION: The `querystring` template tag now consistently prefixes the output string with a '?' character. It also accepts multiple positional arguments which must be mapping types like `QueryDict` or `dict`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_12\n\nLANGUAGE: django\nCODE:\n```\n{% querystring %}\n```\n\n----------------------------------------\n\nTITLE: Installing Django with pip\nDESCRIPTION: Command to install Django using pip package manager within a virtual environment\nSOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install Django\n```\n\n----------------------------------------\n\nTITLE: MySQL SQL Mode Query\nDESCRIPTION: SQL query that was causing validation crashes in MySQL database integration\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT @@sql_mode\n```\n\n----------------------------------------\n\nTITLE: Data Deserialization\nDESCRIPTION: Example of deserializing data and handling deserialized objects.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/serialization.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor deserialized_object in serializers.deserialize(\"xml\", data):\n    if object_should_be_saved(deserialized_object):\n        deserialized_object.save()\n```\n\n----------------------------------------\n\nTITLE: Configuring Feed URLs with Patterns in Django URLconf - Python\nDESCRIPTION: Demonstrates use of the \"patterns\" function in Django URLconf to define routes for feeds using both the legacy \"feed\" view and the new Feed class approach. Shows inclusion of parameters in URL regex patterns, providing routing context for dynamic feed generation. This requires Django settings, functional endpoints or Feed class instantiations, and appropriate import of pattern helpers. Expects URL patterns as input and returns a tuple or other routing object usable by Django's URL resolver.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n(\n    r\"^feeds/(?P<url>.*)/$\",\n    \"django.contrib.syndication.views.feed\",\n    {\"feed_dict\": feeds},\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\nfrom myproject.feeds import LatestEntries, LatestEntriesByCategory\n\nurlpatterns = patterns(\n    \"\",\n    # ...\n    (r\"^feeds/latest/$\", LatestEntries()),\n    (r\"^feeds/categories/(?P<category_id>\\\\d+)/$\", LatestEntriesByCategory()),\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Model Relationships with default_related_name\nDESCRIPTION: Example demonstrating model relationships with default_related_name setting and proper query lookup usage.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Foo(models.Model):\n    pass\n\n\nclass Bar(models.Model):\n    foo = models.ForeignKey(Foo)\n\n    class Meta:\n        default_related_name = \"bars\"\n```\n\n----------------------------------------\n\nTITLE: Fixing FieldListFilter.get_queryset() Crash in Python\nDESCRIPTION: Fixed admin's FieldListFilter.get_queryset() crash on invalid input.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nFieldListFilter.get_queryset()\n```\n\n----------------------------------------\n\nTITLE: Accessing the Numeric Code of an OGRGeomType in Python\nDESCRIPTION: Illustrates obtaining the integer code (e.g., 3 for Polygon) associated with an `OGRGeomType` object (`gt1`) using the `.num` attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_27\n\nLANGUAGE: pycon\nCODE:\n```\n>>> gt1.num\n3\n```\n\n----------------------------------------\n\nTITLE: Exists Annotation in QuerySets\nDESCRIPTION: Fixed functionality of Exists() annotation when used with QuerySet aggregations on Oracle database\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nExists()\n```\n\n----------------------------------------\n\nTITLE: Comparing Django Model Instances with `__eq__` (Python)\nDESCRIPTION: Illustrates the behavior of the `__eq__` method for Django model instances. It defines sample models (`MyModel`, `MyProxyModel`, `MultitableInherited`) and demonstrates equality checks based on primary key values and model types (including proxy and multi-table inheritance). Instances with the same primary key and concrete class are considered equal, except when the primary key is `None`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass MyModel(models.Model):\n    id = models.AutoField(primary_key=True)\n\n\nclass MyProxyModel(MyModel):\n    class Meta:\n        proxy = True\n\n\nclass MultitableInherited(MyModel):\n    pass\n\n\n# Primary keys compared\nMyModel(id=1) == MyModel(id=1)\nMyModel(id=1) != MyModel(id=2)\n# Primary keys are None\nMyModel(id=None) != MyModel(id=None)\n# Same instance\ninstance = MyModel(id=None)\ninstance == instance\n# Proxy model\nMyModel(id=1) == MyProxyModel(id=1)\n# Multi-table inheritance\nMyModel(id=1) != MultitableInherited(id=1)\n```\n\n----------------------------------------\n\nTITLE: Updating File Name Generation in Django Storage\nDESCRIPTION: This snippet demonstrates the change in file name generation algorithm to prevent denial-of-service attacks. The new method appends an underscore and a random alphanumeric string instead of incrementing numbers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.14.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nStorage.get_available_name()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Generated ModelForm Fields for Composite Key Model - Pycon\nDESCRIPTION: Demonstrates that a ModelForm for a model with a composite primary key will not include the pk field, confirming its exclusion. Executed in the Django shell, reporting form state and included fields. Input: instantiation of form; output: representation showing which fields are present.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_9\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OrderLineItemForm()\n<OrderLineItemForm bound=False, valid=Unknown, fields=(product;order;quantity)>\n```\n\n----------------------------------------\n\nTITLE: Potential SQL Injection via Unsanitized QuerySet.order_by() Input\nDESCRIPTION: A security vulnerability (CVE-2021-35042) where unsanitized user input to QuerySet.order_by() could lead to SQL injection. This issue affected the deprecated path for column reference validation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.5.txt#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nQuerySet.order_by()\n```\n\n----------------------------------------\n\nTITLE: Proper Block Tag Naming in Django Templates\nDESCRIPTION: Demonstrates proper naming of blocks in Django templates where the block name is repeated in the endblock tag when they are not on the same line. This improves code readability.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n{% block header %}\n\n  Code goes here\n\n{% endblock header %}\n```\n\n----------------------------------------\n\nTITLE: Example SQL WHERE Clause for Admin Search Query - SQL\nDESCRIPTION: Provides sample SQL WHERE clause logic for a Django admin search box with multiple search fields and query words, demonstrating the use of ILIKE and icontains lookups. The first example matches if any search word appears in any designated field; the second shows phrase search with quoted phrases. Used as illustration for how Django admin search_fields are internally mapped to SQL. Output is for reference only and not intended to be executed directly.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nWHERE (first_name ILIKE '%john%' OR last_name ILIKE '%john%')\nAND (first_name ILIKE '%lennon%' OR last_name ILIKE '%lennon%')\n```\n\nLANGUAGE: sql\nCODE:\n```\nWHERE (first_name ILIKE '%john winston%' OR last_name ILIKE '%john winston%')\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySets with Composite Primary Keys - Pycon\nDESCRIPTION: Shows how to filter Django QuerySets using a composite pk tuple. Demonstrates counting rows where the composite primary key matches provided values. Depends on models having been set up with composite primary keys. Input: tuple to filter; output: count of matching records.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_3\n\nLANGUAGE: pycon\nCODE:\n```\n>>> OrderLineItem.objects.filter(pk=(1, \"A755H\")).count()\n1\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Unescaped HTML in Django String Literals\nDESCRIPTION: Shows an incorrect example of using an unescaped '<' character within a string literal filter argument in Django. This is flagged as bad practice because string literals are not automatically escaped, which could lead to incorrect rendering or cross-site scripting (XSS) vulnerabilities if the literal contained user-controlled data mistakenly thought to be safe.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/language.txt#2025-04-23_snippet_24\n\nLANGUAGE: html+django\nCODE:\n```\n{{ data|default:\"3 < 2\" }}  {# Bad! Don't do this. #}\n```\n\n----------------------------------------\n\nTITLE: Customizing Admin Password Change Form (Python)\nDESCRIPTION: The `AdminSite.password_change_form` attribute allows customization of the form used in the admin site's password change view. This provides flexibility in tailoring the user experience for password changes within the Django admin interface.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.AdminSite.password_change_form\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Databases in Django\nDESCRIPTION: The setup_databases function creates test databases. It takes arguments for parallelism, keepdb flag, and serialized aliases. It returns a configuration for database changes.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsetup_databases(verbosity=1, interactive=True, *, parallel=0, keepdb=False, aliases=None, serialized_aliases=None)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Positional Arguments for Django Form Fields\nDESCRIPTION: Example of incorrect form field initialization (`forms.IntegerField(25, 10)`) using positional arguments for optional parameters like `max_value` and `min_value`. Django 2.0 prohibits this to prevent runtime errors arising from incorrect argument ordering and requires keyword arguments for clarity.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nforms.IntegerField(25, 10)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Model Tablespace in Django\nDESCRIPTION: Specifies the default tablespace (empty string, meaning database default) for models without a specific tablespace, applicable only if the database backend supports tablespaces.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_TABLESPACE = ''\n```\n\n----------------------------------------\n\nTITLE: Using distance_gte Filter in GeoDjango\nDESCRIPTION: Example of using the distance_gte lookup to filter Zipcode objects where the distance from a geometry field to the lookup geometry is greater than or equal to the specified distance (5 meters).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__distance_gte=(geom, D(m=5)))\n```\n\n----------------------------------------\n\nTITLE: Setting Plural Verbose Name in Django Model Meta\nDESCRIPTION: Shows how to define a custom, human-readable plural name for a Django model using the `verbose_name_plural` attribute within its `Meta` class. If not provided, Django defaults to the `verbose_name` plus 's'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nverbose_name_plural = \"stories\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Django Repository and Running Tests with SQLite\nDESCRIPTION: This snippet demonstrates how to fork Django, clone your fork, install requirements, and run the test suite with the default SQLite settings. It covers the basic steps to get started with testing Django from a fresh repository clone.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/unit-tests.txt#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/YourGitHubName/django.git django-repo\n$ cd django-repo/tests\n$ python -m pip install -e ..\n$ python -m pip install -r requirements/py3.txt\n$ ./runtests.py\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Table Names with Quoted Identifiers in Django Models (Python)\nDESCRIPTION: Demonstrates using a quoted string for the `db_table` attribute within a model's `Meta` class. This prevents Django's default Oracle name transformations (truncation to 30 chars, uppercasing) and is useful when working with legacy database schemas or specific naming requirements.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass LegacyModel(models.Model):\n    class Meta:\n        db_table = '\"name_left_in_lowercase\"'\n```\n\n----------------------------------------\n\nTITLE: Using Quoted Table Names for Oracle in Django Model Meta (Python)\nDESCRIPTION: Demonstrates using a quoted string for the `db_table` option in Django Model Meta. This is necessary for Oracle databases to prevent Django from shortening the name or converting it to uppercase, ensuring the specified name (e.g., lowercase with special characters) is preserved.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndb_table = '\"name_left_in_lowercase\"'\n```\n\n----------------------------------------\n\nTITLE: Overriding Model.refresh_from_db to Load All Deferred Fields in Django (Python)\nDESCRIPTION: Demonstrates overriding the `refresh_from_db` method on a Django model (`ExampleModel`). The custom implementation checks if the `fields` argument (containing the field(s) to be reloaded) includes any deferred fields for the instance. If so, it modifies the `fields` set to include *all* deferred fields before calling the parent implementation via `super()`, effectively ensuring all deferred data is loaded at once when any single deferred field is accessed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/instances.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleModel(models.Model):\n    def refresh_from_db(self, using=None, fields=None, **kwargs):\n        # fields contains the name of the deferred field to be\n        # loaded.\n        if fields is not None:\n            fields = set(fields)\n            deferred_fields = self.get_deferred_fields()\n            # If any deferred field is going to be loaded\n            if fields.intersection(deferred_fields):\n                # then load all of them\n                fields = fields.union(deferred_fields)\n        super().refresh_from_db(using, fields, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Loading Templates with select_template()\nDESCRIPTION: Example of how Django searches for templates when using select_template(), based on the TEMPLATES configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/templates.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nselect_template(['story_253_detail.html', 'story_detail.html'])\n```\n\n----------------------------------------\n\nTITLE: Creating Django HTML Template\nDESCRIPTION: This snippet demonstrates how to create a Django HTML template that extends a base template and displays a list of articles for a specific year.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/overview.txt#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block title %}Articles for {{ year }}{% endblock %}\n\n{% block content %}\n<h1>Articles for {{ year }}</h1>\n\n{% for article in article_list %}\n    <p>{{ article.headline }}</p>\n    <p>By {{ article.reporter.full_name }}</p>\n    <p>Published {{ article.pub_date|date:\"F j, Y\" }}</p>\n{% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for a ticket\nDESCRIPTION: Creates a new branch based on the upstream main branch to work on a specific ticket. This isolates the work for the ticket.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b ticket_xxxxx upstream/main\n```\n\n----------------------------------------\n\nTITLE: Building Absolute URI in Django\nDESCRIPTION: Illustrates the method to build an absolute URI in Django. The security fix affects this method's behavior when determining the scheme (HTTP or HTTPS).\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.22.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHttpRequest.build_absolute_uri()\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Window Frame Clause - SQL\nDESCRIPTION: Displays the template for a window frame clause as output by Django ORM's ValueRange or RowRange classes. Used internally to compose SQL for window functions. The placeholders are replaced with frame type (ROWS/RANGE), the start expression, and the end expression. Not executable; serves as a pattern reference.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/expressions.txt#2025-04-23_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\n%(frame_type)s BETWEEN %(start)s AND %(end)s\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies via JavaScript\nDESCRIPTION: Refers to the JavaScript property used to set cookies in the browser. The Django 1.8.15 release notes mention that cookies set using this method, even if technically invalid according to RFC 6265, might now be included in Django's `request.COOKIES` due to parser changes aimed at mitigating a CSRF vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.15.txt#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.cookie\n```\n\n----------------------------------------\n\nTITLE: Proper Variable Interpolation in Django Templates\nDESCRIPTION: Shows the correct spacing for variable interpolation in Django templates with one space between braces and variable content. This demonstrates proper template variable syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{{ user }}\n```\n\n----------------------------------------\n\nTITLE: Using keep_lazy_text Decorator for Text-Returning Functions in Python\nDESCRIPTION: Shows how to use the keep_lazy_text decorator, which is a shortcut for keep_lazy(str), for functions that return text and need to handle lazy arguments.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.functional import keep_lazy, keep_lazy_text\n\n\n# Our previous example was:\n@keep_lazy(str)\ndef fancy_utility_function(s, *args, **kwargs): ...\n\n\n# Which can be rewritten as:\n@keep_lazy_text\ndef fancy_utility_function(s, *args, **kwargs): ...\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Override Example in Django\nDESCRIPTION: Demonstrates using translation.override() to temporarily set a language and get translated text using gettext\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/translation.txt#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nwith translation.override(language):\n    return translation.gettext(\"welcome\")\n```\n\n----------------------------------------\n\nTITLE: Force-pushing changes after rebase\nDESCRIPTION: Updates the remote branch with the rebased commits, overwriting the previous history. This is used for topic branches that have been reworked.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push -f origin ticket_xxxxx\n```\n\n----------------------------------------\n\nTITLE: Emulating XOR with CASE and MOD (SQL, portable approach)\nDESCRIPTION: Provides the portable SQL approach Django uses for databases that do not natively support XOR. It sums CASE expressions for each condition and checks if the sum is odd, matching rows where conditions are met an odd number of times.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_66\n\nLANGUAGE: sql\nCODE:\n```\n(x OR y OR ... OR z) AND\n1=MOD(\n    (CASE WHEN x THEN 1 ELSE 0 END) +\n    (CASE WHEN y THEN 1 ELSE 0 END) +\n    ...\n    (CASE WHEN z THEN 1 ELSE 0 END),\n    2\n)\n```\n\n----------------------------------------\n\nTITLE: Converting IRIs to URIs\nDESCRIPTION: Converts an Internationalized Resource Identifier (IRI) portion to a URI, handling internationalized characters for web protocols.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/utils.txt#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\niri_to_uri(iri)\n```\n\n----------------------------------------\n\nTITLE: Testing for Multipart Forms in Django\nDESCRIPTION: This snippet shows how to use the is_multipart() method to check if a form requires multipart encoding. It includes a Python example and a Django template example.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/api.txt#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n>>> f = ContactFormWithMugshot()\n>>> f.is_multipart()\nTrue\n```\n\nLANGUAGE: html\nCODE:\n```\n{% if form.is_multipart %}\n    <form enctype=\"multipart/form-data\" method=\"post\" action=\"/foo/\">\n{% else %}\n    <form method=\"post\" action=\"/foo/\">\n{% endif %}\n{{ form }}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Field Serialization Methods in Django\nDESCRIPTION: Methods for converting field values to and from string representations for serialization purposes.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\ndef value_from_object(self, obj):\n    return self.value\n\ndef value_to_string(self, obj):\n    # Convert object to string for serialization\n    return str(self.value_from_object(obj))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order of Related Objects in Django (Pycon)\nDESCRIPTION: Demonstrates using the `get_RELATED_order()` method (e.g., `get_answer_order()`) on a parent object (`question`) to retrieve the current order of related objects (`Answer`) as a list of their primary keys. This method is automatically added when `order_with_respect_to` is used.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/options.txt#2025-04-23_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> question = Question.objects.get(id=1)\n>>> question.get_answer_order()\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Referencing Django AuthenticationForm Class in Release Notes\nDESCRIPTION: Code reference to the Django authentication form class that had a security vulnerability in Django 1.11.8 where information could be leaked about users.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:class:`~django.contrib.auth.forms.AuthenticationForm`\n```\n\n----------------------------------------\n\nTITLE: Using Power Function in Django Models\nDESCRIPTION: Demonstrates using the Power function to raise one vector coordinate to the power of another\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/database-functions.txt#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.db.models.functions import Power\n>>> Vector.objects.create(x=2, y=-2)\n>>> vector = Vector.objects.annotate(power=Power(\"x\", \"y\")).get()\n>>> vector.power\n0.25\n```\n\n----------------------------------------\n\nTITLE: Referencing Django 404 Handler Function\nDESCRIPTION: Shows the Python path to Django's default 404 page handler that was affected by the security vulnerability. The function was updated to prevent content spoofing through malicious URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.18.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.views.defaults.page_not_found()\n```\n\n----------------------------------------\n\nTITLE: Comparing CurrentSiteManager Filtering with Manual Filtering in Python\nDESCRIPTION: Illustrates that using the `CurrentSiteManager` (`Photo.on_site.all()`) produces the same result as manually filtering the default manager by the `SITE_ID` setting (`Photo.objects.filter(site=settings.SITE_ID)`). Assumes the `Photo` model and `on_site` manager from the previous example and the `settings.SITE_ID` is configured.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/sites.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nPhoto.objects.filter(site=settings.SITE_ID)\nPhoto.on_site.all()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for makemigrations crash on _order field\nDESCRIPTION: This snippet references a Django ticket number for a regression that caused a crash of makemigrations on models without Meta.order_with_respect_to but with a field named _order in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33449`\n```\n\n----------------------------------------\n\nTITLE: Django SingleObjectTemplateResponseMixin Class Definition\nDESCRIPTION: Mixin class for template-based response rendering for single object views. Provides functionality for determining template names and handling template rendering.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/mixins-single-object.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SingleObjectTemplateResponseMixin(TemplateResponseMixin):\n    template_name_field = None\n    template_name_suffix = '_detail'\n```\n\n----------------------------------------\n\nTITLE: Dynamic Settings Assignment in Python\nDESCRIPTION: Demonstrates how to dynamically assign settings using Python list comprehension, creating a list of string representations of numbers.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/settings.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMY_SETTING = [str(i) for i in range(30)]\n```\n\n----------------------------------------\n\nTITLE: Importing Shapefile Data with LayerMapping in GeoDjango Python Script\nDESCRIPTION: Provides a Python script template for setting up a data import from a shapefile using GeoDjango's LayerMapping utility. The script defines a field mapping between the WorldBorder model and the shapefile, constructs an absolute path for the shapefile, and implements a run() function to perform the data import while optionally printing progress. Dependencies include Django, GeoDjango, the world.models.WorldBorder model, and GDAL. The mapping object and the transform parameter avoid unnecessary coordinate transformations. Inputs include a shapefile in WGS84; the output is population of the WorldBorder model in the database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom django.contrib.gis.utils import LayerMapping\nfrom .models import WorldBorder\n\nworld_mapping = {\n    \"fips\": \"FIPS\",\n    \"iso2\": \"ISO2\",\n    \"iso3\": \"ISO3\",\n    \"un\": \"UN\",\n    \"name\": \"NAME\",\n    \"area\": \"AREA\",\n    \"pop2005\": \"POP2005\",\n    \"region\": \"REGION\",\n    \"subregion\": \"SUBREGION\",\n    \"lon\": \"LON\",\n    \"lat\": \"LAT\",\n    \"mpoly\": \"MULTIPOLYGON\",\n}\n\nworld_shp = Path(__file__).resolve().parent / \"data\" / \"TM_WORLD_BORDERS-0.3.shp\"\n\n\ndef run(verbose=True):\n    lm = LayerMapping(WorldBorder, world_shp, world_mapping, transform=False)\n    lm.save(strict=True, verbose=verbose)\n```\n\n----------------------------------------\n\nTITLE: Advanced Raster Creation in GeoDjango\nDESCRIPTION: Shows creating raster models using GDALRaster objects with explicit parameter specifications including dimensions, scale, and band data.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/db-api.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.contrib.gis.gdal import GDALRaster\n>>> rast = GDALRaster({\n...     \"width\": 10,\n...     \"height\": 10,\n...     \"name\": \"Canyon\",\n...     \"srid\": 4326,\n...     \"scale\": [0.1, -0.1],\n...     \"bands\": [{\"data\": range(100)}],\n... })\n>>> dem = Elevation(name=\"Canyon\", rast=rast)\n>>> dem.save()\n```\n\n----------------------------------------\n\nTITLE: Using Django Statistical Regression Aggregates\nDESCRIPTION: Illustrates how to apply statistical aggregate functions in Django. It shows `RegrCount` calculating the count of pairs where both `y` ('field3') and `x` ('field2') are non-null, and `RegrAvgX`/`RegrAvgY` computing the average of the independent ('field2') and dependent ('field3') variables respectively.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_7\n\nLANGUAGE: pycon\nCODE:\n```\n>>> TestModel.objects.aggregate(count=RegrCount(y=\"field3\", x=\"field2\"))\n{'count': 2}\n>>> TestModel.objects.aggregate(\n...     avgx=RegrAvgX(y=\"field3\", x=\"field2\"), avgy=RegrAvgY(y=\"field3\", x=\"field2\")\n... )\n{'avgx': 2, 'avgy': 13}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django QuerySet Method in Release Notes\nDESCRIPTION: This snippet demonstrates how to reference a Django QuerySet method (filter()) in the release notes documentation.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n``QuerySet.filter()``\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for File Handling Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for the file handling documentation using the toctree directive. It sets the maximum depth to 2 and lists the submodules to be included.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/files/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   file\n   storage\n   uploads\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Django Management Command (Shell)\nDESCRIPTION: Shell command used to execute the Django test suite via the `manage.py` utility. The release notes mention a change in its exit status code: it now returns 0 for success and 1 for any failures, rather than the number of failed tests.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py test\n```\n\n----------------------------------------\n\nTITLE: Disabling Media Inheritance in Extended Widgets in Django\nDESCRIPTION: Shows how to prevent a widget from inheriting media assets from its parent by setting extend=False in its Media class.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/forms/media.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> class FancyCalendarWidget(CalendarWidget):\n...     class Media:\n...         extend = False\n...         css = {\n...             \"all\": [\"fancy.css\"],\n...         }\n...         js = [\"whizbang.js\"]\n...\n\n>>> w = FancyCalendarWidget()\n>>> print(w.media)\n<link href=\"https://static.example.com/fancy.css\" media=\"all\" rel=\"stylesheet\">\n<script src=\"https://static.example.com/whizbang.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Comment Manager for User Group Exclusion in Django\nDESCRIPTION: Code snippet demonstrating how to implement a custom comment manager to exclude comments from specific user groups after the removal of COMMENTS_BANNED_USERS_GROUP functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.contrib.comments.managers import CommentManager\n```\n\n----------------------------------------\n\nTITLE: Optimizing TransactionTestCase with available_apps in Django\nDESCRIPTION: This code demonstrates how to use the available_apps attribute in TransactionTestCase to optimize Django's test suite by limiting the models and applications used during testing.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/advanced.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass TransactionTestCase:\n    available_apps = None  # Set this to a list of applications to optimize\n```\n\n----------------------------------------\n\nTITLE: Custom Sentinel User for ForeignKey SET Operation\nDESCRIPTION: Implementation of a custom callable for SET operation on ForeignKey deletion, creating a sentinel user when needed.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.db import models\n\n\ndef get_sentinel_user():\n    return get_user_model().objects.get_or_create(username=\"deleted\")[0]\n\n\nclass MyModel(models.Model):\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.SET(get_sentinel_user),\n    )\n```\n\n----------------------------------------\n\nTITLE: Running ldconfig After Library Installation\nDESCRIPTION: Command to run ldconfig after installing each library on Linux platforms to update the shared library cache.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo make install\n$ sudo ldconfig\n```\n\n----------------------------------------\n\nTITLE: Importing Pathlib Module in Python\nDESCRIPTION: This snippet imports the pathlib module, which provides classes representing filesystem paths with semantics appropriate for different operating systems. It allows for more intuitive and platform-independent path manipulations in Python.\nSOURCE: https://github.com/django/django/blob/main/tests/staticfiles_tests/project/pathlib/pathlib.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npathlib\n```\n\n----------------------------------------\n\nTITLE: Using week_day lookup in Django querysets\nDESCRIPTION: Shows how to use the new week_day lookup type for DateField and DateTimeField to filter objects based on the day of the week.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nModel.objects.filter(date_field__week_day=2)  # Monday\n```\n\n----------------------------------------\n\nTITLE: Deprecating URLIZE_ASSUME_HTTPS Transitional Setting (Python)\nDESCRIPTION: The `URLIZE_ASSUME_HTTPS` setting, which allows opting into HTTPS assumption for `urlize` filters during the 6.x cycle, is deprecated. It will be removed in Django 7.0 when HTTPS becomes the default scheme.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nURLIZE_ASSUME_HTTPS\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic Web Page Caching Logic (Pseudocode)\nDESCRIPTION: This pseudocode demonstrates the fundamental workflow of a web cache. It checks if a requested page exists in the cache; if found, it returns the cached version, otherwise, it generates the page, saves it to the cache for future requests, and then returns the generated page.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/cache.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngiven a URL, try finding that page in the cache\nif the page is in the cache:\n    return the cached page\nelse:\n    generate the page\n    save the generated page in the cache (for next time)\n    return the generated page\n```\n\n----------------------------------------\n\nTITLE: Accessing Django Session in Python\nDESCRIPTION: This snippet demonstrates the potential vulnerability in previous Django versions where accessing request.session could create an empty session record. This behavior has been fixed in version 1.4.21 to prevent potential DoS attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nrequest.session\n```\n\n----------------------------------------\n\nTITLE: Context Stack Operations in Django\nDESCRIPTION: Demonstrates Context stack operations using push and pop methods, including context manager usage.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Context()\n>>> c[\"foo\"] = \"first level\"\n>>> with c.push():\n...     c[\"foo\"] = \"second level\"\n...     c[\"foo\"]\n...\n'second level'\n>>> c[\"foo\"]\n'first level'\n```\n\n----------------------------------------\n\nTITLE: Creating Empty GEOS LineString Objects in Python\nDESCRIPTION: Illustrates two equivalent ways to instantiate an empty `LineString` object in Django's GEOS interface. An empty `LineString` can be created by calling the constructor without any arguments or by passing an empty sequence (like an empty list).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> ls = LineString()\n>>> ls = LineString([])\n```\n\n----------------------------------------\n\nTITLE: Loading Apache Authentication Modules\nDESCRIPTION: Apache configuration to load the required authentication modules. These modules (mod_auth_basic and mod_authz_user) are needed for basic authentication to work with Apache 2.2.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/apache-auth.txt#2025-04-23_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nLoadModule auth_basic_module modules/mod_auth_basic.so\nLoadModule authz_user_module modules/mod_authz_user.so\n```\n\n----------------------------------------\n\nTITLE: Manually emptying the test email outbox in Django\nDESCRIPTION: Example showing how to manually empty Django's test email outbox by assigning an empty list to mail.outbox.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/testing/tools.txt#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import mail\n\n# Empty the test outbox\nmail.outbox = []\n```\n\n----------------------------------------\n\nTITLE: Limiting Input Length in get_supported_language_variant() (Python)\nDESCRIPTION: The get_supported_language_variant() function was vulnerable to DoS attacks with long strings containing specific characters. It now limits input to 500 characters and raises ValueError for longer inputs depending on the 'strict' parameter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.14.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.translation.get_supported_language_variant()\n```\n\n----------------------------------------\n\nTITLE: Applying lower Filter in Django Templates\nDESCRIPTION: The lower filter converts a string into all lowercase characters.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_78\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|lower }}\n```\n\n----------------------------------------\n\nTITLE: Django File Storage Attribute Removal\nDESCRIPTION: Removal of OS_OPEN_FLAGS attribute from FileSystemStorage class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nOS_OPEN_FLAGS\n```\n\n----------------------------------------\n\nTITLE: Raising ValidationError on Empty Data in FormSet - Django Forms - Python (Pycon)\nDESCRIPTION: Shows the result of instantiating a Django FormSet with an empty dictionary, raising a ValidationError due to missing or tampered ManagementForm data. This behavior is new in Django 1.3 and increases consistency with form handling elsewhere in the framework. Intended for use in interactive Python environments, and requires previous creation of ArticleFormSet.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> ArticleFormSet({})\nTraceback (most recent call last):\n...\nValidationError: [u'ManagementForm data is missing or has been tampered with']\n```\n\n----------------------------------------\n\nTITLE: Setting Email File Path for File Backend in Django\nDESCRIPTION: Specifies the directory path where the file email backend should store output email files. This setting is only used when EMAIL_BACKEND is set to 'django.core.mail.backends.filebased.EmailBackend' and is not defined by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# EMAIL_FILE_PATH = '/path/to/email/output/' # Example, not set by default\n```\n\n----------------------------------------\n\nTITLE: Example of Import Organization in Django Files\nDESCRIPTION: Demonstrates the correct import organization pattern for Django files. Imports are grouped by category (future, standard library, third-party, Django, local Django, try/except) and sorted alphabetically within each group.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# future\nfrom __future__ import unicode_literals\n\n# standard library\nimport json\nfrom itertools import chain\n\n# third-party\nimport bcrypt\n\n# Django\nfrom django.http import Http404\nfrom django.http.response import (\n    Http404,\n    HttpResponse,\n    HttpResponseNotAllowed,\n    StreamingHttpResponse,\n    cookie,\n)\n\n# local Django\nfrom .models import LogEntry\n\n# try/except\ntry:\n    import yaml\nexcept ImportError:\n    yaml = None\n\nCONSTANT = \"foo\"\n\n\nclass Example: ...\n```\n\n----------------------------------------\n\nTITLE: Deprecating BaseDatabaseCreation.create_test_db Method (Python)\nDESCRIPTION: The `BaseDatabaseCreation.create_test_db(serialize)` method in the database backend API is deprecated in Django 6.0. Developers managing third-party database backends should migrate to using `serialize_db_to_string()` instead.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nBaseDatabaseCreation.create_test_db(serialize)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Library Path in Linux\nDESCRIPTION: Updates the system-wide library configuration to include /usr/local/lib and reloads the configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo echo /usr/local/lib >> /etc/ld.so.conf\n$ sudo ldconfig\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample Geospatial Data using Shell Commands\nDESCRIPTION: Shell commands to download sample geospatial data files (cities shapefile and raster image) from Django's test data repository.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/cities/cities.{shp,prj,shx,dbf}\n$ wget https://raw.githubusercontent.com/django/django/main/tests/gis_tests/data/rasters/raster.tif\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure for Django Getting Started Guide\nDESCRIPTION: ReStructuredText markup defining the table of contents and document structure for Django's getting started documentation, including tutorial sections and additional resources.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   overview\n   install\n   tutorial01\n   tutorial02\n   tutorial03\n   tutorial04\n   tutorial05\n   tutorial06\n   tutorial07\n   tutorial08\n   reusable-apps\n   whatsnext\n   contributing\n```\n\n----------------------------------------\n\nTITLE: Defining Required Fields in Custom User Model for Django\nDESCRIPTION: Example of defining REQUIRED_FIELDS in a custom user model, which specifies which fields will be prompted for when creating a superuser with the createsuperuser management command.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/customizing.txt#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MyUser(AbstractBaseUser):\n    ...\n    date_of_birth = models.DateField()\n    height = models.FloatField()\n    ...\n    REQUIRED_FIELDS = [\"date_of_birth\", \"height\"]\n```\n\n----------------------------------------\n\nTITLE: Django Constraint Configuration Change\nDESCRIPTION: Removal of check keyword argument from CheckConstraint class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nCheckConstraint\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple AdminSites in URLconf (Python)\nDESCRIPTION: This snippet shows how to configure multiple AdminSite instances with different URLs in the project's URLconf.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/index.txt#2025-04-23_snippet_82\n\nLANGUAGE: Python\nCODE:\n```\n# urls.py\nfrom django.urls import path\nfrom myproject.admin import advanced_site, basic_site\n\nurlpatterns = [\n    path(\"basic-admin/\", basic_site.urls),\n    path(\"advanced-admin/\", advanced_site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Template Filter with is_safe Attribute (Deprecated Style) - Django Templates - Python\nDESCRIPTION: This code example demonstrates the deprecated method of defining template filters in Django by assigning the is_safe attribute directly to the filter function after its definition. This approach was previously used to declare filters as safe but caused compatibility issues, especially when combined with decorators. Users should avoid this old style in new code.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@register.filter\ndef noop(value):\n    return value\n\nnoop.is_safe = True\n```\n\n----------------------------------------\n\nTITLE: Widget Empty Choice Selection Fix\nDESCRIPTION: Bug fix addressing incorrect initial empty choice selection behavior in SelectMultiple and CheckboxSelectMultiple widgets. Resolved regression introduced in Django 1.11.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.12.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSelectMultiple\nCheckboxSelectMultiple\n```\n\n----------------------------------------\n\nTITLE: Referencing Django static serve view function\nDESCRIPTION: A code reference to the Django view function for serving static files that contained the CVE-2017-7234 open redirect vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.18.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.views.static.serve\n```\n\n----------------------------------------\n\nTITLE: Fixed Database Field Subtraction Operations\nDESCRIPTION: Bug fix for database operations involving subtraction of DurationField or IntegerField from DateField on Oracle and PostgreSQL databases.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nDurationField\nIntegerField\nDateField\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Radio Button Rendering in Django\nDESCRIPTION: Shows the basic HTML structure of how radio buttons are rendered by Django's RadioSelect widget inside div tags.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/widgets.txt#2025-04-23_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div><input type=\"radio\" name=\"...\"></div>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Blocking Database Query Execution via Custom Wrapper in Django (Python)\nDESCRIPTION: This snippet defines a simple Python function that raises an Exception when called, thereby preventing any database query execution within its scope. It demonstrates a minimal wrapper—'blocker'—that can be installed with Django's connection.execute_wrapper to enforce a 'no database access' policy in sensitive blocks of code. No external dependencies beyond standard Python and Django's ORM connection object are required.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/instrumentation.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef blocker(*args):\n    raise Exception(\"No database access allowed here.\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Cookies in Django (Python)\nDESCRIPTION: Refers to the dictionary-like object in Django's request object where parsed cookies are stored. In version 1.8.15, its parser was simplified to better match browser behavior and handle potentially invalid cookies (per RFC 6265) set via JavaScript's `document.cookie`, mitigating a CSRF bypass vulnerability.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.15.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest.COOKIES\n```\n\n----------------------------------------\n\nTITLE: Configuring max_allowed_packet in MySQL Configuration - INI\nDESCRIPTION: This code snippet shows how to set the max_allowed_packet option in MySQL's configuration file (my.cnf) under the [mysqld] section. The setting increases the allowed packet size to 10 megabytes, which may be necessary for applications handling large queries or data transfers. To apply the change, you must add this line to the [mysqld] section of my.cnf and restart the MySQL server. The parameter value can be adjusted as needed, and no dependencies are required beyond access to the configuration file and server restart capabilities.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/layermapping.txt#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n\n    max_allowed_packet = 10M\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Oracle Connection Pooling in Django Settings (Python)\nDESCRIPTION: Demonstrates customizing Oracle connection pool parameters (like minimum and maximum connections) by providing a dictionary to the `pool` key within the `OPTIONS` section of the database settings. These parameters are passed to the `oracledb` driver's `create_pool()` function. Requires Django 5.2+ and `oracledb`.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.oracle\",\n        # ...\n        \"OPTIONS\": {\n            \"pool\": {\n                \"min\": 1,\n                \"max\": 10,\n                # ...\n            }\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Supported: ForeignKey to Composite Key Model - Python\nDESCRIPTION: This example demonstrates an unsupported use case in Django: defining a ForeignKey to a model with a composite primary key. The code defines a model Foo where the ForeignKey (item) references OrderLineItem, which is not allowed with composite primary keys. Django will raise an error if attempted. Provided for explanatory purposes only; not functional with current Django versions.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Foo(models.Model):\n    item = models.ForeignKey(OrderLineItem, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Using MakeLine Aggregation in GeoDjango\nDESCRIPTION: Example of using the MakeLine aggregate function to create a LineString from city polygons filtered by name.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> qs = City.objects.filter(name__in=(\"Houston\", \"Dallas\")).aggregate(MakeLine(\"poly\"))\n>>> print(qs[\"poly__makeline\"])\nLINESTRING (-95.3631510000000020 29.7633739999999989, -96.8016109999999941 32.7820570000000018)\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Geometries for Faster Spatial Operations in Python\nDESCRIPTION: Demonstrates how to use prepared geometries to perform faster spatial operations, such as containment checks.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_18\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import Point, Polygon\n>>> poly = Polygon.from_bbox((0, 0, 5, 5))\n>>> prep_poly = poly.prepared\n>>> prep_poly.contains(Point(2.5, 2.5))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Estimating Memory Usage for scrypt Password Hasher\nDESCRIPTION: This formula calculates the minimum memory requirement for the scrypt password hashing algorithm based on work_factor and block_size parameters.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/auth/passwords.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwork_factor * 2 * block_size * 64\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Objects from Files in Python using GEOS\nDESCRIPTION: Shows how to create a GEOSGeometry object from a file containing spatial data using the fromfile function.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geos.txt#2025-04-23_snippet_19\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from django.contrib.gis.geos import fromfile\n>>> g = fromfile(\"/home/bob/geom.wkt\")\n```\n\n----------------------------------------\n\nTITLE: Formatting Release Notes Header in reStructuredText\nDESCRIPTION: This snippet demonstrates how to format a header and subheader for release notes using reStructuredText syntax. It includes the version number and underlines for emphasis.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n==========================\nDjango 1.2.7 release notes\n==========================\n```\n\n----------------------------------------\n\nTITLE: Validating Host Headers and Handling Exceptions (Django/Python)\nDESCRIPTION: Explains that calling the `request.get_host()` method triggers validation against the `ALLOWED_HOSTS` setting. If the request's Host header is not found in the allowed list, Django raises a `SuspiciousOperation` exception, preventing the application from processing requests with potentially malicious Host headers.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrequest.get_host()\n```\n\nLANGUAGE: python\nCODE:\n```\nSuspiciousOperation\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Values in Django Views\nDESCRIPTION: Example of removing a key-value pair from the session dictionary using the __delitem__ method.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndel request.session['fav_color']\n```\n\n----------------------------------------\n\nTITLE: Displaying Flatpages Using get_flatpages Template Tag in Django HTML\nDESCRIPTION: This snippet demonstrates how to use the get_flatpages template tag to retrieve and display a list of flatpages in a Django template. It loads the flatpages tag library, retrieves all flatpages, and iterates over them to create a list of links.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% load flatpages %}\n{% get_flatpages as flatpages %}\n<ul>\n    {% for page in flatpages %}\n        <li><a href=\"{{ page.url }}\">{{ page.title }}</a></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Legacy 404 Ignore Settings\nDESCRIPTION: Example of default legacy settings for ignoring certain 404 errors in Django pre-1.4\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nIGNORABLE_404_STARTS = (\"/cgi-bin/\", \"/_vti_bin\", \"/_vti_inf\")\nIGNORABLE_404_ENDS = (\n    \"mail.pl\",\n    \"mailform.pl\",\n    \"mail.cgi\",\n    \"mailform.cgi\",\n    \"favicon.ico\",\n    \".php\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using ordinal Filter in Django Template\nDESCRIPTION: Shows how the ordinal filter converts integers to their ordinal representation as a string.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/humanize.txt#2025-04-23_snippet_6\n\nLANGUAGE: django\nCODE:\n```\n{{ 1|ordinal }} becomes 1st.\n{{ 2|ordinal }} becomes 2nd.\n{{ 3|ordinal }} becomes 3rd.\n```\n\n----------------------------------------\n\nTITLE: Exploiting SSI Directory Traversal Vulnerability (Django Template)\nDESCRIPTION: Demonstrates a directory traversal vulnerability using the `ssi` template tag in Django versions prior to 1.4.7. This example shows how a relative path, crafted to start with an allowed root specified in `ALLOWED_INCLUDE_ROOTS` (e.g., \"/var/www\"), could potentially be used to access unintended files outside that root, such as `/etc/passwd`. This vulnerability required the path argument to `ssi` to be influenced by user input.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.7.txt#2025-04-23_snippet_0\n\nLANGUAGE: html+django\nCODE:\n```\n{% ssi \"/var/www/../../etc/passwd\" %}\n```\n\n----------------------------------------\n\nTITLE: Adding Flatpages URLconf in Django\nDESCRIPTION: Demonstrates how to include the flatpages URLs in a Django project's URLconf. This allows serving flatpages at a specific URL path.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/flatpages.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nurlpatterns = [\n    path(\"pages/\", include(\"django.contrib.flatpages.urls\")),\n]\n```\n\n----------------------------------------\n\nTITLE: Comparing Context Equality via Flattened Dict in Django (Python)\nDESCRIPTION: This snippet illustrates how two Context objects with equivalent variables can be compared for equality after flattening. The equality holds if both sets of variables are the same—even if constructed differently. Useful in testing scenarios; relies on the Context.flatten() method. Inputs are variables assigned to Context, output is a boolean result.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> c1 = Context()\n>>> c1[\"foo\"] = \"first level\"\n>>> c1[\"bar\"] = \"second level\"\n>>> c2 = Context()\n>>> c2.update({\"bar\": \"second level\", \"foo\": \"first level\"})\n{'foo': 'first level', 'bar': 'second level'}\n>>> c1 == c2\nTrue\n```\n\n----------------------------------------\n\nTITLE: Implementing YearArchiveView\nDESCRIPTION: Custom YearArchiveView implementation for Article model with specific configuration options.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/class-based-views/generic-date-based.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic.dates import YearArchiveView\n\nfrom myapp.models import Article\n\n\nclass ArticleYearArchiveView(YearArchiveView):\n    queryset = Article.objects.all()\n    date_field = \"pub_date\"\n    make_object_list = True\n    allow_future = True\n```\n\n----------------------------------------\n\nTITLE: Managing XML Fixture Deserialization Security (Django Management/Shell)\nDESCRIPTION: Discusses changes to the XML deserializer used by the `loaddata` management command in Django 1.4.4 to address security vulnerabilities (CVE-2013-1664, CVE-2013-1665). The deserializer now rejects XML documents containing a DTD (DOCTYPE definition). The standard workflow using `dumpdata` to generate fixtures and `loaddata` to load them is generally unaffected because `dumpdata` does not generate DTDs, but custom XML fixtures must not include a DTD.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.4.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndumpdata\n```\n\nLANGUAGE: shell\nCODE:\n```\nloaddata\n```\n\n----------------------------------------\n\nTITLE: Applying Dictsort with Incorrect Index Type (String) in Django Templates - HTML+Django\nDESCRIPTION: Demonstrates a case where 'dictsort' is given a string index (\"0\") instead of an integer. Results in empty output. Serves as a caution for proper parameter types in Django template filters. Requires a variable named 'values'.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_66\n\nLANGUAGE: html+django\nCODE:\n```\n{{ values|dictsort:\"0\" }}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Auth Logout View in Python\nDESCRIPTION: This snippet demonstrates how to reference the Django authentication logout view. It highlights the potential security issue addressed in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.22.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.auth.views.logout()\n```\n\n----------------------------------------\n\nTITLE: Deprecation of the ssi Template Tag - reStructuredText\nDESCRIPTION: Documents that the ssi template tag, which includes files by absolute path, is deprecated and will be removed in Django 1.10. The include tag is recommended in most situations as a safer/maintainable alternative.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_12\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``ssi`` template tag\n--------------------\n\nThe ``ssi`` template tag allows files to be included in a template by\nabsolute path. This is of limited use in most deployment situations, and\nthe :ttag:`include` tag often makes more sense. This tag is now deprecated and\nwill be removed in Django 1.10.\n```\n\n----------------------------------------\n\nTITLE: Using make_list Filter in Django Templates\nDESCRIPTION: The make_list filter returns the value turned into a list. For strings, it creates a list of characters. For integers, it casts to a string before creating a list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_79\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|make_list }}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for ModelChoiceField with Default to_field_name in Django\nDESCRIPTION: HTML output generated by a ModelChoiceField using the default to_field_name, which uses the primary key of each object as option values.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<select id=\"id_field1\" name=\"field1\">\n<option value=\"obj1.pk\">Object1</option>\n<option value=\"obj2.pk\">Object2</option>\n...\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Django Model Field (1.2+) in Python\nDESCRIPTION: This snippet illustrates the updated API for custom Django `Field` subclasses introduced in version 1.2 to support multiple databases. The `db_type`, `get_db_prep_save`, `get_db_prep_value`, and `get_db_prep_lookup` methods now accept a `connection` argument to specify the target database. Additionally, new methods `get_prep_value` and `get_prep_lookup` were introduced to separate general value preparation from database-specific preparation. The optional `prepared` argument indicates if the value has already undergone initial preparation via `get_prep_value` or `get_prep_lookup`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomModelField(models.Field):\n    ...\n\n    def db_type(self, connection): ...\n\n    def get_prep_value(self, value): ...\n\n    def get_prep_lookup(self, lookup_type, value): ...\n\n    def get_db_prep_save(self, value, connection): ...\n\n    def get_db_prep_value(self, value, connection, prepared=False): ...\n\n    def get_db_prep_lookup(self, lookup_type, value, connection, prepared=False): ...\n```\n\n----------------------------------------\n\nTITLE: Customizing non_db_attrs for Django Field Migration Detection\nDESCRIPTION: Example of overriding the non_db_attrs property in a custom Django field to specify which attributes don't affect the database schema, helping Django detect no-op AlterField operations.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CommaSepField(models.Field):\n    @property\n    def non_db_attrs(self):\n        return super().non_db_attrs + (\"separator\",)\n```\n\n----------------------------------------\n\nTITLE: Removing XMLField in Django Models\nDESCRIPTION: django.db.models.fields.XMLField will be removed. Replace all uses of XMLField with TextField.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Old field:\ndjango.db.models.fields.XMLField\n\n# Replace with:\ndjango.db.models.fields.TextField\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL User with Database Creation Privileges\nDESCRIPTION: Shell command to create a PostgreSQL user with database creation privileges but without superuser or role creation abilities.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/testing.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ createuser --createdb -R -S <user_name>\n```\n\n----------------------------------------\n\nTITLE: Applying Database Functions to Composite Primary Keys in Django ORM - Python\nDESCRIPTION: Showcases Django ORM usage of database functions with composite primary keys, specifically Max and Count. Demonstrates that Max on a composite pk raises ValueError due to multi-column input while Count works. Requires Django ORM and setup models. Inputs: field names as arguments; outputs: aggregation results or raised ValueError.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/composite-primary-key.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nMax(\"order_id\")  # OK\nMax(\"pk\")  # ValueError\nCount(\"pk\")  # OK\n```\n\n----------------------------------------\n\nTITLE: PyPy Implementation Example\nDESCRIPTION: Reference to PyPy as an alternative Python implementation that can offer performance improvements for Django applications.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/performance.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# PyPy implementation\n# Example usage with Django requires PyPy version corresponding to supported Python versions\n```\n\n----------------------------------------\n\nTITLE: Positioning of Translator Comments in Django Templates\nDESCRIPTION: Examples showing proper and improper placement of translator comments in Django templates. Comments must be at the end of a line to be correctly associated with translation strings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_3\n\nLANGUAGE: html+django\nCODE:\n```\n{# Translators: This is ignored #}{% trans \"Translate me\" %}\n{{ title }}{# Translators: Extracted and associated with 'Welcome' below #}\n<h1>{% trans \"Welcome\" %}</h1>\n```\n\n----------------------------------------\n\nTITLE: Flattening a Django Context Stack to a Dictionary (Python)\nDESCRIPTION: Demonstrates the use of the Context.flatten() method in Django to gather all contextual variables—including built-ins—into a single dictionary. This is useful for inspection, debugging, or test assertions. Assumes a valid Django Context object with custom and default variables. Outputs a dictionary containing all stack variables; no input required beyond the context instance.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/api.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> c = Context()\n>>> c[\"foo\"] = \"first level\"\n>>> c.update({\"bar\": \"second level\"})\n{'bar': 'second level'}\n>>> c.flatten()\n{'True': True, 'None': None, 'foo': 'first level', 'False': False, 'bar': 'second level'}\n```\n\n----------------------------------------\n\nTITLE: Updating Spanish Localization Date Format in Django\nDESCRIPTION: Example of updating a Spanish localization date format to escape the 'e' and 'o' characters which became format specifiers in Django 1.4. This prevents conflicts with the new date format strings.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nDATE_FORMAT = r\"j \\de F \\de Y\"\n```\n\n----------------------------------------\n\nTITLE: Field Description Interpolation Example - Django Custom Fields - Python\nDESCRIPTION: Demonstrates a pattern for providing formatted descriptions for Django custom field classes using translation utilities. The description attribute is set to a string that uses Django's translation function (_) and includes a placeholder for dynamic interpolation (e.g., max_length). This snippet is intended for advanced custom Django fields for admin documentation or code introspection.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/fields.txt#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\ndescription = _(\\\"String (up to %(max_length)s)\\\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MacPorts Path\nDESCRIPTION: Sets up PATH environment variable to include MacPorts binaries and PostgreSQL executables.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=/opt/local/bin:/opt/local/lib/postgresql14/bin\n```\n\n----------------------------------------\n\nTITLE: Granting Oracle Package Execute Privileges to a User - SQL\nDESCRIPTION: Displays SQL GRANT commands to provide a database user with execute permissions on SYS.DBMS_LOB and SYS.DBMS_RANDOM packages. This is necessary for Django's Oracle backend to function correctly, as it may require these packages by default. Prerequisite: DBA or sufficient privileges on Oracle DB. Key parameters: target user. Output: The specified user can execute the corresponding packages. Limitation: Not all Oracle installations grant this by default.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/databases.txt#_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nGRANT EXECUTE ON SYS.DBMS_LOB TO user;\nGRANT EXECUTE ON SYS.DBMS_RANDOM TO user;\n```\n\n----------------------------------------\n\nTITLE: JSON Session Key Behavior Example in Python\nDESCRIPTION: Demonstrates how JSON serialization handles numeric keys in Django sessions, showing the automatic conversion of numeric keys to strings.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/http/sessions.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> # initial assignment\n>>> request.session[0] = \"bar\"\n>>> # subsequent requests following serialization & deserialization\n>>> # of session data\n>>> request.session[0]  # KeyError\n>>> request.session[\"0\"]\n'bar'\n```\n\n----------------------------------------\n\nTITLE: Using unordered_list Filter in Django Templates\nDESCRIPTION: Shows how the unordered_list filter recursively converts a self-nested list into an HTML unordered list, without opening and closing <ul> tags.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_97\n\nLANGUAGE: html+django\nCODE:\n```\n{{ var|unordered_list }}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Update Date in Django Feed\nDESCRIPTION: This snippet shows three ways to define the update date for items in a Django feed: a method taking an item, a method for all items, and a hard-coded attribute.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/syndication.txt#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef item_updateddate(self, item):\n    \"\"\"\n    Takes an item, as returned by items(), and returns the item's\n    updateddate.\n    \"\"\"\n\ndef item_updateddate(self):\n    \"\"\"\n    Returns the updateddate for every item in the feed.\n    \"\"\"\n\nitem_updateddate = datetime.datetime(2005, 5, 3)  # Hard-coded updateddate.\n```\n\n----------------------------------------\n\nTITLE: Fixing `Model.full_clean()` Crash with `db_default` Expressions in Django\nDESCRIPTION: Addresses a bug in Django 5.0 where `Model.full_clean()` crashed on fields using expressions in `db_default`. As a side effect of the fix, `Model.full_clean()` no longer validates empty values for fields that have a `db_default` set, changing the validation behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModel.full_clean()\n```\n\nLANGUAGE: python\nCODE:\n```\ndb_default\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 encoding in mod_wsgi daemon mode\nDESCRIPTION: Alternative configuration to fix UnicodeEncodeError when using mod_wsgi daemon mode by setting language and locale options in the WSGIDaemonProcess directive.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/deployment/wsgi/modwsgi.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nWSGIDaemonProcess example.com lang='en_US.UTF-8' locale='en_US.UTF-8'\n```\n\n----------------------------------------\n\nTITLE: Creating README for a Reusable Django App\nDESCRIPTION: Provides a template for a README file in RST format for a reusable Django app. The README includes a brief description of the app, installation instructions, and quick start guide.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/reusable-apps.txt#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n============\ndjango-polls\n============\n\ndjango-polls is a Django app to conduct web-based polls. For each\nquestion, visitors can choose between a fixed number of answers.\n\nDetailed documentation is in the \"docs\" directory.\n\nQuick start\n-----------\n\n1. Add \"polls\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...,\n        \"django_polls\",\n    ]\n\n2. Include the polls URLconf in your project urls.py like this::\n\n    path(\"polls/\", include(\"django_polls.urls\")),\n\n3. Run ``python manage.py migrate`` to create the models.\n\n4. Start the development server and visit the admin to create a poll.\n\n5. Visit the ``/polls/`` URL to participate in the poll.\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time Without Time Zone Support in Python\nDESCRIPTION: A simple snippet showing how to get the current time when Django's time zone support is disabled, resulting in a naive datetime object in local time.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/i18n/timezones.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nnow = datetime.datetime.now()\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-1.2 Feed URLs (Python)\nDESCRIPTION: This snippet illustrates the old method of defining URL patterns for syndication feeds in a Django URLconf. It uses a dictionary (`feeds`) where keys are URL slugs and values are instances of the deprecated `Feed` class from `django.contrib.syndication.feeds`. This approach is replaced by using the class-based view `Feed` from `django.contrib.syndication.views` directly in `urlpatterns`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls.defaults import *\nfrom myproject.feeds import LatestEntries, LatestEntriesByCategory\n\nfeeds = {\n    \"latest\": LatestEntries,\n    \"categories\": LatestEntriesByCategory,\n}\n\nurlpatterns = patterns(\n```\n\n----------------------------------------\n\nTITLE: Features Removed in Django 1.8 - reStructuredText\nDESCRIPTION: Enumerates the features removed in Django 1.8, such as django.contrib.comments, transaction management APIs, template tag behaviors, various modules, settings, and backward-compatible shims. This reference is vital for developers upgrading legacy codebases, as it provides a checklist for migration and highlights functionality no longer available.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_17\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _removed-features-1.8:\n\nFeatures removed in 1.8\n=======================\n\nThese features have reached the end of their deprecation cycle and are removed\nin Django 1.8. See :ref:`deprecated-features-1.6` for details, including how to\nremove usage of these features.\n\n* ``django.contrib.comments`` is removed.\n\n* The following transaction management APIs are removed:\n\n  - ``TransactionMiddleware``\n  - the decorators and context managers ``autocommit``, ``commit_on_success``,\n    and ``commit_manually``, defined in ``django.db.transaction``\n  - the functions ``commit_unless_managed`` and ``rollback_unless_managed``,\n    also defined in ``django.db.transaction``\n  - the ``TRANSACTIONS_MANAGED`` setting\n\n* The :ttag:`cycle` and :ttag:`firstof` template tags auto-escape their\n  arguments.\n\n* The ``SEND_BROKEN_LINK_EMAILS`` setting is removed.\n\n* ``django.middleware.doc.XViewMiddleware`` is removed.\n\n* The ``Model._meta.module_name`` alias is removed.\n\n* The backward compatible shims introduced to rename ``get_query_set``\n  and similar queryset methods are removed. This affects the following classes:\n  ``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``,\n  ``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and\n  ``ReverseSingleRelatedObjectDescriptor``.\n\n* The backward compatible shims introduced to rename the attributes\n  ``ChangeList.root_query_set`` and ``ChangeList.query_set`` are removed.\n\n* ``django.views.defaults.shortcut`` and ``django.conf.urls.shortcut`` are\n  removed.\n\n* Support for the Python Imaging Library (PIL) module is removed.\n\n* The following private APIs are removed:\n\n  - ``django.db.backend``\n  - ``django.db.close_connection()``\n  - ``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``\n  - ``django.db.transaction.is_managed()``\n  - ``django.db.transaction.managed()``\n\n* ``django.forms.widgets.RadioInput`` is removed.\n\n* The module ``django.test.simple`` and the class\n  ``django.test.simple.DjangoTestSuiteRunner`` are removed.\n\n* The module ``django.test._doctest`` is removed.\n\n* The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting is removed. This change\n  affects both ``django.middleware.cache.CacheMiddleware`` and\n  ``django.middleware.cache.UpdateCacheMiddleware`` despite the lack of a\n  deprecation warning in the latter class.\n\n* Usage of the hardcoded *Hold down \"Control\", or \"Command\" on a Mac, to select\n  more than one.* string to override or append to user-provided ``help_text`` in\n  forms for ``ManyToMany`` model fields is not performed by Django anymore\n  either at the model or forms layer.\n\n* The ``Model._meta.get_(add|change|delete)_permission`` methods are removed.\n\n* The session key ``django_language`` is no longer read for backwards\n  compatibility.\n\n* Geographic Sitemaps are removed\n  (``django.contrib.gis.sitemaps.views.index`` and\n  ``django.contrib.gis.sitemaps.views.sitemap``).\n\n* ``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template filter,\n  and ``django.utils.html.clean_html`` are removed.\n```\n\n----------------------------------------\n\nTITLE: Setting up upstream remote for Django repository\nDESCRIPTION: Adds the official Django repository as an upstream remote, allowing synchronization with the main project.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/django/django.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Using first Filter\nDESCRIPTION: Demonstrates using the first filter to get the first item from a list.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_72\n\nLANGUAGE: html+django\nCODE:\n```\n{{ value|first }}\n```\n\n----------------------------------------\n\nTITLE: Removing All Keys with querystring Tag in Django Templates\nDESCRIPTION: This snippet shows how to remove all keys from a query string by setting them to None. When all keys are removed, the output will be a simple question mark.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/templates/builtins.txt#2025-04-23_snippet_31\n\nLANGUAGE: html+django\nCODE:\n```\n{% querystring my_query_dict my_dict color=None size=None fabric=None type=None %}\n```\n\n----------------------------------------\n\nTITLE: Deprecation of \"qn\" Arguments in Django ORM - reStructuredText\nDESCRIPTION: This snippet documents the deprecation of the use of the \"qn\" argument in Django ORM internals. Developers are instructed to rename any such arguments to \"compiler\" and to invoke \"compiler.quote_name_unless_alias(...)\" instead of \"qn(...)\". This change reflects a refactoring of internal API and is relevant for custom query compilers and database backends.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\ndeprecated: you should rename your ``qn`` arguments to ``compiler``, and call\n``compiler.quote_name_unless_alias(...)`` where you previously called\n``qn(...)``.\n```\n\n----------------------------------------\n\nTITLE: Installing Binutils on Debian/Ubuntu\nDESCRIPTION: Installs the binutils package required for library discovery on Debian-based systems.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/index.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install binutils\n```\n\n----------------------------------------\n\nTITLE: Installing Geospatial Libraries on Debian/Ubuntu\nDESCRIPTION: Command to install required geospatial libraries on Debian/Ubuntu systems using apt-get.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install binutils libproj-dev gdal-bin\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Custom Select Widget with Data Attributes in Django\nDESCRIPTION: HTML output generated by a custom Select widget that adds data-price attributes to option elements based on the Topping model's price field.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/forms/fields.txt#2025-04-23_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<select id=\"id_topping\" name=\"topping\" required>\n<option value=\"\" selected>---------</option>\n<option value=\"1\" data-price=\"1.50\">mushrooms</option>\n<option value=\"2\" data-price=\"1.25\">onions</option>\n<option value=\"3\" data-price=\"1.75\">peppers</option>\n<option value=\"4\" data-price=\"2.00\">pineapple</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Checking SQLite R*Tree Module Support in SQLite3\nDESCRIPTION: This snippet demonstrates how to check if SQLite is compiled with R*Tree module support by creating a virtual table using rtree.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_0\n\nLANGUAGE: sqlite3\nCODE:\n```\nsqlite> CREATE VIRTUAL TABLE testrtree USING rtree(id,minX,maxX,minY,maxY);\n```\n\n----------------------------------------\n\nTITLE: Updating Django-Admin Manual Page\nDESCRIPTION: Commands for updating and validating the django-admin manual page documentation\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd docs\n$ make man\n$ man _build/man/django-admin.1  # do a quick sanity check\n$ cp _build/man/django-admin.1 man/django-admin.1\n```\n\n----------------------------------------\n\nTITLE: Referencing method_decorator Utility in Python (Sphinx Syntax)\nDESCRIPTION: Reference using Sphinx syntax to the Django `method_decorator` utility function from `django.utils.decorators`. This utility is necessary for applying function decorators (like `sensitive_post_parameters`) to methods of classes, which was missing in the previous implementation for admin views.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.5.4.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n:func:`~django.utils.decorators.method_decorator`\n```\n\n----------------------------------------\n\nTITLE: Fixing Query Crash with Aliased `GeneratedField` Lookups in Django\nDESCRIPTION: Corrects a crash in Django 5.0 that occurred when executing database queries involving table aliases where a lookup was performed on a `GeneratedField` belonging to the aliased table. This ensures the ORM handles queries on generated fields within aliased tables correctly.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.0.4.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGeneratedField\n```\n\n----------------------------------------\n\nTITLE: Cloning Django Development Version\nDESCRIPTION: Git command to clone Django's main development branch from GitHub repository\nSOURCE: https://github.com/django/django/blob/main/docs/topics/install.txt#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/django/django.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Date Header Timezone in Django\nDESCRIPTION: Determines whether the SMTP 'Date' header uses the local timezone (True) or UTC (False, default).\nSOURCE: https://github.com/django/django/blob/main/docs/ref/settings.txt#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nEMAIL_USE_LOCALTIME = False\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting GEOS Source\nDESCRIPTION: Commands to download and extract the GEOS source code archive.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/geolibs.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://download.osgeo.org/geos/geos-X.Y.Z.tar.bz2\n$ tar xjf geos-X.Y.Z.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Documentation Generator with pip\nDESCRIPTION: Shows how to install Sphinx, the documentation generator used by Django, using pip.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install Sphinx\n```\n\n----------------------------------------\n\nTITLE: Initializing RangeMaxValueValidator in Django PostgreSQL\nDESCRIPTION: Creates a RangeMaxValueValidator instance to validate that the upper bound of a range is not greater than a specified limit value. A custom error message can be provided.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/validators.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nRangeMaxValueValidator(limit_value, message=None)\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Check Flag to Django Test Client\nDESCRIPTION: Introduces the 'enforce_csrf_checks' flag to the Django test client. This new feature allows developers to perform full CSRF checks on forms when using the test client, which is useful for testing CSRF-related functionality.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nenforce_csrf_checks\n```\n\n----------------------------------------\n\nTITLE: Setting DJANGO_COLORS Palette - Shell\nDESCRIPTION: This shell command sets the DJANGO_COLORS environment variable to \"light\", which instructs Django's management commands to use the light color palette for output highlighting. It customizes terminal colors to suit personal or environment preferences. No dependencies are required other than a Unix-like shell; affects subsequent django-admin or manage.py invocations in that terminal session.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/django-admin.txt#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nexport DJANGO_COLORS=\\\"light\\\"\n```\n\n----------------------------------------\n\nTITLE: Replacing models.permalink() decorator with reverse() in Python\nDESCRIPTION: Example of migrating from the deprecated models.permalink() decorator to using django.urls.reverse() directly in a model method.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\n\n\nclass MyModel(models.Model):\n    ...\n\n    @models.permalink\n    def url(self):\n        return (\"guitarist_detail\", [self.slug])\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db import models\nfrom django.urls import reverse\n\n\nclass MyModel(models.Model):\n    ...\n\n    def url(self):\n        return reverse(\"guitarist_detail\", args=[self.slug])\n```\n\n----------------------------------------\n\nTITLE: Enabling IPython Autoawait\nDESCRIPTION: Command to enable autoawait in IPython environment for async code execution\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n%autoawait on\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a PostGIS Database in Shell\nDESCRIPTION: Commands to create a new database and enable the PostGIS extension. This is typically done after installing PostGIS to set up a spatial database.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/postgis.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ createdb  <db name>\n$ psql <db name>\n> CREATE EXTENSION postgis;\n```\n\n----------------------------------------\n\nTITLE: Checking for M Dimension in GIS Geometry (Python)\nDESCRIPTION: The `.GEOSGeometry.hasm` property is a boolean attribute that checks if a GIS geometry object includes the M (measure) dimension. This is useful for handling geometries with extra dimensional information.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.GEOSGeometry.hasm\n```\n\n----------------------------------------\n\nTITLE: Automating Model and Mapping Generation with ogrinspect in Django Console\nDESCRIPTION: Shows the command-line usage of the ogrinspect management command for introspecting vector data sources and generating corresponding Django model code and a mapping dictionary. It describes importing a shapefile, specifying spatial reference (SRID), geometry field type (MultiPolygon), and outputting both the model class and LayerMapping dictionary for copy-paste use. Requirements: Django (with GIS support), GDAL data source, and command-line access. Outputs Django model code to standard output for fast application scaffolding.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/tutorial.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n$ python manage.py ogrinspect world/data/TM_WORLD_BORDERS-0.3.shp WorldBorder \\\n    --srid=4326 --mapping --multi\n```\n\nLANGUAGE: python\nCODE:\n```\n# This is an auto-generated Django model module created by ogrinspect.\nfrom django.contrib.gis.db import models\n\n\nclass WorldBorder(models.Model):\n    fips = models.CharField(max_length=2)\n    iso2 = models.CharField(max_length=2)\n    iso3 = models.CharField(max_length=3)\n    un = models.IntegerField()\n    name = models.CharField(max_length=50)\n    area = models.IntegerField()\n    pop2005 = models.IntegerField()\n    region = models.IntegerField()\n    subregion = models.IntegerField()\n    lon = models.FloatField()\n    lat = models.FloatField()\n    geom = models.MultiPolygonField(srid=4326)\n\n\n# Auto-generated `LayerMapping` dictionary for WorldBorder model\nworldborders_mapping = {\n    \"fips\": \"FIPS\",\n    \"iso2\": \"ISO2\",\n    \"iso3\": \"ISO3\",\n    \"un\": \"UN\",\n    \"name\": \"NAME\",\n    \"area\": \"AREA\",\n    \"pop2005\": \"POP2005\",\n    \"region\": \"REGION\",\n    \"subregion\": \"SUBREGION\",\n    \"lon\": \"LON\",\n    \"lat\": \"LAT\",\n    \"geom\": \"MULTIPOLYGON\",\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecation of '=' as Comparison Operator in Django Template if Tag - reStructuredText\nDESCRIPTION: Addresses the deprecation of using a single equals sign (=) as a comparison operator in the Django template {% if %} tag. The double equals (==) is now the required syntax for equality testing to avoid confusion and inconsistent template behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_13\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``=`` as comparison operator in ``if`` template tag\n---------------------------------------------------\n\nUsing a single equals sign with the ``{% if %}`` template tag for equality\ntesting was undocumented and untested. It's now deprecated in favor of ``==``.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Spacing in Django Template Tags\nDESCRIPTION: Shows incorrect spacing in Django template tags with no spaces between braces and tag content. This is presented as an improper format to avoid.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/coding-style.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{%load humanize%}\n```\n\n----------------------------------------\n\nTITLE: Recreating Deleted Model Instances for M2M (pycon)\nDESCRIPTION: Recreates `Publication` (`p1`) and `Article` (`a2`) instances that were deleted in previous examples. It then adds multiple publications to `a2` to set up data for the next demonstration.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/db/examples/many_to_many.txt#2025-04-23_snippet_27\n\nLANGUAGE: pycon\nCODE:\n```\n>>> p1 = Publication(title=\"The Python Journal\")\n>>> p1.save()\n>>> a2 = Article(headline=\"NASA uses Python\")\n>>> a2.save()\n>>> a2.publications.add(p1, p2, p3)\n```\n\n----------------------------------------\n\nTITLE: Customizing UserChangeForm to Limit last_name Length in Django\nDESCRIPTION: Defines a custom form `MyUserChangeForm` inheriting from `django.contrib.auth.forms.UserChangeForm`. It overrides the `last_name` field to enforce a `max_length` of 30 characters, demonstrating how to preserve the pre-Django 2.0 limit after the default was increased to 150. This is used when you want to keep the old restriction despite the model change.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.forms import UserChangeForm\n\n\nclass MyUserChangeForm(UserChangeForm):\n    last_name = forms.CharField(max_length=30, required=False)\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoawait Feature in IPython Shell\nDESCRIPTION: Provides the IPython magic command (`%autoawait off`) to disable the automatic event loop and await functionality in an IPython interactive shell. This is useful to prevent `django.core.exceptions.SynchronousOnlyOperation` errors when running synchronous Django code (like ORM operations without `sync_to_async`) within an IPython session, which implicitly runs an event loop.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/async.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n%autoawait off\n```\n\n----------------------------------------\n\nTITLE: Querying Empty Geometries in Django ORM with PostGIS\nDESCRIPTION: Example of using the 'isempty' lookup to find empty geometries in PostGIS using Django ORM.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/geoquerysets.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nZipcode.objects.filter(poly__isempty=True)\n```\n\n----------------------------------------\n\nTITLE: Django Template Debug Tag Usage\nDESCRIPTION: Example of the debug template tag syntax that was subject to an XSS vulnerability (CVE-2022-22818). The tag's behavior was modified to prevent XSS attacks by disabling output when DEBUG is False and ensuring proper context variable escaping when DEBUG is True.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.27.txt#2025-04-23_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% debug %}\n```\n\n----------------------------------------\n\nTITLE: New Signature for allow_migrate Router Method in Django - reStructuredText\nDESCRIPTION: Explains an updated method signature for allow_migrate in custom database routers: from (db, model) to (db, app_label, model_name=None, **hints). The change affects custom router implementations and clarifies how migration decisions are signaled to Django migrations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_16\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSignature of the ``allow_migrate`` router method\n------------------------------------------------\n\nThe signature of the :meth:`allow_migrate` method of database routers has\nchanged from ``allow_migrate(db, model)`` to\n``allow_migrate(db, app_label, model_name=None, **hints)``.\n\nWhen ``model_name`` is set, the value that was previously given through the\n``model`` positional argument may now be found inside the ``hints`` dictionary\nunder the key ``'model'``.\n\nAfter switching to the new signature the router will also be called by the\n:class:`~django.db.migrations.operations.RunPython` and\n:class:`~django.db.migrations.operations.RunSQL` operations.\n```\n\n----------------------------------------\n\nTITLE: Rotating GIS Geometry using Database Function (Python/SQL)\nDESCRIPTION: The `django.contrib.gis.db.models.functions.Rotate` database function allows rotating a geometry by a specified angle. The rotation can be performed around the geometry's origin or a specified point.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.gis.db.models.functions.Rotate\n```\n\n----------------------------------------\n\nTITLE: Security Update in dictsort Template Filter\nDESCRIPTION: Fix for CVE-2021-45116 addressing potential information disclosure in the dictsort template filter by implementing restricted resolution logic that prevents method calls and dictionary indexing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.26.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndictsort\n```\n\n----------------------------------------\n\nTITLE: Directory Traversal Prevention in Storage.save()\nDESCRIPTION: Security patch for CVE-2021-45452 preventing directory traversal attacks in Storage.save() method when handling file names.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.26.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nStorage.save()\n```\n\n----------------------------------------\n\nTITLE: Updating Django Management Command Calls in Python\nDESCRIPTION: Example demonstrating how to migrate from direct calls to management methods to using call_command() in Django 1.0. This affects code that programmatically executes Django management commands.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import management\n\nmanagement.flush(verbosity=0, interactive=False)\nmanagement.load_data([\"test_data\"], verbosity=0)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core import management\n\nmanagement.call_command(\"flush\", verbosity=0, interactive=False)\nmanagement.call_command(\"loaddata\", \"test_data\", verbosity=0)\n```\n\n----------------------------------------\n\nTITLE: Generating Custom CSRF Token in Django\nDESCRIPTION: This snippet defines a custom CSRF token generator class that overrides Django's default implementation. It uses a combination of timestamp and random bytes to create a unique token.\nSOURCE: https://github.com/django/django/blob/main/tests/forms_tests/tests/filepath_test_files/real-text-file.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CustomCSRFTokenGenerator(CSRFTokenGenerator):\n    def _generate_token(self):\n        ts = int(time.time() * 1000)\n        rand = random.getrandbits(32)\n        return f\"{ts:x}{rand:x}\"\n\n    def _get_timestamp(self, token):\n        try:\n            return int(token[:12], 16)\n        except ValueError:\n            return None\n```\n\n----------------------------------------\n\nTITLE: Installing Django Test Dependencies and Running Tests\nDESCRIPTION: Steps to navigate to test directory, install Django in editable mode, install Python 3 requirements, and execute the test suite runner. Requires a pre-configured virtual environment.\nSOURCE: https://github.com/django/django/blob/main/tests/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests\n$ python -m pip install -e ..\n$ python -m pip install -r requirements/py3.txt\n$ ./runtests.py\n```\n\n----------------------------------------\n\nTITLE: Defining a Mixin for Content Negotiation in Django (Incomplete)\nDESCRIPTION: Starts the definition of a `JsonableResponseMixin` intended to provide JSON responses for Django form views based on content negotiation. This version is presented as an alternative or improvement to the previous mixin, likely aiming to use `request.get_preferred_type()` for more accurate content type determination. The provided snippet is incomplete.\nSOURCE: https://github.com/django/django/blob/main/docs/topics/class-based-views/generic-editing.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass JsonableResponseMixin:\n    \"\"\"\n    Mixin to add JSON support to a form.\n    Must be used with an object-based FormView (e.g. CreateView).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example CSS @import Rule Before Hashing\nDESCRIPTION: This CSS snippet demonstrates a typical `@import` rule referencing another CSS file using a relative path. It serves as the input example for Django's `ManifestStaticFilesStorage`, which will process this file and replace the path with a hashed version.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/staticfiles.txt#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.. code-block:: css\n\n    @import url(\"../admin/css/base.css\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Changes in Django Model Relations API\nDESCRIPTION: Example showing the difference in behavior of model relation attributes between Django 1.8 and older versions, specifically around get_all_related_objects() method.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> p = Poll.objects.get(pk=1)\n>>> p._meta.get_all_related_objects()\n[<ManyToOneRel: polls.choice>]\n>>> p._meta.get_all_related_objects()[0].model\n<class 'polls.models.Poll'>\n>>> p._meta.get_all_related_objects()[0].related_model\n<class 'polls.models.Choice'>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> p._meta.get_all_related_objects()\n[<RelatedObject: polls:choice related to poll>]\n>>> p._meta.get_all_related_objects()[0].model\n<class 'polls.models.Choice'>\n```\n\n----------------------------------------\n\nTITLE: Django Collectstatic Management Command\nDESCRIPTION: Command for collecting static files that had incorrect permissions on intermediate directories when run on Python 3.7+\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.10.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncollectstatic\n```\n\n----------------------------------------\n\nTITLE: Django File Upload Directory Permissions Setting\nDESCRIPTION: Setting used to control permissions on uploaded file directories that was not being properly applied to intermediate directories on Python 3.7+\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFILE_UPLOAD_DIRECTORY_PERMISSIONS\n```\n\n----------------------------------------\n\nTITLE: Expressing Exception Type 'MiddlewareNotUsed' in Django Middleware - Markdown\nDESCRIPTION: This snippet references the 'MiddlewareNotUsed' exception, which indicates a middleware should be excluded during Django middleware processing. No imports or setup are required; it is not shown as executable code but as a named exception type important for middleware lifecycle in Django. The changelog uses this reference to highlight a bugfix related to async middleware processing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMiddlewareNotUsed\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Location Header Middleware in Python\nDESCRIPTION: Middleware class that converts relative redirect URLs to absolute URIs for compatibility with older Apache/mod_scgi versions. The middleware intercepts responses and modifies the Location header if present.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass LocationHeaderFix(object):\n    def process_response(self, request, response):\n        if \"Location\" in response:\n            response[\"Location\"] = request.build_absolute_uri(response[\"Location\"])\n        return response\n```\n\n----------------------------------------\n\nTITLE: Documenting Django View Example - Python\nDESCRIPTION: Example showing how to document a Django view function with docstrings that describe the view's purpose, context variables, and template usage.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/admin/admindocs.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\nfrom myapp.models import MyModel\n\n\ndef my_view(request, slug):\n    \"\"\"\n    Display an individual :model:`myapp.MyModel`.\n\n    **Context**\n\n    ``mymodel``\n        An instance of :model:`myapp.MyModel`.\n\n    **Template:**\n\n    :template:`myapp/my_template.html`\n    \"\"\"\n    context = {\"mymodel\": MyModel.objects.get(slug=slug)}\n    return render(request, \"myapp/my_template.html\", context)\n```\n\n----------------------------------------\n\nTITLE: Correcting Field.has_changed() Behavior for Disabled Form Fields in Python\nDESCRIPTION: This change fixes the Field.has_changed() method to return False for disabled form fields, including BooleanField, MultipleChoiceField, MultiValueField, FileField, ModelChoiceField, and ModelMultipleChoiceField.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nField.has_changed()\n```\n\n----------------------------------------\n\nTITLE: Altering IP Address Field in MySQL for Django Comments App\nDESCRIPTION: SQL query to alter the IP address column in the django_comments table for MySQL databases to support IPv6 addresses, changing it from an IPAddressField to a field that can store longer addresses.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE django_comments MODIFY ip_address VARCHAR(39);\n```\n\n----------------------------------------\n\nTITLE: Using Subquery() aliases in GROUP BY clause\nDESCRIPTION: Documentation of a bugfix that corrects the handling of Subquery() aliases within GROUP BY clauses, which was a regression introduced in Django 3.0.7.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.11.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSubquery()\n```\n\n----------------------------------------\n\nTITLE: Updating Django Translation Utility Functions\nDESCRIPTION: The get_date_formats() and get_partial_date_formats() functions in django.utils.translation will be removed. Use django.utils.formats.get_format() for locale-aware formatting.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/deprecation.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.translation.get_date_formats()\ndjango.utils.translation.get_partial_date_formats()\n\n# Use instead:\ndjango.utils.formats.get_format()\n```\n\n----------------------------------------\n\nTITLE: Django GDAL Geometry Property Removal\nDESCRIPTION: Removal of coordinate dimension setter property from OGRGeometry class.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/6.0.txt#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.gis.gdal.OGRGeometry.coord_dim\n```\n\n----------------------------------------\n\nTITLE: Django Authentication Logout Method\nDESCRIPTION: Reference to the django.contrib.auth.logout() method which calls session.flush() and was affected by the cached_db backend security issue.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.logout()\n```\n\n----------------------------------------\n\nTITLE: Reference to Django SplitArrayField Bug Fix\nDESCRIPTION: Code reference showing the affected component ArrayField(BooleanField()) in SplitArrayField where data loss was occurring after the first True value.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.9.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nArrayField(BooleanField())\n```\n\n----------------------------------------\n\nTITLE: Django Authentication Login Method\nDESCRIPTION: Reference to the django.contrib.auth.login() method which calls session.flush() when switching accounts and was affected by the cached_db backend security issue.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.login()\n```\n\n----------------------------------------\n\nTITLE: Using Django Admindocs Template Detail View\nDESCRIPTION: Reference to the admindocs TemplateDetailView that had a potential directory traversal vulnerability allowing staff members to check arbitrary file existence.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.12.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.admindocs\n```\n\n----------------------------------------\n\nTITLE: Fixing Serialization of PostgreSQL Fields with None Values in Django\nDESCRIPTION: Details a bugfix (:ticket:`26215`) in Django 1.8.10 that corrected serialization issues for `RangeField` and `ArrayField` (from `django.contrib.postgres.fields`) when they contained `None` values.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.postgres.fields.RangeField\n```\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.postgres.fields.ArrayField\n```\n\n----------------------------------------\n\nTITLE: Django Admin Static Files Structure - Text\nDESCRIPTION: Shows the required directory structure for overriding jQuery in Django admin when IE8 support is needed.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\napp/static/admin/js/vendor/\n    jquery.js\n    jquery.min.js\n```\n\n----------------------------------------\n\nTITLE: Customizing UserCreationForm to Limit Username Length (Django Python)\nDESCRIPTION: This snippet defines a custom Django form `MyUserCreationForm` inheriting from `UserCreationForm`. It overrides the `username` field to enforce a `max_length` of 30 characters, providing a way to retain the older limit after the default `AbstractUser.username` length was increased to 150 in Django 1.10.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.forms import UserCreationForm\n\n\nclass MyUserCreationForm(UserCreationForm):\n    username = forms.CharField(\n        max_length=30,\n        help_text=\"Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Fixing QuerySet Operations with EmptyQuerySet in Python\nDESCRIPTION: Fixed QuerySet.union(), intersection(), and difference() when combining with an EmptyQuerySet.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nqueryset.union(EmptyQuerySet())\nqueryset.intersection(EmptyQuerySet())\nqueryset.difference(EmptyQuerySet())\n```\n\n----------------------------------------\n\nTITLE: Referencing Django URLValidator Class in Python\nDESCRIPTION: This snippet demonstrates how to reference the URLValidator class from Django's core validators module. It's used in the context of explaining a security vulnerability related to header injection.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.validators import URLValidator\n```\n\n----------------------------------------\n\nTITLE: Finding Homebrew Install Path on macOS\nDESCRIPTION: This shell command shows how to find the Homebrew install path on macOS, which is needed to set the SPATIALITE_LIBRARY_PATH.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ brew --prefix\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Django Contribution Workflow\nDESCRIPTION: These Git commands show the process of creating a branch, staging changes, reviewing differences, and committing changes when contributing to Django.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/contributing.txt#2025-04-23_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ git checkout -b ticket_99999\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ git add --all\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ git diff --cached\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Internal API Indicator Example - Python\nDESCRIPTION: Demonstrates the Python convention for marking internal APIs using leading underscore (_) prefix. This is referenced in the documentation as a way to identify internal APIs that are not covered by stability guarantees.\nSOURCE: https://github.com/django/django/blob/main/docs/misc/api-stability.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_internal_method\n```\n\n----------------------------------------\n\nTITLE: Django Setting Combinations in PostgreSQL\nDESCRIPTION: Example of Django settings that were causing a crash on PostgreSQL before the fix in this release. The issue affected applications using PostgreSQL with specific timezone configurations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.3.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTIME_ZONE=None and USE_TZ=False\n```\n\n----------------------------------------\n\nTITLE: Automating Git Bisect for Django Regression\nDESCRIPTION: Command to automate the git bisect process using a specific Django test. This will run the test on each bisected commit to find the first 'bad' commit.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/triaging-tickets.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git bisect run tests/runtests.py migrations.test_regression\n```\n\n----------------------------------------\n\nTITLE: Using 'STATIC_URL' and 'MEDIA_URL' in Django Settings - Markdown\nDESCRIPTION: These snippets represent the use of 'STATIC_URL' and 'MEDIA_URL' configuration settings in a Django project. They are not code, but references to Django settings involved in static and media file URL prefixing. These references explain which settings were previously affected by a regression and how the bugfix restores proper URL construction.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.5.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSTATIC_URL\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nMEDIA_URL\n```\n\n----------------------------------------\n\nTITLE: SQL Representation of XOR Combination (SQL)\nDESCRIPTION: Shows an example SQL query using the XOR operator to select rows where x equals 1 or y equals 2, but not both. Note: Native XOR only supported on some databases.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/models/querysets.txt#_snippet_65\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... WHERE x=1 XOR y=2\n```\n\n----------------------------------------\n\nTITLE: Updating URL Pattern for Authentication View in Django\nDESCRIPTION: This snippet demonstrates how to update a URL pattern for an authentication view to use the 'url' function with a 'name' parameter, which is the new recommended approach in Django 1.6.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nurl(\n    r\"^reset/done/$\",\n    \"django.contrib.auth.views.password_reset_complete\",\n    name=\"password_reset_complete\",\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing GDALRaster Geotransform Attribute in Python\nDESCRIPTION: Demonstrates retrieving the affine transformation matrix (geotransform) of a GDALRaster object as a tuple of six coefficients using the `geotransform` attribute. The default geotransform `[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]` is shown.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/gdal.txt#2025-04-23_snippet_39\n\nLANGUAGE: pycon\nCODE:\n```\n>>> rst = GDALRaster({\"width\": 10, \"height\": 20, \"srid\": 4326})\n>>> rst.geotransform\n[0.0, 1.0, 0.0, 0.0, 0.0, -1.0]\n```\n\n----------------------------------------\n\nTITLE: Raising SuspiciousOperation Exception in Django\nDESCRIPTION: When Host header validation fails in Django 1.3.5, a SuspiciousOperation exception is raised. This is part of the tightened security measures to prevent Host header poisoning attacks.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndjango.core.exceptions.SuspiciousOperation\n```\n\n----------------------------------------\n\nTITLE: Importing Forms Module in Django 0.96 (Python)\nDESCRIPTION: Shows the recommended way to import the `newforms` module (introduced in Django 0.96) by aliasing it to `forms`. This practice facilitated the transition to Django 1.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom django import newforms as forms\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Manager with Backward Compatibility in Django\nDESCRIPTION: This snippet demonstrates how to create a custom manager class that works with both old and new Django versions. It defines a get_queryset_compat method to handle differences in queryset retrieval between versions.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass YourCustomManager(models.Manager):\n    def get_queryset(self):\n        return YourCustomQuerySet()  # for example\n\n    if django.VERSION < (1, 6):\n        get_query_set = get_queryset\n\n    def active(self):  # for example\n        return self.get_queryset_compat().filter(active=True)\n\n    def get_queryset_compat(self):\n        get_queryset = (\n            self.get_query_set if hasattr(self, \"get_query_set\") else self.get_queryset\n        )\n        return get_queryset()\n```\n\n----------------------------------------\n\nTITLE: Django Authentication Backend Request Parameter\nDESCRIPTION: Fixed authentication handling when multiple authentication backends don't accept a positional request argument.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.auth.authenticate()\n```\n\n----------------------------------------\n\nTITLE: Updating Django Admin URL Configuration\nDESCRIPTION: Example of updating the URL configuration for including the Django admin site. In Django 1.9, the old way of including an AdminSite instance is deprecated in favor of directly passing admin.site.urls to url().\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.9.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nurlpatterns = [\n    url(r\"^admin/\", admin.site.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Example Data Table Structure\nDESCRIPTION: Defines the structure and sample data of a table with three fields (FIELD1, FIELD2, FIELD3) used in subsequent Django aggregate function examples. Note the presence of a null value in FIELD3.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/postgres/aggregates.txt#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| FIELD1 | FIELD2 | FIELD3 |\n|--------|--------|--------|\n|    foo |      1 |     13 |\n|    bar |      2 | (null) |\n|   test |      3 |     13 |\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Fields Layout in Django 0.96 (ModelOne - Python)\nDESCRIPTION: This snippet shows the old (Django 0.96) `fields` syntax within an inner `Admin` class for a simple, non-grouped field layout. The syntax involves nested tuples and dictionaries, which was considered confusing and has been simplified in Django 1.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ModelOne(models.Model):\n    ...\n\n    class Admin:\n        fields = ((None, {\"fields\": (\"foo\", \"bar\")}),)\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Project Using a Custom Template (Shell)\nDESCRIPTION: Demonstrates using the `django-admin.py startproject` command with the `--template` option, introduced in Django 1.4. This command creates a new project named `myproject` based on the structure and files defined in the custom template located at `/path/to/my_project_template`.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin.py startproject --template=/path/to/my_project_template myproject\n```\n\n----------------------------------------\n\nTITLE: Template Comment Syntax with Translation Tags in Django\nDESCRIPTION: Example of correctly using comments with translation tags in Django templates. Shows how translator comments are now properly recognized even when placed on the same line.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_2\n\nLANGUAGE: html+django\nCODE:\n```\n{# A comment #}{% trans \"This literal was incorrectly ignored. Not anymore\" %}\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite from Source with R*Tree Support\nDESCRIPTION: This shell script downloads the SQLite amalgamation source, extracts it, and compiles SQLite with R*Tree support enabled.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://www.sqlite.org/YYYY/sqlite-amalgamation-XXX0000.zip\n$ unzip sqlite-amalgamation-XXX0000.zip\n$ cd sqlite-amalgamation-XXX0000\n\n$ CFLAGS=\"-DSQLITE_ENABLE_RTREE=1\" ./configure\n$ make\n$ sudo make install\n$ cd ..\n```\n\n----------------------------------------\n\nTITLE: Django Middleware Process Request Example\nDESCRIPTION: Reference to MiddlewareMixin.process_request() method used in async context for thread sensitivity enforcement.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.1.1.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nMiddlewareMixin.process_request()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django GenericIPAddressField Model in Python\nDESCRIPTION: This snippet shows how to reference the GenericIPAddressField class from Django's models module. It is mentioned to clarify that this model field was not affected by the security vulnerability addressed in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.18.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.db.models.GenericIPAddressField\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with Batch File (Windows)\nDESCRIPTION: Shows how to use the included batch file to generate HTML documentation from Django's source files on Windows systems.\nSOURCE: https://github.com/django/django/blob/main/docs/intro/whatsnext.txt#2025-04-23_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\ncd path\\to\\django\\docs\nmake.bat html\n```\n\n----------------------------------------\n\nTITLE: Referencing Django File Upload Classes in Python\nDESCRIPTION: This snippet demonstrates how to reference Django's FileField, ImageField, ClearableFileInput, and FileInput classes. These classes are central to the security fix implemented in Django 3.2.19 for handling multiple file uploads.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.19.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:class:`.forms.FileField`\n:class:`.forms.ImageField`\n:class:`~django.forms.ClearableFileInput`\n:class:`~django.forms.FileInput`\n```\n\n----------------------------------------\n\nTITLE: Defining a Hand Class for Bridge Card Game in Python\nDESCRIPTION: This code defines a Python class called Hand to represent a hand of cards in the game of Bridge. It initializes with four parameters representing the cards held by each player (north, east, south, west).\nSOURCE: https://github.com/django/django/blob/main/docs/howto/custom-model-fields.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Hand:\n    \"\"\"A hand of cards (bridge style)\"\"\"\n\n    def __init__(self, north, east, south, west):\n        # Input parameters are lists of cards ('Ah', '9s', etc.)\n        self.north = north\n        self.east = east\n        self.south = south\n        self.west = west\n\n    # ... (other possibly useful methods omitted) ...\n```\n\n----------------------------------------\n\nTITLE: Running Spelling Check on Django Documentation\nDESCRIPTION: Command to run the spelling checker on the documentation to identify and fix spelling errors before committing changes. Requires installing sphinxcontrib-spelling package.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-documentation.txt#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ make spelling\n```\n\n----------------------------------------\n\nTITLE: Cloning a forked Django repository\nDESCRIPTION: Creates a local copy of the user's forked Django repository from GitHub. This allows the user to work on the code locally.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/writing-code/working-with-git.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/GitHub_nick/django.git\n```\n\n----------------------------------------\n\nTITLE: CSS Styling to Make a Form Button Appear as a Link\nDESCRIPTION: CSS styling that makes a form and its submit button appear as an inline link. It removes the button's default appearance and adds text decoration to mimic a link's behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.txt#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n#logout-form {\n  display: inline;\n}\n#logout-form button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  text-decoration: underline;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Vulnerability in JSONField and HStoreField Lookups (Python)\nDESCRIPTION: Key and index lookups for JSONField and key lookups for HStoreField were vulnerable to SQL injection attacks when using a crafted dictionary with dictionary expansion in QuerySet.filter().\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.postgres.fields.JSONField\n```\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.postgres.fields.HStoreField\n```\n\n----------------------------------------\n\nTITLE: Fixing QuerySet Union and Difference Operations in Python\nDESCRIPTION: This snippet addresses a bug in Django's QuerySet union() and difference() methods when combining with a queryset that raises EmptyResultSet.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nQuerySet.union()\nQuerySet.difference()\n```\n\n----------------------------------------\n\nTITLE: Fixed Request Data Exception Handling in Django\nDESCRIPTION: Resolution for RequestDataTooBig and TooManyFieldsSent exceptions to properly return bad request responses instead of crashing.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nRequestDataTooBig\nTooManyFieldsSent\n```\n\n----------------------------------------\n\nTITLE: Django Safe URL Validation Function\nDESCRIPTION: Reference to Django's URL safety validation function that had a security vulnerability with numeric URLs.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.7.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.http.is_safe_url()\n```\n\n----------------------------------------\n\nTITLE: Django Template Extension with Variable\nDESCRIPTION: Example of using the extends template tag with a context variable.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_10\n\nLANGUAGE: html+django\nCODE:\n```\n{% extends templ %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pickling for `utils.translation.lazy_number()` in Django\nDESCRIPTION: References a bugfix (:ticket:`26212`) in Django 1.8.10 ensuring that objects produced by `utils.translation.lazy_number()` are picklable. This allows lazy numerical values used in translations to be serialized.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nutils.translation.lazy_number()\n```\n\n----------------------------------------\n\nTITLE: ForeignKey Method Implementation\nDESCRIPTION: Reference to the ForeignKey.get_db_prep_value() method that was implemented to fix issues with UUIDField primary keys in foreign key relationships.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.2.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nForeignKey.get_db_prep_value()\n```\n\n----------------------------------------\n\nTITLE: Implementing `harden_runtime()` for `BCryptPasswordHasher` in Django\nDESCRIPTION: `BCryptPasswordHasher` also received the `harden_runtime()` method implementation in Django 1.8.10. While its rounds hadn't changed since 1.4, this provides consistency and supports subclasses that might increase the work factor, contributing to the CVE-2016-2513 fix.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nBCryptPasswordHasher\n```\n\n----------------------------------------\n\nTITLE: Potential Vulnerability in django.utils.text.Truncator (Python)\nDESCRIPTION: The chars() and words() methods of django.utils.text.Truncator were vulnerable to a denial-of-service attack when used with html=True argument due to a regex backtracking issue. This affected the truncatechars_html and truncatewords_html template filters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.23.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.text.Truncator\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for TestCase.captureOnCommitCallbacks() bug\nDESCRIPTION: This snippet references a Django ticket number for a bug where TestCase.captureOnCommitCallbacks() could execute callbacks multiple times in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33410`\n```\n\n----------------------------------------\n\nTITLE: Importing Django Admindocs Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the admindocs module from Django. The admindocs module is mentioned in the context of a security vulnerability (CVE-2021-33203) related to potential directory traversal.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.4.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib import admindocs\n```\n\n----------------------------------------\n\nTITLE: Referencing WKBWriter Class in Python\nDESCRIPTION: Reference to the WKBWriter class that had an issue with repetitive calls to the GEOS version function.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWKBWriter\n```\n\n----------------------------------------\n\nTITLE: KeyTransform Bug Fix for JSON and HStore Fields\nDESCRIPTION: Fix for KeyTransform() functionality when used with JSONField and HStoreField in conjunction with parameterized expressions\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.2.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nKeyTransform(\"key_name\", JSONField())  # Now works correctly with parameterized expressions\n```\n\n----------------------------------------\n\nTITLE: Including admin URLs with namespace support in Django\nDESCRIPTION: Demonstrates the new way to include admin URLs with namespace support using include(admin.site.urls).\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nurlpatterns = [\n    path('admin/', include(admin.site.urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Updated Django Integer Validation Function\nDESCRIPTION: This snippet mentions the undocumented validate_integer() function, which has been updated to use a stricter validation method using regular expressions instead of simple exception handling with int() casting.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.21.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nvalidate_integer()\n```\n\nLANGUAGE: Python\nCODE:\n```\nint()\n```\n\n----------------------------------------\n\nTITLE: Referencing `django.contrib.auth.views.login()` in Django Redirect Fix\nDESCRIPTION: Highlights `django.contrib.auth.views.login()` as an example component potentially affected by CVE-2016-2512. This view relies on user input for redirects, which necessitated improved validation via `is_safe_url()` in Django 1.8.10 to prevent malicious redirects.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndjango.contrib.auth.views.login()\n```\n\n----------------------------------------\n\nTITLE: Identifying Vulnerable Function in Django's Encoding Module\nDESCRIPTION: Highlights the specific Django utility function that was vulnerable to a potential denial of service attack. The function uri_to_iri() in django.utils.encoding could be exploited with inputs containing a large number of Unicode characters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.21.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.encoding.uri_to_iri()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Model Save Methods (RST)\nDESCRIPTION: These snippets use the ReStructuredText `:meth:` role to reference the `.Model.save` and `.Model.asave` methods. The context is adjusting the `stacklevel` for deprecation warnings related to these methods to ensure they point to the correct call site.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:meth:`.Model.save`\n```\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:meth:`.Model.asave`\n```\n\n----------------------------------------\n\nTITLE: Pull Request Merge Workflow Commands\nDESCRIPTION: Series of git commands showing the workflow for merging a pull request into Django's main branch, including rebasing, fast-forward merging, and branch cleanup.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/contributing/committing-code.txt#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ # Pull in the latest changes from main.\n$ git checkout main\n$ git pull upstream main\n$ # Rebase the pull request on main.\n$ git checkout pr/####\n$ git rebase main\n$ git checkout main\n$ # Merge the work as \"fast-forward\" to main to avoid a merge commit.\n$ # (in practice, you can omit \"--ff-only\" since you just rebased)\n$ git merge --ff-only pr/XXXX\n$ # If you're not sure if you did things correctly, check that only the\n$ # changes you expect will be pushed to upstream.\n$ git push --dry-run upstream main\n$ # Push!\n$ git push upstream main\n$ # Delete the pull request branch.\n$ git branch -d pr/xxxx\n```\n\n----------------------------------------\n\nTITLE: Django CommonMiddleware Path Reference\nDESCRIPTION: Code path references showing the affected middleware and setting components that were vulnerable to open redirect attacks before the security patch.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.15.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.middleware.common.CommonMiddleware\n```\n\nLANGUAGE: python\nCODE:\n```\nAPPEND_SLASH\n```\n\n----------------------------------------\n\nTITLE: Rendering Django Form Labels with Label Suffix - HTML Template\nDESCRIPTION: Example showing how to render form field labels with the new label_suffix behavior in Django 1.6 templates.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.6.txt#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{{ form.my_field.label_tag }}: {{ form.my_field }}\n```\n\nLANGUAGE: html\nCODE:\n```\n{{ form.my_field.label_tag }} {{ form.my_field }}\n```\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"id_my_field\">My Field:</label> <input id=\"id_my_field\" type=\"text\" name=\"my_field\" />\n```\n\n----------------------------------------\n\nTITLE: Using HTML+Django Template Tags with cycle in subtemplate\nDESCRIPTION: Example of a Django template fragment that includes a subtemplate containing a cycle tag, demonstrating how the thread-safety changes in Django 1.2 affect template rendering behavior.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_5\n\nLANGUAGE: html+django\nCODE:\n```\n{% for object in object_list %}\n    {% include \"subtemplate.html\" %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django FileField Custom upload_to Attribute\nDESCRIPTION: This snippet demonstrates the reference to Django's FileField custom upload_to attribute, which is related to a bugfix in version 3.2.3. The fix addresses an issue where saving FileField would raise a SuspiciousFileOperation even with a valid custom upload_to path.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.2.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n~django.db.models.FileField.upload_to\n```\n\n----------------------------------------\n\nTITLE: URL Routing with Regular Expressions (Previous Django Syntax)\nDESCRIPTION: Example of the traditional URL routing syntax using regular expressions in Django versions prior to 2.0. This approach requires explicit regex patterns with named capture groups.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nurl(r\"^articles/(?P<year>[0-9]{4})/$\", views.year_archive)\n```\n\n----------------------------------------\n\nTITLE: Identifying PostgreSQL Indexes with Unnecessary Text Casting in Django 4.2\nDESCRIPTION: This SQL query is used to find PostgreSQL indexes that might have been created with unnecessary `::text` casting due to a regression in Django versions 4.2 to 4.2.5 when using the `__isnull` lookup on string-based fields. These indexes may need to be recreated to resolve potential performance issues. The query searches the `pg_indexes` system catalog for index definitions containing the pattern `'%::text IS %NULL'`. No specific dependencies beyond standard PostgreSQL access.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.2.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n      SELECT indexname, indexdef\n      FROM pg_indexes\n      WHERE indexdef LIKE '%::text IS %NULL';\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ORM Prefetch Function (RST)\nDESCRIPTION: This snippet references the `Prefetch()` function/class from Django's ORM. It's mentioned in the context of fixing a regression in Django 5.1 that caused a crash for sliced querysets without ordering.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/5.1.1.txt#2025-04-23_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``Prefetch()``\n```\n\n----------------------------------------\n\nTITLE: Adapting Form Imports for Django 0.96\nDESCRIPTION: Shows how to modify Python import statements for Django forms during the transition period in version 0.96. The first snippet represents the standard import in Django 0.95. The second snippet shows the recommended way in 0.96 to continue using the old forms system by importing from `django.oldforms` while the new `django.newforms` library is introduced. This facilitates a gradual migration.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/0.96.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms  # 0.95-style\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django import oldforms as forms  # 0.96-style\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Documentation Index Links in RST\nDESCRIPTION: Defines index links for the documentation using reStructuredText reference and document directives to point to the general index, module index and glossary.\nSOURCE: https://github.com/django/django/blob/main/docs/contents.txt#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n* :ref:`genindex`\n* :ref:`modindex`\n* :doc:`glossary`\n```\n\n----------------------------------------\n\nTITLE: Restoring Optional `obj` Argument in InlineModelAdmin.has_add_permission() (Python)\nDESCRIPTION: Restores backwards compatibility by making the `obj` argument of `InlineModelAdmin.has_add_permission()` optional again. This bugfix addresses issue #30097, ensuring third-party code calling this method without the `obj` argument continues to work as expected.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.1.6.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nInlineModelAdmin.has_add_permission()\n```\n\n----------------------------------------\n\nTITLE: SQL Constraint Generation - Platform-Agnostic Example\nDESCRIPTION: Example showing how Django 1.1 generates foreign key constraint names after the change, using an 8-character digest regardless of platform word size.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.1.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE myapp_sometable ADD CONSTRAINT object_id_refs_id_32091d1e FOREIGN KEY ...\n```\n\n----------------------------------------\n\nTITLE: Python Import Warning Example\nDESCRIPTION: Example of an import warning message when the project locale directory conflicts with Python standard library.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_13\n\nLANGUAGE: pytb\nCODE:\n```\n/usr/lib/python2.6/gettext.py:49: ImportWarning: Not importing directory '/path/to/project/locale': missing __init__.py.\nimport locale, copy, os, re, struct, sys\n```\n\n----------------------------------------\n\nTITLE: Fixed WKBWriter Methods for Empty Polygons\nDESCRIPTION: Bug fix for WKBWriter.write() and write_hex() methods when handling empty polygons on GEOS 3.6.1+ systems.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.14.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nWKBWriter.write()\nWKBWriter.write_hex()\n```\n\n----------------------------------------\n\nTITLE: Legacy URL Template Tag Usage\nDESCRIPTION: Example of using the deprecated URL template tag syntax.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_11\n\nLANGUAGE: html+django\nCODE:\n```\n{% url sample %}\n```\n\n----------------------------------------\n\nTITLE: Importing unittest in Django 1.3\nDESCRIPTION: Shows how to import the unittest module in Django 1.3 to take advantage of new unittest2 features. Django provides an alias that will use unittest2 if available.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.3.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.utils import unittest\n```\n\n----------------------------------------\n\nTITLE: Configuring SpatiaLite Build for macOS\nDESCRIPTION: This shell command shows how to configure the SpatiaLite library and tools build process specifically for macOS.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/contrib/gis/install/spatialite.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --target=macosx\n```\n\n----------------------------------------\n\nTITLE: Importing Session Exceptions\nDESCRIPTION: Shows how to import session exceptions from the django.contrib.sessions.exceptions module.\nSOURCE: https://github.com/django/django/blob/main/docs/ref/exceptions.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.sessions.exceptions import SessionInterrupted\n```\n\n----------------------------------------\n\nTITLE: Getting Date Formats with Deprecated Functions (Python)\nDESCRIPTION: This snippet shows the deprecated way of retrieving date, datetime, and time format strings using `get_date_formats()` from `django.utils.translation`. This function is superseded by the locale-aware `django.utils.formats` module.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import get_date_formats\n\ndate_format, datetime_format, time_format = get_date_formats()\n```\n\n----------------------------------------\n\nTITLE: Installing Django Upgrades with pip\nDESCRIPTION: Command to upgrade Django to the latest version using pip. The --upgrade or -U flag tells pip to upgrade the package if it's already installed.\nSOURCE: https://github.com/django/django/blob/main/docs/howto/upgrade-version.txt#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install -U Django\n```\n\n----------------------------------------\n\nTITLE: Fixed GDAL Exception Handling\nDESCRIPTION: Resolution for GDALException issues raised by GDALClose when using GDAL version 2.0 or higher.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.6.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nGDALException\nGDALClose\n```\n\n----------------------------------------\n\nTITLE: Referencing GEOS Version Function in Python\nDESCRIPTION: Reference to the GEOS version tuple function that was being called repetitively, causing potential random crashes with LooseVersion.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngeos_version_tuple()\n```\n\n----------------------------------------\n\nTITLE: Subquery Expression Resolution\nDESCRIPTION: Fixed the equality comparison of resolved Subquery() expressions that were incorrectly considered equal\nSOURCE: https://github.com/django/django/blob/main/docs/releases/3.0.7.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSubquery()\n```\n\n----------------------------------------\n\nTITLE: Database Backend Import Pattern\nDESCRIPTION: Code example showing the new import paths for database backend base classes in Django's updated architecture.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.backends.base.base import BaseDatabaseWrapper\nfrom django.db.backends.base.client import BaseDatabaseClient\nfrom django.db.backends.base.creation import BaseDatabaseCreation\nfrom django.db.backends.base.features import BaseDatabaseFeatures\nfrom django.db.backends.base.introspection import BaseDatabaseIntrospection\nfrom django.db.backends.base.introspection import FieldInfo, TableInfo\nfrom django.db.backends.base.operations import BaseDatabaseOperations\nfrom django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.base.validation import BaseDatabaseValidation\n```\n\n----------------------------------------\n\nTITLE: Fixing GenericRelation Query for Proxy Models in Python\nDESCRIPTION: This bugfix resolves a queryset crash that occurred when using a GenericRelation to a proxy model.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.4.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nGenericRelation\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Admin Editing in Django 0.96 (Python)\nDESCRIPTION: This snippet illustrates the old method (Django 0.96) for defining inline editing in the admin interface. The `edit_inline` and `num_in_admin` arguments were specified directly on the `ForeignKey` field within the model definition (`models.py`). This approach is deprecated in Django 1.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(models.Model): ...\n\n\nclass Child(models.Model):\n    parent = models.ForeignKey(Parent, edit_inline=models.STACKED, num_in_admin=3)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Deprecated SMTPConnection (Python)\nDESCRIPTION: This snippet illustrates the deprecated method of directly instantiating `SMTPConnection` from `django.core.mail` to send emails. This approach is replaced by a generic email backend API in Django 1.2 and later.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.mail import SMTPConnection\n\nconnection = SMTPConnection()\nmessages = get_notification_email()\nconnection.send_messages(messages)\n```\n\n----------------------------------------\n\nTITLE: Release Checksum Template\nDESCRIPTION: Template for creating the release checksum verification file with instructions for GPG key verification.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThis file contains MD5, SHA1, and SHA256 checksums for the source-code\ntarball and wheel files of Django <<VERSION>>, released <<DATE>>.\n\nTo use this file, you will need a working install of PGP or other\ncompatible public-key encryption software. You will also need to have\nthe Django release manager's public key in your keyring. This key has\nthe ID ``XXXXXXXXXXXXXXXX`` and can be imported from the MIT\nkeyserver, for example, if using the open-source GNU Privacy Guard\nimplementation of PGP:\n\n    gpg --keyserver pgp.mit.edu --recv-key XXXXXXXXXXXXXXXX\n\nor via the GitHub API:\n\n    curl https://github.com/<<RELEASE MANAGER GITHUB USERNAME>>.gpg | gpg --import -\n\nOnce the key is imported, verify this file:\n\n    gpg --verify <<THIS FILENAME>>\n\nOnce you have verified this file, you can use normal MD5, SHA1, or SHA256\nchecksumming applications to generate the checksums of the Django\npackage and compare them to the checksums listed below.\n\nRelease packages\n================\n\nhttps://www.djangoproject.com/download/<<VERSION>>/tarball/\nhttps://www.djangoproject.com/download/<<VERSION>>/wheel/\n\nMD5 checksums\n=============\n\n<<MD5SUM>>  <<RELEASE TAR.GZ FILENAME>>\n<<MD5SUM>>  <<RELEASE WHL FILENAME>>\n\nSHA1 checksums\n==============\n\n<<SHA1SUM>>  <<RELEASE TAR.GZ FILENAME>>\n<<SHA1SUM>>  <<RELEASE WHL FILENAME>>\n\nSHA256 checksums\n================\n\n<<SHA256SUM>>  <<RELEASE TAR.GZ FILENAME>>\n<<SHA256SUM>>  <<RELEASE WHL FILENAME>>\n```\n\n----------------------------------------\n\nTITLE: Removing Option Value Casting in Widget Templates in Python and HTML\nDESCRIPTION: Removed casting of the option value to a string in the template context of various widgets. Casting is now done in the template using the |stringformat:'s' filter.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n{{ widget.value|stringformat:'s' }}\n```\n\n----------------------------------------\n\nTITLE: Fixing PostgreSQL Crash with Specific Timezone Settings in Django\nDESCRIPTION: Addresses a bugfix (:ticket:`26177`) in Django 1.8.10 that resolved a crash occurring when using PostgreSQL with the settings `TIME_ZONE=None` and `USE_TZ=False` simultaneously. This ensures correct behavior under this specific configuration.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.10.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nTIME_ZONE=None\n```\n\nLANGUAGE: Python\nCODE:\n```\nUSE_TZ=False\n```\n\n----------------------------------------\n\nTITLE: Preventing Foreign Key Constraint Addition in Primary Key Alteration in Python\nDESCRIPTION: Prevented a primary key alteration from adding a foreign key constraint if db_constraint=False.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.3.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nmodels.ForeignKey(to=Model, db_constraint=False)\n```\n\n----------------------------------------\n\nTITLE: Referencing Django's Default 404 View in Python\nDESCRIPTION: Reference to the Django view function that generates the default 404 page, which was affected by a security vulnerability fixed in this release.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndjango.views.defaults.page_not_found()\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Management Command in Release Notes\nDESCRIPTION: Code reference to the Django migrations management command that had a regression when working with migrations directories without __init__.py files.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n``makemigrations``\n```\n\n----------------------------------------\n\nTITLE: Referencing Django is_safe_url() security check function\nDESCRIPTION: A code reference to the Django utility function that had a security flaw allowing some numeric URLs to be incorrectly considered safe for redirects.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.8.18.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.http.is_safe_url()\n```\n\n----------------------------------------\n\nTITLE: Using Truncator HTML Methods Reference\nDESCRIPTION: Reference to django.utils.text.Truncator's chars() and words() methods with html=True parameter that were vulnerable to DoS attacks. These methods power the truncatechars_html and truncatewords_html template filters.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.11.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.text.Truncator.chars(html=True)\ndjango.utils.text.Truncator.words(html=True)\n```\n\n----------------------------------------\n\nTITLE: Python Version Compatibility Check\nDESCRIPTION: Specifies Python version requirements for Django 1.10. The framework requires Python 2.7, 3.4, or 3.5, with recommendation to use the latest release of each series.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.10.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Python version requirements for Django 1.10\n# Required: Python 2.7, 3.4, or 3.5\n```\n\n----------------------------------------\n\nTITLE: Changing FileField Behavior in Django Models\nDESCRIPTION: FileField no longer automatically deletes files from backend storage when a model instance is deleted. Manual cleanup of orphaned files is now required.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import FileField\n\n# FileField usage example (not provided in the text)\nclass MyModel(models.Model):\n    file = FileField(upload_to='uploads/')\n```\n\n----------------------------------------\n\nTITLE: Referencing Django Ticket in Release Notes\nDESCRIPTION: This snippet references a Django ticket number related to a bug fix in the release notes. It uses the :ticket: directive to create a link to the ticket in the Django issue tracker.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.1.6.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`34291`\n```\n\n----------------------------------------\n\nTITLE: LazyObject Compatibility for Python < 2.6\nDESCRIPTION: Code snippet showing how to maintain compatibility for LazyObject with Python versions earlier than 2.6 by adding the __members__ property.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n__members__ = property(lambda self: self.__dir__())\n```\n\n----------------------------------------\n\nTITLE: Subtemplate using cycle tag in Django templates\nDESCRIPTION: Code snippet showing a subtemplate that uses the cycle template tag, which is affected by thread-safety changes in Django 1.2.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.txt#2025-04-23_snippet_6\n\nLANGUAGE: html+django\nCODE:\n```\n{% cycle 'even' 'odd' %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Django QuerySet Method in Release Notes\nDESCRIPTION: Code reference to a Django QuerySet method that had a regression when used with annotations.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/2.0.2.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n``QuerySet.values_list(..., flat=True)``\n```\n\n----------------------------------------\n\nTITLE: Referencing Django ticket for ModelAdmin.radio_fields layout bug\nDESCRIPTION: This snippet references a Django ticket number for a regression that caused incorrect ModelAdmin.radio_fields layout in the admin in Django 4.0.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/4.0.2.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n:ticket:`33407`\n```\n\n----------------------------------------\n\nTITLE: Updating ModelAdmin.lookup_allowed Method in Django Admin\nDESCRIPTION: The signature of the undocumented lookup_allowed method on ModelAdmin has changed to address a security issue.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.2.5.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass MyModelAdmin(admin.ModelAdmin):\n    # Updated lookup_allowed method (exact signature not provided)\n    def lookup_allowed(self, lookup, value):\n        # Implementation\n        pass\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Number Formatting Function Reference in Django\nDESCRIPTION: Reference to the django.utils.numberformat.format() function that was vulnerable to memory exhaustion when handling Decimal numbers with large digits or exponents. Used in admin interface and template filters like floatformat, filesizeformat, and intcomma.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.11.19.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndjango.utils.numberformat.format()\n```\n\nLANGUAGE: Python\nCODE:\n```\n'{:f}'.format()\n```\n\n----------------------------------------\n\nTITLE: Using IPAddressField in Django Models\nDESCRIPTION: IPAddressField (now deprecated) is the third model field class that has been updated to convert arguments to the correct types before querying, addressing MySQL typecasting issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.4.11.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.db.models import IPAddressField\n```\n\n----------------------------------------\n\nTITLE: Release Package Checksum Generation\nDESCRIPTION: Commands to generate MD5, SHA1, and SHA256 checksums for Django release packages.\nSOURCE: https://github.com/django/django/blob/main/docs/internals/howto-release-django.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd dist\nmd5sum *\nsha1sum *\nsha256sum *\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: This document is a design philosophy guide and contains no code snippets.\nSOURCE: https://github.com/django/django/blob/main/docs/misc/design-philosophies.txt#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Importing Translation Functions in Django 1.0\nDESCRIPTION: Example of how to import and alias the ugettext function for internationalization in Django 1.0, as _() is no longer in builtins.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0-porting-guide.txt#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import ugettext as _\n```\n\n----------------------------------------\n\nTITLE: Declaring Multi-table Model Inheritance with Custom to_field in Django (Python)\nDESCRIPTION: This snippet demonstrates how to declare a multi-table inheritance structure using Django's ORM, specifically highlighting the use of a custom 'to_field' and 'parent_link' in a child model's OneToOneField. 'Parent' is a standard model with fields 'name' and a unique 'other_value', while 'Child' inherits from 'Parent' and establishes a OneToOne relationship back to 'Parent' with advanced parameters. The snippet is provided as an example of a scenario that can result in database integrity errors as of Django 1.0. There are no external dependencies beyond Django itself. Inputs are Django model class declarations; the output is the creation of model tables with specified relationships, though the pattern is not recommended due to known issues.\nSOURCE: https://github.com/django/django/blob/main/docs/releases/1.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Parent(models.Model):\n    name = models.CharField(max_length=10)\n    other_value = models.IntegerField(unique=True)\n\n\nclass Child(Parent):\n    father = models.OneToOneField(\n        Parent, primary_key=True, to_field=\"other_value\", parent_link=True\n    )\n    value = models.IntegerField()\n```"
  }
]