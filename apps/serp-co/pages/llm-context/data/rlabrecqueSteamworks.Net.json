[
  {
    "owner": "rlabrecque",
    "repo": "steamworks.net",
    "content": "TITLE: SteamAPI Initialization\nDESCRIPTION: Imports the SteamInternal_SteamAPI_Init function from the native library. This function is used to initialize the Steam API internally and returns an ESteamAPIInitResult.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamInternal_SteamAPI_Init\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern ESteamAPIInitResult SteamInternal_SteamAPI_Init(InteropHelp.UTF8StringHandle pszInternalCheckInterfaceVersions, IntPtr pOutErrMsg);\n```\n\n----------------------------------------\n\nTITLE: SteamAPI RunCallbacks\nDESCRIPTION: Imports the SteamAPI_RunCallbacks function from the native library. This function is used to process Steam callbacks.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_RunCallbacks\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_RunCallbacks();\n```\n\n----------------------------------------\n\nTITLE: SteamAPI Shutdown\nDESCRIPTION: Imports the SteamAPI_Shutdown function from the native library. This function is used to shut down the Steam API.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_Shutdown\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_Shutdown();\n```\n\n----------------------------------------\n\nTITLE: SteamAPI RestartAppIfNecessary\nDESCRIPTION: Imports the SteamAPI_RestartAppIfNecessary function from the native library. This function checks if the app needs to be restarted through Steam and returns a boolean value.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_RestartAppIfNecessary\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);\n```\n\n----------------------------------------\n\nTITLE: SteamAPI Register Callback\nDESCRIPTION: Imports the SteamAPI_RegisterCallback function from the native library. This function registers a callback to be invoked when a Steam event occurs.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_RegisterCallback\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);\n```\n\n----------------------------------------\n\nTITLE: Native Library Definition\nDESCRIPTION: Defines the name of the native library to load based on the platform. It uses conditional compilation to determine whether to load 'steam_api64' or 'steam_api' for the client and 'sdkencryptedappticket64' or 'sdkencryptedappticket' for SDK encrypted app ticket.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#if STEAMWORKS_WIN && STEAMWORKS_X64\n\t\tinternal const string NativeLibraryName = \"steam_api64\";\n\t\tinternal const string NativeLibrary_SDKEncryptedAppTicket = \"sdkencryptedappticket64\";\n#else\n\t\tinternal const string NativeLibraryName = \"steam_api\";\n\t\tinternal const string NativeLibrary_SDKEncryptedAppTicket = \"sdkencryptedappticket\";\n#endif\n```\n\n----------------------------------------\n\nTITLE: SteamAPI GetHSteamUser\nDESCRIPTION: Imports the SteamAPI_GetHSteamUser function from the native library. This function retrieves the HSteamUser handle.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_GetHSteamUser\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern int SteamAPI_GetHSteamUser();\n```\n\n----------------------------------------\n\nTITLE: SteamGameServer Shutdown\nDESCRIPTION: Imports the SteamGameServer_Shutdown function from the native library.  This function is used to shutdown the Steam Game Server.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamGameServer_Shutdown\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamGameServer_Shutdown();\n```\n\n----------------------------------------\n\nTITLE: Defining DISABLESTEAMWORKS macro\nDESCRIPTION: This snippet defines the DISABLESTEAMWORKS macro if the target platform is not Windows, Linux, or macOS, or if the STEAMWORKS_WIN or STEAMWORKS_LIN_OSX macros are not defined. This macro disables Steamworks.NET functionality.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/header.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#if !(UNITY_STANDALONE_WIN || UNITY_STANDALONE_LINUX || UNITY_STANDALONE_OSX || STEAMWORKS_WIN || STEAMWORKS_LIN_OSX)\n\t#define DISABLESTEAMWORKS\n#endif\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Steamworks\nDESCRIPTION: This snippet uses conditional compilation to exclude Steamworks.NET functionality when DISABLESTEAMWORKS is defined. It ensures that Steamworks code is only included in supported environments.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/header.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n#if !DISABLESTEAMWORKS\n\nusing System.Runtime.InteropServices;\nusing IntPtr = System.IntPtr;\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: SteamClient Accessor\nDESCRIPTION: Imports the SteamClient function from the native library. This function returns a pointer to the SteamClient interface.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamClient\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamClient();\n```\n\n----------------------------------------\n\nTITLE: Importing SteamGameServerClient Function in C#\nDESCRIPTION: This snippet imports the SteamGameServerClient function from the native Steamworks library. It allows C# code to access the SteamGameServerClient functionality provided by the Steamworks SDK. It's essential for initializing and working with game server functionalities.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamGameServerClient\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamGameServerClient();\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Struct in Steamworks.NET (C#)\nDESCRIPTION: This C# code defines a serializable struct named {NAME} within the Steamworks namespace. It implements IEquatable<{NAME}> and IComparable<{NAME}> interfaces, providing value-based equality and comparison. The struct encapsulates a value of type {TYPE} and provides explicit operators for conversion between the struct and the underlying type.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/typetemplate.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Steamworks {\n\t[System.Serializable]\n\tpublic struct {NAME} : System.IEquatable<{NAME}>, System.IComparable<{NAME}> {\n{READONLY}\n\t\tpublic {TYPE} m_{NAMESTRIPPED};\n\n\t\tpublic {NAME}({TYPE} value) {\n\t\t\tm_{NAMESTRIPPED} = value;\n\t\t}\n\n\t\tpublic override string ToString() {\n\t\t\treturn m_{NAMESTRIPPED}.ToString();\n\t\t}\n\n\t\tpublic override bool Equals(object other) {\n\t\t\treturn other is {NAME} && this == ({NAME})other;\n\t\t}\n\n\t\tpublic override int GetHashCode() {\n\t\t\treturn m_{NAMESTRIPPED}.GetHashCode();\n\t\t}\n\n\t\tpublic static bool operator ==({NAME} x, {NAME} y) {\n\t\t\treturn x.m_{NAMESTRIPPED} == y.m_{NAMESTRIPPED};\n\t\t}\n\n\t\tpublic static bool operator !=({NAME} x, {NAME} y) {\n\t\t\treturn !(x == y);\n\t\t}\n\n\t\tpublic static explicit operator {NAME}({TYPE} value) {\n\t\t\treturn new {NAME}(value);\n\t\t}\n\n\t\tpublic static explicit operator {TYPE}({NAME} that) {\n\t\t\treturn that.m_{NAMESTRIPPED};\n\t\t}\n\n\t\tpublic bool Equals({NAME} other) {\n\t\t\treturn m_{NAMESTRIPPED} == other.m_{NAMESTRIPPED};\n\t\t}\n\n\t\tpublic int CompareTo({NAME} other) {\n\t\t\treturn m_{NAMESTRIPPED}.CompareTo(other.m_{NAMESTRIPPED});\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Steamworks.NET Binaries (Batch)\nDESCRIPTION: This command builds the Steamworks.NET binaries for all supported platforms using the dotnet build tool. It targets the Steamworks.NET.Standard.sln solution file and uses the BatchBuild target.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/Standalone/How to build nuget package.md#_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\ndotnet build -t:BatchBuild Steamworks.NET.Standard.sln\n```\n\n----------------------------------------\n\nTITLE: Creating Steamworks.NET NuGet Package (Batch)\nDESCRIPTION: This command creates a NuGet package from the Steamworks.NET.nuspec file. It utilizes the NuGet client to pack the project and outputs the resulting package to the 'bin\\' directory.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/Standalone/How to build nuget package.md#_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\nnuget pack Steamworks.NET.nuspec -OutputDirectory bin\\\n```\n\n----------------------------------------\n\nTITLE: Importing SteamNetworkingIdentity Functions in C#\nDESCRIPTION: This snippet imports various SteamNetworkingIdentity functions from the native Steamworks library. These functions provide methods for managing and manipulating SteamNetworkingIdentity objects, including setting SteamIDs, Xbox Pairwise IDs, PSN IDs, IP Addresses, and generic strings/bytes. They also allow checking identity properties. These are crucial for identifying and authenticating network connections in Steam.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_Clear\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_Clear(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_IsInvalid\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_IsInvalid(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetSteamID\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_SetSteamID(ref SteamNetworkingIdentity self, ulong steamID);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetSteamID\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern ulong SteamAPI_SteamNetworkingIdentity_GetSteamID(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetSteamID64\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref SteamNetworkingIdentity self, ulong steamID);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetSteamID64\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern ulong SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszString);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetPSNID\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_SetPSNID(ref SteamNetworkingIdentity self, ulong id);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetPSNID\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern ulong SteamAPI_SteamNetworkingIdentity_GetPSNID(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetIPAddr\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref SteamNetworkingIdentity self, ref SteamNetworkingIPAddr addr);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetIPAddr\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetIPv4Addr\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(ref SteamNetworkingIdentity self, uint nIPv4, ushort nPort);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetIPv4\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern uint SteamAPI_SteamNetworkingIdentity_GetIPv4(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetFakeIPType\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern ESteamNetworkingFakeIPType SteamAPI_SteamNetworkingIdentity_GetFakeIPType(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_IsFakeIP\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_IsFakeIP(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetLocalHost\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_IsLocalHost\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetGenericString\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_SetGenericString(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszString);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetGenericString\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamAPI_SteamNetworkingIdentity_GetGenericString(ref SteamNetworkingIdentity self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_SetGenericBytes\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref SteamNetworkingIdentity self, [In, Out] byte[] data, uint cbLen);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_GetGenericBytes\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref SteamNetworkingIdentity self, out int cbLen);\n```\n\n----------------------------------------\n\nTITLE: Importing SteamNetworkingIPAddr Functions in C#\nDESCRIPTION: This snippet imports various SteamNetworkingIPAddr functions from the native Steamworks library. These functions provide methods for managing and manipulating SteamNetworkingIPAddr objects, including setting IPv6/IPv4 addresses, checking their properties, and converting them to strings. These are crucial for network communication in Steam.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_Clear\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIPAddr_Clear(ref SteamNetworkingIPAddr self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref SteamNetworkingIPAddr self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_SetIPv6\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref SteamNetworkingIPAddr self, [In, Out] byte[] ipv6, ushort nPort);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_SetIPv4\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref SteamNetworkingIPAddr self, uint nIP, ushort nPort);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_IsIPv4\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref SteamNetworkingIPAddr self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_GetIPv4\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern uint SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref SteamNetworkingIPAddr self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref SteamNetworkingIPAddr self, ushort nPort);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_IsLocalHost\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref SteamNetworkingIPAddr self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_ToString\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIPAddr_ToString(ref SteamNetworkingIPAddr self, IntPtr buf, uint cbBuf, [MarshalAs(UnmanagedType.I1)] bool bWithPort);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_ParseString\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIPAddr_ParseString(ref SteamNetworkingIPAddr self, InteropHelp.UTF8StringHandle pszStr);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_IsEqualTo\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref SteamNetworkingIPAddr self, ref SteamNetworkingIPAddr x);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_GetFakeIPType\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern ESteamNetworkingFakeIPType SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(ref SteamNetworkingIPAddr self);\n\n\t\t[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIPAddr_IsFakeIP\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIPAddr_IsFakeIP(ref SteamNetworkingIPAddr self);\n```\n\n----------------------------------------\n\nTITLE: Import SteamNetworkingIdentity Equality Function in C#\nDESCRIPTION: This code imports the `SteamAPI_SteamNetworkingIdentity_IsEqualTo` function from the native Steamworks library. This function is used to compare two `SteamNetworkingIdentity` structures for equality.  It requires the `NativeLibraryName` constant to be defined and accessible.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_IsEqualTo\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref SteamNetworkingIdentity self, ref SteamNetworkingIdentity x);\n```\n\n----------------------------------------\n\nTITLE: Import SteamNetworkingIdentity ToString Function in C#\nDESCRIPTION: This snippet imports the `SteamAPI_SteamNetworkingIdentity_ToString` function. This function converts a `SteamNetworkingIdentity` structure to a string representation. It requires `NativeLibraryName` and uses an `IntPtr` to handle the string buffer.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_ToString\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingIdentity_ToString(ref SteamNetworkingIdentity self, IntPtr buf, uint cbBuf);\n```\n\n----------------------------------------\n\nTITLE: Import SteamNetworkingIdentity ParseString Function in C#\nDESCRIPTION: This code imports the `SteamAPI_SteamNetworkingIdentity_ParseString` function. This function parses a string and populates a `SteamNetworkingIdentity` structure.  It utilizes `InteropHelp.UTF8StringHandle` for proper UTF-8 string handling and requires `NativeLibraryName` to be defined.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingIdentity_ParseString\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_SteamNetworkingIdentity_ParseString(ref SteamNetworkingIdentity self, InteropHelp.UTF8StringHandle pszStr);\n```\n\n----------------------------------------\n\nTITLE: Import SteamNetworkingMessage_t Release Function in C#\nDESCRIPTION: This code imports the `SteamAPI_SteamNetworkingMessage_t_Release` function. This function releases the memory associated with a `SteamNetworkingMessage_t` structure. It requires `NativeLibraryName` and takes an `IntPtr` as input, representing the pointer to the message.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_SteamNetworkingMessage_t_Release\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_SteamNetworkingMessage_t_Release(IntPtr self);\n```\n\n----------------------------------------\n\nTITLE: Import ISteamNetworkingConnectionSignaling SendSignal Function in C#\nDESCRIPTION: This code imports the `SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal` function. This function sends a signaling message over a Steam Networking connection. It requires the `NativeLibraryName`, an `HSteamNetConnection`, a `SteamNetConnectionInfo_t` structure, and handles message data using an `IntPtr`.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal\", CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamAPI_ISteamNetworkingConnectionSignaling_SendSignal(ref ISteamNetworkingConnectionSignaling self, HSteamNetConnection hConn, ref SteamNetConnectionInfo_t info, IntPtr pMsg, int cbMsg);\n```\n\n----------------------------------------\n\nTITLE: Import ISteamNetworkingConnectionSignaling Release Function in C#\nDESCRIPTION: This code imports the `SteamAPI_ISteamNetworkingConnectionSignaling_Release` function. This function releases resources associated with an `ISteamNetworkingConnectionSignaling` interface. It requires the `NativeLibraryName`.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_ISteamNetworkingConnectionSignaling_Release\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_ISteamNetworkingConnectionSignaling_Release(ref ISteamNetworkingConnectionSignaling self);\n```\n\n----------------------------------------\n\nTITLE: Import ISteamNetworkingSignalingRecvContext OnConnectRequest Function in C#\nDESCRIPTION: This code imports the `SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest` function. This function handles connection requests in a signaling context. It requires `NativeLibraryName`, an `HSteamNetConnection`, a `SteamNetworkingIdentity`, and an integer representing the local virtual port, returning an `IntPtr`.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamAPI_ISteamNetworkingSignalingRecvContext_OnConnectRequest(ref ISteamNetworkingSignalingRecvContext self, HSteamNetConnection hConn, ref SteamNetworkingIdentity identityPeer, int nLocalVirtualPort);\n```\n\n----------------------------------------\n\nTITLE: Import ISteamNetworkingSignalingRecvContext SendRejectionSignal Function in C#\nDESCRIPTION: This code imports the `SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal` function. This function sends a rejection signal in a signaling context. It requires `NativeLibraryName`, a `SteamNetworkingIdentity`, an `IntPtr` for the message, and an integer for the message size.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibraryName, EntryPoint = \"SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal\", CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamAPI_ISteamNetworkingSignalingRecvContext_SendRejectionSignal(ref ISteamNetworkingSignalingRecvContext self, ref SteamNetworkingIdentity identityPeer, IntPtr pMsg, int cbMsg);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket Decryption Function in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BDecryptTicket` function. This function decrypts an encrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket` and several byte arrays for the encrypted ticket, decrypted ticket, and key. Marshalling attributes specify how the data is passed to the native function.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BDecryptTicket([In, Out] byte[] rgubTicketEncrypted, uint cubTicketEncrypted, [In, Out] byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, [MarshalAs(UnmanagedType.LPArray, SizeConst=Constants.k_nSteamEncryptedAppTicketSymmetricKeyLen)] byte[] rgubKey, int cubKey);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket App Ownership Check in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BIsTicketForApp` function. This function checks if a decrypted application ticket is valid for a specific app ID. It requires `NativeLibrary_SDKEncryptedAppTicket`, a byte array for the decrypted ticket, and an `AppId_t` representing the app ID.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BIsTicketForApp([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket Issue Time Retrieval in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_GetTicketIssueTime` function. This function retrieves the issue time of a decrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket` and a byte array for the decrypted ticket, returning a uint representing the issue time.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern uint SteamEncryptedAppTicket_GetTicketIssueTime([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket SteamID Retrieval in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_GetTicketSteamID` function. This function retrieves the SteamID associated with a decrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket`, a byte array for the decrypted ticket, and an output parameter `psteamID` to store the retrieved SteamID.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern void SteamEncryptedAppTicket_GetTicketSteamID([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket AppID Retrieval in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_GetTicketAppID` function. This function retrieves the AppID associated with a decrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket` and a byte array for the decrypted ticket, returning a uint representing the AppID.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern uint SteamEncryptedAppTicket_GetTicketAppID([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket User App Ownership Check in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BUserOwnsAppInTicket` function. This function checks if the user owns a specific app within the decrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket`, a byte array for the decrypted ticket, and an `AppId_t` representing the app ID.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BUserOwnsAppInTicket([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket VAC Ban Check in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BUserIsVacBanned` function. This function checks if the user is VAC banned based on information within the decrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket` and a byte array for the decrypted ticket.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BUserIsVacBanned([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket User Data Retrieval in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_GetUserVariableData` function. This function retrieves user-specific variable data from the decrypted application ticket. It requires `NativeLibrary_SDKEncryptedAppTicket`, a byte array for the decrypted ticket, and an output parameter `pcubUserData` to store the size of the user data. Returns a pointer to the data.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\tpublic static extern IntPtr SteamEncryptedAppTicket_GetUserVariableData([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket Signature Check in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BIsTicketSigned` function. This function checks if the decrypted application ticket is signed. It requires `NativeLibrary_SDKEncryptedAppTicket`, byte arrays for the decrypted ticket and the RSA key, and their corresponding sizes.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BIsTicketSigned([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, [In, Out] byte[] pubRSAKey, uint cubRSAKey);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket License Borrowed Check in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BIsLicenseBorrowed` function. This function checks if the license associated with the decrypted application ticket is borrowed. It requires `NativeLibrary_SDKEncryptedAppTicket` and a byte array for the decrypted ticket.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BIsLicenseBorrowed([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);\n```\n\n----------------------------------------\n\nTITLE: Import SteamEncryptedAppTicket Temporary License Check in C#\nDESCRIPTION: This code imports the `SteamEncryptedAppTicket_BIsLicenseTemporary` function. This function checks if the license associated with the decrypted application ticket is temporary. It requires `NativeLibrary_SDKEncryptedAppTicket` and a byte array for the decrypted ticket.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/templates/nativemethods.txt#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\n[DllImport(NativeLibrary_SDKEncryptedAppTicket, CallingConvention = CallingConvention.Cdecl)]\n\t\t[return: MarshalAs(UnmanagedType.I1)]\n\t\tpublic static extern bool SteamEncryptedAppTicket_BIsLicenseTemporary([In, Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);\n```\n\n----------------------------------------\n\nTITLE: Running Steamworks.NET CodeGen Python Script\nDESCRIPTION: This snippet describes how to execute the Steamworks.NET code generation script. It requires Python 3 to be installed and accessible in the command prompt. The script should be executed from the CodeGen directory for relative paths to work correctly and is recommended to be run on a Linux-based OS.\nSOURCE: https://github.com/rlabrecque/steamworks.net/blob/master/CodeGen/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 Steamworks.NET_CodeGen.py\n```"
  }
]