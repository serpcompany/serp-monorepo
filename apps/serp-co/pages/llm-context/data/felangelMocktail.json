[
  {
    "owner": "felangel",
    "repo": "mocktail",
    "content": "TITLE: Additional Mocktail Usage Examples in Dart\nDESCRIPTION: This snippet showcases various Mocktail features, including stubbing methods with specific arguments, using argument matchers (`any`, `captureAny`), stubbing methods to throw exceptions, calculating stubs dynamically, and capturing arguments.  It provides a comprehensive overview of how to customize mock behavior and verify interactions.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Stub a method before interacting with the mock.\nwhen(() => cat.sound()).thenReturn('purrr!');\nexpect(cat.sound(), 'purrr!');\n\n// You can interact with the mock multiple times.\nexpect(cat.sound(), 'purrr!');\n\n// You can change the stub.\nwhen(() => cat.sound()).thenReturn('meow!');\nexpect(cat.sound(), 'meow');\n\n// You can stub getters.\nwhen(() => cat.lives).thenReturn(10);\nexpect(cat.lives, 10);\n\n// You can stub a method for specific arguments.\nwhen(() => cat.likes('fish', isHungry: false)).thenReturn(true);\nexpect(cat.likes('fish', isHungry: false), isTrue);\n\n// You can verify the interaction for specific arguments.\nverify(() => cat.likes('fish', isHungry: false)).called(1);\n\n// Or alternatively use any(that: ...) to use a matcher.\nverify(() => cat.likes(any(that: isA<String>().having((food) => food, 'name', 'fish')))).called(1);\n\n// You can stub a method using argument matcher: `any`.\n// When stubbing a positional argument, use `any()`.\n// When stubbing a named argument, use `any(named: '<argName>`)`.\n// A custom matcher can be provided using `any(that: customMatcher)`.\nwhen(() => cat.likes(any(), isHungry: any(named: 'isHungry', that: isFalse)).thenReturn(true);\nexpect(cat.likes('fish', isHungry: false), isTrue);\n\n// You can stub a method to throw.\nwhen(() => cat.sound()).thenThrow(Exception('oops'));\nexpect(() => cat.sound(), throwsA(isA<Exception>()));\n\n// You can calculate stubs dynamically.\nfinal sounds = ['purrr', 'meow'];\nwhen(() => cat.sound()).thenAnswer((_) => sounds.removeAt(0));\nexpect(cat.sound(), 'purrr');\nexpect(cat.sound(), 'meow');\n\n// You can capture any argument.\nwhen(() => cat.likes('fish')).thenReturn(true);\nexpect(cat.likes('fish'), isTrue);\nfinal captured = verify(() => cat.likes(captureAny())).captured;\nexpect(captured.last, equals(['fish']));\n\n// You can capture a specific argument based on a matcher.\nwhen(() => cat.likes(any())).thenReturn(true);\nexpect(cat.likes('fish'), isTrue);\nexpect(cat.likes('dog food'), isTrue);\nfinal captured = verify(() => cat.likes(captureAny(that: startsWith('d')))).captured;\nexpect(captured.last, equals(['dog food']));\n```\n\n----------------------------------------\n\nTITLE: Stubbing and Verifying Mock Behavior in Dart\nDESCRIPTION: This snippet illustrates how to stub methods on a mock object and verify that they are called.  It demonstrates using `when` to define the return value of a method, `verify` to check that a method was called a specific number of times, and `verifyNever` to ensure a method was not called. These are core features of Mocktail for testing interactions with mock objects.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Stub the `sound` method.\nwhen(() => cat.sound()).thenReturn('meow');\n\n// Verify no interactions have occurred.\nverifyNever(() => cat.sound());\n\n// Interact with the mock cat instance.\ncat.sound();\n\n// Verify the interaction occurred.\nverify(() => cat.sound()).called(1);\n\n// When mocktail verifies an invocation, it is then excluded from further verifications.\nverifyNever(() => cat.sound());\n\n// Interact with the mock instance again.\ncat.sound();\n\n// The verification count is 1 since there was only 1 invocation since the last verification.\nverify(() => cat.sound()).called(1);\n```\n\n----------------------------------------\n\nTITLE: Defining a Widget with Image.network - Dart\nDESCRIPTION: This code snippet defines a StatelessWidget called FakeApp that contains a MaterialApp with a Scaffold and an Image.network widget. The Image.network widget attempts to load an image from 'https://test.com/logo.png'. This widget is used as an example for demonstrating how to use mocktail_image_network to mock network image loading during widget tests. The purpose is to show a typical use case where network image calls need to be mocked during widget testing.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail_image_network/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass FakeApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: Image.network('https://test.com/logo.png'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Images in Widget Tests - Dart\nDESCRIPTION: This code snippet demonstrates how to use the `mockNetworkImages` function from the `mocktail_image_network` package to wrap a widget test.  It ensures that the `Image.network` call within the `FakeApp` widget is mocked, preventing actual network requests during the test. `tester.pumpWidget(FakeApp())` renders the `FakeApp` widget, and `expect(find.byType(Image), findsOneWidget)` verifies that the Image widget is present in the rendered output.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail_image_network/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  testWidgets('can use mocktail for network images', (tester) async {\n    await mockNetworkImages(() async => tester.pumpWidget(FakeApp()));\n    expect(find.byType(Image), findsOneWidget);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Methods with Generic Types in Dart\nDESCRIPTION: This snippet describes how to stub methods with generic type arguments when using Mocktail, preventing a `TypeError` caused by the default `dynamic` type inference when using `any()`.  It emphasizes the importance of explicitly defining the type to be inferred within a generic method's stub to ensure correct Mocktail behavior.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nclass Cache {\n  bool set<T>(String key, T value) {\n    return true;\n  }\n}\n\n// The type `T` of `any<T>()` is inferred to be `dynamic`.\nwhen(() => cache.set(any(), any())).thenReturn((_) => true);\n\nfinal cache = MockCache();\nwhen(() => cache.set<int>(any(), any())).thenReturn((_) => true);\ncache.set<int>('key', 1);\nverify(() => cache.set<int>(any(), any())).called(1);\n\nwhen(() => cache.set(any(), any<int>())).thenReturn((_) => true);\n```\n\n----------------------------------------\n\nTITLE: Registering Fallback Values for Argument Matchers in Dart\nDESCRIPTION: This snippet demonstrates how to register a fallback value for custom types when using argument matchers like `any`. Because Mocktail needs to return default values when these matchers are used, registering a fallback value allows Mocktail to work with custom types seamlessly, preventing `TypeError` exceptions.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nclass Food {...}\n\nclass Cat {\n  bool likes(Food food) {...}\n}\n\n...\n\nclass MockCat extends Mock implements Cat {}\n\nclass FakeFood extends Fake implements Food {}\n\nvoid main() {\n  setUpAll(() {\n    registerFallbackValue(FakeFood());\n  });\n\n  test('...', () {\n    final cat = MockCat();\n    when(() => cat.likes(any()).thenReturn(true);\n    ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Future<void> Methods in Dart\nDESCRIPTION: This snippet illustrates how to correctly stub methods that return `Future<void>` when using Mocktail. If a method returning `Future<void>` is not stubbed, Mocktail will return `null` by default, causing a `TypeError`.  Explicitly stubbing the method with `thenAnswer((_) async {})` ensures that a `Future<void>` is returned.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass Person {\n  Future<void> sleep() {\n    await Future<void>.delayed(Duration(hours: 8));\n  }\n}\n\nclass MockPerson extends Mock implements Person {}\n\nfinal person = MockPerson();\nwhen(() => person.sleep()).thenAnswer((_) async {});\n```\n\n----------------------------------------\n\nTITLE: Mixin for DiagnosticableToString in Dart\nDESCRIPTION: This snippet defines a mixin, `DiagnosticableToStringMixin`, that overrides the `toString` method. This is used to resolve `invalid_implementation_override` errors when faking classes like `ThemeData` and `ColorScheme` in Flutter, which can occur due to differences in the function signature of `toString`.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nmixin DiagnosticableToStringMixin on Object {\n  @override\n  String toString({DiagnosticLevel minLevel = DiagnosticLevel.info}) {\n    return super.toString();\n  }\n}\n\nclass FakeThemeData extends Fake\n  with DiagnosticableToStringMixin\n  implements ThemeData {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mock Cat Class in Dart\nDESCRIPTION: This snippet demonstrates how to create a mock class using Mocktail. It defines a real `Cat` class and then creates a `MockCat` class that extends `Mock` and implements `Cat`. This allows for easy mocking of the `Cat` class in tests.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:mocktail/mocktail.dart';\n\n// A Real Cat class\nclass Cat {\n  String sound() => 'meow!';\n  bool likes(String food, {bool isHungry = false}) => false;\n  final int lives = 9;\n}\n\n// A Mock Cat class\nclass MockCat extends Mock implements Cat {}\n\nvoid main() {\n  // Create a Mock Cat instance\n  final cat = MockCat();\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting a Mock in Dart\nDESCRIPTION: This snippet demonstrates how to reset a mock object using the `reset` function. Resetting a mock clears all stubs and interactions, allowing for a clean slate in subsequent tests. This is useful for isolating tests and preventing unexpected behavior from previous test cases.\nSOURCE: https://github.com/felangel/mocktail/blob/main/packages/mocktail/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nreset(cat); // Reset stubs and interactions\n```"
  }
]