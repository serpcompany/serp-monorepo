[
  {
    "owner": "dotnet",
    "repo": "sqlclient",
    "content": "TITLE: Implementing AccessTokenCallback for SqlConnection in C#\nDESCRIPTION: This code demonstrates the use of the new AccessTokenCallback property for SqlConnection to enable TokenCredential authentication. It sets the AccessTokenCallback to an asynchronous function that retrieves an access token using DefaultAzureCredential and returns a SqlAuthenticationToken. It requires the Microsoft.Data.SqlClient and Azure.Identity NuGet packages.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.2/5.2.0.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n    using Microsoft.Data.SqlClient;\n    using Azure.Identity;\n\n    const string defaultScopeSuffix = \"/.default\";\n    string connectionString = GetConnectionString();\n    using SqlConnection connection = new SqlConnection(connectionString);\n    \n    connection.AccessTokenCallback = async (authParams, cancellationToken) =>\n    {\n        var cred = new DefaultAzureCredential();\n        string scope = authParams.Resource.EndsWith(defaultScopeSuffix) ? authParams.Resource : authParams.Resource + defaultScopeSuffix;\n        AccessToken token = await cred.GetTokenAsync(new TokenRequestContext(new[] { scope }), cancellationToken);\n        return new SqlAuthenticationToken(token.Token, token.ExpiresOn);\n    }\n    \n    connection.Open();\n    Console.WriteLine(\"ServerVersion: {0}\", connection.ServerVersion);\n    Console.WriteLine(\"State: {0}\", connection.State);\n```\n\n----------------------------------------\n\nTITLE: Using AccessTokenCallback with SqlConnection in C#\nDESCRIPTION: This C# code snippet demonstrates how to use the `AccessTokenCallBack` property of the `SqlConnection` class to authenticate using a federated authentication access token. It utilizes `Azure.Identity` to obtain a token using `DefaultAzureCredential` and sets it as the `AccessTokenCallBack` for the connection, allowing the connection to open successfully with the provided token.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.2/5.2.0-preview3.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n using Microsoft.Data.SqlClient;\n    using Azure.Identity;\n\n    const string defaultScopeSuffix = \"/.default\";\n    string connectionString = GetConnectionString();\n    using SqlConnection connection = new SqlConnection(connectionString);\n    \n    connection.AccessTokenCallback = async (authParams, cancellationToken) =>\n    {\n        var cred = new DefaultAzureCredential();\n        string scope = authParams.Resource.EndsWith(defaultScopeSuffix) ? authParams.Resource : authParams.Resource + defaultScopeSuffix;\n        AccessToken token = await cred.GetTokenAsync(new TokenRequestContext(new[] { scope }), cancellationToken);\n        return new SqlAuthenticationToken(token.Token, token.ExpiresOn);\n    }\n    \n    connection.Open();\n    Console.WriteLine(\"ServerVersion: {0}\", connection.ServerVersion);\n    Console.WriteLine(\"State: {0}\", connection.State);\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Batch with SqlBatch API in C#\nDESCRIPTION: This code demonstrates the usage of the new SqlBatch API to execute multiple SQL commands within a single batch. It initializes a SqlConnection, creates a SqlBatch object, adds multiple SqlBatchCommand objects with parameters, and executes the batch using SqlDataReader to retrieve the results. It requires the Microsoft.Data.SqlClient NuGet package.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.2/5.2.0.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string str = \"Data Source=(local);Initial Catalog=Northwind;\"\n        + \"Integrated Security=SSPI;Encrypt=False\";\n        RunBatch(str);\n    }\n\n    static void RunBatch(string connString)\n    {\n        using var connection = new SqlConnection(connString);\n        connection.Open();\n\n        var batch = new SqlBatch(connection);\n\n        const int count = 10;\n        const string parameterName = \"parameter\";\n        for (int i = 0; i < count; i++)\n        {\n            var batchCommand = new SqlBatchCommand($\"SELECT @{parameterName} as value\");\n            batchCommand.Parameters.Add(new SqlParameter(parameterName, i));\n            batch.BatchCommands.Add(batchCommand);\n        }\n\n        // Optionally Prepare\n        batch.Prepare();\n\n        var results = new List<int>(count);\n        using (SqlDataReader reader = batch.ExecuteReader())\n        {\n            do\n            {\n                while (reader.Read())\n                {\n                    results.Add(reader.GetFieldValue<int>(0));\n                }\n            } while (reader.NextResult());\n        }\n        Console.WriteLine(string.Join(\", \", results));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Optimized Parameter Binding - C#\nDESCRIPTION: This snippet demonstrates how to enable the `EnableOptimizedParameterBinding` property on a `SqlCommand` to improve performance when executing commands with a large number of parameters. Enabling this property optimizes the parameter binding process, leading to faster execution times. This property is available in Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.0.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Registering Azure Key Vault Provider in C#\nDESCRIPTION: This snippet explains how to register the Azure Key Vault provider for Always Encrypted in a C# application. The provider is identified by the name \"AZURE_KEY_VAULT\". Client applications can register the custom provider by calling the SqlConnection.RegisterColumnEncryptionKeyStoreProviders() API once in the lifetime of the driver, implementing a custom Authentication Callback mechanism. Once registered, it can be used to perform Always Encrypted operations using an Azure Key Vault Key Identifier URL.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/add-ons/AzureKeyVaultProvider/1.1/1.1.1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSqlConnection.RegisterColumnEncryptionKeyStoreProviders()\n```\n\n----------------------------------------\n\nTITLE: Using RowsCopied64 Property in SqlBulkCopy C#\nDESCRIPTION: This code snippet illustrates the usage of the new RowsCopied64 property in SqlBulkCopy, which provides a long value representing the number of rows copied.  It creates a SqlConnection, SqlCommand, SqlBulkCopy object, maps columns, and writes data from a DbDataReader to a destination table. It requires the Microsoft.Data.SqlClient NuGet package.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.2/5.2.0.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n    using (SqlConnection srcConn = new SqlConnection(srcConstr))\n    using (SqlCommand srcCmd = new SqlCommand(\"select top 5 * from employees\", srcConn))\n    {\n        srcConn.Open();\n        using (DbDataReader reader = srcCmd.ExecuteReader())\n        {\n            using (SqlBulkCopy bulkcopy = new SqlBulkCopy(dstConn))\n            {\n                bulkcopy.DestinationTableName = dstTable;\n                SqlBulkCopyColumnMappingCollection ColumnMappings = bulkcopy.ColumnMappings;\n\n                ColumnMappings.Add(\"EmployeeID\", \"col1\");\n                ColumnMappings.Add(\"LastName\", \"col2\");\n                ColumnMappings.Add(\"FirstName\", \"col3\");\n\n                bulkcopy.WriteToServer(reader);\n                long rowsCopied = bulkcopy.RowsCopied64;\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering SqlColumnEncryptionAzureKeyVaultProvider in C#\nDESCRIPTION: This C# code snippet describes how to register the `SqlColumnEncryptionAzureKeyVaultProvider` in the `SqlConnection`. The provider name identifier is \"AZURE_KEY_VAULT\" and needs to be registered via `SqlConnection.RegisterColumnEncryptionKeyStoreProviders()` API. This API is called once in the lifetime of the driver to register the custom provider by implementing a custom Authentication Callback mechanism. Requires Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/add-ons/AzureKeyVaultProvider/1.2/1.2.0.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSqlConnection.RegisterColumnEncryptionKeyStoreProviders()\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Logic Provider - SqlCommand - C#\nDESCRIPTION: This snippet shows the new public API introduced in SqlCommand for registering a custom SqlRetryLogicBaseProvider implementation. This allows developers to define custom retry logic for command executions.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview1.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic SqlCommand\n{\n    public SqlRetryLogicBaseProvider RetryLogicProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TDS 8 with Encrypt=Strict Connection String\nDESCRIPTION: To use TDS 8, specify Encrypt=Strict in the connection string. Strict mode disables TrustServerCertificate (always treated as False in Strict mode). HostNameInCertificate has been added to help some Strict mode scenarios. TDS 8 begins and continues all server communication inside a secure, encrypted TLS connection.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0-preview3.md#_snippet_0\n\nLANGUAGE: Connection String\nCODE:\n```\nEncrypt=Strict\n```\n\n----------------------------------------\n\nTITLE: Setting Server Certificate in Connection String - C#\nDESCRIPTION: This code snippet shows how to set the `ServerCertificate` in the connection string when `Encrypt` is set to `Mandatory` or `Strict`. It specifies the file path to the certificate to match against the SQL Server's TLS/SSL certificate for secure connections. The certificate must be an exact match and can be in PEM, DER, or CER format.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.1/5.1.0.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"Data Source=...;Encrypt=Strict;ServerCertificate=C:\\\\certificates\\\\server.cer\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure SQL DB with Active Directory Interactive Authentication in C#\nDESCRIPTION: This C# code snippet demonstrates how to establish a connection to an Azure SQL Database using Active Directory Interactive Authentication (Multi-Factor Authentication). The connection string specifies the data source, authentication method, and initial catalog. This method is applicable to Azure SQL Database and Azure Data Warehouse within .NET Framework applications.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19239.1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstring ConnectionString =\n@\"Data Source=n9lxnyuzhv.database.windows.net; Authentication=Active Directory Interactive; Initial Catalog=testdb;\";\nusing (SqlConnection conn = new SqlConnection(ConnectionString)) {\n    conn.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Retry Logic Provider - SqlConnection - C#\nDESCRIPTION: This snippet shows the new public API introduced in SqlConnection for registering a custom SqlRetryLogicBaseProvider implementation. This allows developers to define custom retry logic for connection operations.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview1.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic SqlConnection\n{\n    public SqlRetryLogicBaseProvider RetryLogicProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure SQL DB with Active Directory Password Authentication in C#\nDESCRIPTION: This C# code snippet demonstrates connecting to Azure SQL DB using Active Directory Password Authentication.  It requires setting the `Authentication` keyword in the connection string to `Active Directory Password` and providing user credentials (UID and PWD).  This authentication method is for native or federated Azure AD users in .NET Core applications.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19239.1.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstring ConnectionString =\n@\"Data Source=n9lxnyuzhv.database.windows.net; Authentication=Active Directory Password; Initial Catalog=testdb;UID=user@domain.com;PWD=***\";\nusing (SqlConnection conn = new SqlConnection(ConnectionString)) {\n    conn.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering SqlColumnEncryptionKeyStoreProviders in C#\nDESCRIPTION: This example demonstrates how to register a custom provider, SqlColumnEncryptionAzureKeyVaultProvider, for Always Encrypted using the SqlConnection.RegisterColumnEncryptionKeyStoreProviders() API. This registration needs to happen only once during the application's lifetime.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/add-ons/AzureKeyVaultProvider/1.0/1.0.0-preview1.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nClient applications must call `SqlConnection.RegisterColumnEncryptionKeyStoreProviders()` API only once in the lifetime of driver to register this custom provider by implementing a custom Authentication Callback mechanism.\n```\n\n----------------------------------------\n\nTITLE: Connection String for Managed Identity Authentication in .NET\nDESCRIPTION: These connection string examples demonstrate how to configure the Microsoft.Data.SqlClient to use Azure Active Directory Managed Identity authentication. It covers both System Assigned and User Assigned Managed Identities.  The connection string requires server URL, database name and authentication method.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview2.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// For System Assigned Managed Identity\n\"Server:{serverURL}; Authentication=Active Directory MSI; Initial Catalog={db};\"\n\n// For System Assigned Managed Identity\n\"Server:{serverURL}; Authentication=Active Directory Managed Identity; Initial Catalog={db};\"\n\n// For User Assigned Managed Identity\n\"Server:{serverURL}; Authentication=Active Directory MSI; User Id={ObjectIdOfManagedIdentity}; Initial Catalog={db};\"\n\n// For User Assigned Managed Identity\n\"Server:{serverURL}; Authentication=Active Directory Managed Identity; User Id={ObjectIdOfManagedIdentity}; Initial Catalog={db};\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Key Store Providers on SqlCommand C#\nDESCRIPTION: This code snippet demonstrates how to register custom master key store providers on a SqlCommand instance. This provides granular control over key store provider access at the command level, useful for managing column encryption in specific scenarios. A dictionary is used to map provider names to SqlColumnEncryptionKeyStoreProvider instances.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlCommand \n{\n        public void RegisterColumnEncryptionKeyStoreProvidersOnCommand(IDictionary<string, SqlColumnEncryptionKeyStoreProvider> customProviders)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Certificate in Connection String C#\nDESCRIPTION: This code snippet demonstrates how to set the `ServerCertificate` option in a connection string when using `Encrypt=Strict` or `Encrypt=Mandatory` for the Microsoft.Data.SqlClient library. It specifies the path to the server certificate file.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.1/5.1.0-preview2.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"Data Source=...;Encrypt=Strict;ServerCertificate=C:\\\\certificates\\\\server.cer\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure SQL with Active Directory Interactive Authentication in C#\nDESCRIPTION: This code snippet demonstrates how to connect to an Azure SQL Database using Active Directory Interactive Authentication (Azure MFA). The connection string is configured with the `Authentication` keyword set to `Active Directory Interactive`.  This method might trigger a pop-up dialog box for user validation. Requires the Microsoft.Data.SqlClient library.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19269.1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstring ConnectionString =\n@\"Data Source=n9lxnyuzhv.database.windows.net; Authentication=Active Directory Interactive; Initial Catalog=testdb;\";\nusing (SqlConnection conn = new SqlConnection(ConnectionString)) {\n    conn.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Optimized Parameter Binding in SqlCommand (C#)\nDESCRIPTION: This code snippet demonstrates the addition of the `EnableOptimizedParameterBinding` property to the `SqlCommand` class in Microsoft.Data.SqlClient. Setting this property to `true` disables sending parameter names to the SQL server during command execution, potentially improving performance when dealing with a large number of parameters. The property is disabled by default.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.0.md#_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\npublic class SqlCommand\n{\n\tpublic bool EnableOptimizedParameterBinding { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure SQL with Active Directory Password Authentication in C#\nDESCRIPTION: This code snippet demonstrates how to connect to an Azure SQL Database using Azure Active Directory Password Authentication.  The connection string is configured with the `Authentication` keyword set to `Active Directory Password`, and the user's credentials (UID and PWD) are included. This method is applicable for .NET Core applications. Requires the Microsoft.Data.SqlClient library.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19269.1.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstring ConnectionString =\n@\"Data Source=n9lxnyuzhv.database.windows.net; Authentication=Active Directory Password; Initial Catalog=testdb;UID=user@domain.com;PWD=***\";\nusing (SqlConnection conn = new SqlConnection(ConnectionString)) {\n    conn.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: SqlAuthenticationProviders Configuration Section Example (XML)\nDESCRIPTION: This XML code demonstrates how to configure the `SqlAuthenticationProviders` section in the application configuration file for backwards compatibility, including the `applicationClientId` attribute. This allows specifying the application client ID for Azure Active Directory authentication using configuration.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section name=\"SqlAuthenticationProviders\"\n\t\t\t\t\t\t type=\"Microsoft.Data.SqlClient.SqlAuthenticationProviderConfigurationSection, Microsoft.Data.SqlClient\" />\n\t</configSections>\n\t<SqlAuthenticationProviders applicationClientId =\"<GUID>\" />\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Authentication Callbacks C#\nDESCRIPTION: This code snippet showcases how to set callbacks for interactive authentication using the `ActiveDirectoryAuthenticationProvider` class. It includes methods to set the parent window for .NET Framework and .NET Standard, as well as a callback to acquire the authorization code.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview1.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ActiveDirectoryAuthenticationProvider\n{\n    // For .NET Framework targeted applications only\n    public void SetIWin32WindowFunc(Func<IWin32Window> iWin32WindowFunc);\n\n    // For .NET Standard targeted applications only\n    public void SetParentActivityOrWindowFunc(Func<object> parentActivityOrWindowFunc);\n\n    // For .NET Framework, .NET Core and .NET Standard targeted applications\n    public void SetAcquireAuthorizationCodeAsyncCallback(Func<Uri, Uri, CancellationToken, Task<Uri>> acquireAuthorizationCodeAsyncCallback);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Device Code Flow Callback in ActiveDirectoryAuthenticationProvider (C#)\nDESCRIPTION: This C# code snippet demonstrates how to set the device code flow callback method within the `ActiveDirectoryAuthenticationProvider` class. This allows customization of the device code flow authentication process when using Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ActiveDirectoryAuthenticationProvider\n{\n    // For .NET Framework, .NET Core and .NET Standard targeted applications\n    public void SetDeviceCodeFlowCallback(Func<DeviceCodeResult, Task> deviceCodeFlowCallbackMethod)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Logic in App.config - XML\nDESCRIPTION: This example shows how to use the new configuration sections in the app.config file to define retry logic for SqlConnection and SqlCommand. It includes enabling the safety switch and configuring retry methods and parameters.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview1.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"SqlConfigurableRetryLogicConnection\"\n             type=\"Microsoft.Data.SqlClient.SqlConfigurableRetryConnectionSection, Microsoft.Data.SqlClient\"/>\n    <section name=\"SqlConfigurableRetryLogicCommand\"\n             type=\"Microsoft.Data.SqlClient.SqlConfigurableRetryCommandSection, Microsoft.Data.SqlClient\"/>\n\n    <section name=\"AppContextSwitchOverrides\"\n             type=\"Microsoft.Data.SqlClient.AppContextSwitchOverridesSection, Microsoft.Data.SqlClient\"/>\n  </configSections>\n\n  <!--Enable safety switch in .NET Core-->\n  <AppContextSwitchOverrides value=\"Switch.Microsoft.Data.SqlClient.EnableRetryLogic=true\"/>\n\n  <!--Retry method for SqlConnection-->\n  <SqlConfigurableRetryLogicConnection retryMethod =\"CreateFixedRetryProvider\" numberOfTries =\"3\" deltaTime =\"00:00:10\" maxTime =\"00:00:30\"\n                                    transientErrors=\"40615\" />\n\n  <!--Retry method for SqlCommand containing SELECT queries-->\n  <SqlConfigurableRetryLogicCommand retryMethod =\"CreateIncrementalRetryProvider\" numberOfTries =\"5\" deltaTime =\"00:00:10\" maxTime =\"00:01:10\"\n                                    authorizedSqlCondition=\"\\b(SELECT)\\b\" transientErrors=\"102, 4060, 0\"/>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring HostNameInCertificate in Connection String\nDESCRIPTION: HostNameInCertificate can be specified in the connection string when using aliases to connect with encryption to a server that has a server certificate with a different name or alternate subject name than the name used by the client to identify the server (DNS aliases, for example). This parameter is used in conjunction with Encrypt=Strict.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0-preview3.md#_snippet_1\n\nLANGUAGE: Connection String\nCODE:\n```\nHostNameInCertificate=MyDnsAliasName\n```\n\n----------------------------------------\n\nTITLE: Setting Attestation Protocol to None in Connection String (C#)\nDESCRIPTION: This C# connection string example demonstrates how to set the attestation protocol to `None` when connecting to a SQL Server instance using the Microsoft.Data.SqlClient library. This allows users to forgo enclave attestation for VBS enclaves, making the enclave attestation URL property optional. This configuration is useful in scenarios where enclave attestation is not required.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0.md#_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n//Attestation protocol NONE with no URL\n\"Data Source = {server}; Initial Catalog = {db}; Column Encryption Setting = Enabled; Attestation Protocol = None;\"\n```\n\n----------------------------------------\n\nTITLE: Data Classification API in C#\nDESCRIPTION: This C# snippet demonstrates the Data Classification API provided by Microsoft.Data.SqlClient.DataClassification namespace. It showcases the classes and properties available to retrieve sensitivity and classification information about data retrieved via SqlDataReader. The API allows you to access ColumnSensitivities, InformationTypes, and Labels associated with the data.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19249.1.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS 1.3 via Registry Key\nDESCRIPTION: This snippet shows the registry key that can be modified to disable TLS 1.3 and revert to TLS 1.2 for SQL connections. This can be used as an alternative workaround for TLS 1.3 issues on .NET Core when using Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.1/5.1.0-preview1.md#_snippet_1\n\nLANGUAGE: regedit\nCODE:\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client\\Enabled\n```\n\n----------------------------------------\n\nTITLE: Setting Column Encryption Key Cache TTL\nDESCRIPTION: This C# code snippet shows the API introduced on the SqlColumnEncryptionKeyStoreProvider base class to set the cache time to live for column encryption keys. The default value of ColumnEncryptionKeyCacheTtl is 0. The implementation enables custom key store providers to include column encryption key cache to provide caching support to locally registered providers.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview3.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class SqlColumnEncryptionKeyStoreProvider\n{\n    // The default value of Column Encryption Key Cache Time to Live is 0.\n    // Provider's local cache is disabled for globally registered providers.\n    // Custom key store provider implementation must include column encryption key cache to provide caching support to locally registered providers.\n    public virtual TimeSpan? ColumnEncryptionKeyCacheTtl { get; set; } = new TimeSpan(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Retry Logic via AppContext - C#\nDESCRIPTION: This snippet demonstrates how to enable the configurable retry logic feature using the .NET AppContext switch. This must be enabled before the retry logic can be used in SqlConnection or SqlCommand.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.EnableRetryLogic\", true);\n```\n\n----------------------------------------\n\nTITLE: Creating ActiveDirectoryAuthenticationProvider with Client ID in C#\nDESCRIPTION: This code snippet shows how to create an instance of `ActiveDirectoryAuthenticationProvider` with a user-defined application client ID.  This allows the Microsoft Authentication Library to use the specified client ID when authenticating with Azure Active Directory. Requires defining the `APP_CLIENT_ID` and a connection string.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview2.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstring APP_CLIENT_ID = \"<GUID>\";\nSqlAuthenticationProvider customAuthProvider = new ActiveDirectoryAuthenticationProvider(APP_CLIENT_ID);\nSqlAuthenticationProvider.SetProvider(SqlAuthenticationMethod.ActiveDirectoryInteractive, customAuthProvider);\n\nusing (SqlConnection sqlConnection = new SqlConnection(\"<connection_string>\")\n{\n\t\tsqlConnection.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: App Context Switch for System Default Protocols - C#\nDESCRIPTION: This snippet shows how to enable an App Context switch to force the driver to use the Operating System's client protocols, including TLS versions supported by the OS. This is useful when TLS 1.3, which is not supported by the driver by default, needs to be enabled. The switch is named `Switch.Microsoft.Data.SqlClient.UseSystemDefaultSecureProtocols`.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.0.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Enabling Managed SNI for TLS 1.3 on .NET Core (Windows)\nDESCRIPTION: This code snippet demonstrates how to enable the managed SNI on Windows context switch when using Microsoft.Data.SqlClient with .NET Core on Windows 11 to address TLS 1.3 related issues. This workaround mitigates connection problems caused by timeouts during the TLS handshake.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.1/5.1.0-preview1.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows\", true);\n```\n\n----------------------------------------\n\nTITLE: SqlAuthenticationProviderConfigurationSection ApplicationClientId Property (C#)\nDESCRIPTION: This C# code defines the `ApplicationClientId` configuration property within the `SqlAuthenticationProviderConfigurationSection` and `SqlClientAuthenticationProviderConfigurationSection` classes. This allows specifying the application client ID in the application configuration file.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class SqlAuthenticationProviderConfigurationSection : ConfigurationSection\n{\n\t\t...\n\t\t[ConfigurationProperty(\"applicationClientId\", IsRequired = false)]\n\t\tpublic string ApplicationClientId => this[\"applicationClientId\"] as string;\n}\n\n// Inheritance\ninternal class SqlClientAuthenticationProviderConfigurationSection : SqlAuthenticationProviderConfigurationSection\n{ ... }\n```\n\n----------------------------------------\n\nTITLE: Using ActiveDirectoryAuthenticationProvider with Application Client ID (C#)\nDESCRIPTION: This C# code demonstrates how to create an instance of `ActiveDirectoryAuthenticationProvider` with a specified application client ID and use it with a `SqlConnection`. It sets the custom provider for `ActiveDirectoryInteractive` authentication.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring APP_CLIENT_ID = \"<GUID>\";\nSqlAuthenticationProvider customAuthProvider = new ActiveDirectoryAuthenticationProvider(APP_CLIENT_ID);\nSqlAuthenticationProvider.SetProvider(SqlAuthenticationMethod.ActiveDirectoryInteractive, customAuthProvider);\n\nusing (SqlConnection sqlConnection = new SqlConnection(\"<connection_string>\")\n{\n\t\tsqlConnection.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Insecure TLS Warnings in Microsoft.Data.SqlClient (C#)\nDESCRIPTION: This C# code snippet demonstrates how to suppress the insecure TLS warning in Microsoft.Data.SqlClient when connecting with `Encrypt = false` and using a TLS version less than 1.2. The AppContext switch `Switch.Microsoft.Data.SqlClient.SuppressInsecureTLSWarning` must be enabled at application startup to suppress the warning.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0.md#_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nSwitch.Microsoft.Data.SqlClient.SuppressInsecureTLSWarning\n```\n\n----------------------------------------\n\nTITLE: ActiveDirectoryAuthenticationProvider Constructor with Application Client ID (C#)\nDESCRIPTION: This C# code defines a new constructor for the `ActiveDirectoryAuthenticationProvider` class that accepts an application client ID. This allows users to specify a user-defined application client ID for Azure Active Directory authentication with Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic ActiveDirectoryAuthenticationProvider(string applicationClientId)\n```\n\n----------------------------------------\n\nTITLE: Setting Device Code Flow Callback C#\nDESCRIPTION: This code snippet demonstrates how to set the Device Code Flow callback mechanism using the `ActiveDirectoryAuthenticationProvider` class. It defines a method that takes a `DeviceCodeResult` and returns a `Task` to customize the authentication flow.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview1.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ActiveDirectoryAuthenticationProvider\n{\n    // For .NET Framework, .NET Core and .NET Standard targeted applications\n    public void SetDeviceCodeFlowCallback(Func<DeviceCodeResult, Task> deviceCodeFlowCallbackMethod)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Row Version Null Behavior in .NET\nDESCRIPTION: This code snippet demonstrates how to enable the legacy behavior where SqlDataReader returns an empty byte[] instead of DBNull for row version. This is achieved by setting an AppContext switch on application startup.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview2.md#_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\n\"Switch.Microsoft.Data.SqlClient.LegacyRowVersionNullBehavior\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server SPN in Connection String\nDESCRIPTION: The ServerSPN/Server SPN and FailoverServerSPN/Failover Server SPN connection string settings can be used to override the auto-generated server SPNs used in the library when authenticating with integrated authentication in a domain environment.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0-preview3.md#_snippet_2\n\nLANGUAGE: Connection String\nCODE:\n```\nServerSPN=<SPN value>\nFailoverServerSPN=<Failover SPN value>\n```\n\n----------------------------------------\n\nTITLE: Connection String with Command Timeout in .NET\nDESCRIPTION: This connection string example demonstrates how to specify the 'Command Timeout' property in the connection string. This allows overriding the default command timeout of 30 seconds for all commands executed with the connection.  The value is specified in seconds.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview2.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n\"Server:{serverURL}; Initial Catalog={db}; Integrated Security=true; Command Timeout=60\"\n```\n\n----------------------------------------\n\nTITLE: SqlClient Connection String with Attestation Protocol None - C#\nDESCRIPTION: This code snippet demonstrates a connection string example using the `None` attestation protocol with no URL. This configuration allows users to forgo enclave attestation for VBS enclaves. The properties Data Source, Initial Catalog, and Column Encryption Setting are also included in the connection string.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.1/3.1.0.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Attestation protocol NONE with no URL\n\"Data Source = {server}; Initial Catalog = {db}; Column Encryption Setting = Enabled; Attestation Protocol = None;\"\n```\n\n----------------------------------------\n\nTITLE: Opening SqlConnection with Overrides in C#\nDESCRIPTION: This code demonstrates how to use the `SqlConnection.OpenAsync()` method with `SqlConnectionOverrides` to disable the ten-second delay and automatic connection retries triggered by transient errors.  It requires a valid connection string and a cancellation token.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/6.0/6.0.0.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing(SqlConnection sqlConnection = new SqlConnection(\"Data Source=(local);Integrated Security=true;Initial Catalog=AdventureWorks;\"))\n{\n    await sqlConnection.OpenAsync(SqlConnectionOverrides.OpenWithoutRetry, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration for Secure Enclaves\nDESCRIPTION: This snippet demonstrates the required connection string format for utilizing the secure enclave feature in Microsoft.Data.SqlClient. It highlights the inclusion of the attestation protocol and URL, essential parameters for secure enclave attestation.  The parameters Attestation Protocol and Enclave Attestation Url are key to enabling the Always Encrypted with secure enclaves functionality.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.1/1.1.0.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`Attestation Protocol=HGS;Enclave Attestation Url=<attestation_url_for_HGS>`\n```\n\n----------------------------------------\n\nTITLE: Suppressing TLS Security Warnings in Microsoft.Data.SqlClient\nDESCRIPTION: This snippet shows how to suppress TLS security warnings when connecting to a SQL Server with a protocol lower than TLS 1.2 using the `Encrypt=false` option in the connection string. It requires setting an `AppContext` switch at application startup.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.1.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n`Switch.Microsoft.Data.SqlClient.SuppressInsecureTLSWarning`\n```\n\n----------------------------------------\n\nTITLE: Connection String with Attestation Protocol\nDESCRIPTION: Example connection string demonstrating the use of attestation protocol and attestation URL for the enclave feature when using Always Encrypted with secure enclaves. The `Attestation Protocol` is set to `HGS` and the `Enclave Attestation Url` is set to a placeholder value that should be replaced with the actual URL.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.1/1.1.1.md#_snippet_0\n\nLANGUAGE: Connection String\nCODE:\n```\n`Attestation Protocol=HGS;Enclave Attestation Url=<attestation_url_for_HGS>`\n```\n\n----------------------------------------\n\nTITLE: Registry Key to Disable TLS 1.3\nDESCRIPTION: This describes the registry key that can be modified to disable TLS 1.3 and force the connection to use TLS 1.2. This is an alternative workaround for the TLS 1.3 issue on .NET Core with Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: registry\nCODE:\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client\\Enabled\n```\n\n----------------------------------------\n\nTITLE: CEK Data: FINALCELL_CEK (Variant 2)\nDESCRIPTION: This snippet represents the final CEK data based on the second PLAINTEXT/CIPHERTEXT_CEK data, which includes the prefix, ciphertext and signed cek values. It is likely the result of concatenating various components after encryption, hashing, and signing operations.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaselineRsa.txt#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[FINALCELL_CEK] = 0x016e000001430075007200720065006e00740055007300650072002f004d0079002f006200330063003600360066006600620065003100640062003500370034003100390037003900320065003200340061006100390037003000340035003500620066006100630033003000370035003700b1024329e17a82507a152ae5ffc255927bdb5e000fecba8e77525b2c30fc2a4a886d012770659fc150a0f4971435c716bb9f10da05606b48b6308e5efbb66389109a46031e92df2a1728ea9968188dd2b2339b2acc4b4e2ec6fb7dcfd3ba4c217ecf27bb8cdec470c2f5abb35d6b74ff32bd3023b072ec320d628ad297380d89f45f647117ed2ed99a2c29e9f46b6fb54593807d2dee77889922dd02cfd37996209158ba656e690ff4b9fb4c9370549660717bc2fe7d5d04987fb3fcb3d1f0b426a40b885c6164d24289447627215cc46ad51ee64fd3331a32cac418af18efbf5ebfa2033f6d62cfbd23481db9a5cf46375cd058fc3e42c5024953f92260b7f780b2d3b43fd897e77e20ae2805897ea3f20f852ff2e4f116cafd6ad694fa4377644b4d60f895e6b4d528009559a2bcbefa54ec9e9320e23938223fdddded2503fbf4d09348115cdfdc43446299d1ff64321d0a4ba229079a9150791312e55fbbcb7d272c01802fbc3ca1dd27fcae79de077edc480eb5b14ddc0719395e967689d0bbc3093f8931413af7a658a5fea31eb3f7ead8bd465399c72778cc1cb7fbd390c01434c64aa4555b033e1852f72938af7997247771868b95c0594c4821393b2b263d2c5da1ac70fced8e0cebb5766134378ca71e3a71ae2eeb4d743ddc8f901c27fe30dc5696b2151f788defdd7d8502dc3e5e7dbd13230f4dd3ea32ab8713\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration for Enclaves\nDESCRIPTION: Example demonstrating how to configure a connection string to utilize the enclave feature in Microsoft.Data.SqlClient, specifying the attestation protocol and URL.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.1/1.1.2.md#_snippet_0\n\nLANGUAGE: ConnectionString\nCODE:\n```\n`Attestation Protocol=HGS;Enclave Attestation Url=<attestation_url_for_HGS>`\n```\n\n----------------------------------------\n\nTITLE: SqlClientAuthenticationProviders Configuration Section Example (XML)\nDESCRIPTION: This XML code demonstrates how to configure the `SqlClientAuthenticationProviders` section in the application configuration file, including the `applicationClientId` attribute. This allows specifying the application client ID for Azure Active Directory authentication using configuration.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section name=\"SqlClientAuthenticationProviders\"\n\t\t\t\t\t\t type=\"Microsoft.Data.SqlClient.SqlClientAuthenticationProviderConfigurationSection, Microsoft.Data.SqlClient\" />\n\t</configSections>\n\t<SqlClientAuthenticationProviders applicationClientId =\"<GUID>\" />\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Data Classification API Example in SqlDataReader\nDESCRIPTION: This C# code snippet illustrates the Data Classification API enhancements within the SqlDataReader class, showcasing the addition of the SensitivityClassification property for accessing data sensitivity and classification information. It outlines the structure and members of the related classes within the Microsoft.Data.SqlClient.DataClassification namespace, providing insight into how to retrieve column sensitivities, information types, and labels. The API is available in Azure SQL Database and Microsoft SQL Server 2019 since CTP 2.0.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19128.1-Preview.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Always Encrypted Connection String\nDESCRIPTION: This snippet demonstrates how to configure a connection string to use Always Encrypted with secure enclaves, specifically using the HGS attestation protocol. It includes the required attestation protocol and attestation URL parameters.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.1/1.1.0-preview2.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n`Attestation Protocol=HGS;Enclave Attestation Url=<attestation_url_for_HGS>`\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext Switch for Decimal Truncation - C#\nDESCRIPTION: This C# code snippet demonstrates how to set an AppContext switch to enable decimal truncation behavior, providing backwards compatibility with older versions where decimal data scale was truncated instead of rounded.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.TruncateScaledDecimal\", true);\n```\n\n----------------------------------------\n\nTITLE: Connection String with Attestation Protocol\nDESCRIPTION: Example of a connection string that includes the required attestation protocol and attestation URL for using the enclave feature with Always Encrypted.  This connection string requires the attestation URL for Host Guardian Service (HGS).\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.1/1.1.4.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAttestation Protocol=HGS;Enclave Attestation Url=<attestation_url_for_HGS>\n```\n\n----------------------------------------\n\nTITLE: Manual Test Configuration (config.json)\nDESCRIPTION: This is an example configuration file for running manual tests. It specifies connection strings for different SQL Server configurations (TCP, Named Pipes, Azure with enclaves), enables/disables features like enclaves and tracing, and provides authentication details for Azure Active Directory and Azure Key Vault. This config.json file needs to be created by copying and renaming config.default.json and updating values based on the environment.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TCPConnectionString\": \"Server={servername};Database={Database_Name};Trusted_Connection=True;\",\n  \"NPConnectionString\": \"Server=\\\\\\\\{servername}\\\\pipe\\\\sql\\\\query;Database={Database_Name};Trusted_Connection=True;\",\n  \"TCPConnectionStringHGSVBS\": \"Server=tcp:{servername}; Database={Database_Name}; UID={UID}; PWD={PWD}; Attestation Protocol = HGS; Enclave Attestation Url = {AttestationURL};\",\n  \"TCPConnectionStringNoneVBS\": \"Server=tcp:{servername}; Database={Database_Name}; UID={UID}; PWD={PWD}; Attestation Protocol = NONE;\",\n  \"TCPConnectionStringAASSGX\": \"Server=tcp:{servername}; Database={Database_Name}; UID={UID}; PWD={PWD}; Attestation Protocol = AAS; Enclave Attestation Url = {AttestationURL};\",\n  \"EnclaveEnabled\": false,\n  \"TracingEnabled\": false,\n  \"AADAuthorityURL\": \"https://login.windows.net/<tenant>\",\n  \"AADPasswordConnectionString\": \"Data Source={server.database.windows.net}; Initial Catalog={Azure_DB_Name};Authentication=Active Directory Password; User ID={AAD_User}; Password={AAD_User_Password};\",\n  \"AADSecurePrincipalId\": \"{Application ID}\",\n  \"AADSecurePrincipalSecret\": \"{Secret}\",\n  \"AzureKeyVaultURL\": \"https://{keyvaultname}.vault.azure.net/\",\n  \"AzureKeyVaultTenantId\": \"_{Tenant ID of Active Directory}_\",\n  \"SupportsIntegratedSecurity\": true,\n  \"LocalDbAppName\": \"Name of Local Db App to connect to.\",\n  \"LocalDbSharedInstanceName\": \"Name of shared instance of LocalDB.\",\n  \"FileStreamDirectory\": \"D:\\\\escaped\\\\absolute\\\\path\\\\to\\\\directory\\\\\",\n  \"UseManagedSNIOnWindows\": true,\n  \"DNSCachingConnString\": \"\",\n  \"EnclaveAzureDatabaseConnString\": \"\",\n  \"ManagedIdentitySupported\": true,\n  \"IsManagedInstance\": false,\n  \"PowerShellPath\": \"D:\\\\escaped\\\\absolute\\\\path\\\\to\\\\PowerShell.exe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: GetEnclaveSession Definition Update\nDESCRIPTION: This snippet highlights the breaking change in the `GetEnclaveSession` method within the `SqlColumnEncryptionEnclaveProvider` class. The new definition includes the bool generateCustomData, out byte[] customData and out int customDataLength parameters.  This change affects both .NET Framework and .NET Core targeting applications.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0-preview1.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Old Definition\npublic abstract void GetEnclaveSession(string serverName, string attestationUrl, out Microsoft.Data.SqlClient.SqlEnclaveSession sqlEnclaveSession, out long counter);\n\n// New Definition\npublic abstract void GetEnclaveSession(string serverName, string attestationUrl, bool generateCustomData, out Microsoft.Data.SqlClient.SqlEnclaveSession sqlEnclaveSession, out long counter, out byte[] customData, out int customDataLength);\n```\n\n----------------------------------------\n\nTITLE: Event Counter Monitoring Command - CMD\nDESCRIPTION: These commands are used to monitor event counters using .NET Core global CLI tools like `dotnet-counters` and `PerfView`. They specify `Microsoft.Data.SqlClient.EventSource` as the provider name to collect relevant data.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview1.md#_snippet_5\n\nLANGUAGE: CMD\nCODE:\n```\ndotnet-counters monitor Microsoft.Data.SqlClient.EventSource -p\nPerfView /onlyProviders=*Microsoft.Data.SqlClient.EventSource:EventCounterIntervalSec=1 collect\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Logging in SNI C#\nDESCRIPTION: This code snippet demonstrates how to enable trace and flow events in the Native SNI component using the `SqlClientEventSource`. It shows how to send commands to the `EventSource` to control the type of events being captured. This requires a tool like Xperf for event capture.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview1.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Enables trace events:\nEventSource.SendCommand(eventSource, (EventCommand)8192, null);\n\n// Enables flow events:\nEventSource.SendCommand(eventSource, (EventCommand)16384, null);\n\n// Enables both trace and flow events:\nEventSource.SendCommand(eventSource, (EventCommand)(8192 | 16384), null);\n```\n\n----------------------------------------\n\nTITLE: Run Benchmarks in Release Configuration (PowerShell)\nDESCRIPTION: This PowerShell command executes the benchmarks in Release configuration, targeting the net9.0 framework. The -c parameter specifies the configuration, and the -f parameter specifies the target framework.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\n> dotnet run -c Release -f net9.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Logic via XML Configuration\nDESCRIPTION: This XML code snippet demonstrates how to configure retry logic for SqlConnection and SqlCommand using configuration sections in an application configuration file.  It specifies the retry method, number of retries, time intervals, and transient errors. It also includes an example of enabling the safety switch in .NET Core using AppContextSwitchOverrides.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n    <section name=\"SqlConfigurableRetryLogicConnection\"\n             type=\"Microsoft.Data.SqlClient.SqlConfigurableRetryConnectionSection, Microsoft.Data.SqlClient\"/>\n    <section name=\"SqlConfigurableRetryLogicCommand\"\n             type=\"Microsoft.Data.SqlClient.SqlConfigurableRetryCommandSection, Microsoft.Data.SqlClient\"/>\n\n    <section name=\"AppContextSwitchOverrides\"\n             type=\"Microsoft.Data.SqlClient.AppContextSwitchOverridesSection, Microsoft.Data.SqlClient\"/>\n  </configSections>\n\n  <!--Enable safety switch in .NET Core-->\n  <AppContextSwitchOverrides value=\"Switch.Microsoft.Data.SqlClient.EnableRetryLogic=true\"/>\n\n  <!--Retry method for SqlConnection-->\n  <SqlConfigurableRetryLogicConnection retryMethod =\"CreateFixedRetryProvider\" numberOfTries =\"3\" deltaTime =\"00:00:10\" maxTime =\"00:00:30\"\n                                    transientErrors=\"40615\" />\n\n  <!--Retry method for SqlCommand containing SELECT queries-->\n  <SqlConfigurableRetryLogicCommand retryMethod =\"CreateIncrementalRetryProvider\" numberOfTries =\"5\" deltaTime =\"00:00:10\" maxTime =\"00:01:10\"\n                                    authorizedSqlCondition=\"\\b(SELECT)\\b\" transientErrors=\"102, 4060, 0\"/>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Key Store Providers\nDESCRIPTION: These C# code snippets demonstrate how to register custom key store providers on SqlConnection and SqlCommand instances. These methods enable multi-tenant applications to control key store access for column encryption and decryption. The code shows the method signatures for RegisterColumnEncryptionKeyStoreProvidersOnConnection and RegisterColumnEncryptionKeyStoreProvidersOnCommand.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview3.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlConnection\n{\n        public void RegisterColumnEncryptionKeyStoreProvidersOnConnection(IDictionary<string, SqlColumnEncryptionKeyStoreProvider> customProviders)\n}\npublic class SqlCommand \n{\n        public void RegisterColumnEncryptionKeyStoreProvidersOnCommand(IDictionary<string, SqlColumnEncryptionKeyStoreProvider> customProviders)\n}\n```\n\n----------------------------------------\n\nTITLE: Run Functional Tests on Unix (netcoreapp)\nDESCRIPTION: This command runs the functional tests for Microsoft.Data.SqlClient on Unix with .NET Core. It uses `dotnet test` with the AnyCPU platform, specified configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src/Microsoft.Data.SqlClient/tests/FunctionalTests/Microsoft.Data.SqlClient.Tests.csproj\" -p:Platform=\"AnyCPU\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Unixnetcoreapp\" --no-build -v n --filter \"category!=nonnetcoreapptests&category!=failing&category!=nonlinuxtests&category!=nonuaptests\"\n```\n\n----------------------------------------\n\nTITLE: Configure Benchmark Settings using JSON\nDESCRIPTION: This JSON snippet configures the benchmark settings, including the connection string, usage of Managed SNI on Windows, and options for individual benchmarks like enabling/disabling, launch count, iteration count, invocation count, warmup count, and row count.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ConnectionString\": \"Server=tcp:localhost; Integrated Security=true; Initial Catalog=sqlclient-perf-db;\",\n  \"UseManagedSniOnWindows\": false,\n  \"Benchmarks\":\n  {\n    \"SqlConnectionRunnerConfig\":\n    {\n      \"Enabled\": true,\n      \"LaunchCount\": 1,\n      \"IterationCount\": 50,\n      \"InvocationCount\":30,\n      \"WarmupCount\": 5,\n      \"RowCount\": 0\n    },\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Functional Tests on Windows (netcoreapp)\nDESCRIPTION: This command runs the functional tests for Microsoft.Data.SqlClient on Windows with .NET Core. It uses `dotnet test` with the AnyCPU platform, specified configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\FunctionalTests\\Microsoft.Data.SqlClient.Tests.csproj\" -p:Platform=\"AnyCPU\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetcoreapp\" --no-build -v n --filter \"category!=nonnetcoreapptests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: Run Benchmarks in Release Configuration (Bash)\nDESCRIPTION: This Bash command executes the benchmarks in Release configuration, targeting the net9.0 framework. The -c parameter specifies the configuration, and the -f parameter specifies the target framework.  It also shows how to optionally specify the RUNNER_CONFIG environment variable inline with the command.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_32\n\nLANGUAGE: Bash\nCODE:\n```\n# Omit RUNNER_CONFIG if you exported it earlier, or if you're using the\n# copy prepared by the build.\n$ dotnet run -c Release -f net9.0\n\n$ RUNNER_CONFIG=~/.configs/runnerconfig.json dotnet run -c Release -f net9.0\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Batch with Microsoft.Data.SqlClient in C#\nDESCRIPTION: This C# code demonstrates the usage of the `SqlBatch` API in the `Microsoft.Data.SqlClient` library. It creates a batch of SQL commands, adds parameters to each command, and executes the batch using a `SqlDataReader`. The results are then read and printed to the console. Requires a SQL Server instance and the `Microsoft.Data.SqlClient` NuGet package.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.2/5.2.0-preview4.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string str = \"Data Source=(local);Initial Catalog=Northwind;\" +\n        \"Integrated Security=SSPI;Encrypt=False\";\n        RunBatch(str);\n    }\n\n    static void RunBatch(string connString)\n    {\n        using var connection = new SqlConnection(connString);\n        connection.Open();\n\n        var batch = new SqlBatch(connection);\n\n        const int count = 10;\n        const string parameterName = \"parameter\";\n        for (int i = 0; i < count; i++)\n        {\n            var batchCommand = new SqlBatchCommand($\"SELECT @{parameterName} as value\");\n            batchCommand.Parameters.Add(new SqlParameter(parameterName, i));\n            batch.BatchCommands.Add(batchCommand);\n        }\n\n        // Optionally Prepare\n        batch.Prepare();\n\n        var results = new List<int>(count);\n        using (SqlDataReader reader = batch.ExecuteReader())\n        {\n            do\n            {\n                while (reader.Read())\n                {\n                    results.Add(reader.GetFieldValue<int>(0));\n                }\n            } while (reader.NextResult());\n        }\n        Console.WriteLine(string.Join(\", \", results));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Manual Tests on Windows (netcoreapp)\nDESCRIPTION: This command runs the manual tests for Microsoft.Data.SqlClient on Windows with .NET Core. It uses `dotnet test` with the AnyCPU platform, specified configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\ManualTests\\Microsoft.Data.SqlClient.ManualTesting.Tests.csproj\" -p:Platform=\"AnyCPU\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetcoreapp\" --no-build -v n --filter \"category!=nonnetcoreapptests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tag for SQLClient Verification\nDESCRIPTION: Defines a tag as a hexadecimal string. This tag is associated with the ciphertext and is used for integrity verification or authentication purposes within SQLClient. Relies on hexadecimal string parsing.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n[TAG]        = 0x6f8730a32e8c8ef796105f4307b8fedf510cd85e7f04861084a5c0bf8aff341e\n```\n\n----------------------------------------\n\nTITLE: Tag Example\nDESCRIPTION: This snippet presents an example of a tag, which is a cryptographic authentication code associated with the ciphertext.  It is used to verify the integrity and authenticity of the encrypted data.  It is also represented as a hexadecimal string.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[TAG]        = 0xd243e34022380d5fc8f352a3d5b8dc82f6105921fa8a5564ba6fe69be55fa930\n```\n\n----------------------------------------\n\nTITLE: Data Classification API - SqlDataReader Extension C#\nDESCRIPTION: This C# code snippet demonstrates the API for Data Classification, which exposes read-only Data Sensitivity and Classification information about objects retrieved via SqlDataReader. It defines classes related to sensitivity classification, including ColumnSensitivity, InformationType, Label, SensitivityClassification, and SensitivityProperty. The SensitivityClassification property is added as an extension to the SqlDataReader class.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19189.1-Preview.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Classification API in C#\nDESCRIPTION: This code snippet presents the Data Classification API available through the Microsoft.Data.SqlClient library. It exposes read-only Data Sensitivity and Classification information about objects retrieved via SqlDataReader when the underlying source supports it.  This feature is available in Azure SQL Database and Microsoft SQL Server 2019 since CTP 2.0.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19269.1.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CEK Data: PLAINTEXT_CEK and CIPHERTEXT_CEK\nDESCRIPTION: These snippets shows the plaintext and its corresponding ciphertext after encryption. The CIPHERTEXT_LEN indicates the length of the encrypted data. PATH_CEK indicates where the key is stored. The transformation from plaintext to ciphertext highlights the core function of the encryption process.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaselineRsa.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[PLAINTEXT_CEK]  = 0x7f9dbb9cad20a15491f688bb604f6ea185b6271f3858b8f2764574d7cd1f7e42\n[CIPHERTEXT_CEK] = 0x1ee7fdd428a1c866ba371abb16d8a94b10344afc13e25f0d1ff48a68eaccd077eef6a1f23c64044b0b9461bf45f64861c4fa4f343d14df14f0fed9e30051ffec9e44d17700839a7cbb70c77c7af86a35a6329da5a3477ca7b68a926ed8a8bb48580ad93a3a62c11bb362bd2f400a7817cbe64eb3185119be59d7878f72dc06c7d82b26649323867fd45603bd6841dcb15a98dd3e56edbc39ff2b2fa53b96af978c726f1abacf478b6bdfb27b51f7e8a751f1b8796f3e69f3409a532384a28d5f67ee0a05e68ebe849c37dd89b42e58c39bae49e1f1ada3b6e5ec60ad3c677cb22eaa3030e16c723b0e286581f4fa88c6163b73e78ac2b0b798a67b83f38181d2\n[CIPHERTEXT_LEN] = 256\n[PATH_CEK] = CurrentUser/My/b3c66ffbe1db57419792e24aa970455bfac30757\n```\n\n----------------------------------------\n\nTITLE: Enumerating SQL Data Sources with Microsoft.Data.SqlClient in C#\nDESCRIPTION: This C# code snippet demonstrates how to enumerate available SQL Server instances within the local network using the Microsoft.Data.SqlClient library. It retrieves the SqlDataSourceEnumerator instance and uses it to get a DataTable containing information about the available data sources. The code then iterates through the table and displays the column name and corresponding row value for each data source.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0.md#_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nusing Microsoft.Data.Sql;\n\nstatic void Main()  \n  {\n    // Retrieve the enumerator instance and then the data.  \n    SqlDataSourceEnumerator instance =\n      SqlDataSourceEnumerator.Instance;  \n    System.Data.DataTable table = instance.GetDataSources();\n\n    // Display the contents of the table.\n    DisplayData(table);\n\n    Console.WriteLine(\"Press any key to continue.\");\n    Console.ReadKey();\n  }\n\n  private static void DisplayData(System.Data.DataTable table)\n  {\n    foreach (System.Data.DataRow row in table.Rows)\n    {\n      foreach (System.Data.DataColumn col in table.Columns)\n      {\n        Console.WriteLine(\"{0} = {1}\", col.ColumnName, row[col]);\n      }\n      Console.WriteLine(\"============================\");\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: CEK Data: PLAINTEXT_CEK and CIPHERTEXT_CEK (Variant 2)\nDESCRIPTION: These snippets show a different example of plaintext and corresponding ciphertext. The constant plaintext suggests a testing or initialization scenario. The CIPHERTEXT_LEN indicates the length of the encrypted data. PATH_CEK indicates where the key is stored. The transformation from plaintext to ciphertext highlights the core function of the encryption process.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaselineRsa.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[PLAINTEXT_CEK]  = 0xa6a6a6a6a6a6a6a66a6a6a6a6a6a6a6aa6a6a6a6a6a6a6a66a6a6a6a6a6a6a6a\n[CIPHERTEXT_CEK] = 0xb1024329e17a82507a152ae5ffc255927bdb5e000fecba8e77525b2c30fc2a4a886d012770659fc150a0f4971435c716bb9f10da05606b48b6308e5efbb66389109a46031e92df2a1728ea9968188dd2b2339b2acc4b4e2ec6fb7dcfd3ba4c217ecf27bb8cdec470c2f5abb35d6b74ff32bd3023b072ec320d628ad297380d89f45f647117ed2ed99a2c29e9f46b6fb54593807d2dee77889922dd02cfd37996209158ba656e690ff4b9fb4c9370549660717bc2fe7d5d04987fb3fcb3d1f0b426a40b885c6164d24289447627215cc46ad51ee64fd3331a32cac418af18efbf5ebfa2033f6d62cfbd23481db9a5cf46375cd058fc3e42c5024953f92260b7f7\n[CIPHERTEXT_LEN] = 256\n[PATH_CEK] = CurrentUser/My/b3c66ffbe1db57419792e24aa970455bfac30757\n```\n\n----------------------------------------\n\nTITLE: Data Classification API Example in Microsoft.Data.SqlClient (C#)\nDESCRIPTION: This code snippet demonstrates the Data Classification API available in the Microsoft.Data.SqlClient namespace. It shows the structure and properties related to Sensitivity Classification, Column Sensitivity, Information Type, Label, and Sensitivity Property. It requires the Microsoft.Data.SqlClient package to be installed and a SQL Server instance with Data Classification metadata.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19123.2-Preview.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: GetAttestationParameters Definition Update\nDESCRIPTION: This snippet illustrates the breaking change in the `GetAttestationParameters` method within the `SqlColumnEncryptionEnclaveProvider` class.  The new definition includes parameters for attestation URL, custom data and custom data length. This change affects both .NET Framework and .NET Core targeting applications.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0-preview1.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Old Definition\npublic abstract Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters GetAttestationParameters();\n\n// New Definition\npublic abstract Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters GetAttestationParameters(string attestationUrl, byte[] customData, int customDataLength);\n```\n\n----------------------------------------\n\nTITLE: Data Classification API Usage C#\nDESCRIPTION: This code snippet demonstrates the API structure for accessing Data Classification information from a SqlDataReader instance. It outlines the classes and properties available to retrieve sensitivity and classification metadata associated with data retrieved from SQL Server, when the feature is supported and enabled on the server.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19221.1-Preview.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SqlDataReader SensitivityClassification in C#\nDESCRIPTION: This C# code snippet defines the structure of the `SensitivityClassification` class within the `Microsoft.Data.SqlClient.DataClassification` namespace. It demonstrates the classes and properties used to access data sensitivity and classification information exposed by SqlDataReader. The underlying source must support the feature and contain the necessary metadata.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19239.1.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlDataReader\n{\n    public Microsoft.Data.SqlClient.DataClassification.SensitivityClassification SensitivityClassification\n}\n\nnamespace Microsoft.Data.SqlClient.DataClassification\n{\n    public class ColumnSensitivity\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.SensitivityProperty> SensitivityProperties\n    }\n    public class InformationType\n    {\n        public string Id\n        public string Name\n    }\n    public class Label\n    {\n        public string Id\n        public string Name\n    }\n    public class SensitivityClassification\n    {\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity> ColumnSensitivities\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.InformationType> InformationTypes\n        public System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Data.SqlClient.DataClassification.Label> Labels\n    }\n    public class SensitivityProperty\n    {\n        public Microsoft.Data.SqlClient.DataClassification.InformationType InformationType\n        public Microsoft.Data.SqlClient.DataClassification.Label Label\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Tests with Custom TargetFramework (NetCore)\nDESCRIPTION: This command builds the .NET Core tests for a custom target framework. It uses `msbuild` with the `BuildTestsNetCore` target and the `TargetNetCoreVersion` property to specify the target framework version.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -t:BuildTestsNetCore -p:TargetNetCoreVersion=net8.0\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Custom TargetFramework (NetCore)\nDESCRIPTION: This command runs the tests with a custom .NET target. It passes the `TargetNetCoreVersion` property to the `dotnet test` command.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -p:TargetNetCoreVersion=net8.0 ...\n```\n\n----------------------------------------\n\nTITLE: Update csproj properties for Docker debugging\nDESCRIPTION: This XML snippet shows how to update the properties in the .csproj file for debugging SqlClient on Linux from Windows using Docker. It sets the OSGroup to Unix and specifies that the target OS is Unix.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n  <OSGroup>Unix</OSGroup>\n    <TargetsWindows>false</TargetsWindows>\n    <TargetsUnix>true</TargetsUnix>\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: CreateEnclaveSession Definition Update\nDESCRIPTION: This snippet shows the breaking change in the `CreateEnclaveSession` method within the `SqlColumnEncryptionEnclaveProvider` class. The new definition includes additional parameters for custom data. This change affects both .NET Framework and .NET Core targeting applications and requires updating existing implementations to include the new parameters.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0-preview1.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Old Definition\npublic abstract void CreateEnclaveSession(byte[] enclaveAttestationInfo, System.Security.Cryptography.ECDiffieHellmanCng clientDiffieHellmanKey, string attestationUrl, string servername, out Microsoft.Data.SqlClient.SqlEnclaveSession sqlEnclaveSession, out long counter);\n\n// New Definition\npublic abstract void CreateEnclaveSession(byte[] enclaveAttestationInfo, System.Security.Cryptography.ECDiffieHellmanCng clientDiffieHellmanKey, string attestationUrl, string servername, byte[] customData, int customDataLength, out Microsoft.Data.SqlClient.SqlEnclaveSession sqlEnclaveSession, out long counter);\n```\n\n----------------------------------------\n\nTITLE: Copy and Configure runnerconfig.json in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to copy the runnerconfig.json file to a user-specific configuration directory, edit the copied file, and set the RUNNER_CONFIG environment variable to point to the new configuration file. This allows for modifying the benchmark configuration without directly changing the original file.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\n> copy runnerconfig.json $HOME\\.configs\\runnerconfig.json\n\n# Make edits to $HOME\\.configs\\runnerconfig.json\n\n# You must set the RUNNER_CONFIG environment variable for the current shell.\n> $env:RUNNER_CONFIG=\"${HOME}\\.configs\\runnerconfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Project Reference\nDESCRIPTION: This command runs the tests with Microsoft.Data.SqlClient as a Project Reference. It passes the `ReferenceType` property to the `dotnet test` command.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -p:ReferenceType=Project ...\n```\n\n----------------------------------------\n\nTITLE: Enumerating SQL Server Instances using SqlDataSourceEnumerator in C#\nDESCRIPTION: This code snippet demonstrates how to use the SqlDataSourceEnumerator class to retrieve a list of available SQL Server instances on the local network. It retrieves the enumerator instance, gets the data sources, and then displays the contents of the resulting data table.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0-preview1.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Data.Sql;\n\nstatic void Main()  \n  {  \n    // Retrieve the enumerator instance and then the data.  \n    SqlDataSourceEnumerator instance =  \n      SqlDataSourceEnumerator.Instance;  \n    System.Data.DataTable table = instance.GetDataSources();  \n  \n    // Display the contents of the table.  \n    DisplayData(table);  \n  \n    Console.WriteLine(\"Press any key to continue.\");  \n    Console.ReadKey();  \n  }  \n  \n  private static void DisplayData(System.Data.DataTable table)  \n  {  \n    foreach (System.Data.DataRow row in table.Rows)  \n    {  \n      foreach (System.Data.DataColumn col in table.Columns)  \n      {  \n        Console.WriteLine(\"{0} = {1}\", col.ColumnName, row[col]);  \n      }  \n      Console.WriteLine(\"============================\");  \n    }  \n  }\n```\n\n----------------------------------------\n\nTITLE: Build Tests with Package Reference (NetFx)\nDESCRIPTION: This command builds the .NET Framework tests with Microsoft.Data.SqlClient as a Package Reference. The `-t:BuildTestsNetFx` target builds the tests, and `-p:ReferenceType=Package` specifies the reference type.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -t:BuildTestsNetFx -p:ReferenceType=Package\n```\n\n----------------------------------------\n\nTITLE: Setting Column Encryption Key Cache TTL C#\nDESCRIPTION: This code snippet shows how to set the column encryption key cache time-to-live (TTL) using the SqlColumnEncryptionKeyStoreProvider base class.  Setting the TTL allows providers to implement their own caching mechanisms for locally registered providers, enhancing performance. The default TTL is 0, and the cache is disabled for globally registered providers.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class SqlColumnEncryptionKeyStoreProvider\n{\n    // The default value of Column Encryption Key Cache Time to Live is 0.\n    // Provider's local cache is disabled for globally registered providers.\n    // Custom key store provider implementation must include column encryption key cache to provide caching support to locally registered providers.\n    public virtual TimeSpan? ColumnEncryptionKeyCacheTtl { get; set; } = new TimeSpan(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Build Tests with Project Reference (NetFx)\nDESCRIPTION: This command builds the .NET Framework tests with Microsoft.Data.SqlClient as a Project Reference. The `-t:BuildTestsNetFx` target builds the tests, and `-p:ReferenceType=Project` specifies the reference type.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -t:BuildTestsNetFx -p:ReferenceType=Project\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlClientAuthenticationProviders in XML\nDESCRIPTION: These XML snippets show how to configure the `SqlClientAuthenticationProviders` or `SqlAuthenticationProviders` section in the application's configuration file. This configuration allows specifying the application client ID to be used for Azure Active Directory authentication.  Replace <GUID> with the actual GUID of the application client ID.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview2.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section name=\"SqlClientAuthenticationProviders\"\n\t\t\t\t\t\t type=\"Microsoft.Data.SqlClient.SqlClientAuthenticationProviderConfigurationSection, Microsoft.Data.SqlClient\" />\n\t</configSections>\n\t<SqlClientAuthenticationProviders applicationClientId =\"<GUID>\" />\n</configuration>\n\n<!--or-->\n\n<configuration>\n\t<configSections>\n\t\t<section name=\"SqlAuthenticationProviders\"\n\t\t\t\t\t\t type=\"Microsoft.Data.SqlClient.SqlAuthenticationProviderConfigurationSection, Microsoft.Data.SqlClient\" />\n\t</configSections>\n\t<SqlAuthenticationProviders applicationClientId =\"<GUID>\" />\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Build Tests with Project Reference (NetCore)\nDESCRIPTION: This command builds the .NET Core tests with Microsoft.Data.SqlClient as a Project Reference. The `-t:BuildTestsNetCore` target builds the tests, and `-p:ReferenceType=Project` specifies the reference type.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -t:BuildTestsNetCore -p:ReferenceType=Project\n```\n\n----------------------------------------\n\nTITLE: Registering Retry Logic Provider in SqlConnection/SqlCommand (C#)\nDESCRIPTION: This C# code snippet shows the new public APIs introduced in `SqlConnection` and `SqlCommand` for registering a custom `SqlRetryLogicBaseProvider` implementation. This allows users to define their own retry policies for connection and command executions. The RetryLogicProvider property can be set to an instance of a class derived from SqlRetryLogicBaseProvider.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic SqlConnection\n{\n    public SqlRetryLogicBaseProvider RetryLogicProvider;\n}\n\npublic SqlCommand\n{\n    public SqlRetryLogicBaseProvider RetryLogicProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Create NuGet Package\nDESCRIPTION: This command builds a NuGet package for Microsoft.Data.SqlClient in Release configuration. The package is used when testing with Package Reference Type.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -p:configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Change Directory (PowerShell)\nDESCRIPTION: This command changes the current directory to the PerformanceTests directory using PowerShell.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_24\n\nLANGUAGE: pwsh\nCODE:\n```\n> cd src\\Microsoft.Data.SqlClient\\tests\\PerformanceTests\n```\n\n----------------------------------------\n\nTITLE: Using GetFieldValueAsync<T> with Stream - C#\nDESCRIPTION: This code snippet demonstrates how to use the `GetFieldValueAsync<T>` method with a `Stream` type to read data from a SQL Server database using the Microsoft.Data.SqlClient library. It creates a connection, executes a command, reads the data, and retrieves a stream from a specific column.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.0-preview3.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = await command.ExecuteReaderAsync())\n        {\n            if (await reader.ReadAsync())\n            {\n                using (Stream stream = await reader.GetFieldValueAsync<Stream>(1))\n                {\n                    // Continue to read from stream\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Database with Active Directory Password Authentication in C#\nDESCRIPTION: This C# code snippet illustrates connecting to an Azure SQL Database using Active Directory Password Authentication with Microsoft.Data.SqlClient. The connection string's 'Authentication' property is set to 'Active Directory Password', and the user's credentials (UID and PWD) are included. This method supports authentication for native or federated Azure AD users.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19249.1.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstring ConnectionString =\n@\"Data Source=n9lxnyuzhv.database.windows.net; Authentication=Active Directory Password; Initial Catalog=testdb;UID=user@domain.com;PWD=***\";\nusing (SqlConnection conn = new SqlConnection(ConnectionString)) {\n    conn.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SqlAuthenticationProviderConfigurationSection in C#\nDESCRIPTION: This code snippet defines the `SqlAuthenticationProviderConfigurationSection` and `SqlClientAuthenticationProviderConfigurationSection` classes. These configuration sections are used to configure the Active Directory authentication provider using the application client ID within the application's configuration file.  It requires `System.Configuration` dependency.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview2.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class SqlAuthenticationProviderConfigurationSection : ConfigurationSection\n{\n\t\t...\n\t\t[ConfigurationProperty(\"applicationClientId\", IsRequired = false)]\n\t\tpublic string ApplicationClientId => this[\"applicationClientId\"] as string;\n}\n\n// Inheritance\ninternal class SqlClientAuthenticationProviderConfigurationSection : SqlAuthenticationProviderConfigurationSection \n{ ... }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Key Store Providers on SqlConnection C#\nDESCRIPTION: This code snippet shows how to register custom master key store providers on a SqlConnection instance. This allows for more control over where key store providers are accessible in an application, especially in multi-tenant environments. The custom providers are registered using a dictionary of provider names and instances of SqlColumnEncryptionKeyStoreProvider.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlConnection\n{\n        public void RegisterColumnEncryptionKeyStoreProvidersOnConnection(IDictionary<string, SqlColumnEncryptionKeyStoreProvider> customProviders)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQL Database with Active Directory Interactive Authentication in C#\nDESCRIPTION: This C# snippet demonstrates how to connect to an Azure SQL Database using Active Directory Interactive Authentication (Multi-factor authentication) with the Microsoft.Data.SqlClient library. The 'Authentication' keyword in the connection string is set to 'Active Directory Interactive'. This mode may require a pop-up dialog for user validation.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.0/1.0.19249.1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstring ConnectionString =\n@\"Data Source=n9lxnyuzhv.database.windows.net; Authentication=Active Directory Interactive; Initial Catalog=testdb;\";\nusing (SqlConnection conn = new SqlConnection(ConnectionString)) {\n    conn.Open();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Retry Logic via AppContext Switch in C#\nDESCRIPTION: This C# code snippet shows how to enable the retry logic feature in Microsoft.Data.SqlClient by setting the AppContext switch. This must be done before any connection or command execution to ensure that the retry policies are applied. The retry logic is disabled by default, and enabling this switch is a prerequisite for using the configurable retry logic feature.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.EnableRetryLogic\", true);\n```\n\n----------------------------------------\n\nTITLE: Data Classification Sensitivity Rank C#\nDESCRIPTION: This code snippet defines classes and an enum related to Sensitivity Rank within the Data Classification feature. It shows how to access and use `SensitivityRank` within the `SensitivityClassification` and `SensitivityProperty` classes, as well as the possible values for the rank itself.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview1.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SensitivityClassification\n{\n  public SensitivityRank SensitivityRank;\n}\n\npublic class SensitivityProperty\n{\n  public SensitivityRank SensitivityRank;\n}\n\npublic enum SensitivityRank\n{\n    NOT_DEFINED = -1,\n    NONE = 0,\n    LOW = 10,\n    MEDIUM = 20,\n    HIGH = 30,\n    CRITICAL = 40\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext Switch for Managed Networking - C#\nDESCRIPTION: This code snippet demonstrates how to set the AppContext switch to enable Managed Networking on Windows for Microsoft.Data.SqlClient in .NET Core 2.1+ and .NET Standard 2.0+ projects. This allows the driver to use Managed SNI for testing and debugging. Note: Managed SNI does not support non-domain Windows Authentication.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0-preview2.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAppContext.SetSwitch(\"Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows\", true);\n```\n\n----------------------------------------\n\nTITLE: SqlCommand EnableOptimizedParameterBinding Property in C#\nDESCRIPTION: This code snippet shows the `EnableOptimizedParameterBinding` property added to the `SqlCommand` class.  When enabled, this property increases the performance for commands with a very large number of parameters by not sending parameter names to the SQL server during command execution. The default value of this property is `false`.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.0-preview1.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class SqlCommand\n{\n\tpublic bool EnableOptimizedParameterBinding { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Manual Tests on Windows (netfx x64)\nDESCRIPTION: This command runs the manual tests for Microsoft.Data.SqlClient on Windows with the .NET Framework and x64 architecture. It uses `dotnet test` with specified platform, configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\ManualTests\\Microsoft.Data.SqlClient.ManualTesting.Tests.csproj\" -p:Platform=\"x64\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetfx\" --no-build -v n --filter \"category!=nonnetfxtests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: SensitivityClassification and SensitivityProperty Classes (C#)\nDESCRIPTION: This C# code defines the `SensitivityClassification` and `SensitivityProperty` classes, along with the `SensitivityRank` enum. These classes are used to represent sensitivity rank information from Data Classification in Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SensitivityClassification\n{\n  public SensitivityRank SensitivityRank;\n}\n\npublic class SensitivityProperty\n{\n  public SensitivityRank SensitivityRank;\n}\n\npublic enum SensitivityRank\n{\n    NOT_DEFINED = -1,\n    NONE = 0,\n    LOW = 10,\n    MEDIUM = 20,\n    HIGH = 30,\n    CRITICAL = 40\n}\n```\n\n----------------------------------------\n\nTITLE: Run Manual Tests on Windows (netfx x86)\nDESCRIPTION: This command runs the manual tests for Microsoft.Data.SqlClient on Windows with the .NET Framework and x86 architecture. It uses `dotnet test` with specified platform, configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\ManualTests\\Microsoft.Data.SqlClient.ManualTesting.Tests.csproj\" -p:Platform=\"x86\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetfx\" --no-build -v n --filter \"category!=nonnetfxtests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: Run Functional Tests on Windows (netfx x64)\nDESCRIPTION: This command runs the functional tests for Microsoft.Data.SqlClient on Windows with the .NET Framework and x64 architecture. It uses `dotnet test` with specified platform, configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\FunctionalTests\\Microsoft.Data.SqlClient.Tests.csproj\" -p:Platform=\"x64\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetfx\" --no-build -v n --filter \"category!=nonnetfxtests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Events in SqlClientEventSource (C#)\nDESCRIPTION: This C# code shows how to enable trace and flow events in the `SqlClientEventSource` using the `EventSource.SendCommand` method. This allows capturing detailed tracing information from SNI.dll for debugging and performance analysis.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Enables trace events:\nEventSource.SendCommand(eventSource, (EventCommand)8192, null);\n\n// Enables flow events:\nEventSource.SendCommand(eventSource, (EventCommand)16384, null);\n\n// Enables both trace and flow events:\nEventSource.SendCommand(eventSource, (EventCommand)(8192 | 16384), null);\n```\n\n----------------------------------------\n\nTITLE: Specifying username for Active Directory Interactive mode in C#\nDESCRIPTION: This code snippet shows how to specify a username in the connection string when using Azure Active Directory Interactive authentication mode. The **User ID** or **UID** connection string property should be set with the desired username.  Requires the `Microsoft.Data.SqlClient` package.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n\"Server=<server name>; Database=<dbname>; Authentication=Active Directory Interactive; User Id=<username>;\"\n```\n\n----------------------------------------\n\nTITLE: Run Manual Tests on Windows (netfx)\nDESCRIPTION: This command runs the manual tests for Microsoft.Data.SqlClient on Windows with the .NET Framework and AnyCPU platform. It uses `dotnet test` with specified platform, configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\ManualTests\\Microsoft.Data.SqlClient.ManualTesting.Tests.csproj\" -p:Platform=\"AnyCPU\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetfx\" --no-build -v n --filter \"category!=nonnetfxtests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: Run Functional Tests on Windows (netfx x86)\nDESCRIPTION: This command runs the functional tests for Microsoft.Data.SqlClient on Windows with the .NET Framework and x86 architecture. It uses `dotnet test` with specified platform, configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild \ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\FunctionalTests\\Microsoft.Data.SqlClient.Tests.csproj\" -p:Platform=\"x86\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetfx\" --no-build -v n --filter \"category!=nonnetfxtests&category!=failing&category!=nonwindowstests\"\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext switch for Managed Networking on Windows in .NET\nDESCRIPTION: This code snippet shows how to enable Managed SNI instead of native SNI on Windows by setting the AppContext switch 'Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows' to 'true'.  This is useful for testing and debugging purposes in .NET Core 2.1+ and .NET Standard 2.0+ projects.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0-preview3.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows\", true);\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for .NET Framework\nDESCRIPTION: This XML snippet shows how to configure the DbProviderFactories in a .NET Framework application's App.config or Web.config file to use Microsoft.Data.SqlClient. It defines the invariant name, description, and type for the SqlClient Data Provider.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/porting-cheat-sheet.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    ...\n    <system.data>\n        <DbProviderFactories>\n            <add name=\"SqlClient Data Provider\"\n                invariant=\"Microsoft.Data.SqlClient\"\n                description=\".Net Framework Data Provider for SqlServer\"\n                type=\"Microsoft.Data.SqlClient.SqlClientFactory, Microsoft.Data.SqlClient\" />\n        </DbProviderFactories>\n    </system.data>\n    ...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext Switch for TLS 1.3 on .NET Core\nDESCRIPTION: This code snippet demonstrates how to enable managed SNI on Windows context switch using `AppContext.SetSwitch` to use TLS v1.3 with Microsoft.Data.SqlClient on .NET Core when running on Windows 11. This is required as a workaround for a known issue related to TLS handshake timeouts.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows\", true);\n```\n\n----------------------------------------\n\nTITLE: Run Manual Tests on Unix (netcoreapp)\nDESCRIPTION: This command runs the manual tests for Microsoft.Data.SqlClient on Unix with .NET Core. It uses `dotnet test` with the AnyCPU platform, specified configuration, and test target OS, excluding certain test categories.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src/Microsoft.Data.SqlClient/tests/ManualTests/Microsoft.Data.SqlClient.ManualTesting.Tests.csproj\" -p:Platform=\"AnyCPU\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Unixnetcoreapp\" --no-build -v n --filter \"category!=nonnetcoreapptests&category!=failing&category!=nonlinuxtests&category!=nonuaptests\"\n```\n\n----------------------------------------\n\nTITLE: Run A Single Test\nDESCRIPTION: This command runs a specific test by specifying its fully qualified name using the `--filter` option with `dotnet test`. It is configured for .NET Core on Windows.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test \"src\\Microsoft.Data.SqlClient\\tests\\ManualTests\\Microsoft.Data.SqlClient.ManualTesting.Tests.csproj\" -p:Platform=\"AnyCPU\" -p:Configuration=\"Release\" -p:TestTargetOS=\"Windowsnetcoreapp\" --no-build -v n --filter \"FullyQualifiedName=Microsoft.Data.SqlClient.ManualTesting.Tests.AlwaysEncrypted.CspProviderExt.TestKeysFromCertificatesCreatedWithMultipleCryptoProviders\"\n```\n\n----------------------------------------\n\nTITLE: Copy and Configure runnerconfig.json in Bash\nDESCRIPTION: This Bash snippet shows how to copy the runnerconfig.json file to a user-specific configuration directory, edit the copied file, and export the RUNNER_CONFIG environment variable to point to the new configuration file. This enables modifications to the benchmark configuration without altering the original file.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\n$ cp runnerconfig.json ~/.configs/runnerconfig.json\n\n# Make edits to ~/.configs/runnerconfig.json\n\n# Optionally export RUNNER_CONFIG.\n$ export RUNNER_CONFIG=~/.configs/runnerconfig.json\n```\n\n----------------------------------------\n\nTITLE: Connection String with Attestation Protocol None in C#\nDESCRIPTION: This code snippet shows how to construct a connection string with Attestation Protocol set to 'None' for Microsoft.Data.SqlClient. This allows users to skip enclave attestation for VBS enclaves. The enclave attestation URL property becomes optional when this protocol is used.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.1/4.1.0.md#_snippet_0\n\nLANGUAGE: cs\nCODE:\n```\n//Attestation protocol NONE with no URL\n\"Data Source = {server}; Initial Catalog = {db}; Column Encryption Setting = Enabled; Attestation Protocol = None;\"\n```\n\n----------------------------------------\n\nTITLE: Overriding SqlConnection.Open() behavior in C#\nDESCRIPTION: This code snippet demonstrates how to override the default behavior of `SqlConnection.Open()` to disable the ten-second delay and automatic connection retries triggered by transient errors.  It uses the `SqlConnectionOverrides.OpenWithoutRetry` option. Requires the `Microsoft.Data.SqlClient` package.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing SqlConnection sqlConnection = new SqlConnection(\"Data Source=(local);Integrated Security=true;Initial Catalog=AdventureWorks;\");\nsqlConnection.Open(SqlConnectionOverrides.OpenWithoutRetry);\n```\n\n----------------------------------------\n\nTITLE: Connection String with Attestation Protocol None in C#\nDESCRIPTION: This snippet illustrates a connection string example using the new 'None' attestation protocol. It demonstrates how to configure a connection string to forgo enclave attestation for VBS enclaves, making the enclave attestation URL property optional.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0-preview1.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n//Attestation protocol NONE with no URL\n\"Data Source = {server}; Initial Catalog = {db}; Column Encryption Setting = Enabled; Attestation Protocol = None;\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Event Counters with dotnet-counters/PerfView (CMD)\nDESCRIPTION: This CMD code snippet shows how to monitor event counters exposed by Microsoft.Data.SqlClient using dotnet-counters and PerfView. These tools allow real-time monitoring of various connection-related metrics, such as active connections, connection rates, and pool statistics.  Replace the `-p` flag with the PID you want to monitor.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0.md#_snippet_3\n\nLANGUAGE: CMD\nCODE:\n```\ndotnet-counters monitor Microsoft.Data.SqlClient.EventSource -p\nPerfView /onlyProviders=*Microsoft.Data.SqlClient.EventSource:EventCounterIntervalSec=1 collect\n```\n\n----------------------------------------\n\nTITLE: Building and Testing with MSBuild\nDESCRIPTION: These examples show how to build and test the Microsoft.Data.SqlClient driver using MSBuild. They include examples for building all configurations, targeting specific .NET Framework versions, using the Release configuration, running functional tests, and using a specific dotnet version/architecture.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild\nmsbuild -t:BuildTests\nmsbuild -t:RunTests\n```\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -p:TF=net462\nmsbuild -t:BuildTests -p:TF=net462\nmsbuild -t:RunTests -p:TF=net462\n```\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -p:configuration=Release\nmsbuild -t:BuildTests -p:configuration=Release\nmsbuild -t:RunTests -p:configuration=Release\n```\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild\nmsbuild -t:BuildTests\nmsbuild -t:RunFunctionalTests\n```\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -p:configuration=Release\nmsbuild -t:BuildTests -p:configuration=Release\nmsbuild -t:RunTests -p:configuration=Release -p:DotnetPath=C:\\net8-win-x86\\\n```\n\n----------------------------------------\n\nTITLE: SqlConnectionEncryptOption Conversion C#\nDESCRIPTION: The SqlConnectionStringBuilder.Encrypt property has changed from a bool to a SqlConnectionEncryptOption. SqlConnectionEncryptOption has implicit conversion rules to convert to/from a bool so that existing code remains backwards compatible, however this is a binary-breaking change and a recompile is required against this version.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Suppressing Insecure TLS Warnings in C#\nDESCRIPTION: This snippet shows how to suppress insecure TLS warnings by enabling an AppContext switch at application startup. This suppresses console warnings when a TLS version less than 1.2 is used with `Encrypt = false` in SQL connections.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/5.0/5.0.0-preview1.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nSwitch.Microsoft.Data.SqlClient.SuppressInsecureTLSWarning\n```\n\n----------------------------------------\n\nTITLE: Defining SqlClientDiagnostic Class in C#\nDESCRIPTION: This code defines the `SqlClientDiagnostic` class, providing a strongly-typed collection of key-value pairs for diagnostic objects. It includes properties for the operation ID, operation name, timestamp, and count, as well as an indexer and an enumerator.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/6.0/6.0.0.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Class that provides strongly-typed collection of key-value pairs for SqlClient diagnostic objects.\npublic abstract class SqlClientDiagnostic : System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<string, object>>\n{\n    // A guid value used to correlate before, after and error events.\n    public System.Guid OperationId;\n    \n    // The name of the operation.\n    public string Operation;\n\n    // The timestamp of the event.\n    public long Timestamp;\n\n    // The number of elements in the collection.\n    public int Count;\n\n    // The element at the specified index in the read-only list.\n    public System.Collections.Generic.KeyValuePair<string, object> this[int index];\n    \n    // An enumerator that can be used to iterate through the collection.\n    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> GetEnumerator();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext Switch for Managed Networking - C#\nDESCRIPTION: This C# code snippet demonstrates how to set an AppContext switch to enable the use of Managed SNI (Shared Network Interface) on Windows for testing and debugging purposes. This eliminates the dependency on native SNI binaries.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows\", true);\n```\n\n----------------------------------------\n\nTITLE: Configurable Retry Logic Sections - XML\nDESCRIPTION: These configuration sections are used to register retry logic from configuration files, without modifying existing code.  They allow configuring retry policies for SqlConnection and SqlCommand.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/3.0/3.0.0-preview1.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<section name=\"SqlConfigurableRetryLogicConnection\"\n            type=\"Microsoft.Data.SqlClient.SqlConfigurableRetryConnectionSection, Microsoft.Data.SqlClient\"/>\n\n<section name=\"SqlConfigurableRetryLogicCommand\"\n            type=\"Microsoft.Data.SqlClient.SqlConfigurableRetryCommandSection, Microsoft.Data.SqlClient\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting AppContext switch for decimal truncation behavior in .NET\nDESCRIPTION: This code snippet demonstrates how to set the AppContext switch to enable decimal truncation behavior for backward compatibility. It uses the AppContext.SetSwitch method to configure the 'Switch.Microsoft.Data.SqlClient.TruncateScaledDecimal' switch to 'true' at application startup.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.0/2.0.0-preview3.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.Data.SqlClient.TruncateScaledDecimal\", true);\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Key Vault Provider in C#\nDESCRIPTION: Demonstrates how to register the custom Azure Key Vault provider `SqlColumnEncryptionAzureKeyVaultProvider` within a C# application using `SqlConnection.RegisterColumnEncryptionKeyStoreProviders()`. This registration enables the use of the provider for Always Encrypted operations with Azure Key Vault. It requires the Microsoft.Data.SqlClient library.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/add-ons/AzureKeyVaultProvider/1.0/1.0.0.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSqlConnection.RegisterColumnEncryptionKeyStoreProviders()\n```\n\n----------------------------------------\n\nTITLE: Defining SqlJson Class in C#\nDESCRIPTION: This code defines the `SqlJson` class, which represents the JSON data type in SQL Server. It includes constructors for initializing from a string or JsonDocument, a property to get the string representation of the JSON content, and a static Null property.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/6.0/6.0.0.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Data.SqlTypes;\nusing System.Text.Json;\n\nnamespace Microsoft.Data.SqlTypes\n{\n    /// <summary>\n    /// Represents the JSON data type in SQL Server.\n    /// </summary>\n    public class SqlJson : INullable\n    {\n        /// <summary>\n        /// Parameterless constructor. Initializes a new instance of the SqlJson class which \n        /// represents a null JSON value.\n        /// </summary>\n        public SqlJson() { }\n\n        /// <summary>\n        /// Takes a <see cref=\"string\"/> as input and initializes a new instance of the SqlJson class.\n        /// </summary>\n        /// <param name=\"jsonString\"></param>\n        public SqlJson(string jsonString) { }\n\n        /// <summary>\n        /// Takes a <see cref=\"JsonDocument\"/> as input and initializes a new instance of the SqlJson class.\n        /// </summary>\n        /// <param name=\"jsonDoc\"></param>\n        public SqlJson(JsonDocument jsonDoc) { }\n\n        /// <inheritdoc/>\n        public bool IsNull => throw null;\n\n        /// <summary>\n        /// Represents a null instance of the <see cref=\"SqlJson\"/> type.\n        /// </summary>\n        public static SqlJson Null { get { throw null; } }\n\n        /// <summary>\n        /// Gets the string representation of the Json content of this <see cref=\"SqlJson\" /> instance.\n        /// </summary>\n        public string Value { get ; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Definition\nDESCRIPTION: Defines a hexadecimal tag value. This tag is likely associated with the ciphertext and used for data integrity verification.  It could be a MAC (Message Authentication Code).\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n[TAG]        = 0x69f41d6f126037a7956d6d661136e0c34f8e4647b8e9ed3bccaff869bad96b0c\n```\n\n----------------------------------------\n\nTITLE: Build Tests with Custom TargetFramework (NetFx)\nDESCRIPTION: This command builds the .NET Framework tests for a custom target framework. It uses `msbuild` with the `BuildTestsNetFx` target and the `TargetNetFxVersion` property to specify the target framework version.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -t:BuildTestsNetFx -p:TargetNetFxVersion=net462\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Code Coverage (Coverlet)\nDESCRIPTION: This command runs tests and collects code coverage data using the Coverlet collector.  The `<test_properties...>` represents any additional properties or arguments for the test run.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test <test_properties...> --collect:\"XPlat Code Coverage\"\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Code Coverage (VSTest)\nDESCRIPTION: This command runs tests and collects code coverage data using the VSTest collector.  The `<test_properties...>` represents any additional properties or arguments for the test run.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test <test_properties...> --collect:\"Code Coverage\"\n```\n\n----------------------------------------\n\nTITLE: Create Database\nDESCRIPTION: This command creates a database named `sqlclient-perf-db` on a local SQL Server instance using SQL authentication.  It uses the `sqlcmd` utility to connect to the server and execute the SQL commands.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ sqlcmd -S localhost -U sa -P password\n1> create database [sqlclient-perf-db]\n2> go\n1> quit\n```\n\n----------------------------------------\n\nTITLE: File Header for Microsoft.Data.SqlClient in C#\nDESCRIPTION: This is the standard file header used for new C# files in the Microsoft.Data.SqlClient project. It includes the license information from the .NET Foundation and a link to the license file in the project root.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n// See the LICENSE file in the project root for more information.\n```\n\n----------------------------------------\n\nTITLE: SqlConnection ServerProcessId Property (C#)\nDESCRIPTION: This C# code defines the `ServerProcessId` property within the `SqlConnection` class. This property provides access to the server process ID (SPID) of the active connection in Microsoft.Data.SqlClient.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SqlConnection\n{\n  // Returns the server process Id (SPID) of the active connection.\n  public int ServerProcessId;\n}\n```\n\n----------------------------------------\n\nTITLE: SqlConnection Server Process Id C#\nDESCRIPTION: This code snippet demonstrates the new `ServerProcessId` property added to the `SqlConnection` class. This property allows retrieving the server process ID (SPID) of an active database connection.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/2.1/2.1.0-preview1.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SqlConnection\n{\n  // Returns the server process Id (SPID) of the active connection.\n  public int ServerProcessId;\n}\n```\n\n----------------------------------------\n\nTITLE: Connection String with Attestation Protocol\nDESCRIPTION: This code snippet shows an example of a connection string required to use the enclave feature of Always Encrypted with Microsoft.Data.SqlClient. It includes the attestation protocol and the attestation URL.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/1.1/1.1.3.md#_snippet_0\n\nLANGUAGE: Connection String\nCODE:\n```\n`Attestation Protocol=HGS;Enclave Attestation Url=<attestation_url_for_HGS>`\n```\n\n----------------------------------------\n\nTITLE: Build Tests with Package Reference (NetCore)\nDESCRIPTION: This command builds the .NET Core tests with Microsoft.Data.SqlClient as a Package Reference. The `-t:BuildTestsNetCore` target builds the tests, and `-p:ReferenceType=Package` specifies the reference type.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmsbuild -t:BuildTestsNetCore -p:ReferenceType=Package\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Custom TargetFramework (NetFx)\nDESCRIPTION: This command runs the tests with a custom .NET Framework target. It passes the `TargetNetFxVersion` property to the `dotnet test` command.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -p:TargetNetFxVersion=net462 ...\n```\n\n----------------------------------------\n\nTITLE: Change Directory (Bash)\nDESCRIPTION: This command changes the current directory to the PerformanceTests directory using Bash.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/BUILDGUIDE.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ cd src/Microsoft.Data.SqlClient/tests/PerformanceTests\n```\n\n----------------------------------------\n\nTITLE: Ciphertext Example\nDESCRIPTION: This snippet provides an example of ciphertext, which is the result of encrypting data using SQL Client's encryption features. The value is represented as a hexadecimal string, and it is intended to be used for testing or demonstration purposes.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[CIPHERTEXT] = 0x83e27adb86171966e8a7fee14328f02b5068b9f503a7561e2d6b24ffcd1e0a9d236190714ddd86908381a766811de03ec8d3cf0a3b91853bc48d8a15e7a5aad7a7e5854ccfd2e565ba6daca363a5fcbd997c88a0eb3762ad67032bb139d6a15440888856e4f9fa318a48b183b758a105f61963e7edcfbce23b154a1054cda535d4376b64e0773c892f35e5e37c83bb9509b55e437df67263bc7aa61c7f8d8e00225994e821d3a9df8b4abbe55bd199026835c2b4d40618dff448b1af5879d294b27dfe0381f252bed31ab6c89059727c43c570914ef7527526ef67442cfc6c2917cede121a7f199072a2049aeea625c59b4ae6ffb483267283a275e4f247ead211903f0364fd3b1213ce1f0a39372d374436eff18b27af2cdf0d9ff25b1ce9d0e5e100c40c474a5ce3d5b744cc178270b35c8f0f78b560eac71a9f85e9b4472cf75a6935ae19e61cc067bd5e747bd62bdbdc2fa9af024131e27dc93b0a148724e613a5d6ca702ce2b1b0f80e9baaf3b1057dafaff036ea8b57ddecfd6d65eea9a50ab7b286c87108bfa088cf2a6424e893740d66eb256b5cff67833fb2f892b060687cf689792830e9edf96a2f1d392baabd5bbcca8fed77d4c40be67cf2db0c5cef651cd75abc5e5ed83bc4b4e58345d34baf01f7888b3d05d66e406f2d5d6c04bcd0b0a335efa48e4a2caf9e137001fc397f6aab5e2c853b9d5c4201bcdf00eca6b0c4d5bc4086751bfdab4157b26fe6e1f7813b5ff9d743cca942b8c34a276df3d1154ba85600e0b324c56c2204ea929606971dbe9d382a23d5e1e283b78c9f34cddd086568b5c72f2ce3ed344996245fbf206c3cf2c036dc7ba0352cb1d971a592a06b274f6278bd0bd97a69d9cc3dbd52d2eb36f6aca3c6abbddb37abaa2a0d217c5b4f4d0af87968ade7f5e44f57253047c61fe0104186656fb84bfea93db72b9d08bcf9dc50548c0aa8db61fd6e4fe91970119495be1c058150a0112837c1abb7128de418c6bbcfd53c2f83614615f857a0be5d3d26f93a9db2013b7d7a93eb323df3dd5ed9349ebe8194c653c525892808f151d9775664e23e6977ea1214d962999b0378271f0513bb99f4842390b2c9d4b2d19919d28228484dfa7c0afe59d9cb88b8725470c25bcbcb1dc21817ed8baf1717a7767ec4fde1db875f692dae8c4b10d304774831a1106ee13e3299890d381eeac6503d8f562e0ea73e8423223b1dbe1ba96225c7bc21fcb3ce9be9044b1e682cf356a8d17c296e341a51192d9eda5da5f03e2ea0b17b665fc246f2ae5cbf026a4d090d8b7458c6bd537288ad15b531a76e76ca59f660459fe8d47d89475398a784a655949df02b02149699bcb6b3f0a744b93f85794b47a616f2c8a95546155087143005d13ad17cddef34a3b916aeb17c0a23aa63c50247b095083e73e891100f2b16b7642e7072b0cfd3fe025184f1ff324a670bbbda18fd630fd6d6fd190b0ca74351dce6c349c5caf17aa83d1e8e53ea3feaac0e2a015f4be19a4ddee482076c2a5d055cb29db9f48bf3b809d9ac1bdf3bfc917d6737ac9c7e346b1245fe8c56112c5e8e976c43f46894457825bd045c21d2ac6390384ed76bfe23a9e335282de3ae8ac7ced9ae975432be6c19a32a9cff62bd2bef4deb8a3f40a32973efc91d0d4ae7531e533679f8dedc9e03c19059caec4b45655f99e00aa25f503999e2bec64a107bcee7add494993767346273a849b3deb4a699b5f50a472e906ac0ac9791d311cedc451478527f698bf02e289434251ef16dc5efebabc162c80013b1732b54df2a374356575f598631120148c610ec09eba694d57de4026ecfbaccb79f2c8c65b52df3669a427c6f2ef20078fa675e1cbf2b0c281cca1bc5d1777f86cd9260e787243a705b1f801188cee00e40a3bb77f32383feb641c1fe571c322f41bcaf99f949fdf681456b0d20ffdcb1272d6e4d78bb59fd9d51a901543c9d8a6080bf03eb0c1e4aa70f7309ef53b54c20c0207e46fa243e03e27d5d35819b97b874cfdacb30e10f0e32b74e0855866cd82076ab791e62991bb89bfe9198483f92f93fd742cab6d9c786fca2a891c375e6e20fdc70f70b30b82607e1e0c456ef46241aee4e8a06ab1d0824ad4aaabb17dbb8874b511cdf2c4655b202398b85bb12d4de9a69dc49fc5c5046f6645ae19a17e336f0e497a13684bfe51846b6276c64f00b6bf30a0878422907298f32028e051faa9ab50d8d022170e5ebd1098130bc65cca2607f9f790cb9c71a5316f4be62f9f003ef7c6bf43fd3361334db3bf671892c8bf5832724023cddc569023d6ceb7a51f88f9aaead5f897d1e453565b38128d26397d52ce6582e2c1314aac671787d8f21eb3a06b3617e41d4870509a779d4afe466e9e5d93485b4603672d6ae6606e7652681c94db8b50b73c957dce7d12ae43add71a441f527a3c9978aef76e0c2c9f14bb1ba43a75b11734e47ed82615aa070482b65e27c02dba3dfb4f92c1716eb2f9f76646297f9c04107ff1b4863904dd7ff70ff349f4b56d32c84ae62a2ffbd0eaca0ae48ad6231a64d4ea5221cb9357f0a5dc21949e549389ee4749b5d754f108f2be9e85257e1ac2ba6b30be0cb9d2b394f360eeeb1131df1e439c6223bdfc779051241a73928ef1d417f88d6ef011350f7401947d2297c1f9a2f83ffad0fd072a21f4e03c6e701ade5fc52636989f370719b27ed29d13038d1d9a0259edc68f8ee38531b91c2a1b0a7b62ac1e868a20b8ac6a6bec14e3e47bc776db9ec86864d66676ac115ef71a0b7e088bad01001140b394ce7ba4e7af36c9cdb0b781f79cdf776021094b109098796ba1e0798014716c2e24a8c5e8ce396745653bd8ed19ff08a0d70d6082e011afe41a799945062bc016094ff7409f569e02f6ac6f8a022662fb216e02f833963643d181394a21f4038a34df4382192d9a45b4cf70cfc80bfd0e95cc1c40fc4154f8bc663da2fcb92dadf9dd94c97aecc9c9c584d40beb52a91fb589b7e9a7228eecc97e0b885bf314f047312825de627ca7d6da620f60e5a8e5deddeb38408cba07c7b99171a6a9f0959c406b6b84079cf94d4e7461a7b9fa4d802fa464f8f1d4218f51b67c6e4096fd58a5a43a1b130c10396ade1b58ef6acd32895c203a4e81ac06336a2348f4a9fd299491c0cb6c4a8de4dc467795a97aa381ba4209f43110df3e049e2be0c9d32976aa02b338adb6e992a784beb44ffb95533789cff16ce507e2f9ced3ca0f3c9fe464baf27b3012a95b0869acae0e6a5228e94841b6ae3df6ddd8e9f261898e2364d1b2ef535641f3ff93613fe5321a70f2b80a5b35969b0c598a4a05ce8cb32fdc4a932515119b6a344c26d384de7e93d6ca4ce7863ef67f96a2abe29a4af9af95f97f8d2d68f5e32c642609b0bf9461ac08a9ba6543e9ecac6f344b6d3e42225ef682310890dab64de16e03ea6f07854c8d33fb0c8b4e982e231d607f3cec640c5f0aa702deecb5176a747bf3e78156c136432b0a07895da5663e21bb7d16bf8ba1d36b4f933d0d6ea81210c612bc320e1782a96613ab1d049a8f9b08d064643a149158fe145d752d0a3adbea2e1a8940876274a1a6ff370b000bd32736bf5e2b4edb8a0da334e8ce98790ee12a9512e8cd37b156b1b0eb8f0bc899c57afb8eb9a879d893636ccaa2407183f2de12804b37cd1cdab72845a40804b362256e8a1fe308e1b88f51e8d8640660a283a7d47900eb5050fb9c052931b402a4a1101ac2210dbf29861eff1c1529627c52ce0dc8d9436b75f88534d234fc34d1c9a3b140afc336186d940ed6ed890a6739382f66ab1ec42c4fe23f766db41a6aa8a89b8c1e9a33420674cce0f1399c041316d1fa070b283dd7bb0dbd6d39a85858f3dd806223cb7b0e24cd15830c32d8a5b19f3287c7a735b74714942ac6b815359862122e5225e159e4e427c5105cdc13cb84d070e0205eeab1accb8c39c7d45dd3f56a1217ceb36053db514e922e4c603ff3a9982c5b8ac7b701c7922ceec01c555cbfca8e835470091e2f2f53777102e691896705976bc90ce21acd9ccb4afbf62809037d9385208a44730d970d6a21b036fdde91249a5e3f28eb5bdb31acbb36d786a15cf773d2f535cd5ba618b66044b51397df69e394cd24a5c15092c16db5577ec7e345f4d46374bc33852f59aa0c15350e53ca63838c0a4bb5d39a23abbf5db8a2750da7560e89c8af6aa46f8cd7a0806854ec1886015c4a1823c27aed35fade6085b30a1b23a0634e2c216f57a093f5a393c9fca56432f47a1ccb0aba3df69279939ed141011e1c91b16a1981788cad519ff292ec2af6614657b657b784809809f6f95fda0918d60115d996a8e730801885d355e57d139deef798cc3f427795fc0c8cc7a087e35efc8294c24da740f27a2dbe2e1f84634f3276d6ecfb71778d4036f56c72669b78b21d4dce34e04823c9381388b8b091d8476bdbe2ba67e822b9676d3ffee7a63ccc43d78f571587a22399416f7525da16b1ffb088cf37d86e97cc2c678b39b6ce0f93e3d6ac18b1766cc8e1c89e702bee6b3f02c72e05160fa02c0c502ab1f519c8fb356fb6b23e59bc37b2276a3f4d3bd537fbfdf153e8886c9497b969479fa372b87450b73adfe47e5bcaa57278a7dfa6c5497e5e762a83d8c51f3ad4b6b43efafba7a80d4b595657af9f6a090def650a946c43d45ddcaadee33216f3611ead09ddcf55a2265abb80d2bb334ddd0061515d04352bb0e1de89fff3b5baa653533d7abf99b1ded7bfd0b8d21549fe90022e49d84b22d799536869a056079dfbd46c33a55625c7a0590d6af628348efd8c8af5ab6b3d52fa7a32d01876154c5ad03c51b840f30ad798f8ef3ed47eb8a58f73fd536e09b370eddc132028c4c05d2afec79846d3b4aca766feba4587ec3b00ae2643829f30e214e398e8721c33a9ca145d3b4995b3af7675a6af0665b3b483eeb80a6fe45788e6793c689cfca69b08d01f00f9ba5845de354fce65606e0a7e148f87afebfc96061bc53453ed6f4eea561d31103c69d0df4a051aa867c2fe08e0e16604a91ebaaa7331061fe883814ee96c6463f57d6c260ad0dc3ce0b433fcddd325a2244048a22700cb09a8b870bb84a3595d7aa47afd7c9c4da90d43da57c7eefad75e4a814f078d790570b5f74f759d83cff9abaf19adfc622884679fccf4ce33f6d5760736ec26738f7b7d3805ca842cfe3fcda93e7e1addcd2bde828f151841fdbe13a6d015776a7fe03b7272594fcde523fcecdc1c2b33ec69649ed6443ebf96a9221d37fae6a9bfed6751797210113808fc1891884c88818175e220de486ce8dd9c5b5b85aab4a7a2600bc8bbe23cf239e1edccaf1753ac03627083f87da257dde8cc3fc66782a230aee71d9a605f7cc45e05035739405d63a21eb9eb0e3bad5c14286bcfaf96666187913b403a413516f03db5b7da49e35e12000cbdf3f9383a73e7ef31bcfe207228dbcc20be5b3a489b71c8214471901836d53911bf942c2685fdc\n```\n\n----------------------------------------\n\nTITLE: SQL Client Encryption Parameters (Hex)\nDESCRIPTION: This snippet defines encryption-related parameters, including the encryption key (ENCKEY), MAC key (MACKEY), IV key (IVTKEY), encryption type (ENC_TYPE), initialization vector (IV), and the ciphertext itself. These are given as hexadecimal values.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n[ENCKEY]     = 0xad2db65a8c5c1ec4e1cde78b36bdee713e35bdbe4932d4b93d05a8a821233ee6\n[MACKEY]     = 0x9202112ff50d91ed88366e4995574be55945f49bfde9e0a1a408b6f31487b41f\n[IVTKEY]     = 0x64af2934fc407babb6cce2aa51bbbbb0aa095cacad7fc542fcc0cee9f3f0e385\n[ENC_TYPE]   = 3\n[IV]         = 0x5d454d738151b1b91bad047d994c87cc\n[CIPHERTEXT] = 0x6ca97c611321f2afe65ec4a69fec195ce2e021394237d360ed5438c64ee1c34b523a94a684f52c69ae856a94b2f3dd047932ec2c4c038354fae776f37c70f24f2873389acd95843b0d4b3a48c30b87cc1a6441e64ea2d164c0ea0e0461a82c180e582371ebfc3a7b5c43994e222dc5c66f15702aa451460c505675658a302e02ff80bca819d595e4365e5b82afb777fabae77cfa3ab083d0b4bd6aadf4ee5d579def4591edd21f838431330dfb93d1ee37dd08d0de6db9f009bc04eae27710b019a5b2144c8e8435ad4d7d92744c50016bc755032974c08323da2b6a30bf779c3b8b1a87d3ef7f52e5d8af66bccc309b4660a686682962d47020ee6bfe6e9ab330d3995bb58978cfc6c3d7d21b6c41843fcee0cf712ec71afd59cf91380e44bebed765a5d8f4be5429e4e89fd6f80f90a62d4dbd01a94205e82b3f2b7fc3682b39188dbf010d27616c305721e5c5b78e7ff9d23bd4448ed15f9c7773b1dfc58257b86aee5e24a2274faa4563c98bbc8bf0c400e1766d959c3582b0b26eab59020cab5f3601cf43ab11d5ec99dfa4802c7d385a90bd57df8eeb308067158ef7ee1586419d2436ba482066d67969e64b9b9848f434e1c100f95ec50717fd5dc0c8d14eb49c2919f38609dded60229c9475fea51ac1a98fabfb24dd32fe5df9389a058c89f1d41cffed4137e31c04fa18d3b915ba7cd9954d6ac1a42a0321b266a9941c333b8f458885f3e6972b701603796fbc0005a403231ed97aeaa7d6528ab52141727680aded97b8b2e4ac66a0d32833b2d336d7a271e6e0693955eb0886021901922fb420dae0d05e7b1a28fefdca20f93978acd6aea7d3b6f4a894d3ec188193180b1789d60aa567383579ffb76a059fef671acf81d6e2c3de1f86d7252407d5d0619cd3a7da93a9763a73500d0e6de39337393db9147e2a48a453a7ae440a92b72812148847dd450075be9a9cf6dbafa9ad2cfd9fae1655f060da2cb4690dcacf9d9fa51c9c89ccdf97f489bd9e01447f98a6b3db3aeeea143932501a9649b28e0ee555119e9176f7f76bf758de7aa32c1490ee96c3250d784f7cfbf20a7338a373739c5b1a8678cdcd34718e0edaadb005e928d0566aff89ad42f28b87196c1bd464a18c455cf286b1c49b292b811bf7f86585e623edca2498c73f728496ae778026411e867b4c9fc4bbbe8649aa411d7aa61915fa15a53defb69170ccaef8a05e8ebfe1cc7e3cf4893b0061e61bdf32a39f1dfd5fb4b13df98e0dfb5ce7e76d8fc476f8b364e094ecd9fd0d0caa5df7c5d96bb60c4b08afb7c951e153e0a8ecd4dd3b2c80af31a13cd135192c82c1bcf782fa1dc37488614f2454bdf9ae3c9330ffd05d3f083c748310d9d89fc70c96e614d21e54a4b78c86abbb1605a1d84cc7c6e4352efe825ecee5c011cbd16fb4efa070dfb3777537be2f2e640733a97edda581374002d2eec0136982f50b475d1b71c987a04c9039644072480860be4f3b5cc127b1b658fbfbbd59b6c7e0f3aad99c203baaf6af50efed54f6d68a68e6821bc3bd120fd25b936a4ec7196a2470895bb10e72488ba91d45f700b86e06bfe619b7544ecc2eee622fb7e4bf9c679403b900c1c38f5aa3a817aee8a89af1ac24739c12073cac870362068997d93c9d7bd1ddb95e498cd8ce0f415cea0f177c61b61ecd71ec144d3a5e1a4e8ee1e6b2681e0d60c5cecc994b358a426bdba6b910e6b6850690986389a4b0b1b34ed84252078bc0f759ca43fefb9f248228128d89c79c8a26908d9164808dbc141d905af69df114609615a661a23b3541e797f724cbf6fb648699d27341fdb6c04b8b82f0881d39cea1a6ce9b2cf9fa5ebb879b3b929bfffdfe6d06b6c1ab463e09b1c3b8a3bc27a389544cdedb434d76addb9f938b43fa7167e59a80e67766e7cc4123fe43897434c7cc026b300f341920d054ff2f6c44e090c2f5dd1ff996a75dd22392ef5a502da33951a6c3e9710e9163fce9fb43a392d22953b74504295d70c5df5d0e8de35e64b5309bc4d102bd15d6e746d61b27e5637f50321fec8f73440fa72ffafaaf3f2d4859b5f09ab22f0089338eeeeca4c958d0a8385c01148ac1ff2a7c95704951ecef9f30c82ed57e248147c63b60ace74ea55f99accc9787ef526ff9da7e780b688a9fa75c4e70f9c771e212f2eeb281b5aea24698b696eccc3de5815a4eae583bdb51ca67df17cfde511ca923c54a1b1030269b875f2e2426a94ddf24b2af7b0896e0d51968e0ae5e20b3d5431cf2008f0a7f4d6b59ba7313052a6e78c2bdfee0c9ba169b999f4b1d5cd48ce11519cd7a1ff2cba17ba6069daf88ee76b57463ba4adfd71d2c05297f3a91ab3d6d82a82669a3bffb00fa011883373879cac91e9298bc9d583f5efe245dc75c9bc1c4a6f974a60358dc6c401a1d9240c951c79fcaf8c00d919540b7190f772656471874388918899384091b92aaf9a7b5acacf3df492f9512d58bede0849148a51e96f121596348f9f9c8f05197a3d793c7c49852f2c39560aa52dc4710e90413dcd19b12d3dc1a158f24f9616abdcbc4c21458e0041f3d6a32c2582df37390309201e27e8a29c64ac9efedf3d90339cb33d487ffccd34a29015accaae2b7450a2cd03362ffffad8dbc9570de8afbdef223498806fd5f2fe8ba8a4cf6ca91048581b1ede3d673c5822f3fd6f2c1c641c0b940141b6131fb3fe141cabfdf811bae7a49de6ea01aa75aa0f46b3b0f15f0ab8772063781a5eaaec593ec4f0b9431b7f40f7e0c8e188faf38e5110811bc87fe5b16477f7acfa19dffe4cd83ee46ca37e8201ecdad56fa22e521929801b4a0e03ce7368b64917a9e3ee7f515c1dac8df3145344eb8fc612eed7246fd38f0b630d5deafc28de0a26ef9346b86827e98d563e92bbd691280f5d1f2471f8264de2ee5a4e0aef2b05c42147e0a41a3a0e03abb8eed7beb3a58f1ac90db6315beb0e19f02d7b913c6a76fe0bc6cd86329c00739cb962b9517aa82a1752fac76b76e9db79448bd138e545c925cc325d5e36673ec559433cf27d15eb122fb17dfe1a83b3eb468a2f21f57e8e23d211988ec10daaafdff0b39b2c7c51a3f3c23081f89f291ff2f14326f9bd9321e6f9b7faaff29ca1df4333b3e475cf4e17993e368df809fd77e04fc112a48af168a50429317bf56f4bc584100cb0509a68baf3ffad3b9f63cedd457d49981188f7878836fa964b76acaf781028abd5b3fe543ffb5faffc5ae038a89546906d77048f50c0b5958fb2575edb37894eeb40064162b3ea8c8d7a19f1b3d8ff5409453ff5a399e4255bac5a2dfd285fbe3f670955d7408510c4aaafe320612adc590014d052ab8cd5c5a7bc11ba17b0bb9d4dc3d5295093faf4dd5eb834a8cc321bb2a97bc8a26b3b2148c87f025353e94fb56b48a3fedd1622412e603753e70527cffd1610507f2b1ec03d7c66f9f67c9c00bc863efc341fa7fc28f2a41c7c34166bbb48d537b493744eb47cc36de7333dc9d9510bc92a8d64c786caaf374e2f9c4eff60fa2c497ca4c0447024853d9fe8790c2c39ba9ee346d1ece5832de171c1469c821995314994e29369c264a414b0481b2098817bede2dbf64dbb868be8f68da3f9277574b6140064c8cf5e28d69b8186ec54db492774316e87fcf47f519540d357944830b8449876b57ef72cd089ab7a2106031e10fd5a2b3bcd0934dd37622769a7f0f37983b3bfa4142d70905f958775bdc7c5c574bdaad882f7e8065a544b8272d2290c278732accfc52b5042b8147b1b5f44c2dc89a53c6eaa17062483a793019481b336dfac59b8f81cee8abb1e992d6eb6045720700a04994136be5d810c8cd5d42ca73e554796bf342e024a8b7d3c99849b8f24cd6aeb7ab40d88ad488dac35a6c121dbf3694f5f76582632098507e2a3bd12e30de8f6a3e1c90db7a55565467061609cee6bd4a44e49ba0eac772aa886cdcb2ebf3d9510b2439846647309e54f4520d9d6f46ca0fe0dc36af1f6c84428f59b44b5b18055ce061a86aa2085fad102cf37150c62460bc7dd9c1373ecab26bd1a15a5f4f3db19e0dc9cedac8e9c619780047bf7d82462107a5e68834eb7818d1fe71122b55aa7880cc80f247078ab3eac382bd654c3e347ab6141a2654c75096c417ccd856d959d928464b9af0fb4595366fe1e645ff41e660b8db37fa2f9c01f3757d74c672957a26af1ea563a9b4967a9b0846b040a54733b702a7229269309742ec9b189cf986f45729ef16e354a4a42bceb1cc157d5305806617e30b79db99c98f07de4161774264d33f96b06ddca4200076ce3b3444a8915901c7720ced6246dc31dc8296246d9820bc500f68918516c6b84914f56af4ad08bb78a6f6eb1be3bcec7f58d3e7a3bca36a8a771ddfdf6b2f82e8787ed23a62ad0c0ed484bcb9f5f8b266bdf900aeb33ededfbefccdd80e855c41f24dc70d0955529d8a08e1fd93d3ec23edab252ae300165aee447caec70c8304cb5843b13b506a239ed2967f3b22ebeafbaef1e830f7ff122b22d5a0469b731d8aa9a722c43e3004e987783f4dd060a98b87773dde8ec3350e9b9d4439d0a7c8e674bc38d7ad47f9c71b136784654839560b4e6243005c021db2b8f9900f2b12415309d9926b12fffd6286708d148e1c6e4864b1eeb3ed8a93b1e2512660bde7f3b758b72496667210e06c81e961a9e098901b608658c34f1368d387441ca7b298bf48c9c5e07fc5d2f53dc81174ad4135a67002b6db040935fc743cbade24246445de142d6b4de1a7a83d9b876287c8f810d4fc3e2fd6b23f1deb3cacd19f1db38d6e114d85e668c67e653fa556100535775f8f2bd36d0f24aaadd3d479c616017f304d0294bd9cd3287662cdc87dfcb0f5d5d507f66485e4457b1a91870aacb104b05e03fe7f4147b028725fee5d2cd9cf28c2cb14a2a0556e79ebdac04f12f36c31ac050f5ae13542c217fc7c8311f8ec76d6468fd64e271cdac7a1d366089dcb45f085ef8b40b0e138186ad55ba72d679937ed9f62b08e1b64e90a7d46f22a29437d7f23f504f8e4401837346d63e6bf3e317017d197f088613bea45545cddc3629ae2570d93dc7c1df01c9a864e7208e4c246af83240baf7f57fa8b62ad72f0b66c165ef3b41958b7a66c765aed0f9e52bc6f5f113aa1ccad6c9db52ca79400feea1c31911f4edc48b73323792986a7e4238a02640dc16fec7b9b0320cde76966a8f0a5b\n```\n\n----------------------------------------\n\nTITLE: Defining Ciphertext for SQLClient\nDESCRIPTION: Defines a ciphertext as a hexadecimal string. This ciphertext likely represents encrypted data processed or stored by SQLClient.  Dependencies are standard hexadecimal to byte array conversion utilities.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n[CIPHERTEXT] = 0xb3df64251b4d435bc93f48e567e943da43cfabf40c0531cb23f7fa4f51170de99dff316b76adc3e8becb7fc10ec1ed21c566662f6527c8f59b71895fafe09356678876c5657d12b3b4435ae87997d9d6f77e8d5ae23a23632931bbca7c0bd63c5ddf774a16c38469b09399c45d2d72eabd2c24422c380a67d8bda64fca1008471cb494a677058b8fc5c6c26e9e104bdd5675d956bb2969fafe2a1a0dc9853e04594f01c59edf0b5e1c45f4db1d494c7aa132b5a3349c593d8b1eb01b4eeba02da92b3afb2c6b8094ebb272e0d01010cf772e0cb09a0498c6f5d8a4a30cbc5333c75194b92080c474b7ce2ebce5652c287cca8538f978f176e92a10aa6b1b395a20e7e8160fcbfad8012e2c1f80902db60548504ba49cf22c37df6b432a8ddb1c267f351581f85764d6ad8af608ec874048d55e37a2abf7104bd8afe3447b71cea273e8e4899d7568f953c7f43eee5be5ccfc6089a6cd2c6ccd30d5ad2a515be081dff0ccc8217ceb68472b92d9ea14f5751a22e9b45e21a18620e9f85b949c9457bf7a3a1aef251637aa206ff6f4cc5e829249776cbb45ab094a850cf89173092d5d50de1387a7c040f3bb155c0f1574b3c65ebb9bf3fc9d6580c81530f0d9200c20467917b8f6dd598a1bdd92eb9126a35974c12e39124f0745d06a2f9aa325a3f9433f2bb448d2e0f7559aabaae741e70a62676d113fafe4efc0d74c0d111942a7f45f88ffe39f7941eb20c948db77fd61d2bd9e6dc854d9807d15a777e306cda8d71885ac3b1542f4f21fe4927775d7626f54aa168d2d817c940405b96fa6cdcdd6fa294a79cdeb29e34e037db330231669a6cc7c1de64d3c683fe6d7900cab477770893ad720b7a7d72f88dd964e1c113310ccb0698bc9c55b0734c2495fd8646fe6049b571b8b58fdf89fb5c1baafe88250028429ae17830e6dde4c74a4b6543b82956f1dc1045bdb1e2524704002e3895f8bb43cb4a7a1288358b0bc21316e336219f7efe997e77234ae6dc9a1b52b256b146419c0ebc326dde2cebb91e8779e7e1543dad5678f7c7a7dedf691372863dc4b58ec18a0d1a400f038c03ab6b7ebaf14b1f4408b75cb9aef975094e70d1052be92468f338539526d019987ecd69b1e39f43bc9c7d155deb2ea6d7a0eb76bd570f7edcb0a5d9cbebc2ba0c8cb3647c419d89ef2f0f0891e3194581d1609aa679b8dbb75e3c5ddda98650024d3c440bd2ffbe339e6031b61398e7c8c5dd5f0a8ed6ecda9c96c6c56329e227c598e77887464defaf0300e0db9d93649a2131bb9483e428d48299517859403170735bd2e4dd15777aca90ef2d6aaf8fe1778f3f71de774cfcef0a32914100acb269db21c25a1a7e9bc61bd1edf0e9cd530104b0a2d8095cf1305655f77a77ed74895bb6122ea7c90736afa0a4a660be88596be262ad2e397ad28730d1226ad59dfa2c07e7528f1934a70f63cecee8f76792c43f41c8c5d35ede02058369144a7436341fe07220f87472bb3b0f888f8088bdc979082f1381bbdf0444fcb1f16a45f6f93187ec35df4d7b0ecb114e3733aac8cea6fc63cac0bcafbe92218553e8ff98d97347a604fe6702aea7861f9949c27fd1b11d8193cb8229480e587a3488ee42d7d11ced94b1cf74b04d017824bd930a9da5f35ee3b0eb3deb42573651c551d277400af34964416f90802942b034af18082a1e4a1fa178566d925cbbd8bf8a1bba90ef0b7d62b570a47c1a77d2f00ce45ac89be9c9c39cfaac346ffa418025e70f1bfcbd6815589507649a940da826c2790bf91ff41e73cc42d42f2615c69b9217ceb0c4ccf1840adc9c1e39106ec69022d4bb154c6fcc6bfd51802f33468f9c692a9632a35f855393e198303f86df180590582050e69b72eb92563ff3cb4a49d6f452be7b01def04c33ab66da74ed7539df9b9f6e46ec7245eded43032470e0fa1525b77a5550528560d72d292318454f8114fa85c808efe5f63cfa276024a7d69288d60bbd1963145380537740ca557569d0a2bc3b2e0754f870dc13f948d65d73ad80db7aaf95de44cb1b64bfffd54273d5782be764ea662e451403ae84a1c428121f52be8b46e2dc2f15e1f978d59dc223189b77e5633c90814c799d917d164fd72c1b3262fa28cf1920b7c56e28ac98e6bf79c23a61afead457e9c2a16a408237b8866c695d9761f098808574221b43e6190d4af0c7b67d287e5fdbe53c237d435ea653d411577910d75414bd2c635272ac88643bf7eb8b2850b4a07a14a03560aa7bfdc3558185219e3e1eaacea5e9321114fba09a1537bd50aa91bc14b640c682d52390c32533fc6ed8040844718fc000cd81961da032d466110ccb14258cc681e9f8af694c34ac1298023c98f259db9c1f1c1cb8916cacddf40c9883c05e0c9ed00fb9ad0baedf40e54265e221b2044278e0867d536386391b43662dfe59e09139225cf5c6655320a81965c2308a003959142d7eeed1bbf6fb534d9bc203d44eb57c5f222cc7c103530001d0e52cb5e3b0b657cad235764f59d9cb90e0fe7cac64eef26f8de11db8ff9374471362d01b1855593b06414c5e15304ee5909f686e78d001752a1a782fdcdde2ad27b9b64882cd4fbec4e5f1a216d04a01af7c9c48d72dc0b45964338dc93410749f4bd96f2c74ee8edbdeca618326bb9271b9673920b8d1e07f9ae0d1fa4755a2418b1f072d356b0fddf4821642e27e01f9013be4e98b014a2b76bbf30b8e8191c504305d119e6206817dab95cc13e561e2e0f9e4f5f9208be199b9a66bb075a00bbd642b747b308b1a474aaf670077fcb9bb869321162131978477a93a05136b3d3c8c6b5427cfc48da094f86528778a7b1c5216d51851040b35c73da19267c0797e1c35c3f6f6682dd0812cd42fc3ebefaacd54db8d2e44bd5e5a126405016192993b3afa8247102c0c3e05ceb7bd5cf7bc61b8c86c6c520543a6379c2c02ef0691a1ada302ddbc5f019e4708c52666a2c6edaec4f95217ece40700e6d50b9c5f11339b9f3209346c0964382db0ce0b04d87691e882d8389d058acb2134d086d5edc5b5068bf4425a3d695c77cadee7c26667484394b8b280c264ead4181e852dc0967142c43e38b10973d698b8632a9344b1b14a8bccd54ba475fc3a506fc58c4e2a60c339d6b44dc6273bbc1d766f5762df4ef6c7e3b2dbf1006ebe43934062ba4bab6cb1a934af50e7d66c16ab96715cfcadb280070d3270964e58339e4902b7780c21edddd1cd34508d64faf0c9de3be9038d9c6ad4516e1221b2506b0960b94b38a213caf704204dba059491d1773b6e987ec378a6be169043a457c42245cb5179cdc611731ef6fdb49160879755592e69ebc25bb1d4b82e97f1d4e49c380fc8e76a0c8c33ce7a824b1abf03d47d0dd78bcc8a6fe535eb6c5de1a0f981781bfb593deaaa26cd77013f0a387771f7cd33e589c1cd1c58d6cdb8a88b52944777b8cb125c8da0a4877c3a29c7afcf0cc9004583a07173061b1bb7e723c38de10413bbd188cd0dc5d6254b96121a7843b2147b8229684043b191c40841ac10dbfed5847b001a3c7e2cb5f8936aecd5c5e6fa8d81b37803b490e2107bacb3a059ce51a2708971c31c2320416a330adb543028468c7f99cb9bc3095d6df17a256c67d5df72e5922f0bfe89fa8cd682f83733f22c1073a344ac3cf5bb81d8c61e206332b675a9bf24b08ec9b572ca6aaa205c4366f74aa1338168c9702518f2f5cee69fd5d1adb1727303d05e69248124f155d7c9afcf0102adb1d35332f47fe4b6a6213ed7f916cee52b81d05d9f45e5ce8a4f5571e1046483bd0481153e51b0452c48879386b0320cbcb096f9dcef3a62358b4e6d421d8a4a19be65e51dc4c2eb9d0cc711f55e19e47331939202d54016dbccd16f4107610554ef12914ae4e53104f8bad53c371cecf07c58ab94e1aed79c0447db4f6ec16076e38d0c9b07d88fbbf899f274635d100b9ed0c1e377590c4a4160e9c07a85f985b8f63166ca261cfd88c40699acadd0395e2315342c3e3e7e8510213522322df6dc16a08d4661a764f378bb341450272fa3d9b6fb96c60f922be5b8b267c48195a9058bc7f30116086f062242341b21fb3333daedb652bd2a9021fd6f93287242c6a7d44c53e2404fb5c47fcf3b58c5d05199858ea0c2238decbd45a331cd0a71d2a3e310515748269e5dcd2923011131d89390c7980a61d2ca17f14e304af9a5f299cdcbeb48646bc6e6f83a9eccdd4c14fff6f63a3f7fdd5b37295442748fcf6a12d4926c9c0a699d7c81d57044ee39d38a5ae20b5429eceb2cafd3459b113834b9630105cabb642c9f320e37a4fa2364820c1a5efc8b51661c563999b6d68a1a0217c8e4c58d9a7fe0ad07d7ee4aaff5383ddd8583fc48a07af4e00402de110bada8fee14c89bd6839b4923bbdcc1558938a454a3cd99873dd12648dd176a5a4dbe336fe793f9ef1d873b432b09f617860919d22ae6d897ebf632e2e1c05925452f4dad10af8bf8e9278b61d23078474d8c924dfeb00ddba93bc9f80a4f78360e4daee5eeb59b967e982da354af1542a10bb996d0b46f346943788b6020b5511cfd27e973c68e6cfe0a12badba1a0dae690b9677a774d8a1585a309a48d9ab151f237b7e9e52a53639845556bc61cd26ee53635501b4183b7002c5e0cedd741d3d7d8305aec07481fe37e1fa116c42ff3b58b09f194e975b2780a4ce699a68106abd5b47edaef95a1bd2156be06d9a65b24036aff54902c22899d30404bcc43e5a125b37b54965125a5dbc4b60023b21be526709c19a01035a1db92e85474d70463c9e00f672825eb02b49b6b1a44ac3c2cb5446951f144f1297dd40912cfba24b7e26eb2a8bc44826fc86fd5d255e0fd9adb1f1ac0f677accb71346a64f8148c34b81d16f1c9fef7d87b8940415ff6a225a8c55be6f5d126c65dc7dd706432fff539e6b1438181008e852cccd43dd1367083f067c822eb4cba70024ae1481c6f9b408dba413a475b9d1c029ca81e7e6cc9da3024e907701cb83f412d1dba62b1b5c51e9656552010c1e8156fe8aa1416bb28e4099accb501afbc870b187559233b3e0a1cab8bb9cc014e22c241da94b794fa3854dd6369909b8b71150d3b15677e93a97cacc44e9cc97a1cab8c2b567fdcc80993017ec4fba488eed07ea4067e0af26f29bf418f5c84f481d18e1aa444aee5fde3a83ffb4d10303bd5b9c101636d4a4465faaed1bf4f41127ca92ac1d5c75589f0b54e7e62a867a37ee0071687c1ad8661dd30b001b8cc8c69c7047238fcfb359459fd91e5c5369a7578602d3c6f63a65c211d90f76f2450afac59762f5535f978e525268e4e23e37e19c7b2039f2a44329127294428d7396b74ec5ec278287ba6115ba1c7ff310a272f4bcb9bac43cca24e6bcc8d1cb7c0887b7b6be4be14e4c507b697921718951b791d538df7819a01d801e11aed9d13f2c17a129a751b924aa7c50f72684870429305d63b67fb5237fdc439f06e1ee0c2c1910df5714e66\n```\n\n----------------------------------------\n\nTITLE: Ciphertext Definition\nDESCRIPTION: Defines a large hexadecimal ciphertext value. This likely represents encrypted data within the SQLClient project.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaseline.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n[CIPHERTEXT] = 0xb839194b4d3aa2d43824e083891d55923b5fffa79f179e9f429b77dbe2c4a9284e4ac3040e6d61332f7c53a3347656246c46d7ef4d1ce9c6a25b12960c0fe0789a93798d1f73731a72479f18c0217e6502be7aa0c388e156d651f787560bee465194fa6ef75eff21a8fc6d11e3535a5361deca0092c017d0f77023b5f6b26bfc9e3b360b15ee789ae34a1ec7567823a75b1e3eacabedf1958b9ec39d7884c34c64799c741adc26a583dede15af6a6834c48f1dfa662ec457f2883428a5617f71094a14148e7690d80575778020450aeb0295e67f7d575140f6940277a85152588c257f3d1963cef4645012d6c9cc596ae03c72532cc56ac652090cd15fe6b2e2789a8f4c810ece46cbf8b38cb9591c7b521503f36fcbbe9d3ecf4e3260a7e6d6dddcc6fc03acfb98257e715f9dbf9701e8db849f2228d6ad8e585acdc1ef60b42b8ca211381c2bc16ef3b272370bcf480a0f91d0b6c4e7960dd0972fcaae2f4b2f119e890e87dfb4fb0ff4c0f86b71aa2b12cdce305be7ee4bf7f11e19a7dc251c942ce59a6535a36fd1660a2155a1dec3db4a3bc4573e68fcb9e8bbe019b278c8c5a44b5b900c1516127aed0c88ce2d8902f0f94edc042be73cb80fd1ce06978bd1cb793c738fdf9091750ee93f565dba6741a0e66dc25c69f435cd05fb89da54a74beb6582d84bd07917eb481b739e87de8775959531292b913e96cf5f78529f5f756d334eae220ff7f2edd51d43d3374a6df92af413f38eac19333666bf2481691aeead946ad21594c65f2c673e4bc9ce6b3e0da421b5d05572ff4fb104cbd57b0086e0b7950ed1e745b990d1113afeaeaa7d5dbb88e464ebf3423edf680cd2172a4d8c19a2371cf83d3650ec21f06235be2528ee8fa970a135f82168674753aca79f2e085586d57f642cb96a8c8b59728409aa0012ae83dcb9de55487a529dc4e662cf161b13565111fbae5e8450527e00017d029ebda56fb552c3462e6eaa05e60a3b5b2312e5099ab2059648d392dca7c96757a355a2b41d67ed0834bf2cb2b7b8a82e219b68e05b3b56f86d72b3a790b52451ff8dcdd0a001e1ff03b813220718b26f1cba4306056c13b5ec5f40520a8f341cb9cb211824c27f8d3b990e192508f6c4f4525aeec2ffe502988a11a32d0a558b437e6910af68b8f5cf9f1b02fa2377e063005118db9263b240042f3b96439774cd05bde080420a77f5b46404af7ee50ae9f0ee4141e564b3d3db809fff73f19ac047c853d929bc05425f99235560fe9213b5fd760f070a40c61d25758b2fc5c9b6ee42d24c068e110c6a8cc799f5d3428a79b0d3329d536b9a9825fb90cf8c9a8bff73ff76d223af30488c50671f59981546548167338243598aecf80377adfdd8968a21b410012e7ca69494a998c175d8d1dc374db45b0e9ef31d1c4c793fe41fa467d49186abef917ea9c962e3ff0ee946f365f8f224a750d5ff079e2f0972b788163c9f63a3dfb514709f85f5d98b71bba3ea068641d2299d26b524728e1d73eaf520bd29b197d48580acd64991763aec74ec1b71012e71ad8207775fbc1a4e6f4447e4c8dad1d558b8dc6c86dbeca518fdebbe73fb284bc3e854c060b29b79386c555600793acf25a4031fb56d5ea0bf7dd5b1738aba14ed4db53baa1e83a2c612a71446b51b53e3d8ed3e829c8ce6603288fd05e6613952b1785791cdcbe60a266ded9f1160ed7c5567952b828f68746872d80ec820c131932147864533a0c06a5c8206404ff3ab3c9153208476166900aaf84642a9200c296c82a39e5e645d1b8bce025ba719bff08c4bb5f94e7300300a1b9a571f2e8fc93ef7d95889731872dcd3d16a27ef946fb2e35ff3c4cf4542719cdedf3a16aeb06297a6a9fb8ed9cf7f087c759cafb355d687c5a7d3686148a40a832463dc355a14874576d890e03f6d1537230cd5900c0978ef7ea5ae177b0b3975447fa2e640ce1d070ab81d8ee1453753b24931bba2760370f1e6e0ce089c49a9fa22accf9bec8c5420568c9ad39c0d2810d0c26ded1c2cbf1949be6746bb173c0c70aa83642999f13de054039adf27830f76c6730d21f46584ce50c9bb127720798b798983ff3db963bd6129640c05f0030ba1676c76c17c671aea77dce7cc2d54e6417283fbb03ea527f681ad07c9252d936f4b88215a0c659da05fa193b78f5173f304e99265cef4f2485632d523c45f1a99488029078991886d0a5c14d3636d5fcec435308edd9768696d873db4ca777fadb2aeff7c17087c12d637d030df480e43551e1b9e38ba0786468e5eb3de34a0e901a2992a7252e30724f04f84ec145c213b1569d80eadead93d8cac6129be96de087153afebc00c273a8e55c68d152ff41cda0dd38ea671071b4b5d109147fdd85ecae7758084e5708bc969b72212947fa5dd19cf5b5234f15fb35b0eddfdf02c466d945bc40e75865ab27041f70671549a58dd931b8e43c3830921a5b34fd37aad1dca3b57ea41f7b51e9b1db7aa64304a41a1274b04571fc7f94efb548c0841234f83ced7cc82c463f3de0db17c207339f9ea281883c6e1760b2af298981cd62a913b40f3fb0782fff7960b55725c781adfde11660934b81b018090c75a61f66966f4f414ab47ed7029dc7f94dca7286718cdd5186239b3731337f8e12f3d786e89c6b04683c7f73998f025e3db66704dd8b30526772afa6c10589de532e02f8e6e834aaf2914169096f5c9ee8cd9cd2aaa5865f9bc9a980acc1cd9e3ca17e9868c1c16b7f8055a28f63018cf989e608b030189bb638eafcdbcec2e6bfe7a5415381a6b62bbb48e68dfc8428d615f1aaf0d0d35c542036e435fcc72e6b14cccf4b61adb9898bb7919b227e4e778c9393a18413369de3528dd97c90a6f222931aa47e06676ff837578f661621ca791873df1b48c6541edb611d5e987cf83d665da424882b23f3e8a0a4d6080445b95e051f0fb364869214d54fc8bc34f172545795de9af212a7412970e7508be181c85533c848fd55cd6020b001da50e7930497fcdae91d1e2a647af4f1c74fa12b1b6ddd64c002b64b2cdb212d658803a9808f82d5819747aaa6f78891f029d58d1b9846213882e973757798d4a2701a380915bcc9a97266497f77dec31e01865af46f51e265e19d57825a52d359dbffb0f34d671ae22fbac65dceaf83ad2e297c46d7d90fe2f26d35436213116e73dce10abf9dffb5d54de62a9ffffebebd71fd1cced7c1a2119cbbac07218abe0955ad943c025e8a701cae2f8ad0f646923d25dd53c483d0d26e5a81914ba1af9de213789e67a95114302c5fc667dda6bf94042fafab9770212b1ec6a7796b5f00e8e3d242380e51beed87e732715e1fb2315a26021eb964ccc337e207b5034ede9a192d26f3b5cd26ea1a3e36df3847d3f5ddbda808ddd7e54a444d87422c60aa7e593a9748b91c2074e2d59a1f56086bb399ea5f9f7f06eb999957363bc9e94db8e67598a504a0ed52c1970209752c786457b0e899a146cc1de547d8bb564eb758ddf39a21ee27ef9a801ed33d809cb3cf188a8e90781bc3a3eecc11fd8b900449e6f485e77930a8b4346ce46cbffcbdfbb9e48283222f0a16737b440c480f332c4bcc6ad94a488f50eeb2f1d19df15cc5764afc4d3d83cc1ac55d63001a59219ecef4509d5040d1a8f9dab743b96eb7e10092028ca1c33e6b2b00e443864762e4ec5751ba8ec618f2ba52ea8632e5c8455d3b98eb87556fb5974023aeaf484da0b8d8f549d94cecba7dd5e9013472f0f7e78ffb71bb3c54dd0818042e956fb75e0661ddc1c844bca080b28ac4654f083f0b6f8cc9042af8c0edf2d3a1c7885a9cd25619af2f237033ece775baf9a16f075d481ede570a008e1ddf716e9c458224e845976c9167094f2909b5b3b83677ce0f17adb0f3e068b35ba17426efa30f2a3f24f302a8d53395c3bee581df2cdf01d03d0012e5125a6a4ed8d93f82851f480fcd8d44a5c63385ab336c080d5cc0b3f8f194acb5940017515195fddfead4a2c860b3ef0158a7ddad29e1ece1e4c27e94dc02bde55e4489d630e534f41a5640841bcaee4cab16a0c39cb150489ecf05cd3ba797bb8d6842c72e216ccfb550a6b12f0450ff11e02ff9110dab699bc1a6743ad38e68c2b288a91606d886085d320f775d557041d33159e277f0e73900e89a98cf7f2b7439c2226416b381d092b2a1ad1483949c154d6540195196f5f8c377510f04a9d7cb8c328561950ab547377d582162989934d5f69c6fdb31bdff4ccff396bb3300a2925d8c97d1bce06d32e5c319af210bd708a47bd9772f9c466f05070ae7b483719968708fa2e8a37a535ac5ab4ce1bebce0eb64bbef3535d0c04e34ed680b22492cfeb2b73d9b76da3149af46d7249e4e53058949a2816da06d6f52b7bbec624327b7f28c193a32af475c68c10feda77ebb319224113d43b603e20e88fcf49e8601b841ec7d997e626ee90ce8a63a2bc2fad5797a0629f295eb0a792751726370315daa397f732be5f3331fed79ead301a4a5e10194e8e0236d1f40ca92c5ff5d289c46daf146b6e2f77dd46be88ad5a8762de87bb80f3163c0a65a209be7be387d06ed37906b697e26642c64a87e8949f8657e53fe7a3496ae6dfacfe9da900869079f9d5c86134b8fb412a170b9bf1d22f7864c40ad42b9b6c7266e1fc894dff7ed14b64cfba3fa2e5cee98802c02ad235cea02e7c6a01f816e5c52ba2f9259a36ef5fb6d515fb3027294079d58967251b14880d73ff53ce9ba7cc1e22251f69e6d46e639b69c3efb3c7b23bb22591262dd02f4b2dcaec5ff1afce5b615386e97d3374dcb781715b0b9449040d86ac19c9ad16de5cf1dd87eaaf1f75623c384b06715091fb8e0dae467b74b2fe94b85574ba882805d61209f0fbe38609579c48d083e7bd6d5c44bc7d6c0a0e6d5c54935dd6769a0ef43c4a170fc1be123d037a7ecfbebbf2db669daa763b1a49782c1e5a63ccaa7628699eb641285982488fca444d5287d6c883658cc16427f744dd6ef5a813dd2a596732db916c7f17300706197175ff284a4757ee344cb34c9ef42b896f7502b19e8ef8e9b5b64c0b44f684f1037a54f01f63f7e6e70c41654c73c628a06442c986f492f52c5cdedd466e69bf0d1b64536eaaf917018ec11943c980c9feb03abafbe57a77598ffc97768785f2ef81987591516d7d55b0a2f2cdcb38ee597b2572ece24e97f311a9f167eb806e4b31b6fce65bd4d6a8622706d172ae4b434ad48d38309606c8bfd8a1a5984288a5f4ebb92a56cfea8796b7eae48dd3de6a0d8342b92cae10754651a51f8489f18d85ae0e85e7a756df02f6a049ed8c3b1a0b1ac57bf7f409b2cff11d8695c0b2d38eb70a9323c22751ecf7e67a3b91308ee964356a1a125f29d6510c72eda8174af112a74d07cca539725d81b424679fd4f11e7a33a593ef966679f26ae33bf820b81bc19e58af1c77ccac06c9ed10646243968e39ed9944064e6e19b66590b1f6a9582661078a99fde67a\n```\n\n----------------------------------------\n\nTITLE: CEK Data: PREFIX and HASHED_CEK/SIGNED_CEK\nDESCRIPTION: The snippet shows prefix used, a hashed version of the CEK and a digitally signed version of it. HASHED_CEK and SIGNED_CEK provide integrity and authenticity to the CEK. The prefix likely contains metadata about the CEK's usage or origin.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaselineRsa.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[PREFIX_LEN] = 371\n[PREFIX] = 0x016e000001430075007200720065006e00740055007300650072002f004d0079002f0062003300630036003600660066006200650031006400620035003700340031003900370039003200650032003400610061003900370030003400350035006200660061006300330030003700350037001ee7fdd428a1c866ba371abb16d8a94b10344afc13e25f0d1ff48a68eaccd077eef6a1f23c64044b0b9461bf45f64861c4fa4f343d14df14f0fed9e30051ffec9e44d17700839a7cbb70c77c7af86a35a6329da5a3477ca7b68a926ed8a8bb48580ad93a3a62c11bb362bd2f400a7817cbe64eb3185119be59d7878f72dc06c7d82b26649323867fd45603bd6841dcb15a98dd3e56edbc39ff2b2fa53b96af978c726f1abacf478b6bdfb27b51f7e8a751f1b8796f3e69f3409a532384a28d5f67ee0a05e68ebe849c37dd89b42e58c39bae49e1f1ada3b6e5ec60ad3c677cb22eaa3030e16c723b0e286581f4fa88c6163b73e78ac2b0b798a67b83f38181d2\n[HASHED_CEK] = 0x8d1e75746b4b2606de067b18d478fa85f48623641f8d7e274154db947b7af473\n[SIGNED_CEK] = 0x35d0e5529ceb65840fddc745fd132afced5cf5fa75c5c4f5ca0da6882c15eb661680a450465f7062bb2c542632065cb64b07f96e33ebd53534cbfd6b37f8690f788fe2f0c577cff37da70934943b2a84284d425645313ff0f0773e591bced0c614048513ee804fd6d832dce330fc56c2efba9636113cacbadf8c3f4a90e2c4825643c1dfdf8bd37dc0803091e6cb8e8f533efd2aea26728bcfa20a5f27b3c150996c842b4cc10a9cc42e5250e2e058fb8834e1e80e219f8d2d143fee49735852e0d31f14308df36350c4e7105da40ee97168456155f5006cac835fe7d47e8d3a5a7bbed9c620fb0fd315414c9caeaa1b5138504fc099e9d1ff033855858b6b45\n```\n\n----------------------------------------\n\nTITLE: Reading Stream data from SqlDataReader Asynchronously (C#)\nDESCRIPTION: This code demonstrates how to use `GetFieldValueAsync<Stream>` to read stream data from a `SqlDataReader`. The example establishes a connection to the SQL Server, executes a query, and reads the stream data asynchronously. The `using` statements ensure proper resource disposal.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/release-notes/4.0/4.0.0.md#_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = await command.ExecuteReaderAsync())\n        {\n            if (await reader.ReadAsync())\n            {\n                using (Stream stream = await reader.GetFieldValueAsync<Stream>(1))\n                {\n                    // Continue to read from stream\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CEK Data: PREFIX and HASHED_CEK/SIGNED_CEK (Variant 2)\nDESCRIPTION: The snippet shows prefix used, a hashed version of the CEK and a digitally signed version of it based on the second PLAINTEXT/CIPHERTEXT_CEK data. HASHED_CEK and SIGNED_CEK provide integrity and authenticity to the CEK. The prefix likely contains metadata about the CEK's usage or origin.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaselineRsa.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[PREFIX_LEN] = 371\n[PREFIX] = 0x016e000001430075007200720065006e00740055007300650072002f004d0079002f006200330063003600360066006600620065003100640062003500370034003100390037003900320065003200340061006100390037003000340035003500620066006100630033003000370035003700b1024329e17a82507a152ae5ffc255927bdb5e000fecba8e77525b2c30fc2a4a886d012770659fc150a0f4971435c716bb9f10da05606b48b6308e5efbb66389109a46031e92df2a1728ea9968188dd2b2339b2acc4b4e2ec6fb7dcfd3ba4c217ecf27bb8cdec470c2f5abb35d6b74ff32bd3023b072ec320d628ad297380d89f45f647117ed2ed99a2c29e9f46b6fb54593807d2dee77889922dd02cfd37996209158ba656e690ff4b9fb4c9370549660717bc2fe7d5d04987fb3fcb3d1f0b426a40b885c6164d24289447627215cc46ad51ee64fd3331a32cac418af18efbf5ebfa2033f6d62cfbd23481db9a5cf46375cd058fc3e42c5024953f92260b7f7\n[HASHED_CEK] = 0xf256613d131c96ab7b525c0d3d32605eb309db7ea6a239d0cdc3ef929dacff29\n[SIGNED_CEK] = 0x80b2d3b43fd897e77e20ae2805897ea3f20f852ff2e4f116cafd6ad694fa4377644b4d60f895e6b4d528009559a2bcbefa54ec9e9320e23938223fdddded2503fbf4d09348115cdfdc43446299d1ff64321d0a4ba229079a9150791312e55fbbcb7d272c01802fbc3ca1dd27fcae79de077edc480eb5b14ddc0719395e967689d0bbc3093f8931413af7a658a5fea31eb3f7ead8bd465399c72778cc1cb7fbd390c01434c64aa4555b033e1852f72938af7997247771868b95c0594c4821393b2b263d2c5da1ac70fced8e0cebb5766134378ca71e3a71ae2eeb4d743ddc8f901c27fe30dc5696b2151f788defdd7d8502dc3e5e7dbd13230f4dd3ea32ab8713\n```\n\n----------------------------------------\n\nTITLE: CEK Data: FINALCELL_CEK\nDESCRIPTION: This snippet represents the final CEK data, which includes the prefix, ciphertext and signed cek values. It is likely the result of concatenating various components after encryption, hashing, and signing operations.\nSOURCE: https://github.com/dotnet/sqlclient/blob/main/src/Microsoft.Data.SqlClient/tests/ManualTests/AlwaysEncrypted/TestFixtures/Setup/TCECryptoNativeBaselineRsa.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[FINALCELL_CEK] = 0x016e000001430075007200720065006e00740055007300650072002f004d0079002f006200330063003600360066006600620065003100640062003500370034003100390037003900320065003200340061006100390037003000340035003500620066006100630033003000370035003700b598e4e469ad5086e53c92a9af1daf1a223ee1a7155bb06afba8bc3f23421465182cc49780915a9a5e90fe670b3c409efa572567d9d6cfb0cd73095f7f596c5cbaf0c9d5e8cd67f057a70b196248801d1975f18dc882ed1e9fa31b47764df6395990817afb555de98f17e01bbfecb7e7948d8b1a686686b1542e9791d930ea462b5d217bd5ae580795a34952c96ee001af81baa2b41d86df2e963d41c8fb199d2fa18792226fa721472ba005d7092dbeb040bb0737b11506589c064d69f388b87c7323c53eed808af1922edd249eb1cd69264db00930703b64db06aceaab76c317c5786e7b9c8b57cb218374f64dc770908b933643cbac80306f1736bd869fce1753d847891f4ad5b29a40db4728562c38ab34e9eeb41859654ec5a63307af765eb2102b6d17842303c1f474d5984002990614c548dfde82418d6212bf8953c8687de36088604cbb4df8927def794c1cb981e16ce1a663ec03bc745f762c74ebba734a9613e36d502882b3838ba0f15a0a6da9fd1580eba4ff3eaf6e290fc22b4447d03e19f4edee6bf3cf6716e0dea971713337f583fbed97a5027c38f6ab7e3f65f9bb2a0f094f665ede6cf0d59f6ba26da09dafff46400a397049a835b9ef8b063872caf42089aa9e9a80bf257b0b506ac13c5858741e7e01cb7c308c07a005e15d0530daeb639fa3c2885558949f4703df61b75e70b6b6f4fd5cb8c8551e\n```"
  }
]