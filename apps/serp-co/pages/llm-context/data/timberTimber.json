[
  {
    "owner": "timber",
    "repo": "timber",
    "content": "TITLE: Rendering Post Data in Twig Template\nDESCRIPTION: This Twig template extends a base template and renders post data including title, thumbnail, and content. It demonstrates how to structure a Twig file for displaying WordPress post information.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/index.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.twig' %}\n\n{% block content %}\n\t<article>\n\t\t<h1>{{ post.title }}</h1>\n\n\t\t<img\n            src=\"{{ post.thumbnail.src }}\"\n            alt=\"{{ post.thumbnail.alt }}\"\n        >\n\n\t\t<div class=\"post-content\">\n\t\t\t{{ post.content }}\n\t\t</div>\n\t</article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Meta Values with meta() Method\nDESCRIPTION: Demonstrates the recommended way to access filtered meta values using the meta() method in both Twig and PHP.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-fields.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.meta('my_custom_field') }}\n```\n\nLANGUAGE: php\nCODE:\n```\n$my_custom_field = $post->meta('my_custom_field');\n```\n\n----------------------------------------\n\nTITLE: Initializing Timber in WordPress functions.php\nDESCRIPTION: PHP code to include Composer's autoload file and initialize Timber in the WordPress functions.php file. This is necessary if your theme or project is not already set up to use Composer's autoload.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Load Composer dependencies.\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// Initialize Timber.\nTimber\\Timber::init();\n```\n\n----------------------------------------\n\nTITLE: Basic Timber View Rendering\nDESCRIPTION: Simple example of rendering a Twig template using Timber\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTimber::render('index.twig');\n```\n\n----------------------------------------\n\nTITLE: Caching Entire Template Render in Timber PHP\nDESCRIPTION: Example of caching a complete Timber template render for 10 minutes using the render method's expires parameter. The cache automatically invalidates when data changes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context['posts'] = Timber::get_posts();\nTimber::render( 'index.twig', $context, 600 );\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Twig Templates in Timber\nDESCRIPTION: This PHP code demonstrates how Timber renders custom Twig templates for pages. It looks for a page-specific template first, then falls back to a generic page template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-page-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTimber::render([\n    'page-' . $post->post_name . '.twig',\n    'page.twig',\n], $context);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Functions and Filters to Twig\nDESCRIPTION: Demonstrates how to add custom functions and filters to Twig using Timber's Twig_Function and Twig_Filter classes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nadd_filter( 'timber/twig', 'add_to_twig' );\n\n/**\n * Adds functionality to Twig.\n * \n * @param \\Twig\\Environment $twig The Twig environment.\n * @return \\Twig\\Environment\n */\nfunction add_to_twig( $twig ) {\n    // Adding a function.\n    $twig->addFunction( new Timber\\Twig_Function( 'edit_post_link', 'edit_post_link' ) );\n    \n    // Adding functions as filters.\n    $twig->addFilter( new Timber\\Twig_Filter( 'whateverify', 'whateverify' ) );\n    $twig->addFilter( new Timber\\Twig_Filter( 'slugify', function( $title ) {\n        return sanitize_title( $title );\n    } ) );\n    \n    return $twig;\n}\n\nfunction whateverify( $text ) {\n    $text .= ' or whatever';\n    \n    return $text;\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for Twig Template in PHP\nDESCRIPTION: This snippet demonstrates how to prepare data in a PHP file for rendering with a Twig template using Timber. It sets up the context and renders the 'single.twig' template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/index.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Timber\\Timber;\n\n$context = Timber::context();\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Implementing Related Posts Method in Custom Post Class in PHP\nDESCRIPTION: Extends the BlogPost class to add a related_posts() method that fetches related posts based on categories.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Class BlogPost\n */\nclass BlogPost extends \\Timber\\Post\n{\n    /**\n     * Related posts cache.\n     *\n     * @var \\Timber\\PostCollectionInterface\n     */\n    protected $related_posts;\n\n    /**\n     * Gets related posts for that post object.\n     *\n     * @return \\Timber\\PostCollectionInterface\n     */\n    public function related_posts()\n    {\n        // Return related posts early if we already loaded them.\n        if (!empty($this->related_posts)) {\n            return $this->related_posts;\n        }\n\n        $this->related_posts = Timber::get_posts([\n            'post_type' => $this->post_type,\n            'posts_per_page' => 3,\n            'orderby' => 'date',\n            'order' => 'DESC',\n            'post__not_in' => [$this->ID],\n            'category__in' => $this->terms([\n                'taxonomy' => 'category',\n                'fields' => 'ids',\n            ]),\n        ]);\n\n        return $this->related_posts;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Post Data in Twig Templates with Timber\nDESCRIPTION: This section shows how to access various post data in Twig templates using Timber. It covers content, permalink, title, and tags.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cheatsheet.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.content }}\n{{ post.link }}\n{{ post.title }}\n{{ post.tags }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Timber in WordPress\nDESCRIPTION: PHP code to initialize Timber in your WordPress theme's functions.php file. This creates a new instance of the Timber class which provides access to the Timber functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/setup.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$timber = new Timber\\Timber();\n```\n\n----------------------------------------\n\nTITLE: Using Timber::context() Function in PHP\nDESCRIPTION: Shows how to use the Timber::context() function to get a set of useful variables provided by Timber. This context can then be passed to a Twig template for rendering.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Query for Post Archives with Timber\nDESCRIPTION: PHP code demonstrating a complex custom query for post archives using Timber::get_posts(). The example shows filtering posts by movie genre and actor taxonomies with specific term conditions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/a-post-archive.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$args = [\n    'post_type' => 'post',\n    'tax_query' => [\n        'relation' => 'AND',\n        [\n            'taxonomy' => 'movie_genre',\n            'field' => 'slug',\n            'terms' => ['action', 'comedy'],\n        ],\n        [\n            'taxonomy' => 'actor',\n            'field' => 'id',\n            'terms' => [103, 115, 206],\n            'operator' => 'NOT IN',\n        ],\n    ],\n];\n\n$context['posts'] = Timber::get_posts($args);\n```\n\n----------------------------------------\n\nTITLE: Basic Single Post Template in Twig\nDESCRIPTION: Main template for displaying single posts using Timber and Twig, extending from a base template and displaying post metadata and content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n    <div class=\"content-wrapper\">\n        <article class=\"post-type-{{ post.post_type }}\" id=\"post-{{ post.ID }}\">\n            <section class=\"article-content\">\n                <h1 class=\"article-h1\">{{ post.title }}</h1>\n                <h2 class=\"article-h2\">{{ post.subtitle }}</h2>\n                <p class=\"blog-author\">\n                    <span>By</span> {{ post.author.name }} <span>&bull;</span> {{ post.post_date|date }}\n                </p>\n                {{ post.content }}\n            </section>\n        </article>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Base Template Structure in Twig\nDESCRIPTION: Shows the base template structure with HTML skeleton and defined blocks that can be extended by child templates\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/template-inheritance-and-includes.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        {% block head %}\n            <title>{{ site.title }}</title>\n        {% endblock %}\n    </head>\n\n    <body>\n        <main>\n            {% block content %}\n            {% endblock %}\n        </main>\n\n        <footer>\n            {% block footer %}\n                <p>Brought to you with ❤ by the Timber.</p>\n            {% endblock %}\n        </footer>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Timber via Composer\nDESCRIPTION: Command to install Timber using Composer. This can be run from either the theme root or WordPress root directory depending on where you want to include Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require timber/timber\n```\n\n----------------------------------------\n\nTITLE: Caching PHP Data with Transients\nDESCRIPTION: Example of using TimberHelper::transient to cache expensive data operations with a callback function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/performance.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$context = Timber::context();\n\n$context['main_stories'] = TimberHelper::transient( 'main_stories', function(){\n    $posts = Timber::get_posts();\n\n    // As an example, do something expensive with these posts\n    $extra_teases = get_field( 'my_extra_teases', 'options' );\n\n    foreach( $extra_teases as &$tease ){\n        $tease = new Timber\\Post( $tease );\n    }\n\n    $main_stories = array();\n    $main_stories['posts'] = $posts;\n    $main_stories['extra_teases'] = $extra_teases;\n\n    return $main_stories;\n}, 600 );\n\nTimber::render( 'home.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for Twig Rendering in PHP\nDESCRIPTION: This PHP snippet demonstrates how to prepare data for rendering in a Twig template, including a dynamic year variable and a copyright message from WordPress options.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'year' => wp_date( 'Y' ),\n    // \"Copyright {{ year }} by Upstatement, LLC. All Rights Reserved\"\n    'copyright' => get_option( 'footer_message' );\n];\n\nTimber::render( 'footer.twig', $data );\n```\n\n----------------------------------------\n\nTITLE: Implementing Shortcode with Timber in PHP\nDESCRIPTION: Demonstrates how to create a WordPress shortcode that uses Timber for rendering its output.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Should be called from within an init action hook\nadd_shortcode( 'youtube', 'youtube_shortcode' );\n\nfunction youtube_shortcode( $atts ) {\n    if( isset( $atts['id'] ) ) {\n        $id = sanitize_text_field( $atts['id'] );\n    } else {\n        $id = false;\n    }\n\n    // This time we use Timber::compile since shortcodes should return the code\n    return Timber::compile( 'youtube-short.twig', array( 'id' => $id ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Post Class with Timber in PHP\nDESCRIPTION: Demonstrates how to use Timber's class map feature to register a custom BlogPost class for the 'post' post type.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('src/BlogPost.php');\n\nadd_filter('timber/post/classmap', function ($classmap) {\n    $custom_classmap = [\n        'post' => BlogPost::class,\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Registering Multiple ACF Blocks\nDESCRIPTION: PHP function to dynamically register multiple ACF Blocks by iterating through the blocks directory.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction register_acf_blocks() {\n    foreach ($blocks = new DirectoryIterator( __DIR__ . '/blocks' ) as $item) {\n        // Check if block.json file exists in each subfolder.\n        if ($item->isDir() && !$item->isDot()\n            && file_exists($item->getPathname() . '/block.json')\n        ) {\n            // Register the block given the directory name within the blocks\n            // directory.\n            register_block_type($item -> getPathname());\n        }\n    }\n}\n\nadd_action('init', 'register_acf_blocks');\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timber Cache Mode\nDESCRIPTION: Shows how to change the default cache mode globally using the 'timber/cache/mode' filter. This example sets the cache mode to use WordPress Object Cache.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\napply_filters('timber/cache/mode', function () {\n    return Timber\\Loader::CACHE_OBJECT;\n});\n```\n\n----------------------------------------\n\nTITLE: Post Template Structure in Twig\nDESCRIPTION: Shows a complete Twig template structure for displaying post content including title, author, date and content\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<article class=\"article post-type-{{ post.type }}\" id=\"post-{{ post.ID }}\">\n    <section class=\"article-content\">\n        <h1 class=\"article-h1\">{{ post.title }}</h1>\n        <h2 class=\"article-h2\">{{ post.meta('subtitle') }}</h2>\n\n        <p class=\"article-author\">\n            <span>By</span> {{ post.author.name }} <span>&bull;</span> {{ post.date }}\n        </p>\n\n        {{ post.content }}\n    </section>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Declaring WooCommerce Support in WordPress Theme\nDESCRIPTION: This PHP snippet adds WooCommerce support to a WordPress theme by hooking into the 'after_setup_theme' action.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction theme_add_woocommerce_support()\n{\n    add_theme_support('woocommerce');\n}\n\nadd_action('after_setup_theme', 'theme_add_woocommerce_support');\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Posts\nDESCRIPTION: Demonstrates different ways to query multiple posts using Timber::get_posts()\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$posts = Timber::get_posts($query);\n\n// Use the global query.\n$posts = Timber::get_posts();\n\n// Using the WP_Query argument format.\n$posts = Timber::get_posts([\n    'post_type' => 'article',\n    'category_name' => 'sports',\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering ACF Blocks with Timber\nDESCRIPTION: PHP function to render ACF Blocks using Timber, preparing the context and loading the appropriate Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction my_acf_block_render_callback($attributes, $content = '', $is_preview = false, $post_id = 0, $wp_block = null) {\n    // Create the slug of the block using the name property in the block.json.\n    $slug = str_replace( 'acf/', '', $attributes['name'] );\n\n    $context = Timber::context();\n\n    // Store block attributes.\n    $context['attributes'] = $attributes;\n\n    // Store field values. These are the fields from your ACF field group for the block.\n    $context['fields'] = get_fields();\n\n    // Store whether the block is being rendered in the editor or on the frontend.\n    $context['is_preview'] = $is_preview;\n\n    // Render the block.\n    Timber::render(\n        'blocks/' . $slug . '/' . $slug . '.twig',\n        $context\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Event Date Handling in PHP\nDESCRIPTION: Enhanced Event class with comprehensive date handling including start/end dates and format customization\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Class Event\n */\nclass Event extends \\Timber\\Post\n{\n    /**\n     * Gets display date.\n     *\n     * @param array $formats An array of date formats.\n     *\n     * @return string\n     */\n    public function date_display($formats = [])\n    {\n        $formats = wp_parse_args($formats, [\n            'single' => 'F j Y',\n            'yearless' => 'F j',\n            'same_month_start' => 'j',\n            'same_month_end' => 'j F Y',\n        ]);\n\n        $date_start = DateTimeImmutable::createFromFormat(\n            'Ymd',\n            $this->meta('date_start')\n        );\n        $date_end = DateTimeImmutable::createFromFormat(\n            'Ymd',\n            $this->meta('date_end')\n        );\n\n        if (empty($date_start)) {\n            return '';\n        }\n\n        if (empty($date_end)) {\n            // There's only a start date.\n            $date_string = wp_date($formats['single'], $date_start->getTimestamp());\n        } else {\n            // Different format if month is the same.\n            if ($date_start->format('m') === $date_end->format('m')) {\n                $date_string = sprintf(\n                    '%1$s &ndash %2$s',\n                    wp_date($formats['same_month_start'], $date_start->getTimestamp()),\n                    wp_date($formats['same_month_end'], $date_end->getTimestamp())\n                );\n            } else {\n                $date_string = sprintf(\n                    '%1$s &ndash %2$s',\n                    wp_date($formats['yearless'], $date_start->getTimestamp()),\n                    wp_date($formats['single'], $date_end->getTimestamp())\n                );\n            }\n        }\n\n        return $date_string;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IntegrationInterface in Timber\nDESCRIPTION: The core interface that all Timber integrations must implement. It contains two required methods: should_init() to determine if the integration should be initialized, and init() to perform the actual integration setup.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Timber\\Integration;\n\ninterface IntegrationInterface\n{\n    public function should_init(): bool;\n\n    public function init(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Meta Values in Timber 2.0\nDESCRIPTION: Illustrates the new recommended way to access meta values in Timber 2.0 using the meta() method instead of direct property access.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.my_custom_field_name }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.meta('my_custom_field_name') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.raw_meta('my_custom_field_name') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(post.meta()) }}\n{{ dump(post.raw_meta()) }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig Autoescape in Timber (PHP)\nDESCRIPTION: This snippet shows how to enable Twig's autoescape behavior in Timber using the 'timber/twig/environment/options' filter. It sets the autoescape option to 'html'.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/escaping.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/environment/options', function ($options) {\n    $options['autoescape'] = 'html';\n\n    return $options;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Post Template Structure in Twig\nDESCRIPTION: Demonstrates a basic single post template that extends a base template, showing the fundamental structure for template inheritance in Timber\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/template-inheritance-and-includes.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.twig' %}\n\n{% block content %}\n\n    <article>\n\n        <header>\n            <h1>{{ post.title }}</h1>\n        </header>\n\n        <section>\n            {{ post.content }}\n        </section>\n\n    </article>\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Working with ACF Flexible Content Field in Twig\nDESCRIPTION: Shows how to use conditional logic to handle different layout types in an ACF flexible content field in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% for media_item in post.meta('media_set') %}\n\t{% if media_item.acf_fc_layout == 'image_set' %}\n\t\t<img src=\"{{ Image(media_item.image).src }}\" />\n\t\t<p class=\"caption\">{{ Image(media_item.image).caption }}</p>\n\t\t<aside class=\"notes\">{{ media_item.notes }}</aside>\n\t{% elseif media_item.acf_fc_layout == 'video_set' %}\n\t\t<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/{{ media_item.youtube_id }}\" frameborder=\"0\" allowfullscreen></iframe>\n\t\t<p class=\"caption\">{{ media_item.caption }}</p>\n\t{% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template Structure in Timber\nDESCRIPTION: Example of a Twig template file showing how to extend a base template, create content blocks, and display WordPress post data using Timber's syntax. Demonstrates accessing post title, thumbnail, and content.\nSOURCE: https://github.com/timber/timber/blob/2.x/README.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n  <h1 class=\"big-title\">{{ foo }}</h1>\n  <h2 class=\"post-title\">{{ post.title }}</h2>\n\n  <img src=\"{{ post.thumbnail.src }}\" />\n\n  <div class=\"body\">\n\t{{ post.content }}\n  </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Query Posts by ACF Field Value in PHP\nDESCRIPTION: Demonstrates how to use WP_Query to fetch posts based on a custom field value, specifically finding posts where the 'color' field equals 'red'.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$args = array(\n    'numberposts' => -1,\n    'post_type' => 'post',\n    'meta_key' => 'color',\n    'meta_value' => 'red'\n);\n$context['posts'] = Timber::get_posts($args);\n```\n\n----------------------------------------\n\nTITLE: User Class Assignment Based on Capabilities in Timber (PHP)\nDESCRIPTION: This snippet demonstrates how to assign different User classes based on user capabilities. It checks for specific capabilities and returns corresponding classes like Administrator or Editor.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/user/class', function ($class, \\WP_User $user) {\n    if ($user->has_cap('manage_options')) {\n        return Administrator::class;\n    } elseif ($user->has_cap('edit_pages')) {\n        return Editor::class;\n    }\n\n    return $class;\n}, 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions with Comment Class Map in Timber\nDESCRIPTION: This example demonstrates how to use a callback function with timber/comment/classmap to select different comment classes. It chooses between BookComment and BookChildComment based on whether the post has a parent.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse BookChildComment;\nuse BookComment;\n\nadd_filter('timber/comment/classmap', function ($classmap) {\n    $custom_classmap = [\n        'book' => function (\\WP_Comment $comment) {\n            $post = get_post($comment->comment_post_ID);\n\n            if (0 !== $post->post_parent) {\n                return BookChildComment::class;\n            }\n\n            return BookComment::class;\n        },\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Extended Single Post Template with Nested Blocks\nDESCRIPTION: Advanced single post template showcasing nested block structure for flexible content replacement\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/template-inheritance-and-includes.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.twig' %}\n\n{% block content %}\n    <article\n        class=\"article post-type-{{ post.post_type }}\"\n        id=\"post-{{ post.ID }}\"\n    >\n        <section class=\"article-content\">\n            {% block headline %}\n                <header>\n                    <h1 class=\"article-title\">{{ post.title }}</h1>\n                    <p role=\"doc-subtitle\">{{ post.subtitle }}</p>\n                </header>\n            {% endblock %}\n\n            <p class=\"article-author\"><span>By</span> {{ post.author.name }} <span>&bull;</span> {{ post.date }}</p>\n\n            {{ post.content }}\n        </section>\n    </article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Threaded Comments Method 2 in Twig Using Timber's CommentThread Class\nDESCRIPTION: Main template for implementing threaded comments using Timber's CommentThread class. This implementation in single.twig displays the post title, loops through comments, and includes a separate comment template for individual comments.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/comments.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<div id=\"post-comments\">\n  <h4>Comments on {{ post.title }}</h4>\n  <ul>\n    {% for comment in post.comments %}\n      {% include 'comment.twig' %}\n    {% endfor %}\n  </ul>\n  <div class=\"comment-form\">\n    {{ function('comment_form') }}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying ACF Repeater Field in Twig\nDESCRIPTION: Demonstrates how to iterate through ACF repeater field items and display their content in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<h2>{{ post.title }}</h2>\n<div class=\"my-list\">\n\t{% for item in post.meta('my_repeater') %}\n\t\t<div class=\"item\">\n\t\t\t<h4>{{ item.name }}</h4>\n\t\t\t<h6>{{ item.info }}</h6>\n\t\t\t<img src=\"{{ Image(item.picture).src }}\" />\n\t\t</div>\n\t{% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Menu Items in Twig Template\nDESCRIPTION: Example of looping through menu items and displaying them in a Twig template, including handling of child menu items.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<nav>\n    <ul class=\"nav-main\">\n        {% for item in menu.items %}\n            <li class=\"nav-main-item {{ item.classes|join(' ') }}\">\n                <a\n                    class=\"nav-main-link\" href=\"{{ item.link }}\"\n                    {{ item.is_target_blank ? 'target=\"_blank\"' }}\n                >{{ item.title }}</a>\n\n                {% if item.children %}\n                    <ul class=\"nav-drop\">\n                        {% for child in item.children %}\n                            <li class=\"nav-drop-item\">\n                                <a\n                                    href=\"{{ child.link }}\"\n                                    {{ item.is_target_blank ? 'target=\"_blank\"' }}\n                                >{{ child.title }}</a>\n                            </li>\n                        {% endfor %}\n                    </ul>\n                {% endif %}\n            </li>\n        {% endfor %}\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Custom Query for Archive Template in Timber\nDESCRIPTION: Demonstrates how to use a custom query in an archive template using Timber. This example shows how to get posts of type 'book' and pass them to the context.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context([\n    'posts' => Timber::get_posts([\n        'post_type' => 'book',\n        'posts_per_page' => -1,\n        'post_status' => 'publish',\n    ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Menus in Timber (PHP)\nDESCRIPTION: Examples of different ways to get a menu object using Timber::get_menu(). This function can accept a menu slug, ID, name, or registered location slug.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$menu = Timber::get_menu('primary-navigation');\n\n$menu = Timber::get_menu(3);\n\n$menu = Timber::get_menu('Primary Navigation');\n\n$menu = Timber::get_menu('primary');\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Template in Timber with PHP\nDESCRIPTION: Demonstrates how to render a Twig template file named 'teaser.twig' using Timber::render() method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTimber::render('teaser.twig');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Functions in Templates\nDESCRIPTION: Demonstrates how to use a custom function in Twig templates after it has been registered. Shows examples with default arguments and with custom arguments.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# Calls edit_post_link using default arguments #}\n<div class=\"admin-tools\">{{ edit_post_link() }}</div>\n\n{# Calls edit_post_link with all defaults, except for second argument #}\n<div class=\"admin-tools\">\n    {{ edit_post_link(null, '<span class=\"edit-my-post-type-link\">') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Post Class Map in Timber with Custom Classes\nDESCRIPTION: This code shows how to register custom classes for specific post types using the timber/post/classmap filter. It maps the 'page' post type to a Page class and the 'book' post type to a Book class.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Book;\nuse Page;\n\nadd_filter('timber/post/classmap', function ($classmap) {\n    $custom_classmap = [\n        'page' => Page::class,\n        'book' => Book::class,\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Related Posts in Single Post Template\nDESCRIPTION: PHP template for retrieving related posts from the same category as the current post. Uses Timber::get_posts() with specific query parameters to exclude the current post and limit results to 3 posts from matching categories.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/a-post-archive.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\n$post = $context['post'];\n\n$context['related_posts'] = Timber::get_posts([\n    'post_type' => 'post',\n    'posts_per_page' => 3,\n    'no_found_rows' => true,\n    'orderby' => 'date',\n    'order' => 'DESC',\n    'post__not_in' => [$post->ID],\n    'category__in' => $post->terms([\n        'taxonomy' => 'category',\n        'fields' => 'ids',\n    ]),\n]);\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic WordPress Archive with Timber\nDESCRIPTION: Basic PHP template for a WordPress archive page using Timber. This code retrieves the Timber context and renders an index.twig template, with Timber automatically preparing a posts variable in the background.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/a-post-archive.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nTimber::render('index.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Basic Function Calls in Twig Template\nDESCRIPTION: Example showing how to call WordPress functions wp_head() and wp_footer() within a Twig template using the function() method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/functions.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<html>\n\t<head>\n\t<!-- Add whatever you need in the head, and then...-->\n\t{{ function('wp_head') }}\n\t</head>\n\n\t<!-- etc... -->\n\n\t<footer>\n\t\tCopyright &copy; {{ \"now\"|date('Y') }}\n\t</footer>\n\t{{ function('wp_footer') }}\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Query Pagination with Post Type and Page Parameters\nDESCRIPTION: Implementing pagination with a custom query for specific post types. This example shows how to properly set up pagination for custom post types while ensuring the paged parameter is correctly set.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nglobal $paged;\n\nif (!isset($paged) || !$paged) {\n    $paged = 1;\n}\n\n$context = Timber::context([\n    'posts' => Timber::get_posts([\n        'post_type' => 'event',\n        'posts_per_page' => 5,\n        'paged' => $paged,\n    ]),\n]);\n\nTimber::render('archive-event.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Namespace in Composer JSON\nDESCRIPTION: Configures Composer to autoload classes from a custom 'Theme' namespace in the src directory.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n  \"psr-4\": {\n    \"Theme\\\\\": \"src/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Environment Autoescape Options in PHP\nDESCRIPTION: Code example showing how to enable HTML autoescaping in Timber v2 using the timber/twig/environment/options filter. This replaces the previous Timber::$autoescape = true approach that was deprecated in Twig 2.0.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/environment/options', function ($options) {\n    $options['autoescape'] = 'html';\n\n    return $options;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Timber Context and Rendering a Template in PHP\nDESCRIPTION: This snippet demonstrates how to set up the Timber context, create a new Timber Post object, and render a Twig template. This is the basic pattern used at the beginning of most Timber template files.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cheatsheet.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n$context['post'] = new Timber\\Post();\nTimber::render( 'single.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Taxonomy Method in Magazine Post Class in PHP\nDESCRIPTION: Extends Post class to add an issue() method for retrieving a magazine post's associated issue from a custom taxonomy.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass MagazinePost extends \\Timber\\Post\n{\n    /**\n     * Issue cache.\n     *\n     * @var \\Timber\\Term\n     */\n    protected $issue;\n\n    /**\n     * Gets a magazine's issue.\n     *\n     * @return \\Timber\\Term|null;\n     */\n    public function issue()\n    {\n        if (!empty($this->_issue)) {\n            return $this->issue;\n        }\n\n        $issues = $this->terms([\n            'taxonomy' => 'issues',\n        ]);\n\n        if (is_array($issues) && !empty($issues)) {\n            $this->issue = $issues[0];\n        }\n\n        return $this->issue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global ACF Options to Timber Context\nDESCRIPTION: Adds ACF options to the global Timber context via a filter hook, making option fields accessible across all templates. Function retrieves all option fields using get_fields() and adds them to the context array.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/context', 'global_timber_context');\n\n/**\n * Filters global context.\n *\n * @param array $context An array of existing context variables.\n * @return mixed\n */\nfunction global_timber_context($context)\n{\n    $context['options'] = get_fields('option');\n\n    return $context;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Timber Routes Implementation in PHP\nDESCRIPTION: Example showing how to map custom blog routes with pagination using Timber's routing system. Demonstrates handling post types and custom parameters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/routing.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRoutes::map('blog/:name', function($params){\n    $query = 'posts_per_page=3&post_type='.$params['name'];\n    Routes::load('archive.php', null, $query, 200);\n});\n\nRoutes::map('blog/:name/page/:pg', function($params){\n    $query = 'posts_per_page=3&post_type='.$params['name'].'&paged='.$params['pg'];\n    $params = array('thing' => 'foo', 'bar' => 'I dont even know');\n    Routes::load('archive.php', $params, $query);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Single Product Template in Twig\nDESCRIPTION: This Twig template creates the single product view for WooCommerce, including product details, images, and related products.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n\n    <div class=\"product\">\n        {% do action('woocommerce_before_single_product') %}\n    \n        <article itemscope itemtype=\"https://schema.org/Product\" class=\"single-product-details {{ post.class }}\">\n    \n            <div class=\"entry-images\">\n                {% do action('woocommerce_before_single_product_summary') %}\n    \n                <img src=\"{{ post.thumbnail.src('shop_single') }}\" />\n            </div>\n    \n            <div class=\"summary entry-summary\">\n                {% do action('woocommerce_single_product_summary') %}\n            </div>\n    \n            {% do action('woocommerce_after_single_product_summary') %}\n    \n            <meta itemprop=\"url\" content=\"{{ post.link }}\" />\n    \n        </article>\n    \n        {% include [\"partials/tease-product.twig\"] with { products: related_products } %}\n    \n        {% do action('woocommerce_after_single_product') %}\n    </div>\n\n{% endblock  %}\n```\n\n----------------------------------------\n\nTITLE: Displaying WordPress post data in Twig\nDESCRIPTION: Twig template that displays WordPress post data including the title, content, and a custom field for a Twitter handle. Shows how to access post properties in Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"welcome-block\">\n    <div class=\"inner\">\n        <h3>{{ welcome.title }}</h3>\n        <p>{{ welcome.content }}</p>\n        <p>Follow me on <a href=\"https://twitter.com/{{ welcome.twitter_handle }}\" target=\"_blank\">Twitter!</a></p>\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Basic Timber Template Caching with Expiration\nDESCRIPTION: Demonstrates how to cache a Timber template render for 10 minutes using the default transient cache mode. The template will be automatically invalidated when data changes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$context['posts'] = Timber::get_posts();\n\nTimber::render('index.twig', $context, 600);\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Menu to Global Context in WordPress\nDESCRIPTION: Shows how to use the 'timber/context' filter to add a navigation menu to the global context, making it available in every Timber template. This example assumes the menu has been registered in WordPress.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/context', function ($context) {\n    $context['menu'] = Timber::get_menu('primary-menu');\n\n    return $context;\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Post in PHP\nDESCRIPTION: Demonstrates how to get a single post object using Timber::get_post() with optional post ID parameter\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$post = Timber::get_post($post_id);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Variables to Timber Context in PHP\nDESCRIPTION: Demonstrates two ways to add custom variables to the Timber context: by modifying the context array after calling Timber::context(), and by passing custom data directly to the Timber::context() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\n$context['today'] = wp_date('Ymd');\n\nTimber::render('single.twig', $context);\n```\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context([\n    'today' => wp_date('Ymd'),\n]);\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Generating Cache Keys from Objects\nDESCRIPTION: Shows how to generate a cache key from PHP objects using Timber's KeyGenerator. This creates consistent keys for complex data structures.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$generator = new Timber\\Cache\\KeyGenerator();\n$key = $generator->generateKey($posts);\n```\n\n----------------------------------------\n\nTITLE: Using Translation Functions in WordPress vs Timber\nDESCRIPTION: Comparison of the _e() translation function between standard WordPress PHP and Timber Twig implementation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/internationalization.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">\n    <?php _e( 'Posted on', 'my-text-domain' ) ?> [...]\n</p>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">\n    {{ __('Posted on', 'my-text-domain') }} [...]\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Functions to Twig in Timber\nDESCRIPTION: Example of using the timber/twig/functions filter to add a WordPress function (edit_post_link) to make it available directly in Twig templates without using the fn() wrapper.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/functions', function ($functions) {\n    $functions['edit_post_link'] = [\n        'callable' => 'edit_post_link',\n    ];\n\n    return $functions;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Template Locations in Timber\nDESCRIPTION: Configures multiple file paths for Timber to search for Twig templates. Timber will check these locations in sequence before falling back to theme directories.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/template-locations.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::$locations = array(\n    '/Users/jared/Sandbox/templates',\n    '~/Sites/timber-templates/',\n    ABSPATH.'/wp-content/templates'\n);\n```\n\n----------------------------------------\n\nTITLE: Using wp_kses_post Escaper in Twig\nDESCRIPTION: This example demonstrates the use of the wp_kses_post escaper in Twig to sanitize post content. It allows only permitted HTML tags and attributes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/escaping.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"intro\">{{ post.post_content|wp_kses_post }}</p>\n```\n\n----------------------------------------\n\nTITLE: Adding a Menu to Global Context in Timber\nDESCRIPTION: Adds a menu to the global Timber context. This function hooks into the timber/context filter to make the menu available on all pages without initializing it in each template file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nadd_filter( 'timber/context', 'add_to_context' );\n\nfunction add_to_context( $context ) {\n    // So here you are adding data to Timber's context object, i.e...\n    $context['foo'] = 'I am some other typical value set in your functions.php file, unrelated to the menu';\n\n    // Now, in similar fashion, you add a Timber Menu and send it along to the context.\n    $context['menu'] = new \\Timber\\Menu( 'primary-menu' );\n\n    return $context;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timber Cache Mode for Specific Template\nDESCRIPTION: Demonstrates how to set a specific cache mode for an individual render call. This overrides the global cache mode setting for this specific render.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTimber::render($filenames, $data, 600, Timber\\Loader::CACHE_OBJECT);\n```\n\n----------------------------------------\n\nTITLE: Configuring Comment Class Map Based on Post Types\nDESCRIPTION: This code shows how to register custom comment classes for specific post types using the timber/comment/classmap filter. It maps comments for 'post' and 'book' post types to different classes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse CommentBook;\nuse CommentPost;\n\nadd_filter('timber/comment/classmap', function ($classmap) {\n    $custom_classmap = [\n        'post' => CommentPost::class,\n        'book' => CommentBook::class,\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Menu Locations in WordPress (PHP)\nDESCRIPTION: Example of registering menu locations using register_nav_menus() in a WordPress theme's functions.php file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action('after_setup_theme', function () {\n    register_nav_menus([\n        'primary' => 'Primary Menu',\n        'secondary' => 'Secondary Menu',\n        'footer' => 'Footer Menu',\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Non-threaded Comments Implementation in Twig with Timber\nDESCRIPTION: A basic implementation of non-threaded comments in a single.twig template. It displays the post content, loops through comments showing author name and comment content, and adds the WordPress comment form at the bottom.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/comments.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"post-{{ post.id }}\">\n  <h1>{{ post.title }}</h1>\n  <div class=\"content\">\n    {{ post.content }}\n  </div>\n  <div class=\"comments\">\n    {% for comment in post.comments %}\n      <article class=\"comment\" id=\"comment-{{ comment.id }}\">\n      \t<h5 class=\"comment-author\">{{ comment.author.name }} says</h5>\n        {{ comment.content }}\n      </article>\n    {% endfor %}\n    {{ function('comment_form') }}\n  </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables Directly to Timber Context in PHP\nDESCRIPTION: It's now possible to pass data directly to Timber::context() using an associative array, simplifying the process of adding custom data to the context.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context( [\n\t'posts' => Timber::get_posts( [\n        'post_type'      => 'book',\n        'posts_per_page' => -1,\n        'post_status'    => 'publish',\n\t],\n] );\n\nTimber::render( 'archive.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Retrieving All ACF Options Page Fields in PHP and Twig\nDESCRIPTION: Demonstrates how to get all fields from an ACF options page in PHP and use them in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context['options'] = get_fields('options');\nTimber::render('index.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n<footer>{{ options.copyright_info }}</footer>\n```\n\n----------------------------------------\n\nTITLE: Processing ACF Relationship Field in Twig\nDESCRIPTION: Shows how to convert ACF relationship field data into Timber Post objects to access Timber methods in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% for item in Post(post.relationship_field) %}\n   {{ item.title }}\n   {# Do something with item #}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: User Class Assignment Based on Roles in Timber (PHP)\nDESCRIPTION: This example shows how to assign User classes based on user roles. It checks the $user->roles array for specific roles and returns corresponding classes like Editor or Author.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/user/class', function ($class, \\WP_User $user) {\n    if (in_array('editor', $user->roles, true)) {\n        return Editor::class;\n    } elseif (in_array('author', $user->roles, true)) {\n        return Author::class;\n    }\n\n    return $class;\n}, 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User Class in Timber (PHP)\nDESCRIPTION: This snippet demonstrates how to use the 'timber/user/class' filter to set a custom User class in Timber. It uses a UserExtended class instead of the default User class.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse UserExtended;\n\nadd_filter('timber/user/class', function ($class, \\WP_User $user) {\n    return UserExtended::class;\n}, 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Class with Timber in PHP\nDESCRIPTION: This PHP class extends WP_Widget to create a custom widget that displays a random number. It uses Timber to render a Twig template for the widget output.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/widgets.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass My_Widget extends WP_Widget\n{\n    public function widget($args, $instance)\n    {\n        $number = rand();\n\n        Timber::render('random-widget.twig', [\n            'args' => $args,\n            'instance' => $instance,\n            'number' => $number,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ACF Block Template in Twig\nDESCRIPTION: Example of a simple Twig template for rendering an ACF Block, accessing field values using the 'fields' variable.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    <h2>{{ fields.title }}</h2>\n    <p>{{ fields.text }}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Page Templates in PHP with Timber\nDESCRIPTION: This PHP code snippet demonstrates how Timber renders page templates. It looks for a Twig file named after the page slug, falling back to a generic page template if not found.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/custom-page-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::render( array(\n    'page-' . $post->post_name . '.twig',\n    'page.twig'\n), $context );\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Serialization for Custom Post Types in PHP\nDESCRIPTION: Shows how to implement the JsonSerializable interface for a custom Book post type to control JSON output for JavaScript use.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Timber\\Post;\n\n/**\n * Class Book\n *\n * Implements custom JSON serialization.\n */\nclass Book extends Post implements JsonSerializable\n{\n    /**\n     * Defines data that is used when post is converted to JSON.\n     *\n     * @return array\n     */\n    public function jsonSerialize()\n    {\n        return [\n            'title' => $this->title(),\n            'link' => $this->link(),\n            'thumbnail' => $this->thumbnail()->src('thumbnail'),\n            'price' => $this->meta('price'),\n        ];\n    }\n}\n\n$posts = Timber::get_posts([\n    'post_type' => 'book',\n]);\n\n$posts_json = wp_json_encode($posts_json);\n```\n\n----------------------------------------\n\nTITLE: Combining New Tab and External Link Checks in Twig\nDESCRIPTION: Shows how to set the target attribute to '_blank' if either the menu item is set to open in a new tab or the link is external. This combines both item.is_target_blank and item.is_external checks.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<a\n    href=\"{{ item.link }}\"\n    {{ item.is_target_blank or item.is_external ? 'target=\"_blank\"' }}\n>{{ item.title }}</a>\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions with Post Class Map in Timber\nDESCRIPTION: This example demonstrates how to use a callback function with timber/post/classmap for more fine-grained control over class selection. It selects between Book and PreciousBook classes based on the post ID.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Book;\nuse PreciousBook;\n\nadd_filter('timber/post/classmap', function ($classmap) {\n    $custom_classmap = [\n        'book' => function (\\WP_Post $post) {\n            if ($post->id === 3) {\n                return PreciousBook::class;\n            }\n\n            return Book::class;\n        },\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Timber in PHP\nDESCRIPTION: Shows the new way to initialize Timber using the static init() method instead of instantiating a new object.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nTimber\\Timber::init();\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Twig Filters\nDESCRIPTION: Shows how to resize images using Twig filters in Timber. Includes examples for fixed width and height, and proportional scaling.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|resize(300, 200) }}\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|resize(640) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Processing ACF Image Field in PHP\nDESCRIPTION: Demonstrates how to convert an ACF image field (stored as ID) into a Timber\\Image object in PHP before passing to the template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* single.php */\n$post = new Timber\\Post();\nif (isset($post->hero_image) && strlen($post->hero_image)){\n\t$post->hero_image = new Timber\\Image($post->hero_image);\n}\n$data = Timber::context();\n$data['post'] = $post;\nTimber::render('single.twig', $data);\n```\n\n----------------------------------------\n\nTITLE: Optimized MySitePost with Caching\nDESCRIPTION: Improves the MySitePost class by adding internal caching to avoid repeated queries for issue data.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MySitePost extends Timber\\Post {\n\n\tvar $_issue;\n\n\tpublic function issue() {\n\t\tif (!$this->_issue) {\n\t\t\t$issues = $this->get_terms('issues');\n\t\t\tif (is_array($issues) && count($issues)) {\n\t\t\t\t$this->_issue = $issues[0];\n\t\t\t}\n\t\t}\n\t\treturn $this->_issue;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Timber Post Class for Blog Posts in PHP\nDESCRIPTION: Creates a BlogPost class that extends Timber\\Post to add a reading_time() method for estimating article read time.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Class BlogPost\n */\nclass BlogPost extends \\Timber\\Post\n{\n    /**\n     * Estimates time required to read a post.\n     *\n     * The words per minute are based on the English language, which e.g. is much\n     * faster than German or French.\n     *\n     * @link https://www.irisreading.com/average-reading-speed-in-various-languages/\n     *\n     * @return string\n     */\n    public function reading_time()\n    {\n        $words_per_minute = 228;\n\n        $words = str_word_count(wp_strip_all_tags($this->content()));\n        $minutes = round($words / $words_per_minute);\n\n        /* translators: %s: Time duration in minute or minutes. */\n        return sprintf(_n('%s minute', '%s minutes', $minutes), (int) $minutes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Post IDs in Twig\nDESCRIPTION: Examples of converting post IDs to post objects in Twig templates using get_post() and get_posts() functions\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set post = get_post(post_id) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ get_image(attachment_id).src }}\">\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set posts = get_posts(post_ids) %}\n{% if posts is not empty %}\n<ul>\n    {% for post in posts %}\n        <li>{{ post.title }}</li>\n    {% endfor %}\n</ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Registering ACF Blocks in WordPress\nDESCRIPTION: PHP function to register ACF Blocks using the register_block_type() function, triggered on the 'init' action.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction register_acf_blocks() {\n    // The register_block_type() function will look in the current directory and\n    // register the block you specify. Add additional register_block_type()\n    // functions for each of your custom blocks.\n    register_block_type( __DIR__ . '/blocks/my-block' );\n}\n\nadd_action( 'init', 'register_acf_blocks' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving ACF Field Objects in PHP\nDESCRIPTION: Shows how to get all ACF field objects for a specific post and add them to the Timber context. This allows access to field metadata like labels in templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$context['acf'] = get_field_objects($data['post']->ID);\n```\n\n----------------------------------------\n\nTITLE: WordPress Filters in Twig\nDESCRIPTION: Demonstrates applying WordPress filters in Twig templates using various methods\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.content|apply_filters('default_message') }}\n\n{{ \"my custom string\"|apply_filters('default_message', param1, param2, ...) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% apply apply_filters('default_message') %}\n    {{ post.content }}\n{% endapply %}\n\n{% apply apply_filters('default_message', 'foo', 'bar, 'baz' ) %}\n    I love pizza\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Post Thumbnail with Timber and Twig\nDESCRIPTION: This Twig snippet demonstrates how to display a post thumbnail using Timber. It shows a simplified syntax for accessing post thumbnail properties.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/index.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img\n    src=\"{{ post.thumbnail.src }}\"\n    alt=\"Thumbnail for {{ post.title }}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Extending TimberPost for Custom Issue Property\nDESCRIPTION: Creates a MySitePost class that extends TimberPost to add an 'issue' method for accessing custom taxonomy data.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MySitePost extends Timber\\Post {\n\n\tvar $_issue;\n\n\tpublic function issue() {\n\t\t$issues = $this->get_terms('issues');\n\t\tif (is_array($issues) && count($issues)) {\n\t\t\treturn $issues[0];\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Action in PHP for Timber\nDESCRIPTION: Illustrates how to define a WordPress action in PHP that can be called from a Timber Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nadd_action( 'my_action', 'my_function' );\n\nfunction my_function( $context ) {\n    // $context stores the template context in case you need to reference it\n\n    // Outputs title of your post\n    echo $context['post']->post_title;\n}\n```\n\n----------------------------------------\n\nTITLE: Extended MySitePost with Related Posts Functionality\nDESCRIPTION: Enhances MySitePost class with methods to retrieve manually and automatically related posts based on tags.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MySitePost extends Timber\\Post {\n\n\tfunction get_related_auto() {\n\t\t$tags = $this->tags();\n\t\tif (is_array($tags) && count($tags)) {\n\t\t\t$search_tag = $tags[0];\n\t\t\t$related = Timber::get_posts('tag_id='.$search_tag->ID);\n\t\t\treturn $related;\n\t\t} else {\n\t\t\t//not tagged, cant do related on it\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction get_related_manual() {\n\t\tif (isset($this->related_manual) && is_array($this->related_manual)){\n\t\t\tforeach($this->related_manual as &$related){\n\t\t\t\t$related = new MySitePost($related);\n\t\t\t}\n\t\t\treturn $this->related_manual;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction related($limit = 3) {\n\t\t$related = $this->get_related_manual();\n\t\tif (!$related){\n\t\t\t$related = $this->get_related_auto();\n\t\t}\n\t\tif (is_array($related)) {\n\t\t\tarray_splice($related, 0, $limit);\n\t\t}\n\t\treturn $related;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Template Inclusion in Twig\nDESCRIPTION: Shows different methods for including templates in Twig, including simple includes and dynamic template loading\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('footer.twig') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ include(\n    'blocks/block-' ~ block.slug ~ '.twig',\n    ignore_missing = true\n) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ include(\n    ['blocks/block-' ~ block.slug ~ '.twig', 'blocks/blog.twig'],\n    ignore_missing = true\n) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Archive Posts in Twig Template\nDESCRIPTION: Twig template for displaying archive posts. It extends a base template, checks if posts exist, loops through them to display teasers, and includes pagination at the bottom.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/a-post-archive.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n    {% if posts is not empty %}\n        <ul>\n            {% for post in posts %}\n                <li>{{ include('teaser.twig') }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n    {{ include('pagination.twig') }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using TimberHelper Transient for Data Caching\nDESCRIPTION: Demonstrates Timber's transient helper for caching expensive data operations. This example caches post data and custom field data for 10 minutes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\n$context['main_stories'] = TimberHelper::transient('main_stories', function () {\n    $posts = Timber::get_posts();\n\n    // As an example, do something expensive with these posts\n    $extra_teases = get_field('my_extra_teases', 'options');\n\n    foreach ($extra_teases as &$tease) {\n        $tease = Timber::get_post($tease);\n    }\n\n    $main_stories = [\n        'posts' => $posts,\n        'extra_teases' => $extra_teases,\n    ];\n\n    return $main_stories;\n}, 600);\n\nTimber::render('home.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Twig Post Title Access\nDESCRIPTION: Shows how to access post data in Twig templates using dot notation\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ post.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Registering a Namespace for Template Locations in Timber with PHP\nDESCRIPTION: Demonstrates how to register a namespace for a specific template location using the 'timber/locations' filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/locations', function ($paths) {\n    $paths['styleguide'] = [\n        ABSPATH . '/wp-content/styleguide',\n    ];\n\n    return $paths;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing YouTube Shortcode in PHP with Timber\nDESCRIPTION: PHP function that creates a WordPress shortcode for embedding YouTube videos. Uses Timber::compile to render a Twig template with the video ID passed as a parameter. Includes input sanitization and error handling.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/shortcodes.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Should be called from within an init action hook\nadd_shortcode('youtube', 'youtube_shortcode');\n\nfunction youtube_shortcode($atts)\n{\n    if (isset($atts['id'])) {\n        $id = sanitize_text_field($atts['id']);\n    } else {\n        $id = false;\n    }\n\n    // This time we use Timber::compile since shortcodes should return the code\n    return Timber::compile('youtube-short.twig', [\n        'id' => $id,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Template Locations in Timber with PHP\nDESCRIPTION: Demonstrates how to add custom locations for Twig files using the 'timber/locations' filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/locations', function ($paths) {\n    $paths[] = ['/Users/lukas/Sandbox/templates'];\n\n    return $paths;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ACF Integration\nDESCRIPTION: A simplified example of an Advanced Custom Fields integration that implements the IntegrationInterface. It shows how to check for the dependent plugin's existence and how to hook into Timber's post meta system to extend its functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-integrations.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyProject;\n\nuse ACF;\n\n/**\n * Class used to handle integration with Advanced Custom Fields\n */\nclass MyAcfIntegration implements IntegrationInterface\n{\n    public function should_init(): bool\n    {\n        return class_exists(ACF::class);\n    }\n\n    public function init(): void\n    {\n        // Hook into Timber's post meta logic.\n        add_filter('timber/post/pre_meta', [$this, 'post_get_meta_field'], 10, 5);\n    }\n\n    public static function post_get_meta_field($value, $post_id, $field_name, $post, $args)\n    {\n        $args = wp_parse_args($args, [\n            // Apply formatting logic (defined when configuring the field).\n            'format_value' => true,\n        ]);\n\n        // NOTE: get_field() is defined by ACF itself. We're simply delegating.\n        return get_field($field_name, $post_id, $args['format_value']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Users\nDESCRIPTION: Examples of querying users with various criteria and handling user arrays using Timber::get_users().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Timber::get_users($query);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Get all users that only have a subscriber role.\n$subscribers = Timber::get_users([\n    'role' => 'subscriber',\n]);\n\n// Get all users that have published posts.\n$post_authors = Timber::get_users([\n    'has_published_posts' => ['post'],\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Timber::get_users([27, 83, 161]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Returns an empty array.\n$users = Timber::get_users();\n```\n\n----------------------------------------\n\nTITLE: Optimizing Query Performance with no_found_rows in PHP\nDESCRIPTION: Demonstrates how to improve query performance by setting no_found_rows to true when pagination is not needed.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$posts = Timber::get_posts([\n    'no_found_rows' => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Context Variables in PHP for Twig Template\nDESCRIPTION: Demonstrates how to set context variables in PHP that can be used in a Twig template. The example shows setting 'message' and 'author' variables and rendering them in a Twig file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'message' => 'This can be any variable you want',\n    'author' => 'Tom',\n];\n\nTimber::render('single.twig', $data);\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>Message by {{ author }}</h3>\n<p>{{ message }}</p>\n```\n\n----------------------------------------\n\nTITLE: Invalid User Handling\nDESCRIPTION: Shows how to handle cases where a user cannot be found, with examples in both PHP and Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = Timber::get_user($user_id);\n\nif ($user) {\n    // Handle user.\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if user %}\n    {{ user.name }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Shortcodes in Twig Templates\nDESCRIPTION: Example of using WordPress shortcodes within a Twig template using the apply shortcodes tag. Demonstrates a tabs shortcode implementation with multiple parameters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/shortcodes.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% apply shortcodes %}\n    [tabs tab1=\"Tab 1 title\" tab2=\"Tab 2 title\" layout=\"horizontal\" backgroundcolor=\"\" inactivecolor=\"\"]\n        [tab id=1]\n            Something something something\n        [/tab]\n\n        [tab id=2]\n            Tab 2 content here\n        [/tab]\n    [/tabs]\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Extending Twig Directly with the Environment Object\nDESCRIPTION: Direct approach to add functions and filters using the timber/twig filter to access the Twig Environment object. Note that items added this way cannot be removed later.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'timber/twig', function( \\Twig\\Environment $twig ) {\n    $twig->addFunction(\n        new \\Twig\\TwigFunction( 'edit_post_link', 'edit_post_link' )\n    );\n\n    $twig->addFilter(\n        new \\Twig\\TwigFilter( 'price', 'format_price' )\n    );\n\n    $twig->addFilter(\n        new \\Twig\\TwigFilter( 'slugify', 'sanitize_title' )\n    ];\n\n    return $twig;\n} );\n```\n\n----------------------------------------\n\nTITLE: Template with Component Includes\nDESCRIPTION: Demonstrates using Twig's include function to implement reusable components in templates\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/template-inheritance-and-includes.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.twig' %}\n\n{% block content %}\n    <article\n        class=\"article post-type-{{ post.post_type }}\"\n        id=\"post-{{ post.ID }}\"\n    >\n        <section class=\"article-content\">\n            {% block headline %}\n                {{ include('header.twig') }}\n            {% endblock %}\n\n            {{ include('article-author.twig') }}\n\n            {{ post.content }}\n        </section>\n    </article>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Archive Template in Twig\nDESCRIPTION: This Twig template creates the archive view for WooCommerce products, including necessary WooCommerce hooks and looping through products.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.twig' %}\n\n{% block content %}\n\n    {% do action('woocommerce_before_main_content') %}\n\n    <div class=\"before-shop-loop\">\n        {% do action('woocommerce_before_shop_loop') %}\n    </div>\n\n    <div class=\"loop\">\n        {% for post in products %}\n            {% include [\"partials/tease-product.twig\"] %}\n        {% endfor %}\n    </div>\n\n    {% do action('woocommerce_after_shop_loop') %}\n    {% do action('woocommerce_after_main_content') %}\n\n{% endblock  %}\n```\n\n----------------------------------------\n\nTITLE: ACF Flexible Content Field Handling\nDESCRIPTION: Demonstrates handling flexible content fields with different layouts and nested repeaters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% for media_item in post.meta('media_set') %}\n    {% if media_item.acf_fc_layout == 'image_set' %}\n        <img src=\"{{ get_image(media_item.image).src }}\" />\n        <p class=\"caption\">{{ get_image(media_item.image).caption }}</p>\n        <aside class=\"notes\">{{ media_item.notes }}</aside>\n    {% elseif media_item.acf_fc_layout == 'video_set' %}\n        <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/{{media_item.youtube_id}}\" frameborder=\"0\" allowfullscreen></iframe>\n        <p class=\"caption\">{{ media_item.caption }}</p>\n    {% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Simple Comment Display Implementation in Timber\nDESCRIPTION: Basic template for displaying non-threaded comments and comment form in a single post view. Includes post content, comment listing with author names, and the default WordPress comment form.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/comments.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"post-{{ post.id }}\">\n  <h1>{{ post.title }}</h1>\n  <div class=\"content\">\n    {{ post.content }}\n  </div>\n  <div class=\"comments\">\n    {% for comment in post.comments %}\n      <article class=\"comment\" id=\"comment-{{ comment.id }}\">\n      \t<h5 class=\"comment-author\">{{ comment.author.name }} says</h5>\n        {{ comment.content }}\n      </article>\n    {% endfor %}\n    {{ function('comment_form') }}\n  </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Custom Query Pagination in Timber\nDESCRIPTION: Implementation of pagination with custom query parameters, including post type filtering and posts per page settings. Demonstrates handling of the paged variable for proper pagination.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/pagination.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nglobal $paged;\nif (!isset($paged) || !$paged){\n\t$paged = 1;\n}\n$context = Timber::context();\n$args = array(\n\t'post_type' => 'event',\n\t'posts_per_page' => 5,\n\t'paged' => $paged\n);\n$context['posts'] = new Timber\\PostQuery($args);\nTimber::render('page-events.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Working with Nested ACF Repeater Fields in Twig\nDESCRIPTION: Shows how to access and iterate through nested repeater fields in ACF using Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% for item_outer in post.meta('outer') %}\n     {{item_outer.title}}\n\n     {% for item_inner in item_outer.inner_repeater %}\n          {{ item_inner.title }}\n     {% endfor %}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating Post Teaser Component with Twig\nDESCRIPTION: Twig template for a post teaser component implementing an Inclusive Card design pattern. It displays the post thumbnail, title with accessible link, excerpt, and author information.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/a-post-archive.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<img\n    src=\"{{ post.thumbnail.src('medium') }}\"\n    alt=\"{{ post.thumbnail.alt }}\"\n    width=\"{{ post.thumbnail.width }}\"\n    height=\"{{ post.thumbnail.height }}\"\n    loading=\"lazy\"\n>\n\n<h2>\n    <a\n        href=\"{{ post.link }}\"\n        aria-describedby=\"desc-{{ post.slug }}\"\n    >{{ post.title }}</a>\n</h2>\n\n<p>{{ post.excerpt }}</p>\n\n<span\n    id=\"desc-{{ post.slug }}\"\n    aria-hidden=\"true\"\n>Read more</span>\n\n<small>By {{ post.author }}</small>\n```\n\n----------------------------------------\n\nTITLE: Accessing ACF Group Fields in Twig\nDESCRIPTION: Example of how to access and display ACF Group fields in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\nTitle: {{ fields.group.title }} <br/>\nUrl: {{ fields.group.url }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Twig Directories with an Array in PHP\nDESCRIPTION: Configures multiple directories for Twig files using an array, providing fallback options for template locations.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTimber::$dirname = [\n    [\n        'templates',\n        'templates/shared/mods',\n        'twigs',\n        'views',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Single Post Template Override\nDESCRIPTION: Example of overriding specific blocks in a child template while maintaining inheritance structure\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/template-inheritance-and-includes.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'single.twig' %}\n\n{% block headline %}\n    <header>\n        <h1>Jared and his mug</h1>\n\n        <img\n            src=\"/wp-content/uploads/2014/05/jareds-face.jpg\"\n            alt=\"Jared's Mug\"\n        />\n    </header>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Basic ACF Field Access in Timber\nDESCRIPTION: Shows how to access ACF fields using Timber's meta() method in both Twig and PHP.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.meta('my_acf_field') }}\n```\n\nLANGUAGE: php\nCODE:\n```\n$meta = $post->meta('my_acf_field');\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Term by ID in PHP using Timber\nDESCRIPTION: Demonstrates how to get a term object using Timber::get_term() with a term ID. If no ID is provided, it uses the currently queried term.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$term = Timber::get_term($term_id);\n```\n\nLANGUAGE: php\nCODE:\n```\n$term = Timber::get_term();\n\n// Is the same as…\n\n$term = Timber::get_term(get_queried_object_id());\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Template from a Subdirectory in PHP\nDESCRIPTION: Shows how to render a Twig template located in a subdirectory of the default template folder.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nTimber::render('shared/headers/header-home.twig');\n```\n\n----------------------------------------\n\nTITLE: Basic Function Calls in Twig Template\nDESCRIPTION: Demonstrates how to call WordPress functions wp_head() and wp_footer() within a Twig template using the function() method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/functions.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<html>\n    <head>\n    <!-- Add whatever you need in the head, and then...-->\n    {{ function('wp_head') }}\n    </head>\n\n    <!-- etc... -->\n\n    <footer>\n        Copyright &copy; {{ \"now\"|date('Y') }}\n    </footer>\n    {{ function('wp_footer') }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties with Twig Dot Notation\nDESCRIPTION: Demonstrates how to access object properties and array items using Twig's dot notation syntax\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.title }}\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects from Date Strings with WordPress Timezone\nDESCRIPTION: Shows how to create DateTime objects from date strings that don't include timezone information by manually passing the WordPress timezone. This ensures dates are correctly interpreted in the site's timezone context.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$datetime = DateTimeImmutable::createFromFormat(\n    'Y-m-d H:i',\n    '2016-10-31 09:30',\n    wp_timezone()\n);\n\n// or\n\n$datetime = date_create_immutable_from_format(\n    'Y-m-d H:i',\n    '2016-10-31 09:30',\n    wp_timezone()\n);\n\n// Note that we're reassigning here, since PHP's immutable functions/methods return new values.\n$datetime = $datetime->setTimezone(wp_timezone());\n\n$timestamp = $datetime->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Accessing ACF Options Page Field in PHP and Twig\nDESCRIPTION: Shows how to retrieve a single field from an ACF options page in PHP and display it in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context['site_copyright_info'] = get_field('copyright_info', 'options');\nTimber::render('index.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n<footer>{{site_copyright_info}}</footer>\n```\n\n----------------------------------------\n\nTITLE: Caching Realized Post Collections in PHP\nDESCRIPTION: Shows how to cache a realized post collection for improved performance in subsequent requests.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$eager_posts = \\Timber\\Helper::transient('my_posts', function () {\n    $query = \\Timber\\Timber::get_posts([\n        'post_type' => 'some_post_type',\n    ]);\n\n    // Run Post::setup() up front.\n    return $query->realize();\n}, HOUR_IN_SECONDS);\n\nforeach ($eager_posts as $post) {\n    // No additional overhead here.\n}\n\n// Later...\nforeach (get_transient('my_posts') as $post) {\n    /**\n     * Same deal!\n     *\n     * No repeated overhead here because the realized Posts are already cached.\n     */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Pagination in Timber PHP\nDESCRIPTION: Basic implementation of pagination using Timber's PostQuery class. This code is meant for use in template files like archive.php or home.php with an active query.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = Timber::context();\n$context['posts'] = new Timber\\PostQuery();\nTimber::render('archive.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination UI in Twig Templates\nDESCRIPTION: A Twig template implementation for pagination controls including previous/next links and page numbers. This markup renders navigation for archive pages using the pagination object provided by Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"tool-pagination\">\n\t{% if posts.pagination.prev %}\n\t\t<a\n            href=\"{{ posts.pagination.prev.link }}\"\n            class=\"prev {{ posts.pagination.prev.link|length ? '' : 'invisible' }}\"\n        >Previous</a>\n\t{% endif %}\n\n\t<ul class=\"pages\">\n\t\t{% for page in posts.pagination.pages %}\n\t\t\t<li>\n\t\t\t\t{% if page.link %}\n\t\t\t\t\t<a\n                        href=\"{{ page.link }}\"\n                        class=\"{{ page.class }}\"\n                    >{{ page.title }}</a>\n\t\t\t\t{% else %}\n\t\t\t\t\t<span class=\"{{ page.class }}\">{{ page.title }}</span>\n\t\t\t\t{% endif %}\n\t\t\t</li>\n\t\t{% endfor %}\n\t</ul>\n\n\t{% if posts.pagination.next %}\n\t\t<a\n            href=\"{{ posts.pagination.next.link }}\"\n            class=\"next {{ posts.pagination.next.link|length ? '' : 'invisible' }}\"\n        >Next</a>\n\t{% endif %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Menus to Global Context in Timber\nDESCRIPTION: Adds multiple menus to the global Timber context with unique names. This approach allows you to access different menus by their assigned names in your templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function add_to_context( $context ) {\n    $context['primary_menu']  = new Timber\\Menu('Primary Navigation');\n    $context['footer_menu'] = new Timber\\Menu('Footer Navigation');\n    // ...\n    return $context;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Integration with Timber\nDESCRIPTION: Code that demonstrates how to register a custom integration class with Timber using the 'timber/integrations' filter. This step connects your integration implementation to the Timber framework.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-integrations.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MyProject\\MyAcfIntegration;\n\nadd_filter('timber/integrations', function (array $integrations): array {\n    $integrations[] = new MyAcfIntegration();\n\n    return $integrations;\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Image in Twig\nDESCRIPTION: Shows how to display a basic image using Timber's post.thumbnail object in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src }}\" class=\"my-thumb-class\" alt=\"Image for {{ post.title }}\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling WP_DEBUG in WordPress Configuration (PHP)\nDESCRIPTION: Sets the WP_DEBUG constant to true in wp-config.php to enable debugging in WordPress.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine('WP_DEBUG', true);\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation for Related Posts Sidebar\nDESCRIPTION: PHP code to fetch related posts by category and pass them to the sidebar template using Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/sidebars.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$post = Timber::get_post();\n$post_cat = $post->get_terms('category');\n\n$post_cat = $post_cat[0]->ID;\n\n$sidebar_context = [\n    'related' => Timber::get_posts([\n        'cat' => $post_cat,\n    ]),\n];\n\n$context = Timber::context([\n    'post' => $post,\n    'sidebar' => Timber::get_sidebar(\n        'sidebar-related.twig',\n        $sidebar_context\n    ),\n]);\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Using Context with Menu in Timber Template\nDESCRIPTION: Retrieves the Timber context and renders a template with it. This demonstrates how to use a context that already has a menu initialized without having to initialize the menu in the template file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$context = Timber::context();\n\nTimber::render( 'index.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Archive Template (Twig)\nDESCRIPTION: This Twig template is used for rendering WooCommerce archive pages. It includes WooCommerce hooks and loops through products.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.twig' %}\n\n{% block content %}\n\n    {% do action('woocommerce_before_main_content') %}\n\n    <div class=\"before-shop-loop\">\n        {% do action('woocommerce_before_shop_loop') %}\n    </div>\n\n    <div class=\"loop\">\n        {% for post in products %}\n            {% include [\"partials/tease-product.twig\"] %}\n        {% endfor %}\n    </div>\n\n    {% do action('woocommerce_after_shop_loop') %}\n    {% do action('woocommerce_after_main_content') %}\n\n{% endblock  %}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Single Product Template (Twig)\nDESCRIPTION: This Twig template is used for rendering single product pages in WooCommerce. It includes product details and related products.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n\n    {% do action('woocommerce_before_single_product') %}\n\n    <article itemscope itemtype=\"https://schema.org/Product\" class=\"single-product-details {{ post.class }}\">\n\n        <div class=\"entry-images\">\n            {% do action('woocommerce_before_single_product_summary') %}\n\n            <img src=\"{{ post.thumbnail.src('shop_single') }}\" />\n        </div>\n\n        <div class=\"summary entry-summary\">\n            {% do action('woocommerce_single_product_summary') %}\n        </div>\n\n        {% do action('woocommerce_after_single_product_summary') %}\n\n        <meta itemprop=\"url\" content=\"{{ post.link }}\" />\n\n    </article>\n\n    {% include [\"partials/tease-product.twig\"] with { products: related_products } %}\n\n    {% do action('woocommerce_after_single_product') %}\n\n{% endblock  %}\n```\n\n----------------------------------------\n\nTITLE: Pagination Template Markup in Timber Twig\nDESCRIPTION: Twig template markup for rendering pagination controls including previous/next links and page numbers. Provides navigation through paginated content with customizable styling.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/pagination.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"tool-pagination\">\n\t{% if posts.pagination.prev %}\n\t\t<a href=\"{{posts.pagination.prev.link}}\" class=\"prev {{posts.pagination.prev.link|length ? '' : 'invisible'}}\">Prev</a>\n\t{% endif %}\n\t<ul class=\"pages\">\n\t\t{% for page in posts.pagination.pages %}\n\t\t\t<li>\n\t\t\t\t{% if page.link %}\n\t\t\t\t\t<a href=\"{{page.link}}\" class=\"{{page.class}}\">{{page.title}}</a>\n\t\t\t\t{% else %}\n\t\t\t\t\t<span class=\"{{page.class}}\">{{page.title}}</span>\n\t\t\t\t{% endif %}\n\t\t\t</li>\n\t\t{% endfor %}\n\t</ul>\n\t{% if posts.pagination.next %}\n\t\t<a href=\"{{posts.pagination.next.link}}\" class=\"next {{posts.pagination.next.link|length ? '' : 'invisible'}}\">Next</a>\n\t{% endif %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Default Values in Twig Templates\nDESCRIPTION: Demonstrates different ways to set default values in Twig templates using filters and operators\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<h1 class=\"heading-1\">{{ title|default(post.title) }}</h1>\n\n{# Or with the null-coalescing operator #}\n\n<h1 class=\"heading-1\">{{ title ?? post.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Adding Widgets to Global Context in Timber with PHP\nDESCRIPTION: This code adds the registered widgets to the global Timber context. It retrieves the 'footer_widgets' and makes them available for use in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/widgets.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction add_to_context($context) {\n    $context['footer_widgets'] = Timber::get_widgets('footer_widgets');\n\n    return $context;\n}\n\nadd_filter('timber/context', 'add_to_context');\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic PHP Sidebar with Timber\nDESCRIPTION: Creates a basic sidebar using a PHP file to populate context data and render a Twig template. Uses custom functions to get widget and ad content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/sidebars.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$context = [];\n$context['widget'] = my_function_to_get_widget();\n$context['ad'] = my_function_to_get_an_ad();\nTimber::render('sidebar.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Menus in Timber (PHP)\nDESCRIPTION: Example of adding a menu to the global Timber context using the timber/context filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/context', 'add_to_context');\n\nfunction add_to_context($context)\n{\n    $context['foo'] = 'I am some other typical value set in your functions.php file, unrelated to the menu';\n    $context['menu'] = Timber::get_menu('primary');\n    return $context;\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping URLs in Twig\nDESCRIPTION: This snippet shows how to use the esc_url escaper in Twig to sanitize URLs. It's important for preventing XSS attacks when outputting user-provided URLs.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/escaping.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ post.meta('custom_link')|esc_url }}\"></a>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Product in WooCommerce Loop\nDESCRIPTION: This PHP function sets the global $product variable for WooCommerce products in the loop, resolving context issues.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction timber_set_product($post)\n{\n    global $product;\n\n    if (is_woocommerce()) {\n        $product = wc_get_product($post->ID);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MenuItem Class Filter with Parent Menu Type Check\nDESCRIPTION: This example shows how to use the timber/menuitem/class filter to select menu item classes based on the parent menu's class. It returns MenuItemPrimary when the parent menu is an instance of MenuPrimary.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/menuitem/class', function ($class, $item, $menu) {\n    if ($menu instanceof MenuPrimary) {\n        return MenuItemPrimary::class;\n    }\n\n    return $class;\n}, 10, 3);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Filters to Twig in Timber\nDESCRIPTION: Demonstrates registering custom Twig filters using the timber/twig/filters hook, which allows for chaining operations with the pipe (|) syntax.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/filters', function ($filters) {\n    // Add your own filters.\n    $filters['price'] = [\n        'callable' => 'format_price',\n    ];\n\n    $filters['slugify'] = [\n        'callable' => 'sanitize_title',\n    ];\n\n    return $filters;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Field Images in Twig\nDESCRIPTION: Demonstrates how to use images from custom fields in Twig templates with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set image = get_image(post.hero_image) %}\n\n<img src=\"{{ image.src }}\" alt=\"{{ image.alt }}\" />\n```\n\n----------------------------------------\n\nTITLE: Overwriting Post Variable in Timber Context\nDESCRIPTION: Shows how to overwrite the existing 'post' variable in the Timber context with a custom post. This example retrieves a specific post and sets it up in the context.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Getting another post.\n$post = Timber::get_post(12);\n$post->setup();\n\n// Get context with your post.\n$context = Timber::context([\n    'post' => $post,\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Getting another post.\n$post = Timber::get_post(12);\n\n$context = Timber::context([\n    'post' => $post->setup(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Extending Timber Menu Classes (PHP)\nDESCRIPTION: Examples of extending Timber\\Menu and Timber\\MenuItem classes for additional functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass MenuPrimary extends \\Timber\\Menu\n{\n}\n\nclass MenuItemPrimary extends \\Timber\\MenuItem\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Twig Cache Extension\nDESCRIPTION: Shows how to register the Twig cache extension with Timber. This allows using the cache tag in Twig templates for partial caching.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter;\nuse Twig\\Extra\\Cache\\CacheExtension;\nuse Twig\\Extra\\Cache\\CacheRuntime;\nuse Twig\\RuntimeLoader\\RuntimeLoaderInterface;\n\nadd_filter('timber/twig', function ($twig) {\n\t\t$twig->addRuntimeLoader(new class implements RuntimeLoaderInterface\n\t\t{\n\t\t\tpublic function load($class)\n\t\t\t{\n\t\t\t\tif (CacheRuntime::class === $class) {\n\t\t\t\t\treturn new CacheRuntime(new TagAwareAdapter(new FilesystemAdapter('', 0, TIMBER_LOC . '/cache/twig')));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t$twig->addExtension(new CacheExtension());\n\n    return $twig;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Target for External Links in Twig\nDESCRIPTION: Demonstrates how to set the target attribute to '_blank' for external links. This uses the item.is_external property to check if the link is to an external site.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<a\n    href=\"{{ item.link }}\"\n    {{ item.is_external ? 'target=\"_blank\"' }}\"\n>{{ item.title }}</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing Timber Context and Rendering Template in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Timber context and render a Twig template in PHP. It sets up the context and renders a 'single.twig' template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cheatsheet.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Conditional Target Attribute for New Tab in Twig\nDESCRIPTION: Shows how to conditionally add the target attribute only when the menu item is set to open in a new tab. This uses the item.is_target_blank property to check if the new tab option is selected.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<a\n    href=\"{{ item.link }}\"\n    {{ item.is_target_blank ? 'target=\"_blank\"' }}\n>{{ item.title }}</a>\n```\n\n----------------------------------------\n\nTITLE: Recursive Comment Template for Threaded Comments in Twig\nDESCRIPTION: Template for individual comments that supports nesting child comments. This comment.twig template displays the comment content and author, includes a comment form, and recursively includes itself for handling nested replies.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/comments.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# comment.twig #}\n<li>\n  <div>{{ comment.content }}</div>\n  <p class=\"comment-author\">{{ comment.author.name }}</p>\n  {{ function('comment_form') }}\n  <!-- nested comments here -->\n  {% if comment.children %}\n    <div class=\"replies\">\n      {% for child_comment in comment.children %}\n        {% include 'comment.twig' with { comment:child_comment } %}\n      {% endfor %}\n    </div>\n  {% endif %}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Dumping All Context Variables in Twig Templates\nDESCRIPTION: This snippet shows how to dump the entire context (all variables) passed to a Twig template. This provides a complete overview of all data available to the current template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Using pre_get_posts for Custom Query Pagination\nDESCRIPTION: Alternative approach using pre_get_posts hook to modify the main query for pagination. This method helps avoid 404 errors that sometimes occur with custom queries on paginated pages.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction my_home_query($query)\n{\n    if ($query->is_main_query() && !is_admin()) {\n        $query->set('post_type', ['movie', 'post']);\n    }\n}\n\nadd_action('pre_get_posts', 'my_home_query');\n```\n\n----------------------------------------\n\nTITLE: Using shortcodes filter in Twig\nDESCRIPTION: Demonstrates the use of the 'shortcodes' filter to process WordPress shortcodes within Twig templates. This allows for the execution of shortcodes in custom fields or other content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"gallery\">\n    {{ post.custom_shortcode_field|shortcodes }}\n</section>\n```\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"gallery\">\nHere is my gallery <div class=\"gallery\" id=\"gallery-123\"><img src=\"....\" />...</div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Image in Twig\nDESCRIPTION: Shows how to display a basic image using Timber's post.thumbnail object in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src }}\" class=\"my-thumb-class\" alt=\"Image for {{ post.title }}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Image Sizes in WordPress for Timber\nDESCRIPTION: PHP function to register custom image sizes in WordPress as an alternative to Timber's on-the-fly image resizing, which doesn't work on WordPress VIP due to filesystem restrictions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/hosts-servers.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_image_size('my_custom_size', 220, 220, ['left', 'top']);\n```\n\n----------------------------------------\n\nTITLE: Measuring Template Rendering Performance\nDESCRIPTION: Shows how to measure template rendering time using Timber's timer helper functions. This provides performance metrics for debugging and optimization.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// This generates a starting time\n$start = Timber\\Helper::start_timer();\n\n$context = Timber::context([\n    'whatever' => get_my_foo(),\n]);\n\nTimber::render('single.twig', $context, 600);\n\n// This reports the time diff by passing the $start time\necho Timber\\Helper::stop_timer($start);\n```\n\n----------------------------------------\n\nTITLE: Letterboxing Images in Twig\nDESCRIPTION: Demonstrates how to letterbox images to a certain size without cropping using Twig filters in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|letterbox(400, 400, '#FFFFFF') }}\" />\n```\n\n----------------------------------------\n\nTITLE: Using Updated Twig Functions for Timber Objects\nDESCRIPTION: New Twig functions have been added to replace the deprecated class-named functions for converting objects or IDs into Timber objects.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{{ get_post() }}\n{{ get_posts() }}\n{{ get_attachment_by() }}\n{{ get_term() }}\n{{ get_terms() }}\n{{ get_user() }}\n{{ get_users() }}\n{{ get_comment() }}\n{{ get_comments() }}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in Twig\nDESCRIPTION: Comprehensive example of accessing various user data properties and meta values in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# Display name #}\n{{ user.name }}\n{{ user.display_name }}\n\n{# Nice name #}\n{{ user.slug }}\n{{ user.user_nicename }}\n\n{# Email #}\n{{ user.user_email }}\n\n{# Website #}\n{{ user.user_url }}\n\n{# Values loaded from user meta. #}\n{{ user.meta('first_name') }}\n{{ user.meta('last_name') }}\n{{ user.meta('description') }}\n\n{# Contact info #}\n{{ user.meta('facebook') }}\n{{ user.meta('instagram') }}\n{{ user.meta('linkedin') }}\n{{ user.meta('pinterest') }}\n{{ user.meta('soundcloud') }}\n{{ user.meta('tumblr') }}\n{{ user.meta('twitter') }}\n{{ user.meta('youtube') }}\n{{ user.meta('wikipedia') }}\n```\n\n----------------------------------------\n\nTITLE: ACF Block Render Callback Function\nDESCRIPTION: PHP callback function that handles the block rendering. Sets up the Timber context with block data, fields, and preview status for template rendering.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/gutenberg.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_acf_block_render_callback( $block, $content = '', $is_preview = false ) {\n    $context = Timber::context();\n\n    // Store block values.\n    $context['block'] = $block;\n\n    // Store field values.\n    $context['fields'] = get_fields();\n\n    // Store $is_preview value.\n    $context['is_preview'] = $is_preview;\n\n    // Render the block.\n    Timber::render( 'block/example-block.twig', $context );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Timber User Class\nDESCRIPTION: Shows how to extend the Timber\\User class and properly instantiate custom user objects.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Author extends Timber\\User\n{\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$author = Timber::get_user($user_id);\n```\n\n----------------------------------------\n\nTITLE: ACF Gallery Field Iteration\nDESCRIPTION: Shows how to loop through images in an ACF gallery field.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% for image in post.meta('gallery') %}\n    <img src=\"{{ get_image(image) }}\" />\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Traditional WordPress Template Example\nDESCRIPTION: Example of a traditional WordPress single post template without Timber\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1><?php the_title(); ?></h1>\n```\n\n----------------------------------------\n\nTITLE: Setting Up WooCommerce Context in Timber\nDESCRIPTION: This PHP code establishes the context and data to be passed to Twig files for WooCommerce integration. It handles both single product pages and archive pages.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!class_exists('Timber')) {\n    echo 'Timber not activated. Make sure you activate the plugin in <a href=\"/wp-admin/plugins.php#timber\">/wp-admin/plugins.php</a>';\n\n    return;\n}\n\n$context = Timber::context();\n$context['sidebar'] = Timber::get_widgets('shop-sidebar');\n\nif (is_singular('product')) {\n    $context['post'] = Timber::get_post();\n    $product = wc_get_product($context['post']->ID);\n    $context['product'] = $product;\n\n    // Get related products\n    $related_limit = wc_get_loop_prop('columns');\n    $related_ids = wc_get_related_products($context['post']->id, $related_limit);\n    $context['related_products'] = Timber::get_posts($related_ids);\n\n    // Restore the context and loop back to the main query loop.\n    wp_reset_postdata();\n\n    Timber::render('views/woo/single-product.twig', $context);\n} else {\n    $posts = Timber::get_posts();\n    $context['products'] = $posts;\n\n    if (is_product_category()) {\n        $queried_object = get_queried_object();\n        $term_id = $queried_object->term_id;\n        $context['category'] = get_term($term_id, 'product_cat');\n        $context['title'] = single_term_title('', false);\n    }\n\n    Timber::render('views/woo/archive.twig', $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Reload for Twig Cache\nDESCRIPTION: Demonstrates how to enable cache auto-reload for development environments. This makes Twig check for template changes and recompile when necessary.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/environment/options', function ($options) {\n    $options['cache']       = true;\n    $options['auto_reload'] = true;\n\n    return $options;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget with Timber in PHP\nDESCRIPTION: Illustrates how to create a custom WordPress widget that uses Timber for rendering its content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function widget( $args, $instance ) {\n    if ( ! class_exists( 'Timber' ) ) {\n        // if you want to show some error message, this is the right place\n        return;\n    }\n\n    $number = rand();\n\n    Timber::render( 'random-widget.twig', array(\n        'args' => $args,\n        'instance' => $instance,\n        'number' => $number\n    ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Retina Image Sizes in Twig\nDESCRIPTION: Demonstrates how to generate retina image sizes using Timber's retina filter in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src }}\" srcset=\"{{ post.thumbnail.src|retina(1) }} 1x,\n    {{ post.thumbnail.src|retina(2) }} 2x,\n    {{ post.thumbnail.src|retina(3) }} 3x,\n    {{ post.thumbnail.src|retina(4) }} 4x\">\n```\n\n----------------------------------------\n\nTITLE: Making ACF Options Available Site-wide in Timber\nDESCRIPTION: Shows how to add ACF options to the global Timber context for use across all templates in a WordPress theme.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* functions.php */\nadd_filter( 'timber_context', 'mytheme_timber_context'  );\n\nfunction mytheme_timber_context( $context ) {\n    $context['options'] = get_fields('option');\n    return $context;\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n/* footer.twig */\n<footer>{{ options.copyright_info }}</footer>\n```\n\n----------------------------------------\n\nTITLE: Using Twig's Date Filter and Function in Timber\nDESCRIPTION: Demonstrates various ways to use Twig's built-in date filter in Timber templates. Shows formatting for date variables, post dates, date strings, and the current date.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ my_date|date('j. F Y') }}\n{{ post.date|date('j. F Y') }}\n{{ post.modified|date('j. F Y') }}\n{{ '2020-02-20 20:20'|date('j. F Y') }}\n{{ 'now'|date('j. F Y') }}\n```\n\n----------------------------------------\n\nTITLE: Timber Context Usage\nDESCRIPTION: Demonstrates using Timber's context function to get common template data\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nTimber::render('index.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Using Menu Class Filter with Menu Depth Logic\nDESCRIPTION: This snippet demonstrates how to use the timber/menu/class filter to select different menu classes based on menu depth. It chooses between SingleLevelMenu and MultiLevelMenu based on the depth argument.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/menu/class', function ($class, $term, $args) {\n    if ($args['depth'] === 1) {\n        return SingleLevelMenu::class;\n    }\n\n    return MultiLevelMenu::class;\n}, 10, 3);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Custom Template Locations in Timber with PHP\nDESCRIPTION: Shows how to add multiple custom locations for Twig files using an array with the 'timber/locations' filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/locations', function ($paths) {\n    $paths[] = [\n        '/Users/lukas/Sandbox/templates',\n        '~/Sites/timber-templates/',\n        ABSPATH . '/wp-content/templates',\n    ];\n\n    return $paths;\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Users by Field in PHP\nDESCRIPTION: Shows how to retrieve users by different fields like email or login using Timber::get_user_by().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Get a user by email.\n$user = Timber::get_user_by('email', 'user@example.com');\n\n// Get a user by login.\n$user = Timber::get_user_by('login', 'keanu-reeves');\n```\n\n----------------------------------------\n\nTITLE: Using WebP Images in Twig\nDESCRIPTION: Demonstrates how to use WebP images with fallbacks using Twig filters in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<picture>\n   <source srcset=\"{{ post.thumbnail.src|towebp }}\" type=\"image/webp\">\n   <source srcset=\"{{ post.thumbnail.src|tojpg }}\" type=\"image/jpeg\">\n   <img src=\"{{ post.thumbnail.src|tojpg }}\" alt=\"{{ post.title }}\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Handling Password Protected Posts in PHP and Twig\nDESCRIPTION: Demonstrates how to check for password-protected posts and render an appropriate template in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nif (post_password_required($post->ID)) {\n    Timber::render('single-password.twig', $context);\n} else {\n    Timber::render(\n        ['single-' . $post->ID . '.twig', 'single-' . $post->post_type . '.twig', 'single.twig'],\n        $context\n    );\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n    {{ function('get_the_password_form') }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Menu with Location Slug in Timber\nDESCRIPTION: Creates a new Timber\\Menu instance using the registered menu location slug. This approach uses the theme location identifier where the menu is assigned.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$menu = new Timber\\Menu( 'primary' );\n```\n\n----------------------------------------\n\nTITLE: Using wp_kses_post Escaper in Twig\nDESCRIPTION: This example demonstrates how to use the wp_kses_post escaper in a Twig template. It sanitizes content for allowed HTML tags based on WordPress post content rules.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/escapers.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"intro\">{{post.post_content|e('wp_kses_post')}}</p>\n```\n\n----------------------------------------\n\nTITLE: Registering ACF Block in WordPress\nDESCRIPTION: PHP code to register a custom ACF block in WordPress. Sets up block name, title, description, and other configuration options through the acf_register_block() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/gutenberg.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'acf/init', 'my_acf_init' );\n\nfunction my_acf_init() {\n    // Bail out if function doesn't exist.\n    if ( ! function_exists( 'acf_register_block' ) ) {\n        return;\n    }\n\n    // Register a new block.\n    acf_register_block( array(\n        'name'            => 'example_block',\n        'title'           => __( 'Example Block', 'your-text-domain' ),\n        'description'     => __( 'A custom example block.', 'your-text-domain' ),\n        'render_callback' => 'my_acf_block_render_callback',\n        'category'        => 'formatting',\n        'icon'            => 'admin-comments',\n        'keywords'        => array( 'example' ),\n    ) );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Escaping in Twig\nDESCRIPTION: This example illustrates the use of the esc_html escaper in Twig. It converts HTML entities to their encoded equivalents, preventing them from being rendered as markup.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/escaping.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"equation\">{{ post.meta('equation')|esc_html }}</div>\n```\n\n----------------------------------------\n\nTITLE: Modifying or Removing Existing Twig Filters\nDESCRIPTION: Shows how to replace an existing Twig filter with a custom implementation or remove it completely from the available filters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/filters', function ($filters) {\n    // Replace a filter.\n    $filters['list'] = [\n        'callable' => 'custom_list_filter',\n    ];\n\n    // Remove a filter.\n    unset($filters['list']);\n\n    return $filters;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Options in Twig Template\nDESCRIPTION: Demonstrates how to access global ACF options within a Twig template file. Shows usage of the options context variable to display copyright information in a footer.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<footer>{{ options.copyright_info }}</footer>\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects from Timestamps in PHP\nDESCRIPTION: Shows how to create DateTime objects from timestamps using DateTimeImmutable and properly set the WordPress timezone. This approach ensures correct date handling when working with Unix timestamps.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$datetime = new DateTimeImmutable( '@' . $timestamp );\n// or\n$datetime = date_create_immutable( '@' . $timestamp )\n\n// Note that we're reassigning here, since PHP's immutable functions/methods return new values.\n$datetime = $datetime->setTimezone( wp_timezone() );\n```\n\n----------------------------------------\n\nTITLE: Querying Terms with Timber in PHP\nDESCRIPTION: Shows how to query for multiple terms using Timber::get_terms() with various arguments.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$terms = Timber::get_terms();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Using the WP_Term_Query argument format.\n$terms = Timber::get_terms([\n    'taxonomy' => 'book_genre',\n    'count' => true,\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach ($terms as $term) {\n    echo $term->title();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Body Class in Twig Templates with Timber\nDESCRIPTION: This snippet demonstrates how to add body classes in a Twig template using Timber, equivalent to WordPress's get_body_class() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cheatsheet.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"{{ body_class }}\">\n```\n\n----------------------------------------\n\nTITLE: Rendering ACF Repeater Fields in Twig\nDESCRIPTION: Example of how to iterate through and display ACF Repeater fields in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% for field in fields.repeater %}\n    Title: {{ field.title }} <br/>\n    Url: {{ field.url }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Setting up Default Pagination in Timber for Archive Templates\nDESCRIPTION: Basic setup for archive pagination where Timber automatically prepares the posts variable in the context. This code shows the PHP controller file setup for archive templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nTimber::render('archive.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Converting Term IDs to Objects in Twig\nDESCRIPTION: Demonstrates how to convert term IDs to term objects in Twig using get_term() and get_terms() functions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set term = get_term(term_id) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for term in get_terms(term_ids) %}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Template in Twig\nDESCRIPTION: Shows the Twig template for a custom WordPress widget using Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ args.before_widget|raw }}\n{{ args.before_title|raw }}{{ instance.title|apply_filters('widget_title') }}{{ args.after_title|raw }}\n\n<p>Your magic number is: <strong>{{ number }}</strong></p>\n\n{{ args.after_widget|raw }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Post Content with Timber in Twig\nDESCRIPTION: Demonstrates how to display post content using Timber in a Twig template, preserving WordPress filters and actions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"my-article\">\n    {{ post.content }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using wpautop filter in Twig\nDESCRIPTION: Shows the use of 'wpautop' filter to add paragraph breaks to new lines in text. This is particularly useful when working with content from textareas or other sources where users might use line breaks.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"body\">\n\t{{ post.meta('custom_text_area')|wpautop }}\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"body\">\n\t<p>Sinatra said, \"What do you do?\"</p>\n\t<p>\"I'm a plumber,\" Ellison said.</p>\n\t<p>\"No, no, he's not,\" another young man quickly yelled from across the table. \"He wrote The Oscar.\"</p>\n\t<p>\"Oh, yeah,\" Sinatra said, \"well I've seen it, and it's a piece of crap.\"</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Threaded Comments Method 1 - WordPress Default\nDESCRIPTION: Implementation of threaded comments using WordPress's default comment markup and template. Includes both the template code and the necessary JavaScript enqueue function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/comments.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"post-{{ post.id }}\">\n  <h1>{{ post.title }}</h1>\n  <div class=\"content\">\n    {{ post.content }}\n  </div>\n  <div class=\"comments\">\n    {{ function('comments_template') }}\n  </div>\n</section>\n```\n\nLANGUAGE: php\nCODE:\n```\nadd_action('wp_print_scripts', function(){\n  if ( (!is_admin()) && is_singular() && comments_open() && get_option('thread_comments') ) wp_enqueue_script( 'comment-reply' );\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Date in PHP with WordPress Functions\nDESCRIPTION: Demonstrates correct methods for getting current date in WordPress using time(), current_datetime(), and wp_date() functions. Shows both recommended approaches and patterns to avoid.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$timestamp = time();\n\n$datetime_object = current_datetime();\n$formatted_date = $datetime_object->format('Ymd');\n\n$formatted_date = wp_date('Ymd');\n\n// Don't do this.\n$today = date('Ymd');\n```\n\n----------------------------------------\n\nTITLE: Clearing Timber and Twig Caches using WP-CLI\nDESCRIPTION: Examples of using the wp timber clear-cache command to clear different types of caches in a Timber WordPress installation. Shows commands for clearing all caches, Timber-specific caches, and Twig-specific caches.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/wp-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clear all caches.\nwp timber clear-cache\n\n# Clear Timber caches.\nwp timber clear-cache timber\n\n# Clear Twig caches.\nwp timber clear-cache twig\n```\n\n----------------------------------------\n\nTITLE: User Handling in Twig Templates\nDESCRIPTION: Examples of user object conversion and iteration in Twig templates using get_user() and get_users() functions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set user = get_user(user_id) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in get_users(user_ids) %}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Class Map Based on Menu Locations\nDESCRIPTION: This code shows how to register custom menu classes for specific menu locations using the timber/menu/classmap filter. It maps 'primary' and 'secondary' menu locations to different classes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/menu/classmap', function ($classmap) {\n    $custom_classmap = [\n        'primary' => MenuPrimary::class,\n        'secondary' => MenuSecondary::class,\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n}, 10);\n```\n\n----------------------------------------\n\nTITLE: Basic User Retrieval in PHP with Timber\nDESCRIPTION: Demonstrates how to get a user object using Timber::get_user() with a user ID or getting the current user when no ID is provided.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = Timber::get_user($user_id);\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = Timber::get_user();\n\n// Is the same as…\n\n$user = Timber::get_user(get_current_user_id());\n```\n\n----------------------------------------\n\nTITLE: Custom Paginated Content Route in PHP\nDESCRIPTION: Implementation of a custom route for paginated content using Timber Routes. Shows how to handle URL parameters and create custom queries.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/routing.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRoutes::map('info/:name/page/:pg', function($params){\n\t//make a custom query based on incoming path and run it...\n\t$query = 'posts_per_page=3&post_type='.$params['name'].'&paged='.intval($params['pg']);\n\n\t//load up a template which will use that query\n\tRoutes::load('archive.php', null, $query);\n});\n```\n\n----------------------------------------\n\nTITLE: Base Twig template for extending\nDESCRIPTION: Base Twig template that defines the overall HTML structure with blocks that can be overridden by child templates. This follows the DRY (Don't Repeat Yourself) principle.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% include \"html-header.twig\" %}\n\n{% block head %}\n    <!-- This is where you'll put template-specific stuff that needs to go in the head tags like custom meta tags, etc. -->\n{% endblock %}\n\n</head>\n\n<body class=\"{{ body_class }}\">\n\n{% block content %}\n    <!-- The template's main content will go here. -->\n{% endblock %}\n\n{% include \"footer.twig\" %}\n\n{{ wp_footer }}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Password Protected Posts with Timber\nDESCRIPTION: Shows how to handle password-protected posts in WordPress using Timber, including both PHP and Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n$post = Timber::query_post();\n$context['post'] = $post;\nif ( post_password_required( $post->ID ) ) {\n    Timber::render( 'single-password.twig', $context );\n} else {\n    Timber::render( array( 'single-' . $post->ID . '.twig', 'single-' . $post->post_type . '.twig', 'single.twig' ), $context );\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block content %}\n    {{ function('get_the_password_form') }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Code Sample Formatting in Timber/Twig\nDESCRIPTION: Shows how to format code samples using the pretags filter in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-text.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"code-sample\">{{ post.code_samples|pretags }}</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Post Dates with Default Format in Timber\nDESCRIPTION: Shows how to display post publication and modification dates in Timber templates using the default date format configured in WordPress settings.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# With default date format from Settings → General #}\n{{ post.date }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# With default date format from Settings → General #}\n{{ post.modified }}\n```\n\n----------------------------------------\n\nTITLE: Looping Through Terms in Twig\nDESCRIPTION: Demonstrates how to loop through an array of terms in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% for term in terms %}\n    {{ term.title }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Mode in Timber PHP\nDESCRIPTION: Demonstrates how to set specific cache modes when rendering templates in Timber using the cache_mode parameter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::render( $filenames, $data, $expires, $cache_mode );\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Twig Filter\nDESCRIPTION: Shows how to resize images using Timber's resize filter in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|resize(300, 200) }}\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|resize(640) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Using excerpt filter in Twig\nDESCRIPTION: Shows how to use the 'excerpt' filter to trim text to a certain number of words. This is useful for creating short previews of longer content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"intro\">{{ post.post_content|excerpt(30) }}...</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"intro\">Steve-O was born in London, England. His mother,\nDonna Gay (née Wauthier), was Canadian, and his father, Richard\nGlover, was American. His paternal grandfather was English\nand his maternal step-grandfather ...</p>\n```\n\n----------------------------------------\n\nTITLE: Modifying Timber\\Term::posts() Method Parameters in PHP\nDESCRIPTION: The posts() method in Timber\\Term class now accepts a single array parameter for query arguments, replacing the previous multiple parameter approach. This change supports more flexible querying options.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// 🚫 Before\nfunction posts($numberposts_or_args = 10, $post_type_or_class = 'any', $post_class = '')\n{\n};\n```\n\nLANGUAGE: php\nCODE:\n```\n// ✅ Now\nfunction posts($query_args = [])\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Twig Tags in Timber 2.0\nDESCRIPTION: Shows how to replace deprecated Twig tags like 'spaceless' and 'filter' with their new equivalents using the 'apply' tag.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{% spaceless %}\n\n{% endspaceless %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% apply spaceless %}\n\n{% endapply %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% filter apply_filters('your_filter_name') %}\n\n{% endapply %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% apply apply_filters('your_filter_name') %}\n\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Timber Data Passing Example\nDESCRIPTION: Demonstrates passing data from PHP to a Twig template\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'title' => 'A Timber Tutorial',\n];\n\nTimber::render('index.twig', $data);\n```\n\n----------------------------------------\n\nTITLE: Checking Timber Availability in Custom Widget Class with PHP\nDESCRIPTION: This enhanced version of the custom widget class includes a check to ensure Timber is available before using it. It provides a safeguard against errors if Timber is not loaded.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/widgets.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass My_Widget extends WP_Widget\n{\n    public function widget($args, $instance)\n    {\n        if (!class_exists('Timber')) {\n            // if you want to show some error message, this is the right place\n            return;\n        }\n\n        $number = rand();\n\n        Timber::render('random-widget.twig', [\n            'args' => $args,\n            'instance' => $instance,\n            'number' => $number,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Product Context in Timber (PHP)\nDESCRIPTION: This PHP function sets the global $product variable for WooCommerce products in Timber context. It's used to ensure correct product information in loops.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction timber_set_product( $post ) {\n    global $product;\n\n    if ( is_woocommerce() ) {\n        $product = wc_get_product( $post->ID );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dates in Different Timezones with wp_date()\nDESCRIPTION: Demonstrates how to display a date in a different timezone than the site's default timezone using the timezone parameter in wp_date().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nwp_date('F j, Y @ g:i a', $timestamp, 'Australia/Sydney');\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Menus with Twig in Timber\nDESCRIPTION: Renders a menu using a specific menu name in Twig templating. This demonstrates how to reference a named menu from the context when multiple menus are available.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n<nav>\n  <ul class=\"nav-main\">\n      {% for item in primary_menu.items %}\n          <li class=\"nav-main-item {{ item.classes|join(' ') }}\">\n              <a class=\"nav-main-link\" href=\"{{ item.link }}\">{{ item.title }}</a>\n              <!-- ... -->\n          </li>\n      {% endfor %}\n  </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: WordPress Shortcodes in Timber/Twig\nDESCRIPTION: Demonstrates processing WordPress shortcodes in Twig templates using the shortcodes filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-text.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"content\">{{ post.my_custom_text|shortcodes }}</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Dates Without Times - Incorrect Approach\nDESCRIPTION: Demonstrates the incorrect way to handle dates without times in WordPress, which can lead to date shifting issues due to timezone differences. This shows why timezone handling is still relevant even for dates without times.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Current time is 00:30, timezone is UTC + 1\n$datetime = date_create_immutable_from_format('Y-m-d', '2016-10-31');\n\n// 2016-10-31 23:30\necho $datetime->format('Y-m-d H:i');\n\n// 2016-11-01 00:30\necho wp_date('Y-m-d H:i', $datetime->getTimestamp());\n```\n\n----------------------------------------\n\nTITLE: Using Timber::get_posts() for Post Collections\nDESCRIPTION: Migration from PostQuery to get_posts() for retrieving collections of posts.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$query = [\n    'post_type' => 'book',\n    'posts_per_page' => 10,\n    'post_status' => 'publish',\n];\n\n$latest_books = Timber::get_posts($query);\n\nforeach ($latest_books->to_array() as $book) {\n    // Do something.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Area in WordPress with PHP\nDESCRIPTION: This snippet demonstrates how to register a widget area in the theme's functions.php file. It sets up a 'Footer widgets' area with specific HTML structure.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/widgets.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction site_widgets_init() {\n    register_sidebar([\n        'name'          => 'Footer widgets',\n        'id'            => 'footer_widgets'\n        'description'   => 'Add widgets here to appear in your footer.',\n        'before_widget' => '<section id=\"%1$s\" class=\"widget %2$s\">',\n        'after_widget'  => '</section>',\n        'before_title'  => '<h3 class=\"widget__title\">',\n        'after_title'   => '</h3>',\n    ]);\n}\n\nadd_action('widgets_init', 'site_widgets_init');\n```\n\n----------------------------------------\n\nTITLE: Displaying Widgets in Twig Template with Timber\nDESCRIPTION: This Twig snippet shows how to display the footer widgets in a base template. It assumes the widgets have been added to the context as 'footer_widgets'.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/widgets.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<footer>\n    {{ footer_widgets }}\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Creating Timber Starter Theme Project\nDESCRIPTION: Composer command to create a new project using the Timber Starter Theme. This command should be run from the wp-content/themes folder of your WordPress installation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project upstatement/timber-starter-theme --no-dev\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Product Teaser Template in Twig\nDESCRIPTION: This Twig template creates a teaser view for WooCommerce products, used in product loops and for related products.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<article {{ fn('post_class', ['entry'] ) }}>\n\n    {{ fn('timber_set_product', post) }}\n\n    <div class=\"media\">\n\n        {% if showthumb %}\n            <div class=\"media-figure {% if not post.thumbnail %}placeholder{% endif %}\">\n                <a href=\"{{ post.link }}\">\n                    {% if post.thumbnail %}\n                        <img src=\"{{ post.thumbnail.src|resize(post_thumb_size[0], post_thumb_size[1]) }}\" />\n                    {% else %}\n                        <span class=\"thumb-placeholder\"><i class=\"icon-camera\"></i></span>\n                    {% endif %}\n                </a>\n            </div>\n        {% endif %}\n\n        <div class=\"media-content\">\n\n            {% do action('woocommerce_before_shop_loop_item_title') %}\n\n            {% if post.title %}\n                <h3 class=\"entry-title\"><a href=\"{{ post.link }}\">{{ post.title }}</a></h3>\n            {% else %}\n                <h3 class=\"entry-title\"><a href=\"{{ post.link }}\">{{ fn('the_title') }}</a></h3>\n            {% endif %}\n\n            {% do action( 'woocommerce_after_shop_loop_item_title' ) %}\n            {% do action( 'woocommerce_after_shop_loop_item' ) %}\n\n        </div>\n\n    </div>\n\n</article>\n```\n\n----------------------------------------\n\nTITLE: Accessing ACF Field Object Data in PHP and Twig\nDESCRIPTION: Shows how to retrieve ACF field objects (including labels and other meta information) in PHP and use them in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* single.php */\n$context[\"acf\"] = get_field_objects($data[\"post\"]->ID);\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ acf.your_field_name_here.label }}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Filters in Template\nDESCRIPTION: Shows how to use the custom Twig filters 'slugify' and 'whateverify' in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<h2 id=\"{{ post.title|slugify }}\">{{ post.title|whateverify }}</h2>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Content in Twig Template\nDESCRIPTION: This Twig snippet shows how to use the template_from_string function to render dynamic content within a Twig template, allowing for variable substitution in the copyright message.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% include template_from_string(copyright) %}\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Post ID in Archive Template\nDESCRIPTION: Demonstrates how to pass post ID explicitly when calling WordPress functions in archive or index templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/functions.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# index.twig #}\n<div class=\"admin-tools\">\n    {{ function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>', post.ID) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic WordPress Title with Timber\nDESCRIPTION: Example of using WordPress functions to get dynamic data in Timber\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'title' => get_the_title(),\n];\n\nTimber::render('index.twig', $data);\n```\n\n----------------------------------------\n\nTITLE: Updated get_posts() Query Format\nDESCRIPTION: Migration from query strings to array notation in get_posts().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nTimber::get_posts([\n    'post_type' => 'article',\n]);\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Arguments in Twig\nDESCRIPTION: Demonstrates how to call WordPress functions with multiple arguments using function() in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/functions.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<div class=\"admin-tools\">\n\t{{ function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Global Context in WordPress Shortcode\nDESCRIPTION: Demonstrates how to use the cached global context in a WordPress shortcode. This example compiles a Twig template for a company address shortcode using the global context.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_shortcode('company_address', function () {\n    return Timber::compile(\n        'shortcode/company-address.twig',\n        Timber::context_global()\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig Cache Extension in PHP\nDESCRIPTION: Shows how to enable the Twig cache extension using a WordPress filter in functions.php.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/cache/enable_extension', '__return_true');\n```\n\n----------------------------------------\n\nTITLE: Attribute Escaping in Twig\nDESCRIPTION: This snippet demonstrates the use of the esc_attr escaper in Twig for HTML attributes. It's crucial for safely outputting user-provided data in form inputs and other attributes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/escaping.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<input type=\"text\" name=\"name\" value=\"{{ user.name|esc_attr }}\">\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Menu in Timber\nDESCRIPTION: Creates a new Timber\\Menu instance without specifying a menu. This approach is useful when there's only one menu in the site, as Timber will automatically use the available menu.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$menu = new Timber\\Menu();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Post::terms() Function Signature Change in PHP\nDESCRIPTION: Shows the evolution of the terms() function signature in the Timber\\Post class, changing from three parameters (args, merge, term_class) to two parameters (query_args, options) for better consistency with other Timber functions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// 🚫 Before\nfunction terms($args = [], $merge = true, $term_class = '')\n{\n};\n\n// ✅ Now\nfunction terms($query_args = [], $options = [])\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Menu with Admin Name in Timber\nDESCRIPTION: Creates a new Timber\\Menu instance using the name of the menu from the WordPress admin. This method uses the actual menu name as displayed in the admin interface.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$menu = new Timber\\Menu( 'Primary Navigation' );\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed Twig Template\nDESCRIPTION: Twig template that renders a responsive YouTube iframe embed if a video ID is provided. Uses conditional logic to prevent empty embeds.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/shortcodes.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if id %}\n\t<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/{{ id }}\" frameborder=\"0\" allowfullscreen></iframe>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Threaded Comments Method 1 in Twig Using WordPress Default Comment Template\nDESCRIPTION: Method 1 for implementing threaded comments using the WordPress default comment template. This approach uses WordPress's native comments_template() function to handle the comment display and threading.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/comments.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"post-{{ post.id }}\">\n  <h1>{{ post.title }}</h1>\n  <div class=\"content\">\n    {{ post.content }}\n  </div>\n  <div class=\"comments\">\n    {{ function('comments_template') }}\n  </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Rendering Welcome Message with Timber in PHP\nDESCRIPTION: This PHP snippet shows how to pass a welcome message from WordPress options to a Twig template using Timber. It demonstrates integrating Timber into existing themes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/index.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data['welcome_message'] = get_option('welcome_message');\n\nTimber::render('welcome.twig', $data);\n```\n\n----------------------------------------\n\nTITLE: Using MenuItem Class Filter with Menu Location Check\nDESCRIPTION: This snippet demonstrates how to use the timber/menuitem/class filter to select menu item classes based on menu location. It uses MenuItemPrimary class when the menu is assigned to the 'secondary' location.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/menuitem/class', function ($class, $item, $menu) {\n    if ('secondary' === $menu->theme_location) {\n        return MenuItemPrimary::class;\n    }\n\n    return $class;\n}, 10, 3);\n```\n\n----------------------------------------\n\nTITLE: Initializing Menu with Depth Option in Timber\nDESCRIPTION: Creates a new Timber\\Menu instance with additional options. This example shows how to limit the depth of menu levels that will be retrieved, similar to the wp_nav_menu() depth parameter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$args = array(\n\t'depth' => 2,\n);\n$menu = new Timber\\Menu( 'primary', $args );\n```\n\n----------------------------------------\n\nTITLE: Using truncate filter in Twig\nDESCRIPTION: Demonstrates the 'truncate' filter which limits text to a specified number of words. This is useful for creating short previews or excerpts of longer content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">{{ post.character.origin_story|truncate(8) }} ...</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">Bruce Wayne's parents were shot outside the opera ...</p>\n```\n\n----------------------------------------\n\nTITLE: Processing Custom Field Images in PHP\nDESCRIPTION: Shows how to process custom field images in PHP before passing them to a Twig template in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$post = Timber::get_post();\n\nif (isset($post->hero_image) && strlen($post->hero_image)) {\n    $post->hero_image = Timber::get_image($post->hero_image);\n}\n\n$data = Timber::context([\n    'post' => $post,\n]);\n\nTimber::render('single.twig', $data);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom WordPress Page Template\nDESCRIPTION: This PHP code snippet shows the header comment required to define a custom page template in WordPress. It includes the template name and description.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-page-templates.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Template Name: My Custom Page\n * Description: A Page Template with a darker design.\n */\n\n// Code to display Page goes here...\n```\n\n----------------------------------------\n\nTITLE: Array Access in Twig\nDESCRIPTION: Shows different ways to access array items in Twig, including numeric indices, associative keys, and special characters\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$item = [\n    'id' => 7,\n    'has-balcony' => true,\n];\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# Array item. #}\n{{ item[0] }}\n\n{# Normal associative array item. #}\n{{ item.id }}\n\n{# Array item with special characters in the key. #}\n{{ item['has-balcony'] }}\n\n{# Array item with variable as key. #}\n{{ item[key] }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Post Dates with Custom Format in Timber\nDESCRIPTION: Shows how to display post publication and modification dates in Timber templates using custom date format strings. The format follows PHP's date() function patterns.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.date('F j, Y @ g:i a') }}\n{{ post.modified('F j, Y @ g:i a') }}\n```\n\n----------------------------------------\n\nTITLE: Quick Image Field Display in Twig\nDESCRIPTION: Shows the concise way to display an image from an ACF image field in Twig using the Image function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ Image(post.meta('hero_image')).src }}\" />\n```\n\n----------------------------------------\n\nTITLE: User Login State Checking\nDESCRIPTION: Demonstrates how to check if a user is currently logged in using Timber, with examples in both PHP and Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/users.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = Timber::get_user();\n\nif ($user) {\n    // A user is logged in.\n} else {\n    // No user is logged in.\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if user %}\n    Hello {{ user.name }}!\n{% else %}\n    Hello visitor!\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Timber Cache Location with Filter\nDESCRIPTION: This code shows how to customize the location of Timber's cache files using the timber/cache/location filter. This can be useful when configuring debugging tools that need to access cached Twig files.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'timber/cache/location', function() {\n    return '/absolute/path/to/your/cached/twig/files';\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Field Image in PHP\nDESCRIPTION: Demonstrates how to initialize a custom field image as a Timber\\Image object in PHP before passing it to the Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$post = Timber::get_post();\n\nif ( isset( $post->hero_image ) && strlen( $post->hero_image ) ) {\n    $post->hero_image = new Timber\\Image( $post->hero_image );\n}\n\n$data = Timber::context();\n$data['post'] = $post;\nTimber::render( 'single.twig', $data );\n```\n\n----------------------------------------\n\nTITLE: Initializing a Menu with ID in Timber\nDESCRIPTION: Creates a new Timber\\Menu instance using a menu ID. This approach uses the numeric ID of the menu for initialization.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$menu = new Timber\\Menu( 3 );\n```\n\n----------------------------------------\n\nTITLE: Formatting Author Byline with Date in Timber/Twig\nDESCRIPTION: Demonstrates how to create an author byline with formatted date using Timber's post object and Twig's date filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-text.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"byline\">\n    <span class=\"name\">By {{ post.author.name }}</span>\n    <span class=\"date\">{{ post.post_date|date('F j, Y') }}</span>\n</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"byline\"><span class=\"name\">By Mr. WordPress</span><span class=\"date\">September 28, 2013</span></p>\n```\n\n----------------------------------------\n\nTITLE: Getting a Term by Field in PHP using Timber\nDESCRIPTION: Shows how to retrieve a term using Timber::get_term_by() with fields like slug or name instead of ID.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Get a term by slug.\n$term = Timber::get_term_by('slug', 'news', 'category');\n\n// Get a term by name.\n$term = Timber::get_term_by('name', 'News', 'category');\n```\n\n----------------------------------------\n\nTITLE: Routes Implementation After Timber 1.0\nDESCRIPTION: Updated routes implementation using the new Routes::map method with different argument order for the load method\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/1.0.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoutes::map('myfoo/bar', 'my_callback_function');\nRoutes::map('my-events/:event', function ($params) {\n    $query = new WP_Query('post_type=event');\n    /* please note the different order of arguments vs. Timber::load_template */\n    Routes::load('single.php', $params, $query, 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Function Call with Post ID in Loop Context\nDESCRIPTION: Shows how to properly call edit_post_link with explicit post ID in archive or index templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/functions.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# index.twig #}\n<div class=\"admin-tools\">\n\t{{ function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>', post.ID) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Cache Tag in Twig Templates\nDESCRIPTION: Demonstrates how to use the cache tag in Twig templates to cache specific sections. This example caches a post loop with a named cache key.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% cache 'index;content' %}\n    {% for post in posts %}\n        {% include ['tease-' ~ post.post_type ~ '.twig', 'tease.twig'] %}\n    {% endfor %}\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Threaded Comments Method 2 - Custom Implementation\nDESCRIPTION: Custom implementation of threaded comments using Timber's CommentThread class. Includes separate templates for the main comments section and individual comment markup with nested replies.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/comments.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<div id=\"post-comments\">\n  <h4>Comments on {{ post.title }}</h4>\n  <ul>\n    {% for comment in post.comments %}\n      {% include 'comment.twig' %}\n    {% endfor %}\n  </ul>\n  <div class=\"comment-form\">\n    {{ function('comment_form') }}\n  </div>\n</div>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# comment.twig #}\n<li>\n  <div>{{ comment.content }}</div>\n  <p class=\"comment-author\">{{ comment.author.name }}</p>\n  {{ function('comment_form') }}\n  <!-- nested comments here -->\n  {% if comment.children %}\n    <div class=\"replies\">\n      {% for child_comment in comment.children %}\n        {% include 'comment.twig' with { comment:child_comment } %}\n      {% endfor %}\n    </div>\n  {% endif %}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Default Directories in Timber\nDESCRIPTION: Configures multiple directory names for Timber to search for Twig templates. Timber will check these directories in sequence when rendering templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/template-locations.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::$dirname = array( 'templates', 'templates/shared/mods', 'twigs', 'views' );\n```\n\n----------------------------------------\n\nTITLE: Image Field Processing in Timber\nDESCRIPTION: Demonstrates different approaches to handling ACF image fields in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$post = Timber::get_post();\n\n$context = Timber::context([\n    'post' => $post,\n]);\n\nTimber::render('single.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.meta('hero_image') %}\n    <img src=\"{{ get_image(post.meta('hero_image')).src | resize(500, 300) }}\" />\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Twig Breakpoint Extension to Timber\nDESCRIPTION: This snippet demonstrates how to add the AjglBreakpointTwigExtension to Timber's Twig environment, which allows setting breakpoints in Twig templates for debugging. The extension is only added when WP_DEBUG is enabled.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'timber/twig', function( \\Twig\\Environment $twig ) {\n    if ( defined( 'WP_DEBUG' ) && WP_DEBUG\n        && class_exists( 'Ajgl\\Twig\\Extension\\BreakpointExtension' )\n    ) {\n        $twig->addExtension( new Ajgl\\Twig\\Extension\\BreakpointExtension() );\n    }\n\n    return $twig;\n} );\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Information in Twig Templates with Timber\nDESCRIPTION: This section demonstrates how to access theme-related information in Twig templates using Timber. It covers URIs and paths for both parent and child themes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cheatsheet.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ theme.uri }}\n{{ theme.parent.link }}\n{{ theme.link }}\n{{ theme.parent.path }}\n{{ theme.path }}\n```\n\n----------------------------------------\n\nTITLE: Applying WordPress Auto-Paragraph Filter in Twig\nDESCRIPTION: This snippet demonstrates how to apply WordPress' auto-paragraph filter (wpautop) to custom text content using Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-text.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"content\">{{ post.my_custom_text|wpautop }}</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Menu with Slug in Timber\nDESCRIPTION: Creates a new Timber\\Menu instance using a menu slug. This snippet shows how to initialize a menu by passing the slug of a specific menu to the constructor.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$menu = new Timber\\Menu( 'site-tools' );\n```\n\n----------------------------------------\n\nTITLE: Basic Template for pre_get_posts Pagination\nDESCRIPTION: The PHP template file used with the pre_get_posts approach. This simplified template relies on the query being modified via the pre_get_posts hook rather than directly in the template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context();\n\nTimber::render('archive.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: ACF Value Transformation Configuration\nDESCRIPTION: Demonstrates how to enable automatic transformation of ACF values into Timber objects.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/meta/transform_value', '__return_true');\n```\n\n----------------------------------------\n\nTITLE: Next/Previous Navigation for Paged Post Content\nDESCRIPTION: Implementation of next/previous page navigation for paged post content. This Twig template creates simple navigation links for multi-page posts with proper URL escaping.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.pagination.next is not empty %}\n\t<a href=\"{{ post.pagination.next.link|e('esc_url') }}\">Go to next page</a>\n{% endif %}\n\n{% if post.pagination.prev is not empty %}\n\t<a href=\"{{ post.pagination.prev.link|e('esc_url') }}\">Go to previous page</a>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sidebar Using PHP File in Timber\nDESCRIPTION: This snippet demonstrates how to create a sidebar using a PHP file in Timber. It involves creating a sidebar.php file, using it in the main PHP file, and rendering it in the Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/sidebars.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* sidebar.php */\n$context = array();\n$context['widget'] = my_function_to_get_widget();\n$context['ad'] = my_function_to_get_an_ad();\nTimber::render('sidebar.twig', $context);\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* single.php */\n$context = Timber::context();\n$context['sidebar'] = Timber::get_sidebar('sidebar.php');\nTimber::render('single.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<aside class=\"sidebar\">\n\t{{sidebar}}\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Setting a Breakpoint in Twig Templates\nDESCRIPTION: This example shows how to set a breakpoint within a Twig template using the breakpoint() function from the AjglBreakpointTwigExtension. When execution reaches this point, it will pause for debugging.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<nav>\n    {{ breakpoint() }}\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Using Function Filter in Twig\nDESCRIPTION: Shows how to run WordPress functions within Twig templates using the function filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"entry-meta\">{{function('twenty_ten_entry_meta')}}</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"entry-meta\">Posted on September 6, 2013</div>\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Twig vs PHP\nDESCRIPTION: Compares string concatenation methods between PHP and Twig, including tilde operator and string interpolation\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$string = $variable + '-suffix';\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set string = variable ~ '-suffix' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set string = \"#{variable}-suffix\" }\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set string = '%s-suffix'|format(variable) %}\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions with Term Class Map in Timber\nDESCRIPTION: This snippet shows how to use a callback function with timber/term/classmap for conditional class selection. It selects between Genre and ComedyGenre classes based on the term ID.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse ComedyGenre;\nuse Genre;\n\nadd_filter('timber/term/classmap', function ($classmap) {\n    $custom_classmap = [\n        'genre' => function (\\WP_Term $term) {\n            if ($term->term_id === 2) {\n                return ComedyGenre::class;\n            }\n\n            return Genre::class;\n        },\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Template Selection for Password Protected Posts in PHP\nDESCRIPTION: This PHP code adds a WordPress filter to use a specific template for password-protected posts. It looks for 'password-protected.php' or 'password-protected-{post_type}.php' templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Use specific template for password protected posts.\n *\n * By default, this will use the **password-protected.php** template file. If you want password\n * templates specific to a post type, use **password-protected-$posttype.php**.\n */\nadd_filter('template_include', 'get_password_protected_template', 99);\n\nfunction get_password_protected_template($template)\n{\n    global $post;\n\n    if (!empty($post) && post_password_required($post->ID)) {\n        $template = locate_template([\n            'password-protected.php',\n            \"password-protected-{$post->post_type}.php\",\n        ]) ?: $template;\n    }\n\n    return $template;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Timber using Composer in Bash\nDESCRIPTION: This command installs the Timber package using Composer. It's typically run from the project's root folder.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/intro-to-composer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require timber/timber\n```\n\n----------------------------------------\n\nTITLE: Twig Variable Output\nDESCRIPTION: Shows how to output variables in a Twig template using double curly braces\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Function Calls with Arguments in Single Template\nDESCRIPTION: Shows how to pass multiple arguments to WordPress functions in a single post template context using function().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/functions.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<div class=\"admin-tools\">\n    {{ function('edit_post_link', 'Edit', '<span class=\"edit-link\">', '</span>') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pages Menu in Timber using PHP\nDESCRIPTION: To retrieve a menu built from existing pages, you should now use the new Timber::get_pages_menu() function instead of the previous constructor method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$menu = Timber::get_pages_menu();\n```\n\n----------------------------------------\n\nTITLE: Partial Template Caching in Twig\nDESCRIPTION: Example of using Twig Cache Extension to cache specific sections of a template while allowing other parts to remain dynamic.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% cache 'index/content' posts %}\n    {% for post in posts %}\n        {% include ['tease-'~post.post_type~'.twig', 'tease.twig'] %}\n    {% endfor %}\n{% endcache %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Menu Items with Twig in Timber\nDESCRIPTION: Renders a menu with child items using Twig templating. This snippet shows how to loop through menu items, display their titles and links, and handle nested child items to create a multi-level navigation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<nav>\n    <ul class=\"nav-main\">\n        {% for item in menu.items %}\n            <li class=\"nav-main-item {{ item.classes|join(' ') }}\">\n                <a class=\"nav-main-link\" href=\"{{ item.link }}\">{{ item.title }}</a>\n                {% if item.children %}\n                    <ul class=\"nav-drop\">\n                        {% for child in item.children %}\n                            <li class=\"nav-drop-item\">\n                                <a href=\"{{ child.link }}\">{{ child.title }}</a>\n                            </li>\n                        {% endfor %}\n                    </ul>\n                {% endif %}\n            </li>\n        {% endfor %}\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Meta Query for WP_Query\nDESCRIPTION: Example of querying posts by custom field value using WP_Query arguments with Timber::get_posts().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-fields.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$args = [\n    'posts_per_page' => -1,\n    'post_type' => 'post',\n    'meta_key' => 'color',\n    'meta_value' => 'red',\n];\n\n$context['posts'] = Timber::get_posts($args);\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Filter in PHP for Timber\nDESCRIPTION: Illustrates how to create a WordPress filter in PHP that can be applied in Timber Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'default_message', 'my_default_message', 10, 4 );\n\nfunction my_default_message( $tag, $param1, $param2, $param3 ) {\n       var_dump( $tag, $param1, $param2, $param3 ); // 'I love pizza', 'foo', 'bar, 'baz'\n              \n       echo 'I have a message: ' . $tag; // I have a message: I love pizza\n}\n```\n\n----------------------------------------\n\nTITLE: Using WPAutop Filter in Twig\nDESCRIPTION: Shows how to add paragraph breaks to text using WordPress's wpautop function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"body\">\n\t{{post.custom_text_area|wpautop}}\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"body\">\n\t<p>Sinatra said, \"What do you do?\"</p>\n\t<p>\"I'm a plumber,\" Ellison said.</p>\n\t<p>\"No, no, he's not,\" another young man quickly yelled from across the table. \"He wrote The Oscar.\"</p>\n\t<p>\"Oh, yeah,\" Sinatra said, \"well I've seen it, and it's a piece of crap.\"</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Related Stories Sidebar Template\nDESCRIPTION: Twig template for displaying related posts in the sidebar, including post titles and links.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/sidebars.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<h3>Related Stories</h3>\n\n{% for post in related %}\n\t<h4><a href=\"{{ post.get_path }}\">{{ post.post_title }}</a></h4>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Field Images in Twig\nDESCRIPTION: Shows how to use images from custom fields in Twig templates with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set image = Image(post.hero_image) %}\n\n<img src=\"{{ image.src }}\" alt=\"{{ image.alt }}\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.hero_image.src|resize(500, 300) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Twig Cache Location\nDESCRIPTION: Shows how to set a custom absolute path for Twig cache files. This allows storing compiled templates in a specific directory of your choice.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/environment/options', function ($options) {\n    $options['cache'] = '/absolute/path/to/twig_cache';\n\n    return $options;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Timber Learn Theme with Composer\nDESCRIPTION: Command to create a new Timber learning theme project in WordPress themes directory\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project timber/learn-timber-theme learn-timber-theme\n```\n\n----------------------------------------\n\nTITLE: Using Processed Custom Field Images in Twig\nDESCRIPTION: Demonstrates how to use processed custom field images in a Twig template with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.hero_image.src|resize(500, 300) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Terms with Advanced Formatting in Twig\nDESCRIPTION: Shows various techniques for listing terms in Twig, including comma-separated lists, custom separators, and linked terms.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# A comma separated list #}\n{{ terms|join(', ') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ terms|join(', ', 'and') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ terms|map(\n    term => '<a href=\"' ~ term.link ~ '\">' ~ term.title ~ '</a>'\n)|join(', ', ' and ') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for term in terms -%}\n    <a href=\"{{ term.link }}\">{{ term.title }}</a>\n    {{ not loop.last ? 1 == loop.revindex0 ? ' and ' : ', ' }}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACF Block Settings in block.json\nDESCRIPTION: Example of a block.json file for configuring an ACF Block, including block metadata and ACF-specific settings.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acf/my-block\",\n    \"title\": \"My Block\",\n    \"description\": \"Description for my block\",\n    \"style\": [ \"file:./my-block.css\" ],\n    \"category\": \"formatting\",\n    \"icon\": \"format-aside\",\n    \"keywords\": [\"my\", \"block\"],\n    \"acf\": {\n        \"mode\": \"preview\",\n        \"renderCallback\": \"my_acf_block_render_callback\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shortcodes in Twig Templates\nDESCRIPTION: Illustrates how to use WordPress shortcodes within Twig templates using the 'filter' tag.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% filter shortcodes %}\n    [tabs tab1=\"Tab 1 title\" tab2=\"Tab 2 title\" layout=\"horizontal\" backgroundcolor=\"\" inactivecolor=\"\"]\n        [tab id=1]\n            Something something something\n        [/tab]\n\n        [tab id=2]\n            Tab 2 content here\n        [/tab]\n    [/tabs]\n{% endfilter %}\n```\n\n----------------------------------------\n\nTITLE: Using Twig Filter Tag with WordPress Filters\nDESCRIPTION: Shows how to use the Twig filter tag to apply WordPress filters to blocks of content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% filter apply_filters( 'default_message') %}\n        {{ post.content }}\n{% endfilter %}\n\n{% filter apply_filters('default_message', 'foo', 'bar, 'baz' ) %}\n        I love pizza\n{% endfilter %}\n```\n\n----------------------------------------\n\nTITLE: Using Sanitize Filter in Twig\nDESCRIPTION: Shows how to convert titles into URL-friendly slugs using the sanitize filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{post.title|sanitize}}\n```\n\nLANGUAGE: html\nCODE:\n```\nmy-awesome-post\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Sidebar Template\nDESCRIPTION: Simple Twig template for displaying sidebar content from PHP context.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/sidebars.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<aside class=\"sidebar\">\n\t{{ sidebar }}\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Copyright Year Footer in Timber/Twig\nDESCRIPTION: Shows how to implement an auto-updating copyright year in the footer using Twig's now variable and date filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-text.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<footer>\n\t<p class=\"copyright\">&copy; {{ now|date('Y') }} by {{ bloginfo('name') }}</p>\n</footer>\n```\n\nLANGUAGE: html\nCODE:\n```\n<footer><p class=\"copyright\">&copy; 2015 by The Daily Orange</p></footer>\n```\n\n----------------------------------------\n\nTITLE: Including a Namespaced Template in Twig\nDESCRIPTION: Shows how to include a Twig template using a registered namespace in a Twig file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('@styleguide/menu.twig') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pages Menu Class Filter in Timber\nDESCRIPTION: This code demonstrates how to use the timber/pages_menu/class filter to specify a custom class for pages menus. It always returns the ExtendedPagesMenu class for any pages menu.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse ExtendedPagesMenu;\n\nadd_filter('timber/pages_menu/class', function ($class) {\n    return ExtendedPagesMenu::class;\n});\n```\n\n----------------------------------------\n\nTITLE: Looping through posts in Twig\nDESCRIPTION: Twig template that loops through posts and includes a separate template for each post. This pattern helps maintain clean, modular templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in posts %}\n    {% include 'teaser-post.twig' %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Accessible Pagination for Paged Post Content\nDESCRIPTION: Accessible pagination markup for multi-page posts with page numbers. This Twig template creates a complete navigation menu for all pages of a split post with proper ARIA attributes for accessibility.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.pagination.pages is not empty %}\n    <nav aria-label=\"pagination\">\n        <ul>\n            {% for page in post.pagination.pages %}\n                <li>\n                    {% if page.current %}\n                        <span aria-current=\"page\">Page {{ page.title }}</span>\n                    {% else %}\n                        <a href=\"{{ page.link|e('esc_url') }}\">Page {{ page.title }}</a>\n                    {% endif %}\n                </li>\n            {% endfor %}\n        </ul>\n    </nav>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using excerpt_chars filter in Twig\nDESCRIPTION: Demonstrates the use of 'excerpt_chars' filter to trim text to a specific number of characters. This is an alternative to the 'excerpt' filter when character count is more important than word count.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"intro\">{{ post.post_content|excerpt_chars(124) }}...</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"intro\">Steve-O was born in London, England. His mother,\nDonna Gay (née Wauthier), was Canadian, and his father, Richard\nGlover, was ...</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Paged Content within a Post\nDESCRIPTION: Using paged_content to display only the current page of split post content. This Twig code displays the content for the current page when a post has been split using the nextpage tag or Page Break block.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.paged_content }}\n```\n\n----------------------------------------\n\nTITLE: Extending Timber Post Class\nDESCRIPTION: Example of extending the Timber\\Post class for custom post types\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Book extends Timber\\Post\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying or Removing Existing Twig Functions\nDESCRIPTION: Shows how to replace an existing Twig function with a custom implementation or remove it completely from the available functions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/functions', function ($functions) {\n    // Replace a function.\n    $functions['get_image'] = [\n        'callable' => 'custom_get_image',\n    ];\n\n    // Remove a function.\n    unset($functions['get_image']);\n\n    return $functions;\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Default Twig Directory in Timber\nDESCRIPTION: Changes the default 'views' directory to a custom directory name. Timber will look for Twig files in this directory within your theme.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/template-locations.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::$dirname = 'twigs';\n```\n\n----------------------------------------\n\nTITLE: Setting hide_empty Parameter for Timber::get_terms() in PHP\nDESCRIPTION: To include empty terms in the query results, you now need to explicitly set the hide_empty parameter to false when calling Timber::get_terms().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$terms = Timber::get_terms([\n    'taxonomy' => 'category',\n    'hide_empty' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Getting WordPress post data with Timber\nDESCRIPTION: PHP code that retrieves a specific WordPress post with ID 56 and passes it to a Twig template. Demonstrates connecting Timber to WordPress admin content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = array();\n$context['welcome'] = Timber::get_post( 56 );\n\nTimber::render( 'welcome.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Using sanitize filter in Twig\nDESCRIPTION: Shows how to use the 'sanitize' filter to convert titles into URL-friendly strings. This is particularly useful for creating clean ID attributes from dynamic content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<h1 id=\"{{ post.title|sanitize }}\">{{ post.title }}</h1>\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1 id=\"my-awesome-post\">My awesome post</h1>\n```\n\n----------------------------------------\n\nTITLE: Custom Widget Twig Template for Timber\nDESCRIPTION: This Twig template is used to render the custom widget. It includes the widget's title and displays a random number. The 'raw' filter is used to properly embed the widget HTML.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/widgets.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ args.before_widget|raw }}\n{{ args.before_title|raw }}{{ instance.title|apply_filters('widget_title') }}{{ args.after_title|raw }}\n\n<p>Your magic number is: <strong>{{ number }}</strong></p>\n\n{{ args.after_widget|raw }}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Password Protected Template with Timber in PHP\nDESCRIPTION: This snippet shows the contents of a custom password-protected.php template file using Timber. It sets up the context for the Twig template, including the password form.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$context                  = Timber::context();\n$context['post']          = new Timber\\Post();\n$context['password_form'] = get_the_password_form();\n\nTimber::render( 'password-protected.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Twig Directory with a String in PHP\nDESCRIPTION: Sets the default directory for Twig files to 'twigs' in the theme folder using Timber::$dirname.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nTimber::$dirname = 'twigs';\n```\n\n----------------------------------------\n\nTITLE: Enabling Universal Autoescape in Timber (PHP)\nDESCRIPTION: This snippet shows how to enable universal autoescape behavior in Timber by setting the autoescape property to 'html'. This should be added to the functions.php file of a WordPress theme.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/escapers.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( class_exists('Timber') ) {\n\tTimber::$autoescape = 'html';\n}\n```\n\n----------------------------------------\n\nTITLE: Using List Filter with PHP and Twig\nDESCRIPTION: Demonstrates converting an array into a comma-separated list with custom separators.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context['contributors'] = array('Blake Allen','Rachel White','Maddy May');\n```\n\nLANGUAGE: twig\nCODE:\n```\nContributions made by {{contributors|list(',','&')}}\n```\n\nLANGUAGE: html\nCODE:\n```\nContributions made by Blake Allen, Rachel White & Maddy May\n```\n\n----------------------------------------\n\nTITLE: Manipulating Images with Timber Methods in Twig\nDESCRIPTION: Shows how to use Timber's image manipulation methods (like resize) on ACF image fields in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.hero_image.src | resize(500, 300) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Current Menu Item with Twig in Timber\nDESCRIPTION: Conditionally displays child menu items only for the currently active menu item. This example uses the 'current' property to determine if the menu item corresponds to the current page.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/menus.md#2025-04-23_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% if item.current and item.children %}\n    <ul class=\"nav-child\">\n        {% for child in item.children %}\n            <li class=\"nav-child-item\">\n                <a class=\"nav-child-link\" href=\"{{ child.link }}\">{{ child.title }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Applying WordPress Filters in Twig Templates\nDESCRIPTION: Demonstrates how to use WordPress filters within Twig templates using the 'apply_filters' function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.content|apply_filters('default_message') }}\n{{ \"my custom string\"|apply_filters('default_message', param1, param2, ...) }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally including templates based on post type\nDESCRIPTION: Twig template that includes different templates based on post type. It tries to include a type-specific template first, with a fallback to a generic template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in posts %}\n    {# You can send an array to \"include\". Twig will use the first template it finds. #}\n    {% include ['teaser-' ~ post.post_type ~ '.twig', 'teaser-post.twig'] %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Dumping Variables in PHP using Timber Dump Extension\nDESCRIPTION: Uses the dump() function provided by Timber Dump Extension to output variables in PHP with formatted display.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndump($post);\n```\n\n----------------------------------------\n\nTITLE: Current Date Formatting in Twig Templates\nDESCRIPTION: Shows how to get and format current date in Twig templates using the date() function and now keyword\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{# Current date as a DateTime object #}\n{{ date() }}\n\n{# Current date, formatted #}\n{{ 'now'|date('F j, Y @ g:i a') }}\n```\n\n----------------------------------------\n\nTITLE: WordPress Date Format Integration\nDESCRIPTION: Shows how to integrate WordPress default date formats into the Event class\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$formats = wp_parse_args($formats, [\n    'single' => get_option('date_format'),\n    'yearless' => trim(\n        preg_replace('/[Yy]/', '', get_option('date_format'))\n    ),\n    'same_month_start' => 'j',\n    'same_month_end' => 'j F Y',\n]);\n```\n\n----------------------------------------\n\nTITLE: Running WordPress Shortcodes in Twig\nDESCRIPTION: This code shows how to process WordPress shortcodes within custom text content using Twig's shortcodes filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-text.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"content\">{{ post.my_custom_text|shortcodes }}</p>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timber User Objects in PHP\nDESCRIPTION: The method for retrieving Timber user objects has changed. Instead of using the constructor, you should now use the Timber::get_user() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$user = Timber::get_user($user_id);\n```\n\n----------------------------------------\n\nTITLE: Extending Timber\\Term Class in PHP\nDESCRIPTION: Demonstrates how to extend the Timber\\Term class with custom functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass BookGenre extends Timber\\Term\n{\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$term = Timber::get_term($term_id);\n```\n\n----------------------------------------\n\nTITLE: Using Updated Timber\\Term::posts() Method in Twig\nDESCRIPTION: Examples of how to use the new posts() method in Twig templates, showing the transition from the old syntax to the new hash-style parameter passing.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_30\n\nLANGUAGE: twig\nCODE:\n```\n{% for book in genre.posts(-1, 'book) %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for book in genre.posts({\n    post_type: 'book',\n    posts_per_page: -1,\n    orderby: 'menu_order'\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects from Date Strings with Known Format in PHP\nDESCRIPTION: Demonstrates how to create DateTime objects from formatted date strings using DateTimeImmutable::createFromFormat() or date_create_immutable_from_format(). The example shows handling dates with timezone information included in the string.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$datetime = DateTimeImmutable::createFromFormat(\n    DATE_ATOM,\n    '2020-01-02T00:09:30+02:00'\n);\n\n// or\n\n$datetime = date_create_immutable_from_format(\n    DATE_ATOM,\n    '2020-01-02T00:09:30+02:00'\n);\n\n$timestamp = $datetime->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Post Methods in Twig Template\nDESCRIPTION: Shows how to use the custom reading_time() method in a Twig template for displaying post metadata.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<header>\n    <h1>{{ post.title }}</h1>\n\n    <p>\n        {{ post.reading_time }} to read <span>&bull;</span>\n\n        Written by {{ post.author.name }} <span>&bull;</span>\n\n        <time\n            datetime=\"{{ post.date('Y-m-d H:i:s') }}\"\n        >{{ post.date }}</time>\n    <p>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Using array filter in Twig\nDESCRIPTION: Demonstrates the use of the 'array' filter to ensure a variable is an array before looping over it. This prevents errors when dealing with potentially non-array variables.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$things = 'thing';\n\n// Or\n$things = ['thing', 'thang'];\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for thing in things|array %}\n    {{ thing }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using template_from_string in Twig\nDESCRIPTION: Twig code that includes content from a string variable (copyright) that contains Twig syntax, allowing for nested template processing within variables.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-twig.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% include template_from_string(copyright) %}\n```\n\n----------------------------------------\n\nTITLE: Simple PHP Event Class with Date Display\nDESCRIPTION: Basic Event class implementation with custom date display method for formatting event dates\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Class Event\n */\nclass Event extends \\Timber\\Post\n{\n    /**\n     * Gets display date.\n     *\n     * @return string\n     */\n    public function date_display($date_format = 'F j Y')\n    {\n        $date_start = DateTimeImmutable::createFromFormat('Ymd', $this->meta('date_start'));\n\n        if (empty($date_start)) {\n            return '';\n        }\n\n        return wp_date($date_format, $date_start->getTimestamp());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timber Comment Objects in PHP\nDESCRIPTION: The method for retrieving Timber comment objects has changed. Instead of using the constructor, you should now use the Timber::get_comment() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$comment = Timber::get_comment($comment_id);\n```\n\n----------------------------------------\n\nTITLE: Time Difference Calculation in PHP\nDESCRIPTION: Demonstrates using Timber's DateTimeHelper::time_ago() function to calculate human-readable time differences\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nDateTimeHelper::time_ago($post->date());\n```\n\n----------------------------------------\n\nTITLE: WordPress Actions in Twig\nDESCRIPTION: Shows how to call WordPress actions from Twig templates with and without parameters\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# Without parameters #}\n{% do action('my_action') %}\n\n{# With parameters #}\n{% do action('my_action_with_args', 'foo', 'bar') %}\n```\n\nLANGUAGE: php\nCODE:\n```\nadd_action('my_action_with_args', 'my_function_with_args', 10, 2);\n\nfunction my_function_with_args($foo, $post)\n{\n    echo 'I say ' . $foo . '!';\n    echo 'For the post with title ' . $post->title();\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Text in Timber Twig Templates\nDESCRIPTION: Equivalent example of translating text in a Timber Twig template using the __() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/internationalization.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">\n    {{ __('Posted on', 'my-text-domain') }} [...]\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Image Size in Twig\nDESCRIPTION: Demonstrates how to use a WordPress image size when displaying an image in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src('medium') }}\" class=\"my-thumb-class\" alt=\"Image for {{ post.title }}\" />\n```\n\n----------------------------------------\n\nTITLE: Checking for Valid Terms in PHP and Twig\nDESCRIPTION: Shows how to check if a valid term was found using an if statement in both PHP and Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/terms.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$term = Timber::get_term($term_id);\n\nif ($term) {\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if term %}\n    {{ term.title }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Twig's dump Function for Object Inspection\nDESCRIPTION: This snippet demonstrates how to use Twig's native dump function to inspect a specific object. This will output all properties of the provided object for debugging purposes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(post) }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with wp_date() in WordPress\nDESCRIPTION: Shows how to format dates using wp_date() function, which handles translations and timezone correctly. Examples include formatting timestamps and DateTime objects with custom format strings.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// With a timestamp.\nwp_date('F j, Y @ g:i a', $timestamp);\n\n// With a DateTime object.\nwp_date('F j, Y @ g:i a', $datetime->getTimestamp());\n```\n\n----------------------------------------\n\nTITLE: Dynamic Twig template inclusion\nDESCRIPTION: Advanced example of including a template file dynamically based on a variable. This technique tries to include a block-specific template first, with a fallback to a default template if the specific one doesn't exist.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-twig.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% include ['blocks/block-'~block.slug~'.twig', 'blocks/blog.twig'] ignore missing %}\n```\n\n----------------------------------------\n\nTITLE: Simple Twig template include\nDESCRIPTION: Basic example of including another Twig template file in the current template. Timber will search for the file in the child-theme/views directory first, then in the timber/views directory.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-twig.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% include \"footer.twig\" %}\n```\n\n----------------------------------------\n\nTITLE: WYSIWYG Field Display\nDESCRIPTION: Example of displaying a WYSIWYG field with proper formatting.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ post.title }}</h3>\n\n<div class=\"intro-text\">\n    {{ post.meta('my_wysiwyg_field') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Retina Sizes in Twig\nDESCRIPTION: Shows how to generate retina image sizes using Twig filters in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src }}\" srcset=\"{{ post.thumbnail.src|retina(1) }} 1x,\n    {{ post.thumbnail.src|retina(2) }} 2x,\n    {{ post.thumbnail.src|retina(3) }} 3x,\n    {{ post.thumbnail.src|retina(4) }} 4x\">\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image Sizes with Timber in Twig Templates\nDESCRIPTION: Twig template code that displays a post thumbnail using a custom image size. This approach works on WordPress VIP since it uses pre-generated image sizes rather than on-the-fly resizing.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/hosts-servers.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src('my_custom_size') }}\" alt=\"{{ post.thumbnail.alt() }}\">\n```\n\n----------------------------------------\n\nTITLE: Rendering Twig Templates from Subdirectories in Timber\nDESCRIPTION: Demonstrates how to reference and render Twig templates located in subdirectories. The path is relative to the configured template directories.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/template-locations.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::render( 'shared/headers/header-home.twig' );\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig File Caching in PHP\nDESCRIPTION: Configuration code to enable Twig's internal template compilation caching through Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ( class_exists( 'Timber' ) ){\n\tTimber::$cache = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjacent Post Navigation for Single Posts in Twig\nDESCRIPTION: Implementation of previous/next article navigation for single post templates. This Twig code uses post.prev and post.next to create links to adjacent posts in chronological order.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/pagination.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.prev %}\n    <h3>Previous article</h3>\n\n    <a href=\"{{ post.prev.link }}\">{{ post.prev.title }}</a>\n{% endif %}\n\n{% if post.next %}\n    <h3>Next article</h3>\n\n    <a href=\"{{ post.next.link }}\">{{ post.next.title }}</a>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Accessing ACF Field Labels in Twig Template\nDESCRIPTION: Demonstrates how to access an ACF field's label property in a Twig template after retrieving field objects.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ acf.your_field_name_here.label }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Timber Cache for WordPress VIP\nDESCRIPTION: Filter that disables Timber's caching functionality when running on WordPress VIP. This ensures compatibility with VIP's own caching mechanisms.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/hosts-servers.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/cache/mode', function () {\n    return 'none';\n});\n```\n\n----------------------------------------\n\nTITLE: Dumping All Context Variables in Twig Template\nDESCRIPTION: Uses Twig's native dump function without arguments to output all variables passed to the Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Image Size in Twig\nDESCRIPTION: Demonstrates how to use a specific WordPress image size when displaying an image in Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src('medium') }}\" class=\"my-thumb-class\" alt=\"Image for {{ post.title }}\" />\n```\n\n----------------------------------------\n\nTITLE: Removing Default WooCommerce Product Thumbnail (PHP)\nDESCRIPTION: This PHP snippet removes the default WooCommerce product thumbnail action, allowing for custom implementation in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nremove_action( 'woocommerce_before_shop_loop_item_title', 'woocommerce_template_loop_product_thumbnail' );\n```\n\n----------------------------------------\n\nTITLE: Installing Upstatement Routes Package in Timber\nDESCRIPTION: Command to install the Upstatement/routes package via Composer for WordPress routing functionality in Timber projects.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/routing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require upstatement/routes\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies\nDESCRIPTION: Commands to navigate into the Timber directory and install required Composer dependencies\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd timber\n$ composer install\n```\n\n----------------------------------------\n\nTITLE: Custom Post Class with Price Formatter\nDESCRIPTION: Example of extending Timber\\Post class to add custom meta value formatting method for price fields.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-fields.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CustomPost extends Timber\\Post\n{\n    /**\n     * Gets formatted price.\n     */\n    public function price()\n    {\n        $price = $this->meta('price');\n\n        // Remove decimal digits.\n        return number_format($price, 0, '', '');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Paths for a Namespace in Timber with PHP\nDESCRIPTION: Demonstrates how to register multiple paths for a single namespace using the 'timber/locations' filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/template-locations.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/locations', function ($paths) {\n    $paths['styleguide'] = [\n        ABSPATH . '/wp-content/styleguide',\n        '/Users/lukas/Sandbox/styleguide',\n    ];\n\n    return $paths;\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Widgets with Timber in PHP\nDESCRIPTION: Shows how to retrieve and render WordPress widgets using Timber in PHP.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$data['footer_widgets'] = Timber::get_widgets( 'footer_widgets' );\n```\n\n----------------------------------------\n\nTITLE: Using Excerpt Filter in Twig\nDESCRIPTION: Demonstrates how to trim text to a specific length in words using the excerpt filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"intro\">{{post.post_content|excerpt(30)}}...</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"intro\">Steve-O was born in London, England. His mother, Donna Gay (née Wauthier), was Canadian, and his father, Richard Glover, was American. His paternal grandfather was English and his maternal step-grandfather ...</p>\n```\n\n----------------------------------------\n\nTITLE: Using PHP dump() Function with Timber Dump Extension\nDESCRIPTION: This code shows how to use the dump() function in PHP when using the Timber Dump Extension. It provides a more readable and formatted output than standard var_dump or print_r.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndump( $post );\n```\n\n----------------------------------------\n\nTITLE: Getting WordPress posts with Timber\nDESCRIPTION: PHP code that retrieves WordPress posts and passes them to a Twig template. Used for displaying a list of posts on a home page.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context['posts'] = Timber::get_posts();\n\nTimber::render( 'home-main.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Converting Images to JPG in Twig\nDESCRIPTION: Shows how to convert images to JPG format using Twig filters in Timber. Can be used in combination with other filters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-images.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|tojpg }}\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|tojpg|resize(300, 300) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Copyright Year in Twig\nDESCRIPTION: This code shows how to create a dynamic copyright year in the footer using Twig's date filter and the WordPress bloginfo function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-text.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<footer>\n\t<p class=\"copyright\">&copy; {{ now|date('Y') }} by {{ bloginfo('name') }}</p>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Twig Post Query Syntax\nDESCRIPTION: Example of running post queries directly in Twig templates using hash notation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set posts = get_posts({\n    post_type: 'post',\n    post_status: 'publish',\n    posts_per_page: 10\n}) %}\n{% if posts is not empty %}\n    <ul>\n        {% for post in posts %}\n            <li><a href=\"{{ post.link }}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Timber Version with Composer\nDESCRIPTION: This command demonstrates how to install a specific version of Timber using Composer. It installs Timber version 2.0.1.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/manage-timber-with-composer.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require timber/timber:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Using relative filter in Twig\nDESCRIPTION: Demonstrates the 'relative' filter which converts absolute URLs to relative ones. This can be useful for creating more portable links within a site.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\nMy custom link is <a href=\"{{ 'https://example.org/2015/08/my-blog-post'|relative }}\">here!</a>\n```\n\nLANGUAGE: html\nCODE:\n```\nMy custom link is <a href=\"/2015/08/my-blog-post\">here!</a>\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig Cache in Timber (PHP)\nDESCRIPTION: Enables caching of Twig files in Timber, which is necessary for setting breakpoints in Twig files with PhpStorm.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nTimber::$twig_cache = true;\n```\n\n----------------------------------------\n\nTITLE: Letterboxing Images in Twig\nDESCRIPTION: Demonstrates how to letterbox images to fit a specific size without cropping using Timber's letterbox filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|letterbox(400, 400, '#FFFFFF') }}\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Page Template in PHP for WordPress\nDESCRIPTION: This PHP code snippet shows the header comment required to create a custom page template in WordPress. It includes the template name and description, which will appear in the WordPress admin interface.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/custom-page-templates.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Template Name: My Custom Page\n * Description: A Page Template with a darker design.\n */\n\n// Code to display Page goes here...\n```\n\n----------------------------------------\n\nTITLE: Making Functions Available in Twig via PHP\nDESCRIPTION: PHP code showing how to make WordPress functions directly available in Twig templates using Timber\\Twig_Function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/functions.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'timber/twig', 'add_to_twig' );\n\n/**\n * My custom Twig functionality.\n *\n * @param \\Twig\\Environment $twig\n * @return \\Twig\\Environment\n */\nfunction add_to_twig( $twig ) {\n    // Adding a function.\n    $twig->addFunction( new Timber\\Twig_Function( 'edit_post_link', 'edit_post_link' ) );\n    \n    return $twig;\n} );\n```\n\n----------------------------------------\n\nTITLE: Displaying Widgets in Twig Template\nDESCRIPTION: Demonstrates how to output WordPress widgets in a Twig template using Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<footer>\n    {{ footer_widgets }}\n</footer>\n```\n\n----------------------------------------\n\nTITLE: Enabling WordPress Debugging in wp-config.php\nDESCRIPTION: This snippet shows how to enable WordPress debugging by setting the WP_DEBUG constant to true in the wp-config.php file. This is a prerequisite for many debugging features in Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_DEBUG', true );\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Posts\nDESCRIPTION: Shows how to check for valid posts in both PHP and Twig\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$post = Timber::get_post($post_id);\n\nif ($post) {\n    // Handle post.\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if post %}\n    {{ post.title }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Executing WordPress Actions in Twig Templates\nDESCRIPTION: Shows how to call WordPress actions within Twig templates using the 'do' function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do action('my_action') %}\n{% do action('my_action_with_args', 'foo', 'bar') %}\n```\n\n----------------------------------------\n\nTITLE: Traditional WordPress Permalink Title\nDESCRIPTION: Traditional WordPress PHP approach for displaying linked post titles.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"article-h1\"><a href=\"<?php get_permalink(); ?>\"><?php the_title(); ?></a></h1>\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: Commands to navigate to the Timber directory in the virtual environment and run PHPUnit tests\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /srv/www/timber\n$ phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Test Suite for Timber\nDESCRIPTION: Command to install the WordPress test suite for Timber on a local environment. It requires database credentials and a WordPress version to set up the testing environment.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbash bin/install-wp-tests.sh {db_name} {db_user} {db_password} {db_host} {wp_version}\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Query in Timber Archive Template\nDESCRIPTION: Shows how to modify the default query in a Timber archive template. This example demonstrates changing the query to only show posts from specific authors using the 'merge_default' option.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/context.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context([\n    'posts' => Timber::get_posts(\n        [\n            'author__in' => [1, 6, 14],\n        ],\n        [\n            'merge_default' => true,\n        ]\n    ),\n]);\n\nTimber::render('archive.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Using Shortcodes Filter in Twig\nDESCRIPTION: Demonstrates processing WordPress shortcodes within Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"gallery\">\n{{post.custom_shortcode_field|shortcodes}}\n</section>\n```\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"gallery\">\nHere is my gallery <div class=\"gallery\" id=\"gallery-123\"><img src=\"....\" />...</div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Functions\nDESCRIPTION: Examples of using custom functions made available in Twig templates with default and custom arguments.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/functions.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<div class=\"admin-tools\">\n    {{ edit_post_link() }}\n</div>\n{# Calls edit_post_link using default arguments #}\n\n{# single-my-post-type.twig #}\n<div class=\"admin-tools\">\n    {{ edit_post_link(null, '<span class=\"edit-my-post-type-link\">') }}\n</div>\n{# Calls edit_post_link with all defaults, except for second argument #}\n```\n\n----------------------------------------\n\nTITLE: Running Quality Assurance Checks in Timber\nDESCRIPTION: Command to run all quality assurance checks on the Timber codebase. This is a comprehensive check that combines multiple code quality tools.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer qa\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Objects with strtotime() and Alternative Methods\nDESCRIPTION: Demonstrates various methods to create DateTime objects when the exact format is unknown, using strtotime() or date_create_immutable(). Shows examples with and without timezone specification.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$timestamp = strtotime('2008-08-07 18:11:31');\n\n// No timezone needed, because it's already included in the string.\n$datetime = date_create_immutable('2020-01-02T00:09:30+02:00');\n\n// Either with or without a timezone, depending on how you saved your dates.\n$datetime = date_create_immutable('2008-08-07 18:11:31', wp_timezone());\n$datetime = date_create_immutable('2008-08-07 18:11:31');\n\n// Either with or without a timezone, depending on how you saved your dates.\n$datetime = new DateTimeImmutable('2008-08-07 18:11:31', wp_timezone());\n$datetime = new DateTimeImmutable('2008-08-07 18:11:31');\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Action with Arguments in PHP\nDESCRIPTION: Shows how to create a WordPress action that accepts arguments, to be used with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nadd_action( 'my_action_with_args', 'my_function_with_args', 10, 2 );\n\nfunction my_function_with_args( $foo, $bar ){\n    echo 'I say ' . $foo . ' and ' . $bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Using sprintf Formatting in WordPress vs Timber\nDESCRIPTION: Comparison of sprintf-style placeholders in translations between WordPress PHP and Timber Twig using the format filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/internationalization.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">\n    <?php printf( __('Posted on %s', 'my-text-domain'), $posted_on_date ) ?>\n</p>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">\n    {# Translators: The placeholder will be replaced with the localized post date #}\n    {{ __('Posted on %s', 'my-text-domain')|format(posted_on_date) }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Timber Index Page Setup\nDESCRIPTION: PHP code for setting up the index page context and rendering with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = Timber::context();\n$context['posts'] = Timber::get_posts();\n\nTimber::render( 'index.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Test Database in PHP\nDESCRIPTION: PHP code snippet to configure database settings for WordPress unit tests.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndefine('DB_NAME', 'wordpress_unit_tests');\ndefine('DB_USER', 'root');\ndefine('DB_PASSWORD', 'root');\n```\n\n----------------------------------------\n\nTITLE: Fixing Composer Memory Issues in Linux\nDESCRIPTION: Bash script to allocate additional swap space to resolve memory issues when running Composer.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024\nsudo /sbin/mkswap /var/swap.1\nsudo /sbin/swapon /var/swap.1\n```\n\n----------------------------------------\n\nTITLE: Adding Comment Reply JavaScript in PHP for Threaded Comments\nDESCRIPTION: PHP code to include WordPress's comment reply JavaScript for threaded comments. This code is added to functions.php and conditionally loads the comment-reply script when viewing a singular post with comments enabled.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/comments.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//Include the comment reply Javascript\nadd_action('wp_print_scripts', function () {\n    if ((!is_admin()) && is_singular() && comments_open() && get_option('thread_comments')) {\n        wp_enqueue_script('comment-reply');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Relative URL Filter in Twig\nDESCRIPTION: Demonstrates converting absolute URLs to relative URLs using the relative filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\nMy custom link is <a href=\"{{ 'https://example.org/2015/08/my-blog-post' | relative }}\">here!</a>\n```\n\nLANGUAGE: html\nCODE:\n```\nMy custom link is <a href=\"/2015/08/my-blog-post\">here!</a>\n```\n\n----------------------------------------\n\nTITLE: Calling PHP Functions in Twig Templates\nDESCRIPTION: This example demonstrates how to call PHP functions within Twig templates using the function syntax, comparing it with the traditional WordPress template approach.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-text.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\"><?php twentytwelve_entry_meta(); ?></p>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">{{ function('twentytwelve_entry_meta') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Dates Without Times - Correct Approach with WordPress Timezone\nDESCRIPTION: Shows the correct way to handle dates without times by using wp_timezone() when creating the datetime object, preventing date shifting issues due to timezone differences.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Current time is 00:30, timezone is UTC + 1\n$datetime = date_create_immutable_from_format(\n    'Y-m-d',\n    '2016-10-31',\n    wp_timezone()\n);\n\n// 2016-10-31 00:30\necho $datetime->format('Y-m-d H:i');\n\n// 2016-10-31 00:30\necho wp_date('Y-m-d H:i', $datetime->getTimestamp());\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests for Timber\nDESCRIPTION: Bash commands to SSH into Vagrant, navigate to Timber directory, install dependencies, and run PHPUnit tests.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant ssh\n$ cd /srv/www/timber\n$ composer install\n$ phpunit\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement in Timber PHP\nDESCRIPTION: Shows how to measure template rendering performance using Timber's built-in timer helpers.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/performance.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// This generates a starting time\n$start = TimberHelper::start_timer();\n\n$context = Timber::context();\n$context['post'] = Timber::get_post();\n$context['whatever'] = get_my_foo();\n\nTimber::render( 'single.twig', $context, 600 );\n\n// This reports the time diff by passing the $start time\necho TimberHelper::stop_timer( $start);\n```\n\n----------------------------------------\n\nTITLE: WordPress Autoparagraph Filter in Timber/Twig\nDESCRIPTION: Example of using WordPress's wpautop filter in Twig templates to automatically add paragraph tags.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-text.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"content\">{{ post.my_custom_text|wpautop }}</p>\n```\n\n----------------------------------------\n\nTITLE: Advanced Date Display Usage in Twig\nDESCRIPTION: Demonstrates how to use the advanced date display functionality with custom formats in Twig\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{# With your default date format #}\n{{ post.date_display }}\n\n{# With customized date formats #}\n{{ post.date_display({\n    same_month_end: 'j M Y'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Including Composer Autoload in WordPress Theme\nDESCRIPTION: PHP code to include Composer's autoload file in your WordPress theme's functions.php file. This is necessary if your theme isn't set up to automatically load Composer dependencies.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/setup.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once( __DIR__ . '/vendor/autoload.php' );\n```\n\n----------------------------------------\n\nTITLE: ACF Repeater Fields Template\nDESCRIPTION: Twig template example showing how to loop through ACF repeater fields in a block.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/gutenberg.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for field in fields.repeater %}\n    Title: {{ field.title }} <br/>\n    Url: {{ field.url }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: PHP Function Integration in Timber/Twig\nDESCRIPTION: Comparison of calling PHP functions in traditional WordPress templates versus Timber's Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cookbook-text.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\"><?php twentytwelve_entry_meta(); ?></p>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">{{ function('twentytwelve_entry_meta') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Filter for Password Protected Posts in PHP\nDESCRIPTION: This snippet adds a WordPress filter to use a specific PHP template for all password-protected posts. It allows for post-type specific templates and falls back to a general password-protected template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Use specific template for password protected posts.\n *\n * By default, this will use the `password-protected.php` template file. If you want password\n * templates specific to a post type, use `password-protected-$posttype.php`.\n */\nadd_filter( 'template_include', 'get_password_protected_template', 99 );\n\nfunction get_password_protected_template( $template ) {\n    global $post;\n\n    if ( ! empty( $post ) && post_password_required( $post->ID ) ) {\n        $template = locate_template( [\n            'password-protected.php',\n            \"password-protected-{$post->post_type}.php\",\n        ] ) ?: $template;\n    }\n\n    return $template;\n};\n```\n\n----------------------------------------\n\nTITLE: Preparing data for Twig templates in PHP\nDESCRIPTION: PHP code that prepares variables for a Twig template, including a dynamic year value and retrieving a custom copyright message from WordPress options before rendering a template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-twig.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$data['year'] = date('Y');\n$data['copyright'] = get_option(\"footer_message\"); //\"Copyright {{year}} by Upstatement, LLC. All Rights Reserved\"\nrender_twig('footer.twig', $data);\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Static Analysis for Timber\nDESCRIPTION: Bash command to run PHPStan static analysis on Timber codebase with a specified strictness level.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyze -l 1\n```\n\n----------------------------------------\n\nTITLE: Dumping Object Properties in Twig Template\nDESCRIPTION: Uses Twig's native dump function to output the properties of a post object in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(post) }}\n```\n\n----------------------------------------\n\nTITLE: Shortcode Template in Twig\nDESCRIPTION: Shows the Twig template for a WordPress shortcode implemented with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/wp-integration.md#2025-04-23_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% if id %}\n\t<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/{{ id }}\" frameborder=\"0\" allowfullscreen></iframe>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Main WooCommerce Integration File for Timber (PHP)\nDESCRIPTION: This code establishes the context and data to be passed to Twig files for WooCommerce integration. It handles both single product and archive pages.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ( ! class_exists( 'Timber' ) ) {\n    echo 'Timber not activated. Make sure you activate the plugin in <a href=\"/wp-admin/plugins.php#timber\">/wp-admin/plugins.php</a>';\n\n    return;\n}\n\n$context            = Timber::context();\n$context['sidebar'] = Timber::get_widgets( 'shop-sidebar' );\n\nif ( is_singular( 'product' ) ) {\n    $context['post']    = Timber::get_post();\n    $product            = wc_get_product( $context['post']->ID );\n    $context['product'] = $product;\n\n    // Get related products\n    $related_limit               = wc_get_loop_prop( 'columns' );\n    $related_ids                 = wc_get_related_products( $context['post']->id, $related_limit );\n    $context['related_products'] =  Timber::get_posts( $related_ids );\n\n    // Restore the context and loop back to the main query loop.\n    wp_reset_postdata();\n\n    Timber::render( 'views/woo/single-product.twig', $context );\n} else {\n    $posts = Timber::get_posts();\n    $context['products'] = $posts;\n\n    if ( is_product_category() ) {\n        $queried_object = get_queried_object();\n        $term_id = $queried_object->term_id;\n        $context['category'] = get_term( $term_id, 'product_cat' );\n        $context['title'] = single_term_title( '', false );\n    }\n\n    Timber::render( 'views/woo/archive.twig', $context );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Timber Filesystem Writes for WordPress VIP\nDESCRIPTION: Filter that prevents Timber from writing to the filesystem, which is restricted in WordPress VIP environments. This disables features like on-the-fly image resizing.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/hosts-servers.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/allow_fs_write', '__return_false');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Template Location in Timber\nDESCRIPTION: Sets a custom file path for Timber to look for Twig templates. This overrides the default location and should be defined in functions.php.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/template-locations.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::$locations = '/Users/jared/Sandbox/templates';\n```\n\n----------------------------------------\n\nTITLE: Event Class with Sponsor Support\nDESCRIPTION: Extended Event class implementation with sponsor relationship handling\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Class Event\n */\nclass Event extends \\Timber\\Post\n{\n    /**\n     * Sponsors cache.\n     *\n     * @var \\Timber\\PostCollectionInterface\n     */\n    protected $sponsors;\n\n    /**\n     * Gets event sponsors.\n     *\n     * @return \\Timber\\PostCollectionInterface\n     */\n    public function sponsors()\n    {\n        if (empty($this->sponsors)) {\n            return $this->sponsors;\n        }\n\n        $this->sponsors = Timber::get_posts($this->meta('sponsors'));\n\n        return $this->sponsors;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Time Ago Filter in Twig\nDESCRIPTION: Shows how to display dates in a relative time format.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">Posted: <time>{{post.post_date_gmt|time_ago}}</time></p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">Posted: <time>3 days ago</time></p>\n```\n\n----------------------------------------\n\nTITLE: Pagination with pre_get_posts Hook in Timber\nDESCRIPTION: Using pre_get_posts hook to modify the main query for pagination, useful for avoiding 404 errors on paginated pages. Shows how to filter post types in the main query.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/pagination.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction my_home_query( $query ) {\n  if ( $query->is_main_query() && !is_admin() ) {\n\t$query->set( 'post_type', array( 'movie', 'post' ));\n  }\n}\nadd_action( 'pre_get_posts', 'my_home_query' );\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = Timber::context();\n$context['posts'] = new Timber\\PostQuery();\nTimber::render('archive.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Timber Context for Password Protected Template in PHP\nDESCRIPTION: This PHP code sets up the Timber context for a password-protected post template. It includes the post data and the password form, then renders a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context([\n    'post' => Timber::get_post(),\n    'password_form' => get_the_password_form(),\n]);\n\nTimber::render('password-protected.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: Displaying Welcome Message in Twig Template\nDESCRIPTION: This Twig snippet renders a welcome message passed from PHP. It demonstrates how to use variables in a Twig template with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/index.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"intro\">{{ welcome_message }}</p>\n```\n\n----------------------------------------\n\nTITLE: Extending a base template in Twig\nDESCRIPTION: Single post Twig template that extends the base template. It overrides the 'head' and 'content' blocks to provide template-specific content while inheriting the overall structure.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"base.twig\" %}\n\n{% block head %}\n    <meta property=\"og:title\" value=\"{{ post.title }}\" />\n{% endblock %}\n\n{% block content %}\n    <div class=\"main\">\n        <h1>{{ post.title }}</h1>\n        <p>{{ post.content }}</p>\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Documenting Methods with DocBlocks in Timber\nDESCRIPTION: Example showing the proper format for documenting a function with DocBlocks including an @example tag with a code sample. This follows WordPress documentation standards with minor Timber-specific adjustments.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Function summary.\n *\n * Function description.\n *\n * @api\n * @example\n *\n * Optional text to describe the example.\n *\n * ```php\n * my_method( 'example', false );\n * ```\n *\n * @param string $param1 Description. Default 'value'.\n * @param bool   $param2 Optional. Description. Default true.\n */\nfunction my_method( $param1, $param2 = true ) {}\n```\n\n----------------------------------------\n\nTITLE: Using list filter in Twig\nDESCRIPTION: Demonstrates the 'list' filter which converts an array of strings into a comma-separated list. This is useful for displaying arrays in a human-readable format.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$context['contributors'] = [\n    'Blake Allen',\n    'Rachel White',\n    'Maddy May',\n];\n```\n\nLANGUAGE: twig\nCODE:\n```\nContributions made by {{ contributors|list(',', '&') }}\n```\n\nLANGUAGE: html\nCODE:\n```\nContributions made by Blake Allen, Rachel White & Maddy May\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig File Caching\nDESCRIPTION: Shows how to enable Twig's internal compilation caching using the 'timber/twig/environment/options' filter. This caches the compiled PHP structure but not the variable content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/environment/options', function ($options) {\n    $options['cache'] = true;\n\n    return $options;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Upstatement/routes Dependency in Composer\nDESCRIPTION: Example of how to add the Routes package to composer.json configuration file after Routes feature deprecation in Timber 1.0\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"timber/timber\":\"1.*\",\n    \"advanced-custom-fields/advanced-custom-fields-pro\": \"*\",\n    \"Upstatement/routes\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Function Wrapper Implementation\nDESCRIPTION: Shows how to use FunctionWrapper class to handle functions that need to be called at specific template locations.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/functions.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$context['my_custom_function'] = new FunctionWrapper('my_custom_function', $array_of_arguments);\n```\n\n----------------------------------------\n\nTITLE: Displaying Related Posts in Single Post Template\nDESCRIPTION: Twig template section for displaying related posts on a single post page. Checks if related posts exist and loops through them to display teasers using the reusable teaser.twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/a-post-archive.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if related_posts is not empty %}\n    <ul>\n        {% for post in related_posts %}\n            <li>{{ include('teaser.twig') }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using esc_html Escaper in Twig\nDESCRIPTION: This example illustrates the use of the esc_html escaper in a Twig template. It converts potentially conflicting HTML entities to their encoded equivalents.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/escapers.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"equation\">{{ post.get_field('equation')|e('esc_html') }}</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Post Data in Twig Template\nDESCRIPTION: Demonstrates how to access a custom 'issue' property of a post in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ post.title }}</h1>\n<h3>From the {{ post.issue.title }} issue</h3>\n```\n\n----------------------------------------\n\nTITLE: Checking Timber Version in PHP\nDESCRIPTION: Demonstrates how to check the installed Timber version using the static $version property.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (version_compare(Timber::$version, '2.0.0', '>=')) {\n    // Timber 2.x is installed.\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Hooks in Timber\nDESCRIPTION: Complete example showing the format for documenting hooks in Timber. It includes all required elements such as filter summary, description, parameters, examples, and various optional tags.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Filters … / Fires … (Summary)\n *\n * Description.\n *\n * `$var` Optional description of variables that might be used in the filter name.\n *\n * @see \\Timber\\Classname::function()\n * @link https://github.com/timber/timber/pull/1254\n * @since x.x.x\n * @deprecated x.x.x\n * @example\n * Optional text to describe the example.\n *\n * ```php\n * // A PHP example\n *\n * /**\n *  * Multiline comments are possible as well.\n *  * You'll need to escape the closing tag with a \"\\\".\n *  *\\/\n * ```\n *\n * ```twig\n * {# A Twig example #}\n * ```\n *\n * @param type  $var Description. Default 'value'.\n * @param array $args {\n *     Short description about this hash.\n *\n *     @type type $var Optional. Description. Default value.\n *     @type type $var Optional. Description. Default value.\n * }\n * @param type  $var Optional. Description. Default value.\n */\n```\n\n----------------------------------------\n\nTITLE: Debugging Post Collections in PHP\nDESCRIPTION: Demonstrates how Post Collections are lazily instantiated and how to force eager instantiation using the realize() method. Also shows a workaround for a PHP bug affecting var_dump() output.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$posts = Timber::get_posts(); // -> PostQuery containing only raw WP_Post instances\n\n$first = $posts[0]; // -> Timber\\Post (or subclass) instance ON DEMAND!\n\nforeach ($posts as $post) {\n    // $post is a Timber\\Post instance, again created ON DEMAND.\n}\n\n$posts = Timber::get_posts()->realize();\n// -> PostQuery containing realized (eagerly instantiated) Timber\\Post instances\n\n$posts = Timber::get_posts();\n\n/**\n * Before PHP 7.4, will dump a bunch of PostQuery internals,\n * but no Timber\\Post instances!\n */\nvar_dump($posts);\n\n// Do this instead:\nvar_dump($posts->realize());\n```\n\n----------------------------------------\n\nTITLE: Conditional User Class Assignment in Timber (PHP)\nDESCRIPTION: This example shows how to conditionally assign a User class based on the current template. It uses WordPress Conditional Tags to check if it's a single post template and assigns an Author class in that case.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/user/class', function ($class, \\WP_User $user) {\n    // Use Author class for single post template.\n    if (is_singular('post')) {\n        return Author::class;\n    }\n\n    return $class;\n}, 10, 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Non-Stable Releases\nDESCRIPTION: This JSON snippet shows how to configure composer.json to allow installation of development versions while preferring stable releases when possible.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/manage-timber-with-composer.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MenuItem Class Map Based on Menu Locations\nDESCRIPTION: This code shows how to register custom menu item classes for specific menu locations using the timber/menuitem/classmap filter. It maps 'primary' and 'secondary' menu locations to different menu item classes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/menuitem/classmap', function ($classmap) {\n    $custom_classmap = [\n        'primary' => MenuItemFooter::class,\n        'secondary' => MenuItemHeader::class,\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Filter in Twig\nDESCRIPTION: Demonstrates text truncation to a specific number of words.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/filters.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">{{ post.character.origin_story | truncate(8) }} ...</p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">Bruce Wayne's parents were shot outside the opera ...</p>\n```\n\n----------------------------------------\n\nTITLE: Using esc_url Escaper in Twig\nDESCRIPTION: This snippet shows how to use the esc_url escaper in a Twig template. It sanitizes URLs using WordPress' internal esc_url function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/escapers.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ post.get_field('custom_link')|e('esc_url') }}\"></a>\n```\n\n----------------------------------------\n\nTITLE: Formatting Bylines with Author Name and Post Date in Twig\nDESCRIPTION: This snippet demonstrates how to create a byline using Timber and Twig, displaying the author's name and the post date in a specific format.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-text.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"byline\">\n    <span class=\"name\">By {{ post.author.name }}</span>\n    <span class=\"date\">{{ post.post_date|date('F j, Y') }}</span>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Image Size in WordPress for Timber\nDESCRIPTION: This PHP code adds a custom image size to WordPress, which can be used as an alternative to Timber's on-the-fly image resizing. It defines a size named 'my_custom_size' with dimensions 220x220 pixels.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/hosts-servers.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_image_size( 'my_custom_size', 220, 220, array( 'left', 'top' ) );\n```\n\n----------------------------------------\n\nTITLE: Date Comparison in Twig Templates\nDESCRIPTION: Example of comparing dates in Twig templates using the date() function\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{% if date(post.meta('show_until')) >= date('now') %}\n    {# do something #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing Timber via Composer\nDESCRIPTION: Command to install Timber using Composer. This is the recommended installation method, especially for Timber 2.0 which only supports Composer installation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/setup.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require timber/timber:^1.0\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Action Calls in Timber 2.0\nDESCRIPTION: Demonstrates the change in how actions are called in Twig templates and handled in PHP functions when upgrading to Timber 2.0. The context argument is no longer automatically passed.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n{% do action('my_action', 'foo') %}\n```\n\nLANGUAGE: php\nCODE:\n```\nadd_action('my_action_with_args', 'my_function_with_args', 10, 3);\n\nfunction my_function_with_args($foo, $post, $context)\n{\n    echo 'I say ' . $foo . '!';\n    echo 'For the post with title ' . $context['post']->title();\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do action('my_action', 'foo', post) %}\n```\n\nLANGUAGE: php\nCODE:\n```\nadd_action('my_action_with_args', 'my_function_with_args', 10, 2);\n\nfunction my_function_with_args($foo, $post)\n{\n    echo 'I say ' . $foo . '!';\n    echo 'For the post with title ' . $post->title();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Timber::get_terms() Function Signature in PHP\nDESCRIPTION: The function signature for Timber::get_terms() has been updated. It now accepts two parameters: $args and an optional $options array. The $TermClass parameter has been removed.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction get_terms($args = null, array $options = [])\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Timber Filesystem Writes for WordPress VIP in PHP\nDESCRIPTION: This code snippet prevents Timber from writing to the filesystem, which is necessary for WordPress VIP compatibility. It returns false for the 'timber/allow_fs_write' filter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/hosts-servers.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'timber/allow_fs_write', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Configuring Term Class Map with Custom Taxonomy Classes\nDESCRIPTION: This code demonstrates how to register a custom class for a specific taxonomy using the timber/term/classmap filter. It maps the 'genre' taxonomy to a Genre class.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Genre;\n\nadd_filter('timber/term/classmap', function ($classmap) {\n    $custom_classmap = [\n        'genre' => Genre::class,\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Price Field Access in Twig\nDESCRIPTION: Shows how to access the custom price formatting method in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-fields.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.price }}\n```\n\n----------------------------------------\n\nTITLE: Displaying placeholder variables in copyright text with Twig\nDESCRIPTION: Example of user-defined content with placeholders to be rendered dynamically. Shows the raw Twig template with variables that will later be processed.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-twig.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nCopyright {{year}} by Upstatement, LLC. All Rights Reserved\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Product Teaser Template (Twig)\nDESCRIPTION: This Twig template is used for rendering product teasers in loops. It includes product thumbnail, title, and WooCommerce actions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<article {{ fn('post_class', ['$classes', 'entry'] ) }}>\n\n    {{ fn('timber_set_product', post) }}\n\n    <div class=\"media\">\n\n        {% if showthumb %}\n            <div class=\"media-figure {% if not post.thumbnail %}placeholder{% endif %}\">\n                <a href=\"{{ post.link }}\">\n                    {% if post.thumbnail %}\n                        <img src=\"{{ post.thumbnail.src|resize(post_thumb_size[0], post_thumb_size[1]) }}\" />\n                    {% else %}\n                        <span class=\"thumb-placeholder\"><i class=\"icon-camera\"></i></span>\n                    {% endif %}\n                </a>\n            </div>\n        {% endif %}\n\n        <div class=\"media-content\">\n\n            {% do action('woocommerce_before_shop_loop_item_title') %}\n\n            {% if post.title %}\n                <h3 class=\"entry-title\"><a href=\"{{ post.link }}\">{{ post.title }}</a></h3>\n            {% else %}\n                <h3 class=\"entry-title\"><a href=\"{{ post.link }}\">{{ fn('the_title') }}</a></h3>\n            {% endif %}\n\n            {% do action( 'woocommerce_after_shop_loop_item_title' ) %}\n            {% do action( 'woocommerce_after_shop_loop_item' ) %}\n\n        </div>\n\n    </div>\n\n</article>\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Methods in PHP\nDESCRIPTION: Various methods for comparing dates using timestamps, DateTimeInterface objects, and formatted date strings\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$same = $timestamp === $timestamp;\n$same = new DateTimeImmutable() === new DateTimeImmutable();\n$same = wp_date('U') === time();\n\n// Check if post publishing date is before today.\n$before_today = $post->date('Ymd') < wp_date('Ymd');\n$before_today = $post->date('U') < current_datetime()->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Creating Timber project with Composer\nDESCRIPTION: Composer command to create a new Timber project and download dependencies. This is used when installing Timber via Composer for developers.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer create-project --no-dev timber/timber ./timber\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timber Menu Objects in PHP\nDESCRIPTION: The method for retrieving Timber menu objects has changed. Instead of using the constructor, you should now use the Timber::get_menu() function.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$menu = Timber::get_menu('primary');\n```\n\n----------------------------------------\n\nTITLE: Filtering Excerpt Defaults in PHP\nDESCRIPTION: Example of using the new 'timber/post/excerpt/defaults' filter to modify default options for post excerpts, including controlling read more link behavior and setting character limits.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/post/excerpt/defaults', function ($defaults) {\n    // Only add a read more link if the post content isn't longer than the excerpt.\n    $defaults['always_add_read_more'] = false;\n\n    // Set a default character limit.\n    $defaults['words'] = 240;\n\n    return $defaults;\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Coding Standards Issues Automatically\nDESCRIPTION: Command to automatically apply coding standards fixes to the codebase. This uses EasyCodingStandard to fix formatting and style issues.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer cs:fix\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Meta Values\nDESCRIPTION: Shows how to access unfiltered meta values directly from the database using raw_meta() method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/custom-fields.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.raw_meta('my_custom_field') }}\n```\n\nLANGUAGE: php\nCODE:\n```\n$my_custom_field = $post->raw_meta( 'my_custom_field' );\n```\n\n----------------------------------------\n\nTITLE: Removing Default WooCommerce Product Thumbnail\nDESCRIPTION: This PHP snippet removes the default WooCommerce product thumbnail action, allowing for custom image handling in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/woocommerce.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nremove_action('woocommerce_before_shop_loop_item_title', 'woocommerce_template_loop_product_thumbnail');\n```\n\n----------------------------------------\n\nTITLE: Using sprintf Notation in WordPress PHP\nDESCRIPTION: Example of using printf() with __() for placeholders in a WordPress PHP template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/internationalization.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">\n    <?php printf( __('Posted on %s', 'my-text-domain'), $posted_on_date ) ?>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment Class Selection Based on Parent Post Type\nDESCRIPTION: This snippet shows how to select a custom attachment class based on the parent post type. It uses a callback function to determine if the attachment belongs to a 'book' post type and returns the appropriate class.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/class-maps.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse BookAttachment;\nuse Timber\\Attachment;\n\nadd_filter('timber/post/classmap', function ($classmap) {\n    $custom_classmap = [\n        'attachment' => function (\\WP_Post $post) {\n            if ('book' === get_post_type($post->post_parent)) {\n                return BookAttachment::class;\n            }\n\n            return Attachment::class;\n        },\n    ];\n\n    return array_merge($classmap, $custom_classmap);\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging Available Twig Filters in Timber\nDESCRIPTION: Code to inspect what filters are already registered in Timber by using var_dump() on the filters array.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/filters', function ($filters) {\n    var_dump($filters);\n\n    return $filters;\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Feature Documentation\nDESCRIPTION: Changelog entry documenting new AVIF image format support feature\nSOURCE: https://github.com/timber/timber/blob/2.x/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Add support for avif image format [#3015](https://github.com/timber/timber/issues/3015) ([#3019](https://github.com/timber/timber/issues/3019)) ([92716c1](https://github.com/timber/timber/commit/92716c1b2a9ecee090df9bebfcfcf5acf3192fc5))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image Size in Timber Twig Template\nDESCRIPTION: This Twig code demonstrates how to use the custom image size defined in WordPress within a Timber template. It outputs an img tag with the src attribute set to the custom size of the post thumbnail.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/hosts-servers.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src('my_custom_size') }}\" alt=\"{{ post.thumbnail.alt() }}\">\n```\n\n----------------------------------------\n\nTITLE: Specifying Timber Version in composer.json\nDESCRIPTION: This JSON snippet shows how to specify the Timber version constraint in the composer.json file. It requires Timber version 2.0 or higher, but less than 3.0.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/manage-timber-with-composer.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"require\": {\n    \"timber/timber\": \"^2.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Routes Implementation Before Timber 1.0\nDESCRIPTION: Example of how routes were implemented before Timber 1.0 using Timber::add_route method\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/1.0.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTimber::add_route('myfoo/bar', 'my_callback_function');\nTimber::add_route('my-events/:event', function ($params) {\n    $query = new WP_Query('post_type=event');\n    Timber::load_view('single.php', $query, 200, $params);\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating PHP Sidebar in Main Template\nDESCRIPTION: Shows how to include the PHP sidebar in a main template file using Timber's get_sidebar method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/sidebars.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$context = Timber::context([\n    'sidebar' => Timber::get_sidebar('sidebar.php'),\n]);\n\nTimber::render('single.twig', $context);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Escaping in Twig\nDESCRIPTION: This example shows how to use the esc_js escaper in Twig for inline JavaScript. It's important for safely including dynamic data in JavaScript strings.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/escaping.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<script>var bar = '{{ post.meta('name')|esc_js }}';</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Timber Caching for WordPress VIP in PHP\nDESCRIPTION: This code snippet disables Timber's caching functionality to ensure compatibility with WordPress VIP's caching mechanisms. It sets the Timber cache mode to 'none'.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/hosts-servers.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/cache/mode', function() {\n\treturn 'none';\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Tests for Timber\nDESCRIPTION: Bash commands to SSH into Vagrant, navigate to Timber directory, and install WordPress tests.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant ssh\n$ cd /srv/www/timber\n$ bin/install-wp-tests.sh wordpress_tests root root\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Location for Timber (PHP)\nDESCRIPTION: Uses a filter to set a custom location for Timber's cached Twig files.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/cache/location', function () {\n    return '/absolute/path/to/your/cached/twig/files';\n});\n```\n\n----------------------------------------\n\nTITLE: Example composer.json entry for Timber in JSON\nDESCRIPTION: This JSON snippet shows how Timber would be listed as a requirement in the composer.json file after installation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/intro-to-composer.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  require: {\n    \"timber/timber\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WooCommerce Support in WordPress Theme (PHP)\nDESCRIPTION: This snippet demonstrates how to add WooCommerce support to a WordPress theme by declaring it in the theme's functions.php file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/woocommerce.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction theme_add_woocommerce_support() {\n    add_theme_support( 'woocommerce' );\n}\n\nadd_action( 'after_setup_theme', 'theme_add_woocommerce_support' );\n```\n\n----------------------------------------\n\nTITLE: Creating Block Directory Structure in WordPress Theme\nDESCRIPTION: Demonstrates the recommended directory structure for organizing custom blocks within a WordPress theme.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/gutenberg.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n|\n--...\n|-- wp-content\n|   |-- themes\n|       |-- your-theme                  # Your theme directory\n|           |-- blocks                  # Your blocks directory\n|               |-- my-block            # Your block\n|                   |-- block.json      # Your block settings\n|                   |-- my-block.css    # Styles for your block\n|                   |-- my-block.twig   # Your block template\n```\n\n----------------------------------------\n\nTITLE: Basic Twig template structure\nDESCRIPTION: A simple Twig template that displays a welcome section with a headline from the context array and a static paragraph.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<section class=\"welcome-block\">\n    <div class=\"inner\">\n        <h3>{{ headline }}</h3>\n        <p>This will be a superb blog, I will inform you every day</p>\n    </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Converting Image Formats with Twig Filters\nDESCRIPTION: Shows how to convert image formats using Timber's tojpg and towebp filters in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-images.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|tojpg }}\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ post.thumbnail.src|tojpg|resize(300, 300) }}\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n<picture>\n   <source srcset=\"{{ post.thumbnail.src|towebp }}\" type=\"image/webp\">\n   <source srcset=\"{{ post.thumbnail.src|tojpg }}\" type=\"image/jpeg\">\n   <img src=\"{{ post.thumbnail.src|tojpg }}\" alt=\"{{ post.title }}\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Custom Date Format Filter Implementation\nDESCRIPTION: Implementation of a WordPress filter for customizing date formats globally\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('theme/event/date_formats', function ($formats) {\n    $formats['same_month_end'] = 'j M Y';\n\n    return $formats;\n});\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests with Composer\nDESCRIPTION: Commands to execute the PHPUnit test suite. Provides options for running tests with or without coverage reporting using Composer scripts.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test:no-cov\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Nested Fields in Repeaters (Good Example)\nDESCRIPTION: Demonstrates the correct approach to accessing nested fields in repeaters, calling meta() only once on the parent field.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% for gear in post.meta('gear_items') %}\n    <h3> {{ gear.brand_name }} </h3>\n    {% for gear_feature in gear.features %}\n        <li> {{ gear_feature }} </li>\n    {% endfor %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Cloning Timber Repository\nDESCRIPTION: Commands to navigate to the VVV www directory and clone the Timber repository from GitHub\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/vagrant-local/www/\n$ git clone git@github.com:timber/timber.git\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies for Timber Development\nDESCRIPTION: Command to install all required Composer dependencies after forking the Timber repository. This is a necessary first step before working on Timber development.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig Cache for Debugging in functions.php\nDESCRIPTION: This snippet enables the Twig cache in Timber, which is required for setting breakpoints in Twig files when using PhpStorm. The cache allows the IDE to map template files to their compiled PHP versions.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nTimber::$twig_cache = true;\n```\n\n----------------------------------------\n\nTITLE: Updated Routes Syntax for Timber 1.0\nDESCRIPTION: The new way to define routes in Timber 1.0 using the Routes class from the Upstatement/routes package. Note the different parameter order in Routes::load compared to the old Timber::load_view method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/upgrade-guides/1.0.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRoutes::map('myfoo/bar', 'my_callback_function');\nRoutes::map('my-events/:event', function($params) {\n    $query = new WP_Query('post_type=event');\n    /* please note the different order of arguments vs. Timber::load_template */\n    Routes::load('single.php', $params, $query, 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Timber repository from GitHub\nDESCRIPTION: Git command to clone the Timber repository from GitHub. This is used when installing Timber via GitHub for developers.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:timber/timber.git\n```\n\n----------------------------------------\n\nTITLE: Updated WP-CLI Commands for Timber v2\nDESCRIPTION: Shows the new WP-CLI command syntax for Timber v2, which uses hyphenated command names instead of underscores for clearing caches.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nwp timber clear-cache\nwp timber clear-cache timber\nwp timber clear-cache twig\n```\n\n----------------------------------------\n\nTITLE: Displaying ACF Gallery Field in Twig\nDESCRIPTION: Shows how to iterate through images in an ACF gallery field and display them in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for image in post.meta('gallery') %}\n    <img src=\"{{ Image(image) }}\" />\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using sprintf Notation in Timber Twig Templates\nDESCRIPTION: Equivalent example of using the format filter with __() for placeholders in a Timber Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/internationalization.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">\n    {# Translators: The placeholder will be replaced with the localized post date #}\n    {{ __('Posted on %s', 'my-text-domain')|format(posted_on_date) }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using print_r Filter in Twig Templates\nDESCRIPTION: This snippet demonstrates the legacy print_r filter in Timber, which passes a variable to PHP's print_r function to display its content. This will be deprecated in favor of Twig's native functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ post|print_r }}\n```\n\n----------------------------------------\n\nTITLE: Installing Composer globally in Bash\nDESCRIPTION: This command moves the Composer PHAR file to make it globally accessible as a command in the terminal.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/intro-to-composer.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv composer.phar /usr/local/bin/composer\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint in Twig Template\nDESCRIPTION: Uses the breakpoint() function to set a breakpoint in a Twig template when using the AjglBreakpointTwigExtension.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<nav>\n    {{ breakpoint() }}\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Fixing Composer Memory Issues\nDESCRIPTION: Shell commands to create and enable a swap file to resolve memory-related issues with Composer\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024\nsudo /sbin/mkswap /var/swap.1\nsudo /sbin/swapon /var/swap.1\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Cache Extension\nDESCRIPTION: Shows the Composer command to install the Twig cache extension package, which is required for using the cache tag in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/cache-extra\n```\n\n----------------------------------------\n\nTITLE: Using get_class Filter in Twig Templates\nDESCRIPTION: This code shows how to use the legacy get_class filter in Timber, which passes a variable to PHP's get_class function to identify the object type. This helps determine what kind of object you're working with.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/debugging.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ post|get_class }}\n```\n\n----------------------------------------\n\nTITLE: Simplified Sponsor Display in Twig\nDESCRIPTION: Shows the simplified sponsor display using the custom Event class method\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.sponsors %}\n    <h2>Many thanks to our generous sponsors</h2>\n\n    <ul>\n        {% for post in post.sponsors %}\n            <li>{{ sponsor.title }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Displaying WYSIWYG Field Content in Twig\nDESCRIPTION: Demonstrates how to retrieve and display content from a WYSIWYG field in a Twig template. The meta() method applies paragraph breaks and other pre-processing to the text.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ post.title }}</h3>\n<div class=\"intro-text\">\n     {{ post.meta('my_wysiwyg_field') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dump and Die in PHP using Timber Dump Extension\nDESCRIPTION: Uses the dd() function provided by Timber Dump Extension to dump variables and stop code execution in PHP.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndd($post);\n```\n\n----------------------------------------\n\nTITLE: Adding Upstatement/routes to Composer Dependencies\nDESCRIPTION: JSON configuration showing how to add the Upstatement/routes package to a composer.json file alongside Timber 1.0. This is needed because Routes functionality has been moved to a separate package.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/upgrade-guides/1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"timber/timber\":\"1.*\",\n    \"advanced-custom-fields/advanced-custom-fields-pro\": \"*\",\n    \"Upstatement/routes\": \"*\"\n},\n```\n\n----------------------------------------\n\nTITLE: Using Post::terms() Method in PHP - Before and After\nDESCRIPTION: Demonstrates how to use the Post::terms() method in PHP, showing both the deprecated approach and the recommended new approach with the updated parameter structure.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// 🚫 Before\n$terms = $post->terms('category');\n\n// ✅ Now\n$terms = $post->terms([\n    'taxonomy' => 'category',\n]);\n```\n\n----------------------------------------\n\nTITLE: Traditional PHP file inclusion example\nDESCRIPTION: This PHP code demonstrates the traditional way of including multiple PHP files manually, which Composer's autoloading replaces.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/intro-to-composer.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once 'functionality-a.php';\nrequire_once 'class-b.php';\nrequire_once 'class-c.php';\n```\n\n----------------------------------------\n\nTITLE: Accessing Vagrant SSH\nDESCRIPTION: Command to SSH into the Vagrant virtual environment\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant ssh\n```\n\n----------------------------------------\n\nTITLE: ACF Field Value Transformation Usage\nDESCRIPTION: Shows how to transform ACF field values using the transform_value parameter.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/integrations/advanced-custom-fields.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.meta('my_acf_field', { transform_value: true }) }}\n```\n\nLANGUAGE: php\nCODE:\n```\n$meta = $post->meta('my_meta_field', ['transform_value' => true]);\n```\n\n----------------------------------------\n\nTITLE: Fixing Coding Standards in Documentation\nDESCRIPTION: Command to automatically apply coding standards fixes to the Markdown documentation. This ensures code examples follow the project's coding standards.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncs:docs:fix\n```\n\n----------------------------------------\n\nTITLE: Rendered output for copyright text\nDESCRIPTION: The final rendered output of the Twig template after variable replacement, showing how {{year}} is replaced with the actual year value.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-twig.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nCopyright 2013 by Upstatement, LLC. All Rights Reserved\n```\n\n----------------------------------------\n\nTITLE: Autoloading with Composer in PHP\nDESCRIPTION: This PHP code shows how to include Composer's autoload file, typically at the top of a WordPress theme's functions.php, enabling autoloading for all Composer-managed packages.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/intro-to-composer.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__ . '/vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Block Assets\nDESCRIPTION: PHP function to enqueue block-specific CSS for both editor and frontend display.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/gutenberg.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction my_acf_block_editor_style() {\n    wp_enqueue_style(\n        'example_block_css',\n        get_template_directory_uri() . '/assets/example-block.css'\n    );\n}\n\nadd_action( 'enqueue_block_assets', 'my_acf_block_editor_style' );\n```\n\n----------------------------------------\n\nTITLE: Cloning Timber Repository in VVV Environment\nDESCRIPTION: Commands to navigate to the VVV www directory and clone the Timber repository from GitHub.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/vagrant-local/www/\n$ git clone git@github.com:timber/timber.git\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New Routes Syntax in Timber\nDESCRIPTION: Example of outdated Timber::add_route method compared to the new Routes::map method. Shows the difference in argument order between Timber::load_view and Routes::load.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/upgrade-guides/1.0.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nTimber::add_route('myfoo/bar', 'my_callback_function');\nTimber::add_route('my-events/:event', function($params) {\n    $query = new WP_Query('post_type=event');\n    Timber::load_view('single.php', $query, 200, $params);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Timber Development Versions with Composer\nDESCRIPTION: These commands show how to install different development versions of Timber, including the master branch, beta versions, and specific commits.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/manage-timber-with-composer.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install the master branch.\ncomposer require timber/timber:dev-master\n\n# Install the beta version of 2.x.\ncomposer require timber/timber:2.x-beta1\n\n# Install the latest work on the 2.x branch.\ncomposer require timber/timber:dev-2.x\n\n# Install a specific commit\ncomposer require timber/timber:dev-master#2cfc7a2eb6c6db743518f8d9d77f2c6259b5d277\n```\n\n----------------------------------------\n\nTITLE: Timber Permalink Title Display\nDESCRIPTION: Simplified Twig syntax for displaying linked post titles using Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<h1 class=\"article-h1\"><a href=\"{{ post.link }}\">{{ post.title }}</a></h1>\n```\n\n----------------------------------------\n\nTITLE: Documenting Unfinished Filters with Todo Tags\nDESCRIPTION: Example showing how to document a filter when the description is not complete. The @todo tag indicates what needs to be added or improved in the documentation.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Filters …\n *\n * @todo Add summary, add description.\n *\n * @param bool $force Param description.\n */\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Version release entry documenting changes for Timber version 2.3.1\nSOURCE: https://github.com/timber/timber/blob/2.x/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.1](https://github.com/timber/timber/compare/v2.3.0...v2.3.1) (2024-12-18)\n\n### Bug Fixes\n\n* fix avatar test ([#3071](https://github.com/timber/timber/issues/3071)) ([0e65e54](https://github.com/timber/timber/commit/0e65e54897fead31d3ba5eb3065242e294dcf51b))\n* Fix bug with Attachment::path() method ([#3073](https://github.com/timber/timber/issues/3073)) ([5434dde](https://github.com/timber/timber/commit/5434dde5889f174bf1d36c0686b94b180d93fa5d))\n```\n\n----------------------------------------\n\nTITLE: ACF Block Twig Template\nDESCRIPTION: Twig template for rendering the ACF block. Includes conditional preview rendering, block content structure, and inline styling.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/gutenberg.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{#\n/**\n * Block Name: Example block\n *\n * This is the template that displays the example block.\n */\n#}\n\n{% if is_preview %}\n    <p>I will only appear in the editor.</p>\n{% endif %}\n\n<div id=\"example-{{ block.id }}\" class=\"wrapper\">\n    <h1>{{ fields.title }}</h1>\n    <p>{{ fields.description }}</p>\n</div>\n<style type=\"text/css\">\n    #testimonial-{{ block.id }} {\n        background: {{ fields.background_color }};\n        color: {{ fields.text_color }};\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Basic Date Display in Twig\nDESCRIPTION: Demonstrates basic date formatting using Twig's date filter with a meta field\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.meta('date_start')|date('F j Y') }}\n```\n\n----------------------------------------\n\nTITLE: Comparing Timber::get_posts() with WordPress get_posts() in PHP\nDESCRIPTION: Illustrates the differences between Timber::get_posts() and WordPress core's get_posts() function, showing how to achieve similar behavior with Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/posts.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$posts = Timber::get_posts([\n    'ignore_sticky_posts' => true,\n    'suppress_filters' => true,\n    'no_found_rows' => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Time Difference Output Example\nDESCRIPTION: Example HTML output of time difference calculation\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n3 days ago\n```\n\n----------------------------------------\n\nTITLE: Using Updated post.excerpt Function in PHP and Twig\nDESCRIPTION: Examples of using the new post.excerpt function with array/hash notation for parameters in both PHP and Twig, replacing the old post.preview chaining method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$post->excerpt([\n    'words' => 50,\n    'chars' => false,\n    'end' => '&hellip;',\n    'force' => false,\n    'strip' => true,\n    'read_more' => 'Read More',\n]);\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.excerpt({\n    words: 50,\n    chars: false,\n    end: \"&hellip;\",\n    force: false,\n    strip: true,\n    read_more: \"Read More\"\n}) }}\n```\n\n----------------------------------------\n\nTITLE: ACF Group Fields Template\nDESCRIPTION: Twig template example showing how to access ACF group fields in a block.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/gutenberg.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\nTitle: {{ fields.group.title }} <br/>\nUrl: {{ fields.group.url }}\n```\n\n----------------------------------------\n\nTITLE: Loading Composer's Autoload in WordPress Theme\nDESCRIPTION: PHP code to load Composer's autoload file in a WordPress theme's functions.php, which is required to use packages installed via Composer, including the Upstatement/routes package.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/upgrade-guides/1.0.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* functions.php */\nrequire_once('vendor/autoload.php');\n```\n\n----------------------------------------\n\nTITLE: Accessing ACF Group Field in Twig\nDESCRIPTION: Demonstrates two approaches to access nested fields within an ACF group field in Twig templates.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.meta('group').first_field }}\n{{ post.meta('group').second_field }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set group = post.meta('group') %}\n{{ group.first_field }}\n{{ group.second_field }}\n```\n\n----------------------------------------\n\nTITLE: Installing Timber dependencies with Composer\nDESCRIPTION: Commands to navigate to the Timber directory and install its dependencies using Composer. This is part of the GitHub installation method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd timber\n$ composer install\n```\n\n----------------------------------------\n\nTITLE: Using Timber::get_post() for Post Retrieval\nDESCRIPTION: Examples of retrieving posts using the new Timber::get_post() method, which replaces direct Post class instantiation.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Figure out post to get from current query.\n$post = Timber::get_post();\n\n// Pass in a post ID to get a particular post.\n$post = Timber::get_post(56);\n```\n\n----------------------------------------\n\nTITLE: Installing Timber 1.x via Composer in Shell\nDESCRIPTION: Command to install the latest 1.x version of Timber using Composer in the terminal. This should be run in the active theme folder of the WordPress site.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/switch-to-composer.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require timber/timber:^1.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Menu Item in Twig\nDESCRIPTION: Example of checking for and displaying the current menu item and its children in a Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if item.current and item.children %}\n    <ul class=\"nav-child\">\n        {% for child in item.children %}\n            <li class=\"nav-child-item\">\n                <a\n                    class=\"nav-child-link\"\n                    href=\"{{ child.link }}\"\n                >{{ child.title }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Traditional WordPress Title Display\nDESCRIPTION: Example of traditional WordPress PHP approach to displaying post titles.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"article-h1\"><?php the_title(); ?></h1>\n```\n\n----------------------------------------\n\nTITLE: Updated Timber::get_post() Function Signatures\nDESCRIPTION: Comparison of old and new function signatures for get_post() showing parameter changes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction get_post($query = false, $PostClass = 'Timber\\Post')\n{\n};\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction get_post(mixed $query = false, array $options = [])\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Dynamic Filters in Timber\nDESCRIPTION: Example showing how to document a filter that contains a variable in its name. The variable is enclosed in curly braces and quoted, and further described in the documentation block.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Filters the status of a particularly named transient.\n *\n * Allows you to override the behavior on a case-by-case basis.\n * `$slug` The transient slug.\n *\n * @param bool $force Param description.\n */\n$force = apply_filters( \"timber/transient/force_transient_{$slug}\", $force );\n```\n\n----------------------------------------\n\nTITLE: Translating Text in WordPress PHP\nDESCRIPTION: Example of using the _e() function to translate and echo text in a WordPress PHP template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/internationalization.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">\n    <?php _e( 'Posted on', 'my-text-domain' ) ?> [...]\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using Post::terms() with Advanced Options in PHP - Before and After\nDESCRIPTION: Shows more complex usage of Post::terms() in PHP with multiple options, comparing the old nested array syntax with the new separated parameters approach.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// 🚫 Before\n$terms = $post->terms([\n    'query' => [\n        'taxonomy' => 'custom_tax',\n        'orderby' => 'count',\n    ],\n    'merge' => false,\n]);\n\n// ✅ Now\n$terms = $post->terms([\n    'taxonomy' => 'custom_tax',\n    'orderby' => 'count',\n], [\n    'merge' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking Coding Standards in Timber\nDESCRIPTION: Command to check if the code adheres to the defined coding standards using EasyCodingStandard. This helps maintain code quality and consistency.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer cs\n```\n\n----------------------------------------\n\nTITLE: Time Difference Display in Twig\nDESCRIPTION: Shows how to display time differences using the time_ago filter in Twig templates\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/date-time.md#2025-04-23_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.date('U')|time_ago }}\n```\n\n----------------------------------------\n\nTITLE: Debugging Available Twig Functions in Timber\nDESCRIPTION: Code to inspect what functions are already registered in Timber by using var_dump() on the functions array.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig/functions', function ($functions) {\n    var_dump($functions);\n\n    return $functions;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Post::terms() in Twig Templates - Before and After\nDESCRIPTION: Demonstrates how to use the Post::terms() method in Twig templates, showing both the deprecated approach and the new recommended syntax for basic and advanced usage.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_26\n\nLANGUAGE: twig\nCODE:\n```\n{# 🚫 Before #}\n{% for term in post.terms('category') %}\n\n{# ✅ Now #}\n{% for term in post.terms({ taxonomy: 'category' }) %}\n\n{# or #}\n\n{# ✅ Now #}\n{% for term in post.terms({\n    query: {\n        taxonomy: 'custom_tax',\n        orderby: 'count'\n    },\n    merge: false\n})}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Cache Extension with Composer\nDESCRIPTION: Provides the Composer command to install the twig/cache-extension package for backward compatibility.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/cache-extension\n```\n\n----------------------------------------\n\nTITLE: Updating Timber\\Post::get_info() Method Signature in PHP\nDESCRIPTION: The get_info() method in Timber\\Post class has been updated to accept an array of post data instead of a post ID, and now returns an updated array instead of a WP_Post object.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nprotected function get_info($post_id)\n{\n\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nprotected function get_info(array $data) : array\n{\n    // Access the original post through $this->wp_object.\n\n    return $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Blog Info in Twig Templates with Timber\nDESCRIPTION: This section shows how to access various blog information in Twig templates using Timber. It covers charset, description, site name, and URL.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/cheatsheet.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ site.charset }}\n{{ site.description }}\n{{ site.name }}\n{{ site.url }}\n```\n\n----------------------------------------\n\nTITLE: Installing Routing Library with Composer\nDESCRIPTION: Shows the Composer command to install the Upstatement/routes library as a replacement for removed routing functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require upstatement/routes\n```\n\n----------------------------------------\n\nTITLE: Legacy WP-CLI Commands for Timber v1\nDESCRIPTION: Displays the previous WP-CLI commands used in Timber v1 for clearing various caches that are now deprecated.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nwp timber clear_cache\nwp timber clear_cache_timber\nwp timber clear_cache_twig\n```\n\n----------------------------------------\n\nTITLE: Loading Composer Autoload in WordPress Theme\nDESCRIPTION: Code snippet showing how to include Composer's autoload file in WordPress theme's functions.php\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/1.0.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('vendor/autoload.php');\n```\n\n----------------------------------------\n\nTITLE: WordPress Theme Integration with Timber\nDESCRIPTION: Example of integrating Timber into an existing WordPress theme, showing the transition from traditional template parts to Timber rendering\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/template-inheritance-and-includes.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php get_header(); ?>\n\n<main id=\"site-content\" role=\"main\">\n\n    <?php\n        $template = sprintf('content-%s.twig', get_post_type());\n        $post = Timber::get_post();\n\n        $post->setup();\n\n        Timber::render($template, [\n            'post' => $post,\n        ]);\n    ?>\n\n</main>\n\n<?php get_template_part('template-parts/footer-menus-widgets'); ?>\n\n<?php get_footer(); ?>\n```\n\n----------------------------------------\n\nTITLE: Template Parameters Example in PHP\nDESCRIPTION: Demonstrates how to pass custom parameters to templates using Timber Routes. Includes both the route definition and template usage.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/routing.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* functions.php */\n\nRoutes::map('info/:name/page/:pg', function($params){\n    //make a custom query based on incoming path and run it...\n    $query = 'posts_per_page=3&post_type='.$params['name'].'&paged='.intval($params['pg']);\n\n    //load up a template which will use that query\n    $params = array();\n    $params['my_title'] = 'This is my custom title';\n    Routes::load('archive.php', $params, $query, 200);\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* archive.php */\n\nglobal $params;\n$context['wp_title'] = $params['my_title']; // \"This is my custom title\"\n/* the rest as normal... */\nTimber::render('archive.twig', $context)\n```\n\n----------------------------------------\n\nTITLE: Output of Custom Twig Filters\nDESCRIPTION: Displays the expected HTML output after applying the custom Twig filters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/extending-timber.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<h2 id=\"hello-world\">Hello World! or whatever</h2>\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Hooks in Timber\nDESCRIPTION: Example showing the correct way to use hooks in Timber with namespacing via forward slashes instead of underscores. It demonstrates both incorrect and correct approaches.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// 🚫\n$context = apply_filters( 'timber_context', $context );\n\n// ✅\n$context = apply_filters( 'timber/context', $context );\n```\n\n----------------------------------------\n\nTITLE: Setting Menu Item Target in Twig\nDESCRIPTION: Demonstrates how to set the target attribute for a menu item link using the item.target property. This will return '_blank' for new tab openings or '_self' for same tab openings.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/menus.md#2025-04-23_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ item.link }}\" target=\"{{ item.target }}\">\n```\n\n----------------------------------------\n\nTITLE: Timber Custom Query Example\nDESCRIPTION: Example of using WP_Query arguments with Timber::get_posts().\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$args = array(\n    'post_type' => 'post',\n    'tax_query' => array(\n        'relation' => 'AND',\n        array(\n            'taxonomy' => 'movie_genre',\n            'field' => 'slug',\n            'terms' => array( 'action', 'comedy' )\n        ),\n        array(\n            'taxonomy' => 'actor',\n            'field' => 'id',\n            'terms' => array( 103, 115, 206 ),\n            'operator' => 'NOT IN'\n        )\n    )\n);\n\n$context['posts'] = Timber::get_posts( $args );\n```\n\n----------------------------------------\n\nTITLE: Clearing Twig Template Cache\nDESCRIPTION: Shows how to programmatically clear the Twig template cache. This is useful when deploying changes to production or when templates are updated.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/performance.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$loader = new Timber\\Loader();\n$loader->clear_cache_twig();\n```\n\n----------------------------------------\n\nTITLE: Dynamic WordPress Sidebar Implementation\nDESCRIPTION: Implementation of WordPress dynamic sidebars (widgets) using Timber's get_widgets method.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/sidebars.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$context = [\n    'dynamic_sidebar' => Timber::get_widgets('dynamic_sidebar'),\n];\n\nTimber::render('sidebar.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n<aside class=\"my-sidebar\">\n    {{ dynamic_sidebar }}\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of meta() with Repeaters in Twig (Bad Example)\nDESCRIPTION: Shows an incorrect approach to accessing nested fields in repeaters where meta() is called multiple times, which should be avoided.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/acf-cookbook.md#2025-04-23_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% for gear in post.meta('gear_items') %}\n    <h3> {{ gear.brand_name }} </h3>\n    {% for gear_feature in gear.meta('features') %}\n        <li> {{ gear_feature }} </li>\n    {% endfor %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Enabling WordPress Trunk Provisioning in VVV Configuration\nDESCRIPTION: YAML configuration to enable provisioning of WordPress trunk in VVV custom configuration file.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  wordpress-trunk:\n    skip_provisioning: false # provisioning this one takes longer, so it's disabled by default\n```\n\n----------------------------------------\n\nTITLE: Using Updated Timber\\Term::posts() Method in PHP\nDESCRIPTION: Examples of how to use the new posts() method in PHP, demonstrating the transition from the old multi-parameter approach to the new single array parameter approach.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$genre->posts(-1, 'book');\n```\n\nLANGUAGE: php\nCODE:\n```\n$genre->posts([\n    'post_type' => 'book',\n    'post_per_page' => -1,\n    'orderby' => 'menu_order',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$genre->posts(3);\n```\n\nLANGUAGE: php\nCODE:\n```\n$genre->posts([\n    'posts_per_page' => 3,\n    'post_type' => 'any',\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Timber Only with Composer\nDESCRIPTION: This command updates only the Timber package to its latest version within the specified constraints.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/manage-timber-with-composer.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update timber/timber\n```\n\n----------------------------------------\n\nTITLE: Custom post type template in Twig\nDESCRIPTION: Twig template for displaying a custom post type (recipe). Demonstrates how to use post data, display a resized thumbnail, and handle post content.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<article id=\"post-{{ post.ID }}\" class=\"post-{{ post.ID }} {{ post.post_type }} type-{{ post.post_type }} status-publish hentry\">\n    {% if post.thumbnail %}\n        <img src=\"{{ post.thumbnail.src|resize(600, 300) }}\" />\n    {% endif %}\n\n    <h2>{{ post.title }}</h2>\n\n    <div class=\"post-body\">\n        {{ post.content }}\n    </div>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Updating All Packages with Composer\nDESCRIPTION: This command updates all packages, including Timber, to their latest versions within the specified constraints.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/installation/manage-timber-with-composer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Adding PSR-7 Request Object to Timber Context\nDESCRIPTION: Demonstrates how to add a PSR-7 request object to the Timber context using the Nyholm/psr7 library.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/context', function($context) {\n    $psr17Factory = new \\Nyholm\\Psr7\\Factory\\Psr17Factory();\n\n    $creator = new \\Nyholm\\Psr7Server\\ServerRequestCreator(\n        $psr17Factory, // ServerRequestFactory\n        $psr17Factory, // UriFactory\n        $psr17Factory, // UploadedFileFactory\n        $psr17Factory  // StreamFactory\n    );\n\n    $context['request'] = $creator->fromGlobals();\n\n    return $context;\n});\n```\n\n----------------------------------------\n\nTITLE: Using function() in Twig\nDESCRIPTION: Shows the correct way to use the 'function()' method to run WordPress functions within Twig templates. This is useful for integrating plugins or existing theme functionality.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# 🚫 Don't do this #}\n<div class=\"entry-meta\">{{ 'twenty_ten_entry_meta'|function }}</div>\n\n{# ✅ Do this instead #}\n<div class=\"entry-meta\">{{ function('twenty_ten_entry_meta') }}</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"entry-meta\">Posted on September 6, 2013</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Twig Breakpoint Extension to Timber (PHP)\nDESCRIPTION: Adds the AjglBreakpointTwigExtension to Timber's Twig environment for setting breakpoints in Twig files.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('timber/twig', function (\\Twig\\Environment $twig) {\n    if (defined('WP_DEBUG') && WP_DEBUG\n        && class_exists('Ajgl\\Twig\\Extension\\BreakpointExtension')\n    ) {\n        $twig->addExtension(new Ajgl\\Twig\\Extension\\BreakpointExtension());\n    }\n\n    return $twig;\n});\n```\n\n----------------------------------------\n\nTITLE: Using time_ago filter in Twig\nDESCRIPTION: Shows how to use the 'time_ago' filter to display dates in a human-readable format. This is useful for showing relative time since a post was published.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/twig-filters.md#2025-04-23_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"entry-meta\">Posted: <time>{{ post.post_date_gmt|time_ago }}</time></p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"entry-meta\">Posted: <time>3 days ago</time></p>\n```\n\n----------------------------------------\n\nTITLE: Using esc_js Escaper in Twig\nDESCRIPTION: This snippet demonstrates how to use the esc_js escaper in a Twig template. It escapes text strings for safe use in JavaScript, particularly for inline JS in tag attributes.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/escapers.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<script>var bar = '{{ post.get_field('name') }}';</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Coding Standards in Documentation\nDESCRIPTION: Command to check if the Markdown documentation adheres to the defined coding standards. This ensures consistent code examples in documentation.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer cs:docs\n```\n\n----------------------------------------\n\nTITLE: Timber Post Title Display\nDESCRIPTION: Simplified Twig syntax for displaying post titles using Timber.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<h1 class=\"article-h1\">{{ post.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig template with Timber\nDESCRIPTION: Basic PHP code for rendering a Twig template with Timber. Creates a context array with a headline and passes it to the template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = array();\n$context['headline'] = 'Welcome to my new Timber Blog!';\n\nTimber::render( 'welcome.twig', $context );\n```\n\n----------------------------------------\n\nTITLE: Advanced Single Post Template with Blocks\nDESCRIPTION: Enhanced single post template demonstrating block usage and template inheritance.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/theming.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% extends \"single.twig\" %}\n\n{% block headline %}\n    <h1><img src=\"/wp-content/uploads/2014/05/jareds-face.jpg\" alt=\"Jared's Mug\"/></h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Samples with Pretags Filter in Twig\nDESCRIPTION: This snippet illustrates how to format code samples using the pretags filter in Twig.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/cookbook-text.md#2025-04-23_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"code-sample\">{{ post.code_samples|pretags }}</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating to WordPress plugins directory\nDESCRIPTION: Command to change to the WordPress plugins directory. This is the first step in manual installation of the Timber plugin.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/video-tutorials.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/Sites/mywordpress/wp-content/plugins\n```\n\n----------------------------------------\n\nTITLE: Using Date Display in Twig\nDESCRIPTION: Shows how to use the custom date_display method in Twig templates\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# With your default date format #}\n{{ post.date_display }}\n\n{# With a different format #}\n{{ post.date_display('F j') }}\n```\n\n----------------------------------------\n\nTITLE: Sponsor Display in Twig\nDESCRIPTION: Shows how to display event sponsors using Twig templates\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-timber.md#2025-04-23_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% set sponsors = get_posts(post.meta('sponsors')) %}\n\n{% if sponsors is not empty %}\n    <h2>Many thanks to our generous sponsors</h2>\n\n    <ul>\n        {% for post in sponsors %}\n            <li>{{ sponsor.title }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Updated Timber::get_term() Function Signatures\nDESCRIPTION: Comparison of old and new function signatures for get_term() showing simplified parameters.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/upgrade-guides/2.0.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction get_term($term, $taxonomy = 'post_tag', $TermClass = 'Timber\\Term')\n{\n};\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction get_term($term = null)\n{\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Using Twig File in Timber\nDESCRIPTION: This snippet shows how to implement a sidebar using a Twig file in Timber. It includes creating a Twig file for the sidebar, populating it from the main PHP file, and rendering it in the final Twig template.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/sidebars.md#2025-04-23_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# views/sidebar-related.twig #}\n<h3>Related Stories</h3>\n{% for post in related %}\n\t<h4><a href=\"{{post.get_path}}\">{{post.post_title}}</a></h4>\n{% endfor %}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* single.php */\n$context = Timber::context();\n$post = new Timber\\Post();\n$post_cat = $post->get_terms('category');\n$post_cat = $post_cat[0]->ID;\n$context['post'] = $post;\n\n$sidebar_context = array();\n$sidebar_context['related'] = Timber::get_posts('cat='.$post_cat);\n$context['sidebar'] = Timber::get_sidebar('sidebar-related.twig', $sidebar_context);\nTimber::render('single.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# single.twig #}\n<aside class=\"sidebar\">\n\t{{sidebar}}\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Sidebar in Timber with WordPress Widgets\nDESCRIPTION: This snippet demonstrates how to use WordPress's built-in dynamic sidebar tools (Widgets) in Timber. It shows how to get and render dynamic widgets in PHP and Twig files.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/guides/sidebars.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = array();\n$context['dynamic_sidebar'] = Timber::get_widgets('dynamic_sidebar');\nTimber::render('sidebar.twig', $context);\n```\n\nLANGUAGE: twig\nCODE:\n```\n<aside class=\"my-sidebar\">\n{{dynamic_sidebar}}\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template\nDESCRIPTION: Simple Twig template with static content\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/getting-started/introduction.md#2025-04-23_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<h1>A Timber Tutorial</h1>\n```\n\n----------------------------------------\n\nTITLE: Displaying Post Thumbnail in Traditional WordPress\nDESCRIPTION: This PHP snippet shows how to display a post thumbnail in a traditional WordPress theme. It retrieves the thumbnail ID, gets the URL, and outputs an img tag.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/index.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$thumb_id = get_post_thumbnail_id($post->ID);\n$url = wp_get_attachment_url($thumb_id);\n\n?>\n\n<img\n    src=\"<?php echo $url; ?>\"\n    alt=\"Thumbnail for <?php echo $post->post_title; ?>\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Composer Autoloader and Initializing Timber in PHP\nDESCRIPTION: PHP code to load the Composer autoloader and initialize Timber. This should be added at the top of the functions.php file in the WordPress theme.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v1/getting-started/switch-to-composer.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Load Composer dependencies.\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$timber = new Timber\\Timber();\n```\n\n----------------------------------------\n\nTITLE: Multiline Filter Declaration in Timber\nDESCRIPTION: Example showing how to format a filter declaration across multiple lines for better readability when the line would be too long. This maintains code style while improving readability.\nSOURCE: https://github.com/timber/timber/blob/2.x/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Filters …\n */\n$force = apply_filters_deprecated(\n    'timber_force_transients',\n    array( $force ),\n    '2.0.0',\n    'timber/transient/force_transients'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Filters in Templates\nDESCRIPTION: Examples of using the custom price and slugify filters in Twig templates to format values and generate slugs.\nSOURCE: https://github.com/timber/timber/blob/2.x/docs/v2/guides/extending-twig.md#2025-04-23_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<h2 id=\"{{ post.title|slugify }}\">{{ post.title }}</h2>\n\n<span class=\"price\">{{ post.meta('price')|price }}</span>\n```"
  }
]